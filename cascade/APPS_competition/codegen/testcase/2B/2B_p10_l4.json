[
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"5\"\nassert solution(\"8\") == \"9\"\nassert solution(\"4\") == \"5\"\nassert solution(\"6\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '5'\nassert solution('8') == '9'\nassert solution('4') == '5'\nassert solution('6') == '5'\nassert solution('5') == '5'"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(s) == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3\") == \"5\"\nassert solution(\"8\\n( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"4\\n( 12 3 )\") == \"36\"\nassert solution(\"6\\n( ( 2 ) )\") == \"5\"\nassert solution(\"6\\n( ( ( 2 3 ) ) )\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n2 3\n3 5\n1 2 3''') == '10'\nassert solution('''4\n( 2 ( 3 ) )\n3\n4\n5''') == '100'\nassert solution('''2\n2 ( )\n3\n4''') == '10'\nassert solution('''8\n( ( 2 ) )\n3\n4\n5\n6\n7\n8\n9\n10''') == '100'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '5'\nassert solution('8') == '9'\nassert solution('4') == '5'\nassert solution('6') == '5'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '5'\nassert solution('8') == '9'\nassert solution('4') == '5'\nassert solution('6') == '5'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n2 3\n''') == '5'\nassert solution('''\n8\n( 2 ( 2 1 ) ) 3\n''') == '9'\nassert solution('''\n4\n( 12 3 )\n''') == '36'\nassert solution('''\n6\n( ( 2 3 ) )\n''') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n2 3\nSample Output 1:\n5\n\nSample Input 2:\n8\n( 2 ( 2 1 ) ) 3\nSample Output 2:\n9\n\nSample Input 3:\n4\n( 12 3 )\nSample Output 3:\n36\n\nSample Input 4:\n6\n( 2 ) ( 3 )\nSample Output 4:\n5\n\nSample Input 5:\n6\n( ( 2 3 ) )\nSample Output 5:\n5\n''') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"5\"\nassert solution(\"4\") == \"5\"\nassert solution(\"8\") == \"9\"\nassert solution(\"6\") == \"5\"\nassert solution(\"10\") == \"35\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"610\") == \"3\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"981\") == \"2\""
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"610\") == \"4\"\nassert solution(\"981\") == \"2\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''0''') == '0'\nassert solution('''009990001''') == '3'\nassert solution('''29998''') == '5'\nassert solution('''610''') == '4'\nassert solution('''981''') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''0''') == '0'\nassert solution(''''0''') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n0\nSample Output 2:\n3\n\nSample Input 4:\n29998\nSample Output 4:\n5\n\nSample Input 5:\n610\nSample Output 5:\n4\n\nSample Input 6:\n981\nSample Output 6:\n2\n''') == '4'\nprint(solution('''\n0\nSample Output 2:\n3\n\nSample Input 4:\n29998\nSample Output 4:\n5\n\nSample Input 5:\n610\nSample Output 5:\n4\n\nSample Input 6:\n981\nSample Output 6:\n2\n''') == '4')"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n0\n''') == '0'\nassert solution('''\n009990001\n''') == '3'\nassert solution('''\n29998\n''') == '5'\nassert solution('''\n610\n''') == '4'\nassert solution('''\n981\n''') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\nprint('solution check passed')"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    3\n    2017 4 0\n    2017 8 12000\n    2018 8 42000\n    ''') =='seems legit'\nassert solution('''\n    3\n    2017 4 0\n    2017 8 12000\n    2018 8 42000\n    ''') == 'insufficient service'\nassert solution('''\n    2\n    2017 11 0\n    2018 1 1000\n    ''') == 'tampered odometer'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') == \"seems legit\"\nassert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') == \"tampered odometer\"\nassert solution('''\n2\n2017 11 0\n2018 1 1000\n''') == \"insufficient service\"\n''')\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"seems legit\"\nassert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"insufficient service\"\nassert solution(\"\"\"\n1\n2017 11 0\n2018 1 1000\n\"\"\") == \"tampered odometer\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') =='seems legit'\nassert solution('2') == 'insufficient service'\nassert solution('3') == 'tampered odometer'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') =='seems legit'\nassert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') == 'insufficient service'\nassert solution('''\n2\n2017 11 0\n2018 1 1000\n''') == 'tampered odometer'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') =='seems legit'\nassert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') == 'insufficient service'\nassert solution('''\n2\n2017 11 0\n2018 1 1000\n''') == 'tampered odometer'"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') =='seems legit'\nassert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') == 'insufficient service'\nassert solution('''\n2\n2017 11 0\n2018 1 1000\n''') == 'tampered odometer'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"seems legit\"\nassert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"tampered odometer\"\nassert solution(\"\"\"\n2\n2017 11 0\n2018 1 1000\n\"\"\") == \"insufficient service\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    3\n    2017 4 0\n    2017 8 12000\n    2018 8 42000\n''') == \"seems legit\"\nassert solution('''\n    3\n    2017 4 0\n    2017 8 12000\n    2018 8 42000\n''') == \"insufficient service\"\n\nassert solution('''\n    2\n    2017 11 0\n    2018 1 1000\n''') == \"tampered odometer\""
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') =='seems legit'\nassert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') =='seems legit'\nassert solution('''\n2\n2017 11 0\n2018 1 1000\n''') =='seems legit'\nassert solution('''\n2\n2017 1 0\n2018 1 1000\n''') == 'insufficient service'\nassert solution('''\n1\n2017 1 0\n2017 2 0\n''') == 'insufficient service'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n1 2\n0 2 3\n0 1\n1\nSample Output 2:\n2''') == '3'\nprint(solution('''6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\n'''))\nprint(solution('''5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\nSample Output 3:\n2'''))\nprint(solution('''4\n1 2 3\n0 2 3\n0 1 3\n1\nSample Output 4:\n4'''))\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '4\\n1 2\\n0 2 3\\n0 1\\n1\\n0 1\\n0 1\\nSample Input 4:') == '3'\nassert solution(\n    '5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n0 1\\nSample Input 4:') == '2'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\") == \"3\", \"Wrong answer\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\") == \"2\", \"Wrong answer\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\") == \"2\", \"Wrong answer\"\n\n\"\"\""
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2\\n0 2 3\\n0 1\\n1\\n') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\nSample Output 2') == '2'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\nSample Output 3') == '2'"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == \"2\"\ninput()"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"4\""
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '3'\nassert solution('5') == '2'\nassert solution('6') == '4'\nassert solution('4') == '3'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n1\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\nSample Output 4:\") == \"4\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 4\\n0 2 3\\n0 1\\n1') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\nSample Output 4') == '4'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 3 4\\n0 2 3\\n0 1 3\\n1') == '3'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4') == '2'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\nassert solution('''\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == '3'\nassert solution('''\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 700 10000\n''') == '3'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nBLUE 1 5000\nRED 5001 10000\n''') == \"2\"\nassert solution('''\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == \"3\"\nassert solution('''\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == \"3\"\nassert solution('''\nBLUE 1 4000\nRED 4002 10000\n''') == \"IMPOSSIBLE\"\n\nprint(solution('''\nBLUE 1 4000\nRED 4002 10000\n'''))"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\\n\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\\nWHITE 7000 10000\\n\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\\nGREEN 7000 10000\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\nassert solution('''\n2\nBLUE 1 6000\nRED 5001 10000\nWHITE 700000 10000\n''') == '3'\nassert solution('''\n3\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == '3'\nassert solution('''\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == '4'\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\nassert Solution().solution('''\n1\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n    1\n    BLUE 1\n    RED 5001\n    \"\"\") == \"2\"\n\nassert solution(\"\"\"\n    2\n    BLUE 1\n    RED 5001\n    GREEN 800\n    \"\"\") == \"3\"\n\nassert solution(\"\"\"\n    3\n    BLUE 1\n    RED 5001\n    GREEN 800\n    WHITE 10000\n    \"\"\") == \"4\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''BLUE 1 5000\nRED 5001 10000''') == \"2\"\nassert solution('''BLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000''') == \"3\"\nassert solution('''BLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000''') == \"3\"\nassert solution('''BLUE 1 4000\nRED 4002 10000\nWHITE 7000 10000''') == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\nassert solution('''\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == '3'\nassert solution('''\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 700 10000\n''') == '4'\nassert solution('''\n2\nBLUE 1 4000\nRED 4002 10000\n''') == 'IMPOSSIBLE'\nassert solution('''\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\nBLUE 1 5000\nRED 5001 10000\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n2\nBLUE 1 4000\nRED 5002 10000\n\"\"\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == 0\nassert solution(\"A\") == 1\nassert solution(\"AAAA\") == 4\nassert solution(\"PRIME\") == 5\nassert solution(\"PRATTATTATTIC\") == 6\nprint('Tests done.')\n\n----Run On----\npython3 factoring.py < input.txt > output.txt\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10**6)\n\nclass factoring():\n\n    def __init__(self, n):\n        self.n = n\n        self.factoring = []\n        self.max_weight = 0\n        self.max_weight_factoring = None\n\n    def primes(self, limit):\n        self.primes = []\n        if limit <= 0:\n            raise ValueError('limit must be greater than 0')\n        self.primes.append(2)\n        for i in range(3, limit+1):\n            if all(i % j!= 0 for j in self.primes):\n                self.primes.append(i)\n        return self.primes\n\n    def get_factors(self):\n        return self.factoring\n\n    def factors(self):\n        for i in range(2, int(self.n**0.5)+1):\n            if self.n % i == 0:\n                self.factoring.append(i)\n                self.factoring.append(int(self.n/i))\n                return self.factoring\n        if self.n not in self.primes:\n            self.factoring.append(self.n)\n        return self.factoring\n\n    def get_max_weight(self):\n        if len(self.factoring) > self.max_weight:\n            self.max_weight = len(self.factoring)\n        return self.max_weight\n\n    def get_max_weight_factoring(self):\n        if len(self.factoring) > self.max_weight:\n            self.max_weight_factoring = self.factoring\n        return self.max_weight_factoring"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nABABA\n''') == '3'\nassert solution('''\nBABABA\n''') == '5'\nassert solution('''\nPRIME\n''') == '5'\nassert solution('''\nAAAAAA\n''') == '1'\nassert solution('''\nDOOODOO\n''') == '3'"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '0'\nassert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BAAABBABAAABBA') == '6'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\"\nassert solution(\"ABCD\") == \"\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\n\n'''\n\nfrom collections import Counter"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"D 2\nD 1\nE\nD 1\nD 2\nE\"\"\") == \"0\"\nassert solution(\"\"\"D 2\nD 1\nE\nD 1\nD 2\nE\"\"\") == \"1\"\nassert solution(\"\"\"I 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\"\"\") == \"0\"\nassert solution(\"\"\"I 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\"\"\") == \"1\""
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''\nD 1\nD 2\nE\nD 3\nD 1\nE\n''') == '0'\nassert solution(\n'''\nD 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution(\n'''\nI 1 X\nD 1\nE\nE\n''') == '0'\nassert solution(\n'''\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n''') == '0'\nassert solution(\n'''\nI 14 X\nI 15 X\nE\nI 14 X\nI 15 X\nE\n''') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('D 1\\nD 2\\nE') == '0'\nassert solution('D 2\\nD 1\\nE') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nD 1\nD 2\nE\nD 3\nD 1\nE\n''') == '0'\nassert solution('''\nD 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n''') == '0'\nassert solution('''\nI 14 A\nI 15 B\nE\nI 14 A\nI 15 B\nE\n''') == '1'"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\\n') == '0'\nassert solution('D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\\n') == '1'\nassert solution('I 1 X\\nD 1\\nE\\nE\\n') == '0'\nassert solution('I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\\n') == '0'\nassert solution('I 14 A\\nI 15 B\\nE\\nI 14 A\\nI 15 B\\nE\\n') == '1'"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"D 1\nD 2\nE\nD 3\nD 1\nE\n\"\"\") == \"0\"\nassert solution(\"\"\"I 1 X\nD 1\nE\nE\n\"\"\") == \"1\"\nassert solution(\"\"\"I 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\\n') == '0'\nassert solution('D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\\n') == '1'\nassert solution('I 1 X\\nD 1\\nE\\nE\\n') == '0'\nassert solution('I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\\n') == '0'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('D 2') == '0'\nassert solution('D 1') == '1'\nassert solution('E') == '0'\nassert solution('D 1') == '1'\nassert solution('D 2') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"D 1\\nD 2\\nD 1\\nD 2\\nD 1\\nE\") == \"1\"\nassert solution(\"D 2\\nD 1\\nE\") == \"1\"\nassert solution(\"I 1 X\\nD 1\\nE\") == \"0\"\nassert solution(\"I 14 B\\nI 14 A\\nE\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"D 1\nD 2\nE\nD 3\nD 1\nE\n\"\"\") == \"0\"\nassert solution(\"\"\"D 2\nD 1\nE\nD 1\nD 2\nE\n\"\"\") == \"1\"\nassert solution(\"\"\"I 1 X\nD 1\nE\nE\n\"\"\") == \"0\"\nassert solution(\"\"\"I 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n\"\"\") == \"0\"\nassert solution(\"\"\"I 14 A\nI 15 B\nE\nI 14 A\nI 15 B\nE\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 0 1 0 0 0''') == '300'\nassert solution('''5 0 1 0 1 0''') == '1900'\nassert solution('''6 0 1 1 0 0''') == '2300'\nassert solution('''10 399 0 0 0 0''') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 0 1 0 1 0\n1 0 1 1 1 1\n3 1 1 2 2 2\n4 1 1 1 2 2\n5 0 1 1 1 1''') == '1900'\nassert solution('''5 0 1 0 1 0\n1 0 1 1 1 1\n3 1 1 2 2 2\n4 1 1 1 2 2\n5 0 1 1 1 1''') == '2300'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(samples[0]) == '300'\nassert solution(samples[1]) == '1900'\nassert solution(samples[2]) == '2300'\nassert solution(samples[3]) == '399'"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 0 1 1 0 0') == '1900'\nassert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\nprint(\"All tests passed\")"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 0 1 0 1 0') == '1900'\nassert solution('4 0 1 0 0 0') == '300'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"300\"\nassert solution() == \"1900\"\nassert solution() == \"2300\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 0 1 0 0 0\nSample Output 1:\n300\n\nSample Input 2:\n5 0 1 0 1 0\nSample Output 2:\n1900\n\nSample Input 3:\n6 0 1 1 0 0\nSample Output 3:\n2300\n\nSample Input 4:\n10 399 0 0 0 0\nSample Output 4:\n399''') == '1900'"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 10') == \"2\"\nassert solution('2 10') == \"2\"\nassert solution('1 10') == \"2\"\nassert solution('2 10') == \"2\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 10\n1 12\n1 13''') == '2'\nassert solution('''2 10\n1 5\n1 4''') == '2'\nassert solution('''2 10\n1 5\n4 1''') == '2'\nassert solution('''1 10\n1 5\n4 1''') == '2'\nprint('all tests passed')"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 5 1\\n2 1\\n3\\n') == '2'\nassert solution('1\\n2\\n3\\n') == '2'\nassert solution('2\\n2\\n3\\n') == '2'\nassert solution('2\\n2\\n1\\n') == '2'"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 10\n1 12\n1 13''') == '2'\nassert solution('''2 10\n1 5\n1 12\nSample Output 4:\n2''') == '2'\nassert solution('''2 10\n1 5\n4 1\nSample Output 4:\n2''') == '2'\nassert solution('''2 10\n1 5\n1 4\nSample Output 4:\n2''') == '2'\nassert solution('''2 10\n4 3\n8 5\n5 7\nSample Output 4:\n4''') == '4'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 10\n1 12\n1 13\n''') == '2'\nassert solution('''\n2 10\n1 5\n1 12\n''') == '2'\nassert solution('''\n2 10\n1 5\n1 4\n''') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(samples[0]) == samples[1]\nassert solution(samples[1]) == samples[2]\nassert solution(samples[2]) == samples[3]\n\n---Input---\n2 10\n1 5\n1 12\n\n---Output---\n2\n\n---Input---\n2 10\n1 5\n1 4\n\n---Output---\n2\n\n---Input---\n2 10\n1 5\n4 1\n\n---Output---\n2\n\n---Input---\n2 10\n1 5\n1 4\n\n---Output---\n2\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 10') == '2'\nassert solution('1 5') == '2'\nassert solution('1 4') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 10\n1 12\n1 13\n''') == '2'\nassert solution('''\n2 10\n1 5\n1 12\n''') == '2'\nassert solution('''\n2 10\n1 5\n1 4\n''') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 10\n1 12\n1 13\n''') == \"2\"\nassert solution('''\n2 10\n1 5\n1 12\n''') == \"2\"\nassert solution('''\n2 10\n1 5\n1 4\n''') == \"2\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n10 10 5\n10 20 5\n20 10 5\n20 20 5''') == '28.970562748'\nassert solution('''2\n10 10 5\n10 20 1\n20 10 12\n20 20 8''') == '36.2842712475'\nassert solution('''6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\nSample Output 3:\n28.970562748\n''') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"28.970562748\"\nprint(solution())\n\n\n@author: xingy\n\"\"\""
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\\n') == '28.970562748'\nassert solution('4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8\\n') == '36.2842712475'\nassert solution('6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\\n') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28.970562748'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"28.970562748\"\nassert solution(\"6\") == \"32\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '28.970562748'\nassert solution('4') == '28.97'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28.970562748'\nassert solution('''\n4\n10 10 5\n10 20 1\n20 10 5\n20 20 1\n''') == '36.2842712475'\nassert solution('''\n6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"28.970562748\"\n\"\"\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28.970562748'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '28'\nassert solution('8') == '32'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n2 1 6 5\n2 5 5 4\n5 1 7 7\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n2 1 6 5\n2 5 5 4\n5 1 7 7\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 3 9 5\\n2 2 6 8') == '3'\nassert solution('3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 3 9 5\n2 2 6 8\n4 8 9 3\n''') == '3'\nassert solution('''\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\nassert solution('''\n2 4 10 8\n7 4 4 10\n2 5 8 9\n''') == '1'\nassert solution('''\n-1 -2 -1 -1\n-1 2 -1 -1\n''') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 3 9 5\\n2 2 6 8') == '3'\nassert solution('3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8') == '1'\nassert solution('3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) in [\n    '3',\n    '1',\n    '1',\n    '1',\n]\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n5''') == '1'\nassert solution('''10\n10''') == '10'\nassert solution('''55\n55''') == '55'\nassert solution('''101\n10''') == '-1'\nassert solution('''1234321\n10''') == '94708'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1234321') == '94708'\nassert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n12223\n33322111\n1232321\n''') == '94708'\nassert solution('''\n12321\n23221\n21123\n''') == '-1'\nassert solution('''\n5\n11\n1234\n4321\n123\n''') == '0'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '-1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('100') == '1'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''12321''') == '94708'\nassert solution('''55''') == '55'\nassert solution('''101''') == '-1'\nassert solution('''1234321''') == '94708'\nassert solution('''12321''') == '94708'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('55') == 55\nassert solution('10') == 10\nassert solution('101') == -1\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n10\n10\n332211\n23221\n12321\n''') == '94708'\nassert solution('''\n55\n10\n10\n332211\n23221\n12321\n''') == '55'\nassert solution('''\n101\n10\n10\n332211\n23221\n12321\n''') == '-1'\nassert solution('''\n1234321\n''') == '94708'\nassert solution('''\n1\n10\n10\n33322111\n23221\n12321\n''') == '-1'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 0 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 0 0 3') == '6'\nassert solution('1 2 0 0 4') == '0'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 6') == '4'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1 0 0 3') == '6'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 6\") == \"0\"\nassert solution(\"1 2 0 0 7\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 0 0 0 3') == '6'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2 0 0 3\n''') == '6'\nassert solution('''\n1 2 0 0 4\n''') == '4'\nassert solution('''\n1 2 0 0 5\n''') == '2'\nassert solution('''\n1 2 0 0 6\n''') == '0'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 0 0 0 3') == '6'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 0 0 0 3\n''') == '6'\n\nassert solution('''\n1 2 0 0 5\n''') == '2'\n\nassert solution('''\n1 2 0 0 4\n''') == '4'\n\nassert solution('''\n1 2 0 0 6\n''') == '0'"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\"\n\nimport sys\nimport os\nimport signal\nimport threading"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\nassert solution(\"0.5 -8 8\") == \"-4.36385220 9.46891588\""
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\nassert solution('0.5 -8 8') == '-4.36385220 9.46891588'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\nassert solution(\"0.5 -8 8\") == \"-4.36385220 9.46891588\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '1'\nassert solution('4 5') == '0'\nassert solution('3 1') == '1'\nassert solution('4 1') == '0'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"0\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"0\""
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"0\""
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 2\\n1 2\\n2 1\"\n) == \"1\"\n\nassert solution(\n    \"3 3\\n1 2\\n2 3\\n3 1\"\n) == \"0\"\n\nassert solution(\n    \"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\"\n) == \"2\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"0\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n1 2\n2 1\n''') == '1'\n\nassert solution('''\n3 3\n1 2\n2 3\n3 1\n''') == '1'\n\nassert solution('''\n4 5\n1 2\n2 3\n2 4\n3 1\n4 1\n''') == '0'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2\n1 2\n2 1\n''') == '1'\nassert solution('''3 3\n1 2\n2 3\n3 1\n''') == '1'\nassert solution('''4 5\n1 2\n2 3\n2 4\n3 1\n4 1\n''') == '0'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 2\n1 2\n2 1\n''') == '1'\nassert solution('''\n3 3\n1 2\n2 3\n3 1\n''') == '1'\nassert solution('''\n4 5\n1 2\n2 3\n2 4\n3 1\n4 1\n''') == '0'\nassert solution('''\n4 5\n1 2\n2 3\n2 4\n3 1\n4 1\n''') == '2'\n\n\"\"\"\nhttps://adventofcode.com/2016/day/8\n\"\"\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 3') == '1'\nassert solution('4 5') == '0'"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5 0 3') == '11'\nassert solution('5 5 0 4') == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n''') == '11'\nassert solution('''\n5 5 0 4\n0 1 1\n1 0 1\n1 2 1\n2 0 4\n2 3 1\n2 3 3\n''') == 'infinity'\nassert solution('''\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\n''') == '2'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\\n1 2 1\\n2 3 1\\n\") == \"2\""
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\"\n) == \"11\"\nassert solution(\n    \"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\"\n) == \"infinity\"\nassert solution(\n    \"3 3 1 2\\n0 1 1\\n1 0 1\\n1 2 1\\nSample Output 4: infinity\\n\"\n) == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5 0 3') == \"11\"\nassert solution('3 5 0 4') == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5 0 3\") == \"infinity\"\nassert solution(\"5 5 0 3\") == \"11\"\nassert solution(\"2 5 0 4\") == \"infinity\"\nassert solution(\"5 5 0 4\") == \"infinity\"\nassert solution(\"3 3 1 2\") == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5 0 3') == \"11\"\nassert solution('5 5 0 4') == \"infinity\"\nassert solution('5 5 0 3') == \"infinity\""
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n''') == '11'\nassert solution('''\n5 5 0 4\n0 1 1\n1 2 1\n2 3 1\n3 0 1\n2 4 1\n''') == 'infinity'\nassert solution('''\n2 1 0 1\n0 1 2\n''') == '2'\nassert solution('''\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\n''') == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n''') == '11'\nassert solution('''\n5 5 0 4\n0 1 1\n1 2 1\n2 3 1\n3 0 1\n2 4 1\n''') == 'infinity'\nassert solution('''\n2 1 0 1\n0 1 2\n''') == '2'\nassert solution('''\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\nSample Output 4:\ninfinity\n''') == 'infinity'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 2 1 2\n1 1\n2 2 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3 3 1 1\n1 1\n2 2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 2 2 3\n1 1\n2 2 3\n\"\"\") == \"18\""
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 2\") == \"6\"\nassert solution(\"3 3 1 1\") == \"0\"\nassert solution(\"3 2 2 3\") == \"18\"\n\ninput_string = stdin.readline()\ninput_strings = input_string.split(\" \")\nn = int(input_strings[0])\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"5 2 1 2 1\"\n    \"2 1 2\"\n    \"2 3 4\"\n) == \"6\"\nassert solution(\n    \"3 3 1 1\"\n    \"1 1\"\n    \"2 2 3\"\n) == \"0\"\nassert solution(\n    \"3 2 2 3\"\n    \"1 1\"\n    \"2 2 3\"\n) == \"18\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\\n\") == \"6\"\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\\n\") == \"0\"\nassert solution(\"3 2 2 3\\n1 1\\n2 2 3\\n\") == \"18\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2 1 2 1\\n2 1 2\\n2 3 4') == '6'\nassert solution('3 3 1 1\\n1 1\\n2 2 3') == '0'\nassert solution('3 2 2 3\\n1 1\\n2 2 3') == '18'"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 2 1 2 1\n2 1 2\n2 3 4\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n3 3 1 1\n1 1\n2 2 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3 2 2 3\n1 1\n2 2 3\n\"\"\") == \"18\"\n\nassert solution(\"\"\"\n4 2 1 2 1\n2 1 2\n2 3 4\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2 1 2\n2 1 2\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3 3 1 1\n1 1\n2 2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 3 1 1\n1 1\n2 2 3\n\"\"\") == \"18\""
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 1 2 1') == '6'\nassert solution('3 3 1 1') == '0'\nassert solution('3 2 2 3') == '18'\nassert solution('3 1 2 3') == '12'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 1 1') == '6'\nassert solution('3 3 1 1') == '12'\nassert solution('3 2 2 3') == '0'\nassert solution('3 1 2 3') == '0'\nassert solution('4 2 1 2 1') == '6'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2 1 2 1') == '6'\nassert solution('3 3 1 1') == '0'\nassert solution('3 2 2 3') == '18'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1000000 1\n''') == '468559'\nassert solution('''\n1000000 5\n''') == '49401'\nassert solution('''\n1000000 16\n''') == '20'\nassert solution('''\n9000000000000000000 62\n''') == '1'\nassert solution('''\n1000000 0\n''') == '0'\n''') == '0'\n'''\n1000000 1000000\n4000000\n''') == '1000000'\n'''\n1000000 0\n0\n''') == '0'\n'''"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\nassert solution(\"100000\") == \"1\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1000000 1\nSample Output 1:\n468559\nSample Input 2:\n1000000 5\nSample Output 2:\n49401\nSample Input 3:\n1000000 16\nSample Output 3:\n20\nSample Input 4:\n9000000000000000000 62\nSample Output 4:\n1''') == '49401'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\""
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1000000 1''') == '468559'\nassert solution('''1000000 5''') == '49401'\nassert solution('''1000000 16''') == '20'\nassert solution('''9000000000000000000 62''') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1000000 1') == '468559', 'TEST 1'\nassert solution('1000000 5') == '49401', 'TEST 2'\nassert solution('1000000 16') == '20', 'TEST 3'\nassert solution('9000000000000000000 62') == '1', 'TEST 4'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n123\n''') == '1'\nassert solution('''\n12345\n''') == '2'\nassert solution('''\n99999999999999999999999999999\n''') == '2'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"49401\"\nassert solution(\"1000000\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 9\") == \"1\"\nassert solution(\"4 13\") == \"3\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 9\n5 4 1\n''') == '1'\nassert solution('''\n4 13\n2 2 2 2\n''') == '3'\nassert solution('''\n18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n''') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 9') == '1'\nassert solution('4 13') == '3'\nassert solution('18 90') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 9\n5 4 1\n''') == '1'\nassert solution('''4 13\n2 2 2 2\n''') == '3'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(f\"{sys.argv[1]} {sys.argv[2]}\") == \"1\"\nassert solution(f\"{sys.argv[1]} {sys.argv[2]}\") == \"2\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 9\n5 4 1\n''') == '1'\nassert solution('''4 13\n2 2 2 2\n''') == '3'\nassert solution('''18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n''') == '12'"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 9\") == \"1\"\nassert solution(\"4 13\") == \"3\"\nassert solution(\"18 90\") == \"12\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == '1'\nassert solution('3 9') == '1'\nassert solution('4 13') == '3'\nassert solution('18 90') == '12'"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 9\") == \"1\"\nassert solution(\"4 13\") == \"3\"\nassert solution(\"18 90\") == \"12\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\nassert solution('5') == '7'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0'\nassert solution('4 7 8') == '3'\nassert solution('5 2 3 4 5 8') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n1\n''') == '0'\nassert solution('''\n3\n4 7 8\n''') == '3'\nassert solution('''\n5\n2 3 4 5 8\n''') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '3'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '3'"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '3'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n1\n''') == '0', 'Big data test case'\nassert solution('''\n3\n4 7 8\n''') == '3', 'Big data test case'\nassert solution('''\n5\n2 3 4 5 8\n''') == '5', 'Big data test case'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n1\nSample Input 4:\n2\n3 5\nSample Output 4:\n0\n''') == '0', 'First'\nassert solution('''\n3\n3 9 6\nSample Output 5:\n6\n''') == '6', 'Second'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == '11112'"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '1'\nassert solution('5') == '2'\nassert solution
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\nprint('All test cases passed')\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == '-1'"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"d 4\\ncab\\ncda\\ccc\\badca\\n\") == \"adcb\"\nassert solution(\"c 4\\nabc\\nbca\\ncab\\aca\\n\") == \"IMPOSSIBLE\"\nassert solution(\"f 2\\ndea\\cfb\\n\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"b\") == \"ad\"\nassert solution(\"c\") == \"cb\"\nassert solution(\"d\") == \"db\"\nassert solution(\"e\") == \"ed\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"d 4\\n\" +\n                \"cab\\n\" +\n                \"cda\\n\" +\n                \"ccc\\n\" +\n                \"badca\\n\") == \"adcb\"\n\nassert solution(\"c 4\\n\" +\n                \"abc\\n\" +\n                \"bca\\n\" +\n                \"cab\\n\" +\n                \"aca\\n\") == \"IMPOSSIBLE\"\n\nassert solution(\"f 2\\n\" +\n                \"dea\\n\" +\n                \"cfb\\n\") == \"AMBIGUOUS\"\n\n'''"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"d 4\\ncab\\ncda\\nccc\\nbadca\\n\") == \"adcb\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'IMPOSSIBLE'\n\"\"\"\nfrom collections import defaultdict\n\ninput_string = input()\n\nalpha = 'abcdefghijklmnopqrstuvwxyz'\nfirst_letter = input_string[0]"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nd 4\ncab\ncda\nccc\nbadca\n''') == 'adcb'\nassert solution('''\nc 4\nabc\nbca\ncab\naca\n''') == 'IMPOSSIBLE'\nassert solution('''\nf 2\ndea\ncfb\n''') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"adcb\"\nassert solution(\"3 3\") == \"IMPOSSIBLE\"\n\"\"\""
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''c 4\nabc\nbca\ncab\naca''') == \"adcb\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('d 4\\ncab\\ncda\\nccc\\nbadca\\n') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\ncab\\naca\\n') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb\\n') == 'AMBIGUOUS'"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('d 4\\ncab\\nccc\\nbadca\\n') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\ncab\\naca\\n') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb\\n') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'\nprint('All tests passed!')"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n\nprint(solution(*input().split()))\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '6'\nassert solution('2 5 2') == '8'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 3 3 3\n''') == '9'\nassert solution('''\n10 20 0 0\n''') == '10'\nassert solution('''\n100 20 543 12\n''') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 3 3') == \"9\"\nassert solution('10 20 0 0') == \"10\"\nassert solution('100 20 543 12') == \"164\"\n\n\"\"\"\n\nN, A, B, C = map(int, stdin.readline().split())\n\na = N//2\nb = N//2\nc = N//2"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3 3 3''') == '9'\nassert solution('''10 20 0 0''') == '10'\nassert solution('''100 20 543 12''') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 3 3 3\n''') == '9'\nassert solution('''\n10 20 0 0\n''') == '10'\nassert solution('''\n100 20 543 12\n''') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"9\"\nassert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2 3') == 'yes'\nassert solution('4 3 3') == 'no'\nassert solution('3 2 3') == 'yes'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 0\\n-1 0\") == \"no\"\nassert solution(\"2 1 0\\n0 -1\") == \"yes\"\nassert solution(\"2 1 0\\n1 1 0\") == \"yes\"\nassert solution(\"3 2 3\\n0 1\\n1 2\\n-1 2\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0\") == \"no\"\nassert solution(\"3 2 3\\n0 1\\n1 2\\n-1 2\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0\") == \"yes\""
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"yes\"\nassert solution(\"4 2 3\") == \"no\"\nassert solution(\"4 3 3\") == \"no\"\nassert solution(\"4 1 3\") == \"no\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\") == \"yes\"\nassert solution(\"4 3 3\") == \"no\""
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0\n''') == 'yes'\n\nassert solution('''\n3 2 3\n2 1\n0 0\n-1 -2\n1 1 -2\n3 6 12\nSample Output 3:\nno\n''') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0\n''') == 'yes'\nassert solution('''4 3 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0\n''') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0''') == 'no'\nassert solution('''4 2 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0''') == 'yes'\nassert solution('''3 4 2 3\n2 1\n0 0\n-1 -2\n1 1 -2\n3 6 12\nSample Output 4:\nno''') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 3\\n0 1\\n1 0') == 'yes'\nassert solution('4 3 3\\n0 1\\n1 0\\n-1 0\\n0 -1') == 'no'\nassert solution('3 3 3\\n2 1\\n0 0\\n-1 -2') == 'yes'\nassert solution('2 4 4\\n1 1\\n-1 -2\\n0 -1\\n-1 1 1') == 'no'\nassert solution('3 4 4\\n0 1\\n1 2\\n-1 2\\n0 -1\\n-1 1 -2') == 'yes'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0\") == \"yes\"\nassert solution(\"4 3 3\\n0 1\\n1 2\\n-1 2\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0\") == \"no\"\nprint('Test passed')\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0\") == \"yes\"\nassert solution(\"3 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"no\"\nassert solution(\"4 3 3\\n0 1\\n1 2\\n-1 2\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0\") == \"yes\""
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == \"1\"\nassert solution(sys.stdin.read()) == \"7\"\nassert solution(sys.stdin.read()) == \"4\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(solution) == '1'\n\n\"\"\""
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sample_input_1) == \"4\"\nassert solution(sample_input_2) == \"7\"\nassert solution(sample_input_3) == \"1\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n9\n''') == '1'\nassert solution('''\n12121131221\n''') == '7'\nassert solution('''\n123456789\n''') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"123456789\") == \"1\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"123456789\") == \"1\"\nassert solution(\"123456789012345678901234567890123456789\") == \"2\"\nassert solution(\"12345678901234567890\") == \"2\"\nassert solution(\"12345678901234567890-\") == \"1\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 1\n1 2\n''') == '0'\nassert solution('''\n1 1\n1 2\n''') == '0'\nassert solution('''\n4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n''') == '24'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\nassert solution('''\n4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n''') == '24'\nassert solution('''\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800'\nassert solution('''\n7 8\n100 100 100 100 100 100 100\n1 3\n2 3\n3 4\n4 5\n5 6\n6 7\n6 8\n1 4\n2 4\n3 4\n4 5\n5 6\n6 7\n6 8\n''') == '20000'\nassert solution('''\n10 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n6 8\n7 9\n8 10\n9 11\n10 12\n1 3\n2 3\n3 4\n4 5\n5 6\n6 7\n6 8\n7 9\n8 10\n9 11\n10 12\n1 4\n2 4\n3 4\n4 5\n5 6\n6 7\n6 8\n7 9\n8 10\n9 11\n10 12\n1 5\n2 5\n3 5\n4 5\n5 6\n6 7\n6 8\n7 9\n8 10\n9 11\n10 12\n1 6\n2 6\n3 6\n4 6\n5 6\n6 7\n6 8\n7 9\n8 10\n9 11\n10 12\n1 7\n2 7\n3 7\n4 7\n5 7\n6 7\n6 8\n7 9\n8 10\n9 11\n10 12\n1 8\n2 8\n3 8\n4 8\n5 8\n6 8\n6 8\n7 9\n8 10\n9 11\n10 12\n1 9\n2 9\n3 9\n4 9\n5 9\n6 9\n6 8\n7 9\n8 10\n9 11\n10 12\n1 10\n2 10\n3 10\n4 10\n5 10\n6 10\n6 8\n7 9\n8 10\n9 11\n10 12\n1 11\n2 11\n3 11\n4 11\n5 11\n6 11\n6 8\n7 9\n8 10\n9 11\n10 12\n1 12\n2 12\n3 12\n4 12\n5 12\n6 12\n6 8\n7 9\n8 10\n9 11\n10 12\n1 13\n2 13\n3 13\n4 13\n5 13\n6 13\n6 8\n7 9\n8 10\n9 11\n10 12\n1 14\n2 14\n3 14\n4 14\n5 14\n6 14\n6 8\n7 9\n8 10\n9 11\n10 12\n1 15\n2 15\n3 15\n4 15\n5 15\n6 15\n6 8\n7 9\n8 10\n9 11\n10 12\n1 16\n2 16\n3 16\n4 16\n5 16\n6 16\n6 8\n7 9\n8 10\n9 11\n10 12\n1 17\n2 17\n3 17\n4 17\n5 17\n6 17\n6 8\n7 9\n8 10\n9 11\n10 12\n1 18\n2 18\n3 18\n4 18\n5 18\n6 18\n6 8\n7 9\n8 10\n9 11\n10 12\n1 19\n2 19\n3 19\n4 19\n5 19\n6 19\n6 8\n7 9\n8 10\n9 11\n10 12\n1 20\n2 20\n3 20\n4 20\n5 20\n6 20\n6 8\n7 9\n8 10\n9 11\n10 12\n1 21\n2 21\n3 21\n4 21\n5 21\n6 21\n6 8\n7 9\n8 10\n9 11\n10 12\n1 22\n2 22\n3 22\n4 22\n5 22\n6 22\n6 8\n7 9\n8 10\n9 11\n10 12\n1 23\n2 23\n3 23\n4 23\n5 23\n6 23\n6 8\n7 9\n8 10\n9 11\n10 12\n1 24\n2 24\n3 24\n4 24\n5 24\n6 24\n6 8\n7 9\n8 10\n9 11\n10 12\n1 25\n2 25\n3 25\n4 25\n5 25\n6 25\n6 8\n7 9\n8 10\n9 11\n10 12\n1 26\n2 26\n3 26\n4 26\n5 26\n6 26\n6 8\n7 9\n8 10\n9 11\n10 12\n1 27\n2 27\n3 27\n4 27\n5 27\n6 27\n6 8\n7 9\n8 10\n9 11\n10 12\n1 28\n2 28\n3 28\n4 28\n5 28\n6 28\n6 8\n7 9\n8 10\n9 11\n10 12\n1 29\n2 29\n3 29\n4 29\n5 29\n6 29\n6 8\n7 9\n8 10\n9 11\n10 12\n1 30\n2 30\n3 30\n4 30\n5 30\n6 30\n6 8\n7 9\n8 10\n9 11\n10 12\n1 31\n2 31\n3 31\n4 31\n5 31\n6 31\n6 8\n7 9\n8 10\n9 11\n10 12\n1 32\n2 32\n3 32\n4 32\n5 32\n6 32\n6 8\n7 9\n8 10\n9 11\n10 12\n1 33\n2 33\n3 33\n4 33\n5 33\n6 33\n6 8\n7 9\n8 10\n9 11\n10 12\n1 34\n2 34\n3 34\n4 34\n5 34\n6 34\n6 8\n7 9\n8 10\n9 11\n10 12\n1 35\n2 35\n3 35\n4 35\n5 35\n6 35\n6 8\n7 9\n8 10\n9 11\n10 12\n1 36\n2 36\n3 36\n4 36\n5 36\n6 36\n6 8\n7 9\n8 10\n9 11\n10 12\n1 37\n2 37\n3 37\n4 37\n5 37\n6 37"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 3\n1\n1 2\n2 3\n1 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n\"\"\") == \"24\"\nassert solution(\"\"\"\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n\"\"\") == \"800\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"1 1\\n\"\n    \"2 3\"\n) == \"0\"\nassert solution(\n    \"2 3\\n\"\n    \"2 3\"\n) == \"0\"\nassert solution(\n    \"3 3\\n\"\n    \"1 2\"\n) == \"24\"\nassert solution(\n    \"4 4\\n\"\n    \"24 10\"\n) == \"24\"\nassert solution(\n    \"6 8\\n\"\n    \"100 500 300 75\\n\"\n    \"1 3\\n\"\n    \"1 4\\n\"\n    \"3 6\\n\"\n    \"4 5\\n\"\n    \"3 5\\n\"\n    \"4 6\\n\"\n    \"2 5\\n\"\n    \"2 6\\n\"\n) == \"800\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4\\n24 10\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n') == '24'\nassert solution('5 5\\n1 2\\n2 3\\n2 3\\n3 4\\n3 4\\n') == '18'\nassert solution('8 10\\n1 2 3 4 5 6 7 8\\n1 3\\n1 4\\n2 3\\n2 4\\n3 5\\n4 5\\n4 6\\n5 6\\n') == '36'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\nassert solution('''\n4 4\n24 10\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '24'\nassert solution('''\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800'"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 2') == '0'\nassert solution('3 3') == '0'\nassert solution('4 4') == '24'\nassert solution('5 5') == '24'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3 3\n1\n1 2\n2 3\n1 3\n\"\"\") == \"0\"\nassert solution(\n\"\"\"\n4 4\n24 10\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n\"\"\") == \"24\"\nassert solution(\n\"\"\"\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n\"\"\") == \"800\""
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 8') == '800'\nassert solution('5 5') == '400'\nassert solution('10 9') == '900'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"0\"\nassert solution(\"4 4\") == \"24\"\nassert solution(\"6 8\") == \"800\"\nprint('\u2705 Passed all test cases.')"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1 2 3 4\"\n\"\"\""
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 2 4\") == \"1 4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\") == \"2 1 3 4\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"1 4\""
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '1 2 3 4'\nassert solution('5 6 4 3') == '-1'\nassert solution('1 3 2 4') == '1 2 3 4'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 2 4\") == \"1 4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 3 4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 2 4\\n\") == \"1 4\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\\n\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == '1 4'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2 3\n''') == '1 2 3'\nassert solution('''5\n1 2 3 4 5\n''') == '1 2 3 4 5'\nassert solution('''4\n1 2 3 4\n''') == '-1'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"1 4\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '-1'\nassert solution([1, 2, 3, 4, 5]) == '1 2 3 4 5'\nassert solution([1, 2, 3, 4]) == '-1'\n\"\"\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"4 8\\n\"\n    \".#####.\\n\"\n    \".######.\\n\"\n    \"..#..#..\\n\"\n    \"Sample Output 1: 5\\n\"\n    \"Sample Input 2: 3 3\\n\"\n    \".#.\\n\"\n    \".#.\\n\"\n    \"#.\\n\"\n    \"Sample Output 2: 1\\n\"\n    \"Sample Input 3: 2 6\\n\"\n    \".#####.\\n\"\n    \"#####.#\\n\"\n    \"Sample Output 3: 5\"\n) == \"5\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3\\n.#####\\n#####.\\n') == '1'\nassert solution('10 10\\n..###.\\n#####.\\n#####.\\n###.##\\n###.##\\n#####.\\n###.##\\n###.##\\n#####.\\n..#.##\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n#.####\\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 8') == '8'\nassert solution('3 3') == '1'\n\n----Hints----\nUse of recursion, depth first search, and memoization.\n'''"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n.##.\\n.##.') == '3'\nassert solution('1\\n1\\n##.\\n##.') == '2'\n\n'''\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 8\") == \"8\"\nassert solution(\"5 7\") == \"5\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n.#.\n#####\n''') == '1'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"2\\n\") == \"1\"\nassert solution(\"3\\n\") == \"1\"\nassert solution(\"4\\n\") == \"2\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3\\n.###.\\n.###.\\n.###.\\n1 3\\n.###.\\n.###.\\n.###.\\n1 3\\n.###.\\n.###.\\n.###.\\n.###.\\n.###.\\n.###.\\n.###.') == '5'\nprint('All tests passed!')\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 8') == '8'\nassert solution('2 6') == '5'\n\nThe above input values are not the only possible inputs. You may also consider the following inputs:\n\n    4 6\n    .##.\n    ...\n    .##.\n    ...\n    .##.\n    ...\n    .##.\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    #.#\n    ...\n    "
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 2') == '5'\nassert solution('6 3') == '4'\nassert solution('4 4') == '0'"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"6\"\nassert solution() == \"19 12 2 18 5 5\"\nassert solution() == \"13\"\nassert solution() == \"4 2 6 1 9 7 5 5 7 1 2 3 3\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5 5') == '6'\nassert solution('3 3 3') == '13'\nassert solution('3 2 2') == '4 2 6 1 9 7 5 5 7 1 2 3 3'"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3\\n4 5 6') == '6'\nassert solution('3 3\\n1 2\\n2 1\\n1 3') == '13'\nassert solution('4 4\\n3 1\\n2 1\\n1 3') == '11'\n\n---Source---\n\nhttps://algoexpert.io/questions/Longest%20Increasing%20Subsequence\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"./examples/primonimo/primonimo.in\") == \"13\"\nassert solution(\"./examples/primonimo/primonimo2.in\") == \"2\"\nassert solution(\"./examples/primonimo/primonimo3.in\") == \"-1\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1') == '6\\n19 12 2 18 5 5'\nassert solution('3 3 3\\n3 1 3 3 1\\n1 3 3 3 2\\n3 2 3 3 3') == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\"\nassert solution(\"3 3 3\\n3 1 3 3 1\\n1 3 3 3 2\\n3 2 3 3 2\") == \"13\"\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\") == \"4 2 6 1 9 7 5 5 7 1 2 3 3\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1''') == '6'\nassert solution('''3 3 3\n3 1 1\n1 3 2\n3 2 3''') == '13'\nassert solution('''3 2 2\n1 2\n2 1''') == '-1'\nassert solution('''4 3 3\n1 3 1\n3 1 3\n3 2 3\n2 2 3''') == '10'\nassert solution('''3 3 3\n3 1 1\n1 3 2\n3 2 3''') == '-1'"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == '6'\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 3') == '4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('4 5 5') == '6'\nassert solution('4 5 5') == '-1'\nassert solution('4 5 5') == '19 12 2 18 5 5'\nassert solution('10 10 10') == '12'\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"6\"\n\nassert solution([4, 5, 5]) == \"19 12 2 18 5 5\"\n\nassert solution([3, 3, 3]) == \"4 2 6 1 9 7 5 5 7 1 2 3 3\"\n\nassert solution([3, 2, 2]) == -1\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n3\\n3\\n3\\n3\\n1\\n2\\n3') == '1 5'\nassert solution('5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3') == '1 2'"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '1 1'\nassert solution('5') == '1 5'\nassert solution('5') == '1 1'\nassert solution('5') == '1 5'\nassert solution('5') == '1 5'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1 2'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n3\n3\n3\n3\n1\n2\n3\n4\n''') == '1 5', 'First'\nassert solution('''\n5\n4\n3\n2\n1\n0\n1\n2\n3\n4\n''') == '1 5', 'Second'\n'''\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"6\") == \"5\"\nassert solution(\"8\") == \"1\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n3\\n3\\n3\\n3\\n') == '1 1'\nassert solution('5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\\n') == '1 5'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1 1'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '1 1'\nassert solution('5') == '1 1'\nassert solution('5') == '1 1'\nassert solution('5') == '1 1'\nassert solution('5') == '1 1'"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"2 1\"\nassert solution(\"10\") == \"1 7\"\nassert solution(\"8\") == \"1 4\"\nassert solution(\"7\") == \"3 4\"\nassert solution(\"9\") == \"7 8\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n5\n3\n3\n3\n3\n1\n2\n3\n4\n\"\"\") == \"1 5\"\nassert solution(\n\"\"\"\n5\n4\n3\n2\n1\n0\n1\n2\n3\n4\n\"\"\") == \"3 2\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"5\"\nassert solution(\"10\") == \"8\"\nassert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"1\""
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\") == \"1\"\nassert solution(\"5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4\") == \"5\"\nassert solution(\"6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == \"5\""
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"4\") == \"5\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\n3 0\n3 1\n3 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n3 0\n3 1\n3 2\n3 3\n3 4\n''') == '1'\nassert solution('''\n5\n4 0\n3 1\n2 2\n1 3\n0 4\n''') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n3 0\n3 1\n3 2\n3 3\n3 4\n''') == '1'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n3 0\n3 1\n3 2\n3 3\n3 4\n''') == \"1\"\nassert solution('''\n5\n4 0\n3 1\n2 2\n1 3\n0 4\n''') == \"5\"\nassert solution('''\n5\n4 0\n3 1\n2 2\n1 3\n0 4\n''') == \"1\"\n'''\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n3 0\n3 1\n3 2\n''') == '1'\nassert solution('''\n5\n4 0\n3 1\n2 2\n1 3\n0 4\n''') == '5'\nassert solution('''\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n''') == '5'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2 3 1\\n2 3 1\") == \"4\"\nassert solution(\"1\\n3 1 1\\n3 2 1\\n3 1 1\\n4 1 1\\n4 2 1\\n4 3 1\\n4 5 1\\n5 1 1\\n5 2 1\\n5 3 1\\n5 6 1\\n6 3 1\\n6 4 1\\n6 5 1\\n7 1 1\\n7 2 1\\n7 3 1\\n7 4 1\\n7 5 1\\n7 6 1\\n8 1 1\\n8 2 1\\n8 3 1\\n8 4 1\\n8 5 1\\n8 6 1\\n9 1 1\\n9 2 1\") == \"5\""
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8') == '4'\nassert solution('9') == '5'\nassert solution('4') == '0'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4\"\nassert solution(\"8\") == \"0\"\nassert solution(\"10\") == \"0\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"4\\n3\\n4\\n5\\n6\""
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8') == '4'\nassert solution('8') == '0'\nassert solution('9') == '5'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8') == '4'\nassert solution('8') == '0'\nassert solution('9') == '5'\nassert solution('10') == '1'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\nassert solution('''8\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1\n''') == '0'\nassert solution('''9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n''') == '5'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"4\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\\n\") == \"5\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\nassert solution('''8\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1\n''') == '0'\nassert solution('''9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n''') == '5'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"8\") == \"4\"\nassert solution(\"9\") == \"5\""
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n1 1\nR10 V1 V2 V1 E\n''') == '11'\nassert solution('''\n1 2\nR10 V1 V2 V1 E\n''') == '7'\nassert solution('''\n1 1\nR10 V1 V2 V1 E\n''') == '8'"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '5'\nassert solution('2 1') == '6'\nassert solution('1 2') == '5'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '5'\nassert solution('2 1') == '6'\nassert solution('1 2') == '30'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 2\nV1 V2 V1 V1 V2\nR10 V1 V2 V1 E\n''') == '6'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n1 2\nR10 V1 V2 V1 E\n''') == '30'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2\nV1 V2 V1 V1 V2''') == '5'\nassert solution('''2 1\nR10 V1 V2 V1 E''') == '6'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_string) == \"30\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 3\") == \"impossible\"\nassert solution(\"5 1\") == \"impossible\"\nassert solution(\"10 4\") == \"38\""
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''10 24\nSample Output 1:\n38\n\nSample Input 2:\n10 11\nSample Output 2:\nimpossible\n\nSample Input 3:\n9 216\nSample Output 3:\n546\n''') == '38'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\nassert solution(\"3 4\") == \"impossible\"\nassert solution(\"10 5\") == \"impossible\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 24') == \"38\"\nassert solution('10 11') == \"impossible\"\nassert solution('9 216') == \"546\"\n\n\"\"\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\""
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(r\"\"\"\n6 4\n\"\"\") == \"impossible\"\nassert solution(r\"\"\"\n5 2\n\"\"\") == \"38\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 2 1') == '10.00005'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('20 60 2 1') == '466.662'\nassert solution('3 4 2 1') == '10.00005'\nassert solution('3 4 1 0') == '2.0'"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 15 0.33333 30') == '466.662'\nassert solution('3 4 2 1') == '10.00005'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10''') == '466.662'\nassert solution('''3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2''') == '10.00005'\nassert solution('''3 4 1 0\n0 2 0.25 8\nSample Output 3:\n2.0''') == '2.0'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 20 1 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n''') == \"466.662\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n''') == '466.662'\nassert solution('''\n3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n''') == '10.00005'\nassert solution('''\n1 2\n3 4\n5 6\n''') == '1.0005'\nassert solution('''\n0 2\n3 4\n5 6\n''') == '0.00005'\nassert solution('''\n0 2\n1 3\n5 6\n''') == '0.00005'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10''') == \"466.662\"\nassert solution('''3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2''') == \"10.00005\"\nassert solution('''5 30 0.25 2\n1 20 0.3333\n3 50 0.6666\n2 80 0.6667\n''') == \"31.666\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\") == '466.662'\nassert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\\n\") == '10.00005'\nassert solution(\"3 4 1 0\\n0 2 0.25 8\\n\") == '2.0'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n''') == '466.662'\nassert solution('''3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n''') == '10.00005'\nassert solution('''3 4 1 0\n0 2 0.25 8\n''') == '2.0'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\\n\") == \"466.662\"\nassert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\\n\") == \"10.00005\"\nassert solution(\"3 4 1 0\\n0 2 0.25 8\\nSample Output 3:\") == \"2.0\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\nblue red 1.0\nred pink 1.5\n''') == '0.000000000000000'\nassert solution('''\n3\nblue pink 1.0\nred pink 1.5\nblue red 1.0\n''') == '1.500000000000000'\nassert solution('''\n4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    3\n    blue pink 1.0\n    red pink 1.5\n    blue red 1.0\n    ''') == '1.500000000000000'\nassert solution('''\n    2\n    blue red 1.0\n    red pink 1.5\n    ''') == '0.000000000000000'\nassert solution('''\n    4\n    orange pink 1.9\n    yellow orange 1.9\n    green yellow 1.9\n    blue green 1.9\n    ''') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\nblue pink 1.0\nred pink 1.5\nblue red 1.0\n''') == '1.500000000000000'\nassert solution('''\n2\nblue red 1.0\nred pink 1.5\n''') == '0.000000000000000'\nassert solution('''\n4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1.500000000000000'\nassert solution('2') == '0.000000000000000'\nassert solution('4') == '10.000000000000000'"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\nblue red 1.0\n''') == '1.000000000000000'\n\nassert solution('''\n2\nblue red 1.0\nred pink 1.5\n''') == '0.000000000000000'\n\nassert solution('''\n4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0') == '1.500000000000000'\nassert solution('2\\nblue red 1.0\\nred pink 1.5\\n') == '0.000000000000000'\nassert solution('4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9\\n') == '10.000000000000000'"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\nblue red 1.0\nred pink 1.5\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'\nassert solution('''\n6\nblue red 1.0\nred pink 1.5\ngreen yellow 1.9\norange red 1.9\nblue green 1.9\n''') == '0.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1.500000000000000\"\nassert solution(\"2\") == \"0.000000000000000\"\nassert solution(\"4\") == \"10.000000000000000\""
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1.500000000000000'\nprint(solution())\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1.5'\nassert solution('2') == '0.000000000000000'\nassert solution('4') == '10.000000000000000'"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 1 1 1 0') == '180'\nassert solution('3 2 2 1 1') == '22'\nassert solution('2 1 2') == '0'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 1 1 1 0\") == \"180\"\nassert solution(\"3 2 2 1 1\") == \"22\"\nassert solution(\"3 1 2\") == \"0\"\nassert solution(\"3 1 2 3\") == \"0\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 1 1 1 0') == '180'\nassert solution('2 3 1 5 3 2') == '22'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\n\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n''') == '22'\n\nassert solution('''\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\n''') == '0'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6''') == '180'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == 'too many'\nassert solution('''\n2 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\nSample Output 3:\n0\n''') == 'too many'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180', 'Should be 180'\nassert solution('''\n4 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '22', 'Should be 22'\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n''') == 'too many', 'Should be too many'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\nSample Output 2:\n180\n\nSample Input 4:\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\nSample Output 4:\n22\n\nSample Input 5:\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 5:\n0''') == '0'"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 1 1 1 0') == '180'\nassert solution('2 3 1 5 3 2') == '22'\nassert solution('2 1 2') == '0'\nassert solution('1 1') == '0'\nassert solution('1 2') == '0'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 1 1 1 0\") == \"180\"\nassert solution(\"5 1 1 1 0\\n2 3 1 5 3 2\") == \"22\"\nassert solution
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"20 20\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\") == \"17 17\"\nassert solution(\"5 5 2\\n#.##...\\n##...#\\n##.###\\n.....#\\n.....#\\nup 1\\ndown 3\\nleft 3\\nright 4\") == \"-1 -1\"\nassert solution(\"8 3 2\\n#..##.#\\n##.###\\n.#.#.#\\n##.##\\n.##.##\\n.....\\n....#\\n...##\\n###.#\") == \"40 40\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\\\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n6 8 5\n.###..\n.#.#.\n###...\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 8 5') == '20 20'\nassert solution('6 8 5') == '17 17'\nassert solution('3 3 2') == '-1 -1'"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 2\\n...\\n.#.\\n...\\n') == '17 17'\nassert solution('10 10 4\\n...\\n...\\n...\\n...\\n') == '20 20'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4 2\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.') == '17 17'\nassert solution('2 2 1\\n.\\n.\\n.\\n.\\n.\\n.\\n#.\\n#.\\n#.\\n#.') == '20 20'\nassert solution('3 4 3\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n#.\\n#.\\n#.') == '-1 -1'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 2') == '17 17'\nassert solution('6 8 5') == '20 20'\nassert solution('6 8 5') == '-1 -1'\nassert solution('6 8 5') == '-1 -1'\n\n\"\"\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"3\") == \"300\"\nassert solution(\"5\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"impossible\"\nassert solution(\"0\") == \"impossible\"\nassert solution(\"20\") == \"impossible\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n91\n3\n2 40 65\n2 100 150\n2 300 320\n''') == '88'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n2\n2 40 65\n2 100 150\n2 300 320\n''') == '300'\nassert solution('''\n10\n3\n2 40 65\n2 100 150\n2 300 320\n''') == 'impossible'\nassert solution('''\n5\n3\n2 40 65\n2 100 150\n2 300 320\n''') == '88'\nassert solution('''\n4\n2\n2 40 65\n2 100 150\n2 300 320\n''') == 'impossible'\nassert solution('''\n5\n3\n2 40 65\n2 100 150\n2 300 320\n''') == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('371\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == 'impossible'\nassert solution('310\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == '300'\nassert solution('90\\n2\\n2 20 35\\n2 88 200\\nSample Output 2:\n2\nSample Input 4:\n3\n2\n1 4\n1 3\nSample Output 4:\nimpossible\n'''"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('371') == 'impossible'\nassert solution('310') == '300'\nassert solution('90') == '88'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n2\n40 65\n2 100 150\n2 300 320\n''') == '300'\nassert solution('''\n2\n2\n2 20 35\n2 88 200\n''') == '88'\nassert solution('''\n10\n3\n2 40 65\n2 100 150\n2 300 320\n''') == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n3\n2 40 65\n2 100 150\n2 300 320\n''') == '200'\nassert solution('''3\n3\n2 40 65\n2 100 150\n2 300 320\n''') == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == 'impossible'\nassert solution('5\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n3\n2 40 65\n2 100 150\n2 300 320\n''') == 'impossible'\n\nassert solution('''\n5\n2\n2 40 65\n2 100 150\n2 300 320\n''') == '300'\n\nassert solution('''\n1\n2\n2 100 200\n''') == '200'\n\nassert solution('''\n5\n3\n2 40 65\n2 100 150\n2 300 320\n''') == 'impossible'\n\nassert solution('''\n3\n2\n2 40 65\n2 100 150\n2 300 320\n''') == '200'"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"#.##.#.##.#.#.##.#.##.#.#.##.#.#.##.#.##.#.##.#.##.##.##.#.#.#.#.#.##.#.##.#.#.##.#.#.##.#.#.##.#.##.#.#.##.#.##.##.#.##.#.##.#.##.#.#.#.#.##.#.##.#.#\") == \"cannot fold\"\nassert solution(\"#.#...#.#.#.#...#.#.#.#.#...#.#.#.#...#.#.#.#...#.#.#.#...#.#.#.#...#.#.#.#...#.#.#.#...#.#.#.#...#.#.#.#...#.#.#.#.#.#....###.#.#.#...#.#.#.#....#.#.#.#...#.#.#\") == \"can fold\"\nassert solution
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''....#.#....\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\".##..##.\") == \"can fold\"\nassert solution(\"..#..#..\") == \"cannot fold\"\nassert solution(\"#....#..\") == \"cannot fold\"\nassert solution(\"#####....\") == \"cannot fold\"\nassert solution(\"##.##.##.\") == \"can fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('.#.') == 'cannot fold'\nassert solution('..##..') == 'can fold'"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''..##..\n...#..\n..##..\n...#..\n......\n......\n''') == 'cannot fold'\nassert solution('''......\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('......\\n##...\\n......') == 'can fold'\nassert solution('......\\n#...#\\n#...#\\n#...#\\n#...#\\n......') == 'cannot fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"......\\n........\\n######\\n........\\n......\\n......\") == \"can fold\"\nassert solution(\"......\\n........\\n###..\\n........\\n......\\n......\") == \"cannot fold\"\nassert solution(\"......\\n........\\n###..\\n#...\\n......\\n......\") == \"can fold\"\nassert solution(\"......\\n........\\n####..\\n#..#\\n......\\n......\") == \"cannot fold\"\nassert solution(\"......\\n........\\n#...\\n#..#\\n......\\n......\") == \"can fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('......') == 'cannot fold'\nassert solution('#.....') == 'can fold'\nassert solution('..##..') == 'can fold'\nassert solution('...#..') == 'can fold'\nassert solution('......') == 'cannot fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('..##..') == 'can fold'\nassert solution('#...#') == 'cannot fold'\nassert solution('#.#...#') == 'can fold'\nassert solution('##.#..#') == 'cannot fold'\nassert solution('###.#.#') == 'can fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('.....#...#..') == 'can fold'\nassert solution('.....##....') == 'cannot fold'\nassert solution('...#....#..') == 'can fold'\nassert solution('..##...#..') == 'cannot fold'\nassert solution('#..#.##...') == 'can fold'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == \"aaa\"\n\nassert solution(\"abcefgabc\") == \"abc\"\n\nassert solution(\"abcbabcba\") == \"abcba\"\n\nassert solution(\"aaaa\") == \"aaa\""
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''abcefgabc\nabcbabcba\naaaa''') == 'abcba'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == 'aaa'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '6'\nassert solution('4') == '7'\nassert solution('5') == '8'\nassert solution('6') == '5'"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '2'\n    '1 4'\n    '2 5'\n    ) == '4'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 4\\n2 5\") == \"4\"\nassert solution(\"2\\n1 4\\n2 10005\") == \"6\"\nassert solution(\"3\\n1 4\\n2 10\\n0 15\") == \"4\""
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '6'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 4') == '4'\nassert solution('2 5') == '6'\nassert solution('2 10005') == '10'\nassert solution('3') == '4'"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '6'"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"4\"\nassert solution(stdin=\"2\\n1 4\\n2 5\\n\") == \"4\"\nassert solution(stdin=\"2\\n1 4\\n2 10005\\n0 15\\n\") == \"4\""
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 4\n2 5\n0 15\n''') == '4'\n\nassert solution('''\n2\n1 4\n2 5\n0 15\n''') == '6'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 4') == '4'\nassert solution('2 5') == '6'\nassert solution('3 1 4') == '4'\nassert solution('3 10005') == '4'\nassert solution('4 0 15') == '4'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n1 4\n2 5\n''') == '4'\nassert solution('''2\n1 4\n2 10005\n0 15\nSample Input 4:\n3\n1 4\n2 10\n0 15\nSample Output 4:\n4\n''') == '4'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''7\n2 3 4 4 8 12 24\n''') == '2'\nassert solution('''3\n7 7 7\n''') == '3'\nassert solution('''5\n1 2 3 2 1\n''') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2 3\n''') == '1'\nassert solution('''6\n1 2 3 4 5 6\n''') == '3'\nassert solution('''11\n1 2 3 4 5 6 7 8 9 10 11\n''') == '4'\nassert solution('''8\n1 2 3 4 5 6 7 8\n''') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7\n2 3 4 4 8 12 24\n''') == '2'\nassert solution('''\n3\n7 7 7\n''') == '3'\nassert solution('''\n5\n1 2 3 2 1\n''') == '0'\nprint('All test cases passed.')\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"7 7 7\") == \"3\"\nassert solution(\"3\") == \"0\"\nassert solution(\"5 1 2 3 2 1\") == \"0\"\nassert solution(\"2 5 6 2 1\") == \"3\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7\\n2 3 4 4 8 12 24') == '2'\nassert solution('3\\n7 7 7') == '3'\nassert solution('5\\n1 2 3 2 1') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7\\n2 3 4 4 8 12 24') == '2'\nassert solution('3\\n7 7 7') == '3'\nassert solution('5\\n1 2 3 2 1') == '0'\nassert solution('1\\n1\\n1') == '0'\nassert solution('3\\n3 3 3') == '1'"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"0\""
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7\\n2 3 4 4 8 12 24') == '2'\nassert solution('3\\n7 7 7') == '3'\nassert solution('5\\n1 2 3 2 1') == '0'"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7 2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"3 7 7 7\") == \"3\"\nassert solution(\"5 1 2 3 2 1\") == \"0\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == \"2\"\nassert solution('7 3 2 4 8 12 24') == \"2\"\nassert solution('3 7 7 7') == \"3\"\nassert solution('5 1 2 3 2 1') == \"0\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 5 4\\nS#.F.\\n.MFMG') == '3'\nassert solution('1 2 1\\nGS') == '1'\nassert solution('1 1 1\\nGS') == '-1'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 5 4') == \"3\"\nassert solution('1 2 1') == \"1\"\nassert solution('2 2 10') == \"1\""
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 5 4\nS#.F.\n.MFMG\n''') == '3'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(solution.__doc__) == \"1\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 5 4') == '3'\nassert solution('1 2 1') == '1'\nassert solution('2 2 10') == '1'\n\"\"\""
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 5 4') == '3'\nassert solution('1 2 1') == '1'\nassert solution('2 2 10') == '1'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"2 2 1\\nGS\\n\") == \"1\"\nassert solution(\"1 2 1\\nGS\\n\") == \"1\"\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == \"-1\""
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"1 2 1\\nGS\\n\") == \"1\"\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == \"1\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5 4') == '3', \"Wrong!\"\nassert solution('1 2 1') == '1', \"Wrong!\"\nassert solution('2 2 10') == '1', \"Wrong!\""
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '1'\nassert solution('3 7') == '1'\nassert solution('3 7') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\nS..\n.#.\n..G\nDRRDD\n''') == '1'\nassert solution('''\n3 7\n.......\n.G.##S.\n.......\nLDLDLLDR\n''') == '1'\nassert solution('''\n3 7\n.#.....\n.G.##S.\n.......\nLDLDLLDR\n''') == '2'"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '1'\nassert solution('3 7') == '1'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3\nS..\n.#.\n..G\nDRRDD\n''') == '1'\nassert solution('''3 7\n.#.....\n.G.##S.\n.......\nLDLDLLDR\n''') == '1'\nassert solution('''3 7\n.#.....\n.G.##S.\n.......\nLDLDLLDR\n''') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n.S.\n.G\n.G\n''') == '1'\nassert solution('''\n3 3\n.G.\n.S.\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == \"1\"\nassert solution('3 7') == \"1\"\nassert solution('#.....') == \"0\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(t) == \"1\""
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 3\nS..\n.#.\n..G\nDRRDD\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n\"\"\") == \"1000200 799\"\n\nassert solution(\"\"\"\n2\n100 0 100\n0 200 199\n\"\"\") == \"uncertain\"\n\nassert solution(\"\"\"\n1\n999999 0 1000\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n4\n999999 0 1000\n999900 950 451\n987654 123 13222\n987654 321 13222\n\"\"\") == \"999200 1172\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1000200 799'\nassert solution('2') == 'uncertain'\nassert solution('3') == 'impossible'\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        data = list(map(int, stdin.split()))\n        x_max, y_max = data[0], data[1]\n        x_min, y_min = x_max, y_max\n        for i in range(2, len(data), 2):\n            x_max = max(x_max, data[i])\n            x_min = min(x_min, data[i])\n            y_max = max(y_max, data[i + 1])\n            y_min = min(y_min, data[i + 1])\n        for i in range(x_min, x_max + 1):\n            for j in range(y_min, y_max + 1):\n                if i == x_min or i == x_max or j == y_min or j == y_max:\n                    return f\"{i} {j}\"\n        return \"impossible\"\n\"\"\"\n\"\"\"\nSOLUTION 1:\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        data = list(map(int, stdin.split()))\n        x_max, y_max = data[0], data[1]\n        x_min, y_min = x_max, y_max\n        for i in range(2, len(data), 2):\n            x_max = max(x_max, data[i])\n            x_min = min(x_min, data[i])\n            y_max = max(y_max, data[i + 1])\n            y_min = min(y_min, data[i + 1])\n        for i in range(x_min, x_max + 1):\n            for j in range(y_min, y_max + 1):\n                if i == x_min or i == x_max or j == y_min or j == y_max:\n                    return f\"{i} {j}\"\n        return \"impossible\"\n\"\"\"\n\n\"\"\"\nSOLUTION 2:\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        data = list(map(int, stdin.split()))\n        x_max, y_max = data[0], data[1]\n        x_min, y_min = x_max, y_max\n        for i in range(2, len(data), 2):\n            x_max = max(x_max, data[i])\n            x_min = min(x_min, data[i])\n            y_max = max(y_max, data[i + 1])\n            y_min = min(y_min, data[i + 1])\n        for i in range(x_min, x_max + 1):\n            for j in range(y_min, y_max + 1):\n                if i == x_min or i == x_max or j == y_min or j == y_max:\n                    return f\"{i} {j}\"\n        return \"impossible\"\n\"\"\"\n\n\"\"\"\nSOLUTION 3:\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        data = list(map(int, stdin.split()))\n        x_max, y_max = data[0], data[1]\n        x_min, y_min = x_max, y_max\n        for i in range(2, len(data), 2):\n            x_max = max(x_max, data[i])\n            x_min = min(x_min, data[i])\n            y_max = max(y_max, data[i + 1])\n            y_min = min(y_min, data[i + 1])\n        for i in range(x_min, x_max + 1):\n            for j in range(y_min, y_max + 1):\n                if i == x_min or i == x_max or j == y_min or j == y_max:\n                    return f\"{i} {j}\"\n        return \"impossible\"\n\"\"\"\n\n\"\"\"\nSOLUTION 4:\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        data = list(map(int, stdin.split()))\n        x_max, y_max = data[0], data[1]\n        x_min, y_min = x_max, y_max\n        for i in range(2, len(data), 2):\n            x_max = max(x_max, data[i])\n            x_min = min(x_min, data[i])\n            y_max = max(y_max, data[i + 1])\n            y_min = min(y_min, data[i + 1])\n        for i in range(x_min, x_max + 1):\n            for j in range(y_min, y_max + 1):\n                if i == x_min or i == x_max or j == y_min or j == y_max:\n                    return f\"{i} {j}\"\n        return \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n''') == '1000200 799'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n1000 0 1000\n0 200 199\n''') == '1000200 799'\nassert solution('''1\n999999 0 1000\n999900 950 451\n987654 123 13222\n''') == '1000200 799'\nassert solution('''2\n100 0 100\n0 200 199\n''') == 'impossible'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n999999 0 1000\n999900 950 451\n987654 123 13222\n''') == '1000200 799'\nassert solution('''2\n100 0 100\n0 200 199\n''') == 'impossible'\nassert solution('''3\n999999 0 1000\n999900 950 451\n987654 123 13222\n''') == '1000200 799'"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(s) == '1000200 799'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n\"\"\") == \"1000200 799\"\nassert solution(\"\"\"\n2\n100 0 100\n0 200 199\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n1\n\"\"\") == \"999\"\n\nassert solution(\"\"\"\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n\"\"\") == \"999\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1000200 799'\nassert solution('2') == 'uncertain'\nassert solution('4') == 'impossible'"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '1000200 799'\nassert solution('5') == '1000200 799'\nassert solution('6') == '1000200 799'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n0 0 100\n0 0 100\n\"\"\") == \"0 100\"\nassert solution(\"\"\"\n1\n100 0 100\n0 0 100\n\"\"\") == \"100 100\"\nassert solution(\"\"\"\n2\n1000 999 0 100\n0 999 0 100\n\"\"\") == \"999 100\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('\\n'.join([\n    '4 7',\n    '9 8',\n    '14 17',\n    '19 18',\n])) == '2 1'\n\nassert solution('\\n'.join([\n    '2 4',\n    '1 9',\n])) =='syntax error'\n\nassert solution('\\n'.join([\n    '2 3',\n    '1 2',\n    '2 3',\n])) == '1 3 2'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 7\n9 8\n14 17\n19 18\n''') == '2'\nassert solution('''\n4 7\n14 17\n9 8\n19 18\n''') == '1'\n''')\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n4 7\\n9 8\\n14 17\\n19 18') == '2\\n1\\n'\nassert solution('2\\n4 7\\n14 17\\n9 8\\n19 18') == '1\\n2\\n'"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n4 7\n9 8\n14 17\n19 18\n\"\"\") == \"2 1\"\nassert solution(\"\"\"\n2\n4 7\n14 17\n19 18\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n2\n4 7\n14 17\n19 18\n\"\"\") == \"syntax error\""
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('4') == '1'\nassert solution('4') == '1'\n\"\"\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n4 7\n9 8\n14 17\n19 18\n''') == '2 1 2 1'\nassert solution('''\n3\n4 7\n9 8\n14 17\n19 18\n''') == '3 2 2 1'\n'''\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n2\n4 7\n9 8\n14 17\n19 18\n''') == '2 1'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4\n4 7\n9 8\n14 17\n19 18\n\"\"\"\n) == \"2 1 2 2\"\n\nassert solution(\n\"\"\"\n5\n6 3\n8 7\n8 4\n12 9\n13 6\n15 13\n\"\"\"\n) == \"1 2 1 2 1 2\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\nassert solution('4 7') == '1'\nassert solution('4 7') == '1'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2'\nassert solution('4') == '1'\nassert solution('8') == '1'\nassert solution('14') == '2'\nassert solution('19') == '2'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\") == \"1\"\nassert solution(\"_ 40 _ _ _ 12 60 _ 90 _\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ 170\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\") == \"8640\""
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''_ 90 22 _ 6 _ _ _ _ 81\n_ 40 _ _ _ 12 60 _ 90 _\n''') == '1'\nassert solution('''_ 135 159 _ _ _ _ 96 81\n_ 5 135 162 _ _ 144 _ _\n_ _ _ 120 _ _ _ _ _ _\n''') == '1'\nassert solution('''_ 155 160 _ _ 144 _ _\n_ _ _ _ _ _ _ _ _ _\n_ _ _ _ _ _ _ 135 _\n_ _ _ _ _ 135 _ _\n_ _ _ _ 135 _ _ _\n_ _ 135 _ _ _ _ _\n_ _ 135 _ _ _ 135 _\n_ 135 _ _ _ 135 _\n_ _ _ 135 _ _ 135 _\n_ 135 _ _ 135 _ _\n_ _ _ 135 _ _ 135 _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _\n_ 135 _ _ 135 _ _"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n_ 90 22 _ 6 _ _ _ _ 81\n_ 40 _ _ _ 12 60 _ 90 _\n''') == '1'\nassert solution('''\n85 55 _ 99 51 _ _ _ _ _\n_ _ _ _ _ _ _ 85 63 153\n''') == '8640'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\nassert solution('85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n') == '1'\nassert solution('160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ _ _ _ 85 63 153\\n') == '8640'"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81') == '1'\nassert solution('_ 40 _ _ _ 12 60 _ 90 _') == '1'\nassert solution('160 _ _ 136 _ _ _ _ 170') == '8640'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sample_input_1) == \"1\"\nassert solution(sample_input_2) == \"1\"\nassert solution(sample_input_3) == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == \"1\"\nassert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == \"1\"\nassert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == \"1\"\nassert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == \"1\"\nassert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == \"1\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"_ 90 22 _ 6 _ _ _ _ 81\n    _ 40 _ _ _ 12 60 _ 90 _\n    \"\"\") == \"1\"\n\nassert solution(\n    \"\"\"85 55 _ 99 51 _ _ _ _ _\n    _ _ _ _ _ _ _ 85 63 153\n    \"\"\") == \"1\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''_ 90 22 _ 6 _ _ _ 81\n_ 40 _ _ _ 12 60 _ 90 _\n''') == '1', 'first example'\nassert solution('''85 55 _ 99 51 _ _ _ _\n_ _ _ _ _ _ _ 85 63 153\n''') == '1','second example'\nassert solution('''160 _ _ 136 _ _ _ _ _ 170\n_ _ _ _ 120 _ _ 144 _ _\n''') == '8640', 'third example'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_data) == \"1\"\nassert solution(input_data2) == \"1\"\nassert solution(input_data3) == \"0\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 2\n1 3\n''') == '2'\n\nassert solution('''\n5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\n\nassert solution('''\n10\n2 1\n1 5\n3 1\n4 3\n5 6\n7 8\n5 9\n5 10\n''') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 2 3 4\") == \"3\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 2\n1 3\n''') == '2'\nassert solution('''\n5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(samples) == std_out"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n2 1\\n1 3') == '2'\nassert solution('5\\n2 1\\n1 5') == '8'\nassert solution('10\\n1 2\\n1 3\\n2 4\\n1 5\\n3 6\\n2 7\\n7 8\\n5 9\\n5 10') == '24'\nprint('Congratulations! Your solution beats 53.28% of python3 submissions')\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1\\n1 5\\n3 1\\n4 3\\n') == '8'\nassert solution('10\\n1 2\\n1 3\\n2 3\\n2 4\\n1 5\\n3 6\\n2 7\\n7 8\\n5 9\\n5 10\\n') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '8'\nassert solution('10') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"8\"\nassert solution(\"10\") == \"24\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2\n1 3\n''') == '2'\nassert solution('''5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\nassert solution('''10\n2 1\n1 5\n3 1\n4 3\n''') == '24'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nsecretmessage\nboot\n''') == 'essa'\nassert solution('''\ntreetreetreetree\nwood\n''') == '3'\nassert solution('''\noranges\napples\n''') == '0'\n\"\"\""
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nsecretmessage\nboot\n''') == 'essa'\nassert solution('''\ntreetreetreetree\nwood\n''') == '3'\nassert solution('''\noranges\napples\n''') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(''.join(input().split('\\n'))) == '3'\n\n\"\"\""
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\", \"Empty input\"\nassert solution(\"a\") == \"a\", \"One character\"\nassert solution(\"abc\") == \"c\", \"Three characters\"\nassert solution(\"abcabcabc\") == \"a\", \"Three characters, all the same\"\nassert solution(\"a\" * 2500) == \"a\" * 2500, \"Exceeds bounds\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('hello world') == ''\nassert solution('dogcatcatdog') == ''\nassert solution('dolly bob bark') == ''\n\n\"\"\"\nimport re"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '0'\nassert solution('apples') == '0'"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '0'\nassert solution('apples') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    'secretmessage') == 'essa'\nassert solution(\n    'treetreetreetree') == '3'\nassert solution(\n    'oranges') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '0'\nassert solution('oranges') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\\\nsecretmessage\nboot\n''') == 'essa'\nassert solution('''\\\ntreetreetreetree\nwood\n''') == '3'\nassert solution('''\\\noranges\napples\n''') == '0'"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''>^<^\n######\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n5\n>^<^\n######\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n6\n>^<^\n######\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n>^<^\n######\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6\\n>^<^') == '2'\nassert solution('4\\nv<^>') == '4'\nassert solution('4\\n<<<') == '1'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n>^<^\n######\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '1'\nassert solution('4') == '4'\nassert solution('5') == '0'\nassert solution('5') == '2'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"4\"\nassert solution(\"4\",\"^v^v\") == \"4\"\nassert solution(\"4\",\"^v^v\",\">^<\") == \"2\"\nassert solution(\"4\",\"^v^v\",\"^v^v\") == \"4\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '1'\nassert solution('6') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '11'\nprint('SUCCESS')\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2\n''') == '3'\nassert solution('''3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '6'\nassert solution('''2\n7 0 0 20 10 3 0 10\n10 1 0 2 5 2 2 7\n''') == '11'\nassert solution('''3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '6'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '3'\nassert solution('2') == '6'\nassert solution('3') == '11'"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '7'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '11'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '7'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '7'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2\n\"\"\") == \"3\"\nassert solution(\"\"\"3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n2 3 0 2 9 2 3 0') == '3'\nassert solution('3\\n4 0 0 10 10 1 15 0') == '6'\nassert solution('3\\n3 10 7 10 4 1 8 -1') == '11'"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == \"168.7916512460\"\nassert solution('60.0 0.0 50.0 170.0') == \"163.5274740179\"\nassert solution('60.0 0.0 50.0 170.0') == \"163.5274740179\""
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0''') == \"168.7916512460\"\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0\n0.0 0.0 4.0 1.0''') == \"163.5274740179\""
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == '168.7916512460'\nassert solution('0.0 1.0 4.0 1.0') == '3.7320508076'\nassert solution('10.0 0.0 10.0 10.0') == '2.6337954577'\nassert solution('10.0 0.0 10.0 10.0') == '2.6337954577'\nassert solution('10.0 0.0 10.0 10.0') == '2.6337954577'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == '168.7916512460'\nassert solution('40.0 0.0 0.0 0.0') == '163.5274740179'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0''') == '168.7916512460'\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0''') == '163.5274740179'\nassert solution('''0.0 1.0 4.0 1.0\n1\n0.0 0.0 4.0 0.0\n''') == '3.7320508076'\nassert solution('''0.0 0.0 2.0 3.0\n3\n0.0 0.0 4.0 0.0\n''') == '6.666666666667'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0''') == '168.7916512460'\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\nSample Input 4:\n0.0 1.0 4.0 1.0\n1\n0.0 0.0 4.0 0.0\nSample Output 4:\n3.7320508076''') == '3.7320508076'"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0\") == \"163.5274740179\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0\") == \"168.7916512460\"\nassert solution(\"0.0 1.0 4.0 1.0\\n1\\n0.0 0.0 4.0 0.0\") == \"3.7320508076\"\nassert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0\") == \"163.5274740179\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\") == \"163.5274740179\"\nassert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\"\"\") == \"168.7916512460\"\nassert solution(\"\"\"60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0\"\"\") == \"163.5274740179\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6 5 3\n''') == 'rarity'\nassert solution('''9 8 1\n''') == 'canterlot'\nassert solution('''5 3 5\n''') =='madam'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n'''\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3 5\") == \"madam\"\nassert solution(\"6 5 3\") == \"rarity\""
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 5 3\n''') == 'rarity'\nassert solution('''\n9 8 1\n''') == 'canterlot'\nassert solution('''\n5 3 5\n''') =='madam'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 5 3\nrarity\n''') == 'rarity'\nassert solution('''\n6 5 2\ncanterlot\n''') == 'canterlot'\nassert solution('''\n9 8 1\ncanterlot\n''') == 'canterlot'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 5 3\n''') == 'rarity'\nassert solution('''\n9 8 1\n''') == 'canterlot'\nassert solution('''\n5 3 5\n''') =='madam'\n''')\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\nassert solution('International contest- motivation high Programmers have fun!.') == 'International contest- motivation high Programmers have fun!'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    'Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == \\\n    'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('blueRidge mountain road. leaves, glowing in autumn sun, fall in Virginia.') == \\\n    'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('who would know if we had too few syllables?') == \\\n    'Who would know if we had too few syllables?'\nassert solution('International contest- motivation high Programmers have fun!.') == \\\n    'International\\ncontest-\\nmotivation high\\nProgrammers have fun!'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"who would know if we had too few syllables?\") == \"who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!.\\n\") == \"International\\ncontest- motivation high\\nProgrammers have fun!\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nBlue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\n''') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"Blue Ridge\nmountain\nroad.\"\"\") == \"\"\"Blue Ridge\nmountain\nroad\"\"\", \"First\"\n\nassert solution(\"\"\"Who would\nknow if we had too few\nsyllables?\"\"\") == \"\"\"Who would\nknow if we had too few\nsyllables?\"\"\", \"Second\"\n\nassert solution(\"\"\"International\ncontest-\nmotivation high\nProgrammers have\nfun!.\nSample Input 3:\nI have three friends who love my dog,\nI don't want to take a walk with my dog.\nSample Output 3:\nI have three friends who love my dog,\nI don't want to take a walk with my dog."
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''Blue Ridge\nmountain\nroad''') == 'Blue Ridge mountain road.'\nassert solution('''Who would know\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''Blue Ridge\nmountain\nroad\nleaves,\nglowing\nin\nautumn\nsun,\nfall\nin\nVirginia''') == \\\n'''Blue Ridge mountain\nroad\nleaves,\nglowing\nin\nautumn\nsun,\nfall\nin\nVirginia'''\n\nassert solution('''Who would know if we had too few syllables?\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nBlue Ridge mountain road. Leaves, glowing in autumn sun,\nfall in Virginia.\n''') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\n\nassert solution('''\nWho would know if we had too few syllables?\n''') == 'Who would know if we had too few syllables?'\n\nassert solution('''\nInternational contest- motivation high Programmers have fun!.\n''') == 'International contest- motivation high\\nProgrammers have fun!.\\n'\n\nassert solution('''\nThe quick brown fox jumps.\nOn the bank of the river.\n''') == 'The quick brown fox jumps.\\nOn the bank of the river.'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\nThoreTiemann\nThoreHusfeldt\n''') == 'ThoreH'\n\nassert solution('''\n1\nThoreHusfeldter\nThoreHusfeldt\n''') == 'ThoreHusfeldt'\n\nassert solution('''\n1\nThoreHusfeldt\nThoreHusfeldt\n''') == 'ThoreHusfeldt'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\n''') == 'Thore sucks'\nassert solution('''\n3\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\n''') == 'ThoreHusfeldt'\nassert solution('''\n3\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\n''') == 'ThoreHusfeldt'\nassert solution('''\n1\nThore\n''') == 'Thore'\nassert solution('''\n1\nThore\n''') == 'Thore'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == 'Thore sucks'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'Thore is awesome'\nassert solution('2') == 'Thore sucks'"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\nThoreTiemann\\nThoreHusfeldt\\n') == 'ThoreH'\nassert solution('2\\nThoreHusfeldt\\nJohanSannemo\\n') == 'ThoreH'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'Thore'\nassert solution('2') == 'ThoreHusfeldt'\nassert solution('3') == 'Thore sucks'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\nThoreHusfeldt\nJohanSannemo\n\"\"\") == \"Thore sucks\"\nassert solution(\"\"\"\nThoreHusfeldt\nJohanSannemo\n\"\"\") == \"Thore is awesome\"\nassert solution(\"\"\"\nThoreHusfeldt\nThoreHusfeldt\n\"\"\") == \"ThoreHusfeldt is awesome\"\nassert solution(\"\"\"\nThoreHusfeldt\nThoreHusfeldt\n\"\"\") == \"ThoreHusfeldt is awesome\"\nassert solution(\"\"\"\nThoreHusfeldt\nThoreHusfeldt\n\"\"\") == \"ThoreHusfeldt is awesome\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.readline()\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nThoreTiemann\nThoreHusfeldt\n''') == 'ThoreH'\nassert solution('''\nThoreHusfeldter\nThoreHusfeldt\n''') == 'Thore sucks'\nassert solution('''\nThoreHusfeldt\nJohanSannemo\n''') == 'ThoreHusfeldt'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\nThoreHusfeldt\\nThoreTiemann\\n\") == \"Thore sucks\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\"\nassert solution(\"P*P*P*P*P*P*P*P*P*P*P*P*P\") == \"5050505050505050505050505050505050505050\"\nassert solution(\"P*R*L*P*R*L*P*R*R*P*R*L*P*P*R*R*P*R*R*P*R*R*P*R*R*P*R*R*P*R*R*P*R*R*P*R*R*P*R*R*P*P*R*P*L*P*R*R*P*R*L*P*R*R*P*R*R*P*R*R*P*R*L*P*R*P*R*R*L*R*P*L*R*P*R*P*R*L*R*P*R*L*R*P*L*P*R*P*R*P*R*P*L*R*P*R*P*R*L*L*R*P*R*R*P*R*L*P*L*R*P*R*L*P*R*P*L*R*P*P*L*P*R*P*L*P*R*P*L*P*R*P*R*P*L*R*P*P*R*P*R*P*L*R*P*L*P*L*P*P*R*L*P*R*P*L*P*P*P*R*L*P*P*P*R*L*P*P*P*P*P*P*L*R*P*L*R*P*P*L*R*P*P*P*L*P*R*P*L*P*R*P*P*P*P*L*P*P*P*L*P*P*P*P*P*P*P*P*P*P*L*P*P*P*P*L*P*P*P*P*L*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P*P"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''*\n''') == '0'\nassert solution('''*R\n''') == '0'\nassert solution('''*R*L*R\n''') == '0'\nassert solution('''*L\n''') == '1'\nassert solution('''L*R*R*L\n''') == '5'\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n*\n*\n*\n''') == '6'\nassert solution('''\nL*R\n*R*L\n''') == '25'\nassert solution('''\nL*R\n*R*L\n*L*R\n''') == '33'\nassert solution('''\n**\n**\n**\n''') == '33'\nassert solution('''\n*\n*\n*\n*\n''') == '6'\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"L*R\") == \"6\"\nassert solution(\"P*P\") == \"6\"\nassert solution(\"**\") == \"33\""
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('*') == '6'\nassert solution('*') == '33'\nassert solution('*') == '60'\nassert solution('P*P') == '6'\nassert solution('L*R') == '25'\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"LR\") == \"5\"\nassert solution(\"LR*R\") == \"15\"\nassert solution(\"R*R*R\") == \"33\"\nassert solution(\"R**R\") == \"50\"\nassert solution(\"R*R*R*R\") == \"66\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('L*R') == '6'\nassert solution('P*P') == '6'\nassert solution('**') == '33'"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''herp is derp\nderp is herp\nherp is herp\nderp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\nherp is derp\\nherp is derp') == 'yes'\nassert solution('3\\noskar not lukas\\noskar is poptart\\nlukas is smart') == 'wait what?'"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"yes\""
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\nherp is derp\nderp is herp\nherp is herp\nderp is derp\n\"\"\") == \"yes\"\nassert solution(\"\"\"\noskar not lukas\noskar is poptart\nlukas is smart\n\"\"\") == \"wait what?\"\nassert solution(\"\"\"\nmoo not foo\n\"\"\") == \"yes\"\nassert solution(\"\"\"\ntest\n\"\"\") == \"yes\"\n\nassert solution(\"\"\"\nmoo not foo\n\"\"\") == \"yes\"\n\nprint(\"You are all set!\")\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nherp is derp\nderp is herp\nherp is herp\nderp is derp\nherp is derp\nherp is herp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is der"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\nherp is derp\\nderp is herp\\nherp is herp') == 'yes'\nassert solution('4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp\\n') == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"wait what?\"\nassert solution(\"2\\nherp is derp\\nderp is herp\\nderp is derp\\n\") == \"wait what?\"\nassert solution(\"1\\nmoo not foo\\nmoo is poptart\\nlukas is smart\\n\") == \"yes\"\nprint(\"all tests passed\")\n\"\"\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == \"yes\"\nassert solution(sample_input_2) == \"wait what?\"\nassert solution(sample_input_3) == \"yes\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\nherp is derp\nderp is herp\nherp is herp\nderp is derp\n''') == 'yes'\nassert solution('''1\noskar not foo\n''') == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == \"wait what?\", \"Your solution does not pass the assertion test. Please check your code.\"\nassert solution('\\n'.join([\"herp is derp\", \"derp is herp\", \"herp is herp\", \"derp is derp\"])) == \"yes\", \"Your solution does not pass the assertion test. Please check your code.\"\nassert solution(\"\\n\".join([\"oskar not lukas\", \"oskar is poptart\", \"lukas is smart\", \"moo not foo\"])) == \"wait what?\", \"Your solution does not pass the assertion test. Please check your code.\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\n''') == '4 4'\n\nassert solution('''\n3\nACMA\nACM\nACA\nAMA\n''') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\n''') == \"1 4\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1 4'\nassert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\nAA\nMM\nACM\n''') == \"impossible\"\nassert solution('''6\nAAA\nAAAA\nAA\nAAA\nAAA\nAAA\nAA\n''') == \"impossible\"\nassert solution('''5\nAAA\nAAAA\nAA\nAAA\nAAA\nAAA\nAA\n''') == \"1 4\"\nassert solution('''1\nAC\n''') == \"impossible\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n') == '2 4'\nassert solution('4\\n') == 'impossible'\nassert solution('1\\n') == 'impossible'"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\nSample Output 1:\n1 4\nMM\nA\nAA\nACA\nACMAA\n\nSample Input 2:\n3\nACMA\nACM\nACA\nAMA\nSample Output 2:\nimpossible\n\nSample Input 3:\n1\nAM\nSample Output 3:\nimpossible''') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1 4', 'Test 1 failed'\nassert solution('2') == '1 4', 'Test 2 failed'\nassert solution('3') == 'impossible', 'Test 3 failed'"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '1\\n'\n    'AC\\n'\n    'AC\\n'\n    'AM\\n') == 'impossible'\n\nassert solution(\n    '2\\n'\n    'AC\\n'\n    'AC\\n'\n    'AM\\n') == '4 1'\n\nassert solution(\n    '3\\n'\n    'AC\\n'\n    'AC\\n'\n    'AM\\n') == 'impossible'\n\nassert solution(\n    '5\\n'\n    'AACCMMAA\\n'\n    'ACA\\n'\n    'MM\\n'\n    'ACMAA\\n'\n    'AA\\n'\n    'A\\n') == '1 4'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '4 4'\nassert solution('5') == '1 1'\nassert solution('4') == '1 1'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"1 4\", \"TEST 1 FAILED\"\nassert solution(\"3\") == \"impossible\", \"TEST 2 FAILED\"\nassert solution(\"1\") == \"impossible\", \"TEST 3 FAILED\"\n\"\"\""
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124.0'\n\nassert solution(\n'''2 4 1\n1 0.5 5\n''') == '3.0'\n\nassert solution(\n'''10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n''') == '18.930597946'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3\\n1 2 3') == '3'\nassert solution('20 1 2 3\\n20 1 2 3') == '3'\nassert solution('100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\\nSample Output 2:') == '3'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1 0.5 3') == '2'\nassert solution('10 20 3') == '18.907973173'\nassert solution('100 111 5') == '124'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(samples.SAMPLE_1) == \"123\"\nassert solution(samples.SAMPLE_2) == \"2\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124'\nassert solution('''\n2 4 1\n1 0.5 5\n''') == '3'\nassert solution('''\n10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n''') == '18.9029850746'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124.0000000000'\nassert solution('''\n5 5 1\n10 1 1\n15 1 1\n20 1 1\n25 1 1\n30 1 1\nSample Output 3:\n0.0119396769''') == '0.0119396769'\nassert solution('''\n10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\nSample Output 3:\n3.3426008333''') == '3.3426008333'"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '6'\nassert solution('2 4 1') == '3'\nassert solution('10 20 3') == '18.907461538'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124'\n\nassert solution('''10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n''') == '18.9029850746'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sample_input_1) == \"124\"\nassert solution(sample_input_2) == \"18.9029850746\"\nassert solution(sample_input_3) == \"18.8182667988\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n\"\"\") == \"124\"\n\nassert solution(\n\"\"\"\n10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n\"\"\") == \"18.9029850746\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '2 1 2'\nassert solution('5 2') == '4 3 4 2'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3') == '2 1 2'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    4 3\n    \"\"\"\n) == \"\"\"\n2 1 2\n\"\"\", \"Wrong\"\nassert solution(\n    \"\"\"\n    2 1\n    \"\"\"\n) == \"\"\"\n1\n\"\"\", \"Wrong\"\nassert solution(\n    \"\"\"\n    5 22\n    \"\"\"\n) == \"\"\"\n4 3 4 2\n\"\"\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3\n1 2 3\n2 1''') == '2 1 3'\n\nprint(solution('''5 2\n1 2 3 2 4'''))\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2') == '4 3 4 2'"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2\n1 2\nSample Input 4:\n4 3\nSample Output 4:\n1 2 1 2\n''') == '2 1 2 1 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(1) == '1'\nassert solution(2) == '1 2'\nassert solution(3) == '1 2 3'\nassert solution(4) == '1 2 2 3'\nassert solution(5) == '1 2 3 4'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 3\n2 1 2\n''') == '2 1 2'\nassert solution('''5 22\n4 3 4 2\n''') == '4 3 4 2'\nassert solution('''2 1\n''') == '1'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 3\n2 1 2\n''') == '2 1 2'\nassert solution('''5 2\n1\n''') == '1'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 3\n3 1 2\n''') == '1 2 3'\nassert solution('''\n5 2\n''') == '1'\nassert solution('''\n8 5\n4 4 4 2 3 3\n''') == '4 3 3 4 2'\nassert solution('''\n5 9\n4 1 2 3 4 6 5\n''') == '4 2 1 3 5 6'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4') == '2'\nassert solution('7 6') == '2'\nassert solution('7 5') == '0'"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n2 3\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\") == \"0\""
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n3 4\n2 4\n''') == '2'\nassert solution('''\n7 6\n1 2\n2 3\n2 5\n6 3\n7 2\n3 4\nSample Output 2:\n0\n''') == '0'"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n3 4\n2 4\n''') == '2'\nassert solution('''\n7 6\n1 2\n2 3\n3 4\n5 6\n6 7\nSample Output 2:\n2\n''') == '2'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n3 4\n2 4\n''') == '2'\nassert solution('''\n7 6\n1 2\n2 3\n2 5\n6 3\n7 2\n3 4\n''') == '2'\nassert solution('''\n7 5\n1 2\n2 3\n3 4\n5 6\n6 7\n''') == '0'\nassert solution('''\n4 4\n1 2\n1 3\n3 4\n2 4\n''') == '2'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n3 4\n2 4\n''') == '2'\nassert solution('''\n7 6\n1 2\n2 3\n2 5\n6 3\n7 2\n3 4\n''') == '2'\nassert solution('''\n7 5\n1 2\n2 3\n3 4\n5 6\n6 7\n''') == '0'"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n1 2\\n1 3\\n3 4\") == \"2\"\nassert solution(\"3 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\") == \"0\"\nassert solution(\"7 6\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\") == \"2\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6') == '2'\nassert solution('4 4') == '2'\nassert solution('7 6') == '2'\nassert solution('1 2') == '2'\nassert solution('1 3') == '2'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n3 4\n2 4\n''') == \"2\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"20 0\") == \"20.00000000\"\nassert solution(\"1.00 0.10\") == \"20.00000000\"\nassert solution(\"-10 10\") == \"3.14159265\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"20 0\\n1.00 0.10\\n\"\n) == \"20.00000000\"\nassert solution(\n    \"-10 10\\n10.00 1.00\\n\"\n) == \"3.14159265\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 0') == '10.00000000'\nassert solution('20 0') == '20.00000000'\nassert solution('-10 10') == '3.14159265'\nassert solution('0 20') == '28.26445910'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''20 0\n1.00 0.10''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00''') == '3.14159265'\nprint('all tests passed')\n\"\"\""
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''20 0\n1.00 0.10''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00''') == '3.14159265'\nassert solution('''0 20\n1.00 0.10''') == '28.26445910'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"20 0\") == \"20.00000000\"\nassert solution(\"-10 10\") == \"3.14159265\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''20 0\n1.00 0.10''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00''') == '3.14159265'\nassert solution('''0 20\n1.00 0.10''') == '28.26445910'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"20 0\") == \"20.00000000\"\nassert solution(\"1.00 0.10\") == \"28.26445910\"\nassert solution(\"-10 10\") == \"3.14159265\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('20 0') == '20.00000000'\nassert solution('-10 10') == '3.14159265'\nassert solution('0 20') == '28.26445910'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 0\\n1.00 0.10') == '20.00000000'\nassert solution('-10 10\\n10.00 1.00') == '3.14159265'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"150\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\\n\") == \"170\"\nassert solution(\"3\\n2 120\\n3 50\\n2 80\\n\") == \"150\""
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n3 100\\n1 100\\n4 70\\n3 70\\n') == '170'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '2\\n2 100\\n1 100\\n4 70\\n3 70\\n'\n    ) == '170'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2 100\\n1 100\\n4 70\\n3 70\\n') == '170'\nassert solution('2\\n2 120\\n3 50\\n2 80\\n') == '150'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '170'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '170'\nassert solution('3') == '150'"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n2 100\n1 100\n4 70\n3 70\n\"\"\") == \"170\"\nassert solution(\"\"\"\n6\n2 120\n3 50\n4 70\n5 70\n6 80\n\"\"\") == \"150\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n2 120\\n3 50\\n2 80') == '150'\nassert solution('3\\n1 120\\n4 70\\n3 70\\n2 80') == '170'\nassert solution('2\\n2 120\\n3 50\\n2 80') == '150'\nassert solution('4\\n1 100\\n3 70\\n2 80') == '170'\nassert solution('4\\n2 120\\n3 50\\n2 80') == '150'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"6 6\") == \"5\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n1 3') == '2'\nassert solution('4\\n4\\n1 2\\n1 3\\n2 4') == '3'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\n''') == '2'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '5'\nassert solution('1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6') == '5'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == \"5\"\nassert solution('''6 6\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == \"5\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3') == '2'\nassert solution('6 6') == '5'\n\nimport collections"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 3\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == \"2\"\nassert solution('''6 6\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == \"5\""
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3') == '2'\nassert solution('6 6') == '5'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '2'\nassert solution('6 6') == '5'\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"6 6\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n1\\n0\\n2 1 2') == '0.5'\nprint(solution(input()))\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '0.5'\nassert solution('8') == '0.0446429'"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1\n0\n2 1 2\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0.5'\nassert solution('8') == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0.5'\nassert solution('8') == '0.0446429'\nassert solution('9') == '0.0'\nassert solution('10') == '0.0'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n1\n1 2 1 2\n1 2 1 2\n1 2 1 2\n1 2 1 2\n1 2 1 2''') == '0.0446429'\nassert solution('''8\n2\n1 0 2 1\n1 2 1 2\n1 2 1 2\n1 2 1 2\n1 2 1 2\n1 2 1 2\n1 2 1 2\n1 2 1 2''') == '0.0'"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1\n0\n2 1 2\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '0.5'\nassert solution('8') == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n3\n0\n0 2 1\n0 0\n1 0\n1 0\n1 0\n4\n4\n3\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 2 3 3 2\n''') == '3\n1 6 1\n2 5 2\n3 4 3\n'''\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n6\n1 2 3 3 2 1\n\"\"\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1 6 1'\nassert solution('4') == '2 5 2'\nassert solution('5') == '3 4 3'\nassert solution('6') == 'IMPOSSIBLE'"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1 2') == '3'\nassert solution('3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n1 2 3 3 2 1\n''') == '3\n1 6 1\n2 5 2\n3 4 3\n'''\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3') == '3'\nassert solution('5\\n1 2 3 4 5') == '1 5 2'\nassert solution('6\\n1 2 3 4 5 6') == '3 6 2 5 1'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '1 5 6 7 2 9 2 3 8 4 1'\nassert solution('15\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == '1 11 12 13 14 2 9 5 6 7 3 8 8 9 1'"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"3\"\nassert solution(\"1000000\") == \"3\"\nassert solution(\"1000000\") == \"3\"\nassert solution(\"1000000\") == \"3\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n1 2 3 3 2\n\"\"\") == \"3\n1 6 1\n2 5 2\n3 4 3\n\"\"\")"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1 2\"\nassert solution(\"3 4\") == \"1 2 3 4\"\nassert solution(\"5 10 20 30 40 50\") == \"10 20 28 27 30 40 50\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1 2'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"1 1 2 2\") == \"1 1 2 2\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2\n1 100\n1 1\n''') == '1 2 100'\nassert solution('''\n2\n5 10 20 30 40 50\n2 28 27\n''') == '10 20 28 27 30 40 50'\nassert solution('''\n4\n1 1\n1 2\n1 3\n1 1\n''') == '1 1 2 3 1 1'\nassert solution('''\n5\n1 1\n1 2\n1 3\n1 1\n''') == '1 1 2 3 1 1'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\n5 10 20 30 40 50\n2 28 27\n\"\"\") == \"\"\"10 20 28 27 30 40 50\"\"\", \"First Test Case\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2\n1 100\n1 1''') == '1 2 100'\nassert solution('''2\n5 10 20 30 40 50\n2 28 27''') == '10 20 28 27 30 40 50'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2\n1 100\n1 1\n''') == '1 2 100'\n\nassert solution('''\n2\n5 10 20 30 40 50\n2 28 27\n''') == '10 20 28 27 30 40 50'\n\nprint('All test cases passed!')"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2\\n1 100\\n1 1') == '1 2 100'\nassert solution('2\\n5 10 20 30 40 50') == '10 20 28 27 30 40 50'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 2\n1 100\n1 1\n''') == '1 2 100'\n\nassert solution('''3\n1 2\n1 100\n1 1\n''') == '1 2 100'\n\nassert solution('''10\n1 2\n1 100\n1 1\n''') == '10 1 100'\n\nassert solution('''100\n1 2\n1 100\n1 1\n''') == '1 2 100'\n\nassert solution('''1000000000\n1 2\n1 100\n1 1\n''') == '1 2 100'"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n1 100\\n1 1\") == \"1 2 100\"\nassert solution(\"3\\n5 10 20 30 40 50\\n2 28 27\") == \"10 20 28 27 30 40 50\"\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n0\nAB 1 1\nAC 2 1\nBC 2 1\n''') == '2600'\nassert solution('''\n3\nAB 1 1\nAC 2 1\nBC 2 1\n''') == '506'\n''')\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"2600\"\nassert solution(\"2\") == \"506\"\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '2600'\nassert solution('2') == '506'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '2600'\nassert solution('2') == '2600'\nassert solution('3') == '2562'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0\\n') == '2600'\nassert solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n') == '506'\nassert solution('3\\nAC 2 1\\nAB 1 1\\nBC 2 1\\n') == '500'\nassert solution('5\\nAC 1 1\\nAB 1 1\\nBC 1 1\\nCC 1 1\\n') == '0'\nassert solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\nCC 2 1\\n') == '0'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0\") == \"2600\"\nassert solution(\"3\") == \"506\"\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\nAB 1 1\\nAC 2 1\\n') == '2600'\nassert solution('2\\nAB 1 1\\nAC 2 2\\n') == '508'\nassert solution('4\\nAB 2 1\\nAC 2 1\\nBC 2 1\\n') == '508'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\nAB 1 1\\nAC 2 1\\nBC 2 1\") == \"506\"\nassert solution(\"10\\nABCD 5 1\\nEFGH 1 1\\nIJKL 4 1\\nMNOP 2 1\\nQRST 3 1\\nUVWX 4 1\\nYZABC 3 1\\nZYVUW 8 1\\nZUVW 7 1\") == \"3434\"\nassert solution(\"100\\nAACBC 4 1\\nBCDD 4 1\\nABDDC 5 1\\nABCBB 5 1\\nAABCA 5 1\\nBCDCA 5 1\\nACBDA 5 1\\nABBDB 5 1\\nDCBDA 5 1\\nBDBDC 5 1\\nDCADB 5 1\\nCBAAD 5 1\\nDCDAB 5 1\\nBDBCD 5 1\\nDCDAB 5 1\\nCDBAD 5 1\\nABBBA 5 1\\nDCBCA 5 1\\nADCDA 5 1\\nABCDA 5 1\\nDCDAB 5 1\\nCDAAD 5 1\\nADDAB 5 1\\nBDAAD 5 1\\nBDBBA 5 1\\nDCBDD 5 1\\nDBCDB 5 1\\nDADDB 5 1\\nDABAD 5 1\\nBDBAD 5 1\\nCDABD 5 1\\nDCBAD 5 1\\nADCBA 5 1\\nADCDA 5 1\\nDBCDD 5 1\\nBDCBA 5 1\\nBDAAD 5 1\\nDABDD 5 1\\nDCADB 5 1\\nABDBA 5 1\\nDCDDB 5 1\\nBDABD 5 1\\nBDABB 5 1\\nBDCDA 5 1\\nDCADB 5 1\\nCDAAD 5 1\\nADCAD 5 1\\nBDAAD 5 1\\nDCBDB 5 1\\nABDAD 5 1\\nABDBD 5 1\\nDCBBA 5 1\\nDCBBD 5 1\\nDADBBA 5 1\\nABDAD 5 1\\nABDAB 5 1\\nDCDBD 5 1\\nDBDBB 5 1\\nBCDDA 5 1\\nDCADB 5 1\\nADCDB 5 1\\nADCDB 5 1\\nBDDBB 5 1\\nCDADB 5 1\\nDCDAD 5 1\\nCDBBD 5 1\\nBDCAD 5 1\\nBDBAD 5 1\\nCDCDD 5 1\\nBDCBD 5 1\\nADCBB 5 1\\nBDDCB 5 1\\nACCDB 5 1\\nCDDAB 5 1\\nADCDB 5 1\\nADDAB 5 1\\nDCBDB 5 1\\nBDBAD 5 1\\nDCBBA 5 1\\nDCBAD 5 1\\nDCDDA 5 1\\nADBAD 5 1\\nBDAAD 5 1\\nADCDA 5 1\\nCDADB 5 1\\nADBAD 5 1\\nDCDAB 5 1\\nCDDBB 5 1\\nADADB 5 1\\nDCADB 5 1\\nADBAAD 5 1\\nADDCDA 5 1\\nADCCDA 5 1\\nADCDD 5 1\\nDCADC 5 1\\nDCDAAD 5 1\\nDCADB 5 1\\nADCBB 5 1\\nADBAD 5 1\\nDCDAB 5 1\\nBDBAD 5 1\\nDCBDD 5 1\\nADBCA 5 1\\nBDADB 5 1\\nCBDDA 5 1\\nDCADB 5 1\\nABDAD 5 1\\nBDBDDA 5 1\\nDCDABD 5 1\\nADCCD 5 1\\nDCDBBD 5 1\\nDCBDBA 5 1\\nBDCBD 5 1\\nCDDDD 5 1\\nADBAD 5 1\\nADADB 5 1\\nDCCDB 5 1\\nDCADC 5 1\\nADCDD 5 1\\nDBADC 5 1\\nADDAB 5 1\\nADCDB 5 1\\nDCDDC 5 1\\nADCDB 5 1\\nDDBAD 5 1\\nCDAAD 5 1\\nDCADB 5 1\\nDCBDD 5 1\\nCBDAD 5 1\\nBDCDA 5 1\\nBCDDC 5 1\\nDCADB 5 1\\nDCADC 5 1\\nADCAD 5 1\\nBADCD 5 1\\nADDCA 5 1\\nDCBDD 5 1\\nBDADC 5 1\\nDCDAB 5 1\\nDCDDC 5 1\\nCDADC 5 1\\nABBAD 5 1\\nBDDBD 5 1\\nDADDB 5 1\\nADBDB 5 1\\nCBDDC 5 1\\nADCBD 5 1\\nDCBDB 5 1\\nCADCD 5 1\\nDCADC 5 1\\nADABD 5 1\\nCDDDA 5 1\\nBDCDB 5 1\\nDADAD 5 1\\nADBDD 5 1\\nCDAAD 5 1\\nCDDAB 5 1\\nCDDBB 5 1\\nABDDA 5 1\\nABBDB 5 1\\nADCDD 5 1\\nADDDD 5 1\\nADCBD 5 1\\nABDBD 5 1\\nBDBAD 5 1\\nADDDD 5 1\\nDCDAD 5 1\\nABADB 5 1\\nADBBB 5 1\\nDDCBD 5 1\\nADCCB 5 1\\nCDABA 5 1\\nADCBD 5 1\\nDCDBD 5 1\\nADCDB 5 1\\nCDAAD 5 1\\nADCBD 5 1\\nDADCB 5 1\\nABBDA 5 1\\nBDCDA 5 1\\nBDBAD 5 1\\nADCBD 5 1\\nADCDB 5 1\\nADCDB 5 1\\nDCADC 5 1\\nDCDAD 5 1\\nDCBAD 5 1\\nDCBAD 5 1\\nCDDDD 5 1\\nDCADC 5 1\\nDCADC 5 1\\nADCBD 5 1\\nBDDDD 5 1\\nBDCDB 5 1\\nADCDA 5 1\\nADDDD 5 1\\nABADB 5 1\\nADCDB 5 1\\nDCDDC 5 1\\nADCDA 5 1\\nDCBCD 5 1\\nADCDB 5 1\\nCDADC 5 1\\nABBAD 5 1\\nBDBAD 5 1\\nADADB 5 1\\nADBBB 5 1\\nDCADC 5 1\\nCDBAD 5 1\\nBD"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0') == '2600'\nassert solution('3') == '506'\n\"\"\"\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"506\"\nassert solution(\"3\") == \"2600\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('((((()))))') == 'possible'\nassert solution('()()()()())') == 'impossible'\nassert solution('(()())(())') == 'impossible'\nassert solution
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == 'possible'\nassert solution('()))' == 'possible'\nassert solution('))(') == 'impossible'"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"()\")) == \"possible\"\nassert solution(\"()))\") == \"impossible\"\nassert solution(\")))(\") == \"impossible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('()))' ) == 'possible'\nassert solution('))((' ) == 'impossible'\n\nassert solution
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'possible'\nassert solution('(((()()))))' == 'impossible'"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"(((()())))((()()))\") == \"possible\"\nassert solution(\"(()(()))((())()))\") == \"possible\"\nassert solution(\"((((()())((()()))))(()))(((()())))(((()())))\") == \"impossible\"\nassert solution
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_value) == \"impossible\"\nprint(solution(input_value))\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"possible\"\nassert solution(\"(()())()\") == \"possible\"\nassert solution(\"(())(())(())\") == \"possible\"\nassert solution(\"(()))((())\") == \"impossible\"\nassert solution(\")(()((()()))((())()))\") == \"impossible\""
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\"()))(\") == \"impossible\"\nassert solution(\"))))\") == \"impossible\"\nassert solution(\"()))(\") == \"possible\"\nassert solution(\"())\") == \"possible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('(())') == 'possible'\nassert solution('()()') == 'possible'\nassert solution('(()())()') == 'possible'\nassert solution('(()(()))') == 'possible'\nassert solution('(((())()))') == 'possible'\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n''') == '1800'\n\n'''"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_str_1) == output_str_1\nassert solution(input_str_2) == output_str_2\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1800\"\nassert solution(\"2 2\") == \"impossible\""
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2\n1 1800 3600 1800\n1 1900 3600 1600\n''') == 'impossible'\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(r\"\"\"\n2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n\"\"\") == \"1800\"\nassert solution(r\"\"\"\n2 2\n1 1800 3600 1800\n1 1900 3600 1600\n\"\"\") == \"impossible\"\nassert solution(r\"\"\"\n2 1\n1 1800 900 1800\n1 1900 900 1600\n\"\"\") == \"impossible\"\nassert solution(r\"\"\"\n1 1\n1 1800 900 1800\n1 1900 900 1600\n\"\"\") == \"impossible\"\nassert solution(r\"\"\"\n1 2\n1 1800 900 1800\n1 1900 900 1600\n\"\"\") == \"impossible\"\n\n\"\"\"\n\nimport sys\nfrom typing import List\nfrom collections import deque\nimport heapq\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        # def solve(i, j, ans):\n        #     if i == 0 and j == 0:\n        #         return 0\n        #     if i < 0 or j < 0:\n        #         return 99999999\n        #     if dp[i][j]!= -1:\n        #         return dp[i][j]\n        #     if i == j:\n        #         return 0\n        #     if i == j - 1:\n        #         return abs(a[i][0] - a[i + 1][0]) + abs(a[i][1] - a[i + 1][1])\n        #     ans = min(ans, solve(i - 1, j, ans) + abs(a[i][0] - a[i + 1][0]) + abs(a[i][1] - a[i + 1][1]))\n        #     ans = min(ans, solve(i, j - 1, ans) + abs(a[i][0] - a[i][0]) + abs(a[i][1] - a[i][1]))\n        #     dp[i][j] = ans\n        #     return dp[i][j]\n        #\n        #\n        #\n        # n, m = map(int, stdin.split())\n        # a = []\n        # for i in range(n):\n        #     a.append(list(map(int, stdin.split())))\n        #\n        # dp = [[-1 for _ in range(n)] for _ in range(n)]\n        #\n        # ans = 99999999\n        # ans = solve(n - 1, n - 1, ans)\n        #\n        # if dp[0][0] == -1:\n        #     print(-1)\n        # else:\n        #     print(dp[0][0])\n\n        def minAbsDiff(arr, maxTime):\n            start = 0\n            end = len(arr) - 1\n            while start <= end:\n                mid = start + (end - start) // 2\n                if arr[mid] <= maxTime:\n                    start = mid + 1\n                else:\n                    end = mid - 1\n            return maxTime - arr[start]\n\n        res = sys.maxsize\n        for i in range(0, len(stdin.split('\\n')) - 1):\n            res = min(res, minAbsDiff(list(map(int, stdin.split('\\n')[i].split())), int(stdin.split('\\n')[i + 1].split()[0])))\n        return str(res)\n\nprint(Solution().solution(r\"\"\"\n1 3\n1 2000 9200 1600\n1 2200 9400 1400\n1 3\n1 1800 3600 1800\n1 1900 3600 1600\n\"\"\"))\nprint(Solution().solution(r\"\"\"\n2 2\n1 1800 3600 1800\n1 1900 3600 1600\n\"\"\"))\nprint(Solution().solution(r\"\"\"\n2 1\n1 1800 900 1800\n1 1900 900 1600\n\"\"\"))\nprint(Solution().solution(r\"\"\"\n1 1\n1 1800 900 1800\n1 1900 900 1600\n\"\"\"))\nprint(Solution().solution(r\"\"\"\n1 2\n1 1800 900 1800\n1 1900 900 1600\n\"\"\"))"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2\n1 1800 9000 1800\n1 1900 9200 1600\n1 2200 9400 1400\n''') == '1800'\nassert solution('''\n3 2\n1 1800 3600 1800\n1 1900 3600 1600\n1 2200 9400 1400\n''') == 'impossible'\nprint(solution('''\n3 2\n1 1800 9000 1800\n1 1900 9200 1600\n1 2200 9400 1400\n'''))"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400''') == '1800'\nassert solution('''2 2\n1 1800 3600 1800\n1 1900 3600 1600''') == 'impossible'\nassert solution('''6 2\n1 1800 1\n1 1900 1\n2 1800 999999999999999999\n
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n''') == '1800'\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([\n    \"3 2\",\n    \"1 1800 9000 1800\",\n    \"1 1900 3600 1600\",\n]) == \"1800\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == \"A1-B2 B1-A2 A3-B3\"\nassert solution('2 3') == \"A1-B1 A2-C2 B2-C1\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2\nSample Output 1:\nA1-B2 B1-A2 A3-B3\nA2-B3 B2-A3 A1-B1\nA3-B1 B3-A1 A2-B2\n''') == 'A1-B1 A2-B2 A3-B3'\nassert solution('''2 3\nSample Output 1:\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B2 B1-C1\n''') == 'A1-B1 A2-C1 B2-C2 A3-B3'\nassert solution('''3 2\nSample Output 1:\nA1-B2 B1-A2 A3-B3\nA2-B3 B2-A3 A1-B1\nA3-B1 B3-A1 A2-B2\n''') == 'A1-B1 A2-B2 A3-B3'"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == 'A1-B2 B1-A2 A3-B3'\nassert solution('2 3') == 'A1-B1 A2-C2 B2-C1'\nassert solution('2 4') == 'A1-B1 A2-C2 B2-C1 A3-B3'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 2\n1''') == 'A1-B1 A2-C2 B2-C1'\nassert solution('''3 2\n1''') == 'A1-B1 A2-C2 B2-C1'\nassert solution('''4 4\n1''') == 'A1-B1 A2-C2 B2-C1 A3-B3'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3 2\"\n) == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\n    \"2 3\"\n) == \"A1-B1 A2-C2 B2-C1\"\nassert solution(\n    \"5 1\"\n) == \"A1-B2 B1-C1 A2-C2 A3-C3 B3-C2 A4-C4 A5-C1 B4-C3\"\n\n----------------------------------------\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2\n3 2''') == 'A1-B2 B1-A2 A3-B3'\nassert solution('''2 3\n2 3''') == 'A1-B1 A2-C2 B2-C1 A3-B3'"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == 'A1-B2 B1-A2 A3-B3'\nassert solution(\"2 3\") == 'A1-B1 A2-C2 B2-C1'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 2\n2 3\n''') == 'A1-B2 B1-A2 A3-B3'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2''') == 'A1-B2 B1-A2 A3-B3'\nassert solution('''2 3''') == 'A1-B1 A2-C2 B2-C1'\nassert solution('''2 3''') == 'A1-B1 A2-C2 B2-C1'"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '7'\nassert solution('4 4') == '9'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\nX.X\nX..X\n''') == '7'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"2 2\\n..\\n..\\nSample Output 1: 7\\nSample Output 2: 9\") == \"7\\n9\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2\\n.X\\n.X.') == '7'\nassert solution('2 2\\nX.X\\n.X.') == '9'\nassert solution('1 2\\n..X\\n.X.') == '5'\nassert solution('4 4\\nX.X\\n.XX\\nX.X') == '7'\nassert solution('4 4\\nX.X\\nX.X\\n.X.\\nX..') == '5'"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\n..\\n..') == '7'\nassert solution('4 4\\nX.X\\nX..\\n..X') == '9'\nassert solution('4 4\\nXXXX\\nXXXX\\nXXXX\\nXXXX') == '8'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2\\n.X.\\nX..\\n..X') == '7'\nassert solution('4 4\\nXX.\\n.X.\\n..X') == '9'"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 4') == '2'"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '7'\nassert solution('4 4') == '9'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2\n.XX.\nX.X.\n.XX.''') == '7'\nassert solution('''4 4\n.XX.\nX..X\n..X.\n..XX''') == '9'\nassert solution('''5 5\nXXX.\nXX.X\nXX.X\nX.XX\nXXXX\nXXXX''') == '7'\nassert solution('''5 5\nXXX.\nXX.X\nXX.X\nX.XX\nXXXX\nXXXX''') == '7'\nassert solution('''5 5\nXXX.\nXX.X\nXX.X\nX.XX\nXXXX\nXXXX''') == '7'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n.X.\\n.X.\") == \"7\"\nassert solution(\"4 4\\nX.XX\\nX..X\\n..X.\\n..XX\") == \"9\"\nprint(\"All test cases passed\")\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n3 3 2 2 100\\n1 1 1 1 500\\n') == '600'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n3 3 2 2 100\n1 1 1 1 500''') == '600'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '600'\nassert solution('4') == '-1'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 1 2 1 1\n1 2 1 1 2\n1 3 1 1 2\n2 2 1 1 3\n''') == '600'\nassert solution('''\n1\n1 1 1 1 500\n''') == '-1'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3 2 2 100\n1 1 1 1 500\n''') == '600', f'Should be 600, got {solution('')} instead.'\n\nassert solution('''\n2\n2 0 2 1 100\n6 0 8 1 1\n''') == '100', f'Should be 100, got {solution('')} instead.'"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3\n3 2 2 2 100\n1 1 1 1 500\n\"\"\"\n) == \"600\"\n\nassert solution(\n\"\"\"\n2\n2 0 2 1 100\n6 0 8 1 1\n\"\"\"\n) == \"100\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    2\n    3 3 2 2 100\n    1 1 1 1 500\n    ''') == '600'\n    assert solution('''\n    2\n    1 1 1 1 500\n    ''') == '-1'\n    assert solution('''\n    2\n    6 0 8 1 1\n    ''') == '100'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3 2 2 100\n1 1 1 1 500\n''') == '600'\nassert solution('''3 3 2 2 200\n1 1 1 1 500\n''') == '200'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '600'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n3 3 2 2 100\n1 1 1 1 500\n''') == '600'\nassert solution('''\n3\n2 0 2 1 100\n6 0 8 1 1\n''') == '100'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n7''') == '2'\nassert solution('''12\n5''') == '1'\nassert solution('''18\n7''') == '0'\nassert solution('''203\n8''') == '1'\nassert solution('''2044\n19''') == '2'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n361') == '3'\nassert solution('2\\n11') == '0'\nassert solution('3\\n21') == '0'"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"361\") == \"3\"\nassert solution(\"11\") == \"0\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0'\nassert solution('1') == '1'\nassert solution('11') == '0'\nassert solution('361') == '3'\nassert solution('3611') == '2'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\""
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '0'\nassert solution('6') == '1'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '3'\nassert solution('4') == '2'\nassert solution('5') == '1'\nassert solution('6') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"0\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3') == '3'\nassert solution('2\\n11') == '0'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([3, 10, 2, 100, 1, 10]) == \"10\"\nassert solution([3, 10, 2, 100, 1, 10]) == \"cancel road trip\"\nassert solution([3, 10, 2, 100, 1, 10]) == \"cancel road trip\""
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"cancel road trip\"\nassert solution(\"3 10\") == \"10\"\nassert solution(\"3 10\") == \"cancel road trip\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n3\n1\n10\n11\n5\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '10'\n\"\"\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 10\n2 100\n1 10\n11 5\n''') == '10'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 10') == '10'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"cancel road trip\"\nassert solution(\"10\") == \"10\"\nassert solution(\"10 10 10\") == \"10\"\nassert solution(\"10 2 100\") == \"10\"\nassert solution(\"2 100 10\") == \"10\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4') == '10'\nassert solution('3 10') == '10'\nassert solution('5 5') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n11 5') == '10'\nassert solution('3 10\\n2 100\\n1 10\\n11 5') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 10') == '10'\nassert solution('3 10') == 'cancel road trip'\nassert solution('1 10') == '10'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('3 3') == '1 2'\nassert solution('5 7') == '0 7 8 11 15 16 19'"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 9\n2 8\n1 1\n3 4\n5 100\n''') == '1 8 9 9 100 101 108 109 109'\nassert solution('''\n5 7\n2 2\n3 8\n2 7\n2 4\n3 8\n''') == '0 7 8 11 15 16 19'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 2\\n3 4\\n2 7\") == \"0 7 8 11 15 16 19\"\n\"\"\""
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 9\n2 8\n1 1\n3 4\n5 100\n''') == '1 8 9 9 100 101 108 109 109'\n\nassert solution('''\n5 7\n2 2\n3 8\n2 7\n2 4\n3 8\n''') == '0 7 8 11 15 16 19'\n\nassert solution('''\n6 4\n2 2\n3 8\n2 7\n2 4\n3 8\n''') == '0 7 8 11 15 16 19'\n\nassert solution('''\n6 5\n2 2\n3 8\n2 7\n2 4\n3 8\n''') == '1 8 9 9 100 101 108 109 109'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 9\n2 8\n1 1\n3 4\n5 100\n''') == '1 8 9 9 100 101 108 109 109', 'First'\nassert solution('''\n5 7\n2 2\n3 8\n2 7\n2 4\n3 8\n''') == '0 7 8 11 15 16 19', 'Second'"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 9\n2 8\n1 1\n3 4\n5 100\n''') == '1 8 9 9 100 101 108 109 109'\n\nassert solution('''\n5 7\n2 2\n3 8\n2 7\n2 4\n3 8\n''') == '0 7 8 11 15 16 19'"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 9\n2 8\n1 1\n3 4\n5 100\n''') == '1 8 9 9 100 101 108 109 109'"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 5\n2 3\n1 4\n5 5\n''') == '1 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 9\n2 8\n1 1\n3 4\n5 100\n''') == '1 8 9 9 100 101 108 109 109'\nassert solution('''\n5 7\n2 2\n3 8\n2 7\n2 4\n3 8\nSample Output 2:\n0 7 8 11 15 16 19\n''') == '0 7 8 11 15 16 19'"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 7\n2 2\n3 8\n2 7\n2 4\n3 8''') == '0 7 8 11 15 16 19'"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == \"1\"\nassert solution('''\n2 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == \"2\"\nassert solution('''\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == \"2\"\n'''"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 5 3\") == \"1\"\nassert solution(\"1 5 3\") == \"3\"\nassert solution(\"1 5 3\") == \"1\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 3 3\") == \"1\"\nassert solution(\"1 5 3\") == \"3\"\nassert solution(\"1 5 3\") == \"3\"\nassert solution(\"1 5 3\") == \"3\"\nassert solution(\"1 5 3\") == \"3\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 3\\n0 0 1\\n3 3') == '1'\nassert solution('1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3') == '3'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5 3') == '1'\nassert solution('1 5 3') == '3'\nassert solution('1 5 3') == '1'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == '1'\nassert solution('''\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == '3'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3') == '1'\nassert solution('1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3') == '3'\nassert solution('1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n0 0\\n0 3') == '2'\nassert solution('1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n-3 3\\n0 0\\n0 3') == '1'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"1\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"3\"\n\nclass Test_solution(unittest.TestCase):\n    def test_minions(self):\n        pass"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 5 3\n-1 -2 1\n3 3\n0 0 1\n-3 3\n3 -3\n0 0 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3''') == '1'\n\nassert solution('''1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3''') == '3'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 10') == '4'\nassert solution('5 9') == '2'\nassert solution('5 1') == '4'\nassert solution('5 10') == '4'\nassert solution('5 1') == '0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '4 2 0 2'"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 10000\\n1\") == \"4\"\nassert solution(\"5 9\\n1 10\\n1 9\\n1\") == \"2\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 10000\") == \"4\"\nassert solution(\"5 9\") == \"2\""
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1\\n') == '4'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1\\n') == '4'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9\\n') == '2'"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 10000\\n1\\n1\\n1\\n1\\n1\") == \"4\"\nassert solution(\"5 9\\n1\\n1\\n10\\n1\\n9\") == \"2\""
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 10000\n1\n1\n1\n1\n1\nSample Output 2:\n2\n0\n0\n2\n0\n''') == '4'\n\nassert solution('''5 9\n1\n1\n10\n1\n9\nSample Output 2:\n2\n0\n0\n2\n0\n''') == '0'\n\nprint(solution('''\n5 9\n1\n1\n10\n1\n9\nSample Output 2:\n2\n0\n0\n2\n0\n'''))"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 10000\\n') == '4\\n'\nassert solution('5 9\\n') == '2\\n'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 10\\n\") == \"4\"\nassert solution(\"2 5\\n1 2 3 4 5\\n\") == \"2\"\nassert solution(\"5 100000\\n1\\n9\\n1\\n9\\n\") == \"4\""
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read().strip()"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\nne') == 'NE', \"Wrong result\"\n\nassert solution('4\\nkava') == 'DA', \"Wrong result\""
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"DA\"\n\"\"\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n'''2\nne\n''') == 'NE'\n\nassert solution(\n'''4\nkava\n''') == 'DA'"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('ne') == 'NE'\nassert solution('kava') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'DA'\nassert solution('2') == 'NE'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\nne') == 'NE'\nassert solution('4\\nkava') == 'DA'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"NE\", \"TEST 1\"\nassert solution(\"4\") == \"DA\", \"TEST 2\"\nprint(solution(input()))\n\n'''\n\nfrom sys import stdin\n\nn = int(stdin.readline())\nwords = stdin.readline().split()\nbest_word = \"\"\nsecond_best_word = \"\"\n\nfor word in words:\n    if len(word) > len(best_word):\n        best_word = word\n    elif len(word) > len(second_best_word) and word < best_word:\n        second_best_word = word"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2'\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8''') == '0'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 4') == '2'\nassert solution('8 10 4') == '3'\n\n---Solution---\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4 4') == '2'\nassert solution('8 10 4') == '2'\nassert solution('3 5 9 1 3') == '0'\nassert solution('8 10 4') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\nassert solution('''\n8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '1'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\") == \"2\"\nassert solution(\"5 5 4\\n1 2\\n3 2\\n2 3\\n1 1 3\\n2 1 2\\n2 3 1\\n2 2 3\\n1 3 1\\n1 1 2\\n2 2 3\\n2 1 1 3\\n1 3 1\\n3 2 1\\n2 1 3\\n2 1 2\\n3 1 2\\n3 2 1\\n1 2 1\\n2 1 2\\n1 2 3\\n1 2 3\\n1 3 1\\n2 3 2\\n1 1 2\\n1 1 3\\n1 1 2\\n1 3 1\\n2 3 1\\n2 3 2\\n2 2 3\\n2 2 1\\n2 1 3\\n2 1 1\\n1 2 1\\n1 1 2\\n2 1 1\\n2 1 1\\n2 1 3\\n2 2 2\\n1 2 3\\n1 3 1\\n2 2 2\\n1 1 2\\n3 2 2\\n2 2 1\\n1 1 2\\n2 1 3\\n1 3 1\\n1 3 1\\n1 2 1\\n3 1 1\\n2 2 1\\n2 1 1\\n2 3 2\\n1 3 1\\n1 1 2\\n2 3 2\\n2 1 1\\n1 1 2\\n2 2 3\\n2 1 1\\n1 1 1\\n2 1 1\\n2 3 2\\n1 1 2\\n2 3 2\\n1 3 1\\n2 3 2\\n1 2 2\\n1 1 3\\n1 3 1\\n2 1 1\\n3 2 1\\n1 1 2\\n1 2 1\\n1 2 2\\n1 1 3\\n2 3 2\\n2 1 1\\n2 2 1\\n3 2 1\\n3 2 1\\n1 2 1\\n1 1 2\\n1 2 3\\n2 1 1\\n2 2 3\\n1 2 3\\n2 3 2\\n1 2 1\\n1 2 3\\n1 2 2\\n1 1 3\\n1 3 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n1 1 3\\n3 1 1\\n2 1 2\\n2 1 3\\n1 3 1\\n1 2 1\\n2 2 1\\n3 2 2\\n1 1 2\\n2 1 3\\n1 1 2\\n1 1 2\\n1 1 2\\n2 1 1\\n1 1 2\\n1 1 3\\n1 2 1\\n1 1 2\\n1 1 3\\n1 1 2\\n1 1 2\\n1 1 3\\n1 1 3\\n1 1 3\\n1 1 2\\n1 1 2\\n2 2 1\\n1 1 2\\n1 1 3\\n2 2 2\\n1 1 3\\n1 2 1\\n2 1 3\\n2 1 1\\n2 2 3\\n1 2 3\\n1 3 1\\n1 1 2\\n2 2 2\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n2 2 3\\n1 3 1\\n1 2 1\\n1 1 2\\n1 1 3\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\\n0\\n2\\n1\""
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2'\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8''') == '0'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"0\\n0\\n1\\n0\""
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 2\") == \"0\"\nassert solution(\"7 2\") == \"2\"\nassert solution(\"10 3\") == \"1\"\nassert solution(\"14 3\") == \"1\"\nassert solution(\"11 7\") == \"1\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"1 2 1\") == \"2\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n''') == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n''') == \"2\"\nassert solution('''3 3\n0 2\n0 1\n1 1\n1 2 1\n1 3 1\n1 4 2\n1 5 1\n1 6 3\n1 7 1\n1 8 4\n1 9 5\n1 10 6\n1 11 7\n1 12 7\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n2 11\n2 12\n3 1\n3 2\n3 3\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n3 11\n3 12\n4 1\n4 2\n4 3\n4 4\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n4 11\n4 12\n5 1\n5 2\n5 3\n5 4\n5 5\n5 6\n5 7\n5 8\n5 9\n5 10\n5 11\n5 12\n6 1\n6 2\n6 3\n6 4\n6 5\n6 6\n6 7\n6 8\n6 9\n6 10\n6 11\n6 12\n7 1\n7 2\n7 3\n7 4\n7 5\n7 6\n7 7\n7 8\n7 9\n7 10\n7 11\n7 12\n8 1\n8 2\n8 3\n8 4\n8 5\n8 6\n8 7\n8 8\n8 9\n8 10\n8 11\n8 12\n9 1\n9 2\n9 3\n9 4\n9 5\n9 6\n9 7\n9 8\n9 9\n9 10\n9 11\n9 12\n10 1\n10 2\n10 3\n10 4\n10 5\n10 6\n10 7\n10 8\n10 9\n10 10\n10 11\n10 12\n11 1\n11 2\n11 3\n11 4\n11 5\n11 6\n11 7\n11 8\n11 9\n11 10\n11 11\n11 12\n12 1\n12 2\n12 3\n12 4\n12 5\n12 6\n12 7\n12 8\n12 9\n12 10\n12 11\n12 12\n''') == \"1\"\nprint(solution('''5 5\n1 2\n1 3\n1 4\n1 5\n2 4\n2 5\n3 4\n3 5\n4 3\n4 4\n4 5\n4 6\n4 7\n5 2\n5 3\n5 4\n5 5\n5 6\n5 7\n5 8\n5 9\n5 10\n6 2\n6 3\n6 4\n6 5\n6 6\n6 7\n6 8\n6 9\n6 10\n7 2\n7 3\n7 4\n7 5\n7 6\n7 7\n7 8\n7 9\n7 10\n8 2\n8 3\n8 4\n8 5\n8 6\n8 7\n8 8\n8 9\n8 10\n9 2\n9 3\n9 4\n9 5\n9 6\n9 7\n9 8\n9 9\n9 10\n10 2\n10 3\n10 4\n10 5\n10 6\n10 7\n10 8\n10 9\n10 10\n11 2\n11 3\n11 4\n11 5\n11 6\n11 7\n11 8\n11 9\n11 10\n11 11\n11 12\n12 2\n12 3\n12 4\n12 5\n12 6\n12 7\n12 8\n12 9\n12 10\n12 11\n12 12\n'''))\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n''') == \"2\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 2\"\n) == \"2\"\nassert solution(\n    \"1 1\"\n) == \"1\"\nassert solution(\n    \"0 1\"\n) == \"0\"\nassert solution(\n    \"1 0\"\n) == \"1\"\nassert solution(\n    \"1 2 1\"\n) == \"2\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\"\"\") == \"2\"\nassert solution(\"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\"\"\") == \"1\"\nassert solution(\"\"\"\n3 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\"\"\") == \"1\"\nassert solution(\"\"\"\n3 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\"\"\") == \"1\""
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '2'\nassert solution('1 1') == '1'\nassert solution('0 1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 2 1') == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n''') == '2'\nassert solution('''\n3 3\n1 1 1\n0 1 2\n1 0 1\n1 2 0\n1 3 3\n2 1 1\n''') == '1'\nassert solution('''\n5 4\n1 1 1 1 1\n0 1 2 1 2\n1 0 1 1 1\n1 2 0 1 2\n1 3 3 1\n2 1 1 1\n''') == '1'\nassert solution('''\n5 4\n1 1 1 1 1\n0 1 2 1 2\n1 0 1 1 1\n1 2 0 1 2\n1 3 3 1\n2 1 1 1\n''') == '1'\nassert solution('''\n10 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9 10\n1 0 1 1 2 3 4 5 6 7 8 9"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n''') == '1'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 1 1') == '1'\nassert solution('2 2') == '2'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 15\nD 4 10 1\nC 6 1\n\"\"\") == \"40.500000000\"\nassert solution(\"\"\"\n3 15\nD 4 10 1\nC 6 1\nC 9 3\n\"\"\") == \"49.000000000\"\nprint(solution(input()))\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1') == '40.500000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == '40.500000000'\nassert solution('''\n4 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == '49.000000000'\nassert solution('''\n4 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == 'impossible'\nassert solution('''\n3 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == 'impossible'\nassert solution('''\n3 30\nD 4 10 1\nC 6 1\nC 9 3\n''') == 'impossible'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == '40.5'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1\\n') == \"40.5\"\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3\\n') == \"49.000000000\"\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 10') == '1010'\nassert solution('2 15') == '40.5'\nassert solution('3 15') == '49.0'"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 15\nD 4 10 1\nC 6 1\n''') == \"40.500000000\"\nassert solution('''\n3 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == \"49.000000000\"\nprint(solution(input()))\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '40.500000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == '49.000000000'\nassert solution('''\n3 5\nD 4 10 1\nC 6 1\nC 9 3\n''') == '40.500000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nD 4 10 1\nC 6 1\nC 9 3\n''') == '40.500000000'\nassert solution('''\nD 4 10 1\nC 6 1\nC 8 3\n''') == '49.000000000'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n\"\"\") == \"fail\"\n\nassert solution(\"\"\"\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n\"\"\") == \"5 4 9 3 1 10 7 6 2\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\nassert solution('''\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\n'''\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\n\nassert solution('''\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\nassert solution('''\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\nassert solution('''\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\nassert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2', 'First'\nassert solution('''\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail', 'Second'\nassert solution('''\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail', 'Third'\n'''\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2', 'First'\nassert solution('''\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail', 'Second'\nassert solution('''\n11\na 2 1 1\na 2 2 1\na 2 2 2\na 2 2 3\na 2 2 4\na 2 2 5\na 2 2 6\na 2 2 7\na 2 2 8\na 2 2 9\na 2 2 10\nb 1 1 1\nb 1 1 2\nb 1 1 3\nb 1 1 4\nb 1 1 5\nb 1 1 6\nb 1 1 7\nb 1 1 8\nb 1 1 9\nb 1 1 10\nc 2 2 2\nc 2 2 3\nc 2 2 4\nc 2 2 5\nc 2 2 6\nc 2 2 7\nc 2 2 8\nc 2 2 9\nc 2 2 10\nc 2 3 2\nc 2 3 3\nc 2 3 4\nc 2 3 5\nc 2 3 6\nc 2 3 7\nc 2 3 8\nc 2 3 9\nc 2 3 10\nc 2 4 2\nc 2 4 3\nc 2 4 4\nc 2 4 5\nc 2 4 6\nc 2 4 7\nc 2 4 8\nc 2 4 9\nc 2 4 10\nc 2 5 2\nc 2 5 3\nc 2 5 4\nc 2 5 5\nc 2 5 6\nc 2 5 7\nc 2 5 8\nc 2 5 9\nc 2 5 10\nc 2 6 2\nc 2 6 3\nc 2 6 4\nc 2 6 5\nc 2 6 6\nc 2 6 7\nc 2 6 8\nc 2 6 9\nc 2 6 10\nc 2 7 2\nc 2 7 3\nc 2 7 4\nc 2 7 5\nc 2 7 6\nc 2 7 7\nc 2 7 8\nc 2 7 9\nc 2 7 10\nc 2 8 2\nc 2 8 3\nc 2 8 4\nc 2 8 5\nc 2 8 6\nc 2 8 7\nc 2 8 8\nc 2 8 9\nc 2 8 10\nc 2 9 2\nc 2 9 3\nc 2 9 4\nc 2 9 5\nc 2 9 6\nc 2 9 7\nc 2 9 8\nc 2 9 9\nc 2 10 2\nc 2 10 3\nc 2 10 4\nc 2 10 5\nc 2 10 6\nc 2 10 7\nc 2 10 8\nc 2 10 9\nc 2 10 10\n''') == 'fail', 'Third'\nassert solution('''\n11\na 2 1 1\na 2 1 2\na 2 1 3\na 2 1 4\na 2 1 5\na 2 1 6\na 2 1 7\na 2 1 8\na 2 1 9\na 2 1 10\nb 1 1 1\nb 1 1 2\nb 1 1 3\nb 1 1 4\nb 1 1 5\nb 1 1 6\nb 1 1 7\nb 1 1 8\nb 1 1 9\nb 1 1 10\nc 2 2 2\nc 2 2 3\nc 2 2 4\nc 2 2 5\nc 2 2 6\nc 2 2 7\nc 2 2 8\nc 2 2 9\nc 2 2 10\nc 2 3 2\nc 2 3 3\nc 2 3 4\nc 2 3 5\nc 2 3 6\nc 2 3 7\nc 2 3 8\nc 2 3 9\nc 2 3 10\nc 2 4 2\nc 2 4 3\nc 2 4 4\nc 2 4 5\nc 2 4 6\nc 2 4 7\nc 2 4 8\nc 2 4 9\nc 2 4 10\nc 2 5 2\nc 2 5 3\nc 2 5 4\nc 2 5 5\nc 2 5 6\nc 2 5 7\nc 2 5 8\nc 2 5 9\nc 2 5 10\nc 2 6 2\nc 2 6 3\nc 2 6 4\nc 2 6 5\nc 2 6 6\nc 2 6 7\nc 2 6 8\nc 2 6 9\nc 2 6 10\nc 2 7 2\nc 2 7 3\nc 2 7 4\nc 2 7 5\nc 2 7 6\nc 2 7 7\nc 2 7 8\nc 2 7 9\nc 2 7 10\nc 2 8 2\nc 2 8 3\nc 2 8 4\nc 2 8 5\nc 2 8 6\nc 2 8 7\nc 2 8 8\nc 2 8 9\nc 2 8 10\nc 2 9 2\nc 2 9 3\nc 2 9 4\nc 2 9 5\nc 2 9 6\nc 2 9 7\nc 2 9 8\nc 2 9 9\nc 2 10 2\nc 2 10 3\nc 2 10 4\nc 2 10 5\nc 2 10 6\nc 2 10 7\nc 2 10 8\nc 2 10 9\nc 2 10 10\n''') == 'fail', 'Fourth'\nassert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\nk 1 5\nl 1 3\nm 1 3\nn 1 3\no 1 4\np 1 2\nq 1 2\nr 1 3\ns 1 6\nt 1 3\nu 1 3\nv 1 2\nw 1 4\nx 1 2\ny 1 2\nz 1 2\n''') == '5 4 9 3"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n\"\"\") == \"fail\"\n\nassert solution(\"\"\"\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n\"\"\") == \"1 3 5 4 9 7 6 2\"\n\nassert solution(\"\"\"\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n\"\"\") == \"fail\"\n\nassert solution(\"\"\"\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n\"\"\") == \"fail\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7''') == '5 4 9 3 1 10 7 6 2'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"00:00\\n01:01\") == \"3\"\nassert solution(\"00:08\\n00:00\") == \"3\"\n\nSample Input 3:\n00:23\n00:00\nSample Output 3:\n1\n00:22\n00:23\n\nSample Input 4:\n00:00\n00:00\nSample Output 4:\n0\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"0:00\n1:01\n2:02\n3:03\n4:04\n5:05\n6:06\n7:07\n8:08\n9:09\n10:10\n11:11\n12:12\n13:13\n14:14\n15:15\n16:16\n17:17\n18:18\n19:19\n20:20\n21:21\n22:22\n23:23\"\"\"\n) == \"\"\"3\n0:00\n1:00\n1:01\n2:02\n3:03\n4:04\n5:05\n6:06\n7:07\n8:08\n9:09\n10:10\n11:11\n12:12\n13:13\n14:14\n15:15\n16:16\n17:17\n18:18\n19:19\n20:20\n21:21\n22:22\n23:23\"\"\"\n\nassert solution(\n    \"\"\"20:23\n01:01\n02:02\n03:03\n04:04\n05:05\n06:06\n07:07\n08:08\n09:09\n10:10\n11:11\n12:12\n13:13\n14:14\n15:15\n16:16\n17:17\n18:18\n19:19\n20:20\n21:21\n22:22\n23:23\"\"\"\n) == \"\"\"2\n20:23\n01:01\n02:02\n03:03\n04:04\n05:05\n06:06\n07:07\n08:08\n09:09\n10:10\n11:11\n12:12\n13:13\n14:14\n15:15\n16:16\n17:17\n18:18\n19:19\n20:20\n21:21\n22:22\n23:23\"\"\"\n\nassert solution(\n    \"\"\"12:34\n12:01\n12:02\n12:03\n12:04\n12:05\n12:06\n12:07\n12:08\n12:09\n12:10\n12:11\n12:12\n12:13\n12:14\n12:15\n12:16\n12:17\n12:18\n12:19\n12:20\n12:21\n12:22\n12:23\n12:24\n12:25\n12:26\n12:27\n12:28\n12:29\n12:30\n12:31\n12:32\n12:33\n12:34\"\"\"\n) == \"\"\"2\n12:34\n12:01\n12:02\n12:03\n12:04\n12:05\n12:06\n12:07\n12:08\n12:09\n12:10\n12:11\n12:12\n12:13\n12:14\n12:15\n12:16\n12:17\n12:18\n12:19\n12:20\n12:21\n12:22\n12:23\n12:24\n12:25\n12:26\n12:27\n12:28\n12:29\n12:30\n12:31\n12:32\n12:33\n12:34\n12:00\n12:00\n12:00\n12:00\n12:00\n12:00\n12:00\n12:00\n12:00\n12:00\n12:00\n12:00\n12:00\"\"\"\n\nassert solution(\n    \"\"\"16:00\n16:01\n16:02\n16:03\n16:04\n16:05\n16:06\n16:07\n16:08\n16:09\n16:10\n16:11\n16:12\n16:13\n16:14\n16:15\n16:16\n16:17\n16:18\n16:19\n16:20\n16:21\n16:22\n16:23\n16:24\n16:25\n16:26\n16:27\n16:28\n16:29\n16:30\n16:31\n16:32\n16:33\n16:34\n16:35\n16:36\n16:37\n16:38\n16:39\n16:40\n16:41\n16:42\n16:43\n16:44\n16:45\n16:46\n16:47\n16:48\n16:49\n16:50\n16:51\n16:52\n16:53\n16:54\n16:55\n16:56\n16:57\n16:58\n16:59\"\"\"\n) == \"\"\"2\n16:00\n16:01\n16:02\n16:03\n16:04\n16:05\n16:06\n16:07\n16:08\n16:09\n16:10\n16:11\n16:12\n16:13\n16:14\n16:15\n16:16\n16:17\n16:18\n16:19\n16:20\n16:21\n16:22\n16:23\n16:24\n16:25\n16:26\n16:27\n16:28\n16:29\n16:30\n16:31\n16:32\n16:33\n16:34\n16:35\n16:36\n16:37\n16:38\n16:39\n16:40\n16:41\n16:42\n16:43\n16:44\n16:45\n16:46\n16:47\n16:48\n16:49\n16:50\n16:51\n16:52\n16:53\n16:54\n16:55\n16:56\n16:57\n16:58\n16:59\"\"\"\n\nassert solution(\n    \"\"\"12:01\n12:02\n12:03\n12:04\n12:05\n12:06\n12:07\n12:08\n12:09\n12:10\n12:11\n12:12\n12:13\n12:14\n12:15\n12:16\n12:17\n12:18\n12:19\n12:20\n12:21\n12:22\n12:23\n12:24\n12:25\n12:26\n12:27\n12:28\n12:29\n12:30\n12:31\n12:32\n12:33\n12:34\n12:00\n12:00\n12:00\n12:00\n12:00\n12:00\n12:00\n12:00\n12:00\n12:00\n12:00\n12:00\n12:00\n12:00\"\"\"\n) == \"\"\""
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''01:01\n00:00\n''') == \"3\\n00:00\\n01:00\\n00:01\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('00:00') == '3'\nassert solution('01:01') == '3'\nassert solution('00:00') == '3'\nassert solution('00:08') == '3'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"00:00\") == \"3\"\nassert solution(\"01:01\") == \"3\"\nassert solution(\"00:08\") == \"3\""
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"00:00\") == \"3\"\nassert solution(\"01:01\") == \"3\"\nassert solution(\"00:08\") == \"3\"\nassert solution(\"00:00\") == \"1\"\nassert solution(\"00:01\") == \"2\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('00:00\\n01:01') == '3'\nassert solution('00:08\\n00:00') == '3'\nassert solution('00:00\\n00:00') == '0'"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''00:00\n01:01\n''') == '3'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('00:00') == '3'\nassert solution('00:08') == '3'\nassert solution('00:00') == '2'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"00:00\") == \"3\"\nassert solution(\"01:01\") == \"3\"\nassert solution(\"00:08\") == \"3\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"(())\") == \"4,8:8,8:\"\nassert solution(\"()\") == \"4,4:\"\n\"\"\"\n\n\nclass Solution:\n\n    def alternative_bracket_notation(self, s):\n        stack = []\n        dic = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n        for i in s:\n            if i in dic:\n                if stack:\n                    top = stack.pop()\n                    if dic[i]!= top:\n                        return \"NO\"\n                else:\n                    return \"NO\"\n            else:\n                stack.append(i)\n        return \"YES\" if not stack else \"NO\"\n\n    def alternative_bracket_notation2(self, s):\n        stack = []\n        dic = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n        for i in s:\n            if i in dic:\n                if not stack:\n                    return \"NO\"\n                if dic[i]!= stack[-1]:\n                    return \"NO\"\n                stack.pop()\n            else:\n                stack.append(i)\n        return \"YES\" if not stack else \"NO\"\n\n    def alternative_bracket_notation3(self, s):\n        stack = []\n        dic = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n        for i in s:\n            if i in dic:\n                if not stack:\n                    return \"NO\"\n                if dic[i]!= stack[-1]:\n                    return \"NO\"\n                stack.pop()\n            else:\n                stack.append(i)\n        return \"YES\" if not stack else \"NO\"\n\n    def alternative_bracket_notation4(self, s):\n        if not s:\n            return \"NO\"\n        stack = []\n        dic = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n        for i in s:\n            if i in dic:\n                if stack and stack[-1] == dic[i]:\n                    stack.pop()\n                else:\n                    return \"NO\"\n            else:\n                stack.append(i)\n        return \"YES\" if not stack else \"NO\"\n\n    def alternative_bracket_notation5(self, s):\n        if not s:\n            return \"NO\"\n        stack = []\n        dic = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n        for i in s:\n            if i in dic:\n                if stack and stack[-1] == dic[i]:\n                    stack.pop()\n                else:\n                    return \"NO\"\n            else:\n                stack.append(i)\n        return \"YES\" if not stack else \"NO\"\n\n    def alternative_bracket_notation6(self, s):\n        return \"YES\" if self.alternative_bracket_notation(s) else \"NO\"\n\n    def alternative_bracket_notation7(self, s):\n        return \"YES\" if self.alternative_bracket_notation2(s) else \"NO\"\n\n    def alternative_bracket_notation8(self, s):\n        return \"YES\" if self.alternative_bracket_notation3(s) else \"NO\"\n\n    def alternative_bracket_notation9(self, s):\n        return \"YES\" if self.alternative_bracket_notation4(s) else \"NO\"\n\n    def alternative_bracket_notation10(self, s):\n        return \"YES\" if self.alternative_bracket_notation5(s) else \"NO\"\n\n    def alternative_bracket_notation11(self, s):\n        return \"YES\" if self.alternative_bracket_notation6(s) else \"NO\"\n\n    def alternative_bracket_notation12(self, s):\n        return \"YES\" if self.alternative_bracket_notation7(s) else \"NO\"\n\n    def alternative_bracket_notation13(self, s):\n        return \"YES\" if self.alternative_bracket_notation8(s) else \"NO\"\n\n    def alternative_bracket_notation14(self, s):\n        return \"YES\" if self.alternative_bracket_notation9(s) else \"NO\"\n\n    def alternative_bracket_notation15(self, s):\n        return \"YES\" if self.alternative_bracket_notation10(s) else \"NO\"\n\n    def alternative_bracket_notation16(self, s):\n        return \"YES\" if self.alternative_bracket_notation11(s) else \"NO\"\n\n    def alternative_bracket_notation17(self, s):\n        return \"YES\" if self.alternative_bracket_notation12(s) else \"NO\"\n\n    def alternative_bracket_notation18(self, s):\n        return \"YES\" if self.alternative_bracket_notation13(s) else \"NO\"\n\n    def alternative_bracket_notation19(self, s):\n        return \"YES\" if self.alternative_bracket_notation14(s) else \"NO\"\n\n    def alternative_bracket_notation20(self, s):\n        return \"YES\" if self.alternative_bracket_notation15(s) else \"NO\"\n\n    def alternative_bracket_notation21(self, s):\n        return \"YES\" if self.alternative_bracket_notation16(s) else \"NO\"\n\n    def alternative_bracket_notation22(self, s):\n        return \"YES\" if self.alternative_bracket_notation17(s) else \"NO\"\n\n    def alternative_bracket_notation23(self, s):\n        return \"YES\" if self.alternative_bracket_notation18(s) else \"NO\"\n\n    def alternative_bracket_notation24(self, s):\n        return \"YES\" if self.alternative_bracket_notation19(s) else \"NO\"\n\n    def alternative_br"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == '0,0:'\nassert solution('(())') == '4,8:8,8:'\nassert solution('()') == '4,4:'\nassert solution('((()))') == '4,4:4,8:8,8:'\nassert solution('(((())))') == '4,4:4,4:8,8:8,8:'\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('(((()))())') == '(4,8:8,8:8,8:)'\nassert solution('((()))())') == '(4,8:8,8:8,8:)'\nassert solution('((())))') == '(4,4:)'\nassert solution('(())(') == '(4,4:)'\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"((()))\") == \"4,8:8,8:\", \"wrong\"\nassert solution(\"(((())))\") == \"4,8:8,8:\", \"wrong\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('(())') == '4,8:8,8:'\nassert solution('()') == '4,4:'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''((())\n''') == '4,4:'''"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''((()((((((((())))''') == '4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:'\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('()') == '4,8:8,8:'\nassert solution('(())') == '4,4:\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('(())') == '4,8:8,8:'\nassert solution('(()') == '4,4:'\nassert solution('()())') == '4,4:4,4:'\n\"\"\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\n(())\n''') == '4,8:8,8:'\n\nassert solution(\n'''\n()\n''') == '4,4:'\n\n''')"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"5\"\nassert solution(\"1 1\") == \"5\"\nassert solution(\"1 1\") == \"5\""
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 1') == '-1'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"1 1\n26 02 03 03 1\n\"\"\") == \"5\"\n\nassert solution(\"\"\"1 1\n26 02 03 03 2\n\"\"\") == \"185\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 1') == '-1'"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1\n26 02 03 03 1\nSample Output 2:\n185\n''') == '5'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1\n26 02 03 03 1\n''') == \"5\"\n\nassert solution('''\n1 1\n26 02 03 03 2\n''') == \"185\"\n\nassert solution('''\n1 1\n29 02 03 03 1\n''') == \"185\"\n\nassert solution('''\n1 1\n26 02 03 03 2\n''') == \"-1\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1\n26 02 03 03 1\n''') == '5'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(example_input_1) == '5'\nassert solution(example_input_2) == '185'\n\"\"\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n26 02 03 03 1\n''') == \"5\"\nassert solution('''\n1 1\n26 02 03 03 2\n''') == \"185\"\n'''\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n26 02 03 03 1\n''') == '5'\nassert solution('''\n1 1\n26 02 03 03 2\n''') == '185'"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '5 6 1 2 3 4'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 2') == '5 6 1 2 3 4'\nassert solution('4 2') == '2 3 4 1'"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 2') == '5 6 1 2 3 4'\nassert solution('4 2') == '2 3 4 1'\nassert solution('4 1') == '1 2 3 4'\nassert solution('3 1') == '1 2 3'\nassert solution('3 2') == '2 3 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '5 6 1 2'\nassert solution('4 2') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4 \nassert solution('''\n4 2\n3 4 1 2\n''') == '2 3 4 1\n\nassert solution('''\n2 3\n3 4 1\n''') == '1 2 3 4 \n\nassert solution('''\n6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4 \n\nassert solution('''\n4 2\n3 4 1 2\n''') == '2 3 4 1 "
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 4 5 6 1 2\n\"\"\") == \"\"\"\n5 6 1 2 3 4 \n\"\"\".strip()\nassert solution(\"\"\"\n4 2\n3 4 1 2\n\"\"\") == \"\"\"\n2 3 4 1\n\"\"\".strip()\nassert solution(\"\"\"\n5 5\n1 2 3 4 5\n\"\"\") == \"\"\"\n2 3 4 5\n\"\"\".strip()\nassert solution(\"\"\"\n5 5\n5 2 1 4 3\n\"\"\") == \"\"\"\n4 3 5\n\"\"\".strip()"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n10 2\n3 4 1 2 5 6 1 2 3 4 1\"\"\") == \"\"\"5 6 1 2 3 4 1\"\"\"\nassert solution(\"\"\"\n10 3\n3 4 1 2 5 6 1 2 3 4 1\"\"\") == \"\"\"2 3 4 1\"\"\"\"\nassert solution(\"\"\"\n10 2\n3 4 1 2 5 6 1 2 3 4 1\"\"\") == \"\"\"5 6 1 2 3 4 1\"\"\"\"\nassert solution(\"\"\"\n10 3\n3 4 1 2 5 6 1 2 3 4 1\"\"\") == \"\"\"2 3 4 1\"\"\"\"\nassert solution(\"\"\"\n10 2\n3 4 1 2 5 6 1 2 3 4 1\"\"\") == \"\"\"5 6 1 2 3 4 1\"\"\"\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 2') == '5 6 1 2 3 4'\nassert solution('4 2') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n3 4 1 2\") == \"2 3 4 1\"\nassert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 2\n3 4 1 2\n''') == '2 3 4 1'\nassert solution('''6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4'"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1234') == '54321'\nassert solution('7788') == '7777'\nassert solution('1234567890') == '999999999'\nassert solution('1234') == '54321'\nassert solution('987654321') == '987654321'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 1\") == \"51\"\nassert solution(\"98 8\") == \"99\"\nassert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 4\") == \"1110\"\nassert solution(\"10 2\") == \"1110\"\nassert solution(\"1 1\") == \"1110\"\nassert solution(\"1 1\") == \"1110\""
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1374 2') == '7413', \"Solution needs to be >= the largest integer created\"\nassert solution('210 1') == '201', \"Solution needs to be >= the largest integer created\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n4 8\n10\"\"\") == \"74310\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1456 3\n1475 2\n''') == '7513'\nassert solution('''2105 1\n''') == '2101'\nassert solution('''1374 2\n''') == '7413'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '0.666666666666667'\nassert solution('3') == '0.733333333333333'"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n0 0\n1 1\n2 0''') == '0.733333333333333'\n\nassert solution('''4\n0 0\n0 1\n1 1\n1 0\n''') == '0.666666666666667'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n0 0\n0 1\n1 1\n1 0\n''') == '0.666666666666667'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n2 0\") == \"0.733333333333333\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 1\\n1 0') == '0.666666666666667'\nassert solution('3\\n0 0\\n1 1\\n2 0') == '0.733333333333333'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0.666666666666667'\nassert solution('4') == '0.666666666666667'\nassert solution('5') == '0.142857142857143'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '0.666666666666667'\nassert solution('3') == '0.733333333333333'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0.500'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n0 0\n0 1\n1 1\n1 0\n''') == '0.733333333333333'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0\\n0 1\\n1 1\") == \"0.666666666666667\"\nassert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\") == \"0.733333333333333\""
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3 4\n10 1 3\n0 1 20\n''') == '9'\nassert solution('''\n2 3 100\n10 1 10\n10 1 10\n''') == '21'\nassert solution('''\n20 21 5\n0 1 2\n0 1 2\n''') == '22'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n10 1 3\\n0 1 20\") == \"9\"\nassert solution(\"2\\n10 1 3\\n0 1 20\") == \"21\"\nprint(solution('''1\\n10 1 3\\n0 1 20'''))"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3 4\") == \"9\"\nassert solution(\"3 3\") == \"9\"\nassert solution(\"6 4\") == \"21\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3 4\n10 1 3\n0 1 20\n''') == '9'\nprint('Solution:', solution('''\n2 3 100\n10 1 10\n10 1 10\n'''))"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 3 4\n10 1 3\n0 1 20\n\"\"\") == \"9\"\nassert solution(\"\"\"\n2 3 100\n10 1 10\n10 1 10\n\"\"\") == \"21\""
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3 4\n10 1 3\n0 1 20\n''') == '9'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3 4\n10 1 3\n0 1 20\n''') == '9', 'Sample Test 3 Failed'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 3 4\n10 1 3\n0 1 20\n''') == '9'\nassert solution('''\n2 2 3\n10 10 10\n20 10 20\n''') == '21'\nassert solution('''\n3 3 3\n10 10 10\n20 20 20\n''') == '30'\n'''"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 4') == '9'\nassert solution('2 3 100') == '21'"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 3 100\n1 1 30\n1 1 30\n\"\"\") == \"9\"\n\nassert solution(\"\"\"\n6 3 200\n5 1 40\n1 1 40\n1 1 40\n1 1 40\n1 1 40\n\"\"\") == \"9\"\n\nassert solution(\"\"\"\n4 4 200\n0 1 60\n0 1 60\n0 1 60\n0 1 60\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n6 3 100\n1 1 30\n1 1 40\n1 1 40\n1 1 40\n1 1 40\n\"\"\") == \"9\"\n\nassert solution(\"\"\"\n6 4 100\n0 1 50\n1 2 40\n0 1 40\n1 2 40\n0 1 40\n0 1 40\n\"\"\") == \"9\""
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == \"2\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4 7 -\") == \"2\"\nassert solution(\"5 5 7 -\") == \"2\"\nassert solution(\"8 2 7 -\") == \"2\"\nassert solution(\"8 5 7 -\") == \"5\"\nassert solution(\"9 2 7 -\") == \"5\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8 2 7 -\") == \"2\"\nassert solution(\"9 2 7 -\") == \"4\"\nassert solution(\"5 1 5 5 -\") == \"1\"\nassert solution(\"8 2 7 -5\") == \"0\"\nassert solution(\"8 2 7 -4\") == \"0\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 3 +') == '1'\nassert solution('2 2 3 +') == '1'\nassert solution('2 2 3 -') == '1'\nassert solution('2 2 3 -') == '1'\nassert solution('3 2 2 +') == '3'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"8 2 7 -\") == \"2\"\nassert solution(\"9 2 7 -\") == \"4\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2 7 -') == '2'\nassert solution('10 2 7 -') == '4'\nassert solution('8 2 7 -') == '2'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1 1 2\n1 1 2 1\n''') == '2'\nassert solution('''\n3 3 3 2\n1 1 2 1\n1 2 2 1\n1 1 1 2\n''') == '4'\n\nstdin = open('test_input.txt')\nprint(solution(stdin))\nstdin.close()"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"2\"\n\nSolution:\n\nn, m = (int(x) for x in input().split())\nt = int(input())\nop = input()\n\nclass UnionFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.rank = [0] * n\n\n    def find(self, x):\n        if self.parent[x]!= x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        root_x, root_y = self.find(x), self.find(y)\n        if root_x!= root_y:\n            if self.rank[root_x] > self.rank[root_y]:\n                self.parent[root_y] = root_x\n            elif self.rank[root_x] < self.rank[root_y]:\n                self.parent[root_x] = root_y\n            else:\n                self.parent[root_y] = root_x\n                self.rank[root_x] += 1"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''8 2 7 -\n1 1 1 2\n''') == '2'\nassert solution('''9 2 7 -\n1 1 1 2\n''') == '4'\nassert solution('''8 2 7 -\n1 1 1 2\n3 4 4 5\nSample Output 3:\n1\n''') == '1'"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 3 5 -\n1 2 1 2\n1 2 3 4\n1 2 3 4\n1 2 2 2\n1 2 3 4\n1 2 3 4\n''') == '4'\nassert solution('''\n5 3 4 -\n1 2 1 2\n1 2 3 4\n1 2 3 4\n1 2 2 2\n1 2 2 2\n1 2 2 2\n''') == '4'\nassert solution('''\n8 4 8 -\n1 2 1 2\n1 2 3 4\n1 2 3 4\n1 2 1 2\n1 2 3 4\n1 2 3 4\n1 2 1 2\n1 2 3 4\n1 2 3 4\n''') == '4'\nassert solution('''\n4 5 3 -\n1 2 1 2\n1 2 1 2\n1 2 2 2\n1 2 2 2\n1 2 1 2\n1 2 3 4\n1 2 3 4\n1 2 1 2\n1 2 3 4\n1 2 3 4\n''') == '4'\nassert solution('''\n6 5 3 -\n1 2 1 2\n1 2 1 2\n1 2 1 2\n1 2 3 4\n1 2 3 4\n1 2 1 2\n1 2 3 4\n1 2 3 4\n1 2 1 2\n1 2 3 4\n1 2 3 4\n''') == '5'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n''') == '3'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"20 20\") == \"17\"\nassert solution(\"20 20\") == \"18\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n''') == '3'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('4 4') == '3'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\\n4\\n2\\n1\""
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3') == '3'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == '3'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n') == '2'\nassert solution('4\\n3\\n2\\n') == '3'\nassert solution('6\\n1\\n2\\n4\\n3\\n5\\n') == '5'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n\"\"\"\n) == \"3\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4') == '24'\nassert solution('5 5') == '180'"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3') == '6'\nassert solution('2 3') == '12'\nassert solution('3 4') == '24'\nassert solution('4 4') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\n2 1\n''') == '6'\nassert solution('''\n3 4\n2 3 1\n''') == '24'\n\nimport sys\n\nlines = list(map(lambda x: x.split(), list(sys.stdin)))\nn = int(lines[0][0])\nk = int(lines[0][1])\nf = list(map(lambda x: int(x) - 1, lines[1]))"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == '26'"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '6'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 2\nassert solution('5') == 1\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1 2\n''') == '2'\nassert solution('''5\n3 4 5 1 2\n''') == '1'\nprint('All test cases passed...')\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1 2\n''') == '2'\nassert solution('''\n5\n3 4 5 1 2\n''') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"5\\n3 4 5 1 2\") == \"1\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1'\nassert solution('4\\n1 2 3 4') == '2'\nassert solution('4\\n1 2 3 4') == '1'\n'''\n\nn = int(input())\ns = list(map(int, input().split()))\ncount = 0\nfor i in range(n):\n    count += (n - s[i] + 1)\nprint(count % (10 ** 9 + 7))\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n3 4 5 1 2') == '1'\nassert solution('1\\n1 2') == '2'\nassert solution('2\\n2 2') == '1'\nassert solution('1\\n1 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'\nassert solution('3 4 5 1 2') == '2'"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"5\\n3 4 5 1 2\") == \"1\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"9\"\nassert solution(\"3 3\") == \"4\""
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n1 4 10\n5 2 6\n11 1 3\n''') == '9'\nassert solution('''\n2 2\n2 4\n''') == '0'\nassert solution('''\n1 2\n1 3\n''') == '3'\n'''"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"9\"\nassert solution(\"4 1\") == \"4\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '2 2\\n'\n    '1 2 2\\n'\n    '2 1 2\\n'\n) == '4'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n') == '9'\nprint(solution('3 3\\n1 3 1\\n2 1 2\\n1 1 1\\n'))"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n') == '9'\nassert solution('2 2\\n-1 -2\\n1 -3\\n-3 -4\\n') == '2'\nassert solution('4 4\\n4 4\\n4 4\\n4 4\\n') == '0'"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '1'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1\\n2 2\\n1 1') == '4'\nassert solution('1 2\\n2 1\\n1 2') == '2'\nassert solution('5 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5') == '9'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '9'\nassert solution('3 3') == '4'\nassert solution('3 3') == '0'\nassert solution('3 3') == '4'\nassert solution('10 10') == '18'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2 1 3 4\\n1 2\\n1 3\\n3 4') == '6'\nassert solution('4\\n3 4 5 6\\n1 2\\n1 3\\n2 4') == '3'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"6\""
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '6'"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n2 1 3 4\n1 2\n1 3\n3 4\n''') == '6'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"6\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '6'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1 3 4\") == \"6\"\nassert solution(\"4 2 1 3\") == \"5\"\nassert solution(\"3 4 5 6\") == \"3\"\nassert solution(\"8 3 2 1 4 5 6 7 8\") == \"5\""
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1 3 4\\n1 2\\n1 3\\n3 4\\n') == '6\\n'\nassert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\\n') == '3\\n'"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 3 4 5') == '3'\nassert solution('5\\n1 2 3 4 5') == '2'\nassert solution('5\\n1 2 3 4 5') == '1'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1 10\n5 8\n''') == '18'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n1 10\\n5 8') == '18'\nassert solution('3\\n17 144\\n121 121\\n89 98') == '265'\nprint('All tests passed!')"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10\n1 10\n5 8\n8 16\n4 1\n2 3\n6 7\n1 9\n''') == '18'\n\nassert solution('''\n10\n5 8\n8 16\n4 1\n2 3\n6 7\n1 9\n''') == '265'\n\nassert solution('''\n5\n1 10\n5 8\n8 16\n4 1\n2 3\n6 7\n1 9\n''') == '25'\n\nassert solution('''\n10\n1 10\n5 8\n8 16\n4 1\n2 3\n6 7\n1 9\n''') == '18'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 10\n1 10\n1 10\n''') == '18'\nassert solution('''\n2 10\n2 10\n''') == '8'\nassert solution('''\n3 10\n3 10\n''') == '265'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n1 10\n5 8\n''') == '18'\nassert solution('''\n3\n17 144\n121 121\n89 98\n''') == '265'\nassert solution('''\n4\n20\n30\n40\n''') == '42'\nassert solution('''\n1\n1\n2\n''') == '2'"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n1 10\\n5 8') == '18'\nassert solution('3\\n17 144\\n121 121\\n89 98') == '265'\nassert solution('1\\n1 100') == '100'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '18 25 10'"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n1 10\n5 8\n''') == '18'\n\nassert solution('''3\n17 144\n121 121\n89 98\n''') == '265'\n\nassert solution('''4\n1 10\n5 8\n7 11\n''') == '24'\n\nassert solution('''5\n1 10\n5 8\n7 11\n13 14\n''') == '10'\n\nassert solution('''6\n1 10\n5 8\n7 11\n13 14\n15 16\n''') == '8'"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2 1') == '18'\nassert solution('7 5 0') == '25'\nassert solution('5 9 5 0') == '2'\nassert solution('6 9 7 0') == '10'\nassert solution('5 9 9 0') == '1'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 10\\n5 8') == '18'\nassert solution('3 17 144\\n121 121\\n89 98') == '265 25 10'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\n0 0\\n1 1\\n2 1\\n1 0\\n') == '0.50000000'\nassert solution('5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\\n') == '12.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n1 1\\n3 3\\n0 0\\n1 1\\n2 1\\n1 0\\n') == '0.50000000'\nassert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0\\n') == '2.50000000'\nassert solution('5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\\n') == '12.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"0.50000000\"\nassert solution(\"4 5\") == \"12.50000000\"\nassert solution(\"3 5\") == \"4.50000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '0.50000000'\nassert solution('5 5') == '12.50000000'\nassert solution('3 3') == '0.50000000'\nassert solution('8 8') == '16.0'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 3\n0 0\n1 1\n2 1\n1 0\n''') == '0.50000000'\nassert solution('''\n5 5\n0 4\n4 2\n4 1\n3 -1\n-2 4\n''') == '12.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n1 2\\n2 1\\n0 0\\n2 1\\n4 2\\n4 1\\n3 -1\\n-2 4\\n\") == \"8.00000000\"\nassert solution(\"10 20\\n0 0\\n1 1\\n2 1\\n3 0\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1\\n10 1\\n\") == \"16.00000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"12.50000000\"\nassert solution(\"2 1\") == \"0.50000000\"\nassert solution(\"3 -1\") == \"12.50000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"0.5\"\nassert solution(\"5 5\") == \"12.5\"\nassert solution(\"0 0\") == \"0.5\"\nassert solution(\"4 4\") == \"12.5\"\n\n\"\"\""
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 2\\n1 1\\n2 1\\n1 0') == '0.50000000'\nassert solution('5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4') == '12.50000000'\nprint('all tests passed')\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n3 4\") == \"0.50000000\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\") == \"2\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\nassert solution('''\n4 1 2\n0 2\n0 1\n2 1\n2 3\n\n''') == '1'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3 2\") == \"1\"\nassert solution(\"3 3 2 1\") == \"2\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 1 3') == '2'\nassert solution('4 0 4') == '1'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n'''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\nassert solution(\n'''\n4 0 4\n0 2\n0 1\n2 1\n2 3\n''') == '1'\nassert solution(\n'''\n6 2 3\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '4'\nassert solution(\n'''\n8 2 4\n0 1\n0 2\n1 3\n1 4\n1 5\n2 6\n2 7\n4 8\n5 9\n''') == '3'\nassert solution(\n'''\n6 0 3\n0 2\n0 1\n2 1\n2 3\n''') == '1'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4 1\") == \"1\"\nassert solution(\"3 0 4\") == \"1\"\nassert solution(\"3 1 3\") == \"2\""
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 1 3\n0 1\n1 2\n2 3\n1''') == '2'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\") == \"2\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\n\nassert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '1'\n\nassert solution('''\n4 0 4\n0 2\n0 1\n2 1\n2 3\n\n''') == '1'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1 2 1\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2 2 2\n\"\"\") == \"30\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1\") == '6'\nassert solution(\"2 2 2\") == '30'\n\nstdin = \"\"\"\n4 4\n3\n3\n\"\"\"\n\nassert solution(stdin) == '24'\nstdin = \"\"\"\n3 6\n4\n4\n2\n3\n\"\"\"\n\nassert solution(stdin) == '12'\nstdin = \"\"\"\n4 4\n2\n1\n1\n1\n\"\"\"\n\nassert solution(stdin) == '5'\nstdin = \"\"\"\n3 7\n4\n4\n2\n3\n2\n1\n\"\"\""
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    1 2 1\n    ''') == '6'\nassert solution('''\n    2 2 2\n    ''') == '30'''\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(None) == None\nassert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\"\nprint(\"You passed the test!\")\n\nTest Cases\nYour code should pass the following test cases.\nNote that it may also be run against hidden test cases not shown here.\n\n-- Python cases --\nInput:\n('1 2 1')\nOutput:\n6\n\nInput:\n('2 2 2')\nOutput:\n30\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\"\nprint(solution(input()))"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 2 2\"\n    ) == \"6\"\nassert solution(\n    \"1 2 1\"\n    ) == \"6\"\nassert solution(\n    \"1 2 2\"\n    ) == \"30\"\n\nstdin = \"\"\"1 2 1\n1 2 2\n1 3 1\n1 4 2\n1 4 3\n1 5 1\n1 5 2\n1 5 3\n2 3 1\n2 3 2\n2 4 1\n2 4 2\n2 5 1\n2 5 2\n3 1 1\n3 1 2\n3 2 1\n3 2 2\n3 3 1\n3 3 2\n3 4 1\n3 4 2\n3 5 1\n3 5 2\n4 2 1\n4 2 2\n4 5 1\n4 5 2\n5 1 1\n5 1 2\n5 2 1\n5 2 2\"\"\"\n\nfor stdin in stdin.split(\"\\n\"):\n    print(solution(stdin))\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 2 1''') == '6'\nassert solution('''2 2 2''') == '30'''\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n2020 2020 2020\nSample Input 2:\n2\n1 9999999\nSample Output 2:\nimpossible''') == 'impossible'\n\nassert solution('''5\n1 2 3 4 5\nSample Output 3:\n3 1 4 5''') == '3 1 4 5'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2021 2020 2020\"\nassert solution(\"2\") == \"impossible\"\nprint(solution(input))\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 9999999') == '1 9999999'\nassert solution('1 2 3 4 5') == 'impossible'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == '2021 2020 2020'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 9999999\") == \"impossible\"\nassert solution(\"2 1\") == \"2021 1\"\nassert solution(\"3 1\") == \"2021 1\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"5\") == \"impossible\"\nassert solution(\"2\") == \"2021 2020 2020\"\nassert solution(\"4\") == \"2021 2020 2020 2020 2020\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2021 2020 2020\", \"Basic test case\"\nassert solution(\"2\") == \"impossible\", \"Test case 2\"\nassert solution(\"1\") == \"impossible\", \"Test case 1\""
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 9999999') == 'impossible'\nassert solution('2 1 9999999') == 'impossible'\nassert solution('2 2 1 9999999') == 'impossible'"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 9999999\n2 9999999\n3 9999999\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n1 9999999\n9999999 9999999\n9999999 9999999\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n1 9999999\n2 9999999\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n2020 2020 2020\n\"\"\") == \"2021 2020 2020\"\nassert solution(\"\"\"\n2\n1 9999999\n\"\"\") == \"impossible\""
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 100\n''') == '1'\nassert solution('''\n2 100\n''') == '0'\nassert solution('''\n1 100\n''') == '1'\nassert solution('''\n1 100\n''') == '0'\nassert solution('''\n1 100\n''') == '0'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8') == '0'\nassert solution('8 55 12 10') == '2'\nassert solution('6 55 8 5 1') == '1'\nassert solution('8 55 12 10') == '1'\nassert solution('8') == '1'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n') == '1'\nassert solution('30\\n70') == '11'\nassert solution('1\\n66\\n') == '2'\nassert solution('30\\n69') == '2'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4') == '2'\nassert solution('1 2') == '1'"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n30 70\n''') == '11'\nassert solution('''\n20 1\n''') == '2'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4') == '4'\nassert solution('1 2') == '1'\nassert solution('1 3') == '0'\nassert solution('1 4') == '1'"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"30 70\") == \"11\"\nassert solution(\"66 69\") == \"2\""
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1,2\") == \"2\"\nassert solution(\"1,2,3\") == \"3\"\nassert solution(\"100,200,300\") == \"2\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nL 120\nR 160\n''') == '11'\nassert solution('''\nL 120\nR 80\n''') == '2'\nprint('all tests passed')"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4') == '2'\nassert solution('3 5') == '1'\nassert solution('4 3') == '3'\nassert solution('11 11') == '3'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2 0\n>@\n>~\n''') == \"2\"\nassert solution('''\n3 5 1\n>>@<<\n>~#~<\n''') == \"4\"\n''')\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'\nassert solution('4 5 1') == '1'\nassert solution('5 5 1') == '4'\nassert solution('4 5 1') == '1'"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 0') == '1'\nassert solution('2 2 0') == '1'\nassert solution('2 2 1') == '2'\nassert solution('3 4 1') == '2'\nassert solution('3 2 1') == '2'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'\nprint('all tests passed')"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 0') == '1'\nassert solution('3 5 1') == '2'"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '2 2 0\\n>@\\n>~\\n') == '2'\n\nassert solution(\n    '3 5 1\\n>>@<<\\n>~#~<') == '4'\n\nassert solution(\n    '8 9 5\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n') == 'begin repairs'\n\nassert solution(\n    '13 15 5\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<>#~\\n>@<"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 0\") == \"2\"\nassert solution(\"3 5 1\") == \"4\""
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''143175=120''') == '14+31+75=120'\nassert solution('''5025=30''') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''143175=120''') == '14+31+75=120'\nassert solution('''5025=30''') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n143175=120\n''') == '14+31+75=120', f'Expected {14+31+75=120} got {solution('''143175=120''')}'\nassert solution('''\n5025=30\n''') == '5+025=30', f'Expected {5+025=30} got {solution('''5025=30''')}'"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''143175=120''') == '14+31+75=120'\nassert solution('''5025=30''') == '5+025=30'\nprint('The solution is correct.')"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\""
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n8\n1\n3\n2\n4\n1\n5\n2\n4\n''') == '1 2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8\n1\n2\n3\n4\n5\n6\n7\n1''') == '1 2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2\\n3 4\\n5 6\\n7 1') == '1 2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '-1'\nassert solution('4') == '2 4'\nassert solution('5') == '-1'\nassert solution('6') == '5'\nassert solution('7') == '5'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n') == '1 2'\nassert solution('8\\n1\\n2\\n3\\n4\\n1\\n5\\n2\\n4\\n') == '-1'\nassert solution('8\\n1\\n2\\n3\\n4\\n1\\n5\\n2\\n4\\n') == '1 2'"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '-1'\nassert solution('4') == '1 2'\nassert solution('7') == '-1'"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1\n2\n3\n4\n5\n''') == '1 2'\nassert solution('''\n5\n1\n2\n3\n4\n5\n''') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4\n1\n3\n2\n4\n1\n5\n2\n4\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n8\n1\n2\n3\n4\n5\n6\n7\n1\nSample Output 3:\n-1\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 1 2 4\\n2\\n4\\n5\\n2\") == \"1 2\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n1\n3\n2\n4\n1\n5\n2\n4\nSample Output 3:\n1 2\n''') == '1 2'\n\nSample Input 4:\n8\n1\n2\n3\n4\n5\n6\n7\n1\nSample Output 4:\n-1\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1101\n0110\n0111''') == '1'\n\nassert solution('''1101\n0110\n0111''') == '0'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"0\") == \"0\"\nprint(solution())"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\n\nimport unittest\n\nclass Test(unittest.TestCase):\n\n    def test_given_case_1(self):\n        self.assertEqual(solution('1101'), '1')\n\n    def test_given_case_2(self):\n        self.assertEqual(solution('1'), '0')"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\nassert solution('01') == '0'\nassert solution('10001') == '2'\nassert solution('10') == '0'"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\""
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1101') == '1'\nassert solution('01') == '0'"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"10101\") == \"0\"\nprint(solution(input()))\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\nprint(solution(input()))\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1101') == '1'\nassert solution('101') == '0'\n\"\"\"\n\nimport sys\nsys.path.append('./Leetcode')\nfrom leetcode.common.common_functions import *\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        lights = list(map(lambda x: int(x), stdin))\n        min_time = 0\n        for i in range(len(lights)):\n            if lights[i] == 1:\n                lights[i] = 0\n            else:\n                lights[i] = 1\n            if i < len(lights)-1:\n                if lights[i+1] == 1 and lights[i] == 0:\n                    lights[i] = 1\n                    lights[i+1] = 0\n            if lights[min_time] == 1:\n                min_time = i+1\n        return str(min_time)\n\nprint(Solution().solution(raw_input()))"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 2\\n1 2 3 4 5\\n2 3\\n5 5 1 5 6 7 3 8 3 9\\n2 3\"\n) == \"1\\n\"\nassert solution(\n    \"10 20\\n10 20 10 20 20 10 20 10 20 10 20\\n3 3\"\n) == \"3\\n\"\nassert solution(\n    \"5 1\\n1 2 3 4 5\\n2 3\\n3 3 1 3\\n1 2\\n2 3\"\n) == \"2\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n\"\"\") == \"1\\n0\\n2\\n\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\nassert solution(input) == '3'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 3') == '2'\nassert solution('3 2') == '0'\nassert solution('1 1') == '0'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2 1\n4 1 6 3 6\n7 3 4 2 6 5 6 1\n1 2\n2 3\n3 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '1'\nassert solution('2 1') == '0'\nassert solution('4 1 6 3 6') == '3'\nassert solution('7 3 4 2 6 5 6 1') == '2'\nassert solution('1 2') == '0'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\") == \"1\\n0\\n2\\n\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\"\"\") == \"1\"\nassert solution(\"\"\"\n4 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\"\"\") == \"0\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 1\") == \"0\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"2\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 1') == '0'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1') == '4.000000'\nassert solution('4 2') == '3.666666'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n1 2 3 4\\n\") == \"4.000000\"\nassert solution(\"4 2\\n2 4 3 4\\n\") == \"3.666666\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '1.5'\nassert solution('4 1') == '1.5'\nassert solution('4 2') == '2.0'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 1\n1 2 3 4\n''') == '4.000000'\nprint(solution('''\n4 2\n2 4 3 4\n'''))\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '3.666666'\nassert solution('3 2') == '4.000000'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 1\n1 2 3 4\n''') == '4.000000'\nassert solution('''\n4 2\n2 4 3 4\n''') == '3.666666'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1.00000'\nassert solution('3 2') == '3.666666'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 1\n1 2 3 4''') == '4.000000'\nassert solution('''4 2\n2 4 3 4''') == '3.666666'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1') == '1'\nassert solution('4 2') == '3.333333'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1') == '5.0'\nassert solution('4 2') == '3.666667'\n\ninput = stdin\n\nn, k = map(int, input().split())\nlst = list(map(int, input().split()))"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.625'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n''') == '0.625'\nassert solution('''\n4 4 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n''') == '0.500'\nassert solution('''\n4 4 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n''') == '0.750'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n\"\"\") == \"0.750\"\nassert solution(\"\"\"\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n\"\"\") == \"0.625\"\nassert solution(\"\"\"\n1 1 1 1\n1.0 1.0\n1.0 1.0\n1.0 1.0\n\"\"\") == \"0.5\"\nassert solution(\"\"\"\n1 1 1 1\n1.0 1.0\n1.0 1.0\n1.0 1.0\n\"\"\") == \"0.5\"\nassert solution(\"\"\"\n3 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n\"\"\") == \"0.0\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 5 5\") == \"0.750\"\nassert solution(\"2 2 5 5\") == \"0.625\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"0.625\"\n\"\"\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2 5 5\") == \"0.750\"\nassert solution(\"3 3 3 3\") == \"0.750\"\nassert solution(\"2 3 3 3\") == \"0.750\"\nassert solution(\"2 4 4 4\") == \"0.750\"\nassert solution(\"1 1 1 1\") == \"0.750\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.750'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n\"\"\") == \"0.625\"\nassert solution(\n\"\"\"\n3 4 5 5\n3.0 3.0\n3.0 4.0\n3.0 5.0\n4.0 3.0\n4.0 4.0\n4.0 5.0\n5.0 3.0\n5.0 4.0\n5.0 5.0\n\"\"\") == \"0.0625\"\nassert solution(\n\"\"\"\n5 6 5 5\n5.0 5.0\n5.0 6.0\n6.0 5.0\n6.0 6.0\n5.0 7.0\n6.0 7.0\n7.0 5.0\n7.0 6.0\n\"\"\") == \"0.0\"\nassert solution(\n\"\"\"\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n\"\"\") == \"0.0\"\nassert solution(\n\"\"\"\n3 4 5 5\n3.0 3.0\n3.0 4.0\n3.0 5.0\n4.0 3.0\n4.0 4.0\n4.0 5.0\n5.0 3.0\n5.0 4.0\n5.0 5.0\n\"\"\") == \"0.0\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0\") == \"0.750\"\nassert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0\") == \"0.625\""
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0''') == '0.625'\nassert solution('''2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0''') == '0.750'"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 4\n2 3 0 7\n0 0 2 1\n0 0 3 0''') == '37'"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 4') == '2', \"Wrong!\"\nassert solution('3 4') == '37', \"Wrong!\"\nassert solution('2 3 0 7') == '37', \"Wrong!\"\nassert solution('0 0 2 1') == '37', \"Wrong!\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '2'\nassert solution('4 4') == '37'\nassert solution('5 5') == '30'\nassert solution('6 6') == '12'\nassert solution('7 7') == '46'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3\n1 2 4\n0 3 6\n4 0 3\n''') == '2'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n1 2 4\n0 3 6\n4 0 3\n''') == '2'\nassert solution('''\n3 4\n2 3 0 7\n0 0 2 1\n0 0 3 0\n''') == '37'\nassert solution('''\n5 5\n1 2 3 4 5\n1 4 2 4 5\n1 5 2 4 5\n1 5 4 2 4\n1 4 5 2 4\n1 5 5 2 4\n1 2 3 4 5\n1 4 2 4 5\n1 5 2 4 5\n1 5 4 2 4\n''') == '27'\n\n'''"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '2'\nassert solution('4 4') == '37'\nassert solution('3 4') == '0'\n'''"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3\\n') == '2'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 4') == '36'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 3') == '10'\nassert solution('4 4') == '18'\nassert solution('4 5') == '11'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"10\"\nassert solution(\"1 1 1 1\") == \"1\"\nprint(solution(open(\"input.txt\")))\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 3\n1234\n1 4\n1 4\n1 4''') == '10\\n14\\n18\\n'\n\nassert solution('''4 4\n1234\n1 1\n1 2\n1 3\n1 4''') == '1\\n4\\n9\\n16\\n'\n\nassert solution('''20 5\n1 9\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5') == '10'\nassert solution('4 5') == '14'"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 3\n1234\n1 4\n1 4\n1 4\n\"\"\") == \"10\"\nassert solution(\"\"\"\n4 4\n1234\n1 1\n1 2\n1 3\n1 4\n\"\"\") == \"1 4 9 16\""
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1234\\n1 4\\n1 4\\n1 4\\n\") == \"10\\n14\\n18\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == '10'\nassert solution('4 4') == '1'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 3\n1234\n1 4\n1 4\n1 4\n''') == '10'\nassert solution('''4 4\n1234\n1 1\n1 2\n1 3\n1 4\n''') == '1 4'\nprint('all tests passed')\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '10'\nassert solution('4 4') == '18'\nassert solution('20 2') == '0'\nassert solution('1000 2') == '984'\nassert solution('10 3') == '10'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3\n1234\n1 4\n1 4\n1 4\n''') == '10'\nassert solution('''\n4 4\n1234\n1 1\n1 2\n1 3\n1 4\n''') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2 3') == '2'\nassert solution('5 2 4') == '1'"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 2 4\n1 3\n3 4\n2 4\n4 5''') == '1'\nprint(\"You're all set!\")\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2 4') == '1'\nassert solution('3 2 5') == '2'\nassert solution('6 2 8') == '4'\nassert solution('8 2 6') == '1'\nassert solution('2 4 5') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2 3\") == \"2\"\nassert solution(\"3 2 4\") == \"1\"\nassert solution(\"5 2 4\") == \"1\"\nassert solution(\"5 5 5 5\") == \"1\"\nprint(\"You're all set!\")"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == \"1\"\nassert solution(\"4 2 3\") == \"2\"\nassert solution(\"5 2 4\") == \"1\""
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 3\") == \"2\"\nassert solution(\"4 2 3\") == \"2\"\nassert solution(\"5 2 4\") == \"1\""
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 2 4\n1 3\n3 4\n2 4\n4 5\n''') == '2'\nassert solution('''\n4 2 3\n1 3\n2 3\n3 4\n''') == '1'\nassert solution('''\n5 2 4\n1 3\n3 4\n2 4\n4 5\n''') == '1'\n'''\n\nfrom functools import reduce"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 2 3\n1 3\n2 3\n3 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5 2 4\n1 3\n3 4\n2 4\n4 5\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n10 5 3\n1 5\n2 6\n3 7\n4 8\n5 9\n6 10\n7 11\n8 12\n9 13\n10 14\n\"\"\") == \"1\"\n\nprint(\"All test cases passed.\")"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'yes'\nassert solution('2') == 'no'"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'no'\nassert solution('2') == 'no'\nassert solution('3') == 'yes'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n10000 0 10000 10000 0 10000\n3\n10000 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0 10000\nSample Output 1:\nyes\n''') == 'no'\nassert solution('''2\n9996 0 9997 0 0 1\n9999 0 10000 0 0 1\n2\n9997 0 9998 0 0 1\n9998 0 9999 0 0 1\nSample Output 2:\nno\n''') == 'yes'\nassert solution('''1\n9996 0 9997 0 0 1\n9999 0 10000 0 0 1\nSample Output 1:\nyes\n''') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n9996 0 9997 0 0 1\n9999 0 10000 0 0 1\n2\n9997 0 9998 0 0 1\n9998 0 9999 0 0 1''') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"yes\"\nassert solution(\"2\") == \"no\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'yes'\nassert solution('2') == 'no'"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == 'yes'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n10000 0 10000 10000 0 10000\n3\n10000 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0''') == 'no'\nassert solution('''2\n9996 0 9997 0 0 1\n9999 0 10000 0 0 1\n2\n9997 0 9998 0 0 1\n9998 0 9999 0 0 1''') == 'yes'\nassert solution('''2\n1\n1\n1\n1\n1''') == 'no'"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'no'\nassert solution('2') == 'yes'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'no'\nassert solution('2') == 'yes'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n1 2\n2 3\n1 3\n''') == 'YES'\nassert solution('''\n4 3\n1 2\n1 3\n1 4\n''') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"YES\\n1 3\\n2 1\\n\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('3 3') == 'YES'\nassert solution('1 2') == 'YES'\nassert solution('1 3') == 'YES'\nassert solution('1 4') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3\n1 2\n2 3\n1 3\n''') == 'YES'\nassert solution('''4 3\n1 2\n1 3\n1 4\n''') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 3\n1 2\n1 3\n1 4\n''') == 'YES'\nassert solution('''\n3 3\n1 2\n2 3\n1 3\n''') == 'YES'\nassert solution('''\n3 3\n1 2\n2 3\n1 3\n''') == 'NO'\nassert solution('''\n5 3\n1 2\n1 3\n1 4\n2 3\n''') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 3\") == \"NO\"\nassert solution(\"1 4\") == \"NO\"\nassert solution(\"4 3\") == \"YES\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n1 2\n2 3\n1 3\n1 4\nSample Input 3:\n8 2\n1 2\n1 3\n2 1\n2 3\n1 4\n1 5\n2 4\n3 6\n3 7\nSample Output 3:\nYES\n1 3\n3 2\n4 1\n2 1\n4 2\n5 1\n5 3\n6 2\n6 4\n7 2\n7 3\n8 2\n8 1\n''') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3\\n2 3\\n1 3\\n1 4') == 'YES\\n1 3\\n2 1\\n3 2'\nassert solution('3 3\\n1 2\\n2 3\\n1 3') == 'NO'\nassert solution('5 3\\n1 2\\n1 3\\n1 4\\n1 5\\n2 4\\n3 4\\n4 5\\n3 5') == 'YES'\nassert solution('5 3\\n1 2\\n2 3\\n1 3\\n1 4\\n1 5\\n3 4\\n4 5\\n3 5') == 'NO'\n\nimport aoc\nimport sys"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n1 2\n2 3\n1 3\n''') == 'YES'\nassert solution('''\n4 3\n1 2\n1 3\n1 4\n''') == 'NO'"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == 'YES\\n1 3\\n2 1\\n3 2'\nassert solution('4 3') == 'NO'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'inconsistent'\nassert solution('1 3') == 'consistent'\nassert solution('5 5') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n3 3\n0 > 1\n1 = 2\n0 = 2\n    \"\"\"\n) == \"inconsistent\"\nassert solution(\n    \"\"\"\n5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n    \"\"\"\n) == \"consistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2''') == 'inconsistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\nSample Output 3:\nconsistent''') == 'consistent'\nassert solution('''3 2\n0 = 1\n1 > 2\nSample Output 4:\ninconsistent''') == 'inconsistent'\nprint(solution('''10 10\n0 > 9\n1 > 8\n2 > 7\n3 > 6\n4 > 5\n5 > 4\n6 > 3\n7 > 2\n8 > 1\n9 > 0'''))\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'inconsistent'\nassert solution('3 3') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\nassert solution('''\n5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == 'inconsistent'\nassert solution('5 5') == 'consistent'\n\n------Task------\nGiven an array of integers $a$, determine whether it is possible to divide the array into two subsets of equal sum.\n\nExample 1:\n\nInput: $a = [1,2,3,4,5]$\nOutput: $false$\n\nExample 2:\n\nInput: $a = [1,1,3,4,5]$\nOutput: $true$\n\nExample 3:\n\nInput: $a = [-1,-1,-1,-1]$\nOutput: $false$\n\nExample 4:\n\nInput: $a = [-1,-1]$\nOutput: $true$\n\n-----Hints-----\n1. Consider the sum of the array, $s$;\n2. If the length of the array is odd, then we can only get a subset with a sum of $s/2$;\n3. If the length of the array is even, we can get a subset with a sum of $s/2$.\n4. If the sum of the array is divisible by 2, then we can get a subset with a sum of $s/2$.\n\n\"\"\"\nfrom typing import List\nimport unittest\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n0 > 1\n1 = 2\n0 = 2\n0 > 3\n1 > 4\n''') == 'inconsistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'inconsistent'\nassert solution('''2 3\n= 1\n= 2\n''') == 'consistent'\nassert solution('''2 2\n= 1\n= 2\n''') == 'inconsistent'\nassert solution('''3 3\n= 1\n= 2\n= 2\n''') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3 3\n0 > 1\n1 = 2\n0 = 2\n\"\"\") == 'inconsistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2''') == 'inconsistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4''') == 'inconsistent'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n\") == \"1.57079633\"\nassert solution(\"3\\n1 0 0\\n2 0 1\\n3 0 2\\n\") == \"1938.65135885\"\nassert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n\") == \"1.57079633\"\nassert solution(\"5\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n\") == \"1.57079633\"\nassert solution(\"10\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n\") == \"41938.65135885\""
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\nassert solution('10\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n') == '41938.65135885'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1.57079633\"\nassert solution(\"4\") == \"1.57079633\"\nassert solution(\"5\") == \"6.283185307179586\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '1.57079633'\nassert solution('''\n4\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n''') == '41938.65135885'\nassert solution('''\n4\n0 0 0\n0 0 1\n0 0 0\n0 0 1\n''') == '0.000993184112109375'\nassert solution('''\n3\n-20 0 0\n-15 -10 0\n0 0 0\n''') == '1.57079633'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n-1 1 1\\n0 0 0\\n0 0 1') == '0.99999999'\nassert solution('10\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n0 0 1') == '10.0'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 0 0\\n2 1 0\\n3 0 0\") == '1.0'\nassert solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\") == '41938.65135885'\nassert solution(\"1\\n-1 0 0\\n1 0 0\") == '0'\nassert solution(\"2\\n-1 0 0\\n1 0 0\") == '0.5'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n1 0 0\n2 1 0\n3 0 0\n\"\"\") == \"1.57079633\"\nassert solution(\"\"\"\n3\n1 0 0\n1 1 0\n0 0 0\n\"\"\") == \"2.82842712475\"\nassert solution(\"\"\"\n3\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n\"\"\") == \"3998.564595455\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 0 0\n1 1 0\n0 0 0\n''') == '1.57079633'\nassert solution('''\n3\n10 0 10\n-10 -10 -10\n0 0 0\n''') == '41938.65135885'\nprint('Congratulations! Your solution works for both test cases!')\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '1.57079633'\nassert solution('5') == '3.14159265'\nassert solution('8') == '28.95957983'\n\"\"\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0.166666'\nassert solution('4') == '1.57079633'\nassert solution('5') == '1.57079633'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('11') == '3'\nassert solution('18') == '4'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"123456789\") == \"5\"\nassert solution(\"Hello World\") == \"11\"\nassert solution(\"The quick brown fox jumps over the lazy dog\") == \"12\"\nassert solution(\"The quick brown fox jumps over the lazy dog\") == \"12\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_1) == \"4\"\nassert solution(input_2) == \"4\"\nassert solution(input_3) == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('12') == ''\nassert solution('21') == ''\nassert solution('9') == '9'\nassert solution('9') == '9'\nassert solution('6') == '6'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"2\", \"Should return length of the longest string that appears twice\"\nassert solution(\"11\") == \"2\", \"Should return length of the longest string that appears twice\"\n\n\"\"\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(''.join([str(i) for i in range(1, 1000001)])) == '4'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '2'\nassert solution('13') == '4'\nassert solution('4') == '0'\nassert solution('10') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6\nqwertyuiop''') == '1'\nassert solution('''10\nqwertyuiop''') == '2'\nassert solution('''15\nqwertyuiop''') == '3'\nassert solution('''16\nqwertyuiop''') == '3'\nassert solution('''17\nqwertyuiop''') == '4'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('abc') == ''\nassert solution('abc') == ''\nassert solution('abcabc') == ''\nassert solution('abcabcabc') == ''\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input(\":\")) == \"4\"\nassert solution(input(\"??\")) == \"4\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n2 3 1\n3 1 2\n''') == '2'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('6') == '5'"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1 1\\n') == '1'\nassert solution('3\\n1 3 1\\n') == '2'\nassert solution('10\\n1 10 1 5 8 7 6 2 9 4 3\\n') == '9'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n1 2 3 4 5\n3 2 1 4 5''') == '2'\nassert solution('''3\n2 3 1\n3 1 2\nSample Output 3:\n0''') == 'huge'\nassert solution('''13\n2 1 3 4 5 6 8 7 1 6 9 7 10\n1 3 4 5 6 8 7 1 6 9 7 10\nSample Output 4:\n20\n''') == '20'"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('6') == '5'"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 1 6 3 2 4\n4 6 5 1 3 2\n''') == '2'\nprint('OK')\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('6') == '5'\nassert solution('10') == 'huge'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3\\n\"\n    \"2 3 1\\n\"\n    \"3 1 2\\n\"\n    ) == \"2\"\nassert solution(\n    \"6\\n\"\n    \"5 1 6 3 2 4\\n\"\n    \"4 6 5 1 3 2\\n\"\n    ) == \"5\"\n\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\nimport math\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == 'huge'\nassert solution('4') == 'huge'\nassert solution('5') == 'huge'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'huge'\nassert solution('3') == '2'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1') == '4'\nassert solution('6 1') == '9'"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '4'\nassert solution('6 1') == '9'\nassert solution('3 5') == '12'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == '4'"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"4\"\nassert solution(\"6 1\") == \"9\"\nassert solution(\"5 1\") == \"5\"\nassert solution(\"10 1\") == \"0\"\nassert solution(\"3 100\") == \"0\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '4'\nassert solution('6 1') == '9'"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 1\n0 10 20\n0 10\nSample Input 3:\n3 2\n0 10 20\n0 40\nSample Output 3:\n2\n''') == '4'\n\nassert solution('''\n3 2\n0 10 20\n0 40\nSample Input 4:\n3 5\n0 10 20\n0 40 50\n0 50\nSample Output 4:\n4\n''') == '6'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"10\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 1') == '2'\nassert solution('4 1') == '3'\nassert solution('5 1') == '4'\nassert solution('6 1') == '5'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 1\n0 10 20\n0 10\nSample Input 3:\n4 1\n0 10 20 30\n0 40\n0 50\nSample Output 3:\n45\n''') == '45'"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '4'\nassert solution('6 1') == '9'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(solution.__doc__) == 'equal', 'Tests 1 failed'\n\nstdin = input()\nA = stdin.strip().split(\"\\n\")\nA = [int(x) for x in A[0].split(\",\")]\n\nB = stdin.strip().split(\"\\n\")\nB = [int(x) for x in B[1].split(\",\")]"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('shuffle([1,2,1,2])') == 'equal'"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"not equal\"\nassert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"concat([3,2,1],[4,5,6])\") == \"not equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))') == 'equal'\n\n\"\"\"\n\n\nfrom collections import deque\nfrom sys import setrecursionlimit\n\nsetrecursionlimit(10 ** 6)\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\nfrom sys import stdin\nfrom collections import deque\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == 'equal'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    'concat([shuffle([1,2]),shuffle([1,2]))') == 'not equal', 'first'\n    'not equal'\n)\nassert solution(\n    'sorted(concat([3,2,1],[4,5,6]))') == 'equal','second'\n    'equal'\n)\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"not equal\"\nassert solution(\"shuffle([1,2,1,2])\") == \"equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\") == \"equal\""
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\n''') == 'equal'\nassert solution('''\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\n''') == 'equal'"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 4\n4 2\n1 2 1 2\n2 3 1 2\n''') == '1'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == 'Oh no'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\n3 2\n1 2 1 2\n2 3 1 2\n''') == '1', 'Failed sample #1'\nassert solution('''\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n''') == '2', 'Failed sample #2'\nassert solution('''\n4 6\n4 7 1 5\n2 6 3 1\n1 4 2 4\n5 5 6 5\n''') == 'Oh no', 'Failed sample #3'"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == 'Oh no'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1 2\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == \"Oh no\"\nassert solution(\"\"\"\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 2\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == 'Oh no'\n\nassert solution('1 3') == '1'\n\nassert solution('3 2') == '1'\n\nassert solution('3 2 1 2') == '2'\n\nassert solution('3 3') == '2'"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"Oh no\"\nassert solution(\"1 3\") == \"1\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n3 2\\n1 2 1 2\\n2 3 1 2') == 'Oh no'\nassert solution('1 3\\n3 2\\n1 2 1 2\\n2 3 1 2') == '1'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n3 2\") == \"Oh no\"\nassert solution(\"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sample_input_1) == \"3\"\nassert solution(sample_input_2) == \"impossible\""
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 2\") == \"3\"\nassert solution(\"4 4\") == \"impossible\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == \"3\"\nassert solution('''\n5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n''') == \"impossible\""
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == '3'\nassert solution('''5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n''') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4') == '3'\nassert solution('5 5') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"3 2\") == \"impossible\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(None) == \"impossible\"\nassert solution(\"1 2 2\\n2 3 1\\n3 4 1\\n4 1 2\\n\") == \"3\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == '3'\nassert solution('''\n5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n''') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4') == '3'\nassert solution('5 5') == 'impossible'"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5\\n4\\n2 2 1\\n3 2 3\") == \"3\"\nassert solution(\"4\\n4\\n1 2 1\\n2 3 1\\n3 4 1\\n4 1 2\") == \"impossible\"\nassert solution(\"2\\n2\\n1 1 1\\n2 2 1\\n3 3 1\\n4 4 1\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1 1 1 3') == '2'\nassert solution('1') == ''\nassert solution('22') == ''\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"1\n2 1 1 1 3\"\"\") == \"4\"\nassert solution(\"\"\"5\n2 1 1 1 3\"\"\") == \"\"\nassert solution(\"\"\"3\n4 2 1 2\"\"\") == \"2\"\nassert solution(\"\"\"3\n5 1 5\"\"\") == \"\""
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 1 1 3') == '2'\nassert solution('1') == ''\nassert solution('2 1 2 3') == '2'\nassert solution('22') == '4'\nassert solution('1 2') == ''\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n1 1 1 1 3''') == '2'\nassert solution('''2\n2 2 2 2 2 3 3''') == '4'\nassert solution('''1\n22''') == '1'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 1 1 1 3''') == \"2\"\nassert solution('''5''') == \"0\"\nassert solution('''2 1 1 1 3''') == \"1\"\nassert solution('''1 2 3 4''') == \"1\"\nassert solution('''7''') == \"3\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '4'\nassert solution('3') == '3'\nassert solution('5') == '4'\nassert solution('10') == '10'\n\nassert solution('12') == '11'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 1 1 3') == '2'\nassert solution('2\\n1 1 1 1 3') == '4'\nassert solution('3\\n22') == '4'\nassert solution('4\\n2 1 1 1 3') == '2'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2'\nassert solution('1') == '1'\nassert solution('22') == '4'\n\nassert solution('2') == ''\nassert solution('3') == ''\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1 1 1 3') == '2'\nassert solution('1') == 'no'\nassert solution('22') == '4'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 2 3') == '4'\nassert solution('1 2 3') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'\nprint(solution(input()))\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == '3'\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n6\n10 20 30 40 50 60\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n3 1 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4') == '2', solution('1\\n2\\n3\\n4')\nassert solution('2\\n3\\n4\\n1') == '4', solution('2\\n3\\n4\\n1')\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '2'\nassert solution('3 1 5') == '3'\nassert solution('2 3 1 5') == '1'\n\nfrom typing import List\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n3 1 5\n\"\"\") == \"3\", \"The expected output is 3\"\nassert solution(\"\"\"\n1\n2 3\n\"\"\") == \"2\", \"The expected output is 2\"\nassert solution(\"\"\"\n1\n2\n3 4\n\"\"\") == \"1\", \"The expected output is 1\"\nassert solution(\"\"\"\n7\n7 1 5 6 2 3 4 9\n\"\"\") == \"3\", \"The expected output is 3\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('a+b-c') == '- +d-'\nassert solution('a-b+d-c') == '- +d-'\n\n'''"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\", \"WRONG!\"\nassert solution(\"a-b+d-c\") == \" - +d-\", \"WRONG!\"\nassert solution(\"abcd\") == \" <empty>\", \"WRONG!\"\nassert solution(\"abcd+\") == \"<empty>\", \"WRONG!\""
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('a+b-c') == '- +d-'\nassert solution('a-b+d-c') == '- +d-'\nassert solution('a-b+c') == '<any> <empty>\n'''\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('a+b-c') == '- +d-', 'Should output - +d- instead'\nassert solution('a-b+d-c') == '- +d-', 'Should output - +d- instead'\nassert solution('knuthmorrispratt') == '<any> <empty>', 'Should output <any> <empty> instead'\nassert solution('abc') == '<empty> <empty>', 'Should output <empty> <empty> instead'\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('a+b-c') == '- +d-', solution('a+b-c')\nassert solution('a-b+d-c') == '- +d-', solution('a-b+d-c')\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''a+b-c''') == '- +d-', '''should give - +d-'''\nassert solution('''a-b+d-c''') == '- +d-', '''should give - +d-'''\n\n\"\"\""
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"knuthmorrispratt\") == \"empty\"\nassert solution(\"a+b-c\") == \"a-c\"\nprint(solution(\"a+b-c\"))\nprint(solution(\"a-b+c\"))\nprint(solution(\"\"))\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('a+b-c') == '- +d-'\nassert solution('a-b+d-c') == '+ -d+'\nassert solution('knuthmorrispratt') == '<any> <empty>'\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"a+b-c\") == \"+ -b-c\"\nassert solution(\"a-b+d-c\") == \"- +b+d-c\"\nassert solution(\"\") == \"<empty>\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('a+b-c') == '- +d-', f'expected {- +d-}, found {solution(\"a+b-c\")}'\nassert solution('a-b+d-c') == '+ +d-', f'expected {+ +d-}, found {solution(\"a-b+d-c\")}'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"3 0\") == \"1\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\n''') == '0\\n1\\n3\\n2\\n3\\n5\\n3\\n7\\n9\\n9\\n10\\n'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"3 0\") == \"1\""
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 0\") == \"0\"\nassert solution(\"2 6 6\") == \"3\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"3 1\") == \"2\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '0'\nassert solution('''\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\n''') == '1'\nassert solution('''\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\n''') == '11'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 0\\n0') == '0'\nassert solution('3 0\\n2 6 6\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\n7\\nt 8\\nt 9\\nt 10\\n') == '11'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 3\") == \"5\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 0') == '1'\nassert solution('3 0') == '2'\nassert solution('3 0') == '3'\nassert solution('3 0') == '4'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"3 0\") == \"2\"\nassert solution(\"3 1\") == \"3\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"2 1\") == \"3\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\nassert solution(\"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\""
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 6') == '0'\nassert solution('3 7') == '2'\nassert solution('4 5') == '2'\nassert solution('10 10') == '7'\nassert solution('15 10') == '1'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1') == '2\\n4 6'\nassert solution('5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6') == '0'"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n''') == '2\\n4 6'\nassert solution('''5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6\n''') == '0\\n'\nassert solution('''5 7\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6\n''') == '0\\n'''\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 8') == '2\\n4 6'\nassert solution('5 6') == '0'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\"\"\"\n) == \"2\\n4 6\"\n\nassert solution(\n\"\"\"5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6\"\"\"\n) == \"0\""
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1''') == '2 4 6'\nassert solution('''5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6''') == '0'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n') == '2\\n4 6'\nassert solution(\n    '5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n') == '0'"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"2\\n\"\nassert solution(\"5 6\") == \"0\\n\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n''') == '2'\nassert solution('''5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6\n''') == '0'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1\\n1\\n1\\n2\\n2\\n3\\n') == '1\\n2\\n3\\n'\nassert solution('6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n') == '1\\n2\\n3\\n4\\n5\\n6\\n'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6') == '1\\n2\\n3\\n4\\n5\\n6'\nassert solution('6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6') == '1\\n2\\n3\\n4\\n5\\n6'"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n12\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n''') == \"4 5 6\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"12\") == \"4\"\nassert solution(\"6\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    1 1\n    1 2\n    1 3\n    1 1\n    1 2\n    1 3\n    2 1\n    2 2\n    2 3\n    2 4\n    2 5\n    2 6\n    \"\"\"\n) == \"4 5 6\"\n\nassert solution(\n    \"\"\"\n    6\n    1 1\n    1 2\n    1 3\n    2 1\n    2 2\n    2 3\n    \"\"\"\n) == \"1 2 3\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1\\n1 2\\n1 3') == '1\\n2\\n3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '''\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n''') == '4 5 6'\nassert solution(\n    '''\n4\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n''') == '1 2 3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3') == '1'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '5'\nassert solution('3') == '6'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\""
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\"\nassert solution(\"ABCBCCCCD\") == \"11\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string) == \"1\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\""
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"C\") == \"C\"\nassert solution(\"P\") == \"P\"\nassert solution(\"PP\") == \"P\"\nassert solution(\"CCCCCCCCCCCCCCCCCCC\") == \"C\"\nprint(\"You're all set!\")"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''CPCC''') == '1'\nassert solution('''PPPCCCC''') == '8'\nassert solution('''CPCCCCCCCPPPCCCCCCCCPPPPPCCCCCCCCC''') == '31'\nassert solutionn\\x88\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\""
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''CPCC\nPPP\nPPP''') == '1'\nassert solution('''PPPCCCC\nPPP\nPPP''') == '8'''\nprint('All tests passed!')"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2 1\n1 2\n2 3\n2''') == '1 2 3'\n\nassert solution('''3 2 1\n1 3\n2 3\n3''') == '1 2 3'\n\nassert solution('''3 2 1\n1 2\n3 3\n3''') == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2 1\\n1 2\\n2 3\\n2\\n') == '1 2 3'\nassert solution('5 2 1\\n1 3\\n2 3\\n3\\n') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2 1\n1 3\n2 3\n3''') == '1 2 3'\nassert solution('''3 2 1\n1 3\n2 3\n3''') == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 1\\n1 3\\n2 3\\n2') == '3'\nassert solution('3 2 1\\n1 3\\n2 3\\n3') == '1 2 3'\nassert solution('4 3 1\\n1 2\\n1 3\\n2 3\\n3') == '1 3'\nassert solution('5 4 1\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n3') == '1 3 6 7'\nassert solution('20 1 1\\n3 2\\n1 3\\n2 4\\n3 4\\n4 5\\n4 6\\n5 7\\n6 8\\n7 8\\n8 9\\n9 10\\n10 11\\n10 12\\n11 13\\n13 14\\n13 15\\n15 16\\n16 17\\n16 18\\n17 19\\n19 20\\n18 20\\n17 20\\n16 20\\n15 20\\n14 20\\n13 20\\n12 20\\n11 20\\n10 20\\n9 20\\n8 20\\n7 20\\n6 20\\n5 20\\n4 20\\n3 20\\n2 20\\n1 20') == '20'\n\nSample Input 3:\n3 2 1\n1 2\n2 3\n3\nSample Output 3:\n3\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"3 2 1\n1 2\n2 3\n2\n\"\"\") == \"1 2 3\"\n\nassert solution(\n    \"\"\"3 2 1\n1 3\n2 3\n3\n\"\"\") == \"1 2 3\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2 1\n1 2\n2 3\n2\n''') == '1 2 3'\n\nassert solution('''\n3 2 1\n1 3\n2 3\n3\n''') == '1 2 3'\n\nassert solution('''\n3 2 1\n2 3\n1 3\n3\n''') == '1 2 3'\n\nassert solution('''\n3 2 1\n1 3\n2 3\n3\n''') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2 1\n1 2\n2 3\n2\n''') == '1 2 3'\nassert solution('''\n3 2 1\n1 3\n2 3\n3\n''') == '1 2 3'\n'''\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2 1\n1 2\n2 3\n2\n''') == '1 2 3'\nassert solution('''\n3 2 1\n1 3\n2 3\n3\n''') == '3'\nassert solution('''\n3 2 1\n1 3\n2 3\n2\n''') == '1'\n'''\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 2 4 1\n1 2\n2 3\n2 4\n3 4\n''') == '1 2 3 4'\nassert solution('''\n5 2 1\n1 2\n2 3\n3 4\n4 5\n''') == '1 2 4'\nassert solution('''\n5 2 4 1\n1 2\n2 3\n3 4\n4 5\n''') == '1 2 3 4'\nassert solution('''\n5 2 4 1\n1 2\n2 3\n3 4\n5 6\n''') == '1 2 3 4 5 6'\nassert solution('''\n5 2 1\n1 2\n2 3\n3 4\n5 6\n''') == '1 2 3 4 5 6'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 1') == '1 2 3'\nassert solution('3 2 1') == '1 2 3'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n1\n''') == '1', 'first'\nassert solution('''\n2\n4\n''') == '4','second'\nassert solution('''\n5\n2 4 2 3 4\n''') == '39', 'third'"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == \"39\"\nassert solution('''\n4 3\n1 0 2 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == \"39\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3') == '4'\nassert solution('2\\n2 2') == '2'\nassert solution('5\\n1 1 1 1 1') == '4'\n\n-----------------\n\n2\n\n1\n\n4\n\n3\n\n4\n\n--\n\n8\n\n8\n\n3\n\n4\n\n5\n\n--\n\n37\n\n2\n\n3\n\n4\n\n6\n\n--\n\n75\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n65\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n53\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n54\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n55\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n55\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n--\n\n0\n\n1\n\n2\n\n3\n\n4"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '39'\nassert solution('4 6 3 2') == '19'\nassert solution('3 2 1 1') == '7'\nassert solution('5 1 3 1 4') == '10'"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"39\", \"Test 1\"\nassert solution(\"5 1\") == \"4\", \"Test 2\""
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '39', solution('5 3')\nassert solution('1 0 1 1 1') == '4', solution('1 0 1 1 1')\nassert solution('2 4 2 3 4') == '39', solution('2 4 2 3 4')"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '39'\nassert solution('1 0 1 1 1') == '4'\nassert solution('1 1 1 1 1') == '4'\nassert solution('1 1 1 1 1 1') == '4'\nassert solution('1 1 1 1 1 1 1') == '4'"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3 2 3 4\") == \"2\"\nassert solution(\"5 3 1 2 3 4\") == \"4\"\nprint(solution(input()))\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == '39'\nassert solution('5 1') == '4'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"39\"\nassert solution(\"5 1\") == \"4\""
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 4\nxx.x.\nx.xx.\nxx.x.\nxx.x.\n''') == '1 1 2'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\nxxxx\nxxxxx\nxxxx\n''') == '1 1 2'\nassert solution('''\n4 6\nxxxxxxx\nxxxxxx.\nxxx.xxx\nxx.xxx.\nxxxx\n''') == '1 1 2'"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(t=[\"3 3\", \"xx.xx\"]) == \"1 1 2\"\nassert solution(t=[\"4 6\", \"xx.....\", \"x.xxx..x\", \"...x.x..x\", \"xx.xxxx\"]) == \"1 1 2\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3\n.x.\nxxx\n...\nSample Output 1:\n1 1 2\n2 3 1\n\nSample Input 2:\n4 6\nxx....\nxx.xxx\n...xxx\n...xxx\nSample Output 2:\n1 1 2\n2 4 3''') == '1 1 2\\n2 4 3'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 5\nx\nxxxx\nxxxxx\nxxxxxx\nxxxxxx\n''') == '1 1 5'\n\nassert solution('''\n5 5\nx\nxxxx\nxxxxx\nxxxxxx\nxxxxxx\n''') == '1 4 5'\n\nassert solution('''\n3 3\nxx\nxx\nxx\n''') == '1 3 2'\n\nassert solution('''\n2 2\nx\nxx\n''') == '1 2 2'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '1 1 2'\nassert solution('4 6') == '1 2 3'"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3\nxx.\nxxx\n...\n\"\"\") == \"\"\"1 1 2\"\"\"\nassert solution(\"\"\"\n3 3\nx.\nxx\n...\n\"\"\") == \"\"\"1 1 2\"\"\"\nassert solution(\"\"\"\n4 6\nxx.xxx\nxxx.xxx\nxx.xxx\nxxx.xxx\n\"\"\") == \"\"\"1 2 1\"\"\"\nassert solution(\"\"\"\n4 6\nxx.xx\nxx.xx\nx.x.x\nxxx.xx\n\"\"\") == \"\"\"1 2 1\"\"\"\nassert solution(\"\"\"\n6 8\nxx.xx\nxx.xx\nxx.xx\nxx.xx\nxx.xx\nxxx.xx\nxxx.xx\n\"\"\") == \"\"\"1 3 3\"\"\""
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\nxx.\nxxx\n...\n''') == '1 1 2'\nassert solution('''\n4 6\nxx....\nxx.xxx\n...xxx\n...xxx\n''') == '1 1 2'"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"1 1 2\"\nassert solution(\"4 6\") == \"1 2 4\""
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1 2\\n1 2 1\\n0 2 0\\n0 1 0') == 'indistinguishable'\nassert solution('5 5 5\\n5 5 5\\n0 0 0\\n0 0 0\\n0 0 0') == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1 2\n1 2 1\n0 2 0\n0 1 0''') == 'indistinguishable'''\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 1 2\n1 2 1\n0 2 0\n0 1 0\n''') == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1 2\n1 2 1\n0 2 0\n0 1 0\n''') == \"0\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 1 2\n1 2 1\n0 2 0\n0 1 0\"\"\") == \"0\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 1 2\n1 2 1\n0 2 0\n0 1 0\n''') == \"indistinguishable\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 2') == '0'\nassert solution('2 0 1') == '0'\nassert solution('0 0 0') == 'indistinguishable'\nassert solution('0 1 0') == '1'\nassert solution('1 1 1') == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 2') == 'indistinguishable'\nassert solution('2 0 1') == '1'"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'indistinguishable'\nassert solution('3 1 2') == '0'\nassert solution('2 0 1') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 1 2\n1 2 1\n0 2 0\n0 1 0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n0\n1\n0''') == '-1'\nassert solution('''1\n1\n0\n1''') == '-1'\nassert solution('''1\n1\n1\n1''') == '-1'\nassert solution('''1\n1\n1\n0''') == '1111'\nassert solution('''1\n1\n0\n0''') == '1110'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0110\\n1001') == '1111'\nassert solution('0') == '-1'"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\nprint('Congratulations! All test cases passed!')\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''0\n1\nSample Output 2:\n-1\n''') == '-1'"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"01100\") == \"-1\"\nassert solution(\"00\") == \"-\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\nassert solution('-1') == -1\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"0\") == \"-\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0110\\n1001\") == \"1111\"\nassert solution(\"0\") == \"-1\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\nassert solution('0') == '-1'\n\n------\nSample Input 1:\n1\n1\nSample Output 1:\n-1\n\nSample Input 2:\n0\n1\nSample Output 2:\n0\n\nSample Input 3:\n1\n0\nSample Output 3:\n-1\n\nSample Input 4:\n0\n0\nSample Output 4:\n0\n\nSample Input 5:\n0\n1\nSample Output 5:\n-1\n\nSample Input 6:\n1\n1\nSample Output 6:\n1\n\nSample Input 7:\n1\n1\nSample Output 7:\n-1\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1111') == '+000-', solution('1111')\nassert solution('11') == '+00-', solution('11')\nassert solution('111') == '+000+', solution('111')\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n2\n''') == '+-00'"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"+1\"\nassert solution(\"11\") == \"+1\"\nassert solution(\"101\") == \"+1\"\nassert solution(\"111\") == \"+1\"\nassert solution(\"111\") == \"+1\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1111\") == \"+000-\", \"Wrong result\"\nassert solution(\"10000\") == \"+0000\""
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10011\") == \"-1+0+0\"\nassert solution(\"00011\") == \"+0-0+0\"\n\n'''\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([\"10000\", \"10000\"]) == \"+0000\"\nassert solution([\"-1111\", \"-1111\"]) == \"+000-\nassert solution([\"+1111\", \"+1111\"]) == \"+000+\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'\nassert solution('100100') == '+0000'\nassert solution('1111111111111111111111') == '+0-0-0-0-0-0'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '+1'\nassert solution('11') == '+0-1'\nassert solution('111') == '+0-0-1'\nassert solution('01') == '+0-0'\nassert solution('-1') == '+0-1'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''5 2 1\n1 2\n1 3 1\n1 4 2\n2 4 3\n1 2 3\n1 2 4\n3 2 4\n2 4 3\n4 4 1\n''') == '7'\nassert solution('''2 1 1\n1 2\n1 3 1\n1 4 2\n2 4 3\n1 2 3\n1 2 4\n3 2 4\n2 4 3\n4 4 1\n''') == '2'\nassert solution('''7 7 7 7\n1 2 3 4\n1 3 2 4\n1 4 3 5\n1 4 5 2\n1 5 4 3\n1 5 3 2\n3 6 6 5\n6 6 5 2\n6 7 5 2\n6 7 3 2\n7 7 2 2\n7 6 4 3\n6 7 3 2\n6 7 2 2\n7 6 5 2\n7 7 3 2\n6 7 3 2\n6 6 5 2\n7 7 3 2\n6 6 5 2\n6 7 3 2\n7 6 5 2\n6 7 2 2\n6 6 5 2\n7 7 3 2\n6 7 3 2\n7 6 5 2\n6 7 3 2\n7 6 5 2\n6 7 2 2\n6 6 5 2\n7 7 2 2\n6 6 5 2\n6 7 3 2\n7 7 2 2\n6 6 5 2\n7 6 5 2\n6 7 3 2\n6 6 5 2\n7 6 5 2\n6 7 3 2\n6 6 5 2\n7 7 3 2\n6 7 3 2\n7 6 5 2\n7 6 5 2\n6 7 3 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n6 7 5 2\n7 7 3 2\n6 6 5 2\n7 7 3 2\n6 6 5 2\n7 7 5 2\n6 7 3 2\n7 7 3 2\n6 7 5 2\n7 6 5 2\n6 7 5 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n6 7 3 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n6 7 3 2\n7 7 3 2\n6 7 3 2\n7 6 5 2\n7 6 5 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n6 7 3 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n6 7 3 2\n7 7 3 2\n6 7 3 2\n7 6 5 2\n6 7 5 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n6 7 3 2\n7 6 5 2\n6 7 3 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n7 7 5 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n7 7 5 2\n6 6 5 2\n7 7 5 2\n6 7 3 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n6 7 3 2\n7 7 3 2\n6 7 3 2\n7 6 5 2\n6 7 3 2\n7 7 3 2\n6 6 5 2\n7 7 5 2\n6 7 3 2\n7 6 5 2\n6 7 3 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n6 7 3 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n6 7 5 2\n7 7 3 2\n6 7 3 2\n7 6 5 2\n7 6 5 2\n6 7 3 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n6 7 3 2\n7 7 3 2\n6 7 3 2\n7 6 5 2\n6 7 5 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n6 7 3 2\n7 7 3 2\n6 7 3 2\n7 6 5 2\n6 7 5 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n6 7 3 2\n7 7 3 2\n6 7 3 2\n7 6 5 2\n6 7 5 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n6 7 3 2\n7 7 3 2\n6 7 3 2\n7 6 5 2\n6 7 5 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n6 7 3 2\n7 7 3 2\n6 7 3 2\n7 6 5 2\n7 6 5 2\n6 7 3 2\n7 7 3 2\n6 6 5 2\n7 6 5 2\n7 7 3 2\n6 7 3 2\n7 6 5 2\n7 6 5 2\n6 7 3 2\n7 6 5 2\n7 7 3 2\n6 7 3 2\n7 6 5 2\n7 6 5 2\n7 7 3 2\n6 7 3 2\n7 6 5 2\n7 6 5 2\n7 6 5 2\n7 7 3 2\n6 7 3 2\n7 6 5 2\n7 6 5 2\n7 7 3 2\n6 7 3 2\n7 6 5 2\n7 6 5 2\n7 7 3 2\n6 7 3 2\n7 7 3 2\n6 7 3 2\n7 6 5 2\n7 6 5 2\n7 7 3 2\n6 7 3 2\n7 7 3 2\n7 6 5 2\n7 7 3 2\n6 7 3 2\n7 7 3 2\n7 6 5 2\n7 7 3 2\n6 7 3 2\n7 7 3 2\n7 6 5 2\n7 7 3 2\n7 6 5 2\n7 7 3 2\n7 7 3 2\n7 7 3 2\n7 7 3 2\n6 7 3 2\n7 7 3 2\n7 6 5 2\n7 7 3 2\n7 7 3 2\n7 6 5 2\n7 6 5 2\n7 7 3 2\n7"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\"\nassert solution(input_string=\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\nSample Output 2:\n2"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7 8 3 2\") == \"9\"\nassert solution(\"2 1 1 1\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"\") == \"1\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n\") == \"9\"\nassert solution(\"2 1 1 1\\n2 2\\n1\") == \"2\"\nassert solution(\"3 1 3 1\\n3 2 3 2\\n3\") == \"3\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 8 3 2') == '9'\nassert solution('2 1 1 1') == '2'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''2 1 1 1\n2 2\n1\n1\n1 2 1\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '2'\nassert solution('''2 1 1 1\n2 2\n1\n1\n1 2 1\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '4'\nassert solution('''7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''2 1 1 1\n2 2\n1\n1\n1 2 1\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '2'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 8 3 2') == '9'\nassert solution('2 1 1 1') == '2'\nassert solution('7 8 1 1') == '8'\nassert solution('7 8 3 2') == '9'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 8 3 2\\n1 2') == '9'\nassert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n') == '9'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 8 3 2') == '9'\nassert solution('7 8 3 2') == '9'"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_data) == \"3\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 1\\n2 2\\n1 1 R') == '2'\nassert solution('3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301') == '7'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000') == '2'\nassert solution('3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301') == '7'\nassert solution('3 4 1\\n1 1 R\\n1 1 R\\n1 1 R\\n1 1 R\\n1 1 R\\n1 1 R') == '1'\nassert solution('3 4 2\\n1 1 R\\n1 1 R\\n1 1 R\\n1 1 R\\n1 1 R\\n1 1 R\\n1 1 R') == '1'\nassert solution('3 4 3\\n1 1 R\\n1 1 R\\n1 1 R\\n1 1 R\\n1 1 R\\n1 1 R\\n1 1 R\\n1 1 R\\n1 1 R\\n1 1 R') == '1'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3 1\n2 2\n1 1 R\n010''') == '2'\nassert solution('''3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\nSample Output 3:\n7''') == '7'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3 1\n2 2\n1 1 R\n010\n000\n000\n''') == '2'\nassert solution('''3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\n''') == '7'\nassert solution('''5 2 1\n1 2\n1 1 L\n0101\n1101\n0101\n''') == '3'\nassert solution('''5 5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n84 85\n85 86\n86 87\n87 88\n88 89\n89 90\n90 91\n91 92\n92 93\n93 94\n94 95\n95 96\n96 97\n97 98\n98 99\n99 100\n100 101\n101 102\n102 103\n103 104\n104 105\n105 106\n106 107\n107 108\n108 109\n109 110\n110 111\n111 112\n112 113\n113 114\n114 115\n115 116\n116 117\n117 118\n118 119\n119 120\n120 121\n121 122\n122 123\n123 124\n124 125\n125 126\n126 127\n127 128\n128 129\n129 130\n130 131\n131 132\n132 133\n133 134\n134 135\n135 136\n136 137\n137 138\n138 139\n139 140\n140 141\n141 142\n142 143\n143 144\n144 145\n145 146\n146 147\n147 148\n148 149\n149 150\n150 151\n151 152\n152 153\n153 154\n154 155\n155 156\n156 157\n157 158\n158 159\n159 160\n160 161\n161 162\n162 163\n163 164\n164 165\n165 166\n166 167\n167 168\n168 169\n169 170\n170 171\n171 172\n172 173\n173 174\n174 175\n175 176\n176 177\n177 178\n178 179\n179 180\n180 181\n181 182\n182 183\n183 184\n184 185\n185 186\n186 187\n187 188\n188 189\n189 190\n190 191\n191 192\n192 193\n193 194\n194 195\n195 196\n196 197\n197 198\n198 199\n199 200\n200 201\n201 202\n202 203\n203 204\n204 205\n205 206\n206 207\n207 208\n208 209\n209 210\n210 211\n211 212\n212 213\n213 214\n214 215\n215 216\n216 217\n217 218\n218 219\n219 220\n220 221\n221 222\n222 223\n223 224\n224 225\n225 226\n226 227\n227 228\n228 229\n229 230\n230 231\n231 232\n232 233\n233 234\n234 235\n235 236\n236 237\n237 238\n238 239\n239 240\n240 241\n241 242\n242 243\n243 244\n244 245\n245 246\n246 247\n247 248\n248 249\n249 250\n250 251\n251 252\n252 253\n253 254\n254 255\n255 256\n256 257\n257 258\n258 259\n259 260\n260 261\n261 262\n262 263\n263 264\n264 265\n265 266\n266 267\n267 268\n268 269\n269 270\n270 271\n271 272\n272 273\n273 274\n274 275\n275 276\n276 277\n277 278\n278 279\n279 280\n280 281\n281 282\n282 283\n283 284\n284 285\n285 286\n286 287\n287 288\n288 289\n289 290\n290 291\n291 292\n292 293\n293 294\n294 295\n295 296\n296 297\n297 298\n298 299\n299 300\n300 301\n301 302\n302 303\n303 304\n304 305\n305 306\n306 307\n307 308\n308 309\n309 310\n310 311\n311 312\n312 313\n313 314\n314 315\n315 316\n316 317\n317 318\n318 319\n319 320\n320 321\n321 322\n322 323\n323 324\n324 325\n325 326\n326 327\n327 328\n328 329\n329 330\n330 331\n331 332\n332 333\n333 334\n334 335\n335 336\n336 337\n337 338\n338 339\n339 340\n340 341\n341 342\n342 343\n343 344\n344 345\n345 346\n346 347\n347 348\n348 349\n349 350\n350 351\n351 352\n352 353\n353 354\n354 355\n355 356\n356 357\n357 358\n358 359\n359 360\n360 361\n361 362\n362 363\n363 364\n364 365\n365 366\n366 367\n367 368\n368 369\n369 370\n370 371\n371 372\n372 373\n373 374\n374 375\n375 376\n376 377\n377 378\n378 379\n379 380\n380 381\n381 382\n382 383\n383 384\n384 385\n385 386\n386 387\n387 388\n388 389\n389 390\n390 391\n391 392\n392 393\n393 394\n394 395\n395 396\n396 397\n397 398\n398 399\n399 400\n400 401\n401 402\n402 403\n403 404\n404 405\n405 406\n406 407\n407 408\n408 409\n409 410\n410 411\n411 412\n412 413\n413 414\n414 415\n415 416\n416 417\n417 418\n418 419\n419 420\n420 421\n421 422\n422 423\n423 424\n424 425\n425 426\n426 427\n427 428\n428 429\n429 430\n430 431\n431 432\n432 433"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3 1\n2 2\n1 1 R\n010\n000\n000''') == \"2\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\"\n) == \"2\"\nassert solution(\n    \"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\"\n) == \"7\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3 3 1\") == \"2\"\nassert solution(\"3 4 2\") == \"7\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 1') == '2'\nassert solution('3 4 2') == '7'"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3 1\n2 2\n1 1 R\n010\n000\n000\n''') == \"2\", 'First'\nassert solution('''\n3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\n''') == \"7\", 'Second'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3 1\n2 2\n1 1 R\n010\n000\n000\n''') == '2'\nassert solution('''\n3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\n''') == '7'\nassert solution('''\n1 1 U\n1 2 R\n''') == '-1'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n2 2 1 2 3') == '2'\nassert solution('8\\n1 2 4 1 1 2 5 1') == '4'\n\n'''\nimport math"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"5\\n\"\n    \"2 2 1 2 3\\n\"\n    \"4\\n\"\n    \"1 2 4 1 1 2 5 1\"\n    ) == \"4\\n\", f\"actual: {solution(stdin)}\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == \"2\"\nprint(solution(s))\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n2 2 1 2 3') == '2'\nassert solution('8\\n1 2 4 1 1 2 5 1') == '4'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"2\", \"Should return 2\"\nassert solution(\"8\") == \"4\", \"Should return 4\"\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        temp = arr[i] + arr[j]\n        if temp in arr:\n            count += 1\n\nprint(count)"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('1 2 3') == '2'\nassert solution('1 2 1 2 3') == '3'\nassert solution('5') == '4'\nassert solution('7') == '5'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2 1 2 3\n5\n2 2 1 2 3\n8\n1 2 4 1 1 2 5 1\n4\n8\n10 9 4 2 6 5\n15\n10 2 8 2 2 9\n20\n1 2 2 4 4 3 4 5\n1 1 3 4 8 9\n10\n1 3 4 8 9\n2\n2\n''') == '2'\nassert solution('''4\n4\n2\n1 2\n3\n3\n''') == '3'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('5') == '4'\nassert solution('8') == '5'\nassert solution('100') == '9'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n\"\"\") == \"NE\"\nassert solution(\"\"\"\n1\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\") == \"3 1\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n\"\"\") == \"NE\"\nassert solution(\"\"\"\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\") == \"3 1 2\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '3'\nassert solution('6') == '1'\nassert solution('6') == 'NE'"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n''') == \"NE\"\n\nassert solution('''\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n''') == \"1, 3\"\n\nassert solution('''\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n''') == \"1, 3\"\n\nassert solution('''\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nP 4\nP 5\n''') == \"1, 3\"\n\nassert solution('''\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\nP 5\n''') == \"1, 3\""
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n''') == 'NE'\nassert solution('''\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n''') == '1'\n\n'''"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1\"\nassert solution(\"P 1\") == \"2\"\nassert solution(\"P 2\") == \"2\"\nassert solution(\"P 3\") == \"3\"\nassert solution(\"P 4\") == \"1\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"1\") == \"NE\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n') == '1\\nNE\\nNE\\nNE\\nNE\\n'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n') == '3\\n1\\n1\\n1\\n1\\n'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n') == 'NE\\nNE\\nNE\\nNE\\nNE\\n'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '1'\nassert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n') == '1'\nassert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n') == '1'\nassert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n') == '1'\nassert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n') == '1'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\") == \"NE\"\n\nprint(\"all tests passed\")"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 1 10') == \"2\"\nassert solution('2 3 5 6') == \"5\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2') == '2'\nassert solution('2 3 5 6\\n1 1\\n1 1 6\\n1 2 2') == '5'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 5 6') == '5'\nassert solution('1 1 6') == '1'\nassert solution('1 1 2') == '1'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 1 10\") == \"2\"\nassert solution(\"2 3 5 6\") == \"5\"\nassert solution(\"5 7 4 3 2 1\") == \"7\"\nassert solution(\"12 4 3 2 1\") == \"12\"\nassert solution(\"6 10 20 50\") == \"200\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 2 1 10\n0 0\n1 4\n3 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 3 5 6\n1 1\n1 1 6\n1 2 2\n\"\"\") == \"5\"\nassert solution(\"\"\"\n2 3 5 6\n1 1\n1 2 2\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 1 10') == '2'\nassert solution('3 2 2') == '3'\nassert solution('3 4 5') == '5'\nassert solution('2 2 2') == '2'\nassert solution('10 10 1') == '10'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2\"\nassert solution(\"2 2 1 10\") == \"2\"\nassert solution(\"2 3 5 6\") == \"5\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n'''\n1 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\n\nassert solution(\n'''\n2 3 5 6\n1 1\n1 1 6\n1 2 2\n''') == '5'\n\nassert solution(\n'''\n2 3 5 6\n1 1\n1 1 6\n1 2 2\n''') == '6'\n\nassert solution(\n'''\n5 3 4 8\n0 1\n2 3\n4 5\n6 7\n8 9\n''') == '11'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\nassert solution('''\n2 2 1 10\n0 0\n1 4\n3 2\n''') == '5'\nassert solution('''\n3 2 1 10\n0 0\n1 4\n3 2\n''') == '6'\nassert solution('''\n3 3 1 10\n0 0\n1 4\n3 2\n''') == '6'\nassert solution('''\n3 3 3 10\n0 0\n1 4\n3 2\n''') == '6'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\\n') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5\\n') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n''') == '2.0000000000'\n\nassert solution('''\n5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5\n''') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\\n') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5\\n') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1.0000000000\"\nassert solution(\"2\") == \"2.0000000000\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1.0 0.0 1.4') == '2.0000000000'\nassert solution('2\\n-1.0 0.0 -1.4') == '2.0000000000'\nassert solution('3\\n1.4 1.0 0.0') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\\n') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5\\n') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n''') == '2.0000000000'\nassert solution('''\n5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5\n''') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1.4 0.0 1.4\\n-1.0 0.0 -1.4') == '2.0000000000'\nassert solution('3\\n1.4 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\nassert solution('5\\n1.4 0.0 1.4\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '2.0000000000'\nassert solution('3') == '2.0000000000'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 9 5\nSample Output 1:\n1\n5\n''') == '1'\n\nassert solution('''1 100 10\nSample Output 2:\n9\n19\n''') == '9'\n\nassert solution('''2 100 10\nSample Output 2:\n''') == ''\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 9 5\n''') == '1'\nassert solution('''\n1 100 10\n''') == '9'\n''')"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 9 5\\n1 100 10\\n\") == \"9\\n19\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\""
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 9 5\n1 100 10''') == '9 19'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 9 5') == '1'\nassert solution('1 100 10') == '9'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\n\"\"\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_string) == '1'"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n1\n1\n''') == '1\n'''\n\nstdin = input()\nN, M = map(int, stdin.split())\na = list(map(int, stdin.split()))\nb = list(map(int, stdin.split()))"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"1 1\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"4 5\n4 1 2 4 4\n4 3 2 1\n\"\"\") == \"7\"\nassert solution(\"\"\"3 5\n3 1 2 2\n3 2 1 3\n\"\"\") == \"4 3 2\"\nassert solution(\"\"\"5 4\n3 1 2 3 2\n3 2 1 3\n\"\"\") == \"6 1 2 2 2 3\"\nassert solution(\"\"\"2 3\n1 1 2\n2 1 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '1 1'\n) == '1'\nassert solution(\n    '4 5'\n) == '7'\nassert solution(\n    '4 3 2 1'\n) == '4 4 2 4 4 1 4'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '4 4 4 2 4'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"4 5\") == \"7\""
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\""
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('2 1 3') == '1'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(solution.__doc__) == '4', solution.__doc__\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([2, 10, 3, 2]) == \"4\"\nassert solution([10, 10, 5, 0]) == \"10\""
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2 10 3\n1 1 1''') == '4'\nassert solution('''20 10 2\n1 1 1''') == '17'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 0\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 10 5 0\") == \"1\""
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 10 3 2\n10 10 5 0''') == '4'\nassert solution('''10 10 5 0\n10 10 5 0''') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\nassert solution('10 10 5 5') == '10'\n\n'''\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '2 1 20') == '10'\nassert solution(\n    '6 100 9294') == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '6'\nassert solution('2 3') == '0'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'\nprint(solution(input()))"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 1 20\n0123456789\n\"\"\") == \"10\"\nassert solution(\"\"\"\n6 100 9294\n23689\n\"\"\") == \"111\"\nassert solution(\"\"\"\n2 1 200\n0123456789\n\"\"\") == \"10\"\n\nprint(solution(input()))"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 20') == '10'\nassert solution('6 100 9294') == '111'\nassert solution('5 1 30') == '10'\nassert solution('4 6 1000') == '100'\nassert solution('3 7 9') == '3'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '1.500000 2.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '1.500000 2.666667'\nassert solution('5 2') == '1.500000 3.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"1.500000 2.666667\"\nassert solution(\"5 2\") == \"1.500000 3.666667\"\nprint(\"all tests passed\")\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"1.500000 2.666667\"\nassert solution(\"5 2\") == \"1.500000 3.666667\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '1.500000 2.666667'\nassert solution('3 2') == '1.500000 1.333333'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '1.500000 2.666667'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 2.666667'\nassert solution('''\n5 2\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 3.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\\n') == '1.500000 2.666667'\nassert solution('5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\\n') == '1.500000 3.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 2.666667'\nassert solution('''\n5 1\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '0.500000 3.666667'\nprint(solution('''\n5 2\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n'''))\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 2.666667'\nprint(solution('''5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n'''))"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"4 5\") == \"3\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == '3'\nassert solution(sys.stdin.read()) == '1'"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 6\n101010\n111001\n101001''') == '3'\nassert solution('''4 5\n10010\n01010\n10101\n01001''') == '3'\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '-1'\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([3, 6]) == \"3\"\nassert solution([4, 5]) == \"3\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 6') == '3'\nassert solution('4 5') == '3'\nassert solution('10010') == '1'\nassert solution('01010') == '1'\nassert solution('10101') == '1'\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 6\") == \"3\"\nassert solution(\"4 5\") == \"3\"\nassert solution(\"10010\") == \"3\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 6\") == \"3\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '-3 -1'\nassert solution('5') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '-3 -1'\nassert solution('5') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0') == '-3 -1'\nassert solution('4\\n2 4\\n6 -1\\n3 5\\n-1 -1') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '-3 -1'\n\nassert solution('''\n4\n2 4\n6 -1\n3 5\n-1 -1\n''') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"-3 -1\"\nassert solution(\"4\") == \"3 4\"\nassert solution(\"6\") == \"3 5\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0') == '3 -1\\n3 1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '-3 -1'\nassert solution('4') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n\"\"\") == \"-3 -1\"\n\nassert solution(\"\"\"\n4\n2 4\n6 -1\n3 5\n-1 -1\n\"\"\") == \"3 4\"\n\nassert solution(\"\"\"\n2\n1 0\n0 -1\n\"\"\") == \"1 0\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n2 4\n6 -1\n3 5\n-1 -1''') == '3 4'\nassert solution('''10\n-2 -10\n5 6\n1 -7\n-3 1\n4 2\n-9 5\n6 -4\n4 5\n2 9\n3 2\n-5 3\n-8 8\n-6 6\n-4 -4\n8 -2\n1 -9\n-5 -4\n-3 3\n-1 -2''') == '6 -4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '-3 -1'\n\nassert solution('''\n4\n2 4\n6 -1\n3 5\n-1 -1\n''') == '3 4'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 0\n0 0\n2 0\n1 1.5\n2 0''') == '2 3.802816'\nassert solution('''4 0\n0 0\n2 0\n1 1.5\n2 0''') == '1 3.800846'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3 1\") == \"3 5.086781\"\nassert solution(\"3 0.25 2 45 20\") == \"1 12.715255\"\nassert solution(\"4 3 1\") == \"1 3.414214\"\nassert solution(\"3 0.5 2 45 20\") == \"1 3.5\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3 5 45 20\n0 0\n2 0\n1 1.5\n''') == '2 5.086781'\nassert solution('''3 4 5 0.5 45 20\n0 0\n2 0\n1 1.5\n''') == '1 12.715255'\nassert solution('''3 5 5 0.5 45 20\n0 0\n2 0\n1 1.5\n''') == '1 12.715255'\nassert solution('''4 3 2 0.5 45 20\n0 0\n2 0\n1 1.5\n''') == '1 12.715255'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 6 5 45 20\\n0 0\\n2 0\\n1 1.5') == '2 5.086781'\nassert solution('3 0.25 2 45 20\\n0 0\\n2 0\\n1 1.5') == '1 12.715255'\nprint(solution(''))"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 5 5 45 20\") == \"2 5.086781\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2 12.715255'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 6 5 45 20') == '2 5.086781'\nassert solution('3 0.25 2 45 20') == '1 12.715255'\n\n\"\"\""
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 6 5 45 20\n0 0\n2 0\n1 1.5\n''') == '2 5.086781'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 6 5 45 20') == '2 5.086781'\nassert solution('3 0.25 2 45 20') == '1 12.715255'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6 5 45 20') == '2 5.086781'\nassert solution('5 0 0 2 45 20') == '1 12.715255'"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8'\nassert solution('''\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1'\n\nsolution('''\n1\n0 0 1\n''') == '1'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8'\n'''\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '8'\nassert solution('4') == '1'\nassert solution('5 1 7 1') == '8'\nassert solution('1 1 5 1') == '1'\nassert solution('4 0 4 4') == '1'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8'\nassert solution('''4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\") == \"1\"\n\nSample Input 3:\n3\n0 0 1\n0 0 1\n0 0 1\nSample Output 3:\n1\n\"\"\""
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n13\n0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1') == '8'\nassert solution('4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4') == '1'\nassert solution('2\\n2 1 1') == '1'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n9\n6 0 0 0 1 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n\"\"\") == \"22\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1 7 1') == '8'\nassert solution('4 0 4 4') == '1'"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1') == '8'\nassert solution('6\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4') == '1'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == \"impossible\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\nassert solution('4') == '4 3'\nassert solution('5') == '5 5'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\nassert solution('10') == 'impossible'\nassert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"2 2\"\nassert solution(\"10\") == \"impossible\"\nprint(solution(input()))\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == 'impossible'\nassert solution('3') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\nassert solution('4') == '4 3'\nassert solution('6') == 'impossible'\nassert solution('7') == '4 3'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '525'\nassert solution('3') == '333'\nassert solution('4') == '444'"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '16'\nassert solution('2') == '109'\nassert solution('4') == '109'"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n1') == '16\\n'\nassert solution('4\\n2\\n4') == '109\\n'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3\\n4\\n1\\n4') == '109\\n'\nassert solution('2\\n3\\n4\\n1\\n4') == '128\\n'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1\\n2\\n') == '16'\nassert solution('5\\n1\\n3\\n2\\n3\\n4\\n') == '109'\nassert solution('3\\n1\\n2\\n') == '16'\nassert solution('4\\n2\\n3\\n4\\n') == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"16\"\nassert solution(\"1\\n3\\n4\\n1\\n4\\n\") == \"109\"\nassert solution(\"2\\n4\\n1\\n4\\n\") == \"107\""
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '16'\nassert solution('4') == '109'\nassert solution('5') == '171'\nassert solution('6') == '417'\nassert solution('7') == '1615'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1536'"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n3\n4\n1\n4''') == '109', \"Wrong\"\nassert solution('''2\n3\n4\n1\n4''') == '109', \"Wrong\"\nassert solution('''3\n2\n4\n1\n4''') == '104', \"Wrong\"\nassert solution('''4\n2\n4\n1\n4''') == '104', \"Wrong\"\nassert solution('''5\n2\n4\n1\n4\n3''') == '1071', \"Wrong\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '''\n    2\n    1\n    3\n    '''\n    ) == '16'\n\nassert solution(\n    '''\n    4\n    2\n    4\n    1\n    4\n    '''\n    ) == '109'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5'\n\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '6'"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '3'\nassert solution('4 3') == '5'\nassert solution('5 3 1 1') == '1 3 1 2'\nassert solution('5 3 1 1 1') == '2 3 2 1 2'\nassert solution('6 3 1 1 1 1 1') == '2 3 2 1 2 2 1'"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n2 3\n5 1\n1 2\n1 2\n1 2\n\"\"\"\n    ) == \"3\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\n\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == \"3\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\n5 1\n1 2\n1 2\n1 2''') == \"4\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3\\n5 1\\n1 2\\n1 2\\n1 2') == '3'\nassert solution('4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n') == '5'\nassert solution('2 3\\n5 1\\n1 2\\n1 2\\n1 2') == '3'\nassert solution('5 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n') == '5'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5'\nassert solution('''10 3\n1 1 2 3 2 1 1 1 2\n2 2 2 2 2 1 2 1\n3 2 1 2 2 2 2\n1 3 1 2 2 1 1 1\n1 1 1 1 2 2 2 1\n1 3 2 3 1 2 1 1\n2 2 2 2 1 1 2 1\n3 1 2 2 1 1 3 1\n2 3 1 2 1 3 1\n1 2 3 2 1 1 3 1\n2 2 2 1 3 2 2 1\n1 1 1 1 2 2 2 2\n2 2 1 3 1 3 1 2\n3 1 1 2 1 1 2 1\n1 3 2 2 1 1 2 1\n1 1 1 1 1 2 2 1\n1 3 3 2 1 2 1 1\n2 3 1 2 2 2 1 1\n3 1 2 1 2 1 2 1\n1 1 3 2 1 1 1 1\n2 2 2 1 1 2 1 2\n1 2 2 1 1 1 2 1\n3 1 1 1 1 2 1 1\n2 2 1 1 1 1 2 1\n1 1 1 1 1 2 1 1\n2 2 1 1 1 1 1 1\n1 2 1 2 2 1 2 1\n1 1 1 1 1 1 1 1\n2 3 1 2 3 1 2 1\n1 2 3 2 3 1 2 2\n1 2 1 1 2 2 2 2\n2 2 2 3 2 1 3 2\n2 2 1 1 1 1 1 2\n2 1 1 2 1 1 3 1\n2 3 2 1 1 1 1 1\n3 2 1 1 1 1 1 1\n3 1 1 1 2 1 1 1\n2 1 1 1 1 1 1 1\n1 1 1 1 1 2 1 1\n1 2 1 1 1 2 1 1\n1 3 2 2 1 1 1 2\n2 1 1 1 1 2 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n2 2 1 1 1 1 1 2\n1 3 2 1 1 1 1 1\n1 2 1 1 1 1 1 1\n1 2 1 1 1 1 1 1\n1 3 2 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 3 3 1 1 1 1 1\n1 3 2 1 1 1 1 1\n1 3 1 1 1 1 1 1\n2 3 1 1 1 1 1 1\n1 3 2 1 1 1 1 1\n1 3 2 1 1 1 1 1\n1 3 1 1 1 1 1 1\n2 1 1 1 1 1 1 1\n1 2 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    2 3\n    5 1\n    1 2\n    1 2\n    1 2\n    \"\"\"\n) == \"3\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 2\n2 3\n1 2\n2 3\n3 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4 3\n1 2\n1 2\n1 2\n1 2\n\"\"\") == \"6\"\nassert solution(\"\"\"\n4 2\n3 2\n2 1\n1 2\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1''') == '1 2'\nassert solution('''2 1\n20 3\n0 1 1\n10 1 0\n10 2 1''') == 'impossible'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1 2'\nassert solution('2 1') == '1 2'\nassert solution('1 1') == '1 2'\nassert solution('1 3') == '3'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2'\nassert solution('''\n3 1\n10 1 0\n10 2 1\n''') == 'impossible'\nassert solution('''\n5 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2 3'\nassert solution('''\n4 1\n10 1 0\n10 2 1\n10 3 1\n''') == 'impossible'\nassert solution('''\n5 1\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2 3'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('2 1') == 'impossible'\nassert solution('2 1') == '1 2'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('2 3') == '1 2'\nassert solution('3 2') == '1 2'"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1''') == '1 2'\nassert solution('''2 1\n20 3\n0 1 1\n10 1 0\n10 2 1\nSample Output 3:\n2\n''') == 'impossible'\n\nassert solution('''10 1\n40 100\n100 20\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n20 40\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1''') == '1 2'\nassert solution('''2 1\n20 3\n0 1 1\n10 1 0\n10 2 1\nSample Output 3:\nimpossible''') == 'impossible'\nassert solution('''5 1\n10 10 2 1\n10 10 2 1\n10 10 2 1\n1 5 2\n1 5 2''') == '1 2 5'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(t1) == \"1 2\"\nassert solution(t2) == \"2 1\""
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n6 7\") == \"1 2\"\nassert solution(\"2 1\\n0 1 1\\n0 2 2\") == \"1 2\"\nassert solution(\"2 1\\n10 1 0\\n10 2 1\") == \"impossible\"\nassert solution(\"2 1\\n20 3\") == \"impossible\""
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == \"1 2\"\nassert solution('''\n1 3\n2 4\n0 1 1\n1 1 3\n2 1 2\n3 1 3\n4 1 4\n''') == \"impossible\"\nassert solution('''\n2 1\n2 3\n0 1 1\n1 1 2\n1 2 1\n2 2 1\n''') == \"1 2\"\nassert solution('''\n5 2\n3 5\n1 2 1\n1 4 2\n2 4 1\n3 4 1\n4 4 1\n''') == \"1 4\"\nassert solution('''\n4 2\n3 5\n1 2 1\n1 3 2\n2 3 2\n3 3 1\n4 2 1\n4 3 2\n''') == \"1 4\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\nprint('Congratulations, have fun')\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '2'\nassert solution('15') == '5'\nassert solution('2020') == '2020 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2020') == '2020 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\nprint('Congratulations! All tests passed')\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('12') == '12 1'\nassert solution('20') == '20 1'\nassert solution('123') == '123 2'\nassert solution('101') == '1 2'\nassert solution('1234') == '1234 3'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n1\n3\n9''') == '1 2 3'\nassert solution('''10\n10\n3\n9''') == '1 2 3 4 5 6 7 8 9'\nassert solution('''20\n20\n3\n9''') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('''1\n1\n1\n1''') == '1 2'\nassert solution('''2\n2\n2\n2''') == '2 2'"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2020') == '2020 1'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'impossible'\nassert solution('3') == 'unique'\nassert solution('2') == 'ambiguous'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n''') == 'impossible'\nassert solution('''4\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'unique'\nassert solution('''10\n3\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'ambiguous'"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n\"\"\") == \"unique\"\nassert solution(\"\"\"\n5\n5\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n5\n5\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == \"impossible\"\nassert solution('3') == \"unique\"\n\"\"\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(r\"\"\"\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n\"\"\") == \"impossible\"\n\nassert solution(r\"\"\"\n3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n\"\"\") == \"unique\"\n\nassert solution(r\"\"\"\n6\n6\n0 chocolate\n1 milk\n2 eggs\n3 icecream\n4 coffee\n5 cookies\n5 chocolate\n6 icecream\n6 chocolate\n3 milk\n6 cookies\n3 coffee\n\"\"\") == \"ambiguous\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == \"impossible\"\nassert solution('4') == \"unique\"\nassert solution('4') == \"ambiguous\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"impossible\"\nassert solution(\"4\") == \"unique\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n2\n5\n1 1 chocolate\n2 2 icecream\n3 3 cookies\n4 4 icecream\n5 5 chocolate\n6 6 cookies\nSample Output 3:\nambiguous\n\"\"\") == \"ambiguous\""
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'impossible'\nassert solution('4') == 'unique'"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0\\n1\\n1\\n0\") == \"unique\"\nassert solution(\"2\\n0\\n1\\n1\\n0\") == \"ambiguous\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 0 10\") == \"0\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 0 10\\n') == '0'\nassert solution('1 2 10\\n') == '1'\nassert solution('2 2 10\\n') == '1'\nassert solution('1 1 10\\n') == '0'"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 0 10\n0 1 10''') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '0'\nassert solution(input('2 2 10\\n')) == '1'\nassert solution(input('1 2 10\\n')) == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\nprint(solution(input()))\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n.......XX..XX..\n...........XXX..\n....XXXXXXX..XXXX\n................XXXX\n...XXXXXX....XXXXX\n....XXXXXXXXXXXXX\n.XXXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n................\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n.XXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n.XXXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n................\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n.XXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n.XXXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n................\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n.XXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n.XXXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n................\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n.XXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n.XXXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n................\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n.XXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n.XXXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n................\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n.XXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n.XXXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n................\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n.XXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n.XXXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n................\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n.XXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n.XXXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n................\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n.XXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n.XXXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n................\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n.XXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n.XXXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n................\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n.XXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n.XXXXXXX......XXX\n...XXXXXX.....XX\nXXXXX..XXXXXXX..X\n....XXXXXXXXXXX.\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n..XX..XX..XX..XX\n................\n..XX..XX..XX..XX"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('.......XXXXXX.....X.......XXXXXXX') == '3 pan'\nassert solution('....XXXXX..........XXXXXXXXX') == '1 zoom'\nassert solution('....XXXXXXXXXXXXXXXXXXXXXXXXXXXXX') == '3 zoom'\nassert solution('....XX................X..X..X..') == '3 pan'\nassert solution('................XXX..........X') == '1 pan'\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"1 pan\"\nassert solution(\"\"\"\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............XX..............................................\n...........XXX..............................................\n............................................................\n............................................XX..............\n...........................................XXXX.............\n.............................................XX.............\n............................................................\nSample Output 2:\n3 zoom out\n\"\"\") == \"3 zoom out\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n....XXXX...................... \n....XXXX..................................XXX...........\n....XXXX...............................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n...........................................XX..............\n...........................................XXX.............\n...........................................XX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n...........................................XX..............\n...........................................XXX.............\n...........................................XX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n...........................................XX..............\n...........................................XXX.............\n...........................................XX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n...........................................XX..............\n...........................................XXX.............\n...........................................XX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n...........................................XX..............\n...........................................XXX.............\n...........................................XX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n...........................................XX..............\n...........................................XXX.............\n...........................................XX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n...........................................XX..............\n...........................................XXX.............\n...........................................XX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n...........................................XX..............\n...........................................XXX.............\n...........................................XX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n.............................."
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 2\\nX..X\\n....\\n....\\n....\\n....\\nX..X\\nXXXX\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X\\nX...X"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n............................................................\n.................................................XX...........\n................................................XXXX..........\n................................................XXXX..........\n................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n.................................................XXXX..........\n................................................."
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 pan\") == \"1 pan\"\nassert solution(\"2 pan\") == \"1 pan\"\nassert solution(\"3 pan\") == \"1 pan\"\nassert solution(\"4 pan\") == \"1 pan\"\nassert solution(\"5 pan\") == \"1 pan\""
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('............................................................') == '3 pan'\nassert solution('............................................................') == '3 pan'\nassert solution('...............................................XX...........') == '3 pan'\nassert solution('.....................................XXX......XXXX..........') == '3 zoom out'\nassert solution('....................................XXXX........X...........') == '3 zoom out'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2\n+ + + +\n+ +++ +\n+ ++ +\n+++ + +\n++++++\n''') ==' +  +  +  + +++ + +++ + ++ + ++'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4\\n' +\n                '+++++\\n' +\n                '+  =  +\\n' +\n                '+ +++ +\\n' +\n                '+ + + +\\n' +\n                '+++++\\n' +\n                'check out our\\n' +\n                'fresh apples!') == 'check out our\\nfresh apples!'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 20\\n'\n' apples are great!  \\n'\n'++++++++++++++++++++ \\n'\n'+ oranges are      +\\n'\n'+ way better!      +\\n'\n'+ #oranges>apples  +\\n'\n'++++++++++++++++++++ \\n'\n' check out our      \\n'\n' fresh apples!      \\n') == 'apples are great!  \\n'\n\n'''\nimport string\nimport collections"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"8 20\") == \"apples are great!\\n\" + \\\n                            \"++++++++++++++++++++\\n\" + \\\n                            \"+ oranges are      +\\n\" + \\\n                            \"+ way better!      +\\n\" + \\\n                            \"+ #oranges>apples  +\\n\" + \\\n                            \"++++++++++++++++++++\\n\" + \\\n                            \"check out our      \\n\" + \\\n                            \"fresh apples!\\n\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 20') == \"apples are great!\\n+ oranges are      +\\n+ way better!\\n+ #oranges>apples  +\\n\"\nassert solution('7 7') == \"+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"8 20\") == \"apples are great!\\n\" + \"check out our fresh apples!\\n\"\nassert solution(\"7 7\") == \"+++++++\\n\" + \"+  =  +\\n\" + \"+ +++ +\\n\" + \"+ + + +\\n\" + \"+ +++ +\\n\" + \"+     +\\n\" + \"+++++++\\n\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 7\") == \"+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\""
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8 20\") == \"apples are great!\\n\"\nassert solution(\"7 7\") == \"+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"8 20\") == \"apples are great!\\ncheck out our fresh apples!\\n\"\nassert solution(\"7 7\") == \"+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"8 20\\n\"\n                 \"+++++++\\n\"\n                 \"+  =  +\\n\"\n                 \"+ +++ +\\n\"\n                 \"+ + + +\\n\"\n                 \"+ +++ +\\n\"\n                 \"+     +\\n\"\n                 \"+++++++\\n\"\n                 \"check out our      \\n\"\n                 \"fresh apples!      \\n\") == stdin.strip()\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nTHT\nHTT\nHHHH\n''') == '3.0'\n\nassert solution('''\nTHT\nHTT\nT?\n''') == '1.5'\n\nassert solution('''\nT\nT\nT\nT\nT\nT\nT\nT\n''') == '0.5'\n\nassert solution('''\nT\nT\nTH\nT\nT\nT\nT\nT\nT\n''') == '1.5'\n\nassert solution('''\nT\nTH\nT\nTH\nTH\nT\nT\nTH\n''') == '1.5'"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == '2.0'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''HH''') == '2.0'\nassert solution('''H?''') == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\nassert solution('??') == '1.5'\nassert solution('H?H') == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"HH\") == \"2.0\"\nassert solution(\"H??\") == \"1.5\"\nassert solution(\"TT??\") == \"1.0\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''HH\nH?\n''') == '2.0'\nassert solution('''H?\nHH''') == '1.5'\n'''"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '1'\nassert solution('4\\n1111\\n1111\\n1111\\n1111') == '6'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n1110\n1111\n1111\n1111''') == \"6\"\nassert solution('''\n4\n0001\n0001\n0011\n1110\n''') == \"1\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '1'\nassert solution('12') == '5'\nassert solution('1234') == '1'"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1111\n1111\n1111\n1111\n''') == '6'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '1'\nassert solution('4') == '1'\nassert solution('5') == '6'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '1'\nassert solution('4') == '1'\nassert solution('3') == '6'\nassert solution('123') == '12'"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1111\n1111\n1111\n1111\n''') == '6'\nassert solution('''4\n1111\n1111\n1111\n1111\n''') == '6'\nassert solution('''4\n1111\n1111\n1111\n1111\n''') == '4'\nassert solution('''5\n1111\n1111\n1111\n1111\n''') == '8'\nassert solution('''4\n1111\n1111\n1111\n1111\n''') == '4'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"4\") == \"6\"\nassert solution(\"10\") == \"8\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '6'"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10\n0 0 0 0 1 0 0 0 0 1\n0 1 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 0 1\n0 0 0 0 1 0 0 0 0 1\n0 0 0 0 0 0 0 0 0 1\n0 0 0 1 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 0 1\n''') == '2'\n\nassert solution('''\n15\n
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\n\"\"\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3') == '2'\nassert solution('4\\nh 1 5 1\\nh 5 2 3\\nv 1 5 1\\nv 5 2 3') == '4'\nassert solution('4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3') == '4'"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3') == '2'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '2'\nassert solution('4') == '4'"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3') == '2'\nassert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 5 10 2\\nv 11 2 3') == '4'"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == '2'\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == '4'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\\n') == '2'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5''') == '2', \"First\"\nassert solution('''3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8''') == '4', \"Second\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n') == '2'\nassert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n') == '4'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '2'\nassert solution('''\n3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '4'\nassert solution('''\n5 5\n1 0 0 2 3\n3 2 0 4 0\n0 1 5 4 6\n7 0 0 8 0\n0 9 0 0 1\n''') == '-1'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"3 3\") == \"4\""
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"3 3\") == \"4\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"4 5 6\") == \"4\"\nassert solution(\"7 8 0\") == \"4\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"3 3\") == \"4\"\nassert solution(\"3 3\") == \"4\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n4\\n1 2 3\\n4 5 6') == '2'\nassert solution('2\\n4\\n1 2 3\\n4 5 6') == '-1'"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '2'\nassert solution('''\n3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '4'\nassert solution('''\n10 3\n0 3 4 5 6 7 8 9 0\n3 0 5 6 8 10 1 2 3 4\n4 1 0 9 8\n''') == '1'\nassert solution('''\n2 2\n1 0\n1 1\n''') == '-1'"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('4 5 6') == '4'\nassert solution('7 8 0') == '-1'\nassert solution('4 2 3') == '2'\nassert solution('6 5 1') == '4'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"3 3\") == \"4\"\nassert solution
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '2'\nassert solution('8') == '4'"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 2 3\n1 2 3\n1 2 3\n''') == '3'\nassert solution('''\n5\n1 2 1 3 2\n1 2 1 3 2\n1 2 1 3 2\n1 2 1 3 2\n1 2 1 3 2\n''') == '4'\nassert solution('''\n3\n1 2 3\n1 2 3\n1 2 3\n''') == '2'\nassert solution('''\n10\n1 1 2 1 3 1 2 1 1 2\n1 1 2 1 3 1 2 1 1 2\n1 1 2 1 3 1 2 1 1 2\n1 1 2 1 3 1 2 1 1 2\n1 1 2 1 3 1 2 1 1 2\n1 1 2 1 3 1 2 1 1 2\n1 1 2 1 3 1 2 1 1 2\n1 1 2 1 3 1 2 1 1 2\n1 1 2 1 3 1 2 1 1 2\n1 1 2 1 3 1 2 1 1 2\n1 1 2 1 3 1 2 1 1 2\n''') == '5'"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '2'\nassert solution('8') == '4'\nassert solution('10') == '5'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n1 2 3 3 4 2\n''') == '2'\nassert solution('''\n8\n1 2 1 3 1 3 1 2\n''') == '4'\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1 1\n''') == '2'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2\\n1\\n1\\n2\\n\") == \"2\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3 3 4 2') == '2'\nassert solution('6') == '2'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''6\n1 2 3 3 4 2\n''') == '2'\nassert solution('''8\n1 2 1 3 1 3 1 2\n''') == '4'\nprint('\"Run\" is the word to type to run the tests')\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == \"4\""
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2''') == '4'\nassert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2''') == '0'\nassert solution('''1 1 1\n1 1 1\n2 2 2''') == '0'"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\nassert solution('2 2 2') == '4'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == '4'\nassert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == '0'\nassert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == '2'\n\nprint(\"All Tests Passed!\")"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n4 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n\"\"\"\n) == \"4\"\n\nassert solution(\n\"\"\"\n3 3 3\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\"\n) == \"9\""
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1 1 1\n2 2 2\n2 2 2 1\n2 2 2 2 1\n1 1 1 2\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1') == '4'\nassert solution('1 1 1 2') == '0'\nassert solution('2 2 2 1') == '4'\nassert solution('2 2 2 2 1') == '2'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2\") == \"4\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"2 2 2\") == \"4\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '4\\n0\\n', \"Error\"\nassert solution('''\n2\n2\n1\n2\n1\n2\n2\n2\n2\n1\n2\n2\n1\n2\n1\n1\n1\n1\n1\n2\n1\n2\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\") == \"4\"\nassert solution(\"1 1 1\") == \"0\""
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2') == '1'\nassert solution('3 2') == 'impossible'\nassert solution('4 2') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2\\n\") == \"1\"\nassert solution(\"5 3\\n2 4 2 5 4\\n3 4 0 1 3\\n1 3 2 5 3\\n2 4 1 0 2\\n4 0 1 2 3\\n4 0 1 2\\n2 3\\n3 4\\n3 5\\n1 4\\n5 2\\n4 1\\n2 2\\n0 4\\n3 3\\n0 1\\n3 2\\n1 4\\n0 4\\n\") == \"impossible\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"impossible\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2\") == \"1\"\nassert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\") == \"impossible\"\nprint(solution(*(input().split())))\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2') == \"1\"\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2') == \"impossible\""
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2\\n1 0 0 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2') == 'impossible'\nassert solution('3 3\\n1 0 0 1\\n1 0 0 1\\n1 0 0 1') == '2'\nprint(solution('''5 3\n0 0 0 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2'''))\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(example_input_1) == '1'\nassert solution(example_input_2) == 'impossible'"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2') == '1'\nassert solution('4 2') == 'impossible'\nassert solution('4 2') == 'impossible'\n\nassert solution('5 3') == 'impossible'\nassert solution('5 3') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\n\"\"\"\n\n\nimport sys\n\nstdin = sys.stdin.read()\nlines = stdin.splitlines()\nn, k = list(map(int, lines[0].split()))\nlines = lines[1:]\n\ns = set()\nfor i in range(n):\n    for j in range(i + 1, n):\n        if lines[i][j] == 1:\n            s.add(i)\n            s.add(j)\n\nk -= len(s)"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''10 4\n1 1 2 1\n3''') == '35'\nassert solution('''11 3\n3 7 10\n3\n0 10\n2 6\n7 7\n''') == '8'\nassert solution('''10 6\n5 9 10 8 12\n7\n0 4\n1\n1\n1\n''') == '13'\nassert solution('''10 6\n5 9 10 8 12\n7\n0 4\n1\n1\n1\n1\n''') == '19'\nassert solution('''10 10\n5 9 10 8 12\n7\n0 4\n1\n1\n1\n1\n''') == '23'"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"10 4\\n1 1 2 1\\n3\") == \"35\"\nassert solution(\n    \"11 3\\n3 7 10\\n3\") == \"8\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '10 4\\n'\n    '1 1 2 1\\n'\n    '3\\n'\n    '0 9\\n'\n    '2 6\\n'\n    '7 7\\n'\n    ) == '35\\n'\nassert solution(\n    '11 3\\n'\n    '3 7 10\\n'\n    '3\\n'\n    '0 10\\n'\n    '2 6\\n'\n    '7 7\\n'\n    ) == '8\\n2\\n1\\n'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == '35'\n\nassert solution('''11 3\n3 7 10\n3\n0 10\n2 6\n7 7\n''') == '8'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"1 1 2 1\"\n) == \"35\"\nassert solution(\n    \"11 3\"\n) == \"8\""
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 4\\n1 1 2 1\\n3') == '35'\nassert solution('11 3\\n3 7 10\\n3') == '8'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(t1) == '8'\nassert solution(t2) == '2'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '35\\n18\\n1'\nassert solution(input_data=\"4 5\\n10 10 10 10\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\\nSample Input 3:\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\nSample Output 3:\n8\n2\n1\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == '35'\n\nassert solution('''\n10 3\n3 7 10\n3\n0 10\n2 6\n7 7\n''') == '18'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 4\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\\n\") == \"35\\n18\\n1\\n\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '0\\n1\\n3\\n6'\nassert solution('5') == '0\\n1\\n2\\n4\\n6'"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1\n2\n3\n''') == '0\\n1\\n3\\n', \"Wrong\"\nassert solution('''5\n2\n3\n4\n1\n5\n''') == '0\\n1\\n2\\n4\\n5\\n', \"Wrong\"\nassert solution('''5\n2\n3\n4\n1\n5\n6\n7\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n', \"Wrong\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '0 1 2 4'\nassert solution('3') == '0 1 2'\nassert solution('2') == '0 1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"10\") == \"4\"\nassert solution(\"7\") == \"2\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == '0\\n1\\n3\\n6'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"0\\n1\\n3\\n6\\n\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\\n\") == \"0\\n1\\n2\\n4\\n6\\n\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '0 1 2 3 4'\nassert solution('4') == '0 1 2 3'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n3\\n2\\n1\\n') == '0\\n1\\n3\\n6\\n'\nassert solution('5\\n3\\n2\\n4\\n1\\n5\\n') == '0\\n1\\n2\\n4\\n6\\n'\nassert solution('10\\n3\\n5\\n6\\n4\\n8\\n9\\n7\\n1\\n2\\n') == '0\\n1\\n2\\n4\\n5\\n7\\n9\\n10\\n'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"0\\n1\\n3\\n6\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\\n\") == \"2 4 1 3\""
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n1 3 2 2\n1 1 3 2\n2 4 7 3\n3 3 5 3\n''') == '2 4 1 3'\nassert solution('''4\n0 0 1 1\n1 2 0 3\n2 2 3 3\n4 0 3 1\n''') == '4 3 1 2'\nassert solution('''4\n0 0 1 1\n1 2 0 3\n2 2 3 3\n4 0 3 1\n''') == '4 3 1 2'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\\n') == '2 4 1 3'"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\\n\") == \"4 3 1 2\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\\n\") == \"2 4 1 3\"\nassert solution(\"5\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\\n3 3 5 3\\n\") == \"4 3 1 2\""
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\\n') == '2 4 1 3'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 3 2 2\n1 1 3 2\n2 4 7 3\n3 3 5 3''') == '1 2 4 3'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3') == '2 4 1 3'\nassert solution('5\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\\n3 3 5 3\\n') == '3 4 1 2'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\") == \"4 3 1 2\"\nassert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"4 3 1 2\"\n\"\"\""
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 3 2 2\") == \"2 4 1 3\"\nassert solution(\"4 0 0 1\") == \"4 3 1 2\"\n\n'''"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n\"\"\""
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\"\n) == \"Theta wins\"\nassert solution(\n    \"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\"\n) == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\nassert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5''') == 'Theta wins'\nassert solution('''89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49''') == 'Theta wins'\nassert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\n89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49''') == 'Theta wins'\n\nassert solution
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\nSample Output 2:\nTheta wins''') == 'Theta wins'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1 2\n1 charlatan 1\n1 not charlatan 1\n\"\"\") == \"charlatan\"\nassert solution(\"\"\"\n2 1\n1 and fabulist 1 fabulist 2\n\"\"\") == \"fabulist\""
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1\\n') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2\\n') == 'fabulist'\n\"\"\"\nfrom typing import List\nimport itertools"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 2\n1 charlatan 1\n1 not charlatan 1\n\"\"\") == \"charlatan\"\nassert solution(\"\"\"\n2 1\n1 and fabulist 1 fabulist 2\n\"\"\") == \"fabulist\"\nassert solution(\"\"\"\n3 3\n1 truther 1 truther 1\n1 fabulist 1 fabulist 1\n1 not truther 1\n1 not fabulist 1\n\"\"\") == \"truther\"\nassert solution(\"\"\"\n1 2\n1 truther 1\n1 fabulist 1\n\"\"\") == \"truther\"\nassert solution(\"\"\"\n1 2\n1 truther 1\n1 not truther 1\n\"\"\") == \"truther\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == 'truther', 'First'\nassert solution('1 2') == 'truther', 'Second'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 2\n1 charlatan 1\n1 not charlatan 1\n\"\"\") == \"charlatan\"\nassert solution(\"\"\"\n2 1\n1 and fabulist 1 fabulist 2\n\"\"\") == \"fabulist\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2\n1 charlatan 1\n1 not charlatan 1\n''') == 'charlatan'\nassert solution('''\n2 1\n1 and fabulist 1 fabulist 2\n''') == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 2\n1 fabulist 1\n1 not fabulist 1\n\"\"\") == \"fabulist\"\nassert solution(\"\"\"\n2 1\n1 and fabulist 1 fabulist 2\nSample Output 2:\ntruther\n\"\"\") == \"truther\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 2\n1 charlatan 1\n1 not charlatan 1\n\"\"\") == \"charlatan\"\nassert solution(\"\"\"\n2 1\n1 and fabulist 1 fabulist 2\n\"\"\") == \"fabulist\"\nassert solution(\"\"\"\n1 3\n1 xor not charlatan 1\n1 not charlatan 2\n\"\"\") == \"charlatan\"\nassert solution(\"\"\"\n2 3\n1 not charlatan 1\n1 xor not charlatan 2\n\"\"\") == \"fabulist\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\nassert solution('3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00') == '3'\n\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n-1.00 -1.00\\n1.00 -1.00\\n0.00 1.00\") == \"4\"\nassert solution(\"4\\n0.00 1.00\\n1.00 1.00\\n-1.00 1.00\\n-0.00 -1.00\") == \"3\"\nassert solution(\"7\\n-1.00 3.00\\n1.00 3.00\\n-0.00 2.00\\n-2.00 2.00\\n-2.00 1.00\\n-1.00 1.00\") == \"1\"\nprint('Congratulations!')"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '4'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\\n\") == \"4\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\nassert solution('3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00') == '3'"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '4'\nassert solution('3') == '3'\nassert solution('4') == '2'\nassert solution('6') == '5'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\nassert solution('3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00') == '3'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1.00 5.00\n3.00 3.00\n4.00 2.00\n''') == '4', \"Max 3 fruits\"\n\nassert solution('''\n3\n-1.50 -1.00\n1.50 -1.00\n0.00 1.00\n''') == '3', \"Max 2 fruits\"\n\nassert solution('''\n2\n0.00 0.00\n1.00 1.00\n''') == '2', \"Max 2 fruits\"\n\nassert solution('''\n1\n2.00 2.00\n''') == '1', \"Max 1 fruit\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1.00 5.00\n3.00 3.00\n4.00 2.00\n6.00 4.50\n7.00 1.00\n''') == '4'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1.00 5.00\n3.00 3.00\n4.00 2.00\n6.00 4.50\n7.00 1.00\n''') == '4', 'First example'\nassert solution('''3\n-1.50 -1.00\n1.50 -1.00\n0.00 1.00\n''') == '3', 'Second example'\nassert solution('''4\n1.00 5.00\n3.00 3.00\n4.00 2.00\n6.00 4.50\n7.00 1.00\n''') == '4', 'Third example'\nassert solution('''5\n-1.00 5.00\n1.00 3.00\n3.00 1.00\n0.00 0.00\n5.00 1.00\n7.00 5.00\n''') == '6', 'Fourth example'\nassert solution('''1\n-10.00 -10.00\n1.00 -10.00\n0.00 1.00\n5.00 5.00\n7.00 3.00\n''') == '0', 'Fifth example'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 1\\nR.R.R\\nX.X\\n') == '0'\nassert solution('5 5 1\\nX..X\\nXXX.X\\n\\n') == '0'\nassert solution('3 3 1\\nX..X\\nXXX.X\\n\\n') == '1'\nassert solution('100 100 1\\nR.R.R\\nX.X\\n\\n') == '100'\nassert solution('1 10 1\\nX.X.X\\n.X.X\\n\\n') == '1'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 5 2') == '16'\nassert solution('3 2 1') == '10'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3 2') == '1'\nassert solution('5 4 1') == '5'\nassert solution('2 5 1') == '2'\nassert solution('3 4 1') == '3'\nassert solution('5 5 1') == '5'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2 5 2\nR..?.\n.X...\n100 100 7 100 8\n\"\"\") == \"16\"\n\nassert solution(\"\"\"\n2 2 2\nX.\n..\n100 100 7 100 8\n\"\"\") == \"100\"\n\nassert solution(\"\"\"\n3 3 3\nXXX\n.XX\nXXX\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3 5 3\nX.X.\n..X.\n.X..\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n3 3 3\n.X.\n..X.\n.X..\n\"\"\") == \"100\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 5 2\") == \"16\"\nassert solution(\"3 3 1\") == \"10\"\nassert solution(\"3 2 2\") == \"5\"\nassert solution(\"3 2 2\") == \"5\"\nassert solution(\"3 2 2\") == \"5\""
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5 2\\nR..?\\n.X..\\n100 100 7 100 8\") == \"16\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"16\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 5 2\nR..?.\n.X...\n100 100 7 100 8\n''') == '16'\nassert solution('''\n3 2 1\n.X.\n.X.\n100 100 7 100 8\n''') == '100'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5 2') == '1'\nassert solution('2 3 1') == '10'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '2 3 1\\n'\n    'X..\\n'\n    '..?.') == '16'\nassert solution(\n    '2 3 1\\n'\n    '..X.') == '16'\nassert solution(\n    '2 3 2\\n'\n    '..X.\\n'\n    '...') == '11'\nassert solution(\n    '2 2 1\\n'\n    'X..\\n'\n    '..?') == '11'\nassert solution(\n    '2 2 2\\n'\n    'X..\\n'\n    '...') == '4'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n0 4 4\n1 5 1\n2 6 1\n''') == '1.414'\nassert solution('''\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n''') == '5.657'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"1.414\"\nassert solution(\"6 11\") == \"5.657\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '1.414'\nassert solution('6 11') == '5.657'"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 3\n0 4 4\n1 5 1\n2 6 1\n\"\"\") == \"1.414\"\n\nassert solution(\"\"\"\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n\"\"\") == \"5.657\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0.0\"\nassert solution(\"1\\n2\\n3\") == \"1.0\"\nassert solution(\"3\\n4\\n5\") == \"1.25\"\nassert solution(\"6\\n7\\n8\") == \"2.16666666666666666\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"1.414\"\nassert solution(\"6 11\") == \"5.657\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2.1444'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '1.414'\nassert solution('6 11') == '5.657'"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1.414'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 3\n0 4 4\n1 5 1\n2 6 1\n\"\"\") == \"1.414\"\nassert solution(\"\"\"\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n\"\"\") == \"5.657\""
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'\n\n----Hints----\nRead up on why the max area of a polygon can be measured in square meters.\n\n'''"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 1 1') == '0.433'\nassert solution('4 1 1 1 1') == '1.0'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 1 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'\nassert solution('3 3 3 1') == '0.943'\nassert solution('5 3 4 1 2 5 1') == '0.333'\nassert solution('8 2 5 4 9 6 1 4') == '1.414'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 1 1') == '1.0'\nassert solution('10 1 1 1 1 1 1 1 1 1') == '3.1666666666666666'\nassert solution('2 3 1 1 1') == '0.5'\nassert solution('3 3 2 4 5 1 2 4') == '2.25'"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 1 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'\nassert solution('1 1 2 3 4') == '0.167'\nassert solution('2 3 4 5 6') == '0.5'\nassert solution('1 2 3 4') == '0.0'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 1 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'\nassert solution('2 3 2 4') == '0.0'\nassert solution('2 1 3 4') == '0.5'\nassert solution('4 5 3 2') == '0.5'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3 2 1') == '0.5'\nassert solution('5 1 2 4 1') == '0.5'\nassert solution('4 1 1 1 1') == '1.0'"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 1 1 1 1\") == \"1.0\"\nassert solution(\"3 1 1 1\") == \"0.433\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 1 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1 2 3 4 5') == '0.5'\nassert solution('5 1 1 1 2') == '0.5'\nassert solution('1 1 1 1 1 1') == '0.25'\nassert solution('2 5 2 3 4 5') == '0.28125'\nassert solution('4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '0.25'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5') == '5'\nassert solution('8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15') == '36'\nassert solution('100 100\\n1 1 10\\n1 2 10\\n1 3 10\\n1 4 10\\n1 5 10\\n2 1 10\\n2 2 10\\n2 3 10\\n2 4 10\\n2 5 10\\n3 1 10\\n3 2 10\\n3 3 10\\n3 4 10\\n3 5 10\\n4 1 10\\n4 2 10\\n4 3 10\\n4 4 10\\n4 5 10\\n5 1 10\\n5 2 10\\n5 3 10\\n5 4 10\\n5 5 10') == '67'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 5\") == \"5\"\nassert solution(\"8 10\") == \"36\"\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.readline()\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n''') == '5'\nassert solution('''8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15\n''') == '36'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\") == \"36\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5') == '5'\nassert solution('10 10') == '10'\nassert solution('30 30') == '30'\nassert solution('8 10') == '36'\nassert solution('100 100') == '1000'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 5\") == \"5\"\nassert solution(\"8 10\") == \"36\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\\n\") == \"5\\n4\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\\n\") == \"36\\n5\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n''') == '5', 'Wrong solution'\nassert solution('''\n8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15\n''') == '36', 'Wrong solution'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5') == '5'\nassert solution('8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15') == '36'\nassert solution('10 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\\n5 3 5') == '50'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('2 1') == '1 2'\nassert solution('3 2') == '2 1 3'\nassert solution('5 2') == '2 1 5 3 4'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1\\n2 1\\n1 2\\n') == '1'\nassert solution('3 2\\n2 1 3\\n1 3\\n2 3\\n') == '3'"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 1\n2 1\n1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 2\n2 1 3\n1 3\n2 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n5 2\n5 1 6\n1 6\n4 2\n3 6\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n5 2\n5 1 6\n1 6\n4 2\n3 6\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n10 3\n6 1 9 2 7 8 5 4 3 4 5\n2 5\n5 9\n5 2\n3 5\n2 9\n5 6\n2 1\n9 5\n8 5\n7 1\n7 2\n7 5\n4 3\n7 8\n7 9\n\"\"\") == \"8\""
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 1\n2 1\n1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 2\n2 1 3\n1 3\n2 3\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '3'\nassert solution('3 2') == '3'\nassert solution('6 6') == '6'"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'\nassert solution('3 2') == '3'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1\\n2 1\\n1 2\\n') == '1'\nassert solution('3 2\\n2 1 3\\n1 3\\n2 3\\n') == '3'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"5\"\nassert solution(\"\"\"\\\n5 5\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n\"\"\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 8') == '-1'\nassert solution('6 5') == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '-1'\n\nassert solution('''\n6 5\n2 4\n3 5\n1 5\n3 6\n1 6\n''') == '5'\n\nassert solution('''\n5 7\n1 3\n2 4\n1 5\n4 6\n3 5\n3 6\n''') == '-1'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\", \"Test 1\"\nassert solution(\"5 8\") == \"1\", \"Test 2\"\nassert solution(\"10 10\") == \"10\", \"Test 3\"\nprint('You passed all the tests!')"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 8') == '-1'\nassert solution('6 5') == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 8\n2 4\n3 5\n1 5\n3 6\n1 6''') == '-1'\n\nassert solution('''5 8\n2 4\n3 5\n1 5\n3 6\n1 6''') == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n\") == \"5\"\nassert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n\") == \"5\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 4\\n4 5') == '5\\n'\nassert solution('5 5\\n1 5') == '5\\n'\nassert solution('10 3\\n5 6\\n1 5\\n3 7\\n4 6\\n4 7\\n7 9\\n6 8') == '-1\\n'\nassert solution('1 10\\n7 6\\n2 7\\n3 7\\n4 7\\n5 8\\n6 9\\n1 7') == '8\\n'\nassert solution('1 10\\n1 2\\n2 2\\n3 2\\n4 2\\n5 2\\n6 2\\n7 2\\n1 8') == '-1\\n'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '-1'\nassert solution('''\n6 5\n2 4\n3 5\n1 5\n3 6\n1 6\n''') == '5'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 1\") == \"4.00\"\nassert solution(\"6 3\") == \"9.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1') == '4.00'\nassert solution('6 3') == '9.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n1 1\\n2 2\\n4 4\\n5 5\") == \"4.00\"\nassert solution(\"4 3\\n1 1\\n5 5\\n1 1\\n4 4\\n1 2\\n5 5\\n1 1\\n3 3\") == \"5.00\"\nassert solution(\"9 10\\n-10 -20\\n10 10\\n-10 -20\\n10 10\\n-10 -20\\n10 10\\n-10 -20\\n10 10\\n-10 -20\") == \"21.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 1\n1 1\n5 1\n5 5\n4 2\n''') == '4.00'\nassert solution('''6 3\n-8 -8\n0 -1\n8 -8\n1 0\n0 10\n-1 0\n''') == '9.00'"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 1\n1 1\n5 1\n5 5\n4 2\n''') == '4.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0.00\"\nassert solution(\"1 1\") == \"4.00\"\nassert solution(\"3 4\") == \"5.00\"\nassert solution(\"5 5\") == \"5.00\"\nassert solution(\"5 5 3\") == \"5.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 1') == '4.00'\nassert solution('6 3') == '9.00'\n\n'''\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 1\n1 1\n5 1\n5 5\n4 2\n''') == '4.00'\nassert solution('''\n6 3\n-8 -8\n0 -1\n8 -8\n1 0\n0 10\n-1 0\n''') == '9.00'\n'''\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '2.00'\nassert solution('6 3') == '9.00'"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 1\n1 1\n5 1\n5 5\n''') == '4.00'\nassert solution('''6 3\n-8 -8\n0 -1\n8 -8\n1 0\n0 10\n-1 0\n''') == '9.00'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\nSample Input 3:\n3 5\nPAINT 2 2 2 2 3\nPAINT 1 4 4 2 2\nPAINT 2 4 2 2 1\nPAINT 1 3 4 4 1\nPAINT 1 1 1 1 1\nPAINT 3 3 3 3 3\nSample Output 3:\n1\n2\n3\n4\n1\n2\n3\n4\n1\n2\n3\n4\n1\n2\n3\n4\n''') == '2 3 3 4 4 4 1 2 3 3 1 2 4 4 1 2 3 3 4 1 2 3 4 4 1 2 3 3 4 1 2 4 4 3 2 4 4 1 2 4 3 3 3 3 4 4 3 2 4 4 1 2 3 3 3 3 4 4 1 2 3 3 3 4 1 2 4 4 3 2 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4 1 2 4 3 3 3 4 4"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1 2 1 2'"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3 2\") == \"2 1 2\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '1 2 1'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3 2') == '2 1 2 3'\nassert solution('3 3 4') == '2 1 2 3'"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 1 2') == '1 2 1 2'\nassert solution('4 3 2') == '2 1 2 3'\nassert solution('3 3 4') == '1 2 1 2'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2\") == \"2 1 2 3\"\nassert solution(\"3 3 4\") == \"3 1 1 2 2\""
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2'"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2\") == \"2 1 2 3\", \"First\"\nassert solution(\"3 3 4\") == \"1 2 1 2\", \"Second\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 2\") == \"2 1 2 3\"\nassert solution(\"3 3 4\") == \"1 2 1 2\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 3') == '1 4 2 3'\nassert solution('5 1') == '-1'"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 3\n1 4 2 3\n''') == '1 4 2 3'\nassert solution('''5 1\n-1\n''') == '-1'\nassert solution('''5 1\n1\n''') == '1'"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == -1, 'WRONG'\n\nassert solution('''\n4 3\n1 4 2 3\n''') == \"1 4 2 3\", \"WRONG\"\n\nassert solution('''\n5 1\n-1\n''') == \"-1\", \"WRONG\"\n\nassert solution('''\n7 10\n1 3 2 4 5 6 7 8 9 10\n''') == \"1 3 2 4 5 6 7 8 9 10\", \"WRONG\"\n\nassert solution('''\n5 4\n3 4 1 5 2\n''') == \"3 4 1 5 2\", \"WRONG\""
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '2 4 1'\nassert solution('5 1') == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 1\n1 2 3\n4 5\n1 2 4\n3 4 5''') == '4 5 1 2 3'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 1\") == \"-1\"\nassert solution(\"4 3\") == \"1 4 2 3\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3 2 1') == '1 3 2'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"1 2 3 4\"\nassert solution(\"3 2 1\") == \"1 2\"\nassert solution(\"4 1 2 3\") == \"1 2 3 4\"\nassert solution(\"3 1 2\") == \"1 2\"\nassert solution(\"4 1\") == \"-1\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '1 2 3'\nassert solution('5 1') == '-1'\n\"\"\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '1 4 2 3'\nassert solution('5 1') == '-1'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n4 2\n2 1\n1 3\n''') == '1'\nassert solution('''\n4\n5 0\n2 6\n8 6\n5 7\n''') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5 0') == '1'\nassert solution('2 1') == '1'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n    5 0\n    2 6\n    8 6\n    5 7\n\"\"\") == \"0\"\nassert solution(\"\"\"\n    3 2\n    2 1\n    1 3\n\"\"\") == \"1\"\n\"\"\"\n\n-----Explanation-----\n\n===SOLUTION===\n\n===SAMPLE TEST CASES===\n\n\"\"\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1', \"Failed Test 1\"\nassert solution('4') == '1', \"Failed Test 2\"\nassert solution('5') == '0', \"Failed Test 3\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n4 2\n2 1\n1 3\n''') == '1'\nassert solution('''\n3\n5 0\n2 6\n8 6\n5 7\n''') == '0'\n''')\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n4 2\n2 1\n1 3\n''') == '1'\nassert solution('''\n3\n5 0\n2 6\n8 6\n5 7\n''') == '0'\nassert solution('''\n6\n4 2\n2 1\n1 3\n2 3\n1 4\n3 3\n2 5\n3 5\n''') == '5'\nassert solution('''\n4\n5 0\n2 6\n8 6\n5 7\n''') == '4'"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1\", \"3\"\nassert solution(\"4\") == \"0\", \"4\"\nassert solution(\"5\") == \"0\", \"5\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4 0 3') == '4 140'\nassert solution('2 1 0 1') == '1000 100'"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100000\""
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10''') == '4 140'\nassert solution('''4 4 1 1\n0 1 1000 100\n1 2 2 10\n0 2 4 30\n2 3 4 10''') == '1000 100000'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n\"\"\") == \"4 140\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4 0 3') == '4 140'\nassert solution('2 1 0 1') == '1000 100'"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2 0 1\") == \"1 1000\"\nassert solution(\"3 2 0 1 4\") == \"1 1000\"\nassert solution(\"4 2 0 3\") == \"2 1000\"\nassert solution(\"4 2 0 3 4\") == \"2 1000\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1 0 1\") == \"1000 100000\"\n\nprint(\"You're all set!\")"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == '0 0'\nassert solution(\"4 4 0 3\") == '4 140'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100000\""
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100\"\nprint(\"You passed the tests!\")\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4\\n5 6\\n3 5\\n5 5\\n2 4\\n') == '3'\nassert solution('2 3\\n3 4\\n5 6\\n') == 'impossible'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 5') == '3'\nassert solution('8 4') == 'impossible'\nassert solution('100 20') == 'impossible'\nassert solution('100 3') == '3'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1\n5 8\n1 5\n1 2\n4 5\n6 5\n8 9\n''') == '3'\nassert solution('''\n6 8\n5 7\n1 5\n1 2\n4 5\n6 5\n8 9\n''') == 'impossible'\nassert solution('''\n2 2\n1 3\n4 4\n''') == 'impossible'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1 50\n50 70\n70 90\n''') == '3'\nassert solution('''3\n1 50\n50 70\n70 90\n''') == 'impossible'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"impossible\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"100 10\") == \"impossible\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n3\\n2 1\\n1 2\\n2 3\\n3 1\\n4 2\\n5 2\\n5 6\\n7 3\\n7 7\\n7 5\\n\") == \"3\"\nassert solution(\"8\\n1\\n2 2\\n4 5\\n4 6\\n5 7\\n7 3\\n7 3\\n7 5\\n\") == \"impossible\"\nassert solution(\"4\\n1 3\\n3 2\\n2 2\\n5 5\\n5 5\\n\") == \"impossible\""
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'impossible'\nprint('PASSED')\n\"\"\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 3') == '3'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '3'\n\nassert solution('5 2\\n8 3\\n5 7') == 'impossible'"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'impossible'\nprint(solution(__import__('sys').stdin.read()))\n\"\"\""
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"12\") == \"12\"\nassert solution(\"121\") == \"21\"\nassert solution(\"1120\") == \"21\"\nassert solution(\"12021\") == \"21\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\"\nprint(\"Congratulations! Your submission is CORRECT!\")"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3!''') == '6'\nassert solution('''1234567890!''') == '97983674453617'\nassert solution('''1000000000000000000!''') == '999999999999999999999'\nassert solution('''10000000000000000000!''') == '999999999999999999999999'\nassert solution
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\""
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 1 2\n''') == '45'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 1 2\n''') == '45'\nassert solution('''\n3 3 3\n''') == '10'\n'''\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == '45'\nassert solution('10 1 2') == '10'\nprint(solution(input()))\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == \"12\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2\") == \"45\"\nassert solution(\"10 1 2\") == \"10\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 1 3\") == \"45\"\nassert solution(\"10 1 2\") == \"10\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 1 2\n''') == '45'\nassert solution('''\n10 1 2\n''') == '45'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '18'\nassert solution('10') == '20'\nassert solution('3') == 'impossible'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\\n\") == \"20\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n10\n\"\"\") == \"18\"\nassert solution(\"\"\"\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n\"\"\") == \"20\"\nassert solution(\"\"\"\n3\n10\n1 2\n2 3\n5\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\\n') == '18'\nassert solution('1\\n1 1\\n2 2\\n10 10\\n') == 'impossible'\n\nThe first test case has 3 citizens living at positions (3, 1), (4, 1), (5, 9), and (2, 6) at an intersection of size 10. At this intersection there are no other people, so the smallest distance they need to travel is 10.\n\nThe second test case has 5 citizens living at positions (3, 1), (4, 1), (5, 9), (2, 6), and (5, 3) at an intersection of size 10. If we were to use the first method, this would be impossible.\n\n\"\"\""
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"impossible\"\nprint(solution())\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'impossible'\nassert solution([5]) == 'impossible'\nassert solution([5,3]) == '18'\nassert solution([5,3,4]) == '20'\nassert solution([5,3,4,6]) == '18'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'impossible'\nassert solution('2\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10') == '18'"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\\n') == '20'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n1\\n') == 'impossible'\nprint('all tests passed')"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('10') == 'impossible'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == 'impossible'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n5') == '18'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10') == '20'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\\n') == 'impossible'"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3\\n-1 -1 -1\\n5 5 5\\n10 10 10\"\n) == \"11\"\nassert solution(\n    \"2\\n1 5 10\\n7 8 2\"\n) == \"3\""
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 5 10\\n7 8 2\\n\") == \"3\"\nassert solution(\"3\\n-1 -1 -1\\n5 5 5\\n10 10 10\\n\") == \"11\"\nassert solution(\"\") == \"\"\nassert solution(\"1\\n-1 -1 -1\\n5 5 5\\n10 10 10\\n\") == \"\"\nassert solution(\"4\\n-1 -1 -1\\n5 5 5\\n10 10 10\\n\") == \"\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '2\\n1 5 10\\n7 8 2\\n') == '3'\nprint('Solution = Ok')\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 5 10\\n7 8 2\") == \"3\"\nassert solution(\"3\\n-1 -1 -1\\n5 5 5\\n10 10 10\") == \"11\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '11'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n1 5 10\\n7 8 2') == '3'\nassert solution('3\\n-1 -1 -1\\n5 5 5\\n10 10 10') == '11'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '11'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n1 5 10\n7 8 2\n''') == '3'\nprint('PASSED')\n\"\"\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n1 5 10\n7 8 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n-1 -1 -1\n5 5 5\n10 10 10\n\"\"\") == \"11\"\n\n'''"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '6'\n'''\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 2') == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1\n110\n011\nSample Input 2:\n4 2\n1000\n1000\n0000\n0010\nSample Output 2:\n0\n''') == '2','solution'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n2 1\n11\n00\nSample Input 3:\n6 5\n1 0 1 0 0 0\n1 1 1 1 1 1\nSample Output 3:\n0\n\"\"\"\n) == \"0\""
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"10 1\") == \"0\""
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"1000 1000\") == \"0\""
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == '2'\nassert solution(\"4 2\") == '0'\nassert solution(\"100000 3\") == '0'\nassert solution(\"100000000 1\") == '10000000000'\nassert solution(\"2 2\") == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 1\n110\n011\nSample Input 3:\n6 2\n10000\n10100\n10000\n10100\n10000\n10100\n10000\nSample Output 3:\n0\n''') == '0'\nassert solution('''4 2\n100\n001\n001\n100\n''') == '1'\nassert solution('''5 2\n10001\n110100\n100001\n110000\n110001\n''') == '6'\nassert solution('''6 2\n1111\n1111\n1111\n1111\n1111\n''') == '0'\nassert solution('''7 2\n1111\n111\n11\n11\n11\n11\n11\n11\n''') == '2'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n11\\n') == '2'\nassert solution('2\\n10\\n') == '1'\nassert solution('3\\n110\\n0111\\n1111\\n10010\\n') == '5'\nassert solution('4\\n1000\\n1000\\n0000\\n0010\\n') == '0'\nprint('\"Run\" is good. Great job!')\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 1\n110\n011\n''') == '2'\nassert solution('''4 2\n1000\n1000\n0000\n0010\n''') == '0'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 2 3\n3\n2\n''') == '1'\nassert solution('''\n3\n1 3 2\n2\n''') == '5'\nprint('all test cases passed')"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\\n3\\n2\") == \"1\\n5\\n\"\n\nassert solution(\"3\\n1 2 3\\n3\\n2\") == \"1\\n1\\n\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2 3\n3\n2''') == '1'\nassert solution('''3\n1 3 2\n2\n3''') == '5'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n1 2 3\n3\n''') == '1'\nassert solution('''\n3\n1 2 3\n3\n''') == '5'\nassert solution('''\n3\n1 2 3\n2\n''') == '0'\nassert solution('''\n3\n1 3 2\n2\n''') == '1'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3\\n3\\n') == '1'\nassert solution('3\\n1 2 3\\n3\\n') == '5'"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"3\") == \"1\""
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\\n3\\n2\") == \"1\"\n\nassert solution(\"3\\n1 3 2\\n2\") == \"5\"\n\nassert solution(\"3\\n1 3 2\\n2\") == \"1\""
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\n'''\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\nassert solution('3 3 3') == '6'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '1 2 3\\n' +\n    '4 5 6\\n' +\n    '7 8 9'\n) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 100 20\") == \"0\"\nassert solution(\"10 10 1\") == \"19\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == '0'"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 100 20\\n\") == \"0\"\nassert solution(\"10 10 1\\n\") == \"19\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 100 20') == \"0\"\nassert solution('10 10 1') == \"19\""
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\na b c d\\n\\na 1\\nimport d, b, c\\n\\nb 2\\nimport d\\n\\nc 1\\nimport c\\n\\nd 0\\n\") == \"c\"\nassert solution(\"5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n\") == \"SHIP IT\"\nassert solution(\"1000\\n1,1,1\\n1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d') == 'c'\nassert solution('4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport c\\nc 1\\nimport c') == 'a'\nassert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe') == 'SHIP IT'\n\n'''\n\nimport sys\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == \"SHIP IT\"\n\nassert solution('''\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == \"classc\"\n\nassert solution('''\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == \"classa\"\n\nassert solution('''\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == \"classb\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nc 1\\nimport c\") == \"c\"\nassert solution(\"5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe\\nlibe 0\\n\") == \"classb\""
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n''') == 'SHIP IT', 'First'\n\nassert solution('''\n5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nlibe 0\n''') == 'SHIP IT', 'Second'"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n''') == 'SHIP IT'\n\nassert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'\n\nassert solution('''3\na b c\na 1\nimport c\nimport b, a\nimport b\nc 1\n''') == 'SHIP IT'\n\nassert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'\n\nassert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n\"\"\") == \"SHIP IT\"\nassert solution(\"\"\"\n4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n\"\"\") == \"SHIP IT\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n''') == 'SHIP IT'\n\nassert solution('''\n5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'\n\nassert solution('''\n7\na b c d e f g h\na 1\nimport e\nimport f\nimport g\nimport h\ng 2\nimport d\nimport e\nimport e\nimport g\nimport f\nf 1\nimport d\nimport e\nimport h\ne 2\nimport g\n''') == 'g, h'\n\nassert solution('''\n3\na b c\na 1\nimport c\nc 1\n''') == 'SHIP IT'\n\nassert solution('''\n3\na b c\na 1\nimport c\nc 2\n''') == 'a'"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d') == 'SHIP IT'\nassert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe') == 'SHIP IT'\nassert solution('7\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe\\nclassa 3\\nimport libe') == 'SHIP IT'\nassert solution('9\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe\\nclassa 3\\nimport libe') == 'SHIP IT'\nassert solution('12\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe\\nclassa 3\\nimport libe\\nclassa 4\\nimport libe') == 'SHIP IT'\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d') == 'c'\nassert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n') == 'SHIP IT'"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n\"\"\"\n\n\nclass Node:\n    def __init__(self, data):\n        self.left = None\n        self.right = None\n        self.data = data\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\nprint(\"Solution:\")\nprint(solution(input()))\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n\"\"\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3*x*(5+x)*(7-x)''') == '1'\nassert solution('''(-3+x)*((5+x)*(x+x))''') == '2'\nassert solution('''(5+x)*((7+x)*(x+x))''') == '4'\nassert solution('''2*x+x+x+x+x''') == '5'\nassert solution('''x+x+x+x+x''') == '5'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '5+3+x'\n) == '1'\nassert solution(\n    '9 10'\n) == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 10\\n0 15\\n5 20\") == \"yes\"\nassert solution(\"4 0\\n2 5\\n6 5\\n5 2\\n2 10\") == \"no\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 3\n0 15\n5 20\n''') == 'yes'\nassert solution('''\n10 6\n1 2\n2 3\n2 5\n3 4\n''') == 'no'\nprint('You passed all test cases.')\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 10\\n0 15\\n5 20') == 'yes'\nassert solution('2 10\\n1 15\\n0 20') == 'no'"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 10\n0 15\n5 20\n''') == 'yes'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 10') == 'yes'\nassert solution('2 10') == 'no'"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 10') == 'yes'\nassert solution('2 10') == 'no'\nassert solution('2 10') == 'no'"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 10\n0 15\n5 20\n''') == 'yes'\nassert solution('''\n2 10\n1 15\n0 20\n''') == 'no'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([2, 10, 0, 15, 5, 20]) == 'yes'\nassert solution([1, 10, 1, 15, 5, 20]) == 'no'\nassert solution([2, 10, 1, 15, 5, 20]) == 'yes'\nassert solution([2, 10, 1, 15, 5, 20]) == 'no'"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 10\\n0 15\\n5 20') == 'yes'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"yes\"\nassert solution(\"1 0\") == \"no\"\nassert solution(\"1 5\") == \"yes\"\nassert solution(\"2 10\") == \"yes\"\nassert solution(\"2 10 1\") == \"yes\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n') == '0.25'\nassert solution('4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\\n') == '0'\n\nstdin = '''3 3 3\n1\n2 green\n7 yellow\n11 red\n\n3\n4\n3\n1 green\n11 red\n12 red\n'''\nprint(solution(stdin))\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4 4') == '0.25'\nassert solution('4 4 4') == '0'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4 4') == '0.25'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n') == '0.25'\nassert solution('4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\\n') == '0'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4 4') == '0.25'\nassert solution('10 10 10') == '0'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 4 4\\n4\\n2 green\\n18 yellow\\n34 red\\n5 green\\n\") == \"0.25\"\nassert solution(\"3 1 5\\n2 red\\n0 yellow\\n3 blue\\n\") == \"0.25\"\nassert solution(\"10 11\\n1 2 3 4\\n0\\n4 5 6 7\\n1 2 3 4\\n5\\n\") == \"0.50\"\nassert solution(\"5 1 4\\n4\\n2 red\\n3\\n\") == \"0.25\"\nassert solution(\"1 2 3\\n4\\n5\\n6\\n\") == \"0.50\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 2') == '0.25'\nassert solution('2 2 2') == '0'\nassert solution('4 4 4') == '0.25'\nassert solution('4 4 4') == '0'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n''') == '0.25\n\nprint(solution('''\n4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n'''))"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n''') == '0.25'\nassert solution('''\n5 5 5\n5\n1 red\n7 yellow\n11 green\n2 yellow\n5 green\n''') == '1'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sample_input_1) == '0.25', f'actual: {solution(sample_input_1)}'\nassert solution(sample_input_2) == '0', f'actual: {solution(sample_input_2)}'\n\nimport json, sys\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 7\") == \"3\"\nassert solution(\"6 8\") == \"inf\"\nassert solution(\"6 9\") == \"inf\"\nassert solution(\"6 10\") == \"inf\"\nassert solution(\"6 11\") == \"inf\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == '3'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n''') == \"3\"\nassert solution('''6 8\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3\n''') == \"inf\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\nassert solution('6 7') == '3'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == '3'\nassert solution('6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == 'inf'\nassert solution('6 10\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == '3'\nassert solution('6 100\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == '3'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\") == \"3\"\nassert solution(\"6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\") == \"inf\"\nprint(\"all tests passed\")\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"3\"\nassert solution(\"7 9\") == \"inf\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n3 2\\n5 6\\n3 4\\n4 3\") == \"3\"\nassert solution(\"6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3\") == \"inf\"\nprint('all tests passed')\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == \"2\"\nassert solution(\"10 10\") == \"2\"\n\nimport itertools\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 7') == '3'\nassert solution('6 8') == 'inf'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4'\nassert solution('4 4') == '4'\nassert solution('12 3') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 4\"\n    \"1 2 3 4\"\n    ) == \"4\"\n\nassert solution(\n    \"12 3\"\n    \"2 3 4 5 6 7 4 7 8 8 12 12\"\n    ) == \"2\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 4\n1 2 3 4\n2 3 4 5 6 7 4 7 8 8 12 12''') == '4'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4') == '4'\nassert solution('12 3') == '2'\n\"\"\""
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4\n1 2 3 4\n''') == '4'\nassert solution('''\n10 3\n7 7 4 4 8 5 6 6 8 8 9 6 7 7 8\n''') == '9'\nprint('All tests passed.')\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"4 4\n1 2 3 4\n\"\"\") == \"4\"\nassert solution(\"\"\"12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n\"\"\") == \"2\"\nassert solution(\"\"\"8 9\n2 6 7 3 5 1 8 9\n1 2 6 9 7 3 5 1 8\n2 6 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 1 2\n2 6 7 3 5 1 8 9 7 3 5 1\n2 6 7 3 5 1 8 9 7 3 5 1\n2 6 7 3 5 1 8 9 7 3 5 1\n1 2 6 9 7 3 5 1 8 9 2 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5 1 8 9 1 2\n1 2 6 9 7 3 5"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == \"2\""
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"2 3 4 5 6 7 4 7 8 8 12 12\") == \"2\""
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 1\n1 3 4 5 6 7 8 9 10\n''') == '4'\nassert solution('''\n10 2\n1 2 3 4 5 6 7 8 9 10\n''') == '1'\nassert solution('''\n100 10\n1 3 4 5 6 7 8 9 10\n''') == '10'"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"4 3\") == \"3\"\nassert solution(\"6 4\") == \"4\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('3') == 'NO TYPOS'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\nhoose\nhose\nnose\nnoises\nnoise\n''') == 'noises'\nassert solution('''\n4\nhose\nhoose\noose\nmoose\n''') == 'hoose,moose'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\nhose\\nhoose\\noose\\nmoose\\n') == 'hoose,moose,noise'\nassert solution('5\\nhoose\\nhose\\nnose\\nnoises\\nnoise\\n') == 'hoose,noises,noise'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\nhoose\nhose\nnose\nnoises\nnoise''') == 'hoose\\nmoose\\nnoise\\n'\nassert solution('''3\nhose\nhoose\nnose''') == 'hoose\\n'\nassert solution('''1\nhoose''') == 'NO TYPOS\\n'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\nhoose\nhose\nnose\nnoises\nnoise\n''') == 'noise\\nmoose\\nhoose'\nassert solution('''4\nhose\nhoose\noose\nmoose\n''') == 'hoose\\nmoose\\nnoise'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\nhoose\nhose\nnose\nnoises\nnoise\n''') == 'noise'\n\nassert solution('''\n4\nhose\nhoose\noose\nmoose\n''') == 'hoose,moose'\n\nassert solution('''\n5\nhose\nhoose\noose\nnoises\nnoise\n''') == 'noise,hoose,noise,noises'\n\nassert solution('''\n4\nhose\nhoose\noose\nmoose\n''') == 'hoose,moose,noise'\n\nprint('All test cases passed!')\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == 'NO TYPOS'\nassert solution('4') == 'NO TYPOS'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\nhoose\\nhose\\nnoises\\nnoise\\n') == 'hoose\\nnoises\\nnoise\\n'\nassert solution('2\\nhoose\\nhose\\nnoises\\nnoise\\n') == 'hoose\\nnoise\\n'\n\n\"\"\"\n\nn = int(input())\ndict_ = set()\nfor i in range(n):\n    dict_.add(input())\n\nfor i in range(n):\n    s = input()\n    for j in range(len(s)):\n        new_s = s[:j] + s[j+1:]\n        if new_s in dict_:\n            print(s)\n            exit()\nprint(\"NO TYPOS\")\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\nhoose\\nhose\\nnose\\nnoises\\noise') == 'hoose\\nnose\\noise'\nassert solution('4\\nhose\\nhoose\\noose\\nmose') == 'hose\\nmoose'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\\\n1\nhoose\nhose\nnose\nnoises\nnoise\n''') == \"noise\"\n\nassert solution('''\\\n2\nhoose\nhose\nnose\nnoises\nnoise\n''') == \"noise\"\n\nassert solution('''\\\n3\nhoose\nhose\nnose\nnoises\nnoise\n''') == \"noise\"\n\nassert solution('''\\\n4\nhoose\nhose\nnose\nnoises\nnoise\n''') == \"noise\"\n\nassert solution('''\\\n5\nhoose\nhose\nnose\nnoises\nnoise\n''') == \"noise\""
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 3\") == \"5\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1\\n3') == '2'\nassert solution('2 3\\n4') == '0'\nassert solution('1 2\\n3') == '1'\nassert solution('2 3\\n5') == '16'\nassert solution('1 1\\n3') == '2'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '5'\nassert solution('4') == '0'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '5'"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '2'\nassert solution('3') == '2'\nassert solution('1 2') == '1'\nassert solution('2 3') == '5'"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1\\n3') == '2'\nassert solution('2 3\\n4') == '0'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 3\") == \"5\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '5'"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '5'\nassert solution('1 2') == '0'"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n3\n''') == '2 2 5'\nassert solution('''\n2 3\n4\n''') == '0 16 8'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0.8333333333333333'\nassert solution('2') == '68.52419365'\nassert solution('4') == '13.8974359'"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"44.72135955\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"44.72135955\"\n\nassert solution() == \"68.52419365\""
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n50 45 45\n''') == '44.72135955'\nassert solution('''\n1\n20 30 40\n''') == '72.21061425'\nprint('All test cases passed.')\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0.10000000000000001'\nassert solution('2') == '55.000000'"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n50 45 45\") == \"44.72135955\"\nassert solution(\"2\\n50 45 45\") == \"68.52419365\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1\\n3\\n2\\n'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3 1 5\") == \"1\\n3\\n2\"\nassert solution(\"3 4 2 3\") == \"1\\n3\\n2\\n0\""
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 3 1 5\n1 2\n\"\"\") == \"1\n\nassert solution(\"\"\"\n3 4 2 3\n1 3 1\n\"\"\") == \"0\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 5\\n1 2\\n\") == \"1\\n3\\n2\"\nassert solution(\"3 4 2 3\\n1 3 1\\n\") == \"1\\n3\\n2\\n\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '1'"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3 2 3\n1 3 1''') == '1'\n\nassert solution('''3 5 2 3\n1 3 1''') == '1 3'\n\nassert solution('''6 6 2 2\n1 3 1''') == '1 3'\n\nassert solution('''4 5 2 4\n1 3 2''') == '1 2'\n\nassert solution('''1 3 1\n2 3''') == '2'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 4 2 3\n1 3 1\n''') == '1'\nassert solution('''\n2 3 1 5\n1 2\n''') == '3'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3 3 1 5\n1 2\n\"\"\") == \"1\nassert solution(\n\"\"\"\n3 4 2 3\n1 3 1\n\"\"\") == \"2\nassert solution(\n\"\"\"\n4 4 2 4\n1 3 3\n\"\"\") == \"0\nassert solution(\n\"\"\"\n5 5 2 3 2\n1 3 2\n\"\"\") == \"0\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '2'"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '0'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 5\n1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 3\n2 2 3 2 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1\\n1 2\\n1 3') == '3'\nassert solution('2 5\\n1 1\\n2 2\\n3 3\\n4 4') == '2'\nassert solution('10 10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6') == '1'"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '3'\nassert solution('2 5') == '3'\nprint('Congratulations - your solution beats 20% of submissions')\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"5 3\") == \"2\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 5\n1 1\n''') == '3'\nassert solution('''\n5 3\n2 2 3 2 2\n''') == '2'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n1 1\") == \"3\"\nassert solution(\"5 3\\n2 2 3 2 2\") == \"2\""
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n10\n10 10 10 10 10 10 10 10 10 10\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 5\n1 1\n''') == '3'\nassert solution('''\n5 3\n2 2 3 2 2\n''') == '2'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n2 5\n1 1\nSample Input 3:\n5 3\n1 3 2 1\nSample Output 3:\n2\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2 3 2 2\") == \"3\""
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n100 100\\n50 50') == '50'\nassert solution('3\\n0 0 0 0\\n0 0 100\\n0 100 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0') == '25'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '50'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n100 100\\n50 50') == '50'\nassert solution('2\\n0 50\\n50 0') == '25'\nassert solution('2\\n100 100\\n0 50') == '25'\nassert solution('2\\n0 50\\n0 50') == '50'"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0 50\\n50 0\") == \"25\""
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0.5\"\nassert solution(\"2\") == \"0.25\"\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"25\""
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n100 100\\n50 50\\n\") == \"50\"\nprint(solution(\"2\\n0 50\\n50 0\\n\"))\n\"\"\""
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(t) == '25'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '50'\nassert solution('0 50') == '50'"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n100 100\\n50 50\\n') == '50'\nassert solution('5\\n10 20 50 20\\n20 10 5 20\\n') == '12.50'"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n100\n200''') == '160'\nassert solution('''3\n100\n200\n2010''') == '250'\nprint(solution(input()))"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"160\"\nprint(solution())"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n100\\n200\\n2010') == '250'\nassert solution('2\\n100\\n200') == '160'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n2\n4\n''') == '160'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n100\\n200') == '160'\nassert solution('3\\n100\\n200\\n2010') == '250'"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sample_input_1) == \"160\"\nassert solution(sample_input_2) == \"250\"\n\nassert solution(my_input) == \"393\""
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '160'\nassert solution('3') == '250'"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n100\n200\n2010\n\"\"\") == \"250\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n100\\n200') == '160'\nassert solution('3\\n100\\n200\\n2010') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == \"160\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\\n3\") == \"1\"\nassert solution(\"4\\n2\\n3\") == \"2\"\nassert solution(\"5\\n4\\n2\\n3\") == \"0\"\nassert solution(\"10\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"0\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 2\n0 1 1\n2 3 1\n2 3 1\n3 4 3\n4 0 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n\"\"\") == \"0\"\nprint('Tests passed')"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\\n') == '0'\nassert solution('1000000 1000000\\n1000000 1000000\\n1000000 1000000\\n1000000 1000000\\n1000000 1000000\\n') == '1000000'\nassert solution('3 4\\n1 2 1\\n3 2 3\\n3 2 3\\n3 2 3\\n') == '0'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2\\n0 1 1\\n2 3 1\\n') == '2'\nassert solution('5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\\n') == '0'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2\n0 1 1\n2 3 1\n''') == '2'\nassert solution('''\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n''') == '0'\nprint('All tests passed!')"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"4 3\") == \"0\""
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4 2\n0 1 1\n2 3 1\n2 3 1\n3 4 3\n4 0 3\"\"\") == \"2\"\nassert solution(\"\"\"5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\"\"\") == \"0\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n1\n2\n3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n0\n1\n2\n3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 3 4\") == \"4\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5') == '0'\nassert solution('10 7') == '1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n3 3 2\n''') == '1 1\n\nassert solution('''\n4 3\n3 3 2 1\n''') == '1 1\n\nassert solution('''\n4 2\n3 3 2 2\n''') == '-1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n2 2\n2 3 4\n\"\"\"\n) == \"\"\"\n1 1\n1 3 4\n\"\"\", \"\"\"\nSolution:\"\"\""
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1 1'\nassert solution([3, 3, 2, 1]) == '1 1'\nassert solution([3, 3, 3, 1]) == '1 2'\nassert solution([3, 3, 3, 2]) == '1 2'\nassert solution([3, 3, 3, 3]) == '1 2'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\n3 3 2 1\n3 3 3\n''') == '1 1'\n\nassert solution('''\n4 3\n3 3 2 1\n3 3 3\n''') == '1 1'\n\nassert solution('''\n1\n10\n''') == '-1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '1 1'\nassert solution('4 3') == '1 1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2 1\") == \"1 1\\n1 2\"\nassert solution(\"4 3\") == \"1 1\\n1 2\"\nassert solution(\"4 2\") == \"2 3\"\n\nassert solution(\"2 2\") == \"1 1\\n2 3\"\nassert solution(\"1 2\") == \"1 1\\n2 3\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == '1 1'\nassert solution('4 2') == '1 2'\n\nstdin = \"\"\"\n5 5\n1 2 3 4 5\n3 5 4 2 1\n3 5 5 4 3\n4 1 1 2 1\n3 4 5 5 3\n3 4 5 1 2\n\"\"\"\n\nassert solution(stdin) == \"\"\"2 1 2 1 2\"\"\"\nassert solution(stdin,'sample.txt') == \"\"\"2 1 2 1 2\"\"\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 3\n3 3 2 1\n3 3 3''') == '1 1\\n1 2\\n2 3 4'\nassert solution('''4 2\n3 3 2 2\n6 3''') == '-1'\nassert solution('''4 3\n3 3 2 1\n3 3 3\n5 3''') == '3 3\\n3 4\\n4 4\\n6 4'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3\\n2 3 2\\n3 3 3') == '2 1 3 4'\nassert solution('4 3\\n3 3 3\\n6 3') == '-1'\nassert solution('4 2\\n3 3 3\\n6 3') == '1 2 4'\nassert solution('10 10\\n4 4 4\\n3 3 3') == '2 2 7'\nassert solution('10 2\\n4 4 4\\n3 3 3') == '-1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n3 3 2\n3 3 3\n''') == '1 1\\n1 2\\n2 3 4\\n'''\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3 10\\n0 0 D\\n10 1 L\") == \"10.0\\n10.0\\n0.0\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"2 3 10\\n\"\n    \"0 0 D\\n\"\n    \"10 1 L\"\n) == \"10.0\\n10.0\\n0.0\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3 10\n0 0 D\n10 1 L''') == '10.0\\n10.0\\n0.0\\n'\n\nassert solution('''4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D''') == '10.0\\n4.0\\n1.0\\n'\n\nassert solution('''4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\n7 0 D\nSample Output 3:\n6.0\n4.0\n3.0\n''') == '6.0\\n4.0\\n3.0\\n'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 10\\n0 0 D\\n10 1 L') == '10.0\\n10.0\\n0.0'\nassert solution('4 3 7\\n1 0 D\\n3 0 D\\n4 1 L\\n6 2 D') == '10.0\\n4.0\\n1.0'"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 10\") == \"10.0\"\nassert solution(\"4 3 7\") == \"10.0\""
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 10\\n0 0 D\\n10 1 L\\n') == '10.0\\n10.0\\n0.0\\n'\nprint(solution('''4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D'''))\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3 10\n0 0 D\n10 1 L\n''') == '10.0\\n10.0\\n0.0\\n'\nassert solution('''4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\n''') == '10.0\\n4.0\\n1.0\\n'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 10') == '10.0'\nassert solution('4 3 7') == '10.0'"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\n''') == '10.0\\n4.0\\n1.0\\n'''\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'\nassert solution('x jkl') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"Impossible\"\nassert solution(\"be  our  rum   will  dead  hook  ship  blood  sable  avenge  parrot  captain\") == \"we will avenge our dead parrot arr\"\n\nSample Input 3:\nx zzz\n\nSample Output 3:\nx zzz\n\n'''"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'\nassert solution('wl') == 'Impossible'\nassert solution(' ') == 'Impossible'\nassert solution('') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\n\nassert solution(\"wl jkd\") == \"Impossible\""
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''xlxn dslk\naegkse ggs cgl\nlklhg\nkfguk\nugxaxh kf\nghxj\nhfjb\nfdxm\nffslf\n''') == 'we will avenge our dead parrot arr'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"Impossible\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\nprint(solution(input()))\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''ex eoii jpxbmx cvz uxju sjzzcn jzz''') == 'we will avenge our dead parrot arr'\nassert solution('''wl jkd''') == 'Impossible'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == \"IMPOSSIBLE\"\nprint(solution(sys.stdin.read()))\n\"\"\"\n\nfrom math import *"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''Hamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n''') == '68.3'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n''') == '68.3'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"Hamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"68.3\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('Hamburg Bremen') == \"68.3\"\nassert solution('Amsterdam Rotterdam') == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    Hamburg Bremen\n    3\n    Hamburg Bremen 15 68 10 5\n    Hamburg Bremen 46 55 50 60\n    Bremen Frankfurt 14 226 10 120\n    ''') == '68.3'\n''')\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''Hamburg Bremen\n1\nHamburg Bremen 15\nHamburg Bremen 46\nBremen Frankfurt\n1\nBremen Frankfurt 14\nBremen Frankfurt 20\nBremen Frankfurt 46\nBremen Frankfurt 52\nBremen Frankfurt 55\nBremen Frankfurt 98\nBremen Frankfurt 102\nBremen Frankfurt 107\nBremen Frankfurt 110\nBremen Frankfurt 115\nBremen Frankfurt 130\nBremen Frankfurt 140\nBremen Frankfurt 145\nBremen Frankfurt 146\nBremen Frankfurt 152\nBremen Frankfurt 156\nBremen Frankfurt 161\nBremen Frankfurt 170\nBremen Frankfurt 179\nBremen Frankfurt 191\nBremen Frankfurt 195\nBremen Frankfurt 210\nBremen Frankfurt 211\nBremen Frankfurt 213\nBremen Frankfurt 224\nBremen Frankfurt 225\nBremen Frankfurt 254\nBremen Frankfurt 261\nBremen Frankfurt 265\nBremen Frankfurt 273\nBremen Frankfurt 279\nBremen Frankfurt 286\nBremen Frankfurt 291\nBremen Frankfurt 296\nBremen Frankfurt 304\nBremen Frankfurt 308\nBremen Frankfurt 310\nBremen Frankfurt 312\nBremen Frankfurt 316\nBremen Frankfurt 323\nBremen Frankfurt 325\nBremen Frankfurt 328\nBremen Frankfurt 331\nBremen Frankfurt 336\nBremen Frankfurt 338\nBremen Frankfurt 340\nBremen Frankfurt 343\nBremen Frankfurt 344\nBremen Frankfurt 347\nBremen Frankfurt 348\nBremen Frankfurt 354\nBremen Frankfurt 356\nBremen Frankfurt 358\nBremen Frankfurt 361\nBremen Frankfurt 362\nBremen Frankfurt 364\nBremen Frankfurt 365\nBremen Frankfurt 367\nBremen Frankfurt 370\nBremen Frankfurt 371\nBremen Frankfurt 375\nBremen Frankfurt 376\nBremen Frankfurt 377\nBremen Frankfurt 380\nBremen Frankfurt 381\nBremen Frankfurt 383\nBremen Frankfurt 385\nBremen Frankfurt 386\nBremen Frankfurt 388\nBremen Frankfurt 389\nBremen Frankfurt 393\nBremen Frankfurt 396\nBremen Frankfurt 400\nBremen Frankfurt 401\nBremen Frankfurt 402\nBremen Frankfurt 404\nBremen Frankfurt 405\nBremen Frankfurt 406\nBremen Frankfurt 407\nBremen Frankfurt 408\nBremen Frankfurt 410\nBremen Frankfurt 411\nBremen Frankfurt 412\nBremen Frankfurt 413\nBremen Frankfurt 414\nBremen Frankfurt 415\nBremen Frankfurt 416\nBremen Frankfurt 419\nBremen Frankfurt 420\nBremen Frankfurt 422\nBremen Frankfurt 423\nBremen Frankfurt 424\nBremen Frankfurt 425\nBremen Frankfurt 426\nBremen Frankfurt 428\nBremen Frankfurt 429\nBremen Frankfurt 430\nBremen Frankfurt 431\nBremen Frankfurt 432\nBremen Frankfurt 434\nBremen Frankfurt 441\nBremen Frankfurt 444\nBremen Frankfurt 445\nBremen Frankfurt 446\nBremen Frankfurt 447\nBremen Frankfurt 449\nBremen Frankfurt 450\nBremen Frankfurt 451\nBremen Frankfurt 452\nBremen Frankfurt 454\nBremen Frankfurt 456\nBremen Frankfurt 461\nBremen Frankfurt 465\nBremen Frankfurt 466\nBremen Frankfurt 467\nBremen Frankfurt 469\nBremen Frankfurt 470\nBremen Frankfurt 471\nBremen Frankfurt 472\nBremen Frankfurt 473\nBremen Frankfurt 474\nBremen Frankfurt 475\nBremen Frankfurt 477\nBremen Frankfurt 478\nBremen Frankfurt 479\nBremen Frankfurt 480\nBremen Frankfurt 481\nBremen Frankfurt 482\nBremen Frankfurt 484\nBremen Frankfurt 485\nBremen Frankfurt 486\nBremen Frankfurt 487\nBremen Frankfurt 488\nBremen Frankfurt 489\nBremen Frankfurt 490\nBremen Frankfurt 491\nBremen Frankfurt 492\nBremen Frankfurt 493\nBremen Frankfurt 494\nBremen Frankfurt 495\nBremen Frankfurt 496\nBremen Frankfurt 497\nBremen Frankfurt 498\nBremen Frankfurt 499\nBremen Frankfurt 500\nBremen Frankfurt 501\nBremen Frankfurt 502\nBremen Frankfurt 504\nBremen Frankfurt 505\nBremen Frankfurt 506\nBremen Frankfurt 507\nBremen Frankfurt 508\nBremen Frankfurt 509\nBremen Frankfurt 510\nBremen Frankfurt 511\nBremen Frankfurt 512\nBremen Frankfurt 513\nBremen Frankfurt 514\nBremen Frankfurt 515\nBremen Frankfurt 516\nBremen Frankfurt 517\nBremen Frankfurt 518\nBremen Frankfurt 519\nBremen Frankfurt 520\nBremen Frankfurt 521\nBremen Frankfurt 522\nBremen Frankfurt 523\nBremen Frankfurt 524\nBremen Frankfurt 525\nBremen Frankfurt 526\nBremen Frankfurt 527\nBremen Frankfurt 528\nBremen Frankfurt 529\nBremen Frankfurt 530\nBremen Frankfurt 531\nBremen Frankfurt 532\nBremen Frankfurt 533\nBremen Frankfurt 534\nBremen Frankfurt 535\nBremen Frankfurt 536\nBremen Frankfurt 537\nBremen Frankfurt 538\nBremen Frankfurt 539\nBremen Frankfurt 540\nBremen Frankfurt 541\nBremen Frankfurt 542\nBremen Frankfurt 543\nBremen Frankfurt 544\nBremen Frankfurt 545\nBremen Frankfurt 546\nBremen Frankfurt 547\nBremen Frankfurt 548\nBremen Frankfurt 549\nBremen Frankfurt 550\nBremen Frankfurt 551\nBrem"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '''\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n'''\n) == '68.3'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\nFrankfurt Nordrhein\n2\nFrankfurt Nordrhein 15 23 5 10\nFrankfurt Nordrhein 16 59 5 10\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\nRotterdam North\n3\nRotterdam North 1 24 1 1\nRotterdam North 2 35 1 1\nRotterdam North 2 38 1 1\nRotterdam North 2 41 1 1\nRotterdam North 2 44 1 1\nRotterdam North 2 46 1 1\nRotterdam North 2 50 1 1\nRotterdam North 2 53 1 1\nRotterdam North 2 56 1 1\nRotterdam North 2 59 1 1\nRotterdam North 2 62 1 1\nRotterdam North 2 65 1 1\nRotterdam North 2 68 1 1\nRotterdam North 2 71 1 1\nRotterdam North 2 74 1 1\nRotterdam North 2 77 1 1\nRotterdam North 2 80 1 1\nRotterdam North 2 83 1 1\nRotterdam North 2 86 1 1\nRotterdam North 2 89 1 1\nRotterdam North 2 92 1 1\nRotterdam North 2 95 1 1\nRotterdam North 2 98 1 1\nRotterdam North 2 101 1 1\nRotterdam North 2 104 1 1\nRotterdam North 2 107 1 1\nRotterdam North 2 110 1 1\nRotterdam North 2 113 1 1\nRotterdam North 2 116 1 1\nRotterdam North 2 119 1 1\nRotterdam North 2 122 1 1\nRotterdam North 2 125 1 1\nRotterdam North 2 128 1 1\nRotterdam North 2 130 1 1\nRotterdam North 2 133 1 1\nRotterdam North 2 136 1 1\nRotterdam North 2 139 1 1\nRotterdam North 2 142 1 1\nRotterdam North 2 145 1 1\nRotterdam North 2 148 1 1\nRotterdam North 2 151 1 1\nRotterdam North 2 154 1 1\nRotterdam North 2 157 1 1\nRotterdam North 2 160 1 1\nRotterdam North 2 163 1 1\nRotterdam North 2 166 1 1\nRotterdam North 2 169 1 1\nRotterdam North 2 172 1 1\nRotterdam North 2 175 1 1\nRotterdam North 2 178 1 1\nRotterdam North 2 181 1 1\nRotterdam North 2 184 1 1\nRotterdam North 2 187 1 1\nRotterdam North 2 190 1 1\nRotterdam North 2 193 1 1\nRotterdam North 2 196 1 1\nRotterdam North 2 199 1 1\nRotterdam North 2 202 1 1\nRotterdam North 2 205 1 1\nRotterdam North 2 208 1 1\nRotterdam North 2 211 1 1\nRotterdam North 2 214 1 1\nRotterdam North 2 217 1 1\nRotterdam North 2 220 1 1\nRotterdam North 2 223 1 1\nRotterdam North 2 226 1 1\nRotterdam North 2 229 1 1\nRotterdam North 2 232 1 1\nRotterdam North 2 235 1 1\nRotterdam North 2 238 1 1\nRotterdam North 2 241 1 1\nRotterdam North 2 244 1 1\nRotterdam North 2 247 1 1\nRotterdam North 2 250 1 1\nRotterdam North 2 253 1 1\nRotterdam North 2 256 1 1\nRotterdam North 2 259 1 1\nRotterdam North 2 262 1 1\nRotterdam North 2 265 1 1\nRotterdam North 2 268 1 1\nRotterdam North 2 271 1 1\nRotterdam North 2 274 1 1\nRotterdam North 2 277 1 1\nRotterdam North 2 280 1 1\nRotterdam North 2 283 1 1\nRotterdam North 2 286 1 1\nRotterdam North 2 289 1 1\nRotterdam North 2 292 1 1\nRotterdam North 2 295 1 1\nRotterdam North 2 298 1 1\nRotterdam North 2 301 1 1\nRotterdam North 2 304 1 1\nRotterdam North 2 307 1 1\nRotterdam North 2 310 1 1\nRotterdam North 2 313 1 1\nRotterdam North 2 316 1 1\nRotterdam North 2 319 1 1\nRotterdam North 2 322 1 1\nRotterdam North 2 325 1 1\nRotterdam North 2 328 1 1\nRotterdam North 2 331 1 1\nRotterdam North 2 334 1 1\nRotterdam North 2 337 1 1\nRotterdam North 2 340 1 1\nRotterdam North 2 343 1 1\nRotterdam North 2 346 1 1\nRotterdam North 2 349 1 1\nRotterdam North 2 352 1 1\nRotterdam North 2 355 1 1\nRotterdam North 2 358 1 1\nRotterdam North 2 361 1 1\nRotterdam North 2 364 1 1\nRotterdam North 2 367 1 1\nRotterdam North 2 370 1 1\nRotterdam North 2 373 1 1\nRotterdam North 2 376 1 1\nRotterdam North 2 379 1 1\nRotterdam North 2 382 1 1\nRotterdam North 2 385 1 1\nRotterdam North 2 388 1 1\nRotterdam North 2 391 1 1\nRotterdam North 2 394 1 1\nRotterdam North 2 397 1 1\nRotterdam North 2 400 1 1\nRotterdam North 2 403 1 1\nRotterdam North 2 406 1 1\nRotterdam North 2 409 1 1\nRotterdam North 2 412 1 1\nRotterdam North 2 415 1 1\nRotterdam North 2 418 1 1\nRotterdam North 2 421 1 1\nRotterdam North 2 424 1 1\nRotterdam North 2 427 1 1\nRotterdam North 2 430 1 1\nRotterdam North 2 433 1 1\nRotterdam North 2 436 1 1\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n''') == '68.3'\nassert solution('''\nUtrecht Amsterdam\n1\nUtrecht Utrecht 10 22 5 10\n''') == 'IMPOSSIBLE'\nprint('Part 1: ', end='')\nprint('Time Taken: %.10fms' % (solution_timer(solution, 'AoC2020_1_day.txt') * 1000))\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"4\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*\") == \"3\"\nassert solution(\"2\\n*.*\\n...|\\n*.*\\n\") == \"4\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n''') == '3'\nassert solution('''\n*.*\n*.*\n*.*\n*.*\n''') == '4'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"2\\n*-*\\n|.|\\n*.*-*\") == \"2\"\nassert solution(\"2\\n*-*\\n|.|\\n*.*-*\\n|*.*\\n*.*-*\") == \"3\"\nassert solution(\"2\\n*-*\\n|.|\\n*.*-*\\n|*.*\\n*.*-*\\n*.*-*\") == \"4\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '4'\nassert solution('100') == '101'"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('10') == '4'\nassert solution('10') == '6'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n*.\\n|.|') == '4'\nassert solution('2\\n*-*.\\n|.|.|') == '3'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*''') == '3'\nassert solution('''*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*''') == '4'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n*-*.*\n|.|.|\n*.*-*\n|.|.|\n*.*.*\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n*.*\n...\n*.*\n\"\"\") == \"3\""
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '3'\nassert solution('4') == '4'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '4'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8') == '4'\nassert solution('4') == 'impossible'\nassert solution('12210020') == '4'\nassert solution('1111') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8') == '4'\nassert solution('4') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8') == '4'\nassert solution('4') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n12210020\n''') == 'impossible'\nassert solution('''\n8\n12210020\n''') == '4'\nassert solution('''\n5\n1111\n''') == 'impossible'\nassert solution('''\n5\n0\n''') == '1'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n12210020\nSample Input 3:\n8\n12210020\nSample Output 3:\nimpossible\n\n''') == '4'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '4'\nassert solution('1\\n21\\n122\\n12') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8') == '4'\nassert solution('12') == 'impossible'\nassert solution('1111') == 'impossible'"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(s) == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_string) == \"4\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(open(\"sample_input_01.txt\").read()) == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\\n\""
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n500 500 499\\n0 0 999\\n1000 1000 200\\n') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)'\nassert solution('4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\\n') == 'Bill will be bitten.'"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n500 500 499\n0 0 999\n1000 1000 200\n''') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution('''4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\n''') == 'Bill will be bitten.'\nassert solution('''5\n500 500 499\n0 0 999\n1000 1000 200\n500 500 500\n0 0 999\n1000 1000 200\n500 500 500\n0 0 999\n1000 1000 200\n500 500 500\n0 0 999\n1000 1000 200\n500 500 500\n0 0 999\n1000 1000 200\n''') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n10 10\n30 30 30\n20 20 20\n0 0 0\n10 10 10\n''') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\\n'"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution('4') == 'Bill will be bitten.'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\nassert solution(\"4\") == \"Bill will be bitten.\""
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n500 500 499\\n0 0 999\\n1000 1000 200') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)'\nassert solution('4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300') == 'Bill will be bitten.'"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n500 500 499\n0 0 999\n1000 1000 200\nSample Input 3:\n10\n100 100 150\n150 150 200\n100 100 175\n150 150 200\n100 100 190\n150 150 200\n100 100 200\n150 150 200\n100 100 250\n150 150 200\n100 100 300\n150 150 200\n100 100 350\n150 150 200\n100 100 400\n150 150 200\nSample Output 3:\nBill enters at (100.00, 100.00) and leaves at (150.00, 150.00).\n\nSample Input 4:\n10\n100 100 150\n150 150 200\n100 100 175\n150 150 200\n100 100 190\n150 150 200\n100 100 200\n150 150 200\n100 100 250\n150 150 200\n100 100 300\n150 150 200\n100 100 350\n150 150 200\nSample Output 4:\nBill will be bitten."
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\\n\"\nassert solution(\"4\") == \"Bill will be bitten.\\n\""
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n500 500 499\n0 0 999\n1000 1000 200\nSample Output 1:\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\n\nSample Input 2:\n4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\nSample Output 2:\nBill will be bitten.\n\"\"\") == \"\"\"\n0.00, 800.00\n\"\"\".strip()\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8 3\n++xx+x++''') == '++xx+o++'\n\nassert solution('''8 3\n++xx''') == 'xx++'\n\nassert solution('''8 3\n--xx-''') == '--x+x'\n\nassert solution('''8 3\n+++xx''') == '+++x++'\n\nassert solution('''8 3\n--xx-''') == '--x+x'"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8 3\n++xx+x++''') == '++xx+o++'\nassert solution('''8 3\n++xx+x++''') == 'xxoooooo'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    2 3\n    +x+\n    \"\"\") == \"++oo+\"\nassert solution(\n    \"\"\"\n    3 3\n    +x+\n    \"\"\") == \"++oo++\"\nassert solution(\n    \"\"\"\n    1 5\n    +x+\n    \"\"\") == \"++ox+\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([8, 3, '+x+x+']) == ['++xo++', '++x+o++', '++x+o+o++', '++x+oo+o++', '++x+oo+oo++', '++x+oo+oo+o++', '++x+o+oo+oo++', '++x+o+oo+oo+o++']\nassert solution([8, 3, 'xx+x+x']) == ['xxo++', 'xx+x+o++', 'xx+x+o+o++', 'xx+x+oo+o++', 'xx+x+oo+oo++', 'xx+x+oo+oo+o++', 'xx+x+o+oo+oo++', 'xx+x+o+oo+oo+o++']\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n10 3\n++xx++\n\"\"\") == \"\"\"++xx++\"\"\", solution.__doc__\n\"\"\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"8 3\") == \"++xx+o++\"\nassert solution(\"8 3\") == \"xxoooooo\"\n\"\"\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6 5\n++x+x++\n++x+x++\n++x+x++\n++x+x++\n++x+x++\n++x+x++''') == '++x+o++'\nassert solution('''6 5\n++x++\n++x++\n++x++\n++x++\n++x++\n++x++''') == '++x+o++'\nassert solution('''6 5\n++x+x++\n++x+x++\n++x+x++\n++x+x++\n++x+x++\n++x+x++''') == '++x+x++'\nassert solution('''6 5\n+x+x++\n++x+x++\n++x+x++\n++x+x++\n++x+x++\n++x+x++''') == '++x+x++'\nassert solution('''6 5\n++x+x++\n+x+x++\n++x+x++\n++x+x++\n++x+x++\n++x+x++''') == '++x+x++'\n\nimport sys\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8 3\") == \"++xx+x++\"\nassert solution(\"8 3\") == \"xxoooooo\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 3\\n++xx+x++') == '++xx+o++'\nassert solution('8 3\\nxxxxxxxx') == 'xxoooooo'\nassert solution('5 3\\nxxooo++') == 'xxooxxxo'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(8, 3, '++xx+x++') == '++xx+o++'\nassert solution(8, 3, 'xxx+xx+xx') == 'xxooo+'\nassert solution(8, 3, 'xx+o+x') == 'xxoo+oo'\nassert solution(8, 3, 'x+xx+o+o') == 'xoooxxoo'\nassert solution(8, 3, 'x+xx+o+o') == 'xoooxxoo'\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\" he said.\") == \"clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\nit: is\\nclock: clock\\ntill: will\\nwhen: hen\\ntill: will\\nthen: than\\ntill: will\\n\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n    The fox said, \"When?\"\n    \"Not till 12 o'clock\", replied the hen.\n    \"That clock is stopped, it will never strike.\", he said.\n\"\"\") == \"\"\"\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n\"\"\".strip()\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n\"The fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\"\n\"\"\") == \"\"\"\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n\"\"\":\n    \"\"\""
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('The fox said, \"When?\"\\n\"Not till 12 o'clock\", replied the hen.\\n\"That clock is stopped, it will never strike.\", he said.\\n') == \"\"\"clock: oclock\nhe: hen the\nhe when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n***\n\"\"\") == \"\"\"close: lose\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n''') == 'clock: oclock\\the: hen the\\ten: hen when\\till: will\\tin: is\\the: he\\tit: is\\tnot: till\\tthat: clock\\tstrike: clock\\tstop: clock\\the: hen'\n\n\n-----Hint 1-----\nThe problem is to determine whether a word has an upper case character in the word core, or an upper case character in one of its adjacent characters.\n\nTry to do it in a way that doesn't involve checking a character type in each iteration of the loop.\n\nThe only way to do it efficiently in the above solution is to use a state machine. Try to implement a similar idea for a different solution.\n\n\"\"\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nlost is close to lose\n\n\"Better Documents Inc. wants to add Typo Checking in to the\nnext generation of word processors,\" he said.\n***\n''') == 'close: lose\\nhe: the\\nin: inc is\\ninc: in\\nis: in\\nlose: close lost\\nlost: lose\\ntill: will\\nwhen: hen\\nwill: till\\nclock: oclock\\nhe: hen\\nthat clock is stopped, it will never strike.'''\n\nassert solution('''\nthe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n***\n''') == 'clock: oclock\\ntill: will\\nwhen: hen\\ntill: will\\nthat clock is stopped, it will never strike.'''"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nlost is close to lose\n''') == 'close: lose\nhe: the\nin: inc is\ninc: in\nis: in\nlose: close lost\nlost: lose\nthe: he\n\nSample Input 3:\nI am what the fox said\nI was there\nI was the hen\n***\nSample Output 3:\nfox: what was\nI: am\nam: what\nhen: was\nwhat: was hen\nfox: was hen\nthere: he\n\nSample Input 4:\nHe said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n***\nSample Output 4:\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('Lost is Close to Lose') == 'close: lose\\the: hen\\tin: inc\\tis: in\\tis: in\\tclose: lost\\tclose: lose\\tclock: oclock\\tclose: clock\\tclock: oclock\\the: hen\\ttill: will\\tclock: clock\\ttill: clock\\tin: inc\\ttill: will\\tclock: clock\\tclock: oclock\\ttill: clock\\tclock: oclock\\tclock: clock\\tclock: oclock\\tclock: clock\\ttill: clock\\ttill: clock\\ttill: clock\\tclock: clock\\tclock: clock\\tclock: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill: clock\\ttill:"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n''') == '''\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n'''\n\nassert solution('''\nlost is close to lose\n''') == '''\nclose: lose\nlost: close\n'''\n\nassert solution('''\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n''') == '''\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n'''\n\nassert solution('''\nlost is close to lose\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n''') == '''\nclose: lose\nlost: close\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose\nlost: lose"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 2 7 3 8 9 4 5 10 6\") == \"1\"\nassert solution(\"10\\n3 8 1 9 4 5 2 7 10 6\") == \"2\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 7 3 8 9 4 5 10 6\\n') == '1'\nassert solution('10\\n1 2 7 3 8 9 4 5 10 6\\n') == '1'\nassert solution('100\\n1 2 3 4 5 6 7 8 9 10\\n') == '1'\nassert solution('1000\\n1 2 3 4 5 6 7 8 9 10\\n') == '1'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4 3 2 8 1\") == \"2\"\nassert solution(\"4 5 1 3 2 8\") == \"3\"\nassert solution(\"8 5 4 1 3 2 9\") == \"2\"\n\"\"\"\nfrom itertools import permutations, combinations, product, accumulate"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('2 2') == '1'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '1'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10\\n1 2 7 3 8 9 4 5 10 6') == '1'\nassert solution('10\\n3 8 1 9 4 5 2 7 10 6') == '2'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_value_1) == '1'\nassert solution(input_value_2) == '2'\n\nprint(solution(input_value_1))\nprint(solution(input_value_2))\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1\"\nassert solution(\"10\\n1 2 7 3 8 9 4 5 10 6\") == \"1\"\nassert solution(\"10\\n3 8 1 9 4 5 2 7 10 6\") == \"2\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('\\n'.join(['10', '1 2 7 3 8 9 4 5 10 6'])) == '1'\nassert solution('\\n'.join(['100', '1 2 3 4 5 6 7 8 9 10'])) == '10'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '1'\nassert solution('''\n4\n1 2 3 4\n''') == '1'\nassert solution('''\n5\n1 2 3 4 5\n''') == '1'\nassert solution('''\n6\n1 2 3 4 5 6\n''') == '1'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '2'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10\\n1 2 7 3 8 9 4 5 10 6') == '1'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nassert solution('0.142857 1') == '1/7'\nassert solution('1.6 0') == '1'\nassert solution('0.142857 2') == '1'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''0.142857 6''') == '1/7'\nassert solution('''1.6 1''') == '5/3'"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n0.142857 6\n''') == '1/7'\nassert solution('''\n1.6 1\n''') == '5/3'\n'''\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nprint('PASSED')"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nassert solution('1.5 1.5') == '1/3'\nassert solution('1.4 1.4') == '1/2'\nassert solution('1.4 1.5') == '3/2'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n0 0 0\\n0 0 1') == '10'\nassert solution('5\\n1 1 2\\n2 1 3\\n3 1 4\\n4 1 5\\n5 1 6') == '12'\nassert solution('5\\n1 1 2\\n2 1 3\\n3 1 4\\n4 1 5\\n5 1 6\\n6 1 7') == '21'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n0 0 0\n0 0 1\n''') == '6'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1\\n') == '6'\nassert solution('2\\n0 0 0\\n0 0 1\\n') == '10'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n0 0 0\n0 0 1\n0 0 2\n''') == '6'\n\"\"\"\n--- Day 3: Toboggan Trajectory ---\nThe gravity assist was successful, and you're well on your way to the Venus refuelling station. During the rush back on Earth, the fuel management system wasn't completely installed, so that's next on the priority list.\n\nOpening the front panel reveals a jumble of wires. Specifically, two wires are connected to a central port and extend outward on a grid. You trace the path each wire takes as it leaves the central port, one wire per line of text (your puzzle input).\n\nThe wires twist and turn, but the two wires occasionally cross paths. To fix the circuit, you need to find the intersection point closest to the central port. Because the wires are on a grid, use the Manhattan distance for this measurement. While the wires do technically cross right at the central port where they both start, this point does not count, nor does a wire count as crossing with itself.\n\nTracing the path each wire takes, you note the position that must be maintained relative to the central port to fulfill the requirements for part 1.\n\nFor example, the central port should be kept at position (0,0). The second wire's path intersects the first one at position (200,0), and the third one intersects the second wire at position (0,100). So, keeping the first wire at position (0,0) requires that the second and third wires also start at (0,0), and keeping the second wire at (200,0) requires that the third wire start at (0,100).\n\nStart by determining the positions of each wire's starting point. Use your wire's.split() method to obtain a list of its path segments.\n\nFor example, the following gives the coordinates of the central port as well as the coordinates of the first wire's starting point:\n\ncentral_port = [0, 0]\nwire_1 = \"R8,U5,L5,D3\"\nwire_2 = \"U7,R6,D4,L4\"\nwire_3 = \"U6,R6,D2,L2\"\n\nTo make a grid from wire_1, you need to figure out the number of rows and columns needed. You can do this by counting the commas in wire_1, and then splitting wire_1 along those commas. An example with four wires is shown below:\n\nrow_1 = \"R8,U5,L5,D3\"\nrow_2 = \"U7,R6,D4,L4\"\nrow_3 = \"U6,R6,D2,L2\"\n\nReturn a list of integers, where each integer represents the number of columns and rows in the grid required to hold the wires. You should not count intermediate cells as part of the grid. In the above example, the result would be [3, 3, 3, 3]. Here is a larger example:\n\nrow_1 = \"R75,D30,R83,U83,L12,D49,R71,U7,L72\"\nrow_2 = \"U62,R66,U55,R34,D71,R55,D58,R83\"\nrow_3 = \"U98,R91,D20,R16,D67,R40,U7,R15\"\nrow_4 = \"U62,R66,U55,R34,D71,R55,D58,R83\"\nrow_5 = \"U98,R91,D20,R16,D67,R40,U7,R15\"\n\nrow_1 = \"R75,D30,R83,U83,L12,D49,R71,U7,L72\"\nrow_2 = \"U62,R66,U55,R34,D71,R55,D58,R83\"\nrow_3 = \"U98,R91,D20,R16,D67,R40,U7,R15\"\n\nThe final three rows contain the same lists of numbers, so they can be summed together to form a single number:\n\n265+183+375=533\nR75+R83+R91=710\n\nFind the number of different routes that can be taken to fill the central port with water.\n\n\"\"\""
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n0 0 0\n0 0 1\n0 1 0\n0 1 1\n''') == '10'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n    1\n    0 0 0\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n    2\n    0 0 0\n    0 0 1\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n0 0 0\n0 0 1\n''') == '10'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n0 0 0\n''') == '6'\nassert solution('''\n2\n0 0 0\n0 0 1\n''') == '10'\nassert solution('''\n2\n0 0 0\n0 0 1\n1 0 0\n''') == '6'\n\nimport pytest"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n0 0 0\n\"\"\") == \"6\"\nassert solution(\"\"\"\n1\n0 0 0\n0 0 1\n\"\"\") == \"10\"\nassert solution(\"\"\"\n1\n0 0 0\n0 0 0\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n0 0 0\n0 0 1\n''') == '6'\nassert solution('''\n1\n1 0 0\n0 0 1\n''') == '7'\nassert solution('''\n1\n2 2 2\n0 0 1\n0 0 0\n''') == '10'\nassert solution('''\n2\n1 0 0\n0 0 1\n0 0 0\n''') == '10'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'\nassert solution(\n'''9\n-1 6 -1 -1 5 -1 -1 -1\n5 -1 -1 -1 -1 -1 -1 -1\n-1 6 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1\n''') == '2'\nassert solution(\n'''4\n-1 4 -1 -1\n-1 -1 -1 -1\n-1 -1 -1 -1\n-1 -1 -1 -1\n''') == '4'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\nassert solution('''\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\nassert solution('''7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'\nassert solution('''8\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n-1 2 -1\n2 2\n1 -1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n24\n-1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n-1 2 -1\n2 2\n1 -1 1''') == '1', \"Wrong\"\nassert solution('''7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1', \"Wrong\""
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '3\\n-1 2 -1\\n2 2\\n1 -1 1\\n') == '1'\nassert solution(\n    '7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\\n') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\nassert solution('''\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('7') == '1'\nassert solution('12') == '0'\nassert solution('101') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('7') == '1'"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\n\nassert solution('''7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"3\""
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string) == \"1\"\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n\"\"\"\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"RRR\"\nassert solution(\"4\") == \"LLRLRLLRLL\"\nassert solution(\"5\") == \"RRRLLLRRRLRL\"\nassert solution(\"10\") == \"RRRLLRLRLRRLLRLRRRLLLRLRRRLLLLRRRLLRRRLRLRRRLLRRRLRRRLRRLLLRRLLRRRLRRLLRRRRLLRRRLRRLLLLRRRRLLLLLLRRRLRRLLRRRLRRLLRRLLRRRLRRRRRRLLLRRRLRRRLRRRLRRRRLLLLRLRLRRRLRRRLRRLLRLLRLRRRRRLRRRLRRLLRRRLRLRRRLRRLLLRRRLRRRLRRRLRRRRLLLLLLLLLLRLRLRRRRLLRRRLRLRRLLRRRRLLRRRLRLRRRLRRRLRRLLRLLRLRRRRRLRRLLRLRLRRRRLLRLRLRRRRLLRLRLRRRRLLRLRLRRRRLLRLRLRRRRLLLLLRLRLRRRLRRLLRLRLRRRRLLRRLLRLRLRRRLRRLLLLRLRLRRRLRRLLRLRLRRRRLLLRRRLRRRRRLRRLLRLRLRRRLRRLLRLRLRRRRLLRRRLRLRRRRLLLLRRRRRLRRRRLLRRLRLRRRRRLRRLLRLRLRRRRLLRLLRLRRRRRRLLRLRLRRRRLLRRLLRLRLRRRLRRLLRRLRLRRRLLRLRLRRRRLLRRRLRLRRRLRRLLRLLRLRRRRLLRLLRLRRRRLLRRLRLRRRRLLRLLRLRRRRLLRLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLLRLRRRRLLRLL"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 1 1\n''') == 'LLL'\n\nassert solution('''5\n1 2 2 1 2\n''') == 'LLRLR'\n\nprint(solution('''\n10\n1 2 3 5 6 7 8 9 4\n'''))"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 1 1\n''') == 'LLL'\nassert solution('''5\n1 2 2 1 2\n''') == 'LLRLR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"LLL\"\nassert solution(\"5\") == \"LLRLR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"LLL\"\nassert solution(\"5\") == \"LLRLR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 1 1\n''') == 'LLL'\nassert solution('''5\n1 2 2 1 2\n''') == 'LLRLR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\") == \"LLL\"\nassert solution(\"2 2 2 1 2\") == \"LLRLR\"\nassert solution(\"3 3 3 1 1\") == \"LLRRLL\"\nassert solution(\"4 4 4 1 1\") == \"LLRRRLL\"\nassert solution(\"5 5 5 1 1\") == \"LLRRRRLL\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == \"LLL\"\nassert solution('3') == \"LLRLLR\"\nassert solution('4') == \"LLLLRRLR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n5\n1 2 2 1 2\n\"\"\") == \"LLRLR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == 'LLL'\nassert solution('5') == 'LLRLR'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 6 7\") == \"50\"\nassert solution(\"7 7 10\") == \"49000000000070\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 6 7\\n1 3 1000000\\n3 5 3000000\\n5 1 5000000\\n2 4 2000000\\n4 6 4000000\\n6 2 6000000\") == \"25000000000021\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7 7 10\") == \"49000000000070\"\nassert solution(\"6 6 7\") == \"25000000000021\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7 7 10\") == \"49000000000070\"\nassert solution(\"6 6 7\") == \"25000000000021\"\nassert solution(\"8 7 10\") == \"402000000000000\"\nassert solution(\"7 7 7\") == \"Poor girl\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\") == \"Poor girl\"\nassert solution(\"5 7 7\") == \"49000000000070\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"7 7 10\\n1 2 1000000\\n2 3 2000000\\n3 4 3000000\\n4 5 4000000\\n5 6 5000000\\n6 7 6000000\\n7 1 7000000\") == \"49000000000070\"\nassert solution(\"6 6 7\\n1 3 1000000\\n3 5 3000000\\n5 1 5000000\\n2 4 2000000\\n4 6 4000000\\n6 2 6000000\") == \"25000000000021\"\nassert solution(\"9 9 7\\n1 3 1000000\\n3 5 3000000\\n5 1 5000000\\n2 4 2000000\\n4 6 4000000\\n6 2 6000000\") == \"49000000000070\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"Poor girl!\"\nprint(solution())\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([7,7,10]) == '49000000000070'\nassert solution([6,6,7]) == '25000000000021'"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 4 10') == '49000000000070'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 7 10\\n1 2 1000000\\n2 3 2000000\\n3 4 3000000\\n4 5 4000000\\n5 6 5000000\\n6 7 6000000\\n7 1 7000000') == '49000000000070'\nassert solution('5 5 5\\n1 2 1000000\\n2 3 2000000\\n3 4 3000000\\n4 5 4000000\\n5 6 5000000\\n6 7 6000000\\n7 1 7000000') == '25000000000021'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 4\\n0 1\\n1 0\\n2 3\\n3 3\"\n) == \"2\\n2\\n0\\n1\\n2\\n2\\n3\\n\"\n\nassert solution(\n    \"3 3\\n0 1\\n1 0\\n2 2\\n\"\n) == \"Yeah!\\n\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4') == '2'\nassert solution('3 4') == '3'\nassert solution('3 1 2') == '1'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 4\n0 1\n1 0\n2 3\n3 2''') == '2'\n\nassert solution('''10 10\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1''') == 'yeah!'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4\\n0 1\\n1 0\\n2 3\\n3 2') == '2\\n2\\n0\\n1\\n2\\n2'\nassert solution('5 2\\n0 1\\n1 0\\n2 3\\n3 2') == 'Yeah!'"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == '2\\n2\\n0\\n1\\n2\\n2\\n3'\n\nprint(solution())"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n4 4\n0 1\n1 0\n2 3\n3 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4\\n0 1\\n1 0\\n2 3\\n3 2') == '2\\n2\\n0\\n1'\nassert solution('4 4\\n0 1\\n1 0\\n2 3\\n3 3') == 'Yeah!'\nprint(solution(*stdin.split()))\n\"\"\"\nimport sys"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == \"2\\n3\\n0\\n1\\n2\\n2\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"3\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1 2\\n') == 'POSSIBLE\\n1 3\\n2 3\\n'\nassert solution('2\\n1 2\\n') == 'IMPOSSIBLE\\n'"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1 2\n1 2''') == 'POSSIBLE'\n\nassert solution('''\n2\n1 2\n2 2''') == 'IMPOSSIBLE'"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n3\n1 1 2\n2 3\n3 1\n\"\"\"\n) == \"POSSIBLE\"\nassert solution(\n\"\"\"\n4\n1 1 2 3\n2 3 1\n3 2 2 1\n1 2 2\n\"\"\"\n) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 2') == 'POSSIBLE'\nassert solution('3 3 3') == 'IMPOSSIBLE'\nassert solution('3 1 2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"POSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\", \"Empty\"\nassert solution(\"1 1 2\") == \"POSSIBLE\", \"One vertex\"\nassert solution(\"1 2\") == \"POSSIBLE\", \"Two vertices\"\nassert solution(\"2\") == \"IMPOSSIBLE\", \"Zero\"\nassert solution(\"1 2 3\") == \"POSSIBLE\", \"One edge\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'POSSIBLE', solution\nassert solution('2') == 'IMPOSSIBLE', solution\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\", \"Can't construct forest without any edges.\"\nassert solution(\"1\") == \"POSSIBLE\", \"Can't construct forest if the graph contains any cycle.\"\nassert solution(\"1 2\") == \"POSSIBLE\", \"No forest exists.\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1 2\\n') == 'POSSIBLE\\n1 3\\n2 3\\n'\nassert solution('2\\n1 2\\n') == 'IMPOSSIBLE\\n'\nassert solution('1\\n2\\n') == 'POSSIBLE\\n1 2\\n'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1 2') == 'POSSIBLE'\nassert solution('2\\n1 2') == 'IMPOSSIBLE'\nassert solution('3\\n1 2 1') == 'IMPOSSIBLE'"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''0 0 0\n1 0 0\n0 1 0\n0 0 1''') == '0.5 0.5 0.5'\nassert solution('''-1 0 0\n1 0 0\n0 1 0\n0 0 1''') == '0.0 0.0 -0.0'"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0\") == \"0.5 0.5 0.5\"\nassert solution(\"1 0 0\") == \"0.5 0.5 0.5\"\nassert solution(\"0 1 0\") == \"0.0 0.0 -0.0\"\nassert solution(\"0 0 1\") == \"0.5 0.0 -0.5\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0\") == \"0.5 0.5 0.5\"\nassert solution(\"1 0 0\") == \"0.0 0.0 -0.0\"\nassert solution(\"0 1 0\") == \"0.0 0.0 -0.0\"\nassert solution(\"0 0 1\") == \"0.0 0.0 0.0\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.0 0.0 -0.0'\nprint('All test cases passed!')\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n\") == \"0.0 0.0 -0.0\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0\") == \"0.5 0.5 0.5\"\nassert solution(\"1 0 0\") == \"0.5 0.5 0.5\"\nassert solution(\"0 1 0\") == \"0.0 0.0 0.0\"\nassert solution(\"0 0 1\") == \"0.0 0.0 0.0\"\nassert solution(\"-1 0 0\") == \"0.0 0.0 -0.0\""
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2\\n2\\n2\\n'\nassert solution('10') == '10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n5 1 2 5 1\n5\n5 5 3 6 1\n3 2 4 1 5\n5 5 5 5 5\n2 2 3 2 2\n''') == '2\\n3 2\\n2 4\\n4 2\\n1 5\\n5 4\\n5 5 5 5\\n5 2 2\\n'''\n\nimport sys"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n1\n4\n2\n5\n7''') == '2 0 4 1 5'\n\nassert solution('''5\n1\n5\n4\n2\n3\n7''') == '2 0 1 5'\n\nassert solution('''5\n2\n3\n1\n4\n7''') == '1 1 4 4'\n\nassert solution('''5\n1\n3\n2\n4\n7''') == '3 2 1 2 4'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '2'\nassert solution('4') == '0'\n\"\"\"\nimport sys\nimport io\nimport math\n\nsys.stdin = io.StringIO(input)\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10') == '1'\nassert solution('3') == '1 2 3'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2 3 2 1\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"10\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '2 2'\nassert solution('3') == '0'\nassert solution('4') == '1 1'\nassert solution('5') == '2 1'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n') == '3'\nassert solution('5\\n3 1 2 3 4') == '5 3 2 1 4'\nassert solution('10\\n1 1 1 2 2 1 1 2 2 3') == '8 5 2 1 3'\nassert solution('15\\n1 1 1 2 2 1 1 2 2 3') == '10 7 2 1 3'\nassert solution('15\\n1 1 1 2 2 1 1 2 2 3') == '10 7 2 1 3'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == 'IMPOSSIBLE'\nassert solution('3 2 1') == '74.6666666667'\nassert solution('3 2 1') == 'IMPOSSIBLE'\nassert solution('3 2 1') == 'IMPOSSIBLE'"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == 'IMPOSSIBLE', \"First\"\nassert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == '74.6666666667', \"Second\"\nprint('All Tests Passed!')\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == '74.6666666667'\nassert solution('''\n1 1 1\n1\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 1\\n1 2 7\\n2 3 8\\n1') == 'IMPOSSIBLE'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3') == '74.6666666667'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1 2\\n2 3') == '74.6666666667'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1 3') == 'IMPOSSIBLE'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1 2\\n2 3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == \"IMPOSSIBLE\", \"First\"\n\nassert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == \"74.6666666667\", \"Second\"\n\nassert solution('''\n1 1\n1\n''') == \"IMPOSSIBLE\", \"Third\"\n\nassert solution('''\n5 1 2\n1 2 9\n2 3 5\n1\n3 1\n''') == \"74.3333333333\", \"Fourth\"\n\nassert solution('''\n5 1 2\n1 2 7\n2 3 8\n1\n3 2\n''') == \"74.6666666667\", \"Fifth\""
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\\n\") == \"74.6666666667\""
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 1') == 'IMPOSSIBLE'\nassert solution('3 2 1') == '74.6666666667'"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 1\\n1 2 7\\n2 3 8\\n1') == 'IMPOSSIBLE'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\\n') == '74.6666666667'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 1') == 'IMPOSSIBLE'\nassert solution('3 2 1') == '74.6666666667'\nassert solution('1 3 2') == '0'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6') == '1'\nassert solution('7 7') == '2'\nassert solution('3 5') == '2'\n\nprint('All test cases passed')\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\n\"\"\""
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6') == '1'\nassert solution('7 7') == '1'\n'''\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n') == '2\\n1\\n2\\n1\\n2\\n'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '1'\nassert solution('7 7') == '1'"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n5 6\\n6 7\") == \"1\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 6\") == \"2\"\nassert solution(\"7 7\") == \"2\""
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\n5 6\n6 7\n7 4\n''') == '1'\nassert solution('''\n7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\n''') == '0'\nassert solution('''\n5 6\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\n''') == '1'\nassert solution('''\n5 6\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\n''') == '0'\n\nassert solution('''\n5 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 4\n''') == '0'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6') == '0'\nassert solution('7 7') == '1'\nassert solution('1 2') == '1'\nassert solution('2 3') == '1'\nassert solution('3 1') == '2'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n5 6\\n6 7\\n7 4\") == \"2\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n1\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '3'\nassert solution('4 1') == '1'\nassert solution('4 2') == '2'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '5'\n\nassert solution('4') == '10'\nassert solution('5') == '15'\nassert solution('6') == '30'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 10 2\") == \"10\"\nassert solution(\"4 10 3\") == \"5\"\nassert solution(\"2 3 6 8\") == \"5\"\nassert solution(\"3 1 2\") == \"2\""
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 10 2') == '10'\nassert solution('4 10 3') == '5'"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 10 2\") == \"10\"\nassert solution(\"4 10 3\") == \"5\"\nassert solution(\"4 10 4\") == \"9\"\nassert solution(\"4 10 6\") == \"13\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 10 2\n0\n15\n30\n45\n''') == '10'\nassert solution('''\n4 10 3\n0\n15\n30\n45\n''') == '5'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3') == '3'\nassert solution('1 1') == '1'\nassert solution('1 1000') == '1000'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 10 2') == '10'\nassert solution('4 10 3') == '5'"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 10 2\n0\n15\n30\n45\n''') == '10'\nassert solution('''\n4 10 3\n0\n15\n30\n45\n''') == '5'"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 10 2\\n0\\n15\\n30\\n45\") == \"10\"\nassert solution(\"4 10 3\\n0\\n15\\n30\\n45\") == \"5\"\n\n\"\"\"\n\nn, t, g, *arrival_times = (int(i) for i in stdin.split())\n\narrivals = [0] + list(arrival_times)\n\nstart = 0\nend = t\n\nanswer = 0\n\nwhile start <= end:\n    if start in arrivals:\n        #print(\"Arriving at {}\".format(start))\n        arrivals.remove(start)\n        answer += 1\n    start += t\n    end -= t\n    #print(answer)\n\nprint(answer)\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n50 50 75\n25 25 25\nSample Output 2:\n1\n''') == '2'\n\nassert solution('''\n5\n50 50 50 50\n25 25 25 25\nSample Output 2:\n1\n''') == '1'\n\nassert solution('''\n4\n50 50 50 50\n25 25 25 25\nSample Output 2:\n1\n''') == '1'\n\nassert solution('''\n4\n50 50 50 50\n25 25 25 25\nSample Output 2:\n1\n''') == '1'\n\nassert solution('''\n4\n50 50 50 50\n25 25 25 25\nSample Output 2:\n1\n''') == '1'"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '2'\nassert solution('4 4') == '1'\nassert solution('5 4') == '4'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 2\n50 50 75\n25 25 25\n''') == '2'\nassert solution('''\n5 2\n50 50 50 50\n25 25 25 25\n''') == '1'\nassert solution('''\n4 2\n50 50 75\n25 25 25\n''') == '1'\nassert solution('''\n5 2\n50 50 50 50\n25 25 25 25\n''') == '2'"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 2\n50 50 75\n25 25 25\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3 4\n50 50 50\n25 25 25\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 2\n50 50 50 50\n25 25 25 25\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 2\n0 0 0\n0 0 0\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 2\n0 0 0\n50 50 50\n\"\"\") == \"3\""
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 1\n10 10 20 30 50 60 70 80 90 100\n15 25 25 25 25 25 25 25 25 25 25\n20 30 40 50 60 70 80 90 100\n''') == '1'\nassert solution('''\n10 1\n20 30 40 50 60 70 80 90 100\n25 25 25 25 25 25 25 25 25 25 25\n15 25 25 25 25 25 25 25 25 25 25\n''') == '7'\nassert solution('''\n4 2\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n''') == '2'\nassert solution('''\n4 2\n50 50 50 50\n25 25 25 25\n25 25 25 25\n''') == '1'\nassert solution('''\n5 2\n50 50 50 50 50\n25 25 25 25 25\n25 25 25 25 25\n25 25 25 25 25\n25 25 25 25 25\n''') == '3'\nprint('All test cases passed')\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 2') == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 2\\n50 50 75\\n25 25 25') == '2'\nassert solution('5 2\\n50 50 50 50\\n25 25 25 25\\n') == '1'\nassert solution('10 3\\n99 99 99 99 99 99\\n99 99 99 99 99 99') == '1'\n\n'''\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 2\n50 50 75\n25 25 25\n''') == '2'\nassert solution('''5 2\n50 50 50 50\n25 25 25 25\n''') == '1'\nassert solution('''6 2\n50 50 50 50 50 50\n25 25 25 25 25 25\n''') == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2') == '1'\nassert solution('5 2') == '1'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4') == '1'\nassert solution('5 5') == '2'\nassert solution('6 2') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '3 4\\n.X.\\n.X.'\n) == '1'\n\nassert solution(\n    '2 4\\nX.L.\\n.L.'\n) == '2'\n\nassert solution(\n    '1 3\\nX.X.'\n) == '2'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 4\n.LX.\n.X..\n...L\n.X..\n''') == '1'\nassert solution('''4 4\n.XLX\n.X..\n...L\n.X..\n''') == '2'\nassert solution('''4 4\n.XLX\n.X..\n...LL\n.X..\n''') == '0'\nassert solution('''4 4\n.XLX\n.X..\n...LL\n.X.\n''') == '0'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 4\\n.LX\\n.X..\\n....\\n.L..') == '1'\nassert solution('2 4\\n.XLX\\n.X..\\n...L\\n.X..') == '2'"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4\\n.LX.\\n.X..\\n....\\n.L..') == '1'\nassert solution('4 4\\n.LX.\\n.X..\\n...L\\n.X..\\n') == '2'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 4\n.XLX\n.X..\n...L\n.X..\n''') == '1'\nassert solution('''\n4 4\n.X..\n...L\n.X..\n''') == '2'\n\n\"\"\""
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4\n.LX.\n.X..\n...L\n.X..\n''') == '1'\nassert solution('''\n4 4\n.LX.\n.X..\n....\n.L..\n''') == '2'\nassert solution('''\n4 4\n.XLX\n.X..\n...L\n.X..\n''') == '1'\nassert solution('''\n4 4\n.XLX\n.X..\n...L\n.X..\n''') == '2'\nassert solution('''\n4 4\n.LX.\n.X..\n....\n.L..\n''') == '1'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\".XLX\") == \"1\"\nassert solution(\".X..\") == \"2\"\nassert solution(\".....\") == \"2\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2\\n.X.\\n.X.') == '1'\nassert solution('3 2\\nX.X\\n.X.') == '2'\nassert solution('3 3\\nLLLL\\nXXXX\\nXXXXX') == '2'\nassert solution('3 3\\nLLLX\\nXXX.\\nX.X') == '1'\nassert solution('4 4\\n.X.\\n.X.\\n...\\n.X.') == '0'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"4 4\\n\"\n    \".LX.\\n\"\n    \".X..\\n\"\n    \"....\\n\"\n    \".L..\") == \"1\"\n\nassert solution(\n    \"4 4\\n\"\n    \"..X.\\n\"\n    \".X..\\n\"\n    \".L..\\n\"\n    \"..X.\\n\"\n    \"..X.\\n\"\n    \"....\\n\"\n    \".X..\\n\"\n    \".....\\n\"\n    \".....\\n\"\n    \".....\\n\") == \"2\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2 1') == 'home'\nassert solution('5 2 1') == 'detention'\n'''"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\nSample Output 2:\") == \"detention\"\nassert solution(\"0 0\") == \"detention\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2') == 'home'\nassert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'detention'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2') == 'home'\nassert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'detention'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 2 1\n1 1\n2 0 2\n2 1 3\n1 2''') == 'detention'\nassert solution('''5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n''') == 'home'\nprint(\"All tests passed!\")\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\") == \"home\"\nassert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\") == \"detention\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 1') == 'detention'\nassert solution('4 2 1') == 'home'\n\n'''"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == 'home', print(solution(sample_input_1))\nassert solution(sample_input_2) == 'home', print(solution(sample_input_2))\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"home\"\nassert solution(\"10 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n2 3 6\\n2 5 7\\n2 8 9\\n3 0 10\\n3 1 11\\n3 2 12\\n4 0 13\\n4 1 14\\n4 2 15\\n\") == \"detention\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2 1\") == \"home\"\nassert solution(\"5 2 1\") == \"detention\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('tralalal') == 'allatral'\nprint(solution('zzzz'))\n\n\"\"\"\n\n\nimport itertools"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'\nprint('All tests passed!')\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('abab') == 'abab'\nassert solution('abcd') == 'abcd'\nassert solution('abcba') == 'abcba'\nassert solution('abcde') == 'abcde'\nassert solution('abcdea') == 'abcdea'\n\nimport pytest"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"zzzz\") == -1"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == \"-\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''tralalal''') == 'allatral'\nassert solution('''zzzz''') == '-1'"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == -1\n\"\"\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5\\n1 2 3 4 5'\nassert solution('6\\n3 2 1 6 4 5') == '8\\n3 2 1 6 4 5'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n1 2 3 4 5\n''') == '5'\nassert solution('''6\n3 2 1 6 4 5\n''') == '8'\nassert solution('''4\n1 2 3 4 5\n''') == '2'\nassert solution('''8\n3 2 1 6 4 5\n''') == '2'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5') == '5'\nassert solution('6 3 2 1 6 4 5') == '8'\nprint('all tests passed')\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5') == \"5\"\nassert solution('3 2 1 6 4 5') == \"8\"\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n4\\n3') == '6'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 3 4 5\n''') == '5'\nassert solution('''6\n3 2 1 6 4 5\n''') == '8'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2 3\n2\n3\n1''') == '5'\nassert solution('''1\n1\n2''') == '1'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"5\"\nassert solution() == \"8\""
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n2 3 1 5\n''') == '3'\nassert solution('''\n5\n1 2 3 4 5\n''') == '5'\nassert solution('''\n4\n5 2 1 6 4 5\n''') == '7'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1 3 4 5') == '5'\nassert solution('5 1 2 3 4') == '5'\nassert solution('5 1 2 3 4 5') == '8'\nassert solution('1 2 3 4 5') == '1'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n''') == '1'\n\nassert solution('''\n4\n''') == '1'\n\nassert solution('''\n7\n''') == '2'\n\nassert solution('''\n20\n''') == '2'\n\nassert solution('''\n101\n''') == '1'"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('47') == '1'\nassert solution('523') == '2'"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(s) == \"1\""
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('47') == '1'\nassert solution('523') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"8\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"6\") == \"3\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n3\n5\n7\n1''') == '1'\n\nassert solution('''2\n8\n3\n9\n2''') == '2'\n\nassert solution('''4\n10\n6\n10\n4\n1''') == '2'\n\nassert solution('''1\n10\n7\n11\n8\n2''') == '3'\n\nassert solution('''2\n10\n8\n9\n7\n6''') == '2'"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n') == '0'\nassert solution('100\\n') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"100\") == \"0\"\nassert solution(\"1000000000\") == \"0\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2\n0 1 10\n1 0 5\n3 2 10\n''') == '1 0 15'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n''') == '0'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n3\n1 2 5\n2 0 20\n''') == '1'\nassert solution('''\n2\n2\n1 2 5\n2 0 20\n''') == '2'\nassert solution('''\n3\n2\n1 2 5\n2 0 20\n''') == '2'\nassert solution('''\n4\n2\n1 2 5\n2 0 20\n''') == '1'\nassert solution('''\n5\n4\n1 3 5\n1 3 5\n1 4 5\n0 1 5\n1 2 4\n''') == '1,2,3,4,5'"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == \"1 0 5\"\nassert solution(\"4 4\\n0 1 20\\n1 0 5\\n0 3 10\\n3 2 10\") == \"1 0 5\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 1 10\") == \"0\"\nassert solution(\"0 0 5\") == \"1 0 3\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20') == '0'\nassert solution('3 3\\n0 1 2\\n1 0 3\\n2 0 1') == '1'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20') == '1\\n1 2 15\\n'\nassert solution('2\\n0 1 10\\n1 0 5') == '1\\n0 1 15\\n'\nprint('solution() is working.')"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0 1 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\nassert solution(\"0 3 10\") == \"1 2\"\nassert solution(\"3 2 10\") == \"1 2\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n''') == '1'\nassert solution('''\n1 2\n0 1 20\n''') == '1'\nassert solution('''\n1 1\n0 1 20\n''') == '1'"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5\") == \"5\"\nassert solution(\"4 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4\\n3 5\\n4 5\\n2 5\") == \"1\"\nassert solution(\"4 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4\\n3 5\\n4 5\\n2 5\\n3 4\") == \"0\"\nassert solution(\"5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5\\n3 4\\n3 5\\n4 5\") == \"3\""
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6') == '5'\nassert solution('4 3') == '4'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n1 3 2 1 5\\n1 3\") == \"5\"\nassert solution(\"5 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4\\n4 5\\n5 5\\n2 5\") == \"1\""
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == '5'\nassert solution('4 3') == '1'\nassert solution('4 4 8 12') == '5'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 3') == '1'\nassert solution('1 10') == '5'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3\"\nassert solution('5 6') == \"5\"\nassert solution('1 2') == \"2\"\nassert solution('5 5') == \"1\"\nassert solution('1 1') == \"0\""
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 6\n1 3 2 1 5\n1 3\n2 3\n1 4\n3 5\n4 5\n2 5\"\"\") == \"5\"\nassert solution(\"\"\"5 5\n1 2 3 4 5\n1 2 3\n2 3 4\n3 4 5\n4 5 6\"\"\") == \"1\"\nassert solution(\"\"\"4 4\n4 4 4\n4 4 4\n4 4 4\"\"\") == \"1\"\nassert solution(\"\"\"4 1\n1 2\n2 3\n3 4\n4 5\"\"\") == \"0\""
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3\n4 3\n2 5\n5 4\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n5\n6 5 2 1 5\n1 3\n2 3\n3 4\n4 5\n5 5\n\"\"\"\n) == \"5\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n5 6\n1 3 2 1 5\n1 3\n2 3\n1 4\n3 5\n4 5\n2 5\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('01 02 03') == '1'\nassert solution('12 13 14') == '2'\nassert solution('123 456') == '2'\nassert solution('1201 1202 1203') == '1'\nassert solution('1212 1212 1213') == '1'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('011010101011010') == '10'\nassert solution('011010101011010') == '12'\nassert solution('011010101011010') == '9'\nassert solution('011010101011010') == '5'\nassert solution('011010101011010') == '3'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"7\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('010') == '1'\nassert solution('0011') == '1'\nassert solution('1234') == '4'\nassert solution('122030') == '7'\nassert solution('12300') == '7'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"020302\"\n) == \"7\"\n\nassert solution(\n    \"1311\"\n) == \"24\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 2\n''') == '0'\nassert solution('''\n10 3\n''') == '2'\nassert solution('''\n10001\n''') == '1'\nassert solution('''\n10001\n''') == '1'\nassert solution('''\n10001\n''') == '1'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n020302\n''') == '7'\nassert solution('''\n1311\n''') == '24'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == '7'\nassert solution('12') == '12'\nassert solution('1311') == '24'\nassert solution('1311012') == '30'"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('010302') == '7'\nassert solution('1311') == '24'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 20\\n'\n                '###########.#.#.#.\\n'\n                '###########...#.###.\\n'\n                '##########..##.#..##\\n'\n                '###########..#.#.##.\\n'\n                '###########.###...#.\\n') == '1 15 5 15'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('\\n'.join([\"8 10\", \"#.#..##..#\", \"####..####\", \"###.##....\", \"...#..####\", \"....##....\", \".#.##..##. \", \"##########\", \"##########\"])) == \"3 1 3 10\"\nassert solution('\\n'.join([\"6 6\", \"##.#.#.#\", \"#.#.#.###\", \"#.###.###\", \"#.##.#.##\", \"#.#####.##\", \"##.##.###\", \"##...#.#.\", \"....##...\"])) == \"1 1 3 10\"\nassert solution('\\n'.join([\"10 10\", \"###.##.###\", \"##...#.#.\", \"#.#.#.#.#\", \"##.###.#.\", \"##.#####.\", \".#.##.##.\", \"###.##.#.\", \"##.##.##.\", \"#####.##.\"])) == \"1 1 5 10\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '3 1 3 10'\nassert solution() == '1 15 5 15'\nassert solution() == '1 1 1 1'\nassert solution() == '1 1 1 1'\nassert solution() == '1 1 1 1'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"2 1 2 2\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 20') == '3 1 3 10'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 2\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''50 0.125\n201 1.000''') == '16.339203308'''\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"50 0.125\") == \"16.339203308\"\nassert solution(\"201 1.000\") == \"5.000000000\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"50 0.125\") == \"16.339203308\"\nassert solution(\"201 1.000\") == \"5.000000000\"\nassert solution(\"0.1 1.0\") == \"0.01\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"50 0.125\n201 1.000\n\"\"\"\n) == \"16.339203308\"\nprint(solution(\n\"\"\"50 0.125\n201 1.000\n\"\"\"\n))\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"50 0.125\") == \"16.339203308\"\nassert solution(\"201 1.000\") == \"5.000000000\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"50 0.125\") == \"16.339203308\"\nassert solution(\"201 1.000\") == \"5.000000000\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"50 0.125\") == \"16.339203308\"\nassert solution(\"201 1.000\") == \"5.000000000\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2\\n0.5 1') == '2'\nassert solution('4 3\\n1 11\\n0.4 1') == '3'\nassert solution('100 3\\n1 1\\n0.1 1') == '100'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '2'\nassert solution('2 2') == '1'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 3\n1 11\n0.4 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 2\n0.9 0.1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 4\n0.9 0.1 0.1 0.1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n4 5\n0.9 0.1 0.1 0.1 0.1\n\"\"\") == \"5\"\nassert solution(\"\"\"\n6 4\n0.9 0.1 0.1 0.1 0.1 0.1 0.1\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 3') == '3'"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2\n0.5 1\n''') == '2'\n\nassert solution('''\n4 3\n1 11\n0.4 1\n''') == '3'"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '1'\nassert solution('4 3') == '3'\nassert solution('5 5') == '4'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1\\n1 1\\n') == '2'\nassert solution('4 3\\n1 11\\n0.4 1\\n') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2\n0.5 1\n''') == '2'\nassert solution('''\n4 3\n1 11\n0.4 1\n''') == '3'\nassert solution('''\n10 10\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0.1 1\n0.7 1\n0.1 1\n0.3 1\n0.7 1\n0.1 1\n0.8 1\n0"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n7 1\n3 2\n10 0\n''') == '10.5', 'First'\nassert solution('''\n3\n2 1\n4 0\n0 3\n''') == '-1', 'Second'\nassert solution('''\n3\n1 2\n1 2\n10 0\n''') == '-1', 'Third'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n7 1\\n3 2\\n10 0') == '10.5', 'First'\nassert solution('3\\n2 1\\n4 0\\n0 3') == '-1', 'Second'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n2 1\n4 0\n0 3\n\"\"\") == \"10.5\"\nassert solution(\"\"\"\n2\n5 4\n8 0\n1 5\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n7 1\\n3 2\\n10 0') == '10.5'\nassert solution('3\\n2 1\\n4 0\\n0 3') == '-1'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n7 1\\n3 2') == '10.5'\nassert solution('3\\n2 1\\n4 0') == '-1'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '-1'\nassert solution('3 1') == '1.5'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1\n2\n10 0\n''') == '10.5'\nassert solution('''\n3\n0\n2\n10 0\n''') == '-1'\nassert solution('''\n5\n1\n0\n2\n3\n10 0\n''') == '10.5'\nassert solution('''\n5\n0\n10\n0\n2\n10 0\n''') == '10.5'\nassert solution('''\n5\n0\n10\n1\n2\n3\n10 0\n''') == '10.5'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n7 1\\n3 2\\n10 0') == '10.5'\nassert solution('3\\n7 1\\n4 0\\n0 3') == '-1'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n7 1\\n3 2\\n10 0') == '10.5'\nassert solution('3\\n2 1\\n4 0\\n0 3') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '10.5'\nassert solution('2') == '-1'\nassert solution('3') == '10.5'"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == \"2\"\nassert solution(\"2 0.51\\n2 0.5\\n1 0.49\") == \"2\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n3 0.5\\n1 0.5\\n2 0.5\\n\") == \"1\"\nassert solution(\"2\\n3 0.5\\n1 0.5\\n2 0.5\\n\") == \"2\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 0.5\n2 0.51\n1 0.49''') == '1'\nassert solution('''2 1\n1 1''') == '2'\nprint('PASSED')\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '1'\nassert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '1'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'\nassert solution('1 0.5\\n2 0.51\\n1 0.49') == '1'\nprint('\"Run\" is good. Great job!')"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 0.5\n1 0.5\n2 0.51\n3 0.49''') == '1'\nassert solution('''3 0.5\n3 0.51\n1 0.49\n2 0.49''') == '2'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 0.5\n2 0.5\n1 0.5''') == \"1\"\nassert solution('''2 0.5\n2 0.51\n1 0.49''') == \"2\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 0.5') == '1'\nassert solution('2 0.5') == '1'\nassert solution('2 0.51') == '2'\nassert solution('1 0.49') == '2'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 0.5\n2 0.51\n1 0.49''') == '1'\n\nassert solution('''3 0.5\n3 0.51\n1 0.49''') == '2'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\n''') == 'yes'\nassert solution('''5 4 4\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\n''') == 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5 2\") == \"yes\"\nassert solution(\"5 4 4\") == \"no\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\\n') == 'yes'\nassert solution('10 4 4\\n1 1 1 1 1 1\\n2 3\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\\n20 20\\n21 21\\n22 22\\n23 23\\n24 24\\n25 25\\n26 26\\n27 27\\n28 28\\n29 29\\n30 30\\n31 31\\n32 32\\n33 33\\n34 34\\n35 35\\n36 36\\n37 37\\n38 38\\n39 39\\n40 40\\n41 41\\n42 42\\n43 43\\n44 44\\n45 45\\n46 46\\n47 47\\n48 48\\n49 49\\n50 50\\n51 51\\n52 52\\n53 53\\n54 54\\n55 55\\n56 56\\n57 57\\n58 58\\n59 59\\n60 60\\n61 61\\n62 62\\n63 63\\n64 64\\n65 65\\n66 66\\n67 67\\n68 68\\n69 69\\n70 70\\n71 71\\n72 72\\n73 73\\n74 74\\n75 75\\n76 76\\n77 77\\n78 78\\n79 79\\n80 80\\n81 81\\n82 82\\n83 83\\n84 84\\n85 85\\n86 86\\n87 87\\n88 88\\n89 89\\n90 90\\n91 91\\n92 92\\n93 93\\n94 94\\n95 95\\n96 96\\n97 97\\n98 98\\n99 99\\n100 100\\n101 101\\n102 102\\n103 103\\n104 104\\n105 105\\n106 106\\n107 107\\n108 108\\n109 109\\n110 110\\n111 111\\n112 112\\n113 113\\n114 114\\n115 115\\n116 116\\n117 117\\n118 118\\n119 119\\n120 120\\n121 121\\n122 122\\n123 123\\n124 124\\n125 125\\n126 126\\n127 127\\n128 128\\n129 129\\n130 130\\n131 131\\n132 132\\n133 133\\n134 134\\n135 135\\n136 136\\n137 137\\n138 138\\n139 139\\n140 140\\n141 141\\n142 142\\n143 143\\n144 144\\n145 145\\n146 146\\n147 147\\n148 148\\n149 149\\n150 150\\n151 151\\n152 152\\n153 153\\n154 154\\n155 155\\n156 156\\n157 157\\n158 158\\n159 159\\n160 160\\n161 161\\n162 162\\n163 163\\n164 164\\n165 165\\n166 166\\n167 167\\n168 168\\n169 169\\n170 170\\n171 171\\n172 172\\n173 173\\n174 174\\n175 175\\n176 176\\n177 177\\n178 178\\n179 179\\n180 180\\n181 181\\n182 182\\n183 183\\n184 184\\n185 185\\n186 186\\n187 187\\n188 188\\n189 189\\n190 190\\n191 191\\n192 192\\n193 193\\n194 194\\n195 195\\n196 196\\n197 197\\n198 198\\n199 199\\n200 200\\n201 201\\n202 202\\n203 203\\n204 204\\n205 205\\n206 206\\n207 207\\n208 208\\n209 209\\n210 210\\n211 211\\n212 212\\n213 213\\n214 214\\n215 215\\n216 216\\n217 217\\n218 218\\n219 219\\n220 220\\n221 221\\n222 222\\n223 223\\n224 224\\n225 225\\n226 226\\n227 227\\n228 228\\n229 229\\n230 230\\n231 231\\n232 232\\n233 233\\n234 234\\n235 235\\n236 236\\n237 237\\n238 238\\n239 239\\n240 240\\n241 241\\n242 242\\n243 243\\n244 244\\n245 245\\n246 246\\n247 247\\n248 248\\n249 249\\n250 250\\n251 251\\n252 252\\n253 253\\n254 254\\n255 255\\n256 256\\n257 257\\n258 258\\n259 259\\n260 260\\n261 261\\n262 262\\n263 263\\n264 264\\n265 265\\n266 266\\n267 267\\n268 268\\n269 269\\n270 270\\n271 271\\n272 272\\n273 273\\n274 274\\n275 275\\n276 276\\n277 277\\n278 278\\n279 279\\n280 280\\n281 281\\n282 282\\n283 283\\n284 284\\n285 285\\n286 286\\n287 287\\n288 288\\n289 289\\n290 290\\n291 291\\n292 292\\n293 293\\n294 294\\n295 295\\n296 296\\n297 297\\n298 298\\n299 299\\n300 300\\n301 301\\n302 302\\n303 303\\n304 304\\n305 305\\n306 306\\n307 307\\n308 308\\n309 309\\n310 310\\n311 311\\n312 312\\n313 313\\n314 314\\n315 315\\n316 316\\n317 317\\n318 318\\n319 319\\n320 320\\n321 321\\n322 322\\n323 323\\n324 324\\n325 325\\n326 326\\n327 327\\n328"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\n''') == 'yes'\nassert solution('''\n3 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\n''') == 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 2 2 2\\n0 1\\n2 3') == 'yes'\nassert solution('5 4 4\\n1 1 2 2 2\\n0 1\\n2 3\\n3 4\\n4 2\\n') == 'no'\nassert solution('10 10 10 10 10 10 10 10 10 10 10\\n0 1\\n2 3\\n3 4\\n4 2\\n') == 'yes'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 5 2') == 'yes'\nassert solution('5 4 4') == 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 2 2 2') == 'yes'\nassert solution('4 5 2') == 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"yes\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\n''') == 'yes'\nassert solution('''\n4 5 2\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\nSample Output 3:\nno''') == 'no'"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4 2\") == \"yes\"\nassert solution(\"3 1 2\") == \"no\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2 1\\n1 2\\n2 1\\n\"\nassert solution(\"4\") == \"4 5\\n5 7\\n7 8\\n8 9\\n9 8\\n\"\nassert solution(\"5\") == \"5 8\\n8 9\\n9 10\\n10 9\\n\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n5\n5\n5''') == '2 1 2'\nassert solution('''4\n20\n15\n17\n14''') == '5 8 2 7'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2 1\"\nassert solution(\"4\") == \"5 8\""
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n8\n5\n2\n3\n1\n2\n3\n5\n5\n5\n4\n2\n5\n1\n5\n''') == '2'\n\nassert solution('''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2 1 2 7'\nassert solution() == '5 8 2 7'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2'\nassert solution('3') == '1'\nassert solution('20') == '5'\nassert solution('15') == '8'\nassert solution('17') == '2'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\n1\n2\n3\n4\n5\n''') == '1 2 3 4 5 1'\nassert solution('''\n9\n1\n2\n3\n4\n5\n6\n7\n8\n9\n''') == '1 2 3 4 5 6 7 8 9 1'\nassert solution('''\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n''') == '1 2 3 4 5 6 7 8 9 10 1'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2 1'\nassert solution('4') == '5 8'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '2\\n1\\n2\\n3'\nassert solution('6') == '5\\n8\\n1\\n4\\n7\\n9'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"python\\njava\\njava\"\nassert solution(input()) == \"python\\njava\\njava\"\nassert solution(input()) == \"python\\njava\\njava\\njava\\njava\\njava\""
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'python'\nassert solution('2') == 'python'\nassert solution('1') == 'python'\nassert solution('5') == 'java'\nassert solution('4') == 'java'"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\npython\np^ main.py\n^ -n 10''') == 'python main.py python main.py -n 10'\n\nassert solution('''5\npython\njava\n^\n^^^\n^^^\nSample Output 2:\npython\njava\njava\npython\njava''') == 'python java python java python java'\n\nassert solution('''2\npython\np^ main.py\n^ -n 10''') == 'python main.py'\n\nassert solution('''1\npython\np^ main.py''') == 'python'\n\nassert solution('''0\npython\np^ main.py''') == 'python'"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('\\n'.join([\n    '1',\n    'python',\n    'p^ main.py',\n    '^ -n 10',\n])) == 'python main.py -n 10', 'First Test'\nassert solution('\\n'.join([\n    '2',\n    'python',\n    'java',\n    'p^ main.py',\n    '^ -n 10',\n])) == 'python main.py -n 10', 'Second Test'\nassert solution('\\n'.join([\n    '3',\n    'python',\n    'java',\n    'java',\n    'java',\n    'p^ main.py',\n    '^ -n 10',\n])) == 'java main.py -n 10', 'Third Test'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'python'\nassert solution('2') == 'python java'\nassert solution('3') == 'python'\nassert solution('4') == 'java'\nassert solution('5') == 'java python'"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\na\n^\nb\n^\nc\n^\n''') == 'abc'\nassert solution('''\na\n^\nb\n^\nc\n^\n''') == 'abc'\nassert solution('''\na\n^\nb\n^\nc\n^\n''') == 'abc'\nassert solution('''\na\n^\nb\n^\nc\n^\n''') == 'abc'\nassert solution('''\na\n^\nb\n^\nc\n^\n''') == 'abc'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    python\n    p^ main.py\n    ^ -n 10\n    ''') == 'python main.py -n 10'\n\nassert solution('''\n    5\n    python\n    java\n    ^\n    ^^^\n    ^^^\n    ''') == 'python java'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"python\"\nassert solution(\"5\") == \"python java\""
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"python\"\nassert solution(\"4\") == \"python main.py\"\nassert solution(\"5\") == \"python main.py -n 10\""
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('\\n'.join([\n    'python',\n    'java',\n    'java',\n    'java',\n    'python',\n])) == 'python\\njava\\njava\\njava\\npython'\n\nassert solution('\\n'.join([\n    'python',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',\n    'java',"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('makes') =='makes'\nassert solution('sentence') == 'this sentence makes perfect sense'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'impossible'\nassert solution('snakemake') == 'impossible'\n\nSample Input 3:\nthis\nis\nan\nexample\nof\na\nwell\nperforming\nsolution\nSample Output 3:\nimpossible\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''tihssnetnceemkaesprfecetsesne\n5\nmakes\nperfect\nsense\nsentence\nthis\n''') == 'this sentence makes perfect sense'\nassert solution('''hi\n2\nthere\nhello\n''') == 'impossible'\n\"\"\""
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == \"this sentence makes perfect sense\"\nassert solution('tihssnetnceemkaesprfecetsesne') == \"impossible\"\n\"\"\""
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense', \"Wrong Answer\"\nassert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense', \"Wrong Answer\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense', 'Wrong output in test 1'\nassert solution('there') == 'impossible', 'Wrong output in test 2'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hi there') == 'impossible'\nassert solution('hi') == 'impossible'\nassert solution('amazing') == 'impossible'\nassert solution('this is some random sentence') == 'impossible'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\n\nassert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\n\nassert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\n\nassert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\n\nassert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\""
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('hitehre') == 'hello'\nassert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == \"4\"\nassert solution('2 2') == \"16\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '4'\nassert solution('1 2') == '4'\nassert solution('4 4') == '160'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\n''') == '4'\nassert solution('''\n2 2\n''') == '16'''\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '4'"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2\\n') == '4\\n', \"1 2\"\nassert solution('2 2\\n') == '16\\n', \"2 2\""
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\\\n2 2\n\"\"\") == \"4\"\nassert solution(\n    \"\"\"\\\n3 5\n\"\"\") == \"35\"\nassert solution(\n    \"\"\"\\\n5 7\n\"\"\") == \"1672\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '4'\nassert solution('1 2') == '8'\nassert solution('2 3') == '12'\nassert solution('3 1') == '2'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2\n''') == '4'\nassert solution('''\n2 2\n''') == '16'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\nassert solution('3 4') == '10'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"4\"\nassert solution(\"2 2\") == \"16\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\nabab\\n2\\nbac\\nbaba') == '4'\nassert solution('6\\nabcbab\\n2\\ncbab\\ncbba\\nabab') == '2'\nassert solution('1\\na\\n2\\na\\n3\\na\\n4\\na\\n5\\na') == '5'\nassert solution('1\\na\\n2\\na\\n3\\na\\n4\\na\\n5\\na\\n6\\na') == '6'\nassert solution('2\\nab\\nab\\nab\\nab\\nab') == '1'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\nab\nabab\n''') == '2'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\na b\nc\nab\nba\ncd''') == '2'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''6\nabcbab\n2\ncb\ncbab\nSample Output 2:\n4''') == '2'\n\nassert solution('''4\nabab\n2\nbac\nbaba\nSample Output 2:\n4''') == '4'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"1\""
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"10\") == \"9\"\nassert solution(\"5\") == \"4\"\nassert solution(\"4\") == \"3\"\nassert solution(\"1\") == \"0\""
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\n\"\"\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n\n''') == '6\\n85\\n90\\n95\\n100\\n105\\n'\n\nassert solution('''\n\n''') == '5\\n17.071067\\n20\\n22.928932\\n26\\n30\\n'''\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''50\n4\n110 10\n80 10\n80 0\n110 0\n''') == '6'\nassert solution('''3\n3\n10 10\n30 10\n20 20\nSample Output 2:\n4\n17.071067\n20\n22.928932\n''') == '4'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('50') == '6'\nassert solution('4') == '85'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n4\\n110 10\\n80 10\\n80 0\\n110 0\\n') == '6\\n85\\n90\\n95\\n100\\n105\\n'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('30\\n4\\n10 10\\n30 10\\n20 20\\n') == '6\\n17.071067\\n20\\n22.928932'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"6\"\nassert solution(\"24\") == \"4\"\nassert solution(\"3\") == \"17.071067\"\nassert solution(\"5\") == \"20\"\nassert solution(\"1\") == \"100\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"6\"\nassert solution(\"1\") == \"1\"\nassert solution(\"24\") == \"4\"\n\n---Input Format---\nThe first line contains an integer $C$ (between $1$ and $10$).\n\nThe second line contains an integer $N$ (between $3$ and $10$).\n\n$N$ lines follow containing two integers: $x$ and $y$ ($-10^5$ and $10^5$ respectively).\n\nExample Input 1\n4\n2\n100 100\n-100 -100\n0 0\n5 5\n-5 -5\nExample Output 1\n2\n0\n0\n0\n1\n1\n0\nExample Input 2\n3\n3\n-5 -5\n-10 -10\n2\n3\n4\n5\n6\n7\n8\n9\n10\nExample Output 2\n3\n0\n0\n0\n1\n2\n2\n1\n0\n0\n\"\"\"\n\nC = int(input())\n\nN = int(input())\n\nvertices = []\n\nfor i in range(N):\n    vertex = list(map(int, input().split()))\n    vertices.append(vertex)\n\nvertices.sort(key=lambda x: x[0])\nvertices.sort(key=lambda x: x[1])\n\nx_coordinates = [vertex[0] for vertex in vertices]\ny_coordinates = [vertex[1] for vertex in vertices]\n\nbulkhead_areas = []\n\nfor i in range(len(vertices)-1):\n    area_vector = (vertices[i][1]-vertices[i+1][1])/(vertices[i][0]-vertices[i+1][0])\n    bulkhead_area = abs(((vertices[i+1][1]-vertices[i][1])/(vertices[i+1][0]-vertices[i][0]))*vertices[i][0])\n    bulkhead_areas.append(bulkhead_area)\n\nbulkhead_areas.append(abs(((vertices[len(vertices)-1][1]-vertices[len(vertices)-2][1])/(vertices[len(vertices)-1][0]-vertices[len(vertices)-2][0]))*vertices[len(vertices)-2][0]))"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''50\n4\n110 10\n80 10\n80 0\n110 0''') == '6'\nassert solution('''24\n3\n10 10\n30 10\n20 20''') == '4'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('25\\n4\\n10 10\\n80 10\\n80 0\\n110 0\\n') == '6\\n85\\n90\\n95\\n100\\n105\\n'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('50') == '6'\nassert solution('4') == '85'\nassert solution('3') == '17.071067'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2') == 'yes'\nassert solution('2\\n1') == 'no'\n\n\"\"\"\n\nn = int(input())\nd = int(input())\nprint(\"yes\") if n % d else print(\"no\")\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"yes\"\nassert solution(\"100 11\") == \"no\"\nassert solution(\"100 7\") == \"no\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'yes'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([10, 11]) == \"yes\"\nassert solution([10, 7]) == \"no\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"yes\"\nassert solution(\"100000000000 3\") == \"no\"\nassert solution(\"1000000000 3\") == \"no\""
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11\n10 11"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10 11\n10 7''') == 'yes'\nassert solution('''10 7\n10 11''') == 'no'\nassert solution('''0 11\n0 7''') == 'yes'\nassert solution('''100 11\n100 7''') == 'no'\nassert solution('''1 11\n1 7''') == 'yes'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"1 6\"\nassert solution(\"30\") == \"1 6\"\nassert solution(\"40\") == \"1 6\"\nassert solution(\"20\") == \"1 6\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '3'\nassert solution('10 30') == '3'\nassert solution('20 40') == '3'\nassert solution('30 50') == '3'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n3 4\\n2 5\\n1 6\\n') == '3\\n1 6\\n2 5\\n3 4\\n'"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3 4\\n2 5\\n1 6') == '3 4\\n1 6\\n2 5\\n3 4'\nassert solution('5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40') == '3 4\\n10 60\\n30 50\\n30 40'"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1 6'\nassert solution('10 30') == '1 6'\nassert solution('5 10') == '1 6'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == \"1 3\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2 3\") == \"2 3\"\nassert solution(\"2 5\") == \"2 5\"\nassert solution(\"3 2\") == \"3 2\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4\n2 3\n1 6\n3 4\n10 15\n\"\"\") == \"1 4\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([5, 1],\n        [\"10 10 5\",\n         \"9 8 10\",\n         \"4 12 20\",\n         \"12 4 8\",\n         \"2 3 16\"]) == \"5836\"\nassert solution([5, 2],\n        [\"10 10 5\",\n         \"9 8 10\",\n         \"4 12 20\",\n         \"12 4 8\",\n         \"2 3 16\"]) == \"1828\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '5836'\nassert solution('''5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 1\") == \"5836\"\nassert solution(\"5 2\") == \"1828\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '5836'\nassert solution('''\n5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '1828'\nprint('all test cases passed')\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == \"5836\"\nassert solution('''5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == \"1828\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '5836'\nassert solution('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '1828'"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1') == '5836', solution('5 1')\nassert solution('5 2') == '1828', solution('5 2')\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 1\n2 2 3\n2 3 3\n''') == '8'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([5, 1, 10, 10, 5]) == 5836\nassert solution([5, 1, 9, 8, 10]) == 1828\nassert solution([5, 1, 4, 12, 20]) == 1664\nassert solution([5, 1, 4, 12, 8]) == 2432\nassert solution([5, 1, 12, 4, 8]) == 3056\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '5836'\nassert solution('''5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '1828'\nassert solution('''8 4\n10 10 10 10 10 10 10 10\n9 8 9 8 9 9 9 9\n4 12 20 20 20 20 20 20\n12 4 8 8 8 8 8 8 8\n2 3 16 16 16 16 16 16 16''') == '3696'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == '50'\nassert solution('''4\n7 100 200 200\n8 100 300 200\n9 100 400 200\n10 100 500 200\n''') == 'impossible'\nassert solution('''10\n10 100 500 200\n9 100 400 200\n8 100 300 200\n7 100 200 200\n6 100 200 200\n5 100 200 200\n4 100 200 200\n3 100 200 200\n2 100 200 200\n1 100 200 200\n''') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == 'impossible'\nassert solution('''\n3\n7 2502 3299 0\n6 2502 2399 0\n2 750 7500 99\n''') == '50'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([\n    [\"7\", \"2401\", \"3299\", \"0\"],\n    [\"6\", \"2401\", \"2399\", \"0\"],\n    [\"2\", \"750\", \"750\", \"99\"]\n]) == \"50\", solution(stdin)\nassert solution([\n    [\"5\", \"100\", \"200\", \"0\"],\n    [\"4\", \"100\", \"300\", \"200\"],\n    [\"3\", \"100\", \"400\", \"200\"],\n    [\"2\", \"750\", \"750\", \"99\"],\n    [\"1\", \"100\", \"100\", \"99\"]\n]) == \"impossible\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99') == '50'\nassert solution('3\\n7 100 200 200\\n8 100 300 200\\n9 100 400 200') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\\n\") == \"impossible\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99') == '50'\nassert solution('3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\\n1 10 20 20') == 'impossible'\nassert solution('3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\\n0 11 12 13') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '50'\nassert solution('1') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == 'impossible'\nassert solution(\"4\\n\") == 'impossible'\nassert solution(\"3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\") == '50'\nprint('PASSED')\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7\n2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == '50'\nassert solution('''\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == 'impossible'\nassert solution('''\n10\n9 0 0 0 0 0 0 0 0 0 0\n7 0 0 0 0 0 0 0 0 0 0\n6 0 0 0 0 0 0 0 0 0 0\n5 0 0 0 0 0 0 0 0 0 0\n4 0 0 0 0 0 0 0 0 0 0\n3 0 0 0 0 0 0 0 0 0 0\n2 0 0 0 0 0 0 0 0 0 0\n1 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n''') == 'impossible'\nassert solution('''\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == '50'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n\n\"\"\""
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '0 0 0 1 1'"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\nprint(solution(input()))\n'''"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\"\nassert solution(\"4.5\") == \"0 0 0 1 1"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'\n\n--------------------------------------------------\n\"\"\""
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''8 3 1\n1 7 8 2 6 4 3 5''') == '8'\nassert solution('''8 2 1\n1 7 8 2 6 4 3 5''') == '3'\nassert solution('''4 1\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3''') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 5 1\n1 2 3 4 5\n6 7 8 9 10''') == '4'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '8 3 1\\n'\n    '1 7 8 2 6 4 3 5\\n'\n) == '8\\n'\n\nassert solution(\n    '4 3 1\\n'\n    '1 7 8 2 6 4 3\\n'\n) == '3\\n'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(examples.sample_input_01) == '3'\nassert solution(examples.sample_input_02) == '5'\nassert solution(examples.sample_input_03) == '8'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"8 3 1\") == \"8\"\nassert solution(\"8 2 1\") == \"3\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 1 2 3 4 5') == '3'\nassert solution('6 2 1 3 4 5') == '6'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 2\n2 3 4 1''') == '3'\nassert solution('''6 3\n2 2 2 4 4 4''') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n4\n2\n3\n\n''') == '4'\nassert solution('''\n2\n4\n3\n4\n\n''') == '3'\nassert solution('''\n3\n4\n4\n3\n\n''') == '0'\n\n'''\nTest Case:\n2\n4\n2\n3\n\nSample Output 1:\n4\n\nSample Output 2:\n3\n\nSample Output 3:\n0\n\nSample Output 4:\n''') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2 2 4 4 4\") == \"3\"\nassert solution(\"4 3\") == \"3\"\nassert solution(\"6 3\") == \"4\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '3'\nassert solution('6 3') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2') == '3'\nassert solution('5 2') == '3'\nassert solution('5 2') == '3'\nassert solution('5 2') == '3'\nassert solution('5 2') == '3'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('6') == '3'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 2\n2 3 4 1\n''') == '3'\nassert solution('''\n6 3\n2 2 2 4 4 4\n''') == '4'\nprint('solution() is ok')\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2\n2 3 4 1\n''') == '3'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 3\n2 3 4 1\n4''') == '3'\nassert solution('''5 2\n2 2\n4''') == '2'\nassert solution('''1\n1''') == '1'\nassert solution('''6 3\n2 2\n4\n2 4\n4''') == '4'\nassert solution('''10 4\n2 2\n4\n4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '3'\nassert solution('6 3') == '4'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 1 1.732050\n\"\"\") == \"\"\"1.732050808\"\"\", \"Simple\"\nassert solution(\"\"\"\n1 1 3.0\n\"\"\") == \"\"\"-1\"\"\", \"Small\"\nassert solution(\"\"\"\n2 2 2.571429\n\"\"\") == \"\"\"2.5714292929\"\"\", \"Two\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1.732050') == '1.7320508000000002'\nassert solution('1 1 3.0') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1.732050') == '1.732050880'\nassert solution('1 1 3.0') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1.732050') == '1.732050801'\nassert solution('1 1 3.0') == '-1'"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1.732050\") == \"1.732050829\"\n\nassert solution(\"1 1 3.0\") == \"-1\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1.732050\") == \"1.732050808\"\nassert solution(\"1 1 3.0\") == \"-1\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2.4999999987500003'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '2.4999999987500003'\nassert solution('2') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n0 100 10\\n0 -100 100\\n.80') == '9.999999999000002'\nprint(solution(input()))\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3 4 2\\n0 -100 100') == '2.4999999987500003'\nassert solution('2\\n0 100 10\\n0 -100 100') == '9.999999999000002'"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\n0 100 10\n0 -100 100\n.80\n\"\"\") == \"9.999999999000002\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0.5\"\nassert solution(\"2\") == \"3.900000000000002\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3 4 2\\n.75\\n') == \"2.4999999987500003\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n3 4 2\\n.75') == '2.4999999987500003'\nassert solution('2\\n0 100 10\\n0 -100 100\\n.80') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n3 4 2\n.75\n\"\"\") == \"2.4999999987500003\"\n\nassert solution(\"\"\"\n2\n0 100 10\n0 -100 100\n.80\n\"\"\") == \"9.999999999000002\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n4 2\n.75\nSample Output 1:\n2.4999999987500003\n\nSample Input 2:\n2\n0 100 10\n0 -100 100\n.80\nSample Output 2:\n9.999999999000002\n''') == '2.4999999987500003'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '0\nassert solution('''\n1 1 6\n1 2 6\n2 1 6\n2 2 6\n3 1 6\n3 2 6\n''') == '0\nassert solution('''\n6 3\n1 1 5 1 2\n1 2 1\n2 2 1\n2 3 3\n2 4 4\n2 5 5\n2 6 6\n''') == '0\nassert solution('''\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n2 5 5\n2 6 6\n''') == '3\n'''\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 6\\n1 1 5 1 2\") == \"3\"\nassert solution(\"4 5\\n1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4\") == \"2\"\nassert solution(\"7 4\\n1 1 5 1 2\\n2 1 6\\n3 1 4 3 4\\n4 1 4 5 1 2\") == \"1\"\nassert solution(\"9 4\\n1 1 5 1 2\\n2 1 6\\n3 1 4 3 4\\n4 1 4 5 1 2\") == \"2\"\nassert solution(\"12 4\\n1 1 5 1 2\\n2 1 6\\n3 1 4 3 4\\n4 1 4 5 1 2\\n5 1 5 6\\n6 1 4 5 1 2\") == \"0\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '6 3\\n'\n    '2 1 6\\n'\n    '1 1 5 1 2\\n'\n    '2 1 6\\n'\n    '2 2 2\\n'\n    '2 3 3\\n'\n    '2 4 4\\n'\n    ) == '3'\n\nassert solution(\n    '4 5\\n'\n    '1 1 4 3 4\\n'\n    '2 1 1\\n'\n    '2 2 2\\n'\n    '2 3 3\\n'\n    '2 4 4\\n'\n    ) == '2'\n\nassert solution(\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1000000\\n'\n    '1"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 3\\n2 1 6') == '0\\n3\\n'\nassert solution('4 5\\n1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4\\n') == '3\\n2\\n1\\n0\\n'"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 3\") == \"0\"\nassert solution(\"2 1 6\") == \"3\"\nassert solution(\"1 1 5 1 2\") == \"1\"\nassert solution(\"2 1 6\") == \"3\""
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n6 3\n2 1 6\n1 1 5 1 2\n2 1 6\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n6 3\n2 1 6\n1 1 5 1 2\n2 1 6\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1\n1 5 1 2\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1 1 5 1 2\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5\\n1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4') == '3'\nassert solution('6 3\\n1 1 5 1 2\\n2 1 6\\nSample Output 2:') == '1'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 3\n1 1 5 1 2\n2 1 6\n2 1 6\n2 3 3\n2 4 4\n''') == '0\nassert solution('''\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '3\nassert solution('''\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '2\nassert solution('''\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '1\nassert solution('''\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '0\n''')"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 7') == '1'\nassert solution('3 2') == '4'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\"\n\nstdin = \"\"\"\n3 2 1000000007\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2 1000000007\n''') == '4'\nassert solution('''\n1 2 1000000007\n''') == '1'\n\nsolution('''\n10 10 1000000007\n''') == '7976'\n\"\"\""
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\n\"\"\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(solution_tester.StringInput(input)) == \"3\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '6'\nassert solution('3 2 1') == '7'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 10\\n6\\n') == '5\\n'\nassert solution('3 5\\n11\\n') == '8\\n'"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 5') == '8'\nassert solution('1000000000 6') == '5000000000'\nprint('PASSED')\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 7') == '5'\nassert solution('10 10') == '10'\nassert solution('15 18') == '12'\nassert solution('1000000 100000000') == '1000000'\nprint('all tests passed')\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 10\\n6') == '5'\nassert solution('3 5\\n11') == '8'"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 5') == '8'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10 10\n6''') == '5'\nassert solution('''3 5\n11''') == '8'''\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5') == '8'\nassert solution('4 4') == '13'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 5') == '5'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 10\n6\n''') == '5'\nassert solution('''\n1000000 1000000\n1000000\n''') == '8000000'"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 10\\n6\") == \"5\"\nassert solution(\"10 5\\n11\") == \"8\""
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '2'\nassert solution('''4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '3'\nassert solution('''3 4 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '3'\nassert solution('''3 6 4\n1 2 3\n0 1 1\n0 2 1\n1 2 1\n0 3 1\n0 4 1\n2 4 1\n''') == '4'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n3 1 2\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n') == '1'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == '2'\nassert solution(test_input_2) == '3'\nassert solution(test_input_3) == '2'"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '2'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '3'"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '2'\nassert solution('''\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '3'\nassert solution('''\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '4'\nassert solution('''\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '2'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 2\\n1 2 1\\n3 2 1\\n') == '2'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n') == '3'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n') == '1'\nassert solution('6 7 3\\n1 3 2\\n5 2 1\\n3 2 1\\n4 1 2\\n2 1 2\\n1 1 1\\n') == '2'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 5 3') == '2'\nassert solution('3 4 1') == '1'\nassert solution('4 2') == '2'\n\n'''\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 2\n1 2 1\n3 2 1\n''') == '2'\nassert solution('''\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\nSample Output 3:\n3\n''') == '3'\nprint(solution('''\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n'''))\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\") == \"2\"\nassert solution(\"4 5 3\") == \"3\"\nassert solution(\"20 20 4\") == \"2\""
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n\") == \"2\"\nassert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n\") == \"3\"\nassert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n\") == \"3\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 1\n10\n10\n1 10\n1 10\n1 10\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3 1\n10\n10\n1 10\n1 10\n1 10\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120''') == '3'\nassert solution('''10 20\n10 20\n5 5\n2 20\n1 30\n1 32\n3 120''') == '3'\nassert solution('''4 1\n10\n10\n1 10\n1 10\n1 10\n''') == '4'\nassert solution('''4 2\n1 2\n1 2\n1 2\n1 2\n''') == '2'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\nassert solution('''\n3 1\n10\n10\n1 10\n1 10\n1 10\n''') == '3'\nassert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\nassert solution('''\n5 6\n15 30 20 10\n1 10\n1 50\n5 20\n1 20\n3 30\n''') == '4'\nassert solution('''\n5 6\n15 30 20 10\n1 10\n1 50\n5 20\n1 20\n3 30\n''') == '4'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(solution.__doc__) == \"3\"\nassert solution(solution.__doc__, stdin=\"1 1\") == \"3\"\nassert solution(solution.__doc__, stdin=\"3 1\") == \"3\"\nassert solution(solution.__doc__, stdin=\"4 3\") == \"3\"\nassert solution(solution.__doc__, stdin=\"5 5 10\") == \"3\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\nassert solution('''\n3 1\n10\n10\n1 10\n1 10\n1 10\n''') == '3'\nassert solution('''\n5 4\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\n\n'''\n'''"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3') == '3'\nassert solution('3 1') == '3'\nassert solution('2 3') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1\\n10\\n10\\n1 10\\n1 10\\n1 10') == '3'\nassert solution('3 2\\n20 30\\n5 5 10\\n2 20') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\nassert solution('''\n1 1\n1 1\n1 1\n''') == '3'\nassert solution('''\n3 1\n10\n1 10\n1 10\n''') == '3'\nassert solution('''\n5 4\n3 5\n5 5\n6 6\n4 6\n6 6\n1 4\n2 4\n4 6\n3 6\n4 6\n4 6\n3 6\n2 4\n3 4\n1 4\n''') == '2'\nassert solution('''\n8 5\n4 5\n3 5\n5 5\n6 5\n1 6\n2 5\n3 5\n4 5\n5 5\n6 5\n7 5\n8 5\n''') == '1'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '3'\nassert solution('1 2') == '2'\nassert solution('3') == '1'\nassert solution('5 5 10') == '3'\nassert solution('5 5 10 2') == '2'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3', 'Wrong'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"1\"\nassert solution(3) == \"1\"\nassert solution(4) == \"1\"\nassert solution(5) == \"2\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"10\") == \"65\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '5'"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"5\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n\nfrom math import sqrt"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"5\"\nassert solution(\"5\") == \"8\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 3\") == \"-1\"\nprint(solution(input()))\n\"\"\"\n\nimport sys\nimport math\n\nt = int(input())\nn = int(input())\n\nconnections = []\nfor i in range(n):\n    connections.append(list(map(int, input().split())))\n\nmaxT = 0\nfor i in range(len(connections)):\n    if connections[i][1] > connections[i][2]:\n        connections[i][1], connections[i][2] = connections[i][2], connections[i][1]\n\nfor i in range(len(connections)):\n    for j in range(len(connections)):\n        if connections[i][0] == connections[j][1] and connections[i][2]!= connections[j][2]:\n            connections[i][1], connections[j][2] = connections[j][2], connections[i][1]\n\nfor i in range(len(connections)):\n    if connections[i][2] - connections[i][1] > maxT:\n        maxT = connections[i][2] - connections[i][1]"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1\n0 11 9\n1 0 10\n0 0 0\n''') == '2'\n\nassert solution('''4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n''') == '-1'\n\nassert solution('''10 1\n
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('4 3') == '-1'"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 1\n0 11 9\n1 0 10\n0 0 0''') == '2'\nassert solution('''4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0''') == '-1'\nassert solution('''10 1\n0 0 1 1 0 1 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 1 1 1 1 1 1 0 0 0 0 0 1 1 1 1 1 0 0 0 0 0 1 1 0 1 0 1 0 0 0 0 1 1 1 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 1 1 0 1 1 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\"\nassert solution(\"1\\n0\\n1\\n0\") == \"2\""
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3') == '2'\nassert solution('5 3') == '-1'"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\nassert solution('''\n3 1\n0 11 9\n1 0 10\n0 0 0\n''') == '2'\nassert solution('''\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n''') == '-1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 4 5 6\") == \"2\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 1\n0 11 9\n1 0 10\n0 0 0\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n0 0 1\n''') == '2'\nassert solution('''\n1 1\n0 0 1\n''') == '-1'\nassert solution('''\n2 3\n0 1 0\n0 0 2\n0 5 0 3\n0 0 0 0\n''') == '-1'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10') == '4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2'"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5 0 3\") == \"4 3 5\"\nassert solution(\"2 1 0 1\") == \"2 100000 1\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\""
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 5 0 3\n0 1 10\n1 2 1\n1 3 1\n0 2 1\n2 3 10''') == '4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2'\n\nassert solution('''3 5 0 3\n0 1 10\n1 2 1\n1 3 1\n0 2 1\n2 3 10''') == '3 2 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2'"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\nassert solution('2 1 0 1') == '2 100000 1'\nassert solution('4 5 3 0 1') == '4 3 5 0 1'\nprint('You are a miller!')\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\nassert solution('2 1 0 1') == '2 100000 1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 5 0 3\n0 1 10\n1 2 1\n1 3 1\n0 2 1\n2 3 10\n''') == '4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2'''\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\nassert solution('2 1 0 1') == '2 100000 1'\nprint('All Tests Passed!')"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5 0 3\") == \"4 3 5\"\nassert solution(\"2 1 0 1\") == \"2 100000 1\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\nassert solution('2 1 0 1') == '2 100000 1'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 3\"\n    \"SMS\"\n) == \"3 5\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 2') == '0'\nassert solution('2 3') == '2'\nassert solution('3 3') == '1'"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"2 3\\nSM\\nMM\"\n    ) == \"3 5\"\n\nassert solution(\n    \"2 3\\nSM\\nM..\"\n    ) == \"2 0\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2\n.S.\n.M.''') == '1 0'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\nSMS\") == \"3 5\"\nassert solution(\"2 3\\nSMS.M\") == \"2 0\""
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\nSMS\nMMS\n''') == '3 5'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '3 5'\n\nassert solution('2 3') == '2 0'\n'''"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3\nSMS\nMMS''') == '3 5'\nassert solution('''2 2\nSMS\nSM''') == '3 0'\nassert solution('''2 3\nSMS\nM.M''') == '2 0'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"3 5\"\nassert solution(\"2 1\") == \"2 0\"\nassert solution(\"1 1\") == \"2 0\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3\\nSMS\\nMMS') == '3 5'\nassert solution('2 3\\nS.M\\nM..') == '2 0'\n\"\"\""
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n\"\"\"\n) == \"1\"\n\nassert solution(\n    \"\"\"\n13\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '2'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '2'\nassert solution('''\n6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\nSample Output 2:\n1\n6 b\n''') == '1'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '1'\nassert solution('''\n13\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '0'\nassert solution('''\n6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\n''') == '1'\n\"\"\"\n\nimport math\nimport re\nimport sys\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n0 G a\n5 T a\n4 E a\n4 E b\n3 S\n\"\"\") == \"4\"\nassert solution(\"\"\"\n2\n0 B\n1 T a\n1 S\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n0 G b\n1 G b\n2 B\n3 S\n4 G a\n5 G a\n6 G a\n7 G a\n8 G a\n9 G a\n10 G a\n11 G a\n12 G a\n13 G a\n14 G a\n15 G a\n16 G a\n17 G a\n18 G a\n19 G a\n20 G a\n21 G a\n22 G a\n23 G a\n24 G a\n25 G a\n26 G a\n27 G a\n28 G a\n29 G a\n30 G a\n31 G a\n32 G a\n33 G a\n34 G a\n35 G a\n36 G a\n37 G a\n38 G a\n39 G a\n40 G a\n41 G a\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n13\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '2'\nassert solution('''\n6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\n''') == '1'\n\"\"\"\n    @param A : list of integers\n    @return a list of integers\n    \n    # Brute Force: Time - O(n^3) | Space - O(1)\n    def optimal_labelling(self, A):\n        res = 0\n        \n        for i in range(len(A)):\n            "
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '1'\nassert solution('3') == '0'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '2'\nassert solution('''\n13\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '3'\nassert solution('''\n6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\n''') == '1'\nassert solution('''\n1\n1\n1\n1\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 4\") == \"40\""
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5\\n2 3') == '21'\nassert solution('5 5\\n6 8') == '44'\n\nfrom math import gcd\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"40\"\nassert solution(\"3 5\") == \"83\"\nassert solution(\"1 1000000\") == \"5050505050505050505050505050505050\"\nprint(solution.__doc__)\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == '40'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\nprint('all tests passed')\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\nCAT\\nDOG\\nCOT') == 'COG'\nassert solution('2\\nCAT\\nDOG\\n') == 0\nassert solution('2\\nCAT\\n') == -1"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\nCAT\nDOG\nCOT\nCAT\nCAT\nSample Output 3:\nCOG\n3\n''') == 'COG'\n\nassert solution('''5\nCAT\nDOG\nCOT\nCAT\nCAT\nSample Output 4:\n0\n-1\n''') == '0'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\nCAT\nDOG\nCOT\n3\nCOG''') == \"CAT\"\n\nassert solution('''2\nCAT\nDOG\nSample Output 2:\n0\n-1''') == \"CAT\"\n\nassert solution('''2\nCAT\nDOG\nSample Output 2:\n0\n-1''') == \"CAT\"\n\nassert solution('''3\nCAT\nDOG\nCOT\nSample Output 2:\nCAT\n3''') == \"CAT\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\nCAT\nDOG\nCOT''') == 'COG'\nassert solution('''2\nCAT\nDOG\n''') == '0'\nassert solution('''1\nCAT\n''') == '0'\nassert solution('''8\nCAT\nDOG\nCOT\nDOG\nCAT\nCAT\nCAT\nCAT\n''') == 'CAT'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\nCAT\nDOG\nCOT\nABC\nXYZ\n''') == 'COG', \"First\"\nassert solution('''5\nCAT\nDOG\nCOT\nABC\nXYZ\n''') == 'XYZ', \"Second\"\nassert solution('''3\nCAT\nDOG\nCOT\n''') == 'XYZ', \"Third\"\nassert solution('''2\nCAT\nDOG\n''') == '0', \"Fourth\"\nassert solution('''2\nCAT\nDOG\n''') == '0', \"Fifth\""
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"1\nCAT\nDOG\nCOT\"\"\") == \"COG\"\nassert solution(\"\"\"2\nCAT\nDOG\"\"\") == \"0\"\nassert solution(\"\"\"3\nCAT\nDOG\nCOT\"\"\") == \"COG\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"CAT\"\nassert solution(\"2\") == \"COG\"\nassert solution(\"3\") == \"COG\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\nCAT\\nDOG\\nCAT\\nCOT\\n\") == \"CAT\"\nassert solution(\"5\\nCAT\\nDOG\\nCAT\\nCOT\\n\") == \"CAT\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\nCAT\nDOG\nCOT\n''') == 'COG'\nassert solution('''\n2\nCAT\nDOG\n''') == 0\nassert solution('''\n3\nCAT\nDOG\nCOT\n''') == 'COG'\nassert solution('''\n2\nCAT\nDOG\n''') == -1\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\nCAT') == 'COG'\nassert solution('2\\nCAT') == 0\nassert solution('3\\nCAT') == 'COG'\nassert solution('4\\nCAT') == -1\nassert solution('5\\nCAT') == 0\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4') == '6'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '3'\nassert solution('5 1') == '4'\nassert solution('5 4') == '3'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n4 1') == '6'\nassert solution('10\\n10') == '1'\nassert solution('3\\n4') == '6'\nprint('all tests passed')\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3\\n') == '9'\nassert solution('10 1\\n') == '9'\nassert solution('4 3\\n') == '6'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"9\"\nassert solution(\"4 3\") == \"6\"\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '8'\nassert solution('4 3') == '6'"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 1\n''') == '9'\nassert solution('''\n4 3\n''') == '6'\n''')"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 5\n/.V.\n./.V.\n..#..\n.V.#.\n.V./\n''') == '3'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5\\nV.V.V.V.V.\\nH.H.H.H.H.') == '3'\nassert solution('2 5\\nV.V.V.V.V.\\nH.H.H.H.H.') == '-1'"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n.V.\\n./.V.\\n..#..\\n.V.#.\\n.V./\\n\") == \"3\"\nassert solution(\"10 10\\n..#.\\n.###\\n.#...\\nV...V\\n.V..\\n.###\\n.###\\n...#\\n###V\\n#...\\n###V\\n#.#.\\n\") == \"5\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5') == '3'\nassert solution('2 5') == '-1'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5\\n.V.\\n./.V.\\n..#..\\n.V.#.\\n.V./\\n') == '3'\nassert solution('2 5\\nV...\\nH...V\\n') == '-1'\nassert solution('10 3\\n.V.\\n..#..\\n.V.#.\\n.V./\\n....\\n.V.\\n./.V.\\n..#..\\n.V.#.\\n.V./\\n...#\\n.V.\\n./.V.\\n') == '6'\nassert solution('10 1\\n.V.\\n..#..\\n.V.#.\\n.V./\\n....\\n.V.\\n./.V.\\n..#..\\n.V.#.\\n.V./\\n...#\\n.V.\\n./.V.\\n') == '1'\nassert solution('1 1\\n.V.\\n.V.\\n') == '0'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '''\n5 5\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"2 5\") == \"-1\"\n\"\"\"\n\nimport math\nfrom collections import deque\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5') == '3'\nassert solution('2 5') == '-1'"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5\\n.V.\\n./.V.\\n..#..\\n.V.#.\\n.V./') == '3'\nassert solution('5 5\\n.V.\\n./.V.\\n..#..\\n.V.#.\\n.V./') == '-1'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n.V.\\n.V.\\n..#..\\n.V.#\\n.V./\") == \"3\"\nassert solution(\"2 5\\nV...\\nH...V\") == \"-1\"\nassert solution(\"2 5\\nV...\\nH...V\\n.V.#\\n.V./\") == \"4\""
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\nn fox jumps ove\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n\"\"\") == \"AMBIGUOUS\""
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'AMBIGUOUS'\nassert solution('3') == 'AMBIGUOUS'\nassert solution('4') == 'AMBIGUOUS'\nassert solution('5') == 'AMBIGUOUS'\nassert solution('6') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\nn fox jumps ove\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n\"\"\") == \"AMBIGUOUS\"\n\nassert solution(\"\"\"\n3\nfox\nuick\nbrown\n\"\"\") == \"AMBIGUOUS\"\n\nassert solution(\"\"\"\n2\nfox\no\nbrown\n\"\"\") == \"AMBIGUOUS\"\n\nassert solution(\"\"\"\n3\nfox\no\nbrown\n\"\"\") == \"AMBIGUOUS\"\n\nassert solution(\"\"\"\n1\nfox\n\"\"\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'AMBIGUOUS'\nassert solution('') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('\\n'.join(input().split())) == 'AMBIGUOUS'\nassert solution('\\n'.join(input().split())) == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7\\nn fox jumps ove\\nuick brown f\\nThe quick b\\ny dog.\\nrown fox\\nmps over the l\\nthe lazy dog') == 'AMBIGUOUS'\nassert solution('4\\ncdefghi\\nefghijk\\nefghijx\\nabcdefg') == 'The quick brown fox jumps over the lazy dog'\nassert solution('13\\nvgpzqemtbqkc\\nuljvjhvupyw\\njvhkllgbflx\\njvhkllgbflx\\njvhkllgbflx\\njvhkllgbflx\\nvgpzqemtbqkc\\nuljvjhvupyw\\njvhkllgbflx\\njvhkllgbflx\\nvgpzqemtbqkc') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('n fox jumps ove\\nuick brown f\\n' +\n                'The quick b\\ny dog.\\n' +\n                'rown fox\\nmps over the l\\nthe lazy dog\\n') == 'AMBIGUOUS'\nassert solution('cdefghi\\n' +\n                'efghijk\\n' +\n                'efghijx\\n' +\n                'abcdefg\\n') == 'AMBIGUOUS'"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\nn fox jumps ove\nuick brown f\nThe quick b\ny dog.\"\"\") == \"AMBIGUOUS\"\nassert solution(\"\"\"7\nn fox jumps ove\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog\nSample Output 2:\nAMBIGUOUS\"\"\") == \"AMBIGUOUS\"\"\".format(n)\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7\\n n fox jumps ove\\n uick brown f\\n The quick b\\n y dog.\\nrown fox\\n mps over the l\\n the lazy dog') == \"AMBIGUOUS\"\nassert solution('2\\nhyo\\n hyo') == \"AMBIGUOUS\"\nassert solution('2\\nabcd\\nbaef\\nabcd') == \"AMBIGUOUS\"\nassert solution('5\\nhyo\\nhyo\\nhyo\\nhyo\\nhyo') == \"AMBIGUOUS\"\nassert solution('5\\nabcd\\nbaef\\nabcd\\nbaef') == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\ncdefghi\nefghijk\nefghijx\nabcdefg\n''') == 'AMBIGUOUS'\n\"\"\"\nn = int(input())\nans = 'AMBIGUOUS'\n\nfor i in range(n):\n    for j in range(n):\n        string = stdin.readline().strip()\n        if i == j:\n            if string[0]!='':\n                continue\n            if len(string) <= 5:\n                continue\n            else:\n                ans = string\n                break\n        else:\n            if string[0] == string[-1] =='':\n                continue\n            else:\n                string_1 = string[:5]\n                string_2 = string[-5:]\n                string_1_rev = string_1[::-1]\n                string_2_rev = string_2[::-1]\n                if string_1 == string_2 or string_1_rev == string_2_rev:\n                    ans = string\n                    break\n\nprint(ans)\n\n\"\"\"\nSample Input 1:\n5\nn fox jumps ov\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog\nSample Output 1:\nfox jumps ov\nuick brown f\nThe quick brown dog.\nrown fox\nmps over the lazy dog\nSample Input 2:\n6\ncdefghi\nefghijk\nefghijx\nabcdefg\ndgjkxcn\nSample Output 2:\nAMBIGUOUS\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\\n') == '--+0-', \"First Test Case Failed\"\nassert solution(\n    '6 6\\n-5 -4 1\\n-4 -3 2\\n2 -2 1\\n-3 -2 3\\n1 -1 2\\n0 1 4\\n2 5 1\\n') == '--+0-', \"Second Test Case Failed\"\nassert solution(\n    '4 5\\n-1 1 1\\n-2 2 1\\n-2 2 2\\n2 1 2\\n') == '+--+', \"Third Test Case Failed\"\nassert solution(\n    '3 3\\n1 1 1\\n1 2 2\\n') == '0+-', \"Fourth Test Case Failed\"\nassert solution(\n    '4 4\\n-1 -1 0\\n1 -2 1\\n2 -1 1\\n-1 -2 1\\n') == '-+-', \"Fifth Test Case Failed\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 2 1\\n-2 0 2') == '0+-'\nassert solution('4 2\\n1 2 0\\n2 3 4\\n-1 1 2\\n2 5 1') == '-+0-'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6') == '--+0-'\nassert solution('3 2') == '0+-'\nassert solution('1 2 1') == '--+0-'\nassert solution('-1 1 2') == '--+0-'\nassert solution('0 1 4') == '--+0-'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == '--+0-'\nassert solution('3 2') == '0+-\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 6\") == \"--+0-\", \"First Test\"\nassert solution(\"3 2\") == \"0+-\", \"Second Test\""
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_string) == \"impossible\"\nassert solution(input_string_2) == \"+-++\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2 1\\n-2 0 2\") == \"0+-\", solution.__doc__\nprint(solution(\"3 2\\n1 2 1\\n-2 0 2\"))\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n\"\"\") == \"--+0-\", \"First\"\n\nassert solution(\n    \"\"\"\n2 3\n0 1 2\n2 0 1\n\"\"\") == \"0-+1+--\", \"Second\"\n\nassert solution(\n    \"\"\"\n5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n\"\"\") == \"--+0-\", \"Third\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '+0-', 'First Test'\nassert solution('''3 2\n1 2 1\n-2 0 2\n''') == '0+-', 'Second Test'\nassert solution('''5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '--+0-', 'Third Test'\nassert solution('''3 2\n1 2 1\n-2 0 2\n''') == '0+-', 'Fourth Test'\nassert solution('''3 2\n1 2 1\n-2 0 2\n''') == '-0+', 'Fifth Test'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 6\") == \"--+0-\"\nassert solution(\"3 2\") == \"0+-\"\nassert solution(\"4 8\") == \"--+0-\"\nassert solution(\"2 4\") == \"--+-\"\nassert solution(\"2 2 2\") == \"0+-+\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"4\""
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n5 1\\n6 1\\n7 2\\n4 3') == '1'\nassert solution('4\\n3 2\\n5 2\\n7 3\\n8 2') == '5'\nassert solution('1\\n1\\n1\\n1') == '1'\nassert solution('10\\n7 4\\n4 5\\n8 8\\n7 6\\n9 6\\n7 5\\n6 5\\n2 6\\n4 5\\n5 2\\n4 3\\n9 5\\n2 1\\n2 3\\n5 2\\n4 5\\n5 1\\n5 2\\n1 3\\n2 3\\n7 8\\n8 6\\n2 7\\n8 9\\n2 5\\n6 8\\n1 1\\n6 9\\n6 7\\n1 1\\n6 5\\n1 6\\n5 1\\n1 7\\n5 2\\n5 2\\n1 2\\n1 4\\n5 2\\n1 6\\n6 3\\n6 2\\n2 1\\n1 5\\n4 4\\n1 5\\n1 2\\n4 2\\n1 5\\n5 2\\n4 6\\n2 3\\n4 1\\n1 5\\n2 4\\n2 6\\n1 1\\n1 4\\n1 1\\n1 1\\n3 6\\n3 2\\n1 1\\n1 5\\n1 1\\n1 2\\n5 1\\n2 5\\n1 4\\n1 1\\n1 4\\n1 1\\n5 2\\n1 6\\n4 4\\n1 6\\n1 1\\n5 3\\n1 6\\n2 1\\n2 5\\n4 3\\n2 2\\n5 1\\n1 2\\n1 1\\n1 4\\n4 1\\n2 1\\n2 5\\n1 6\\n2 4\\n1 3\\n3 1\\n2 5\\n1 1\\n1 5\\n1 6\\n2 2\\n1 2\\n1 2\\n4 1\\n5 1\\n1 6\\n5 2\\n4 3\\n1 6\\n1 1\\n3 1\\n2 1\\n2 3\\n2 6\\n3 1\\n3 5\\n1 3\\n2 1\\n1 3\\n2 5\\n3 2\\n5 2\\n2 1\\n1 2\\n3 5\\n1 1\\n2 2\\n2 4\\n3 5\\n4 2\\n2 1\\n3 4\\n4 3\\n2 2\\n3 4\\n4 5\\n3 1\\n4 2\\n1 1\\n2 3\\n2 5\\n2 2\\n1 4\\n3 1\\n4 1\\n1 3\\n1 2\\n2 3\\n1 3\\n2 1\\n4 2\\n2 1\\n2 5\\n5 3\\n2 4\\n1 6\\n1 5\\n1 4\\n4 1\\n5 5\\n5 3\\n2 6\\n1 3\\n1 1\\n5 5\\n1 4\\n1 2\\n5 5\\n2 5\\n5 4\\n3 5\\n1 6\\n2 6\\n5 6\\n1 5\\n2 5\\n1 6\\n4 1\\n2 5\\n1 4\\n1 1\\n3 2\\n1 3\\n1 4\\n1 3\\n2 4\\n2 6\\n1 6\\n4 6\\n5 1\\n1 3\\n2 6\\n5 1\\n4 1\\n1 1\\n1 6\\n1 1\\n5 5\\n2 6\\n3 5\\n1 6\\n1 4\\n5 3\\n1 5\\n1 2\\n4 3\\n3 5\\n4 4\\n5 1\\n3 2\\n1 1\\n2 4\\n1 1\\n5 1\\n1 2\\n4 1\\n1 1\\n3 6\\n1 1\\n1 6\\n2 5\\n4 3\\n1 5\\n2 4\\n1 4\\n5 2\\n3 3\\n2 1\\n5 3\\n2 4\\n1 1\\n1 3\\n5 5\\n1 2\\n2 1\\n2 4\\n4 1\\n2 1\\n1 3\\n3 2\\n2 6\\n5 4\\n1 4\\n1 4\\n1 4\\n3 2\\n4 3\\n1 4\\n1 5\\n3 2\\n3 2\\n2 6\\n5 2\\n4 1\\n1 6\\n5 2\\n1 2\\n1 1\\n5 3\\n1 4\\n1 6\\n4 6\\n1 3\\n4 4\\n2 1\\n2 4\\n2 4\\n4 4\\n1 3\\n2 4\\n1 2\\n2 5\\n2 3\\n1 2\\n4 1\\n1 5\\n4 1\\n2 2\\n4 3\\n1 3\\n3 2\\n5 4\\n4 5\\n2 4\\n1 1\\n1 1\\n1 1\\n1 2\\n1 6\\n2 5\\n3 1\\n4 4\\n1 6\\n2 1\\n5 5\\n5 3\\n1 6\\n1 5\\n3 5\\n4 6\\n1 6\\n5 4\\n2 3\\n1 2\\n2 1\\n3 2\\n5 1\\n4 6\\n1 5\\n1 2\\n3 2\\n1 3\\n4 2\\n1 5\\n2 3\\n3 6\\n1 6\\n1 4\\n2 6\\n1 3\\n1 4\\n1 2\\n3 2\\n2 2\\n2 4\\n2 4\\n3 2\\n2 1\\n5 1\\n3 5\\n2 4\\n3 2\\n5 2\\n1 1\\n5 3\\n1 3\\n2 6\\n3 6\\n1 5\\n1 4\\n2 2\\n2 4\\n1 6\\n3 3\\n1 6\\n2 5\\n5 4"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"1 1 1\") == \"3\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 2\n1 1\n1 1\n1\n1 1 1\n2 2 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 2\n1 2\n2 3\n2\n1 2 2\n2 2 2\n\"\"\") == \"4\"\nassert solution(\"\"\"\n10 3\n
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"1\""
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 2\n1 1\n1 1\n1\n1 1 1\n2 2 2\n''') == '4'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 5\nWRRRG\nWRRRG\nWRRRG\nWBBBB''') == 'YES'\nassert solution('''5 5\nWRRRR\nRRRRR\nRRRRR\nRRRRR\nWBBBB''') == 'NO'\nassert solution('''5 6\nWRRRR\nRRRRR\nRRRRR\nRRRRR\nRRRRR\nRRRRR\nWBBBB''') == 'YES'\n''')\n\nstdin = '''5 6\nWRRRR\nRRRRR\nRRRRR\nRRRRR\nRRRRR\nRRRRR\nWBBBB'''"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\nWWRR\\nWRRR\\nWRRR\") == \"YES\"\nassert solution(\"5 4\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB\\nWRRRG\") == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"4 5\") == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5') == 'YES'\nassert solution('3 4') == 'NO'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB') == 'YES'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 4\nWRRR\nWRRR\nWRRR\nWBBBB\n''') == 'YES'\nassert solution('''\n5 5\nWRRRG\nWRRRG\nWRRRG\nWBBBB\n''') == 'YES'\nassert solution('''\n5 4\nWWRR\nWRRR\nWRRR\nWBBBB\n''') == 'NO'\nassert solution('''\n3 4\nWRRR\nWRRR\nWBBBB\n''') == 'NO'\nassert solution('''\n10 2\nRGGGGRGGG\nGRGGGGRGG\nGGRGGGGRGG\nGRGGGGRGG\nGGRGGGGRGG\nGRGGGGRGG\nGGGGRGGGGR\nGGGGRGGGGR\nGGGGRGGGGR\n''') == 'YES'\n\n\"\"\"\n--- Day 18: Operation Order ---\n\nYou start by compiling the circuit. The circuit has several parts:\n\n    - The circuit consists of several parts that are separate by delimiters;\n    - The parts that comprise the circuit are indented;\n    - The parts that comprise the circuit are separated by parentheses;\n    - The parts that comprise the circuit are separated by semicolons.\n\nEach part consists of an operation and a list of arguments (numbers or other symbols). For example, the first part of the circuit is the part that performs the addition operation and has no arguments:\n\n    R1(1)R1(2)R1(3)R1(4)\n\nThe second part of the circuit is the part that performs the multiplication operation with one argument and one input:\n\n    R2(1)R1(2)R1(3)R1(4)\n\nThe third part of the circuit is the part that performs the multiplication operation with one input and one argument:\n\n    R3(1)R1(2)R1(3)R1(4)\n\nThe fourth part of the circuit consists of an operation that performs the identity operation, with no arguments and no inputs:\n\n    R4(1)R1(2)R1(3)R1(4)\n\nThe circuit consists of all parts, with the input to R1 and the output of R4. The result of your operation is given by:\n\n    R4(1)R1(2)R1(3)R1(4)\n\nThe list of parts can even be arbitrarily deep, with the following operations:\n\n    R5(1)R1(2)R1(3)R1(4)R1(5)R1(6)R1(7)R1(8)\n\nAt this point, the operation that you are performing is a multiply operation. The operation requires one argument (the number of parts in the circuit). The arguments are the numbers in the list of parts that are to be multiplied together. For example, in the circuit above, the multiply operation requires two parts to be multiplied.\n\nLet's write the circuit in terms of lists, variables, and functions.\n\nCircuit.\nR1(1)R1(2)R1(3)R1(4)\nR2(1)R1(2)R1(3)R1(4)\nR3(1)R1(2)R1(3)R1(4)\nR4(1)R1(2)R1(3)R1(4)\nR5(1)R1(2)R1(3)R1(4)R1(5)R1(6)R1(7)R1(8)\n\nLet's define an add operation, which requires two parts:\n\n    R1(1)R1(2)\n\nand\n\n    R2(1)R1(2)\n\nIt is possible to concatenate these parts to produce:\n\n    R1(1)R1(2)\n    R1(1)R1(2)\n\nIf we take a look at the expression, we can see that in the middle of the concatenation, there are a pair of parentheses. This is because the expression is being \"concatenated\" with itself, and the result of this concatenation is a new expression. In this case, the parentheses in the middle of the expression are necessary to indicate that both parts of the expression are to be concatenated.\n\nLet's define a multiply operation, which requires two parts:\n\n    R1(1)R1(2)\n\nand\n\n    R2(1)R1(2)\n\nIt is possible to multiply these parts to produce:\n\n    R1(1)R1(2)\n    R1(1)R1(2)\n\nIf we take a look at the expression, we can see that the parentheses are not necessary anymore in the middle of the expression. The parentheses are necessary to indicate that both parts of the expression are being multiplied.\n\nLet's define a function, which takes two arguments:\n\n    f(x, y)\n\nand\n\n    f(x)\n\nIt is possible to call the function, which requires three parts:\n\n    f(x, y)\n\nand\n\n    f(x)\n\nIt is possible to concatenate these parts to produce:\n\n    f(x, y)\n    f(x)\n\nIf we take a look at the expression, we can see that in the middle of the concatenation, there are a pair of parentheses. This is because the expression is being \"concatenated\" with itself, and the result of this concatenation is a new expression. In this case, the parentheses in the middle of the expression are necessary to indicate that both parts of the expression are to be concatenated.\n\nLet's define an identity operation, which has no arguments and returns itself:\n\n    R1(1)R1(2)R1(3)R1(4)\n\nIt is possible to call the function, which requires no parts:\n\n    R1(1)R1(2)R1(3)R1(4)\n\nIt is possible to concatenate these parts to produce:\n\n    R1(1)R1(2)R1(3)R1(4)\n\nIf we take a look at the expression, we can see that in the middle of the concatenation, there are a pair of parentheses. This is because the expression is being \"concatenated\" with itself, and the result of this concatenation is a new expression. In this case, the parentheses in the middle of the expression are necessary to indicate that both parts of the expression are to be concatenated.\n\nNow, let's define a function with arguments that returns itself:\n\n    f(x, y)\n\nand\n\n    f(x)\n\nIt is possible to call the function, which requires three parts:\n\n    f("
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 5\nWRRRG\nWRRRG\nWRRRG\nWBBBB\n''') == \"YES\", \"First\"\nassert solution('''3 4\nWWRR\nWRRR\nWRRR\n''') == \"NO\", \"Second\"\nassert solution('''4 2\nWRRRG\n''') == \"YES\", \"Third\"\nassert solution('''4 3\nWRRRG\nWRRRG\n''') == \"NO\", \"Fourth\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 5\nRRRRR\nRRRRR\nRRRRR\nBBBBB\n''') == 'YES'\nassert solution('''\n3 4\nWWRR\nWRRR\nWRRR\n''') == 'NO'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('6 3 5') == '3'"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3 5\n1\n2\n3\n3\n2\n1\n''') == \"1\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('6 3 5') == '3'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3 5\n1\n2\n3''') == '1'\nassert solution('''6 3 5\n1\n2\n3\n3\n2\n1''') == '3'\nassert solution('''20 3 5\n1\n2\n3\n3\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3 5\n1\n2\n3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n6 3 5\n1\n2\n3\n3\n2\n1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3 5\\n1\\n2\\n3\\n3\\n2\\n1\") == \"1\"\nassert solution(\"6 3 5\\n1\\n2\\n3\\n3\\n2\\n1\\n5\\n3\") == \"3\"\nassert solution(\"6 3 5\\n1\\n2\\n3\\n4\\n5\\n1\") == \"1\"\nassert solution(\"6 3 5\\n1\\n2\\n3\\n4\\n5\\n6\") == \"2\""
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3 5\") == \"1\"\nassert solution(\"6 3 5\") == \"3\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3 5\n1\n2\n3\n3\n2\n1\n''') == \"3\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n6 3 5\n1\n2\n3\n3\n2\n1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2 3 5\n1\n2\n3\n3\n2\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 2 3\n1\n2\n3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n5\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n3\n1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n5\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n3\n3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n0 2\n1 3\n3 3\n7 5\n9 5''') == '12 3'\nprint('Congratulations, have fun!')"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5') == '12 3'\nassert solution('1\\n') == '1'\nassert solution('5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5') == '12 3'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '2 2'\nassert solution('5') == '3 2'\nassert solution('10') == '17 2'\n\n--\n\nfor i in range(int(input())):\n    p, q = list(map(int,input().split()))\n    for i in range(1, p):\n        if i * q >= p and p * i < p:\n            p = p * i\n            break\n    for i in range(1, q):\n        if i * p >= q and q * i < q:\n            q = q * i\n            break\n    print(p, q)\n    \n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1 2'\nassert solution('2') == '1 2'\nassert solution('3') == '1 2'\nassert solution('4') == '1 2'\nassert solution('5') == '1 2'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3 2'\nassert solution('5') == '12 3'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n0 2\\n1 2\\n3 3') == '3 2'\nassert solution('5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5') == '12 3'"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n2\\n') == '1 2'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3') == '3 2'\nassert solution('2\\n1\\n1') == '2 1'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"5\\n\"\n    \"0 2\\n\"\n    \"1 3\\n\"\n    \"3 3\\n\"\n    \"7 5\\n\"\n    \"9 5\\n\"\n) == \"12 3\"\nassert solution(\n    \"10\\n\"\n    \"0 2\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"3 2\\n\"\n    \"4 1\\n\"\n    \"5 1\\n\"\n    \"6 2\\n\"\n    \"7 2\\n\"\n    \"8 3\\n\"\n    \"9 3\\n\"\n) == \"7 3\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2 2'\nassert solution('5') == '12 3'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n0\n1 1\n1\n1 1\n1\n1''') == '100\\n000\\n010\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100\\n000\\n100"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\n''') == \"100\"\nassert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\n''') == \"001\"\nassert solution('''\n3\n1 0\n1\n1\n''') == \"000\"\nassert solution('''\n3\n0\n1 0\n1\n''') == \"100\"\nassert solution('''\n3\n1 1\n1\n1\n''') == \"010\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n0\n0\n3\nSample Output 3:\n100\n000\n01\n01\n01\n01\nSample Output 4:\n0000\n1001\n0010\n101\n010\n000\n100\n''') == '100'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"2\\n0\\n0\\n0\\n0\\n3\\n0\\n1 1\\n1\\n1 1\\n1\\n1\"\n    \"\\n1\\n1\\n1\\n1\\n\"\n    ) == \"0000\\n1001\\n0010\\n101\\n010\\n\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sample_input_1) == \"1001\"\nassert solution(sample_input_2) == \"0101\"\nassert solution(input) == \"10101\"\nprint('\"Run\" is good. \"Check\" is better.')\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n0\n0\n3\n''') == '100'\n\nassert solution('''\n2\n0\n1 1\n1\n1 1\n1\n1\n''') == '00101'\n\nassert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\n''') == '0010'\n\nprint('Test passed')"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n0\\n0\\n3\\n') == '100\\n000\\n01\\n01\\n01\\n01\\n100'\nassert solution('3\\n0\\n1 1\\n1\\n1 1\\n1\\n1\\n') == '0000\\n1001\\n0010\\n101\\n010\\n000\\n100'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(samples[0]) == '01100'\nassert solution(samples[1]) == '0000'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n0\n0\n1\n1\n''') == '100'\nassert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\nSample Input 3:\n3\n1\n1 1\n1\n1 1\n1\n1\nSample Output 3:\n100\n101\n010\n001\n\nSample Input 4:\n3\n1\n0\n0\n1\n0\n0\nSample Output 4:\n111\n011\n001\n''') == '100'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '100'\nassert solution('3') == '0100'\nassert solution('4') == '110100'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 1\n1 2\n2 3\n2 3''') == '2'\nprint('Everything passed!')"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n1 2\\n2 3\") == \"2\"\nassert solution(\"4 1\\n1 3\\n4 6\\n7 8\\n2 5\") == \"3\"\nprint('all test cases passed')"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 1\\n\"\n    \"1 2\\n\"\n    \"2 3\") == \"2\"\nassert solution(\n    \"4 1\\n\"\n    \"1 3\\n\"\n    \"4 6\\n\"\n    \"7 8\\n\"\n    \"2 5\") == \"3\""
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 1\") == \"3\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"2 3\") == \"2\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 1\n1 2\n2 3\n2 3''') == '2'\nassert solution('''4 1\n1 3\n4 6\n7 8\n2 5''') == '3'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(tuple(stdin.strip().split())) == \"2\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1\\n1 2\\n2 3\\n2 3\\n') == '2'\nassert solution('4 1\\n1 3\\n4 6\\n7 8\\n2 5\\n') == '3'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 1\n1 3\n4 6\n7 8\n2 5\n''') == '3'\n\nassert solution('''\n6 1\n1 2\n3 4\n3 6\n5 6\n7 8\n''') == '4'\n\nassert solution('''\n6 1\n1 2\n3 4\n3 6\n5 6\n7 8\n''') == '1'"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 1') == '3'\nassert solution('3 2') == '2'\nassert solution('4 2') == '3'"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 500') == '126.86989765'\nassert solution('5 6 300') == 'Impossible'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2 2\") == \"Impossible\"\nassert solution(\"5 6 500\") == \"90.00000000\"\nassert solution(\"5 6 500 -100 -100\") == \"Impossible\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 5 100\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\nSample Output 1:\") == \"90.00000000\"\nassert solution(\n    \"5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\nSample Output 2:\") == \"126.86989765\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 6 500\") == \"90.00000000\"\nassert solution(\"5 6 450\") == \"126.86989765\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6 500') == '90.00000000'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 400') == '126.86989765'\nassert solution('1 2') == 'Impossible'\nassert solution('1 2 3') == 'Impossible'\nassert solution('1 2 3 4') == 'Impossible'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n''') == '90.00000000'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n\"\"\") == \"90.00000000\"\nassert solution(\n\"\"\"\n5 6 1000\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n\"\"\") == \"129.8563624\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 300') == 'Impossible'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 6 500\") == \"90.00000000\"\nassert solution(\"5 6 450\") == \"126.86989765\"\nassert solution(\"1 2\") == \"Impossible\"\nassert solution(\"1\") == \"Impossible\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\nassert solution('123456789101112131415161718') == '101112131415161718'"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '1'\nassert solution('10') == '1'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''37\n45\n''') == '4'\nassert solution('''100\n30\n''') == '5'\nassert solution('''1000\n10\n''') == '4'\nassert solution('''10000\n10\n''') == '4'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"37\") == \"4\"\nassert solution(\"30014\") == \"7\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"37\") == \"4\"\nassert solution(\"30014\") == \"7\""
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3 1\n''') == '3.5'\n\nassert solution('''3 3 2\n''') == '4.9'\n\nprint('All test cases passed!')\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\nassert solution('10 4 2') == '8.25'\nprint('all tests passed')"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1\") == \"3.5\"\nassert solution(\"3 3 2\") == \"4.9\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2\") == \"4.9\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2 3 1\n\"\"\") == \"3.5\"\nassert solution(\"\"\"\n3 3 2\n\"\"\") == \"4.9\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n\n'''"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4'\nassert solution('2 1 5 1') == '3'\nassert solution('1 2 1 1') == '3'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 5 1 5\n''') == '19', 'Should count the number of coprime pairs of co-prime integers in interval $[a, b]$ and $[c, d]$.'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5 1 5') == '19'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '19'\nassert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 5 1 5\") == \"19\"\nassert solution(\"12 12 1 12\") == \"4\""
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 5 1 5\") == \"19\"\nassert solution(\"12 12 1 12\") == \"4\""
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 5\n''') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 5\") == \"4\"\nassert solution(\"1 12\") == \"4\"\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '4'\nassert solution('1 12') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 5\") == \"4\"\nassert solution(\"1 12\") == \"4\"\n\"\"\"\nimport sys\nimport os\nsys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))\nimport math\nimport base64"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"4\"\nassert solution([1, 5]) == \"4\"\nassert solution([1, 12]) == \"4\"\nassert solution([1, 12, 10]) == \"3\"\nassert solution([1, 12, 10, 15, 30]) == \"4\"\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n\nInput:\n\"car\"\nOutput:\n1\n\nInput:\n\"cocar\"\nOutput:\n2\n\"\"\"\n\nimport re\n\ninput1 = \"car\"\ninput2 = \"cocar\""
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n'''\n\n\nclass Solution:\n    def solution(self, stdin):\n        def helper(word):\n            d = {'a': 'a', 'b': '1', 'c': '2', 'd': '3', 'e': '4', 'f': '5', 'g': '6', 'h': '7', 'i': '8', 'j': '9', 'k': '0',\n                 'l': '1','m': '2', 'n': '3', 'o': '4', 'p': '5', 'q': '6', 'r': '7','s': '8', 't': '9', 'u': '0',\n                 'v': '1', 'w': '2', 'x': '3', 'y': '4', 'z': '5'}\n            ans = 0\n            for i in range(len(word)):\n                if word[i] in d.keys():\n                    ans = ans + d[word[i]]\n                else:\n                    ans = ans + '0'\n            return int(ans)\n\n        ans = 0\n        lst = stdin.split()\n        for i in range(len(lst)):\n            ans = ans + helper(lst[i])\n        return str(ans % 1000009)\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''car''') == '1'\nassert solution('''cocar''') == '2'\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"8\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 1\\n') == '8'\nassert solution('5\\n1000000 1 1 1 1\\n') == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n2 3 1\\n') == '5'\nassert solution('4\\n2 2 2 1\\n') == '1'"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n''') == '8'\n\nassert solution('''\n0\n3\n0\n1\n2\n''') == '1'\n\nassert solution('''\n0\n2\n3\n1\n''') == '0'\n\nassert solution('''\n0\n2\n3\n0\n''') == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n2\n2 4 4 2\n''') == '8'\nassert solution('''\n10\n
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '8'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"0\"\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4\n0 2 0 1\n\"\"\") == \"8\"\nassert solution(\"\"\"\n5\n1000000 1 1 1 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 2 0 1\\n\") == \"8\"\nassert solution(\"5\\n1000000 1 1 1 1\\n\") == \"0\""
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'zyz'\nassert solution('2') == '-1'\n\ninput = sys.stdin.read()\nn, k = map(int, input.split())"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\nprint(solution(input()))\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1') == 'zyz'\nassert solution('3 2') == 'zyz'\nassert solution('3 3') == 'zyz'\nassert solution('3 4') == 'zyz'\nassert solution('3 5') == 'zyz'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 10\n2 5\n3 4\n4 6\n5 7\n6 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\n17 19\n18 20\n19 21\n20 22\n21 23\n22 24\n23 25\n24 26\n25 27\n26 28\n27 29\n28 30\n29 31\n30 32\n31 33\n32 34\n33 35\n34 36\n35 37\n36 38\n37 39\n38 40\n39 41\n40 42\n41 43\n42 44\n43 45\n44 46\n45 47\n46 48\n47 49\n48 50\n49 51\n50 52\n51 53\n52 54\n53 55\n54 56\n55 57\n56 58\n57 59\n58 60\n59 61\n58 62\n57 63\n56 64\n55 65\n54 66\n53 67\n52 68\n51 69\n50 70\n49 71\n48 72\n47 73\n46 74\n45 75\n44 76\n43 77\n42 78\n41 79\n40 80\n39 81\n38 82\n37 83\n36 84\n35 85\n34 86\n33 87\n32 88\n31 89\n30 90\n29 91\n28 92\n27 93\n26 94\n25 95\n24 96\n23 97\n22 98\n21 99\n20 100\n19 101\n18 102\n17 103\n16 104\n15 105\n14 106\n13 107\n12 108\n11 109\n10 110\n9 111\n8 112\n7 113\n6 114\n5 115\n4 116\n3 117\n2 118\n1 119\n0 120\n''') == 'zyz':\n    print('test case passed')\nelse:\n    print('test case failed')\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\nprint(solution(input()))\n\n2-1 3-incremental\n2-1 4-incremental\n2-1 5-incremental\n2-1 6-incremental\n2-1 7-incremental\n2-1 8-incremental\n2-1 9-incremental\n2-1 10-incremental\n2-1 11-incremental\n2-1 12-incremental\n2-1 13-incremental\n2-1 14-incremental\n2-1 15-incremental\n2-1 16-incremental\n2-1 17-incremental\n2-1 18-incremental\n2-1 19-incremental\n2-1 20-incremental\n2-1 21-incremental\n2-1 22-incremental\n2-1 23-incremental\n2-1 24-incremental\n2-1 25-incremental\n2-1 26-incremental\n2-1 27-incremental\n2-1 28-incremental\n2-1 29-incremental\n2-1 30-incremental\n2-1 31-incremental\n2-1 32-incremental\n2-1 33-incremental\n2-1 34-incremental\n2-1 35-incremental\n2-1 36-incremental\n2-1 37-incremental\n2-1 38-incremental\n2-1 39-incremental\n2-1 40-incremental\n2-1 41-incremental\n2-1 42-incremental\n2-1 43-incremental\n2-1 44-incremental\n2-1 45-incremental\n2-1 46-incremental\n2-1 47-incremental\n2-1 48-incremental\n2-1 49-incremental\n2-1 50-incremental\n2-1 51-incremental\n2-1 52-incremental\n2-1 53-incremental\n2-1 54-incremental\n2-1 55-incremental\n2-1 56-incremental\n2-1 57-incremental\n2-1 58-incremental\n2-1 59-incremental\n2-1 60-incremental\n2-1 61-incremental\n2-1 62-incremental\n2-1 63-incremental\n2-1 64-incremental\n2-1 65-incremental\n2-1 66-incremental\n2-1 67-incremental\n2-1 68-incremental\n2-1 69-incremental\n2-1 70-incremental\n2-1 71-incremental\n2-1 72-incremental\n2-1 73-incremental\n2-1 74-incremental\n2-1 75-incremental\n2-1 76-incremental\n2-1 77-incremental\n2-1 78-incremental\n2-1 79-incremental\n2-1 80-incremental\n2-1 81-incremental\n2-1 82-incremental\n2-1 83-incremental\n2-1 84-incremental\n2-1 85-incremental\n2-1 86-incremental\n2-1 87-incremental\n2-1 88-incremental\n2-1 89-incremental\n2-1 90-incremental\n2-1 91-incremental\n2-1 92-incremental\n2-1 93-incremental\n2-1 94-incremental\n2-1 95-incremental\n2-1 96-incremental\n2-1 97-incremental\n2-1 98-incremental\n2-1 99-incremental\n2-1 100-incremental\n2-1 101-incremental\n2-1 102-incremental\n2-1 103-incremental\n2-1 104-incremental\n2-1 105-incremental\n2-1 106-incremental\n2-1 107-incremental\n2-1 108-incremental\n2-1 109-incremental\n2-1 110-incremental\n2-1 111-incremental\n2-1 112-incremental\n2-1 113-incremental\n2-1 114-incremental\n2-1 115-incremental\n2-1 116-incremental\n2-1 117-incremental\n2-1 118-incremental\n2-1 119-incremental\n2-1 120-incremental\n2-1 121-incremental\n2-1 122-incremental\n2-1 123-incremental\n2-1 124-incremental\n2-1 125-incremental\n2-1 126-incremental\n2-1 127-incremental\n2-1 128-incremental\n2-1 129-incremental\n2-1 130-incremental\n2-1 131-incremental\n2-1 132-incremental\n2-1 133-incremental\n2-1 134-incremental\n2-1 135-incremental\n2-1 136-incremental\n2-1 137-incremental\n2-1 138-incremental\n2-1 139-incremental\n2-1 140-incremental\n2-1 141-incremental\n2-1 142-incremental\n2-1 143-incremental\n2-1 144-incremental\n2-1 145-incremental\n2-1 146-incremental\n2-1 147-incremental\n2-1 148-incremental\n2-1 149-incremental\n2-1 150-incremental\n2-1 151-incremental\n2-1 152-incremental\n2-1 153-incremental\n2-1 154-incremental\n2-1 155-incremental\n2-1 156-incremental\n2-1 157-incremental\n2-1 158-incremental\n2-1 159-incremental\n2-1 160-incremental\n2-1 161-incremental\n2-1 162-incremental\n2-1 163-incremental\n2-1 164-incremental\n2-1 165-incremental\n2-1 166-incremental\n2-1 167-incremental\n2-1 168-incremental\n2-1 169-incremental\n2-1 170-incremental\n2-1 171-incremental\n2-1 172-incremental\n2-1 173-incremental\n2-1 174-incremental\n2-1 175-incremental\n2-1 176-incremental\n2-1 177-incremental\n2-1 178-incremental\n2-1 179-incremental\n2-1 180-incremental\n2-1 181-incremental\n2-1 182-incremental\n2-1 183-incremental\n2-1 184-incremental\n2-1 185-incremental\n2-1 186-incremental\n2-1 187-incremental\n2-1 188-incremental\n2-1 189-incremental\n2-1 190-incremental\n2-1"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'zyz'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2') == 'zyz', '1st'\nassert solution('1\\n3') == '-1', '2nd'\nassert solution('2\\n2') == 'zyz', '3rd'\nassert solution('2\\n3') == '-1', '4th'\nassert solution('3\\n2') == '-1', '5th'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == \"zyz\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\n\nstdin = '2 651'\nprint(solution(stdin))\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"10\") == \"10\"\nassert solution(\"6\") == \"4\"\nassert solution(\"12\") == \"4\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\") == \"4\"\nassert solution(\"10\\n0 10 0\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1\") == \"8\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0') == '4'\nassert solution('10\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0') == '8'\nprint('Congratulations, you passed all tests!')\n\n'''\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1\") == \"4\"\nassert solution(\"10\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1\") == \"8\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3 2 1') == '1'\nassert solution('10\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1') == '4'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('6') == '1'\nassert solution('10') == '2'\nassert solution('11') == '3'\nassert solution('12') == '1'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0') == '4'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('10') == '1'\nassert solution('6') == '4'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n\") == \"4\"\nassert solution(\"10\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1\") == \"8\""
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == '4'"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 4 3\n3 4 5 7\n1 2 10\n''') == '0'\nassert solution('''\n2 4 3\n3 4 5 7\n1 2 10\n''') == '2'\nassert solution('''\n3 5 2\n1 4 7 9 11\n2 3\n''') == '2'"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3\\n4 5 6\\n7 8 9') == '0'\nassert solution('2 4 3\\n5 6 7 8\\n1 2 10') == '1'\nprint(solution(''))\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '1'\nassert solution('3 2 2') == '2'\nassert solution('3 0 0') == '-1'\nassert solution('3 1 2') == '-1'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4 3\") == \"0\"\nassert solution(\"3 5 2\") == \"2\"\nprint(\"Solution:\")\nprint(solution(*TEST_CASES[0]))\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\nassert solution('1 2 10') == '-1'"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4 3\\n3 4 5 7\\n1 2 10\\n\") == \"0\"\nassert solution(\"3 5 2\\n1 4 7 9 11\\n2 3\\n\") == \"2\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 4 3\n3 4 5 7\n1 2 10\n''') == '0'\nassert solution('''3 5 2\n1 4 7 9 11\n2 3\n''') == '2'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 2\n3 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 2\n3 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1 1\n2 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 1\n1 1\n\"\"\") == \"1\""
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '3'"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\n3 2\n''') == '1'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 1\n1\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3 2\n3 2\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3 3\n3 2\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_string) == '3'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(s1) == \"2\"\nassert solution(s2) == \"3\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3\n3 2\n''') == '1'\nassert solution('''1 2\n3 4\n''') == '3'\nprint('PASSED')\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '3'\nassert solution('10 2') == '10'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3\n3 2\n''') == '1'\nassert solution('''1 2\n3 4\n''') == '3'\nassert solution('''4 4\n2 2\n''') == '2'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"5\") == \"24\"\nassert solution(\"8\") == \"1296\""
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\nI\nII\nIII\nIV''') == '1'\nassert solution('''2\nI\nII\nIII\nIV''') == '1'\nassert solution('''3\nI\nII\nIII\nIV''') == '2'\nassert solution('''5\nI\nII\nIII\nIV''') == '4'\nassert solution('''5\nI\nII\nIII\nIV''') == '24'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2', '3'\nassert solution('4') == '4', '4'\nassert solution('5') == '24', '5'\nprint('All test cases passed')\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == \"24\"\nassert solution('1') == \"1\"\nprint(solution(input()))"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\nIVO\nJASNA\nJOSIPA\n''') == '4'\nassert solution('''\n5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA\n''') == '24'\n''')"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\nIVO\\nJASNA\\nJOSIPA\\n') == '4'\nassert solution('5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\\n') == '24'"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA''') == '4'\n\nassert solution('''3\nIVO\nJASNA\nJOSIPA''') == '4'\n\nassert solution('''10\nMARICA\nMARTA\nMARA\nMATO\nMARTINA\nMARTINI\nMARICIA\nMARTINI\nMARATA\nMARIA''') == '25'\n\nassert solution('''50\nMARICA\nMARTA\nMARA\nMATO\nMARTINA\nMARTINI\nMARICIA\nMARTINI\nMARATA\nMARIA\nMARTINA\nMARTA\nMATO\nMARTINA\nMARTINI\nMARICIA\nMARATA\nMARIA''') == '265'\n\nassert solution('''100\nMARICA\nMARTA\nMARA\nMATO\nMARTINA\nMARTINI\nMARICIA\nMARTINI\nMARATA\nMARIA\nMARTINA\nMARTA\nMATO\nMARTINA\nMARTINI\nMARICIA\nMARATA\nMARIA''') == '2740'"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '3'\n\nassert solution('''\n3\n2 2 3 8\n3 1 5 6\n1 9 4 7\n''') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '3'\nassert solution('''\n4 5\n7 6 8 9\n9 8 7 6\n''') == '23'\nassert solution('''\n4\n10 12 12 11\n11 12 14 15\n14 12 10 11\n''') == '23'\nassert solution('''\n4\n12 12 11 11\n11 12 14 15\n14 12 10 11\n''') == '23'\nassert solution('''\n4\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\\n1 2 3\\n2 3 4\\n3 4 5\\n\") == \"3\"\nassert solution(\"3\\n2 2 3\\n3 1 5 6\\n1 9 4 7\\n\") == \"39\"\nassert solution(\"5\\n1 2 3 4 5\\n6 4 2 4 5\\n6 1 3 2 5\\n1 6 3 5 2\\n1 1 5 5 3\\n\") == \"53\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '3'\nassert solution('2') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n2 2 3 1\n3 1 5 6\n1 9 4 7\n''') == '3'\n\nassert solution('''\n3\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '39'\n\nassert solution('''\n4\n2 2 3 1\n3 1 5 6\n1 9 4 7\n''') == '39'\n\nassert solution('''\n7\n1 2 1 1 1 2 2\n3 1 3 1 1 3 2\n5 1 3 1 1 3 2\n5 1 2 1 1 3 2\n3 2 1 1 1 2 2\n3 2 3 1 1 3\n5 1 2 3 1 1 2\n''') == '0'\n\nassert solution('''\n1\n1 1\n''') == '1'"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n1 2 3 1\n2 3 4 1\n3 4 5 1''') == '3'\nassert solution('''4\n2 2 3 1\n3 1 5 6\n1 9 4 7\nSample Output 3:\n39''') == '3'\nassert solution('''3\n1 2 3 2\n2 3 4 1\n3 4 5 1''') == '5'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '39'\nassert solution('''\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '39'\n\n'''\nfrom collections import defaultdict"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '0'\nassert solution('3') == '2'\nassert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1') == '3'\nassert solution('5\\n2 2 3 1\\n3 1 5 6\\n1 9 4 7') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '39'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '5.2696518641'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n3 2 -4 1\n3 3 -4 1\n1 4 -1\n3 4 -1\n4 5 -1\n2 2 -1\n2 3 -1\n2 5 -1\n2 6 -1\n2 7 -1\n2 8 -1\n2 9 -1\n2 10 -1\n2 11 -1\n2 12 -1\n2 13 -1\n2 14 -1\n2 15 -1\n2 16 -1\n2 17 -1\n2 18 -1\n2 19 -1\n2 20 -1\n2 21 -1\n2 22 -1\n2 23 -1\n2 24 -1\n2 25 -1\n2 26 -1\n2 27 -1\n2 28 -1\n2 29 -1\n2 30 -1\n2 31 -1\n2 32 -1\n2 33 -1\n2 34 -1\n2 35 -1\n2 36 -1\n2 37 -1\n2 38 -1\n2 39 -1\n2 40 -1\n2 41 -1\n2 42 -1\n2 43 -1\n2 44 -1\n2 45 -1\n2 46 -1\n2 47 -1\n2 48 -1\n2 49 -1\n2 50 -1\n2 51 -1\n2 52 -1\n2 53 -1\n2 54 -1\n2 55 -1\n2 56 -1\n2 57 -1\n2 58 -1\n2 59 -1\n2 60 -1\n2 61 -1\n2 62 -1\n2 63 -1\n2 64 -1\n2 65 -1\n2 66 -1\n2 67 -1\n2 68 -1\n2 69 -1\n2 70 -1\n2 71 -1\n2 72 -1\n2 73 -1\n2 74 -1\n2 75 -1\n2 76 -1\n2 77 -1\n2 78 -1\n2 79 -1\n2 80 -1\n2 81 -1\n2 82 -1\n2 83 -1\n2 84 -1\n2 85 -1\n2 86 -1\n2 87 -1\n2 88 -1\n2 89 -1\n2 90 -1\n2 91 -1\n2 92 -1\n2 93 -1\n2 94 -1\n2 95 -1\n2 96 -1\n2 97 -1\n2 98 -1\n2 99 -1\n2 100 -1\n2 101 -1\n2 102 -1\n2 103 -1\n2 104 -1\n2 105 -1\n2 106 -1\n2 107 -1\n2 108 -1\n2 109 -1\n2 110 -1\n2 111 -1\n2 112 -1\n2 113 -1\n2 114 -1\n2 115 -1\n2 116 -1\n2 117 -1\n2 118 -1\n2 119 -1\n2 120 -1\n2 121 -1\n2 122 -1\n2 123 -1\n2 124 -1\n2 125 -1\n2 126 -1\n2 127 -1\n2 128 -1\n2 129 -1\n2 130 -1\n2 131 -1\n2 132 -1\n2 133 -1\n2 134 -1\n2 135 -1\n2 136 -1\n2 137 -1\n2 138 -1\n2 139 -1\n2 140 -1\n2 141 -1\n2 142 -1\n2 143 -1\n2 144 -1\n2 145 -1\n2 146 -1\n2 147 -1\n2 148 -1\n2 149 -1\n2 150 -1\n2 151 -1\n2 152 -1\n2 153 -1\n2 154 -1\n2 155 -1\n2 156 -1\n2 157 -1\n2 158 -1\n2 159 -1\n2 160 -1\n2 161 -1\n2 162 -1\n2 163 -1\n2 164 -1\n2 165 -1\n2 166 -1\n2 167 -1\n2 168 -1\n2 169 -1\n2 170 -1\n2 171 -1\n2 172 -1\n2 173 -1\n2 174 -1\n2 175 -1\n2 176 -1\n2 177 -1\n2 178 -1\n2 179 -1\n2 180 -1\n2 181 -1\n2 182 -1\n2 183 -1\n2 184 -1\n2 185 -1\n2 186 -1\n2 187 -1\n2 188 -1\n2 189 -1\n2 190 -1\n2 191 -1\n2 192 -1\n2 193 -1\n2 194 -1\n2 195 -1\n2 196 -1\n2 197 -1\n2 198 -1\n2 199 -1\n2 200 -1\n2 201 -1\n2 202 -1\n2 203 -1\n2 204 -1\n2 205 -1\n2 206 -1\n2 207 -1\n2 208 -1\n2 209 -1\n2 210 -1\n2 211 -1\n2 212 -1\n2 213 -1\n2 214 -1\n2 215 -1\n2 216 -1\n2 217 -1\n2 218 -1\n2 219 -1\n2 220 -1\n2 221 -1\n2 222 -1\n2 223 -1\n2 224 -1\n2 225 -1\n2 226 -1\n2 227 -1\n2 228 -1\n2 229 -1\n2 230 -1\n2 231 -1\n2 232 -1\n2 233 -1\n2 234 -1\n2 235 -1\n2 236 -1\n2 237 -1\n2 238 -1\n2 239 -1\n2 240 -1\n2 241 -1\n2 242 -1\n2 243 -1\n2 244 -1\n2 245 -1\n2 246 -1\n2 247 -1\n2 248 -1\n2 249 -1\n2 250 -1\n2 251 -1\n2 252 -1\n2 253 -1\n2 254 -1\n2 255 -1\n2 256 -1\n2 257 -1\n2 258 -1\n2 259 -1\n2 260 -1\n2 261 -1\n2 262 -1\n2 263 -1\n2 264 -1\n2 265 -1\n2 266 -1\n2 267 -1\n2 268 -1\n2 269 -1\n2 270 -1\n2 271 -1\n2 272 -1\n2 273 -1\n2 274 -1\n2 275 -1\n2 276 -1\n2 277 -1\n2 278 -1\n2 279 -1\n2 280 -1\n2 281 -1\n2 282 -1\n2 283 -1\n2 284 -1\n2 285 -1\n2 286 -1\n2 287 -1\n2 288 -1\n2 289 -1\n2 290 -1\n2 291 -1\n2 292 -1\n2 293 -1\n2 294 -1\n2 295 -1\n2 296 -1\n2 297 -1\n2 298 -1\n2 299 -1\n2 300 -1\n2 301 -1\n2 302 -1"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '5.2696518641'\nassert solution('1') == '9'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n9 4 4 -2 0 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\n''') == '9'\nassert solution('''5\n8 4 4 -2 0 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\n''') == '5.2696518641'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\n''') == '5.2696518641'\nassert solution('''\n1\n8 9 3 -14 -14 14 -14 0 20\n''') == '9'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n2 1\n3 5\n''') == '7.0792771484'\nassert solution('''\n1\n2 5\n6 1\n''') == '7.977148416'\n\nassert solution('''\n1\n10 10\n2 3\n5 3\n6 3\n''') == '1.0167'\nassert solution('''\n1\n10 10\n2 3\n5 3\n6 3\n6 3\n''') == '0.9713'\nassert solution('''\n1\n10 10\n2 3\n5 3\n6 3\n6 5\n''') == '1.0301'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\n''') == '5.2696518641'\nassert solution('''1\n8 9 3 -14 -14 14 -14 0 20\n''') == '9'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '5.2696518641'\nassert solution('1') == '9'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"5.2696518641\"\nassert solution(\"1\") == \"9\""
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"8\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '8'\nassert solution('5') == '4'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1 1\\n2 0 2\\n3 1 1\\n') == '1\\n8\\n4'\nassert solution('3\\n4 1 1\\n5 2 3\\n5 0 3\\n') == '6\\n24\\n4'\nprint('All test cases passed!')"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('2 0 2') == '8'\nassert solution('3 1 1') == '4'\nassert solution('4 1 1') == '24'\n\nimport sys\nimport io\nsys.stdin = io.StringIO(input())"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"8\"\nassert solution(\"5\") == \"4\"\nassert solution(\"6\") == \"24\"\nassert solution(\"7\") == \"1\""
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1 1\\n2 0 2\\n3 1 1') == '1'\nassert solution('3\\n4 1 1\\n5 2 3\\n5 0 3') == '8'\n\nimport sys\nimport os"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1 1\\n2 0 2\\n3 1 1\") == \"1\"\nassert solution(\"3\\n4 1 1\\n5 2 3\\n5 0 3\") == \"4\"\nassert solution(\"3\\n7 1 1\\n8 2 3\\n8 0 3\") == \"24\"\nassert solution(\"3\\n1 1 1\\n1 1 1\\n1 1 1\") == \"-1\""
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 1\\n2 0 2\\n3 1 1\") == \"1\"\nassert solution(\"3\\n4 1 1\\n5 2 3\\n5 0 3\") == \"8\"\nassert solution(\"3\\n6 1 1\\n5 2 3\\n5 0 3\") == \"4\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 1 1\n2 0 2\n3 1 1''') == '1'\n\nassert solution('''3\n4 1 1\n5 2 3\n5 0 3''') == '8'\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 1 1\n2 0 2\n3 1 1''') == '1'\nassert solution('''3\n4 1 1\n5 2 3\n5 0 3\n''') == '6'\nassert solution('''4\n2 1 1\n4 0 2\n5 0 1\n5 1 3\n''') == '4'\nassert solution('''3\n1 1 1\n2 0 2\n3 1 1\n''') == '-1'\nassert solution('''5\n1 1 1\n3 2 3\n3 2 1\n4 2 1\n4 1 3\n''') == '8'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"6 6\") == \"240\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2\n''') == '3'\nassert solution('''\n6 6\n''') == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '4 2\\n') == '4\\n'\nassert solution(\n    '5 6\\n') == '240\\n'\nassert solution(\n    '5 5\\n') == '120\\n'\nassert solution(\n    '5 5\\n') == '120\\n'\nassert solution(\n    '5 5\\n') == '120\\n'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 2\n4''') == '3'\nassert solution('''6 6\n4''') == '240'\nprint('\"Run\" is good. Great job!')"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"8\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"6 6\") == \"240\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\nprint('You are a wise guy and you have succeeded in proving your mathematical skills.')\nprint('Congratulations!')\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([3,2]) == \"3\"\nassert solution([6,6]) == \"240\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 2\n5 2\n5 2\n5 2\n5 2''') == '3'\nprint('all done')"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\", solution(\"SEND+MORE=MONEY\")\nassert solution(\"A+A=A\") == \"impossible\"\nassert solution(\"A+A=B\") == \"impossible\""
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\n\nNOTE: The input is a JSON-encoded string of the form'string'.\n\n\"\"\"\nimport json\nimport math\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\n\nassert solution('A+A=A') == 'impossible'\n\n'''"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\""
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''SEND+MORE=MONEY\nA+A=A\n''') == '9567+1085=10652'\nassert solution('''SEND+MORE=MONEY\nC+B=A\n''') == 'impossible'\nprint(solution('''SEND+MORE=MONEY\nA+A=A\n'''))"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n0 1 2 3') == '4'\nassert solution('5\\n1 1 2 1 1') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 1 2 3\n''') == '14'\nassert solution('''\n5\n1 1 2 1 1\n''') == '1'"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('6') == '2'\nassert solution('7') == '0'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n0 1 2 3\n''') == '14'\nassert solution('''\n5\n1 1 2 1 1\n''') == '1'\nassert solution('''\n4\n1 1 2 3\n''') == '1'\nassert solution('''\n5\n1 2 2 1 1\n''') == '1'\nassert solution('''\n10\n1 3 1 2 4 1 1 1 2 1\n''') == '3'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '5'\nassert solution('5') == '1'\nassert solution('6') == '6'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 1 2 3\") == \"14\"\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 1 2 1 1') == '1'\nassert solution('4\\n0 1 2 3') == '14'\n\nimport re\nn = int(input())\n\nls = list(map(int, input().split()))"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 1 2 1 1') == '1'\nassert solution('5\\n0 1 2 3 4') == '14'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n0 1 2 3\n''') == '14'\n\nassert solution('''\n5\n1 1 2 1 1\n''') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n0 1 2 3\n''') == '14'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88', \"error on sample 1\"\nassert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '-1', \"error on sample 2\"\nassert solution('''\n5 5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '42', \"error on sample 3\"\nassert solution('''\n5 5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '9', \"error on sample 4\""
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3\\n2 1 2\\n0 0 1\\n0 0 2\\n5 1 2 3\\n0 0 4\\n0 0 5\\n') == '88', solution('5 3\\n2 1 2\\n0 0 1\\n0 0 2\\n5 1 2 3\\n0 0 4\\n0 0 5\\n')\nassert solution('5 3\\n2 1 2\\n0 0 1\\n0 4 2\\n5 1 2 3\\n0 0 4\\n0 0 5\\n') == '-1', solution('5 3\\n2 1 2\\n0 0 1\\n0 4 2\\n5 1 2 3\\n0 0 4\\n0 0 5\\n')\nassert solution('5 5\\n6 6 6\\n7 7 7\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '-1', solution('5 5\\n6 6 6\\n7 7 7\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n')\nassert solution('5 4\\n3 2 5\\n0 0 2\\n0 0 3\\n0 0 5\\n') == '-1', solution('5 4\\n3 2 5\\n0 0 2\\n0 0 3\\n0 0 5\\n')\nassert solution('5 4\\n3 2 5\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '-1', solution('5 4\\n3 2 5\\n1 1 1\\n1 1 1\\n1 1 1\\n')\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1\\n0 2 5\\n1 1 5\\n3 2 6\\n4 4 8') == '88'\nassert solution('1 1\\n0 0 5\\n1 0 5\\n3 2 6\\n4 4 8') == '-1'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n\"\"\") == \"88\"\nassert solution(\"\"\"\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n\"\"\") == \"-1\""
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\\n\") == \"88\""
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\") == \"88\"\nassert solution(\"2 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\") == \"-1\""
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == \"88\"\nassert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == \"-1\"\nassert solution('''\n1 3\n2 2 3\n4 3 5\n3 2 4\n''') == \"0\"\nassert solution('''\n1 3\n0 2 3\n4 3 5\n3 2 4\n''') == \"-1\"\nassert solution('''\n1 3\n2 2 3\n4 3 5\n3 2 4\n''') == \"-1\"\n'''"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 4') == \"88\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 0 7 8\n7 0 0 10\n''') == '88'\nassert solution('''\n1 1\n0 0\n0 0\n''') == '-1'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == \"88\"\n\nassert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 0 7 8\n7 0 0 10\n''') == \"-1\"\n\nassert solution('''\n10 10\n2 3 1 4 5 6 8 7 0 9 1 2\n0 0 0 7 0 0 0 2 0 0 0\n0 0 0 8 0 0 0 0 0 0 0\n0 0 0 9 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n''') == \"111\"\n\nassert solution('''\n10 10\n2 3 1 4 5 6 8 7 0 9 1 2\n0 0 0 7 0 0 0 2 0 0 0\n0 0 0 8 0 0 0 0 0 0 0\n0 0 0 9 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n''') == \"6\"\n\nassert solution('''\n10 10\n2 3 1 4 5 6 8 7 0 9 1 2\n0 0 0 7 0 0 0 2 0 0 0\n0 0 0 8 0 0 0 0 0 0 0\n0 0 0 9 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n''') == \"71\""
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n1 1\n1 1''') == '0.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0.000'\nassert solution('1 1') == '0.000'\nassert solution('1 99999') == '9999700002.000'"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 1\n1 1\n1 1\n''') == '0.000'\nassert solution('''\n3\n99999 99999\n9999 99999\n9999 99999\n''') == '9999700002.000'\nassert solution('''\n3\n1 1\n1 1\n1 1\n''') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"9999700002.000\"\nassert solution(\"2 2\") == \"999999999.000\"\nassert solution(\"2 1 1\") == \"0.000\"\nassert solution(\"2 1 99999\") == \"9999700002.000\"\nprint('All tests passed')\n\n\"\"\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1\n1 1\n1 1\n''') == '3.000'\nassert solution('''3\n0 0\n0 0\n0 0\n''') == '0.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n1 1') == '0.000'\nassert solution('2\\n1 99999') == '9999700002.000'"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n1 1\n1 1\n''') == '0.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"9999700002.000\""
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 1\n1 1\n''') == '0.000'\nassert solution('''\n2\n1 99999\n99999 99999\n''') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n1 1\n1 1\n''') == '0.000'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 8 1 6') == '3'\nassert solution('3 4 1 2') == '3'\nassert solution('5 4 2 1') == '3'\nassert solution('4 2 3') == 'Infinity'\nassert solution('1 2 3') == 'Infinity'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == '3'"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 4 1 2\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\nassert solution('''\n10 4 1 2\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == 'Infinity'\nassert solution('''\n3 4 1 2\n1 2 6\n1 3 2\n1 2 7\n2 3 3\n2\n1 2\n''') == '3'\nassert solution('''\n1 1 1\n1 1 1\n1 1 1\n''') == 'Impossible'"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\nassert solution('''\n3 4 1 2\n1 2 6\n1 3 2\n1 2 7\n2 3 3\n2\n1 2\n''') == 'Infinity'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7 5 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\nassert solution('''\n10 4 2 1 2 3\n2 4 8\n1 5 6\n5 1 9\n7 7 8\n7 4 3\n5 3 4\n2 5 2\n8 3 3\n5 1 6\n5 2 2\n7 4 8\n7 5 1\n5 6 4\n5 3 4\n5 7 2\n''') == '3'"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\nassert solution('''\n3 4 1 2\n1 2 6\n1 3 2\n1 2 7\n2 3 3\n2\n1 2\n''') == 'Infinity'\nassert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '4'\nassert solution('''\n3 4 1 2\n1 2 6\n1 3 2\n1 2 7\n2 3 3\n2\n1 2\n''') == 'Infinity'\nassert solution('''\n1 10\n1 5 4 8\n''') == '10'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4 1 2') == '3'\nassert solution('6 8 1 6') == '3'\nassert solution('5 6 1 3') == 'Impossible'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 8 1 6\") == \"3\"\nassert solution(\"3 4 1 2\") == \"Infinity\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\"\nassert solution(\"\"\"6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\"\"\") == \"2\"\nassert solution(\"\"\"6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\"\"\") == \"Impossible\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == 'impossible'\nassert solution('3 1') == '000'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1') == 'impossible'\nassert solution('3 2') == 'impossible'\nassert solution('5 1') == '000'\nassert solution('5 2') == '001'\nassert solution('10 1') == '010'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 1\n1\nSample Output 2:\n001\n010\n011\n100\n101\n110\n111\n''') == 'impossible'\n\nassert solution('''\n6 1\n1\nSample Output 2:\n000\n001\n011\n010\n110\n111\n101\n100\n''') == 'impossible'\n\nassert solution('''\n8 2\n1\n2\nSample Output 2:\n001\n000\n010\n011\n100\n101\n110\n111\n''') == 'impossible'\n\nassert solution('''\n6 2\n1\n2\nSample Output 2:\n100\n011\n010\n000\n111\n110\n001\n''') == 'impossible'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1') == 'impossible'\nassert solution('3 1') == '000'\nassert solution('4 1') == '001'\nassert solution('5 1') == '011'\nassert solution('6 1') == '010'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == 'impossible'\nassert solution('4 1') == '0000'\nassert solution('5 1') == '0001'\nassert solution('6 1') == '0001'\nassert solution('7 1') == '00101'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"impossible\""
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 1\n1\n''') == \"impossible\"\nassert solution('''4 1\n1\n2\n3\n''') == \"000\"\nassert solution('''4 2\n1\n2\n3\n''') == \"010\"\nassert solution('''4 2\n2\n1\n3\n''') == \"111\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 1\n6''') == 'impossible'\nassert solution('''3 1\n1''') == '000'\nassert solution('''5 1\n1''') == '001'\nassert solution('''4 1\n1''') == '011'\nassert solution('''8 1\n1\n2\n3\n4\n5\n6\n7''') == '1010111'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''8 1\n4\n2 1 1 1\n4 1 1 1\n2 1 1 1\n4 1 1 1\n2 1 1 1\n4 1 1 1\n4 1 1 1''') == '011001101'\nassert solution('''7 1\n2\n1 1 1 1\n2 1 1 1\n1 1 1 1\n2 1 1 1\n1 1 1 1\n2 1 1 1''') == '000110110'\nassert solution('''4 1\n1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '000111100'\nassert solution('''5 1\n1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1''') == '111111101'\nassert solution('''5 1\n1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1''') == '0001111011'\n\nfrom collections import deque\n\nn, p = map(int, input().split())\npalettes = {p}\n\nq = deque([(p, 0, 0)])\n\nwhile q:\n    palette, idx, level = q.popleft()\n    if idx == n:\n        print('impossible')\n    else:\n        if palette == palettes:\n            print(level)\n        else:\n            q.append((palette, idx + 1, level + 1))\n            q.append((palette ^ (1 << idx), idx + 1, level + 1))\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 1\") == \"impossible\"\nassert solution(\"3 1\") == \"000\"\nassert solution(\"5 1\") == \"0001\"\nassert solution(\"7 1\") == \"11111\"\nassert solution(\"11 1\") == \"111111\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '1'\nassert solution('90') == '10'\nassert solution('100') == '11'\nassert solution('1000') == '1009'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''100\n90''') == '10'\nassert solution('''10\n100''') == '1'\nassert solution('''10\n10''') == '0'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '1'\nassert solution('90') == '10'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n''') == '1'\n\nassert solution('''\n2\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n''') == '2'\n\nassert solution('''\n5\n10\n8\n4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n''') == '5'\n\nassert solution('''\n5\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n''') == '9'\n\nassert solution('''\n14\n9\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n''') == '14'"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''10\n99''') == '1'\nassert solution('''90\n10''') == '10'"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"2\"\nassert solution(\"111\") == \"4\"\nassert solution(\"999\") == \"8\"\nassert solution(\"10000\") == \"19\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '1'\nassert solution('90') == '10'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '2'\nassert solution('90') == '10'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '2'\nassert solution('90') == '10'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"1\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n2 3 3\n4 1 10\n2 7 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n\"\"\") == \"1\"\n\nassert solution(\"\"\"5\n3 1 3 3\n5 8 7 10\n4 1 2 6\n\"\"\") == \"0\""
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2\n3 3\n4 1 10\n2 7 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n2 3 3\n4 1 10\n2 7 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n2 1 3 2\n1 2 3 4\n2 3 2 5\n3 1 4 4\n3 3 3 5\n4 1 3 3\n1 4 2 4\n''') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3\n2 3 3\n4 1 10\n2 7 3\n\"\"\") == \"2\"\nassert solution(\"\"\"4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n\"\"\") == \"1\"\nassert solution(\"\"\"5\n3 1 3 3\n5 8 7 10\n4 1 2 6\n\"\"\") == \"0\"\nassert solution(\"\"\"3\n4 1 2 3\n3 1 4 5\n6 7 8 9\n\"\"\") == \"0\"\nassert solution(\"\"\"4\n3 1 2 3\n4 1 4 5\n6 7 8 9\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(s) == \"2\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n3 1 3 3\\n5 8 7 10\\n4 1 2 6\\n') == '1'\nassert solution('5\\n3 1 3 3\\n5 8 7 10\\n4 1 2 6\\n') == '2'\nassert solution('6\\n3 1 3 3\\n5 8 7 10\\n4 1 2 6\\n') == '3'"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '1'\nassert solution('''5\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '2'\nassert solution('''6\n2 1 2 4 1 3\n7 1 3 5 8\n4 1 1 3 4\n3 4 1 3\n5 7 1 1\n5 7 1 3\n''') == '3'\nassert solution('''5\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 1') == '7'\nassert solution('9 3') == '11'\nassert solution('10 5') == '16'\nassert solution('11 7') == '19'\n\n'''\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('beginning') == '5'\nassert solution('velvet') == '7'\n\nclass TestSolution:\n    def test_solution(self):\n        pass"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"beginning\") == \"5\"\nassert solution(\"velvet\") == \"7\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('9 3') == '5'\nassert solution('6 1') == '7'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('8') == '11'\nassert solution('9') == '17'\nassert solution('2') == '0'\nassert solution('10') == '11'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"9 3\") == \"5\"\nassert solution(\"6 1\") == \"7\"\n\"\"\"\n\n###############################################################################\nimport sys\nimport math\nimport os\nimport random\nimport re\nimport timeit\n\n###############################################################################\n###############################################################################\n## Solution\n###############################################################################\n###############################################################################\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('beginning') == '5'\nassert solution('velvet') == '7'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\nbeginning\n1 5\n4 8\n1 9\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n1\nvelvet\n1 6\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n1\n5\n4 8\n1 9\n\"\"\") == \"11\""
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"8\""
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('9 3') == '5'\nassert solution('6 1') == '7'\nassert solution('9 9') == '16'\n\n\"\"\"\n\nN, Q = map(int, input().split())\nS = input()\n\nfor i in range(Q):\n    L, R = map(int, input().split())\n    print(len([i for i in range(L,R+1) if i in S[L-1:R]]))\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"23\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 4\n3 1\n2 2\n1 1\n''') == '2'\nassert solution('''\n3 4\n1 1\n2 2\n1 1\n''') == '1'\nassert solution('''\n3 4\n1 23\n2 17\n1 1\n''') == '23'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1\n3 2\n2 4\n''') == '3'\nassert solution('''\n2 2\n3 2\n1 1\n''') == '4'\nassert solution('''\n2 2\n1 1\n''') == '3'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3\n1 23\n2 17\n''') == '23'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 1\n2 1\n1 2\n1 3\n3 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10 9\n1 1\n2 1\n3 1\n3 2\n3 2\n3 2\n4 2\n4 2\n4 2\n4 2\n5 1\n\"\"\") == \"10\"\nassert solution(\"\"\"\n5 3\n2 2\n1 1\n1 3\n1 3\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4') == '2'\nassert solution('2 3') == '23'\nprint('All tests passed.')\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '23'\nassert solution('3') == '26'\nassert solution('4') == '27'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 4\n3 1\n2 2\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 3\n1 23\n2 17\nSample Output 3:\n23\n\nSample Input 4:\n1 4\n1 5\n2 6\n3 7\n4 8\nSample Output 4:\n8\n\nSample Input 5:\n1 1\n3 3\nSample Output 5:\n3\n\nSample Input 6:\n2 4\n1 5\n3 6\n2 7\nSample Output 6:\n5\n\nSample Input 7:\n5 3\n1 5\n2 6\n3 7\n4 8\nSample Output 7:\n8\n\nSample Input 8:\n10 10\n1 2\n3 4\n5 6\n7 8\n9 10\nSample Output 8:\n0\n\nSample Input 9:\n10 10\n2 3\n3 4\n1 5\n6 7\n7 8\n9 10\nSample Output 9:\n0\n\nSample Input 10:\n1 1\n3 3\nSample Output 10:\n3\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n1 3\n2 2\n1 1\n''') == '23'\nassert solution('''\n3 3\n1 3\n2 2\n1 1\n''') == '23'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3\n''') == '0.0000000000'\nassert solution('''\n4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3\n''') == '0.0000000000'\n'''"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0.0000000000'\nassert solution('2') == '0.0000000000'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == \"0.0000000000\"\nassert solution('2.0') == \"0.0000000000\"\nassert solution('2.000') == \"0.0000000000\"\n\nprint(solution('2.00000'))\nprint(solution('2.0'))\nprint(solution('2.000'))\n\nprint(solution('4'))\nprint(solution('6'))\nprint(solution('7'))\n\nprint(solution('1 1 2 1'))\nprint(solution('2 1 3 4'))\nprint(solution('6 6 5 3'))\nprint(solution('7 6 5 3'))\nprint(solution('8 7 5 3'))\nprint(solution('7 9 8 7'))\n\nprint(solution('3 5 -3 -1 2'))\nprint(solution('3 5 -2 -1 2'))\nprint(solution('5 5 5 5'))\nprint(solution('1 1 1 1'))\nprint(solution('3 3 3 3'))\nprint(solution('6 6 6 6'))\nprint(solution('8 8 8 8'))\nprint(solution('5 5 5 5'))\nprint(solution('2 2 2 2'))\nprint(solution('10 10 10 10'))\n\nprint(solution('10 10 10 10'))\nprint(solution('8 8 8 8'))\nprint(solution('10 10 10 10'))\nprint(solution('9 9 9 9'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 8 8 8'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 8 8 8'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\nprint(solution('7 7 7 7'))\nprint(solution('8 8 8 8'))\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3\n''') == '0.0000000000'\nassert solution('''\n6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\n''') == '9.476048311178'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2 3\\n2 4\\n0 2\\n-2 1\\n4 5\\n-2 2\\n6 5\\n-2 4\\n7 0\\n') == '0.0000000000000000000000000000000000000000'\nassert solution('4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\\n') == '0.0000000000'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n1 0\n2 0\n2 2\n0 2\n0 -1 0 3\n\"\"\") == \"0.0000000000\""
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\") == \"0.0000000000\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '0.0000000000'\nassert solution('6') == '9.476048311178'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\n''') == '0.0000000000'\nassert solution('''\n9\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\n''') == '9.476048311178'"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3\n''') == '0.0000000000'\n\nassert solution('''\n6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\n''') == '9.476048311178'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '8.0000000000'\nassert solution('5 2 0 1 1 0 2') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n\") == \"8.0000000000\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n0.0 0\\n-0.2 0') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n0.2 0.00\n0 -0.2\n0.0 0\n-0.2 0\n0 0.20''') == '8.0000000000'\nassert solution('''5\n0 0\n1 1\n0 2\n-2 0\n0 -2''') == '8.0000000000'\nprint('All tests passed!')\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n') == '8.0000000000'\nassert solution('5\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\\n') == '0.0200000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"8.0000000000\"\nassert solution(\"5 2 0\") == \"8.0000000000\"\nassert solution(\"5 1 1\") == \"8.0000000000\"\nassert solution(\"5 -2 0\") == \"8.0000000000\"\nassert solution(\"5 0 -2\") == \"8.0000000000\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '8.0000000000'\nassert solution('5') == '8.0000000000'\nassert solution('5') == '8.0000000000'\nassert solution('5') == '8.0000000000'\nassert solution('5') == '8.0000000000'"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n\") == \"8.0000000000\"\nprint(solution(input()))\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '8.0000000000'\nassert solution('2 1') == '8.0000000000'\nassert solution('5 1') == '8.0000000000'\nassert solution('5 0.2') == '8.0000000000'\nassert solution('5 -0.2') == '8.0000000000'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 2 2\n1 1 1 1 1 2 2 2 2 2\n''') == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2 3') == '2'\nassert solution('15 5 6') == '4'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n9 4 3\n1 1 9 9 1 6 6 39 9\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10 2 2\n1 1 1 1 1 2 2 2 2 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == '2'\nassert solution(\"1\\n\") == '2'\nassert solution(\"1\\n1\\n\") == '2'\nassert solution(\"1\\n1\\n1\\n\") == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3 1\n1 1 9 9 1 6 6 39 9\n''') == '2'\nassert solution('''\n5 4 2\n1 1 9 9 1 6 6 39 9\n''') == '1'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n6 4 3\n1 1 9 9 1 6 6 39 9\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10 2 2\n1 1 1 1 1 2 2 2 2 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n9 4 3\n1 1 9 9 1 6 6 39 9\n''') == '2'\nassert solution('''\n10 2 2\n1 1 1 1 1 2 2 2 2 2\n''') == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'\nprint(solution())\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"10 2 2\\n1 1 1 1 1 2 2 2 2 2\"\n) == \"2\"\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 2') == '3.6'\nassert solution('4 11 4') == '20.0'"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '3.33333333333'\nassert solution('4 11 4') == '20.000000000'\n\nimport sys\nimport io\n\nsys.stdin = io.StringIO(input())"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 2') == '3.6'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''\n4 11 4\n10 10 10 10\n''') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 2') == '3.0'\nassert solution('5 2 1') == '4.0'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 42\n''') == '2'\nassert solution('''\n5 123456789\n''') == '16317634'\n\nimport aoc\nfrom typing import Tuple, Iterator\nimport math\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 42') == '2'\nassert solution('5 123456789') == '16317634'"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 42\n''') == '2'\nassert solution('''\n5 123456789\n''') == '16317634'\nassert solution('''\n2\n''') == '2'\nassert solution('''\n5\n''') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 42') == '2'\nassert solution('5 123456789') == '16317634'"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\""
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([2, 42]) == \"2\"\nassert solution([5, 123456789]) == \"16317634\"\n\nimport os\nimport sys\n\nfrom io import StringIO\nimport unittest\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        print('------------')\n        print(out)\n        print('------------')\n        self.assertEqual(out, output)\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"2 42\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"5 123456789\"\"\"\n        output = \"\"\"16317634\"\"\"\n        self.assertIO(input, output)"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 42\n5 123456789''') == '2'\nassert solution('''5 123456789\n1''') == '4'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 42') == '2'\nassert solution('5 123456789') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2\n1\n2\n1''') == '2'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 1 0 0 2\n1 2 2\n1 1 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6''') == '4'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1 0 0 2\n1 2 2\n1 1 1\n''') == '0'\n\nassert solution('''\n3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '4'\n\nassert solution('''\n5 5 5 5 1 1\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '5'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4'\nassert solution('''3 1 0 0 2\n1 2 2\n1 1 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6''') == '4'\nprint('Congratulations! All test cases passed')\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\"\nassert solution(\"3 1 1 1 8 1 1 2\") == \"5\"\nassert solution(\"3 1 1 1 8 2 2 3\") == \"6\""
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('3 1 1 1 8') == '4'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 1 0 0 2\n1 2 2\n1 1 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '4'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 1 0 0 2\n1 2 2\n1 1 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6''') == '4'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"1 1 1\") == \"4\"\nassert solution(\"2 1 1\") == \"2\"\nassert solution(\"2 0 1\") == \"1\"\nassert solution(\"2 1 2\") == \"2\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('1 2 2') == '1'\nassert solution('1 1 1') == '2'\nassert solution('8 3 4') == '1'\nassert solution('7 3 7') == '8'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\"\nassert solution(\"1 2 2\") == \"1\"\nassert solution(\"0 1 1\") == \"1\"\nassert solution(\"2 1 1\") == \"2\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 1 10 10') == '3'\nassert solution('5 1 100 100') == '3'\nassert solution('6 4 12 2 8') == '7'\nassert solution('10 10 10 10') == '10'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1 10 10') == '3'\nassert solution('5 1 100 100') == '3'\nassert solution('5 2 2 2 2 2') == '5'\nassert solution('5 1 2 3 4') == '4'\nassert solution('5 1 10 10') == '3'\n\nstdin = '''5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n'''\nprint(solution(stdin))\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\nassert solution('''5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n''') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n\"\"\",\n) == \"3\", \"Should be 3\"\nassert solution(\n    \"\"\"\n5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n\"\"\",\n) == \"2\", \"Should be 2\"\nassert solution(\n    \"\"\"\n5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n27 75\n\"\"\",\n) == \"3\", \"Should be 3\"\nassert solution(\n    \"\"\"\n5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n27 75\n\"\"\",\n) == \"2\", \"Should be 2\"\nassert solution(\n    \"\"\"\n5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n27 75\n\"\"\",\n) == \"1\", \"Should be 1\""
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"6 3\") == \"3\"\nassert solution(\"10 20\") == \"2\"\nassert solution(\"7 25\") == \"2\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1 10 10\\n8 8\\n5 1\\n4 6\\n4 7\\n7 9\\n') == '3'\nassert solution('5 1 100 100\\n27 75\\n79 77\\n40 93\\n62 41\\n52 45\\n') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\nassert solution('''5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n''') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n\nA\nA\n\nA\n\nB\nB\nB\n\nC\nC\nC\n''') == '2'\n\nassert solution('''\n\nA\nB\nC\nD\n''') == '3'\n\nassert solution('''\n\nB\nA\nC\nD\nE\nF\nG\nH\nI\nJ\nK\nL\nM\nN\nO\nP\nQ\nR\nS\nT\nU\nV\nW\nX\nY\nZ\n''') == '4'\n\nassert solution('''\n\nA\nB\nC\nD\nE\nF\nG\nH\nI\nJ\nK\nL\nM\nN\nO\nP\nQ\nR\nS\nT\nU\nV\nW\nX\nY\nZ\nAB\nAB\nAB\nAB\nAC\nAC\nAC\nAC\nAD\nAD\nAD\nAD\nAE\nAE\nAE\nAE\nAF\nAF\nAF\nAF\nAG\nAG\nAG\nAG\nAH\nAH\nAH\nAH\nAI\nAI\nAI\nAI\nAJ\nAJ\nAJ\nAJ\nAK\nAK\nAK\nAK\nAL\nAL\nAL\nAL\nAM\nAM\nAM\nAM\nAN\nAN\nAN\nAN\nAP\nAP\nAP\nAP\nAQ\nAQ\nAQ\nAQ\nAR\nAR\nAR\nAR\nAS\nAS\nAS\nAS\nAT\nAT\nAT\nAT\nAU\nAU\nAU\nAU\nAV\nAV\nAV\nAV\nAW\nAW\nAW\nAW\nAX\nAX\nAX\nAX\nAY\nAY\nAY\nAY\nAZ\nAZ\nAZ\nAZ\nBA\nBA\nBA\nBA\nBB\nBB\nBB\nBB\nBC\nBC\nBC\nBC\nBD\nBD\nBD\nBD\nBE\nBE\nBE\nBE\nBF\nBF\nBF\nBF\nBG\nBG\nBG\nBG\nBH\nBH\nBH\nBH\nBI\nBI\nBI\nBI\nBJ\nBJ\nBJ\nBJ\nBK\nBK\nBK\nBK\nBL\nBL\nBL\nBL\nBM\nBM\nBM\nBM\nBN\nBN\nBN\nBN\nBP\nBP\nBP\nBP\nBQ\nBQ\nBQ\nBQ\nBR\nBR\nBR\nBR\nBS\nBS\nBS\nBS\nBT\nBT\nBT\nBT\nBU\nBU\nBU\nBU\nBV\nBV\nBV\nBV\nBW\nBW\nBW\nBW\nBX\nBX\nBX\nBX\nBY\nBY\nBY\nBY\nBZ\nBZ\nBZ\nBZ\nCA\nCA\nCA\nCA\nCB\nCB\nCB\nCB\nCC\nCC\nCC\nCC\nCD\nCD\nCD\nCD\nCE\nCE\nCE\nCE\nCF\nCF\nCF\nCF\nCG\nCG\nCG\nCG\nCH\nCH\nCH\nCH\nCI\nCI\nCI\nCI\nCJ\nCJ\nCJ\nCJ\nCK\nCK\nCK\nCK\nCL\nCL\nCL\nCL\nCM\nCM\nCM\nCM\nCN\nCN\nCN\nCN\nCP\nCP\nCP\nCP\nCQ\nCQ\nCQ\nCQ\nCR\nCR\nCR\nCR\nCS\nCS\nCS\nCS\nCT\nCT\nCT\nCT\nCU\nCU\nCU\nCU\nCV\nCV\nCV\nCV\nCW\nCW\nCW\nCW\nCX\nCX\nCX\nCX\nCY\nCY\nCY\nCY\nCZ\nCZ\nCZ\nCZ\nDA\nDA\nDA\nDA\nDB\nDB\nDB\nDB\nDC\nDC\nDC\nDC\nDD\nDD\nDD\nDD\nDE\nDE\nDE\nDE\nDF\nDF\nDF\nDF\nDG\nDG\nDG\nDG\nDH\nDH\nDH\nDH\nDI\nDI\nDI\nDI\nDJ\nDJ\nDJ\nDJ\nDK\nDK\nDK\nDK\nDL\nDL\nDL\nDL\nDM\nDM\nDM\nDM\nDN\nDN\nDN\nDN\nDP\nDP\nDP\nDP\nDQ\nDQ\nDQ\nDQ\nDR\nDR\nDR\nDR\nDS\nDS\nDS\nDS\nDT\nDT\nDT\nDT\nDU\nDU\nDU\nDU\nDW\nDW\nDW\nDW\nDX\nDX\nDX\nDX\nDY\nDY\nDY\nDY\nDZ\nDZ\nDZ\nDZ\nEA\nEA\nEA\nEA\nEB\nEB\nEB\nEB\nEC\nEC\nEC\nEC\nED\nED\nED\nED\nEE\nEE\nEE\nEE\nEF\nEF\nEF\nEF\nEG\nEG\nEG\nEG\nEH\nEH\nEH\nEH\nEI\nEI\nEI\nEI\nEJ\nEJ\nEJ\nEJ\nEK\nEK\nEK\nEK\nEL\nEL\nEL\nEL\nEM\nEM\nEM\nEM\nEN\nEN\nEN\nEN\nEP\nEP\nEP\nEP\nEQ\nEQ\nEQ\nEQ\nER\nER\nER\nER\nES\nES\nES\nES\nET\nET\nET\nET\nEU\nEU\nEU\nEU\nEV\nEV\nEV\nEV\nEW\nEW\nEW\nEW\nEX\nEX\nEX\nEX\nEY\nEY\nEY\nEY\nEZ\nEZ\nEZ\nEZ\nFA\nFA\nFA\nFA\nFB\nFB\nFB\nFB\nFC\nFC\nFC\nFC\nFD\nFD\nFD\nFD\nFE\nFE\nFE\nFE\nFF\nFF\nFF\nFF\nFG\nFG\nFG\nFG\nFH\nFH\nFH\nFH\nFI\nFI\nFI\nFI\nFJ\nFJ\nFJ\nFJ\nFK\nFK\nFK\nFK\nFL\nFL\nFL\nFL\nFM\nFM\nFM\nFM\nFN\nFN\nFN\nFN\nFP\nFP\nFP\nFP\nFQ\nFQ\nFQ\nFQ\nFR\nFR\nFR\nFR\nFS\nFS\nFS\nFS\nFT\nFT\nFT\nFT\nFU\nFU\nFU\nFU\nFV\nFV\nFV\nFV\nFW\nFW\nFW\nFW\nFX\nFX\nFX\nFX\nFY\nFY\nFY\nFY\nFZ\nFZ\nFZ\nFZ\nGA\nGA\nGA\nGA\nGB\nGB\nGB\nGB\nGC\nGC\nGC\nGC\nGD\nGD\nGD\nGD\nGE\nGE\nGE\nGE\nGF\nGF\nGF\nGF\nGG\nGG\nGG\nGG\nGH\nGH\nGH\nGH\nGI\nGI\nGI\nGI\nGJ\nGJ\nGJ\nGJ\nGK\nGK\nGK\nGK\nGL\nGL\nGL\nGL\nGM\nGM\nGM\nGM\nGN\nGN\nGN\nGN\nGP\nGP\nGP\nGP\nGQ\nGQ\nGQ\nGQ\nGR\nGR\nGR\nGR\nGS\nGS\nGS\nGS\nGT\nGT\nGT\nGT\nGU\nGU\nGU\nGU\nGV\nGV\nGV\nGV\nGW\nGW\nGW\nGW\nGX\nGX\nGX\nGX\nGY\nGY\nGY\nGY"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"ABC\\nABC\\nABC\") == 2\nassert solution(\"ABC\\nABC\\nBCA\") == -1\nassert solution(\"ABC\\nABC\\nCCAA\") == 3\nassert solution(\"ABC\") == -1\nassert solution(\"ABC\\nABC\\nABC\") == 2\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"ABC\") == \"2\"\nassert solution(\"ABBBAAAA\") == \"3\"\nassert solution(\"BBBCCCBB\") == \"3\"\nassert solution(\"CCCCAAAC\") == \"3\"\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('ABC\\nABC\\nABC') == '2'\nassert solution('ABBBAAAA\\nBBBCCCBB\\nCCCCAAAC') == '3'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''ABC\nABC\nABC\n''') == \"2\"\nassert solution('''ABBBAAAA\nBBBCCCBB\nCCCCAAAC\n''') == \"3\""
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('ABC') == 2\nassert solution('ABBBAAAA') == 3\nassert solution('BBBCCCBB') == 4\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''ABC''') == '2'\nassert solution('''ABBBAAAA''') == '3'\nassert solution('''BBBCCCBB''') == '3'\nassert solution('''CCCCAAAC''') == '-1'"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\nABC\nABC\nABC\n    \"\"\",\n    \"\"\"\nBBBCCCBB\nCCCCAAAC\n\"\"\",\n) == 3, \"First example\"\nassert solution(\n    \"\"\"\nABC\nABC\nABC\n    \"\"\",\n    \"\"\"\nBBBBAAA\nCCCCCCBB\nDDDDCCCC\n\"\"\",\n) == -1, \"Second example\"\nassert solution(\n    \"\"\"\nAAB\nABB\nAAA\n    \"\"\",\n    \"\"\"\nAAB\nABB\nABA\n    \"\"\",\n) == 4, \"Third example\"\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('ABC\\nABC\\nABC') == 2\nassert solution('ABBBAAAA\\nBBBCCCBB\\nCCCCAAAC') == 3"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '3'\nassert solution('6') == '3'\nassert solution('7') == '4'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\nA\nB\nAA\nBBB\nAAA''') == '3'\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB''') == '3'\nassert solution('''5\nA\nB\nAA\nBBB\nAAA''') == '3'\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB''') == '3'"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '3'\nassert solution('6') == '3'\nassert solution('7') == '2'\nassert solution('8') == '2'\nassert solution('9') == '1'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '3'\nassert solution('5') == '3'\nassert solution('5') == '3'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\nA\nB\nAA\nBBB\nAAA\n''') == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"4\"\nassert solution(\"50\") == \"5\"\nassert solution(\"100\") == \"5\"\nassert solution(\"10,000\") == \"6\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\nA\\nABA\\nBBB\\nAAAAAB\") == \"3\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\nA\\nABA\\nBBB\\nABABA\\nAAAAAB\\n') == '3'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\nA\\nABA\\nBBB\\nAAA') == '3'"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(open(\"input.txt\", \"r\").read()) == \"3\"\nprint(\"Solution successful!\")"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'\nprint('Congratulations! Your solution is correct.')\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n100 10 2 1\n\"\"\") == \"0.1\"\nassert solution(\"\"\"\n100 10 2 2\n\"\"\") == \"0.18181818181818182\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n100 10 2 1\n''') == '0.1'\nassert solution('''\n100 10 2 2\n
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('100 10 2 1') == '0.10000000000000002'\nassert solution('100 10 2 2') == '0.19090909090909091'"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"100 10 2 1\") == \"0.1\"\nassert solution(\"100 10 2 2\") == \"0.1909090909\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == '0.1428571428571428'\nassert solution('1\\n2\\n3\\n4\\n5\\n') == '0.2'\nassert solution('2\\n2\\n3\\n4\\n5\\n') == '0.2'\nassert solution('2\\n3\\n4\\n5\\n6\\n') == '0.2'\nassert solution('3\\n4\\n5\\n6\\n7\\n') == '0.2'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0.1'\nassert solution('100 10 2 1') == '0.1'\nassert solution
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1 10 2') == '0.1500000000000001'\nassert solution('5 10 2 1') == '0.50000000298023224'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n5 2 2 1') == '0.10000000000000001'\nassert solution('100 10 2 1') == '0.10000000000000001'\nassert solution('100 10 2 2') == '0.21'\nassert solution('100 10 2 2') == '0.21'\nassert solution('100 10 2 2') == '0.21'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\nassert solution(\"ABABABcABABAbAbab\") == \"5\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('ABABABcABABAbAbab') == '4'\n\"\"\""
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"4\"\nassert solution(INPUT.read()) == \"4\"\nINPUT.seek(0)\nassert solution() == \"5\"\nassert solution(INPUT.read()) == \"5\"\nINPUT.seek(0)\nassert solution() == \"4\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('ABABABcABABAbAbab') == '5'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '5'\nassert solution('ABABABcABABAbAbab') == '4'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('ABABABcABABAbAbab') == \"4\"\nassert solution('ABCABC') == \"3\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\nprint(solution(input()))\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''ABABABcABABAbAbab\n3\n0 2\n1 6\n0 7\nSample Input 2:\nbdb\n2\n0 1\n0 2\nSample Output 2:\n1\n0\n''') == '1'\nassert solution('''Bb\n1\n0\nSample Input 3:\nBb\n2\n0 1\n0 2\nSample Output 3:\n1\n0\n''') == '1'\nprint('all tests passed')"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n0\\n0\\n1\\n\") == \"2\""
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3') == '2'\nassert solution('6 3') == '3'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3\\n0\\n0\\n1') == '2'\nassert solution('10 10\\n0 1\\n1 0\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"4 3\\n0\\n0\\n1\\n\") == \"2\"\nassert solution(\"10 3\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n\") == \"4\"\nassert solution(\"100 3\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n\") == \"5\"\nassert solution(\"200 3\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n\") == \"5\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '2'\nassert solution('8 2') == '4'\nassert solution('100 3') == '4'\nassert solution('8 1') == '0'"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0\\n0\\n\") == \"2\"\nassert solution(\"4\\n5\\n2\\n1\\n\") == \"3\"\nassert solution(\"2\\n1\\n0\\n\") == \"1\"\nassert solution(\"2\\n3\\n1\\n\") == \"1\"\nassert solution(\"3\\n3\\n2\\n1\\n\") == \"2\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2') == '2'\nassert solution('4 3') == '2'\nassert solution('5 2') == '2'\nassert solution('2 3') == '1'\nassert solution('5 2') == '2'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 3\n0\n0\n1\n''') == '2'\nassert solution('''\n10 5\n10\n9\n8\n7\n''') == '5'\n'''"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n') == '3'\nassert solution('1\\n2\\n1\\n') == '2'\nassert solution('1\\n0\\n0\\n') == '1'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 2\") == \"1\"\nassert solution(\"3 4 2\") == \"3\"\nassert solution(\"5 7 4\") == \"4\"\nassert solution(\"6 5 4\") == \"4\"\nassert solution(\"9 5 4\") == \"5\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == '0'\nassert solution(\"5 5 5\") == '5'"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 5 5 5 5 5\n10 1 2 1 8 -6 1\n9 4 7 5 6 4 3 -1\n10 7 7 7 8 3 6 -1\n8 4 3 4 9 4 7 5 -1\n7 9 3 9 3 4 8 -1\n3 7 4 9 7 8 3 -1\n2 5 5 9 8 6 3 -1\n6 1 4 9 5 7 7 -1\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5 5 5 5 5 5\n10 1 2 1 8 -6 1\n9 4 7 5 6 4 3 -1\n10 7 7 7 8 3 6 -1\n8 4 3 4 9 4 7 5 -1\n7 9 3 9 3 4 8 -1\n3 7 4 9 7 8 3 -1\n2 5 5 9 8 6 3 -1\n6 1 4 9 5 7 7 -1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5 5 5 5 5 5\n10 1 2 1 8 -6 1\n9 4 7 5 6 4 3 -1\n10 7 7 7 8 3 6 -1\n8 4 3 4 9 4 7 5 -1\n7 9 3 9 3 4 8 -1\n3 7 4 9 7 8 3 -1\n2 5 5 9 8 6 3 -1\n6 1 4 9 5 7 7 -1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 3 3 3 3 3\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 8 8 8\") == \"1\"\nassert solution(\"3 3 3 3\") == \"2\"\nassert solution(\"3 4 4 4\") == \"3\"\nassert solution(\"2 2 2 2 2 2 2\") == \"2\"\nassert solution(\"3 2 3 2 2 2 3\") == \"2\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 8 8 8\") == \"1\"\nassert solution(\"12 4 1 4 5 3 -2\") == \"P1: 22 1 4 2 6 -1 0\""
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 8 8 8') == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 8 8 8\") == \"1\"\nassert solution(\"10 1 2 1 8 -6 1\") == \"1\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n\"\"\") == \"\"\"1\nP0: 22 1 4 2 6 -1 0\"\"\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('10 1 2 1 8 -6 1') == '2'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\nSample Output:\n3\nP0: 11 2 5 1 0 -1\nP1: 21 2 4 0 1 -1\nP2: 21 2 5 3 1 -1\n''') == '3'\n\nassert solution('''\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\nSample Output:\n2\nP0: 11 2 5 1 0 -1\nP1: 21 2 4 0 1 -1\n''') == '2'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n\"\"\") == \"1\\n2\\n3\\n4\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4') == '2'\nassert solution('7 7') == '6'\nassert solution('8 5') == '6'\n\n'''\nfrom collections import deque\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '2'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 3\"\n    \"1 2 1\"\n    \"1 2 3\"\n    \"1 3 2\"\n    \"2 3 4\"\n    \"2 4 4\"\n    \"3 4 4\"\n    \"3\"\n    ) == \"1\"\n\nassert solution(\n    \"3 7\"\n    \"1 2 1\"\n    \"1 2 3\"\n    \"1 3 2\"\n    \"2 3 4\"\n    \"2 4 4\"\n    \"3 4 4\"\n    \"3\"\n    ) == \"1\"\n\nassert solution(\n    \"6 4\"\n    \"1 2 1\"\n    \"1 2 3\"\n    \"1 3 2\"\n    \"2 3 4\"\n    \"2 4 4\"\n    \"3 4 4\"\n    \"4 4 4\"\n    \"4\"\n    ) == \"1\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n3 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\nSample Output:\n1\n2\n3\n\"\"\"\n) == \"2\"\nprint(\n    solution(\n        \"\"\"\n9 1\n1 2\n1 4\n1 6\n2 4\n2 7\n2 8\n3 4\n3 5\n4 5\n4 6\n5 6\n5 7\n6 7\n6 8\n7 8\n7 9\n8 9\n8 10\n9 10\n9 11\n10 11\n10 12\n11 12\n11 13\n12 13\n12 14\n13 14\n13 15\n14 15\n14 16\n15 16\n15 17\n16 17\n16 18\n17 18\n17 19\n18 19\n18 20\n19 20\n19 21\n20 21\n20 22\n21 22\n21 23\n22 23\n22 24\n23 24\n23 25\n24 25\n24 26\n25 26\n25 27\n26 27\n26 28\n27 28\n27 29\n28 29\n28 30\n29 30\n29 31\n30 31\n30 32\n31 32\n31 33\n32 33\n32 34\n33 34\n33 35\n34 35\n34 36\n35 36\n35 37\n36 37\n36 38\n37 38\n37 39\n38 39\n38 40\n39 40\n39 41\n40 41\n40 42\n41 42\n41 43\n42 43\n42 44\n43 44\n43 45\n44 45\n44 46\n45 46\n45 47\n46 47\n46 48\n47 48\n47 49\n48 49\n48 50\n49 50\n49 51\n50 51\n50 52\n51 52\n51 53\n52 53\n52 54\n53 54\n53 55\n54 55\n54 56\n55 56\n55 57\n56 57\n56 58\n57 58\n57 59\n58 59\n58 60\n59 60\n59 61\n60 61\n60 62\n61 62\n61 63\n62 63\n62 64\n63 64\n63 65\n64 65\n64 66\n65 66\n65 67\n66 67\n66 68\n67 68\n67 69\n68 69\n68 70\n69 70\n69 71\n70 71\n70 72\n71 72\n71 73\n72 73\n72 74\n73 74\n73 75\n74 75\n74 76\n75 76\n75 77\n76 77\n76 78\n77 78\n77 79\n78 79\n78 80\n79 80\n79 81\n80 81\n80 82\n81 82\n81 83\n82 83\n82 84\n83 84\n83 85\n84 85\n84 86\n85 86\n85 87\n86 87\n86 88\n87 88\n87 89\n88 89\n88 90\n89 90\n89 91\n90 91\n90 92\n91 92\n91 93\n92 93\n92 94\n93 94\n93 95\n94 95\n94 96\n95 96\n95 97\n96 97\n96 98\n97 98\n97 99\n98 99\n98 100\n99 100\n99 101\n100 101\n100 102\n99 102\n99 103\n98 103\n98 104\n97 104\n97 105\n96 105\n96 106\n95 106\n95 107\n94 107\n94 108\n93 108\n93 109\n92 109\n92 110\n91 110\n91 111\n90 111\n89 112\n88 112\n88 113\n87 113\n87 114\n86 114\n86 115\n85 115\n85 116\n84 116\n84 117\n83 117\n83 118\n82 118\n82 119\n81 119\n80 120\n79 120\n79 121\n78 121\n78 122\n77 122\n77 123\n76 123\n76 124\n75 124\n75 125\n74 125\n74 126\n73 126\n73 127\n72 127\n72 128\n71 128\n70 129\n69 129\n69 130\n68 130\n68 131\n67 131\n67 132\n66 132\n66 133\n65 133\n65 134\n64 134\n64 135\n63 135\n63 136\n62 136\n62 137\n61 137\n61 138\n60 138\n60 139\n59 139\n59 140\n58 140\n58 141\n57 141\n57 142\n56 142\n56 143\n55 143\n55 144\n54 144\n54 145\n53 145\n53 146\n52 146\n52 147\n51 147\n51 148\n50 148\n50 149\n49 149\n49 150\n48 150\n48 151\n47 151\n47 152\n46 152\n46 153\n45 153\n45 154\n44 154\n44 155\n43 155\n43 156\n42 156\n42 157\n41 157\n41 158\n40 158\n40 159\n39 159\n39 160\n38 160\n38 161\n37 161\n37 162\n36 162\n36 163\n35 163\n35 164\n34 164\n34 165\n33 165\n33 166\n32 166\n32 167\n31 167\n31 168\n30 168\n30 169\n29 169\n29 170\n28 170\n28 171\n27 171\n27 172\n26 172\n26 173\n25 173\n25 174\n24 174\n24 175\n23 175\n23 176\n22 176\n22 177\n21 177\n21 178\n20 178\n20 179\n19 179\n19 180\n18 180\n18 181\n17 181\n17 182\n16 182\n16 183\n15 183\n15 184\n14 184\n14 185\n13 185\n13 186\n12 186\n12 187\n11 187\n11 188\n10 188\n10 189\n9 189\n9 190\n8 190\n8 191\n7 191\n7 192\n6 192\n6 193\n5 193\n5 194\n4 194\n4 195\n3 195\n3 196\n2 196\n2 197\n1 197\n1 198\n0 198\n0 199\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"5 5\\n\"\n    \"1 2 1\\n\"\n    \"1 2 3\\n\"\n    \"1 3 2\\n\"\n    \"1 4 1\\n\"\n    \"2 3 4\\n\"\n    \"2 4 4\\n\"\n    \"3 4 4\\n\"\n    \"3\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n) == \"1\\n2\\n3\\n4\\n\"\nassert solution(\n    \"5 5\\n\"\n    \"1 2 1\\n\"\n    \"1 2 3\\n\"\n    \"1 3 2\\n\"\n    \"1 4 1\\n\"\n    \"2 3 4\\n\"\n    \"2 4 4\\n\"\n    \"3 4 4\\n\"\n    \"3\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n) == \"1\\n2\\n3\\n4\\n\"\nassert solution(\n    \"6 7\\n\"\n    \"1 2 1\\n\"\n    \"1 2 3\\n\"\n    \"1 2 4\\n\"\n    \"1 3 2\\n\"\n    \"1 4 3\\n\"\n    \"1 5 1\\n\"\n    \"2 3 4\\n\"\n    \"2 4 4\\n\"\n    \"2 5 4\\n\"\n    \"2 6 4\\n\"\n    \"2 7 3\\n\"\n    \"3 6 4\\n\"\n    \"3 7 2\\n\"\n    \"4 6 3\\n\"\n    \"4 7 1\\n\"\n    \"5 6 1\\n\"\n    \"5 7 1\\n\"\n    \"5 8 1\\n\"\n    \"6 7\\n\"\n    \"6\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"3\\n\"\n    \"4 2\\n\"\n    \"4 3\\n\"\n    \"4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    "
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 7') == '1'\nassert solution('4 7') == '1'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == \"1 2 3 4\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\nSample Output:\n1\n2\n3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n8 4\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\nSample Output:\n1\n2\n2\n3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n6 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\nSample Output:\n1\n2\n3\n4\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6\n1 5 4 3 2 6\n1 2 5 4 3 6\n''') == '2'\nassert solution('''\n10\n1 2 5 4 3 7 6 8 9 10\n1 5 2 3 7 4 9 10 8 6\n''') == '3'"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n6\n1 5 4 3 2 6\n1 2 5 4 3 6\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n6\n5 1 4 3 2 6\n1 2 5 4 3 6\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\n1 4 3 2 6\n1 2 5 4 3 6\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1\n2 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1\n0\n\"\"\") == \"1\""
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1 2 5 4 3 6\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2 5 4 3 6''') == '2\\n2 5 4 3 6'''\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5 4 3 2 6') == '1 2 5 4 3 6'\nassert solution('1 5 4 3 2 6') == '1 2 5 4 3 6'\nassert solution('1 5 4 3 2 6') == '1 2 5 4 3 6'\nassert solution('1 5 4 3 2 6') == '1 2 5 4 3 6'\nassert solution('1 5 4 3 2 6') == '1 2 5 4 3 6'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'\n\n\"\"\"\n\nimport math\nimport re"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5 4 3 2 6') == '1 2 5 4 3 6'"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '6\\n'\n    '1 5 4 3 2 6\\n'\n    '1 2 5 4 3 6\\n'\n) == '2'\n\nassert solution(\n    '10\\n'\n    '1 2 5 4 3 2 6\\n'\n    '5 2 1 3 4 6\\n'\n) == '1'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6\\n1 5 4 3 2 6\\n1 2 5 4 3 6\\n') == '2'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1 2 5 4 3 6', 'Should be true'\n\nassert solution(stdin='1 5 4 3 2 6') == '1 2 5 4 3 6', 'Should be true'\n\nassert solution(stdin='1 3 2 4 5 6') == '1 2 3 4 5 6', 'Should be true'\n\nassert solution(stdin='1 5 4 3 2') == '1 2 5 4 3 2', 'Should be true'\n\nassert solution(stdin='1 2 5 4 3 6') == '1 2 5 4 3 6', 'Should be true'"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 2') == '60'\nassert solution('5 3 2') == '60'\nassert solution('3 3 2') == '-1'\n'''\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 2') == '-1'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n\"\"\") == \"60\"\n\nassert solution(\"\"\"\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n\"\"\") == \"70\"\n\nassert solution(\"\"\"\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n\"\"\") == \"20\"\n\nassert solution(\"\"\"\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n\"\"\") == \"40\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n\"\"\") == \"60\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 2') == '60'\nassert solution('3 3 2') == '-1'\nassert solution('2 2 2') == '-1'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"1 2 3\"\n    \"1 2 3\"\n    \"1 2 3\"\n) == \"1 2 3\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n\"\"\") == \"60\"\nassert solution(\"\"\"\n5 6 4\n1 5 1 5 2 2\n1 1 1 2 3\n1 2 3 2 3\n2 1 1 3\n1 2 4 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 6 4\n1 1 1 2 3\n1 2 3 2 3\n2 1 1 3\n1 2 4 4\n1 3 5 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 6 4\n1 5 1 5 2 2\n1 1 1 2 3\n1 2 3 2 3\n2 1 1 3\n1 2 4 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n6 6 4\n1 5 1 5 2 2\n1 1 1 2 3\n1 2 3 2 3\n2 1 1 3\n1 2 4 4\n1 3 5 5\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 2 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n\"\"\") == \"60\"\n\nassert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 1\n\"\"\") == \"1\""
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 3 2\") == \"60\"\nassert solution(\"1 3 2\") == \"-1\"\nassert solution(\"3 3 2\") == \"60\"\nassert solution(\"3 3 2\") == \"-1\"\nassert solution(\"3 3 2\") == \"-1\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4 2') == '60'\nassert solution('3 3 2') == '-1'"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000\") == \"Case #1: 1\\nCase #2: 2\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'Case #1: 1'\nassert solution('2') == 'Case #1: 1\\nCase #2: 2'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n') == 'Case #1: 1\\n'\nassert solution('2\\n') == 'Case #2: 2\\n'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n10000 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #1: 1\\nCase #2: 2\\n'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n10000 0 0\n0 10000 0\n0 0 10000\n''') == 'Case #1: 1\\nCase #2: 2\\n'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2\\n\"\n    \"3\\n\"\n    \"10000 0 0\\n\"\n    \"0 10000 0\\n\"\n    \"0 0 10000\\n\"\n) == \"Case #1: 1\\nCase #2: 2\\n\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == 'Case #1: 1\\nCase #2: 2'\nassert solution('5') == 'Case #1: 1\\nCase #2: 1\\nCase #3: 1\\nCase #4: 1\\nCase #5: 1'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == \"Case #1: 1\\nCase #2: 2\\n\""
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'Case #1: 1\\nCase #2: 2'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n10000 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #2: 2'\nassert solution('''\n2\n3\n10000 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #1: 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('+1 2 H 2 O 1') == '6 6 6 1'\nassert solution('+1 2 C 1 O 2') == '6 6 6 1'\nassert solution('-1 1 O 2') == '6 6 6 1'\nassert solution('-1 3 C 6 H 12 O 6') == '6 6 6 1'\nassert solution('0 0') == '0 0'\n\"\"\"\nimport re"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n') == '6 6 6 1'\n\nprint(solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n'))\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('+1 2 H 2 O 1') == '6 6 6 1'\nassert solution('+1 2 C 1 O 2') == '1 1 1 1'\nassert solution('-1 1 O 2') == '1 1 1 1'\nassert solution('-1 3 C 6 H 12 O 6') == '1 1 1 1'\nassert solution('0 0') == '1 1 1 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1'\nassert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1'\nassert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1'\nassert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"-1 1 O 2\") == \"3 O_2 -1\"\nassert solution(\"+1 2 H 2 O 1\") == \"2 O_2\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\nassert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\nassert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\nassert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\nassert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\nassert solution('+1 1 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\n\"\"\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1'\nprint('check passed!')"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"+1 2 H 2 O 1\") == \"6 6 6 1\", \"Wrong\"\nassert solution(\"+1 2 C 1 O 2\") == \"6 6 6 1\", \"Wrong\"\nassert solution(\"-1 1 O 2\") == \"6 6 6 1\", \"Wrong\"\nassert solution(\"-1 3 C 6 H 12 O 6\") == \"6 6 6 1\", \"Wrong\"\nassert solution(\"0 0\") == \"1 1 1 1\", \"Wrong\""
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n') == '20.83'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n') == '20.83'\nassert solution('5\\n1 0\\n0 0\\n0 0\\n0 0\\n0 0\\n') == '5.00'\nassert solution('2\\n2 1\\n0 0\\n0 0\\n') == '1.00'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n30 50\n20 0\n100 0\n100 40\n20 40\n''') == '20.83'\nassert solution('''\n6\n10 10\n0 0\n10 0\n0 10\n10 10\n0 0\n''') == '30.00'\nassert solution('''\n10\n10 10\n0 0\n0 0\n0 10\n10 10\n0 0\n''') == '10.00'\nassert solution('''\n5\n10 10\n0 0\n0 0\n0 10\n10 10\n0 0\n''') == '10.00'\nassert solution('''\n1\n1 1\n1 1\n''') == '1.00'\n'''\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n5\n5 0\n4 0\n4 0\n4 4''') == '20.83'\nassert solution('''2\n2\n0 0\n1 1\n0 1''') == '1.5'\nassert solution('''4\n1\n1 1\n1 0\n1 1''') == '3.5'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10\n0 0\n0 0\n1 1\n0 0\n2 2\n1 0\n0 0\n2 2\n1 0\n0 0\n''') == '2.11'\nassert solution('''\n12\n-2 1\n3 4\n1 5\n3 2\n-1 0\n1 -2\n-2 -3\n1 4\n-2 2\n2 1\n3 1\n-3 -1\n-1 2\n2 0\n3 -1\n2 -2\n-3 -1\n1 0\n-1 -2\n2 0\n-2 1\n-1 1\n-2 0\n-3 2\n1 2\n-1 1\n-3 1\n2 1\n-2 0\n3 1\n-1 2\n1 1\n-3 1\n2 2\n-2 1\n1 1\n-2 0\n-1 2\n1 2\n0 0\n-2 -1\n1 -1\n-1 1\n2 1\n-1 0\n-2 0\n0 0\n-1 2\n-2 1\n0 2\n-1 0\n1 2\n-2 0\n1 1\n2 0\n0 1\n''') == '3.01'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n4 5 10\\n1 2 3\\n4 5\\n2 3\\n1 2\\n') == '3.06'"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n\") == \"20.83\"\nassert solution(\"3\\n10 10\\n10 10\\n10 10\\n\") == \"16.00\"\nassert solution(\"4\\n7 7\\n2 2\\n2 2\\n\") == \"3.00\"\nassert solution(\"2\\n10 10\\n2 2\\n\") == \"7.00\"\nassert solution(\"3\\n10 10\\n1 1\\n2 2\\n\") == \"7.00\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n30 50\n20 0\n100 0\n100 40\n20 40\n''') == '20.83'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2\n3 4\n0 1\n3 2\n0 1\n2 3''') == '3.050000000000002'\nassert solution('''5\n1 2\n3 4\n0 1\n3 2\n0 1\n2 3''') == '3.150000000000003'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n30 50\n20 0\n100 0\n100 40\n20 40\n''') == '20.83'\nassert solution('''\n1\n20 0\n20 40\n''') == '20.0'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 2 5\n7 6 4\n9 8 3\n''') == '49'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '''\n    4 4\n    6 5 7\n    2 3 9\n    1 4 8\n    5 9 1\n    '''\n) == '49'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"49\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 2 5\\n7 6 4\\n9 8 3') == '49'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"49\""
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 3') == '1'\nassert solution('4 3') == '0'\nassert solution('5 3') == '0'\nassert solution('10 10') == '18'"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 2 5\\n7 6 4\\n9 8 3\\n') == '49'\nprint('all tests passed')\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3\n1 2\n5\n1 2''') == '1'\n\nassert solution('''3 3\n1 2 3\n5 6 7\n9 8 1''') == '49'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"49\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"49\""
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 15\") == \"##CROSSWORD####\"\nassert solution(\"2 15\") == \"##CROSSWORD####\"\nassert solution(\"3 15\") == \"##CROSSWORD####\"\nassert solution(\"4 15\") == \"##CROSSWORD####\"\nassert solution(\"5 15\") == \"##CROSSWORD####\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 15\") == \"##CROSSWORD####\"\nassert solution(\"2 5\") == \"#####CROSSWORD####\"\nassert solution(\"3 3\") == \"######CROSSWORD####\"\nassert solution(\"4 7\") == \"########CROSSWORD####\"\nassert solution(\"5 3\") == \"#####CROSSWORD####\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5') == '##CROSSWORD####'\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '##CROSSWORD####'\nassert solution('1 15') == '##CROSSWORD####'\n\n'''\n\n\n\nimport sys\nimport re"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 15') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 154156 156157 158159 160161 162163 164165 166167 168169 170171 172173 174175 176177 178179 180181 182183 184185 186187 188189 190201 220220 221223 224225 226227 228229 230231 232233 234235 236237 238239 240241 242243 244245 246247 248249 250251 252253 254255 256257 258259 260261 2622632642656667 686970 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 9293 94 95 96 97 98 99 100 101 102103 104105 106107 108109 110 111 112113 114115 116117 118119 119120 121122 123124 125126 127128 129130 131132 131415 161718 192021 222425 262728 293031 32\n'''\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 15') == '##CROSSWORD##'\nassert solution('1') == '##'\nassert solution('1 1') == '#.'\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 15\\n##.........####\\n1') == '##CROSSWORD####'\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 15') == '##CROSSWORD####'\nassert solution('1 1') == '##CROSSWORD####'\nassert solution('1 1') == '##CROSSWORD####'\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 15\\nCROSSWORD\") == \"CROSSWORD\\n\"\nassert solution(\"2 5\\n#..#.##\\n## #.#.#\\n#######\\n###.#.#\\n##.#.##\\n# ####.##\") == \"#####.##\\n#.#.#.#\\n###.##.##\\n#.##.#.##\\n#.#####.##\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1\n2 7 6\n9 5 1\n4 3 8\n''') == '31'\n\nassert solution('''\n100 100\n1 1\n1 100\n''') == '101'\n\nassert solution('''\n7 9\n4 5 3 6 8 1 2\n''') == '10'\n\nassert solution('''\n20 12\n10 9 2 6\n''') == '40'\n\nassert solution('''\n3\n1 2\n3 4\n5\n''') == '9'\n\n'''"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1\n2 7 6\n9 5 1\n4 3 8\n''') == '31'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '22'\nassert solution('7 8') == '18'\nassert solution('3 4') == '16'\nassert solution('8 3') == '19'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 1\n2 7 6\n9 5 1\n4 3 8''') == '31'\nassert solution('''20 1\n1 8 2\n1 9 1\n4 3 8\n4 4 5\n3 5 7\n7 6 4\n5 6 2\n6 4 9\n5 6 8\n6 7 6\n8 5 9\n2 2 3\n3 8 2\n1 6 7\n8 7 6\n4 9 7\n8 2 4\n2 9 6\n9 2 5\n8 7 5\n7 6 6\n2 1 3\n4 3 5\n7 3 2\n8 4 5\n4 6 7\n5 6 4\n8 9 1\n8 3 2\n4 5 9\n6 7 6\n5 8 4\n2 4 7\n5 2 9\n7 5 1\n4 2 7\n4 9 5\n3 7 5\n8 9 7\n9 7 2\n7 5 8\n2 4 4\n7 3 9\n6 7 1\n9 6 4\n4 4 1\n5 5 8\n9 4 7\n8 6 4\n4 1 9\n4 2 2\n5 5 6\n7 5 8\n9 6 2\n5 9 2\n6 6 7\n5 6 2\n5 7 1\n9 2 3\n5 3 3\n1 6 6\n8 4 1\n2 7 5\n7 3 3\n3 5 4\n5 5 3\n7 9 8\n2 2 4\n4 5 4\n4 4 6\n4 4 4\n6 5 9\n2 7 7\n3 2 3\n3 5 6\n7 5 6\n4 7 4\n8 7 8\n4 7 3\n6 3 7\n7 7 2\n5 3 5\n5 5 7\n8 5 7\n5 7 2\n6 7 3\n8 6 8\n7 4 8\n3 3 4\n9 4 7\n7 7 7\n8 3 4\n1 1 8\n2 6 2\n1 2 1\n9 8 9\n6 1 6\n3 2 1\n4 2 7\n2 7 8\n4 1 1\n2 3 4\n1 4 5\n7 3 2\n9 2 9\n8 2 1\n9 1 8\n7 1 3\n4 5 5\n4 4 4\n5 3 5\n9 2 6\n2 5 9\n8 3 3\n3 2 5\n3 4 7\n4 8 8\n4 4 8\n5 4 6\n7 4 7\n7 4 2\n4 5 7\n2 2 6\n2 8 2\n2 2 8\n8 2 6\n8 4 2\n4 8 6\n8 7 3\n6 9 4\n2 1 2\n9 1 8\n7 1 7\n8 1 2\n4 7 5\n3 4 8\n2 2 2\n1 1 8\n5 6 8\n5 3 2\n8 9 2\n5 2 8\n1 5 1\n6 6 9\n3 2 7\n5 1 5\n4 6 3\n8 9 8\n4 8 3\n5 4 3\n5 3 3\n3 2 6\n8 1 2\n2 3 4\n1 1 2\n5 4 7\n5 4 8\n9 1 8\n3 7 4\n5 9 3\n2 6 6\n8 6 2\n6 5 4\n1 4 5\n1 1 2\n7 4 9\n2 6 1\n1 2 3\n3 2 6\n2 2 6\n2 3 4\n2 7 6\n8 5 4\n7 4 6\n9 5 3\n3 6 5\n9 9 2\n1 1 9\n4 4 7\n8 8 8\n5 6 5\n7 9 8\n4 5 1\n1 3 2\n3 2 2\n4 4 8\n9 9 7\n3 6 7\n4 4 2\n1 3 8\n1 1 1\n5 3 4\n6 6 4\n4 3 2\n3 5 5\n8 2 5\n7 6 5\n6 5 7\n8 6 5\n8 6 4\n5 7 3\n6 2 4\n6 5 4\n8 5 3\n5 6 7\n2 2 2\n8 5 4\n5 3 3\n8 5 4\n8 4 4\n6 4 5\n7 3 4\n6 3 2\n4 7 1\n3 7 4\n2 6 4\n1 4 5\n5 5 5\n7 6 5\n5 6 3\n4 7 7\n8 4 6\n8 7 1\n7 7 2\n9 2 4\n7 5 2\n3 2 6\n6 3 8\n1 3 3\n6 2 3\n4 8 5\n1 3 4\n4 5 4\n7 5 4\n7 5 6\n2 5 6\n5 5 4\n7 1 2\n8 4 4\n1 7 9\n9 7 3\n8 5 7\n5 6 2\n2 3 5\n3 8 3\n1 7 5\n2 1 1\n4 1 9\n1 5 5\n8 7 1\n7 2 8\n8 6 1\n4 4 4\n3 1 8\n9 2 1\n5 6 3\n1 4 3\n7 7 4\n6 7 8\n7 4 5\n4 7 6\n7 4 6\n4 7 6\n5 5 5\n4 5 5\n5 2 5\n1 1 5\n1 1 4\n4 6 5\n8 5 2\n5 6 2\n2 8 1\n4 4 6\n8 6 2\n6 5 1\n5 6 8\n6 5 1\n8 4 8\n9 8 9\n7 2 8\n8 5 7\n4 8 2\n7 4 8\n4 6 7\n6 2 5\n7 4 6\n7 2 4\n7 4 7\n7 6 7\n7 2 3\n7 4 6\n7 6 7\n1 5 6\n3 5 5\n6 5 8\n2 1 3\n4 1 1\n8 5 2\n5 1 1\n4 8 3\n2 3 4\n2 7 4\n6 8 4\n1 7 1\n4 7 7\n4 7 4\n1 7 4\n7 8 6\n3 2 6\n5 1 5\n1 8 1\n6 4 2\n5 5 5\n5 5 5\n1 1 5\n1 1 5\n2 5 3\n1 4 7\n4 4 5\n2 8 4\n2 2 8\n7 2 5\n2 4 4\n7 3 4\n8 1 1\n6 8 6\n1 8 1\n7 7 3\n6 4 3\n4 4 4\n3 6 5\n6 6 1\n5 1 6\n7 4 2\n6 2 6\n3 6 4\n7 3 4\n7 6 7\n4 2 3\n1 8 8\n2 1 3\n3 2 1\n6 7 2\n3 5 3\n1 6 1\n5 2 2\n4 7 4\n5 4 4\n1 7 1\n2 6 7\n5 6 3\n2 1 2\n5 5 3\n8 2 1\n7 2 3\n4 8 6\n2 4 4\n4 6 6\n8 1 1\n5 2 6\n5 7 8\n1 8 1\n4 5 5\n4 5 5\n3 8 1\n5 5 2\n7 5 2\n2 1 4\n3 4 3\n4 8 6\n4 6 5\n4 4 5\n2 8 1\n8 3 6\n4 5 2\n6 5 5\n7 4 4\n7 1 2\n7 1 2\n5 5 5\n7 4 5\n5 7 5\n7 5 6\n2 2 4\n3 1 3\n3 7 5\n7 5 1\n7 5 6\n5 5 4\n3 5 5\n4 8 2\n5 4 3\n7 4 1\n4 5 7\n1 1 4\n7 4 1\n2 4 6\n4 4 4\n7 4 5\n6 4 3\n4 6 4\n5 4 6\n1 2 2\n8 5 4\n4 4 4\n5 5 4\n7 4 6\n3 1 2\n4 7 5\n6 6 3\n6 2 1\n8"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1\\n2 7 6\\n9 5 1\\n4 3 8\\n') == '31'\nassert solution('5 5 2 1 2\\n5 5 6 3 1\\n2 1 5 3 5\\n3 5 1 3 5\\n1 2 3 1 3 5\\n6 5 1 4 1 4 5\\n') == '32'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '31'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '2'\nassert solution('1 100') == '1'\nassert solution('100 100') == '1'"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3 1\n2 7 6\n9 5 1\n4 3 8\"\"\") == \"31\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"31\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('\\n'.join([\n    '4 3 8',\n    '5 1 7',\n    '6 2 9',\n])) == '31'\n\nassert solution('\\n'.join([\n    '1 1',\n    '1 2',\n    '2 3',\n])) == '3'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 1\nBBW\n''') == '2'\n\nassert solution('''3 1\nWWW\n''') == '1'\n\nassert solution('''4 1\nWWW\n''') == '3'\n\nassert solution('''5 1\nBBB\n''') == '5'\n\nassert solution('''5 1\nWWW\n''') == '5'"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1') == '2'\nassert solution('10 1') == '4'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 1\nBBW\n''') == '2'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\nBBW\\n\") == \"2\"\n\nassert solution(\"3 2\\nBWW\\n\") == \"3\"\n\nassert solution(\"3 2\\nBWB\\n\") == \"1\"\n\nassert solution(\"3 2\\nWWB\\n\") == \"2\"\n\nassert solution(\"3 3\\nBWBWBWB\\n\") == \"1\""
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3 1\nBBW\"\"\") == \"2\"\nassert solution(\"\"\"10 10\nWWWWBBBWWWW\nBBBWWWWWWWW\nBBWBBBBWWWW\nWBBWWWWWWWW\nBBWBBBBWWWW\nBBWBBBBWWWW\nWWWWBBBBWWW\nWWWBBBBWWWW\nBBWBBBBWWWW\nWWBBBBWWWWW\nWWBBBBBBWWW\nBBBBBBBBWWW\nWWBBBBBBWWW\nWWBBBBBBWWW\nWWWWBBBBWWW\nWWWWBBBBWWW\nWWBBBBBBWWW\nBBBBBBBBWWW\nWWBBBBBBWWW\nWWWBBBBBBWW\nWWWBBBBBBWW\nBBBWWBBBBWW\nWBBBBBBBBWW\nBBWBBBBBBWW\nBBBWWBBBBWW\nWWBBBBBBBBW\nWWWBBBBBBBB\nBBBBBBBBBBW\"\"\") == \"2\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 1\") == \"2\"\nassert solution(\"5 2\") == \"4\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"4 1\") == \"2\"\nassert solution(\"2 1\") == \"2\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('2 2') == '2'\nassert solution('2 1') == '2'\nassert solution('1 3') == '3'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '4'\nassert solution('5 5') == '25'\nassert solution('10 10') == '204'\nassert solution('8 8') == '56'"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"2\""
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 1\nBBW\n''') == '2'\n\nassert solution('''\n3 1\nBBW\n''') == '2'\n\nassert solution('''\n3 1\nBWW\n''') == '1'\n\nassert solution('''\n3 1\nWWB\n''') == '1'\n\nassert solution('''\n3 1\nWWB\n''') == '0'"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 1\n2 2 1''') == '0.67'\nassert solution('''3 2\n2 2 1\n1 2 3''') == '0.66'\nprint(solution('''3 3\n2 2 1\n1 2 3'''))\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '1 2 3\\n'\n    '1 2 3\\n'\n) == '0.556'\n\"\"\""
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1\\n1 2 3') == '0.556'\nassert solution('2 2\\n1 1 1') == '0.5'\n\"\"\"\nfrom math import prod\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nprint(prod(a) / prod(c))\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1') == '0.556'\nassert solution('3 1') == '0.556'\nassert solution('2 1') == '0.556'\nassert solution('2 1') == '0.556'\nassert solution('2') == '0.556'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '0.5'\nassert solution('3 1') == '0.0'\nassert solution('3 2 1') == '0.6333333333333333'\nassert solution('1 2 3') == '0.3333333333333333'\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == '0.50'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"0.556\"\nassert solution(\"2 2\") == \"0.333\"\nassert solution(\"1 2\") == \"0.500\"\n\n\"\"\""
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '0.556'\nassert solution('3 2 1') == '0.556'\nassert solution('1 2 3') == '0.556'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 1') == '0.556'\nassert solution('3 1') == '0.556'\nassert solution('1 2') == '0.555'\nassert solution('2 1') == '0.555'\nassert solution('1') == '0.555'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"0.556\"\nprint(\"Solution = \", solution())\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3 4 5\") == \"10\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 4 3 2\n1 0 0 1\n0 1 0 1\n0 1 0 0\n1 0 0 0\n1 0 0 2''') == '3'\nassert solution('''6 4 5 2\n1 1 1 1\n1 1 1 1\n1 1 1 0\n1 1 1 1\n0 1 1 0\n0 1 1 1''') == '1'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 4 3 2') == '3'\nassert solution('3 3 3 2') == '2'\nassert solution('20 10 5 2') == '13'\nassert solution('50 50 50 2') == '0'\nassert solution('100 10 5 2') == '12'"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"3\"\nassert solution(\"2 2 2 2\") == \"7\"\nassert solution(\"5 3 4 1\") == \"2\"\nassert solution(\"2 1 2 2\") == \"2\""
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4') == '3'\nassert solution('10\\n10\\n10\\n10') == '10'\nassert solution('100\\n100\\n100\\n100') == '100'\n\"\"\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 4 3 2\n0 0 1\n0 1 1\n1 0 1\n1 1 0''') == '3'\nassert solution('''5 7 5 6\n0 1 0\n0 1 1\n0 2 0\n0 1 0\n1 2 0\n1 1 0''') == '3'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 6') == '13'\nassert solution('2 5 8') == '13'\nassert solution('3 3 5') == '13'\nassert solution('5 3 6') == '13'"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '13'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3 6\\n2 5 8\\n3 3 5\\n5 3 6\\n') == '13'\nprint('solved')"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3 6\") == \"5\"\nassert solution(\"2 5 8\") == \"8\"\nassert solution(\"3 3 5\") == \"5\"\nassert solution(\"5 3 6\") == \"6\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n3 5 6\n3 1 5\n3 2 5\n\"\"\") == \"13\"\nassert solution(\"\"\"\n5\n1 5 8\n3 3 5\n3 2 5\n5 1 8\n5 2 8\n\"\"\") == \"14\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 6\\n2 5 8\\n3 3 5') == '13'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'\nassert solution('''5\n1 4 9\n2 5 10\n3 6 13\n4 7 16\n5 8 19\n6 10 24\n''') == '30'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 6') == '11'\nassert solution('2 5 8') == '20'\nassert solution('3 3 5') == '5'\nassert solution('5 3 6') == '20'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 3 5\\n\"\n    \"2 5 8\\n\"\n    \"3 3 5\\n\"\n    \"5 3 6\\n\"\n) == \"13\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n1 3 6\n2 5 8\n3 3 5\n5 3 6''') == '13'\n\nassert solution('''4\n1 3 6\n2 5 8\n3 3 5\n5 3 6''') == '15'\n\nassert solution('''4\n1 3 6\n2 5 8\n3 3 5\n5 3 6''') == '18'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1.0000000000000000 100000000000000000000000000000000000000000000000000000000\\n1.0000000000000000 100000000000000000000000000000000000000000000000000000000\\n0.000000') == '3.141593'\nassert solution('1.0000000000000000 100000000000000000000000000000000000000000000000000000000\\n0.000000') == '0.000000'\nprint('All test cases passed.')\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10.000000 20.123456') == '3.141593'\n\nassert solution('1') == '0.000000'\nassert solution('0.000000') == '0.000000'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5.000000 10.123456\\n1\\n1\\n2\\n2\\n3\\n3\\n') == '1.0', \"Wrong!\"\nassert solution('1.0014159310.123456\\n1\\n2\\n3\\n4\\n5\\n6\\n') == '1.0', \"Wrong!\"\nassert solution('1.0\\n1\\n2\\n3\\n4\\n5\\n6\\n') == '5.0', \"Wrong!\"\nassert solution('1.0\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '0.0', \"Wrong!\"\nassert solution('1.0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '0.0', \"Wrong!\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1.0\"\nassert solution(\"1.0\") == \"1.0\"\nassert solution(\"0.1\") == \"1.0\"\nassert solution(\"10.000000 20.123456\") == \"3.141593\""
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1\n1\n2\n1\n2\n2\n1\n''') == '2.00000'\nassert solution('''7\n1\n2\n2\n3\n2\n3\n3\n3\n4\n4\n5\n6\n''') == '4.00000'\nprint('all done!')\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10.000000 20.123456\\n1\\n13.141593 20.123456\") == \"3.141593\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456\n1.123456"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10.000000 20.123456\\n1\\n13.141593 20.123456') == \"3.141593\"\nassert solution('10.000000 20.123456\\n20\\n23.141593 20.123456') == \"0.0\"\nassert solution('100.000000 50.123456\\n2\\n2.141593 50.123456') == \"2.141593\""
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10.000000 20.123456\\n1\") == \"3.141593\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n4 4\\n2') == '2.13333333333333'\nassert solution('1\\n6 4\\n3') == 'impossible'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'impossible'\nassert solution('4') == '2.13333333333333'\n\n----Hints----\n* The input is automatically tested.\n* The required output format is clearly stated in the problem description.\n* A simple regex is enough to solve this problem.\n\"\"\"\nimport math"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2.13333333333333\"\n\nassert solution(\"\") == \"impossible\"\n\nassert solution(\"2\") == \"impossible\"\n\nassert solution(\"5\") == \"impossible\"\n\nassert solution(\"3\") == \"2.13333333333333\""
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2.13333333333333\"\nassert solution(\"10\") == \"2.13333333333333\"\nassert solution(\"15\") == \"impossible\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4 4\\n2\") == \"2.13333333333333\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2.13333333333333'\nassert solution('1') == 'impossible'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\n2\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n2\n3\n\"\"\") == \"2.13333333333333\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n4 4\n2\nSample Input 2:\n4\n4 4\n3\nSample Output 2:\nImpossible''') == 'impossible'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'impossible', \"This should be impossible.\"\nassert solution('4') == '2.13333333333333', \"This should be 2.13333333333333\"\nassert solution('10') == 'impossible', \"This should be impossible.\"\nassert solution('100') == 'impossible', \"This should be impossible.\"\nassert solution('4 4') == '2.13333333333333', \"This should be 2.13333333333333\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2 4') == '2.13333333333333'\nassert solution('3 3') == 'impossible'"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n1\n3\n''') == '1'\n\nassert solution('''50\n1\n3\n7\n25\n125\n''') == '21'\n\nassert solution('''1\n1\n1\n1\n1\n1\n1\n''') == '12'\n\nassert solution('''1000\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('9') == '18'\nassert solution('17') == '35'\nassert solution('100') == '352'\nassert solution('100000000') == '11248380105392524'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6') == '2'\nassert solution('1000\\n2000\\n3000\\n4000\\n5000\\n6000') == '8'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '18'\nassert solution([7]) == '18'"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('6') == '4'\nassert solution('5') == '7'\n\"\"\""
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    3\n    ''') == '1'\nassert solution('''\n    6\n    ''') == '2'\nassert solution('''\n    20\n    ''') == '19'\nassert solution('''\n    24\n    ''') == '8'\nassert solution('''\n    25\n    ''') == '10'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '4'\nassert solution('5') == '6'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('10') == '12'\nassert solution('1000') == '3328'\nassert solution('10000') == '10981'\nassert solution('100000') == '30589'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n40 M classicism programming\n0 F baroque skiing\n43 F baroque chess\n''') == '3'\n\nassert solution('''\n3\n40 F classicism programming\n0 M baroque skiing\n30 M baroque chess\n''') == '2'\n\nassert solution('''\n4\n0 F baroque skiing\n0 M baroque chess\n30 F baroque soccer\n43 M classicism programming\n''') == '4'\n\nassert solution('''\n3\n40 M classicism programming\n0 F baroque skiing\n43 M baroque chess\n''') == '3'\n\nassert solution('''\n1\n41 F classicism programming\n0 M baroque skiing\n''') == '2'"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([\"35 M\", \"0 M\", \"43 M\", \"30 F\"]) == \"3\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer') == '3'\nassert solution('5\\n10 M bowling\\n18 M college football\\n11 F college football\\n13 M netball\\n15 F netball\\n18 M volleyball\\n20 F volleyball\\n22 M cricket\\n25 F cricket') == '4'\nassert solution('4\\n30 F baroque chess\\n20 M baroque skiing\\n30 M baroque chess\\n40 F baroque volleyball\\n50 M baroque volleyball\\n60 F baroque volleyball\\n80 M baroque sports\\n90 F baroque sports\\n100 F baroque sports') == '5'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n\"\"\") == \"3\"\n\"\"\")\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"4\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\"\"\") == \"3\"\nassert solution(\"\"\"8\n120 F dynamics\n90 M drama\n85 M classical\n90 M classical\n90 F classical\n85 M classical\n90 M classical\"\"\") == \"4\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n35 M\n0 F\n43 M\n30 M\n''') == \"3\"\n\nassert solution('''\n35 M\n0 F\n43 M\n25 M\nSample Output:\n1\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n35 M\n0 M\n43 M\n30 F\n''') == '2'\nassert solution('''2\n40 M\n0 F\n43 M\n30 F\n''') == '4'\nassert solution('''1\n70 F\n0 M\n40 M\n30 F\n''') == '3'\nassert solution('''2\n35 M\n0 M\n43 M\n30 F\n''') == '3'\nassert solution('''\n3\n70 F\n0 M\n40 M\n30 F\n''') == '4'\n''') == '4'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\") == \"3\"\nassert solution(\"2\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\") == \"4\"\nassert solution(\"3\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\") == \"2\"\nassert solution(\"4\\n43 M baroque chess\\n0 M baroque skiing\\n30 F baroque soccer\") == \"2\"\nassert solution(\"5\\n1 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\") == \"4\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n''') == '3'\nassert solution('''3\n10 F linear algebra\n0 F is a lot of fun\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n''') == '5'\nassert solution('''2\n0 F linear algebra\n0 M classicism programming\n35 M classicism programming\n0 F baroque skiing\n''') == '2'\nassert solution('''0\n0 F linear algebra\n0 M classicism programming\n10 M is a lot of fun\n''') == '3'\nassert solution('''4\n10 F linear algebra\n30 F baroque chess\n0 F classicism programming\n0 M baroque skiing\n43 M baroque chess\n0 M is a lot of fun\n30 F baroque soccer\n''') == '1'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n35 F classicism programming\\n0 M baroque skiing\\n43 M baroque chess') == '3'\n\"\"\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"3\"\nassert solution(\"3\\n0 2\\n0\") == \"1\"\nassert solution(\"3\\n0 1\\n0\") == \"2\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''a 0\na 1\nb 2\nc 2 3\nb 4''') == '2 1'\n\nassert solution('''a 0\na 1\nb 2\nc 2 3\nb 4''') == '3 3'\n\nassert solution('''a 0\na 1\nb 2\nc 2 3\nb 4''') == '4 2'\n\nassert solution('''a 0\na 1\nb 2\nc 2 3\nb 4''') == '5 1'\n\nassert solution('''a 0\na 1\nb 2\nc 2 3\nb 4''') == '5 1'\n\n\n'''"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\\n\") == \"2 1\\n2 1\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2 1\\n1 2\\n2 3\\n2 4\\n1 5\\n'"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n0\\n1\\n2\\n2 3\\n4\\n') == '2 1'\nassert solution('3\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\\n') == '2 1'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"1\\n2\\n1\\n2\\n1\""
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1\\n2\\n3\\n3 1') == '2 1'\nassert solution('5\\n1\\n2\\n3\\n2 3') == '3 2'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n0\\n0\\n') == '1\\n2\\n'\nassert solution('2\\n1\\n1\\n0\\n0\\n') == '2\\n1\\n'\nassert solution('2\\n1\\n0\\n0\\n') == '2\\n0\\n'\n\"\"\"\n\na, *b = map(int, input().split())\nn = int(input())\nm = int(input())\n\nprint(a, b)\nprint(n)\nprint(m)"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 1') == '5'\nassert solution('12 5') == '9'\nassert solution('40 1') == '4'\nassert solution('7 1') == '7'\nassert solution('76 1') == '7'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 1\") == \"5\"\nassert solution(\"10 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '6 1\\n'\n    '78 61 88 71\\n'\n    '80 80 90 90\\n'\n    '70 90 80 100\\n'\n    '90 70 0 0\\n'\n    '80 67 0 0\\n'\n    '90 63 0 0\\n'\n) == '5'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 1\") == \"3\"\nassert solution(\"3 2\") == \"4\"\nassert solution(\"4 3\") == \"4\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"5\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n\nn, k = map(int, input().split())\npartners = [[0]*2 for _ in range(n)]\n\nfor _ in range(n):\n    g, p = map(int, input().split())\n    partners[n-1-_][0] = g\n    partners[n-1-_][1] = p\npartners.sort(key=lambda x: x[0])\n\nd = 0\nfor i in range(1, n):\n    if partners[i-1][1] > partners[i][1]:\n        d = max(d, partners[i-1][0]+partners[i][1])\n    if partners[i-1][1] < partners[i][1]:\n        d = max(d, partners[i-1][0]+partners[i][0])\n    if partners[i-1][1] == partners[i][1]:\n        d = max(d, partners[i-1][0]+partners[i][0])\n\nprint(d)\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\\n') == '5'\n\"\"\""
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n6 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == '5'\nassert solution('10 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\\n80 75 0 0\\n90 61 0 0\\n80 61 0 0\\n90 63 0 0\\n80 71 0 0\\n90 71 0 0') == '4'\nassert solution('3 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == '4'"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 5\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '4'\n\n'''\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"10 5\") == \"4\"\nassert solution(\"15 6\") == \"1\"\nassert solution(\"5 7\") == \"0\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n') == '4'\nassert solution('4 3\\n1 2\\n1 3\\n2 3\\n2 4\\n') == '0'\nassert solution('1 1\\n1 2\\n') == '1'"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == 4\nassert solution(\"4 5\") == 3\nassert solution(\"6 5\") == 2\nassert solution(\"3 2\") == 2\nassert solution(\"4 5\") == 4\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n\") == \"4\"\nassert solution(\"10 10\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n3 4\\n\") == \"10\"\nassert solution(\"10 10\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n3 4\\n\") == \"10\"\nassert solution(\"100 100\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n3 4\\n\") == \"100\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 5\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '4'\n\nassert solution('''4 5\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '1'\n\nassert solution('''4 3\n1 1\n1 2\n1 3\n1 4\n''') == '0'\n\nassert solution('''5 5\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '4'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n') == '0'\nassert solution('1\\n1 2\\n') == '0'\nassert solution('1\\n1 3\\n1 4\\n') == '0'\nassert solution('2\\n') == '1'\nassert solution('2\\n1 2\\n') == '0'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == \"8\"\nassert solution(\"2\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == \"4\"\nassert solution(\"1\\n1 1\\n1 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5') == '4'\nassert solution('4 1') == '1'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4') == '1'\nassert solution('2 1') == '1'\nassert solution('3 3') == '2'\n\n-------------------------------------"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2 3'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 4\n''') == '2 4'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2\\n2 3\\n3 4') == '2 4'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\n''') == '2 3 4'\nassert solution('''8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n''') == '8 7 6'\nassert solution('''8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n''') == '8 4 6'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2 4\"\nassert solution(\"5\\n1 2\\n2 4\\n3 4\\n4 5\") == \"2 4\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\") == \"2 4\"\n\n'''\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2 4'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\nSample Input 2:\n2\n1 2\n1 3\nSample Output 2:\n1 2\n1 3\nSample Input 3:\n4\n1 2\n2 3\n3 4\n4 5\nSample Output 3:\n4 5\n2 3\n1 2\nSample Input 4:\n4\n1 2\n2 3\n3 4\n5 6\nSample Output 4:\n4 5\n2 3\n3 4\n1 2\nSample Input 5:\n3\n1 2\n2 3\n3 4\n5 6\nSample Output 5:\n1 2\n1 3\n3 4\nSample Input 6:\n3\n1 2\n2 3\n3 4\n5 6\nSample Output 6:\n2 3\n2 4\n1 2\nSample Input 7:\n10\n1 2\n2 3\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n37 38\n39 40\n41 42\n43 44\n45 46\n47 48\n49 50\n51 52\n53 54\n55 56\n57 58\n59 60\n61 62\n63 64\n65 66\n67 68\n69 70\n71 72\n73 74\n75 76\n77 78\n79 80\n81 82\n83 84\n85 86\n87 88\n89 90\n91 92\n93 94\n95 96\n97 98\n99 100\n100 101\n101 102\n103 104\n105 106\n107 108\n109 110\n111 112\n113 114\n115 116\n117 118\n119 120\n121 122\n123 124\n125 126\n127 128\n129 130\n131 132\n133 134\n135 136\n137 138\n139 140\n141 142\n143 144\n145 146\n147 148\n149 150\n151 152\n153 154\n155 156\n157 158\n159 160\n161 162\n163 164\n165 166\n167 168\n169 170\n171 172\n173 174\n175 176\n177 178\n179 180\n181 182\n183 184\n185 186\n187 188\n189 190\n191 192\n193 194\n195 196\n197 198\n199 200\n201 202\n203 204\n205 206\n207 208\n209 210\n211 212\n213 214\n215 216\n217 218\n219 220\n221 222\n223 224\n225 226\n227 228\n229 230\n231 232\n233 234\n235 236\n237 238\n239 240\n241 242\n243 244\n245 246\n247 248\n249 250\n251 252\n253 254\n255 256\n257 258\n259 260\n261 262\n263 264\n265 266\n267 268\n269 270\n271 272\n273 274\n275 276\n277 278\n279 280\n281 282\n283 284\n285 286\n287 288\n289 290\n291 292\n293 294\n295 296\n297 298\n299 300\n301 302\n303 304\n305 306\n307 308\n309 310\n311 312\n313 314\n315 316\n317 318\n319 320\n321 322\n323 324\n325 326\n327 328\n329 330\n331 332\n333 334\n335 336\n337 338\n339 340\n341 342\n343 344\n345 346\n347 348\n349 350\n351 352\n353 354\n355 356\n357 358\n359 360\n361 362\n363 364\n365 366\n367 368\n369 370\n371 372\n373 374\n375 376\n377 378\n379 380\n381 381\n383 382\n385 386\n387 388\n389 390\n391 391\n393 394\n395 396\n397 398\n399 400\n401 402\n403 404\n405 406\n407 408\n409 410\n411 412\n413 414\n415 416\n417 418\n419 420\n421 422\n423 424\n425 426\n427 428\n429 430\n431 432\n433 434\n435 436\n437 438\n439 440\n441 442\n443 444\n445 446\n447 448\n449 450\n451 452\n453 454\n455 456\n457 458\n459 460\n461 462\n463 464\n465 466\n467 468\n469 470\n471 472\n473 474\n475 476\n477 478\n479 480\n481 482\n483 484\n485 486\n487 488\n489 490\n491 492\n493 494\n495 496\n497 498\n499 500\n501 502\n503 504\n505 506\n507 508\n509 510\n511 512\n513 514\n515 516\n517 518\n519 520\n521 522\n523 524\n525 526\n527 528\n529 530\n531 532\n533 534\n535 536\n537 538\n539 540\n541 542\n543 544\n545 546\n547 548\n549 550\n551 552\n553 554\n555 556\n557 558\n559 560\n561 562\n563 564\n565 566\n567 568\n569 570\n571 572\n573 574\n575 576\n577 578\n579 580\n581 582\n583 584\n585 586\n587 588\n589 590\n591 592\n593 594\n595 596\n597 598\n599 600\n601 602\n603 604\n605 606\n607 608\n609 610\n611 612\n613 614\n615 616\n617 618\n619 620\n621 622\n623 624\n625 626\n627 628\n629 630\n631 632\n633 634\n635 636\n637 638\n639 640\n641 642\n643 644\n645 646\n647 648\n649 650\n651 652\n653 654\n655 656\n657 658\n659 660\n661 662\n663 664\n665 666\n667 668\n669 670\n671 672\n673 674\n675 676\n677 678\n679 680\n681 682\n683 684\n685 686\n687 688\n689 690\n691 692\n693 694\n695 696\n697 698\n699 700\n701 702\n703 704\n705 706\n707 708\n709 710\n711 712\n713 714\n715 716\n717 718\n719 720\n721 722\n723 724\n725 726\n727 728\n729 730\n731 732\n733 734\n735 736\n737 738\n739 740\n741 742\n743 744\n745 746\n747 747\n749 750\n751 752\n753 754\n755 756\n757 758\n759 760\n761 762\n763 764\n765 766\n767 768\n769 770\n771 772\n773 774\n775 776\n777 778\n779 780\n781 782\n783 784\n785 786\n787 788"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2 3'\nassert solution('3\\n1 2\\n2 3\\n3 4') == '2 3'\nassert solution('1\\n1 2\\n2 3\\n3 4') == '0'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2\\n2 3\\n3 4') == '2 4'\n\n\"\"\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('2 3') == '2 4'\nassert solution('3 4') == '3 1'\nassert solution('2 5') == '3 4'\nassert solution('5 6') == '4 1'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\nassert solution('''3\n1 3\n2 1\n3 5\n7 2\n''') == '0'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1\n2\n2\n1\n2\n''') == '5'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"3 5\") == \"0\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n3\n3\n2 2\n3\n5 2\nSample Input 2:\n10\n1\n1\n10\n10\n10\n8\n10\n2\n3\n5\n10\nSample Output 2:\n7\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n10\n1\n1\n10\n10\n10\n8\n10\n2\n3\n5\n10\nSample Output 3:\n0\n\"\"\") == \"0\""
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '5'\nassert solution('1 3') == '0'\nassert solution('2 1') == '5'\nassert solution('3 5') == '6'\nassert solution('7 2') == '0'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\nassert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '0'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\nassert solution('''\n2 5\n1 3\n2 1\n3 6\n7 2\n''') == '10'\n'''\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '5'\nassert solution('1 3') == '3'\nassert solution('2 1') == '2'\nassert solution('3 5') == '0'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 5\") == \"5\"\nassert solution(\"7 2\") == \"7\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '5'\nassert solution('1 3') == '3'\nassert solution('2 1') == '2'\nassert solution('3 5') == '5'\nassert solution('7 2') == '0'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n10 10 5\n3 5\n1 1\n2 2\n3 3\n4 4\n5 4\n0 0\n0 3\n1 4\n3 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 3 2\n1 1\n3 3\n4 4\n3 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 5 1\n1 1\n3 4\n2 3\n4 2\n\"\"\") == \"3\""
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4') == '2'\nassert solution('4 3 5\\n0 0\\n0 3\\n1 1\\n2 2\\n1 3\\n2 4\\n3 3\\n4 0\\n1 4\\n1 0\\n1 1') == '4'\nassert solution('4 1 5\\n0 0\\n0 3\\n0 5\\n1 2\\n2 4\\n3 3\\n3 4\\n1 5\\n2 0\\n1 1') == '5'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2 3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 4 5 4\n0 0\n0 3\n2 2\n1 3\n3 4\n1 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10 20 4 10\n1 0\n0 3\n3 2\n4 5\n0 7\n3 6\n3 2\n4 8\n2 9\n0 5\n3 7\n1 8\n3 9\n3 8\n2 9\n0 5\n1 6\n1 4\n2 7\n2 3\n1 8\n0 6\n1 9\n0 7\n0 8\n3 9\n1 4\n2 5\n1 5\n2 6\n2 5\n2 8\n1 9\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 5 2\n1 2\n3 4\n2 4\n3 5\n4 5\n4 4\n5 5\n3 2\n3 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10 10 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n0 2\n2 2\n3 1\n\"\"\") == \"4\""
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(r\"\"\"\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\n\nassert solution(r\"\"\"\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\n4\n5\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n1 3') == '2'\nassert solution('4\\n4\\n5 5') == '4'\nassert solution('4\\n5\\n7 4') == '1'\nassert solution('10\\n10\\n10 10') == '2'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5 3') == '2'\nassert solution('2 2 2 2 2') == '2'\nassert solution('0 0 0 0 0') == '1'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5 3') == '2'\nassert solution('3 3 3') == '0'\nassert solution('5 5 2') == '1'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 C\\n3 C\\n2 C\\n1 C\") == \"SAFE\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 3\n3 C\n2 C\n1 C\n\"\"\") == \"GHOST\"\nassert solution(\"\"\"\n1 1\n\"\"\") == \"SAFE\"\nassert solution(\"\"\"\n2 1\n\"\"\") == \"SAFE\"\nassert solution(\"\"\"\n10 2\n3 C\n7 C\n8 C\n1 C\n10 C\n9 C\n8 C\n7 C\n6 C\n3 C\n2 C\n\"\"\") == \"SAFE\"\nassert solution(\"\"\"\n20 2\n3 C\n11 C\n12 C\n13 C\n14 C\n15 C\n16 C\n17 C\n18 C\n19 C\n20 C\n21 C\n22 C\n23 C\n24 C\n25 C\n26 C\n27 C\n28 C\n29 C\n30 C\n31 C\n32 C\n33 C\n34 C\n35 C\n36 C\n37 C\n38 C\n39 C\n40 C\n41 C\n42 C\n43 C\n44 C\n45 C\n46 C\n47 C\n48 C\n49 C\n50 C\n51 C\n52 C\n53 C\n54 C\n55 C\n56 C\n57 C\n58 C\n59 C\n60 C\n61 C\n62 C\n63 C\n64 C\n65 C\n66 C\n67 C\n68 C\n69 C\n70 C\n71 C\n72 C\n73 C\n74 C\n75 C\n76 C\n77 C\n78 C\n79 C\n80 C\n81 C\n82 C\n83 C\n84 C\n85 C\n86 C\n87 C\n88 C\n89 C\n90 C\n91 C\n92 C\n93 C\n94 C\n95 C\n96 C\n97 C\n98 C\n99 C\n100 C\n\"\"\") == \"GHOST\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"GHOST\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3\\n3 C\\n2 C\\n1 C\\n') == 'GHOST'\nassert solution('4 2\\n1 C\\n2 C\\n') == 'SAFE'\nassert solution('4 1\\n1 C\\n') == 'SAFE'\nassert solution('6 3\\n3 C\\n3 C\\n2 C\\n3 C\\n4 C\\n') == 'SAFE'\nassert solution('0 0\\n1 C\\n') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"GHOST\"\nassert solution(\"3 3\") == \"SAFE\"\n\"\"\""
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3\\n3 C\\n2 C\\n1 C\\n') == 'GHOST'\nassert solution('7 6\\nC C\\nC C\\nC C\\nC C\\nC C\\nC C\\n') == 'SAFE'\nassert solution('7 5\\nC C\\nC C\\nC C\\nC C\\nC C\\nC C\\n') == 'SAFE'\nassert solution('8 7\\nC C\\nC C\\nC C\\nC C\\nC C\\nC C\\n') == 'GHOST'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3') == 'SAFE'\nassert solution('2 3') == 'GHOST'\nassert solution('3 1') == 'SAFE'\nassert solution('4 2') == 'GHOST'\nassert solution('5 5') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3\\n3 C') == 'GHOST'\nassert solution('4 3\\n3 C\\n1 C\\n2 C') == 'SAFE'\nassert solution('5 3\\n3 C\\n1 C\\n2 C\\n4 C') == 'SAFE'\nassert solution('5 3\\n4 C\\n3 C\\n2 C\\n1 C') == 'GHOST'"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"SAFE\"\nassert solution(\"3 2\") == \"GHOST\"\nassert solution(\"10 1\") == \"SAFE\""
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '2'\nassert solution('4 3') == '4'\nassert solution('2 2') == 'no fika'"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1\\n') == '10\\n'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 3\n0.00 2.00\n\"\"\") == \"2\"\n\"\"\""
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"3 3.5\") == \"2.5\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n0.00 2.00') == '2'\nassert solution('5 3\\n0.00 3.00\\n0.01 2.00\\n0.02 3.00\\n0.03 2.00\\n0.04 3.00\\n0.05 3.00\\n0.06 2.00\\n0.07 3.00\\n0.08 2.00\\n0.09 3.00') == '3'\nassert solution('5 2\\n0.00 2.00\\n0.01 2.00\\n0.02 3.00\\n0.03 2.00\\n0.04 3.00\\n0.05 3.00\\n0.06 2.00\\n0.07 3.00\\n0.08 2.00\\n0.09 3.00') == '2'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '2'\nassert solution('3 2') == '2'\nassert solution('5 3') == '3'\nassert solution('1 2') == '1'\nassert solution('2 1') == '0.1'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\n0.00 2.00\n''') == '2'\nassert solution('''\n1 4\n0.00 2.00\n''') == 'no fika'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(s) == \"no fika\"\n\"\"\""
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"3 5\") == \"5\"\nassert solution(\"4 6\") == \"no fika\"\nassert solution(\"5 3\") == \"no fika\"\nassert solution(\"1 1\") == \"1.1\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3\\n0.00 2.00') == \"2\"\nassert solution('2 3\\n0.01 2.00') == \"1\"\nassert solution('2 3\\n0.02 2.00') == \"1\"\nassert solution('2 3\\n0.03 2.00') == \"0\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0\\n') == '10'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2') == '10'\nassert solution('1\\n0 0\\n0 0') == '0'\nassert solution('5\\n0 0\\n0 0\\n0 0\\n0 0') == '0'\nassert solution('1\\n0 0\\n0 0\\n1 1\\n') == '1.0000'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '10'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('10') == '10'\nassert solution('0 0') == '0'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n0 0\\n10 0') == '10'\nassert solution('2\\n30 0\\n15 0') == '10'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"10\"\nSample Input:\n3\n0 0\n10 0\n2\n30 0\n15 0\nSample Output:\n1\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"10.0\"\n\nimport math\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '10'\nassert solution('6') == '20'\nassert solution('2') == '5'\n'''"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"10\""
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '10'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('10') == '10'\nassert solution('10.1') == '10.1'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"2\n0 0\n10 0\n2\n30 0\n15 0\"\"\") == \"10\"\nassert solution(\"\"\"6\n0 0\n10 0\n20 0\n30 0\n40 0\n50 0\"\"\") == \"10.0\"\nassert solution(\"\"\"100\n0 0\n10 0\n20 0\n30 0\n40 0\n50 0\n60 0\n70 0\n80 0\n90 0\n100 0\"\"\") == \"95.0\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\nW 10 0\nW 10 3\nE 17 4\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\nW 10 0\nW 10 3\nE 17 4\nW 20 0\nE 22 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\nW 10 0\nW 10 3\nE 17 4\nE 19 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\nW 10 0\nW 10 3\nE 17 4\nW 20 0\nE 22 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\nW 10 0\nW 10 3\nE 17 4\nE 19 3\nE 22 3\n\"\"\") == \"1\""
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 3') == '0'\nassert solution('10 10 3') == '1'\nassert solution('10 10 3') == '0'\nassert solution('20 100 3') == '1'\nassert solution('20 100 3') == '0'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3\\nW 10 0\\nW 10 3\\nE 17 4\\n\"\n) == \"0\"\nassert solution(\n    \"5\\nW 7 0\\nW 7 3\\nW 7 6\\nE 16 4\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 3\\nW 10 0\\nW 10 3\\nE 17 4\\n') == '0'\n\n'''\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 3\nW 10 0\nW 10 3\nE 17 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5 2\nW 10 0\nE 17 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 4\nW 10 1\nE 17 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2 3\nW 10 1\nE 17 4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 5\nW 10 0\nW 10 3\nE 17 4\nW 10 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 2\nW 10 3\nE 17 4\nE 10 6\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n    3 3\n    W 10 0\n    W 10 3\n    E 17 4\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n8 3\nW 10 0\nW 10 3\nE 17 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n8 2\nW 10 0\nW 10 3\nE 20 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 2\nW 10 0\nW 10 3\nE 20 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 2\nW 10 0\nW 10 3\nE 20 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n8 3\nW 10 0\nW 10 3\nE 17 4\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2\\nW 10 0\\ne 10 3\\n') == '0'\nassert solution('4 4\\nW 10 0\\ne 10 3\\ne 10 4\\n') == '1'\nassert solution('6 8\\nW 10 0\\ne 10 3\\ne 10 4\\ne 10 5\\n') == '2'\nassert solution('3 4\\nW 10 0\\ne 10 3\\ne 10 4\\ne 10 5\\n') == '2'\nassert solution('3 5\\nW 10 0\\ne 10 3\\ne 10 4\\ne 10 5\\n') == '1'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(r\"\"\"\n4 6\nW 10 0\nW 10 3\nE 17 4\nE 17 2\nE 17 4\nW 11 0\n\"\"\") == \"2\"\nassert solution(r\"\"\"\n10 10\nW 10 0\nW 10 3\nE 11 4\nE 11 2\nE 11 4\nW 11 0\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3'\nassert solution('5') == '3'\nassert solution('5 4') == '2'"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n8\\n5 6\\n3 4\\n5 13\\n6 10\\n') == '3'\nassert solution('10\\n100\\n200\\n250\\n300\\n350\\n400\\n500\\n600\\n700\\n750\\n800\\n900\\n1000\\n') == '5'\nprint('All test cases passed!')\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n8 1\\n4 2\\n4 3\\n3 4') == '1'\nassert solution('5\\n8 1\\n5 6\\n3 4\\n5 13\\n6 10') == '2'\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\n\n--Input--\n3\n5 8\n5 6\n3 4\n5 13\n6 10\n\n--Output--\n3\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n5 8\n5 6\n3 4\n5 13\n6 10\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10\n3 4\n8 10\n6 8\n5 10\n\"\"\") == \"4\"\nassert solution(\"\"\"\n8\n10 20\n10 15\n5 12\n10 20\n\"\"\") == \"2\"\nassert solution(\"\"\"\n0\n0\n10\n10\n\"\"\") == \"0\"\nassert solution(\"\"\"\n10\n1 2\n3 2\n1 2\n\"\"\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n5 8\n5 6\n3 4\n5 13\n6 10\n''') == '3'\nassert solution('''\n3\n5 6\n5 10\n3 8\n5 8\n5 6\n''') == '2'\nassert solution('''\n7\n10 10\n9 9\n4 6\n3 8\n6 10\n10 8\n6 9\n''') == '5'\nassert solution('''\n10\n10 10\n5 10\n6 10\n6 10\n5 10\n7 10\n8 10\n7 10\n''') == '4'\nassert solution('''\n10\n10 10\n5 10\n4 10\n5 10\n6 10\n5 10\n7 10\n8 10\n7 10\n''') == '5'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '3'\nassert solution('10') == '2'\nassert solution('5 8') == '2'\nassert solution('5 6') == '2'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"5\\n\"\n    \"8\\n\"\n    \"5 6\\n\"\n    \"3 4\\n\"\n    \"5 13\\n\"\n    \"6 10\\n\"\n) == \"3\""
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '3'\nassert solution('6') == '4'"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n10 20') == '1'\nassert solution('4\\n5 5') == '1'\nassert solution('1\\n5 2') == '2'\nassert solution('1\\n1 1') == '1'\nassert solution('4\\n5 6') == '1'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n10 3 3\") == \"A B C\"\nassert solution(\"10 20 10 20\") == \"A B C\"\n\nassert solution(\"2 4\\n8 2 1\") == \"AB\"\nassert solution(\"4 4\\n4 1 2 2\") == \"BC\"\nassert solution(\"4 4\\n8 2 1\") == \"ABC\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3 2\") == \"AB\"\nassert solution(\"4 4\") == \"ABCD\"\nassert solution(\"7 5 2\") == \"ABDCBA\"\nassert solution(\"10 5 2\") == \"AABDBBBCAAACDDD\"\nassert solution(\"20 5 2\") == \"ABCDAAABBAAACDDD\""
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'ABBBCABC'"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"ABAC\"\nassert solution(\"1 1 1\") == \"ABACA\"\nassert solution(\"2 2\") == \"AABCBB\"\nassert solution(\"3 3\") == \"AABCBB\"\nassert solution(\"3 2\") == \"AABCBB\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"ABC\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4\\n10 3 3') == 'CBA'\nassert solution('4 4\\n10 3 3') == 'CAB'\nassert solution('4 2\\n2 2\\n1 1') == 'ABC'\nassert solution('4 6\\n10 4 3\\n3 3 3\\n1 1 1\\n5 2 5\\n2 2 1\\n4 4 4') == 'ABCD'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n10 3 3\n''') == 'impossible'\nassert solution('''\n3 3\n10 3 3\n''') == 'ABC'\nassert solution('''\n4 4\n20 10 20 10\n''') == 'BCDABCDABCD'\nassert solution('''\n4 4\n10 10 10 10\n''') == 'ABCABBCABABCA'\nassert solution('''\n3 4\n10 10 10 10\n''') == 'ABCAB'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n7 2 1\\n\") == \"AB\"\nassert solution(\"4 5\\n8 9 7\\n\") == \"ABCD\"\nassert solution(\"8 7\\n7 9 3\\n\") == \"CAB\"\nassert solution(\"7 7\\n7 4 3\\n\") == \"AB\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4\\n5 3 3\") == \"A AB AB C\\nA AD AD C\\nA DC DC C\"\nassert solution(\"4 5\\n2 3 3\") == \"AA AB AB AC\\nAA AD AD AC\\nAA DB DB AC\\nAA DB DB AC\\nAB AD AD AC\"\nassert solution(\"8 4\\n2 2 2\") == \"AA AB AB AC\\nAA AA AA AC\\nAA AD AD AC\\nAA AB AB AC\\nAB AD AD AC\"\nassert solution(\"12 4\\n6 3 2\") == \"AAAAAAABAAABAAAC\\nAAAAAADDDDDAADDDDDC\\nAAAAAAABAAABAAAC\\nAAAAAADDDDDAADDDDC\\nAAAAAAABAAABAAAC\\nAAAAAADDDDDAADDDDC\\nAAAAAAABAAABAAAC\\nAAAAAADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAABAAADDDDDDDC\\nAAABAAABAAABAAAC\\nAAADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAABDDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAABDDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAABDDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nAAADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC\\nABADDDDDAADDDDC\\nAAABAAABAAABAAAC"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([10,3,3]) == \"BBABCBABACCCB\"\nassert solution
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\OF\\LIGHT\\LIES\\NUANCE\\IQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nprint(solution(input()))\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('11\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION') == 'BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'\n    ) == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n11\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == 'BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'\nassert solution('''\n4\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\nBUTTON\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\nBETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT\nLIES THE NUANCE OF IQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n\"\"\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == '''BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'''"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('11\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('6\\nBOTZBOTZ') == 'BOTZBOTZ'\nassert solution('11\\nBETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11\\nBETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\\n') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('3\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\nCDEFGHIJKLMNOPQRSTUVWXYZ\\n') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abrahellehhelleh') == '12'\n\n\"\"\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abrahellehhelleh') == '12'\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('abrahellehhelleh') == '12'"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abrahellehhelleh') == '12'\nassert solution('abrakadabra') == '0'\nassert solution('hellobar') == '0'\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''abrahellehhelleh''') == '12'\nassert solution('''abrahellehhe''') == '1'\nassert solution('''abrahelleh''') == '0'"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"3\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2\") == \"5\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2\") == \"7\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2\") == \"9\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70'\nassert solution('''\n2 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '90'\nassert solution('''\n4 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '80'\nassert solution('''\n3 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '90'\nassert solution('''\n5 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1 1 1 1 1 1 1 1 1 1 1 1 1') == '1'\nassert solution('2\\n1 1 1 1 1 1 1 1 1 1 1 1 1') == '3'\nassert solution('3\\n1 1 1 1 1 1 1 1 1 1 1 1 1') == '5'\nassert solution('4\\n1 1 1 1 1 1 1 1 1 1 1 1 1') == '6'\nassert solution('5\\n1 1 1 1 1 1 1 1 1 1 1 1 1') == '7'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '10'\nassert solution('100') == '220'"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '40'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '35'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '28'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '35'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\nSample Input 2:\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('65') == '70'\nassert solution('30') == '50'\n\"\"\"\nfrom typing import List\nimport sys"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n7\\n8\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"10\"\nassert solution(\"10 20 30 50 40 40 60 80 90 100\\n
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\nSample Output:\n7\n8\n\"\"\"\n) == \"\"\"7\n\"\"\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '10'\nprint(solution())\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 3\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n1 4\n1 2\n1 4\n0 1\n0 4\n0 4\n1 4\n0 1\n0 4\nSample Output:\n10\n10\n7\n8\n''') == '10\\n10\\n7\\n8\\n'''\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '7'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '8'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2 1 3\\n1 1\\n0 2\") == \"2\"\nassert solution(\"4 5\\n2 2 2 2\\n0 2\\n1 2\\n0 1\\n1 2\") == \"7\"\nassert solution(\"3 4\\n2 1 3\\n1 2\\n0 1\\n1 1\\n0 2\") == \"8\"\nassert solution(\"3 4\\n2 1 3\\n1 2\\n0 1\\n1 1\\n0 2\") == \"7\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 5\\n1 2 3 4 5 6 7 8 9 10\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n') == '10\\n7\\n8\\n7\\n'\nassert solution('5 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n') == '10\\n7\\n8\\n7\\n'\nassert solution('10 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n') == '10\\n7\\n8\\n7\\n'\nassert solution('10 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n') == '10\\n7\\n8\\n7\\n'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"2 5\") == \"3\"\nassert solution(\"5 8\") == \"8\"\n\nstdin = \"\"\"\n4 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n1 1\n1 4\n1 1\n1 4\n1 4\n1 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"10\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"7\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"8\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n''') == '6'\nassert solution('''\n5 1 1\n0 -1\n0 1\n1 0\n1 1\n''') == '1'\nassert solution('''\n5 2 2\n-2 0\n1 -1\n0 1\n1 1\n1 2\n2 1\n2 2\n''') == '7'\nassert solution('''\n7 3\n-2 0\n1 -1\n0 1\n1 1\n1 2\n1 3\n2 0\n2 1\n''') == '7'\nassert solution('''\n10 3\n-2 0\n1 -1\n0 1\n1 1\n1 2\n1 3\n1 4\n1 5\n2 0\n2 1\n2 2\n2 3\n2 4\n2 5\n3 0\n3 1\n3 2\n3 3\n3 4\n3 5\n4 0\n4 1\n4 2\n4 3\n4 4\n4 5\n5 0\n5 1\n5 2\n5 3\n5 4\n5 5\n''') == '28'\n\n------------------------------------------------------------------------\n\n---Explanation---\n\nConsider the case of 2 people, 3 boulders and 2 logs.\n\nPeople 1 and 2 are trying to cross the river, so they must first cross a plank at a time, with the goal of reaching the right bank.\n\nOnce they cross the left bank, they reach the right bank, and thus, the right bank is stable.\n\nSo, they can safely cross the river, and their total time will be two seconds.\n\nThen, they cross the left bank, and they reach the right bank, so the right bank is stable.\n\nNow they need to cross another plank, with the goal of reaching the left bank.\n\nFinally, they cross the left bank, and they reach the right bank, so the right bank is stable.\n\nNow, they need to cross another plank, with the goal of reaching the right bank.\n\nNow, they cross the left bank again, and they reach the right bank, so the right bank is stable.\n\nNow they must cross another plank, with the goal of reaching the left bank.\n\nThe time required to cross the river is 4 seconds.\n\n---Case 2---\n\nPeople 2 and 3 are trying to cross the river, so they must first cross a plank at a time, with the goal of reaching the right bank.\n\nOnce they reach the left bank, they reach the right bank, and thus, the right bank is stable.\n\nSo, they can safely cross the river, and their total time will be two seconds.\n\nThen, they cross the left bank, and they reach the right bank, so the right bank is stable.\n\nNow they need to cross another plank, with the goal of reaching the left bank.\n\nFinally, they cross the left bank, and they reach the right bank, so the right bank is stable.\n\nNow they need to cross another plank, with the goal of reaching the right bank.\n\nNow, they cross the left bank again, and they reach the right bank, so the right bank is stable.\n\nNow they must cross another plank, with the goal of reaching the left bank.\n\nThe time required to cross the river is 4 seconds.\n\n---Case 3---\n\nPeople 3 and 4 are trying to cross the river, so they must first cross a plank at a time, with the goal of reaching the right bank.\n\nOnce they reach the left bank, they reach the right bank, and thus, the right bank is stable.\n\nSo, they can safely cross the river, and their total time will be two seconds.\n\nThen, they cross the left bank, and they reach the right bank, so the right bank is stable.\n\nNow they need to cross another plank, with the goal of reaching the left bank.\n\nFinally, they cross the left bank, and they reach the right bank, so the right bank is stable.\n\nNow they need to cross another plank, with the goal of reaching the right bank.\n\nNow, they cross the left bank again, and they reach the right bank, so the right bank is stable.\n\nNow they need to cross another plank, with the goal of reaching the left bank.\n\nNow, they cross the left bank again, and they reach the right bank, so the right bank is stable.\n\nNow they need to cross another plank, with the goal of reaching the right bank.\n\nNow, they cross the left bank again, and they reach the right bank, so the right bank is stable.\n\nNow they must cross another plank, with the goal of reaching the left bank.\n\nThe time required to cross the river is 4 seconds.\n\n---Case 4---\n\nPeople 5 and 6 are trying to cross the river, so they must first cross a plank at a time, with the goal of reaching the right bank.\n\nOnce they reach the left bank, they reach the right bank, and thus, the right bank is stable.\n\nSo, they can safely cross the river, and their total time will be two seconds.\n\nThen, they cross the left bank, and they reach the right bank, so the right bank is stable.\n\nNow they need to cross another plank, with the goal of reaching the left bank.\n\nFinally, they cross the left bank, and they reach the right bank, so the right bank is stable.\n\nNow they need to cross another plank, with the goal of reaching the right bank.\n\nNow, they cross the left bank again, and they reach the right bank, so the right bank is stable.\n\nNow they need to cross another plank, with the goal of reaching the left bank.\n\nNow, they cross the left bank again, and they reach the right bank, so the right bank is stable.\n\nNow they need to cross another plank, with the goal of reaching the right bank.\n\nNow, they cross the left bank again, and they reach the right bank, so the right bank is stable.\n\nNow they must cross another plank, with the goal of reaching the left bank.\n\nThe time required to cross the river is 4 seconds.\n\n---Case 5---\n\nPeople 7 and 8 are trying to cross the river, so they must first cross a plank at a time,"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '2 4 7\\n'\n    '-2 0\\n'\n    '0 -1\\n'\n    '-2 1\\n'\n    '1 0\\n'\n    '2 1\\n'\n    '2 3\\n'\n    '3 -1\\n'\n) == '6'\n\nassert solution(\n    '3 7\\n'\n    '-1 1\\n'\n    '1 2\\n'\n    '-1 1\\n'\n    '1 3\\n'\n    '2 1\\n'\n    '1 3\\n'\n    '3 -1\\n'\n) == '3'\n\nassert solution(\n    '1 2\\n'\n    '1 2\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '2 3\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '3 4\\n'\n    '4 5\\n'\n    '4 5\\n'\n    '5 6\\n'\n    '5 6\\n'\n    '6 7\\n'\n    '6 7\\n'\n    '7 8\\n'\n    '7 8\\n'\n    '8 9\\n'\n    '8 9\\n'\n    '9 10\\n'\n    '9 10\\n'\n    '10 11\\n'\n    '10 11\\n'\n    '11 12\\n'\n    '11 12\\n'\n    '12 13\\n'\n    '12 13\\n'\n    '13 14\\n'\n    '13 14\\n'\n    '14 15\\n'\n    '14 15\\n'\n    '15 16\\n'\n    '15 16\\n'\n    '16 17\\n'\n    '16 17\\n'\n    '17 18\\n'\n    '17 18\\n'\n    '18 19\\n'\n    '18 19\\n'\n    '19 20\\n'\n    '19 20\\n'\n    '20 21\\n'\n    '20 21\\n'\n    '21 22\\n'\n    '21 22\\n'\n    '22 23\\n'\n    '22 23\\n'\n    '23 24\\n'\n    '23 24\\n'\n    '24 25\\n'\n    '24 25\\n'\n    '25 26\\n'\n    '25 26\\n'\n    '26 27\\n'\n    '26 27\\n'\n    '27 28\\n'\n    '27 28\\n'\n    '28 29\\n'\n    '28 29\\n'\n    '29 30\\n'\n    '29 30\\n'\n    '30 31\\n'\n    '30 31\\n'\n    '31 32\\n'\n    '31 32\\n'\n    '32 33\\n'\n    '32 33\\n'\n    '33 34\\n'\n    '33 34\\n'\n    '34 35\\n'\n    '34 35\\n'\n    '35 36\\n'\n    '35 36\\n'\n    '36 37\\n'\n    '36 37\\n'\n    '37 38\\n'\n    '37 38\\n'\n    '38 39\\n'\n    '38 39\\n'\n    '39 40\\n'\n    '39 40\\n'\n    '40 41\\n'\n    '40 41\\n'\n    '41 42\\n'\n    '41 42\\n'\n    '42 43\\n'\n    '42 43\\n'\n    '43 44\\n'\n    '43 44\\n'\n    '44 45\\n'\n    '44 45\\n'\n    '45 46\\n'\n    '45 46\\n'\n    '46 47\\n'\n    '46 47\\n'\n    '47 48\\n'\n    '47 48\\n'\n    '48 49\\n'\n    '48 49\\n'\n    '49 50\\n'\n    '49 50\\n'\n    '50 51\\n'\n    '50 51\\n'\n    '51 52\\n'\n    '51 52\\n'\n    '52 53\\n'\n    '52 53\\n'\n    '53 54\\n'\n    '53 54\\n'\n    '54 55\\n'\n    '54 55\\n'\n    '55 56\\n'\n    '55 56\\n'\n    '56 57\\n'\n    '56 57\\n'\n    '57 58\\n'\n    '57 58\\n'\n    '58 59\\n'\n    '58 59\\n'\n    '59 60\\n'\n    '59 60\\n'\n    '60 61\\n'\n    '60 61\\n'\n    '61 62\\n'\n    '61 62\\n'\n    '62 63\\n'\n    '62 63\\n'\n    '63 64\\n'\n    '63 64\\n'\n    '64 65\\n'\n    '64 65\\n'\n    '65 66\\n'\n    '65 66\\n'\n    '66 67\\n'\n    '66 67\\n'\n    '67 68\\n'\n    '67 68\\n'\n    '68 69\\n'\n    '68 69\\n'\n    '69 70\\n'\n    '69 70\\n'\n    '70 71\\n'\n    '70 71\\n'\n    '71 72\\n'\n    '71 72\\n'\n    '72 73\\n'\n    '72 73\\n'\n    '73 74\\n'\n    '73 74\\n'\n    '74 75\\n'\n    '74 75\\n'\n    '75 76\\n'\n    '75 76\\n'\n    '76 77\\n'\n    '76 77\\n'\n    '77 78\\"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4 7') == '6'\nassert solution('2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1') == 'n'"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2 4 7') == '2'\nassert solution('-2 0') == '2'\nassert solution('0 -1') == '2'\nassert solution('-2 1') == '1'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n') == '3'\nassert solution('2\\n3\\n4\\n') == '5'\nassert solution('6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n') == '18'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2\n2 3\n4 5\n1''') == '7'\nassert solution('''1\n2 3\n1''') == '6'\nassert solution('''5\n0 0\n1''') == '0'\nassert solution('''8\n2 3\n1\n2\n3\n4\n5\n2\n1''') == '9'\nassert solution('''2\n0\n2\n1''') == '2'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\n\nassert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\\n4 4\\n4 5\\n4 6\\n5 -1\\n5 8\\n5 9\\n6 7\\n6 8\\n7 6\\n7 8\\n8 4\\n8 5\\n8 6\\n8 7\\n9 -1\\n9 8\\n10 3\\n10 2\\n10 1\\n10 0\") == \"9\"\n\nassert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\\n4 4\\n4 5\\n4 6\\n5 -1\\n5 8\\n5 9\\n6 7\\n6 8\\n7 6\\n7 8\\n8 4\\n8 5\\n8 6\\n8 7\\n9 -1\\n9 8\\n10 3\\n10 2\\n10 1\\n10 0\") == \"3\""
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4 7\") == \"6\"\nassert solution(\"10 20 10 10\") == \"1\"\nassert solution(\"30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n1\n-1\n0\n-1\n1\n-1\n2\n-2\n-1\n1\n\"\"\"\n    ) == \"4\"\n\nassert solution(\n\"\"\"\n3\n-2\n-1\n2\n\"\"\"\n    ) == \"1\"\n\nassert solution(\n\"\"\"\n3\n-2\n0\n-1\n1\n\"\"\"\n    ) == \"1\"\n\nassert solution(\n\"\"\"\n4\n1\n-2\n0\n-2\n3\n-1\n0\n0\n0\n-1\n0\n1\n-1\n0\n-1\n0\n0\n-1\n0\n1\n-1\n0\n-1\n1\n-1\n1\n-1\n-1\n1\n-1\n0\n0\n-1\n0\n0\n0\n1\n-1\n0\n0\n0\n0\n0\n-1\n1\n-1\n1\n0\n0\n0\n0\n1\n1\n-1\n1\n1\n0\n-1\n0\n0\n1\n0\n0\n0\n1\n1\n0\n0\n0\n0\n0\n0\n-1\n0\n0\n1\n0\n0\n1\n0\n-1\n0\n0\n1\n0\n0\n0\n0\n0\n0\n-1\n0\n0\n0\n1\n1\n0\n0\n0\n0\n-1\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n-1\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n-1\n0\n0\n-1\n0\n0\n0\n0\n0\n1\n0\n-1\n0\n0\n0\n0\n0\n0\n-1\n-1\n-1\n-1\n0\n0\n0\n0\n-1\n0\n0\n-1\n0\n0\n0\n0\n0\n-1\n0\n0\n-1\n1\n0\n0\n0\n1\n0\n0\n0\n0\n0\n-1\n0\n0\n0\n-1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n-1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n-1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1') == '6'\nassert solution('3 1\\n0 2\\n2 1\\n1 0\\n1 1\\n0 0\\n0 0\\n3 3') == '0'\nassert solution('2 4\\n-2 1\\n0 -1\\n-2 0\\n1 0\\n1 1\\n1 1\\n3 -1\\n3 3') == '3'\nassert solution('1 4\\n0 1\\n2 1\\n1 0\\n1 1\\n1 0\\n1 1\\n3 1\\n4 3') == '4'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1 4 40\") == \"3\""
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1.1 1.2 1.3 1.4') == '1'\nassert solution('1.1 1.2 1.3 1.4 1.4 1.3') == '2'\nassert solution('1.1 1.2 1.3 1.4 1.4 1.4 1.4') == '3'\nassert solution('1.1 1.2 1.3 1.4 1.5 1.6') == '1'\nassert solution('1.1 1.2 1.3 1.4 1.5 1.6 1.7') == '2'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('3 1 8 6') == '2'\nassert solution('5 1 7 4 2') == '5'\n\"\"\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('2 1 2.1 4 40') == '3'\nassert solution('2 5 2.5 2.4 2.8 3.6 4.8 5.3 6.3 7.8 8.9 9.9 10.1 11.1 12.1 13.2 14.2 15.3 16.2 17.3 18.2 19.3 20.3 21.1 22.1 23.1 24.1 25.1 26.1 27.1 28.1 29.1 30.1 31.1 32.1 33.1 34.1 35.1 36.1 37.1 38.1 39.1 40.1') == '43'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1 4 40\") == \"3\"\nassert solution(\"3 2 4 40\") == \"2\"\nassert solution(\"3 3 4 40\") == \"3\"\nassert solution(\"3 4 4 40\") == \"3\"\nassert solution(\"3 2 1 4 40\") == \"2\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('3 100 4 40') == '5'\nassert solution('1 1 1 1') == '1'\n'''\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1 4 40\") == \"3\"\nassert solution(\"3 1 5 20\") == \"2\"\nassert solution(\"3 2 2.5 4 40\") == \"3\"\nassert solution(\"3 1 5 20\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1 4 40') == '3'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('3.1 1 4 40') == '3'\nassert solution('3.1 1 4 40') == '3'\nassert solution('3e1 1 4 40') == '3'\nassert solution('3.e1 1 4 40') == '3'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('3.6 1.2 3.5 2.1') == '3'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\nassert solution('''\n1\n8\n2\n3\n4\n5\n6\n7\n''') == '4'\nassert solution('''\n3\n2\n1\n4\n5\n6\n7\n''') == '2'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#1\n''') == '4'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#2\n''') == '2'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#3\n''') == '3'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#4\n''') == '3'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#5\n''') == '6'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#6\n''') == '6'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#7\n''') == '3'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#8\n''') == '3'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#9\n''') == '3'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#10\n''') == '6'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#11\n''') == '2'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#12\n''') == '1'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#13\n''') == '2'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#14\n''') == '1'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#15\n''') == '3'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#16\n''') == '4'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#17\n''') == '6'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#18\n''') == '0'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#19\n''') == '2'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#20\n''') == '2'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#21\n''') == '2'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#22\n''') == '4'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#23\n''') == '5'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#24\n''') == '4'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#25\n''') == '4'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#26\n''') == '4'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#27\n''') == '3'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#28\n''') == '3'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#29\n''') == '3'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#30\n''') == '3'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#31\n''') == '3'\n'''\nhttps://judge.softuni.bg/Contests/Practice/Index/2346#32\n''') == '3'\n'''\nhttps://judge.softuni.bg/"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 352') == '0'\nassert solution('92 76 436') == '2'\nassert solution('99 62 -1') == '99'\nassert solution('0 70 66 71 97') == '70'\nassert solution('76 0 87 66 74') == '76'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 8\n91 93\n98 93\n100 93\n93 96\n97 94\n98 93\n98 87\n99 79\n83 79\n83 62\n83 76\n83 70\n83 66\n83 69\n83 68\n83 65\n83 68\n83 61\n83 60\n83 0\n83 66\n83 74\n83 70\n83 69\n83 68\n83 65\n83 61\n83 60\n83 0\n96 94\n97 94\n98 94\n''') == '99'\nprint(solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\nSample Output:\n99\n3\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\nassert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '60, 70, 76, 84, 90'\nassert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '0, 70, 76, 82, 90'\n'''\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"100\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"3 352\") == \"0\"\nassert solution(\"99 62 -1\") == \"100\"\nassert solution(\"0 70 66 71 97\") == \"100\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\\n') == '99'\nprint(solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\\n'), end='')\nprint('99')\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\nassert solution('''\n2 2\n-1 1\n2 2\n''') == '2'\nassert solution('''\n3 2\n1 1\n2 2\n''') == '2'\nassert solution('''\n2 1\n2 1\n''') == '2'\nassert solution('''\n3 2\n1 1\n1 1\n''') == '1'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n\"\"\") == \"99\"\nassert solution(\"\"\"\n0\n\"\"\") == \"\"\nassert solution(\"\"\"\n0\n\"\"\") == \"\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\nassert solution('''\n20 8\n37 32 0 15 2 8 4 16 20 13 21 1 1 21 1 1 21 0 2 2 2 8 0 8 1 5\n''') == '36'\nassert solution('''\n20 6\n1 2 3 1 2 3 3 2 4 3 3 4 4 4 2 6 2 7 3 6 3 3 4 2 7 7 7 7\n''') == '5'\nassert solution('''\n10\n0 1 1 1 1 1 2 2 2 3\n0 2 2 2 3 3 3 3 3 3 4\n1 1 1 1 1 2 2 2 2 3\n0 3 3 3 4 4 4 4 4 4 5\n2 2 2 3 3 3 3 3 3 3 4\n1 1 1 1 1 1 1 1 1 1 2\n1 1 1 1 1 1 1 1 1 1 1 2\n1 1 1 1 1 1 1 1 1 1 1 2\n1 1 1 1 1 1 1 1 1 1 1 2\n0 3 3 3 3 3 3 3 3 3 4\n''') == '12'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1 2'\nassert solution('4') == '1 2 3 4'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2\n2 3\n3 4''') == '2 3'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 4\n''') == '2 4'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 4\n''') == '2 4'\nassert solution('''\n5\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '2 4'\nassert solution('''\n5\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '2 2'\n'''\n\nn = int(input())\nd = {}\nfor i in range(1, n+1):\n    d[i] = []\n\nfor _ in range(n-1):\n    a, b = map(int, input().split())\n    d[a].append(b)\n    d[b].append(a)"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"2 4\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2 4\\n3 1\\n4 2'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\\n0\\n0\"\nassert solution(\"1\\n2\\n3\") == \"2\\n3\\n4\"\n\nassert solution(\"2\\n1\\n3\") == \"2\\n3\\n1\"\n\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n1\") == \"2\\n3\\n4\\n1\\n1\"\n\nassert solution(\"2\\n1\\n3\") == \"2\\n3\\n1\""
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n4') == '2 3'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5') == '5 4 1'"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n2\n3\n4''') == '2 3'\nassert solution('''4\n1 2\n2 3\n3 4\nSample Input:\n4\n1 2\n2 3\n3 4\nSample Output:\n1 2\n4 3\n4 2\n''') == '4 3'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n1 2\\n2 3\\n3 4\\n') == '2\\n4 3\\n'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1\\n2 2\\n3 2\\n4 1\\n') == '9.0000\\n12\\n12.00000\\n9.0\\n'\nassert solution('5\\n1 1\\n2 2\\n3 2\\n4 2\\n5 1\\n') == '9.0000\\n12\\n12.00000\\n9.0\\n'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1\n2 2\n3 2\n4 1\n''') == '9.0'\nassert solution('''\n3 3\n1 2\n2 2\n3 2\n''') == '12.00000'\nassert solution('''\n5 5\n2 1\n1 3\n1 1\n4 1\n3 2\n''') == '9.999999999'\nassert solution('''\n2 1\n4 3\n''') == '10.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"9.0000\"\nassert solution(\"4\") == \"12.00000\"\nassert solution(\"5\") == \"12.00000\"\nassert solution(\"8\") == \"9.00000\"\nprint('Congratulations! All tests are done!')\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2 1\\n3 2\\n4 1\\n') == \"9.00000\"\nassert solution('4\\n2 1\\n3 2\\n4 1\\n') == \"12.00000\"\nassert solution('2\\n1 1\\n3 2\\n4 1\\n') == \"9.0\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '9.0000'\nassert solution('2') == '12.00000'\nassert solution('3') == '12.00000'\nassert solution('4') == '9.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '12.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 1\n2 2\n3 2\n4 1\n\"\"\") == \"9.00000\"\nassert solution(\"\"\"\n6\n10 10\n6 8\n2 8\n9 8\n3 10\n10 10\n\"\"\") == \"30.00000\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '9.0000'\nassert solution('1 1') == '9.0000'\nassert solution('2 2') == '12.00000'\nassert solution('3 2') == '12.00000'\nassert solution('4 1') == '9.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 2') == '9.0'\nassert solution('10\\n3 3\\n1 4\\n2 4\\n3 3\\n4 5\\n6 5\\n7 6\\n8 8\\n10 7\\n') == '23.2715'\nprint('All done!')\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 1\\n2 2\\n3 2\\n4 1') == '9.0000'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'DI A'\nassert solution('255') == 'DI Y'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"ST A\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\"\nassert solution(\"2\") == \"ST A\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\nST X\\nDI X\\n\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'DI Y'\nassert solution('3') == 'ST X'\nassert solution('10') == 'PL Y'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"ST A\\nPL Y\\nDI Y\"\nassert solution(\"6\") == \"ST A\\nPL Y\\nDI A\\nPL X\\nDI X\\nAD\\nDI Y\\nDI A\\nST Y\\nDI X\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"DI Y\"\nassert solution(\"100\") == \"DI Y\"\nassert solution(\"0\") == \"DI Y\"\nassert solution(\"255\") == \"DI Y\"\nassert solution(\"-1\") == \"DI Y\"\n\"\"\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"DI A\\nDI X\"\n\nassert solution(\"123\") == \"DI A\\nDI X\\nDI Y\\nDI Y\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"AD\"\nassert solution(\"20\") == \"ST A\\nST X\\nDI X\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'DI Y'"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'DI A'\nassert solution('255') == 'DI A'\nassert solution('120') == 'DI A'\nassert solution('210') == 'DI A'\nassert solution('1') == 'DI A'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 5 6\") == \"2\"\nassert solution(\"1 2 3\") == \"1\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 5 6\") == \"2\"\nassert solution(\"5 5 6\") == \"3\"\nassert solution(\"5 5 4\") == \"0\""
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('2 3 9') == '3'\nassert solution('7 5 7') == '1'\nprint('\"Run\" is now complete!')\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 6') == '2'"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('2 3 6') == '4'\nassert solution('3 2 6') == '0'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 5 5') == '1'\nassert solution('1 1 1') == '1'\nassert solution('2 2 3') == '0'\nassert solution('3 5 4') == '0'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 5 6') == '2'\n\"\"\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 5 6\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n''') == '2'"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 5 6\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000''') == '2'\nassert solution('''3 4 3\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000''') == '1'\nassert solution('''3 1 2\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000''') == '0'\nassert solution('''9 2 4\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000''') == '1'\nassert solution('''10 10 10\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000''') == '1'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 5 6\") == \"2\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\nS-> aSa\\nS-> bSb\\nS-> a\\nS-> b') == 'abaaba'\nassert solution('2\\nS-> aa\\nS-> b') == 'NONE'\nassert solution('1\\nS-> a') == 'a'\nassert solution('1\\nS-> b') == 'NONE'\nassert solution('0\\n') == 'NONE'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome''') == 'abaaba'\n\nassert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome''') == 'abaaba'\n\nassert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome''') == 'a'"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \"\"\") == \"\"\"abaaba\"\"\"\"\nassert solution(\"\"\"S -> aSaa\nS -> a\nS -> \nwhere are the abaaba palindromes on this line\nNONE on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\nSample Output:\nabaaba\nNONE\nabbbbbbbbbbbbbbbbba\na\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\nnone on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n') == 'abaaba'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome''') == 'abaaba'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\n') == 'abaaba'\nassert solution('5\\nS -> aS\\nS -> bS\\nS -> a\\nS -> b\\nS -> \\n') == 'abaaba'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\n') == 'NONE'\nassert solution('1\\nS -> a\\nS -> b\\nS -> a\\nS -> b\\nS -> \\n') == 'a'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\nS->aS\\n2\\nS->bS\\n3\\nS->a\\n4\\nS->b\\n5\\nS->\\n\") == \"abaaba\"\nassert solution(\"1\\nS->aS\\n2\\nS->bS\\n3\\nS->a\\n4\\nS->b\\n5\\nS->\\n\") == \"abaaba\"\nassert solution(\"1\\nS->aS\\n2\\nS->bS\\n3\\nS->a\\n4\\nS->b\\n5\\nS->\\n\") == \"abaaba\"\nassert solution(\"1\\nS->aS\\n2\\nS->bS\\n3\\nS->a\\n4\\nS->b\\n5\\nS->\\n\") == \"abaaba\"\nassert solution(\"1\\nS->aS\\n2\\nS->bS\\n3\\nS->a\\n4\\nS->b\\n5\\nS->\\n\") == \"abaaba\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == 'abaaba', 'basic test 1'\nassert solution('3') == 'ab', 'basic test 2'\nassert solution('10') == 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'basic test 3'\nassert solution('5') == 'ab', 'complex test 1'\nassert solution('1') == '', 'complex test 2'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b') == 'abaaba'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\nNONE on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome') == 'abaaba'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nNONE\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome''') == 'abaaba'\nassert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nNONE\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome''') == 'NONE'\nassert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\na\nNONE\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome''') == 'a'\nassert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\na\nNONE\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome''') == 'NONE'\n'''\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"8\") == \"3\""
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n4 5 0 2\\n1 3 7\\n2 0') == \"4\"\nassert solution('1\\n0\\n0') == \"0\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"4\"\n\nprint(\"\\U0001F44C\")\nprint(\"\\U0001F44C\")"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == \"4\"\n\"\"\""
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\n3 4 2 6 5 7 8 9 2\n1 3 7\n2 0\n4\n''') == '8'\n\nassert solution('''\n10\n4 5 0 2\n1 3 7\n2 0\n4\n''') == '0'\n\nassert solution('''\n10\n5 6 4 3 2 7\n1 3 7\n2 0\n4\n''') == '8'\n\nassert solution('''\n5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '0'\n\nassert solution('''\n5\n5 5 5 5 5\n5 5 5 5 5\n5 5 5 5 5\n5 5 5 5 5\n5 5 5 5 5\n''') == '11'"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '4'\n\"\"\"\n\nn = int(input())\narr = []\n\nfor i in range(n):\n    x, y = map(int, input().split())\n    arr.append([x, y])"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n4 5 0 2\n1 3 7\n2 0\n4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"0\"\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n') == '4'\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"GO FOR IT\", \"Should return GO FOR IT\"\nassert solution(\"4 4\") == \"NO CHANCE\", \"Should return NO CHANCE\"\nassert solution(\"1 1\") == \"NO WAY\", \"Should return NO WAY\"\nassert solution(\"1 2\") == \"SUCCESS\", \"Should return SUCCESS\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG\n''') == \"GO FOR IT\"\nassert solution('''\n5 5\nWWWWWWWWWW\nWSBBWWWW\nWWWWWWWWWW\nWBWGWWWWWW\nWWWWWWWWWW\n''') == \"GO FOR IT\"\nassert solution('''\n1 1\n1 1\nWWW\nSBB\n''') == \"GO FOR IT\"\n'''"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == 'GO FOR IT'\nassert solution('4 4') == 'GO FOR IT'\nassert solution('10 10') == 'GO FOR IT'\n\n\"\"\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 4\nWWWW\nWSBB\nWWWW\nWBWG\n''') == 'GO FOR IT'\nassert solution('''\n2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG\n''') == 'GO FOR IT'\n'''\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG\n''') == 'GO FOR IT'\nassert solution('''2 3\n3 3\nWWWW\nWSBB\nWWWW\nWBWG\n''') == 'GO FOR IT'\nassert solution('''2 3\n3 3\nWWWW\nWSBB\nWBWG\n''') == 'NO CHANCE'\nassert solution('''2 3\n3 3\nWWWW\nWSBB\nWWWW\n''') == 'NO CHANCE'\nassert solution('''2 3\n3 3\nWWWW\nWSBB\nWSBB\n''') == 'NO WAY'\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2 3\n4 4\nWWWW\nWSBB\nWWWW\"\"\") == \"GO FOR IT\"\nassert solution(\"\"\"2 3\n4 4\nWWWW\nWGGG\nWWWW\"\"\") == \"NO CHANCE\"\nassert solution(\"\"\"2 3\n4 4\nWWWW\nWBWG\nWWWW\"\"\") == \"NO WAY\"\nassert solution(\"\"\"1 1\n2 4\nWWWW\nWWWW\"\"\") == \"NO WAY\"\nassert solution(\"\"\"4 4\n4 4\nWWWW\nWWWW\"\"\") == \"NO WAY\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == \"GO FOR IT\"\nassert solution('5 6') == \"NO WAY\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG') == \"GO FOR IT\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW') == 'SUCCESS'\nassert solution('2 3\\n4 4\\nWWWW\\nWBWG\\nSample Input') == 'NO WAY'\nassert solution('2 3\\n4 4\\nWWWW\\nWBWG\\nSample Input') == 'NO CHANCE'"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"GO FOR IT\"\nassert solution(\"2 3\") == \"SUCCESS\"\nassert solution(\"1 2\") == \"NO CHANCE\"\nassert solution(\"1 2\") == \"NO WAY\"\nassert solution(\"2 2\") == \"SUCCESS\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2243'\nassert solution('1\\n2\\n4\\n5\\n6') == '7'\nprint('You are a studnet of Computing class, you have passed this challenge')\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 900\n800 700 400 300 200\n''') == '2243'\nassert solution('''5 10000\n500 500 500 500 500\n''') == '5000'\n\n########################"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 900\\n800 700 400 300 200') == '2243'\nassert solution('4\\n1 2 3 4') == '0'\nassert solution('3\\n1 2 3') == '3'\nassert solution('2\\n1 2') == '1'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(s) == \"2243\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 900\n800 700 400 300 200''') == '2243'\nassert solution('''8 10\n900 900 900 900 900 900 900\n800 800 800 800 800 800 800\n700 700 700 700 700 700 700\n700 700 700 700 700 700 700\n700 700 700 700 700 700 700''') == '1990'\nassert solution('''8 100\n900 900 900 900 900 900 900\n800 800 800 800 800 800 800\n700 700 700 700 700 700 700\n700 700 700 700 700 700 700\n700 700 700 700 700 700 700''') == '1998'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 900\\n800 700 400 300 200\") == \"2243\"\nassert solution(\"20 11\\n16 48 96 15 20 22 55 18 79 5 55 37\\n19 2 23 7 3 18 6 8 8 9 8 2 7 5 6 7 2\\n17 9 20 18 20 18 16 14 12 19 2 8 19 18 5 12 18 18 8 2 5 9 4 2 12\\n16 6 20 18 20 16 13 4 12 13 3 6 18 2 3 3 3 2 2 8 4 5 3 4 5 9\\n20 16 9 8 5 14 17 3 9 9 7 3 6 19 18 3 6 14 2 3 2 3 4 2 2 5 5 5 3 9 2\\n10 4 5 9 2 4 9 5 4 8 4 5 5 4 5 8 6 6 4 5 4 4 5 2 4 8 4 5 6 3 3\\n11 9 4 3 4 5 4 5 4 5 5 5 4 5 5 4 5 5 4 5 4 5 4 5 4 5 5 5 5 5\\n14 2 5 6 5 7 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5\\n13 9 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\\n9 3 2 3 2 3 2 2 2 3 2 3 2 3 2 3 2 3 2 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2\\n3 3 2 3 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 1000\\n10 10 20 20 30 40 50 60 70 80 90\\n50 50 20 20 50 40 30 50 20 20 50\\n1\\n1 10\") == \"2142\"\nassert solution(\"5 1000\\n800 700 400 300 200\\n10 50 20 20 50 40 30 50 20 20 50\\n1\\n1 10\") == \"3103\"\nassert solution(\"5 900\\n800 700 400 300 200\\n10 50 20 20 50 40 30 50 20 20 50\\n1\\n2 10\") == \"4523\"\nassert solution(\"5 900\\n800 700 400 300 200\\n10 50 20 20 50 40 30 50 20 20 50\\n1\\n3 10\") == \"4668\"\nassert solution(\"5 900\\n800 700 400 300 200\\n10 50 20 20 50 40 30 50 20 20 50\\n2\\n3 10\") == \"3367\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 5 600\\n800 700 400 300 200\\n') == '2243'\nassert solution('4 4\\n1 2 3 4\\n') == '1'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 900') == '2243', 'Fail'\nassert solution('5 800') == '1900', 'Fail'\nassert solution('5 1200') == '8975', 'Fail'\nassert solution
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3 5\n800 700 400 300 200\n\"\"\"\n) == \"2243\"\nassert solution(\n\"\"\"\n2 5\n500\n\"\"\"\n) == \"500\"\nassert solution(\n\"\"\"\n1 1\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n3 2\n1 3\n\"\"\"\n) == \"4\"\nassert solution(\n\"\"\"\n2 1\n100\n\"\"\"\n) == \"100\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3\n''') == 'no\\nyes\\n'''\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3\n''') == 'yes\\n'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 4\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3\\n\") == \"yes\"\nassert solution(\"10 1\\n? 1 3\\n= 1 3\\n? 1 3\\n\") == \"no\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3\nSample Output:\nyes\n''') == 'no'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 4\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3') == 'no'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == 'yes\\nyes'\nassert solution('1 3') == 'no\\nyes'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3\n''') == 'no\\nyes\\n'''\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'yes'"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4\\n= 1 3\\n= 1 3\\n? 1 3\\n? 1 3\\n') == 'yes'\nassert solution('2 3\\n? 1 3\\n? 1 3\\n? 1 3\\n') == 'no'\nassert solution('5 4\\n= 1 3\\n= 3 8\\n= 3 8\\n? 1 3\\n? 1 3\\n? 1 3\\n? 1 3\\n') == 'yes'\n\n'''"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'no\\nyes\\nno\\nyes\\nno\\nyes\\nno\\nyes\\nno\\nno\\n'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"2\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == \"2\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n10 5 4 8 3\") == \"2\"\nassert solution(\"10 5 4 8 3\\n5 3\\n5 3\\n5 3\\n5 3\\n5 3\\n5 3\") == \"2\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\n10 5 4 8 3\n''') == '2'\nassert solution('''\n100 3\n1000000 1000000\n''') == '0'\nassert solution('''\n5 3\n10 5 4 8 3\n''') == '1'\nassert solution('''\n5 2\n1 2\n''') == '0'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == \"2\", \"Should return 2\"\nassert solution('10 5 4 8 3') == \"3\", \"Should return 3\""
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == '2'\nassert solution('4 4\\n3 2 3 4\\n4 1 2 3\\n3 1 4 3\\n1 1 4 3') == '4'\nassert solution('5 5\\n10 5 4 8 3\\n10 4 5 4 8\\n3 2 3 4\\n4 1 2 3\\n3 1 4 3\\n1 1 4 3') == '4'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == '2'\nassert solution('5 4 3 1 2\\n2 5 1') == '0'\nassert solution('5 1 2 3 4\\n1 5') == '0'\nassert solution('10 10 11 10\\n0 0 0 0 0') == '0'"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '2'\nassert solution('4 5') == '2'\nassert solution('4 5') == '2'\nassert solution('4 5') == '2'\nassert solution
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '2'\nassert solution('5 3\\n10 5 4 8 3') == '2'"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 127') == 1083\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1083'"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 127\") == \"1083\"\nassert solution(\"1 17\") == \"15\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 127\n''') == '1083'\nassert solution('''\n1 2\n''') == '2'\nassert solution('''\n1 1\n''') == '1'\n''')\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 127\") == \"1083\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 11\") == \"9\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(f.__doc__) == '1083'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 127') == '1083'\nassert solution('1,100') == '101'\nassert solution('3,40') == '6'\n\"\"\""
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1\\n') == '1083'\n\n\"\"\""
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 1\") == \"10\"\nassert solution(\"8 1\") == \"8\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 127') == '1083'\n'''\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"2.0000000000\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4\\nHow much is 6 times 9? 42') == '2.0000000000'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n''') == '2.0000000000'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?\") == \"2.0000000000\"\nassert solution(\"7 6\\nWhat is the air speed velocity of an unladen swallow? African?\") == \"2.0000000000\"\nassert solution(\"8 2\\nWhat is the air speed velocity of an unladen swallow? African?\") == \"2.0000000000\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"2.0000000000\"\nassert solution(\"10 10\") == \"0.0000010000\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n10\\nIs there intelligent life on Mars?\\n Yes.') == '2.0000000000'\nassert solution('1\\n10\\nWhat is the airspeed velocity of an unladen swallow? African?') == '4.44444444444'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?\"\n) == \"2.0000000000\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom math import factorial\n\nsys.setrecursionlimit(10 ** 7)\n\nread = lambda: sys.stdin.readline().rstrip()\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0.0000000000\"\nassert solution(\"1\") == \"0.0000000000\"\nassert solution(\"1 2\") == \"0.50000000000\"\nassert solution(\"1 2 3\") == \"0.666666666667\"\nassert solution(\"1 2 3 4\") == \"1.0000000000\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?\") == \"2.0000000000\"\n\"\"\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?''') == '2.0000000000'''\n\nn = int(input())\nfor _ in range(n):\n    l = list(input().split())\n    if l[1] == '?':\n        print(int(l[0])*3)\n    else:\n        print(int(l[0])*2)\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'POSSIBLE'\nassert solution('3 6') == 'IMPOSSIBLE'\nassert solution('2 2') == 'POSSIBLE'\nassert solution('3 5') == 'IMPOSSIBLE'\n\"\"\""
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 6\\n\"\n    \"monkey 2 lion penguin\\n\"\n    \"lion 3 monkey penguin lion\\n\"\n    \"penguin 1 monkey\"\n) == \"POSSIBLE\"\n\nassert solution(\n    \"2 3\\n\"\n    \"foo 2 bar\\n\"\n    \"foo 3 bar\"\n) == \"IMPOSSIBLE\"\n\nassert solution(\n    \"1 1\\n\"\n    \"monkey\\n\"\n    \"lion\\n\"\n    \"penguin\\n\"\n    \"monkey\\n\"\n    \"lion\\n\"\n    \"penguin\"\n) == \"IMPOSSIBLE\"\n\nassert solution(\n    \"1 5\\n\"\n    \"monkey\\n\"\n    \"lion\\n\"\n    \"penguin\\n\"\n    \"monkey\\n\"\n    \"lion\\n\"\n    \"penguin\"\n) == \"FALSE ALARM\""
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 6\") == \"IMPOSSIBLE\", \"Should be IMPOSSIBLE\"\nassert solution(\"1 3\") == \"POSSIBLE\", \"Should be POSSIBLE\""
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 6') == 'POSSIBLE'\nassert solution('2 3') == 'IMPOSSIBLE'\n\n--------------------------------------------------------------------------------------------------------------------\n7. Write a function to compute the missing number of a list of consecutive numbers.\n\nInput: \nThe first line contains an integer $T$, denoting the number of test cases. Each test case contains a single integer, $N$, denoting the size of the input array. Then follow $N$ space-separated integers, each denoting the elements of the array.\n\nOutput:\nFor each test case, print the missing number.\n\nExample:\nInput:\n1\n5\n1 2 3 4 5\nOutput:\n4\n\nNote: For the purpose of this problem, assume that the input array is strictly increasing.\n\n--------------------------------------------------------------------------------------------------------------------\n8. Write a function to swap the positions of the n-th and (n+1)-th elements in an array.\n\nInput: \nThe first line of input contains an integer $T$, denoting the number of test cases. Then follow $T$ lines, each containing a single integer $N$ denoting the size of the array. The following $N$ lines contain an integer, $n$ denoting the index of the first element to swap, followed by $n+1$ elements, each denoting the positions of the elements that need to be swapped.\n\nOutput:\nFor each test case, print the elements in the array in the original order after the swap.\n\nExample:\nInput:\n1\n5\n1 2 3 4 5\n3 1 2 4 5\nOutput:\n1 2 3 4 5\n3 2 1 4 5\n\nIn the first test case, the elements in the array are swapped, i.e., the 1 and 3 are swapped.\n\n--------------------------------------------------------------------------------------------------------------------\n9. Write a program to convert an integer into a binary equivalent.\n\nInput: \nThe first line of input contains an integer $T$, denoting the number of test cases. Then follow $T$ lines, each containing a single integer, $n$ denoting the size of the array. The following $n$ lines contain a single integer, $n$ denoting the integer to convert into binary, followed by $n+1$ lines, each containing a single integer, $n$ denoting the number of bits to be extracted from the integer.\n\nOutput:\nFor each test case, print the corresponding binary equivalent of the input integer.\n\nExample:\nInput:\n1\n4\n1\nOutput:\n1\n101\n1101\n\n----------------------------------------\n10. Write a program to sum all the numbers in a list.\n\nInput: \nThe first line contains an integer $T$, denoting the number of test cases. Then follow $T$ lines, each containing a single integer, $n$ denoting the size of the array. The following $n$ lines contain $n$ space-separated integers, each denoting the elements of the array.\n\nOutput:\nPrint the sum of all elements of the array.\n\nExample:\nInput:\n1\n5\n1 2 3 4 5\nOutput:\n12\n\n----------------------------------------\n11. Write a program to calculate the sum of a list of integers.\n\nInput: \nThe first line of input contains an integer $T$, denoting the number of test cases. Then follow $T$ lines, each containing a single integer, $n$ denoting the size of the array. The following $n$ lines contain $n$ space-separated integers, each denoting the elements of the array.\n\nOutput:\nFor each test case, print the sum of all elements of the array.\n\nExample:\nInput:\n1\n5\n1 2 3 4 5\nOutput:\n15\n\n----------------------------------------\n12. Write a program to check if the given list is palindrome or not.\n\nInput: \nThe first line of input contains an integer $T$, denoting the number of test cases. Then follow $T$ lines, each containing a single integer, $n$ denoting the size of the array. The following $n$ lines contain $n$ space-separated integers, each denoting the elements of the array.\n\nOutput:\nFor each test case, print \"POSSIBLE\" if the list is palindrome else print \"IMPOSSIBLE\" if the list is not palindrome.\n\nExample:\nInput:\n1\n5\n1 2 3 4 5\nOutput:\nPOSSIBLE\n\n----------------------------------------\n13. Write a program to calculate the sum of all the even numbers in a list.\n\nInput: \nThe first line of input contains an integer $T$, denoting the number of test cases. Then follow $T$ lines, each containing a single integer, $n$ denoting the size of the array. The following $n$ lines contain $n$ space-separated integers, each denoting the elements of the array.\n\nOutput:\nFor each test case, print the sum of all even numbers of the array.\n\nExample:\nInput:\n1\n5\n1 2 3 4 5\nOutput:\n6\n\n----------------------------------------\n14. Write a program to calculate the sum of all the even numbers in a list.\n\nInput: \nThe first line of input contains an integer $T$, denoting the number of test cases. Then follow $T$ lines, each containing a single integer, $n$ denoting the size of the array. The following $n$ lines contain $n$ space-separated integers, each denoting the elements of the array.\n\nOutput:\nFor each test case, print the sum of all even numbers of the array.\n\nExample:\nInput:\n1\n5\n1 2 3 4 5\nOutput:\n6\n\n----------------------------------------\n15. Write a program to remove the duplicate elements in the list.\n\nInput: \nThe first line of input contains an integer $T$, denoting the number of test cases. Then follow $T$ lines, each containing a single integer, $n$ denoting the size of the array. The following $n$ lines contain $n$ space-separated integers, each denoting the elements of the array.\n\nOutput:\nFor each test case, print a new list with all the unique elements in the array.\n\nExample:\nInput:\n1\n5\n1 2 3 4 5\nOutput:\n1 2 3 4 5\n\n----------------------------------------\n16. Write a program to check if all the numbers of the list are divisible by 5 or not.\n\nInput: \nThe first line of input contains an integer $T$, denoting the number of test cases. Then follow $T$ lines, each containing a single integer, $n$ denoting the size"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey\n''') == 'POSSIBLE'\n\nassert solution('''\n2 5\ndog 1 cat dog\ncat 2 dog\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n4 5\ndog 2 cat fish\nfish 3 dog\ncat 3 dog\ndog 1 hamster\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n6 7\ndog 5 cat fish\nfish 2 salmon\nsalmon 3 shark\nshark 5 turtle\ncat 3 dog\ndog 4 smelly worm\n''') == 'FALSE ALARM'\n\nassert solution('''\n5 5\ndog 5 cat fish\nfish 2 salmon\nsalmon 3 shark\nshark 5 turtle\ncat 3 dog\ndog 4 smelly worm\n''') == 'POSSIBLE'"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 6\\nmonkey 2 lion penguin') == 'POSSIBLE'\nassert solution('4 3\\nhippo 1 hippo\\nhippo 2 hippo\\nhippo 3 hippo\\nhippo 4 hippo') == 'FALSE ALARM'\nassert solution('3 3\\ncat 2 cat\\ncat 3 cat\\ncat 1 cat') == 'IMPOSSIBLE'\nassert solution('2 5\\ncat 2 cat\\ncat 3 cat\\ncat 4 cat\\ncat 5 cat') == 'IMPOSSIBLE'\nassert solution('3 2\\ncat 2 cat\\ncat 3 cat\\ncat 4 cat') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3') == 'IMPOSSIBLE'\nassert solution('2 3') == 'POSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 4\nlion 2 monkey\nmonkey 4 lion\npenguin 1''') == 'POSSIBLE'\nassert solution('''5 2\nlion 1 5\nmonkey 4 1\npenguin 2 3\nlion 4 2\nmonkey 1 3''') == 'IMPOSSIBLE'"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 5\nlion 2 monkey 3 elephant\nelephant 4 lion 5 elephant\nmonkey 6 elephant 7 monkey\n3 elephant 8 monkey\n''') == \"POSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey''') == \"POSSIBLE\"\nassert solution('''3 8\nmonkey 5 lion 4 rabbit\nrabbit 2 monkey\nmonkey 1 rabbit\nrabbit 7 monkey\nlion 2 rabbit\nlion 3 rabbit\nrabbit 6 lion''') == \"POSSIBLE\"\nassert solution('''2 5\ncat 5 dog\ndog 3 cat\ncat 7 dog\ndog 2 cat\ncat 1 dog''') == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'\nassert solution('5') == 'random sequence'\nassert solution('1') == 'random sequence'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n\"\"\"\n) == \"\"\"triple correlation 4(1)4(3)3 found\"\"\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"random sequence\"\nassert solution(\"100\") == \"random sequence\""
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"100\\n\"\n    \"4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\"\n    ) == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\n    \"0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\"\n    ) == \"random sequence\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1000') == 'triple correlation 4(1)4(3)3 found'\nassert solution('10000') == 'triple correlation 4(1)4(3)3 found'\nassert solution('1234') == 'random sequence'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100\\n1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4''') == 'triple correlation 4(1)4(3)3 found'"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4') == 'triple correlation 4(1)4(3)3 found'\nassert solution('200\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\nassert solution('100\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1\\n39\\n10\\n') == '40.5'\nassert solution('4 2\\n7 4\\n6 10\\n') == '7.5'\nassert solution('5 6\\n7 7\\n6 10\\n') == '8.0'\nassert solution('6 7\\n6 7\\n6 10\\n') == '9.0'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1') == '40.5'\nassert solution('4 5') == '41.0'\nassert solution('10 10') == '20.0'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n    3 1\n    40\n    10\n\"\"\") == \"40.5\"\nprint(solution(input()))\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '3.4'\nassert solution('3 1') == '2.5'\nassert solution('5 2') == '4.0'\nassert solution('1000000000000 1') == '0.000000000'\nassert solution('100000000000 1') == '0.00000001'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1\\n39\\n10\\n') == '40.5'\nassert solution('3 2\\n4 2\\n5 2\\n') == '5.5'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3\\n'\n    '39 10\\n'\n    '40 15') == '40.5'"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n40\n60\nSample Input 2:\n100 2\n40\n60\nSample Output 2:\n50.0\n''') == '50.0'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1.5'\nassert solution('1 0.1') == '0.9'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n33\n50\n''') == '33.666666666666666'\nassert solution('''\n1 2\n8\n6\n''') == '8.5'\nassert solution('''\n5 3\n1\n10\n9\n1\n''') == '9.0'\n''')"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 1\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n1 1\n2 2\n3 3\n4 3\n5 4\n6 4\n7 4\n8 4\n9 5\"\"\") == \"Impossible\"\n\nassert solution(\"\"\"3\n1 1\n2 2\n3 3\n4 3\n5 4\n6 4\n7 4\n8 4\n9 5\"\"\") == \"6\"\n\nassert solution(\"\"\"3\n1 1\n2 2\n3 3\n4 3\n5 4\n6 4\n7 4\n8 4\n9 5\"\"\") == \"10\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == '2008'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([4, 6]) == \"Impossible\"\nprint(solution([4, 6]))\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == 'Impossible'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 6\") == \"Impossible\"\nassert solution(\"1 2 1987\") == \"1988\"\nassert solution(\"2 3 1987\") == \"1988\"\nassert solution(\"1 3 1987\") == \"1987\"\nassert solution(\"2 4 1987\") == \"1988\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 6') == 'Impossible'"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987''') == 'Impossible'\nassert solution('''4 3\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987''') == '2008'\nassert solution('''8 3\n1 2 1988\n2 3 1988\n1 3 1988\n2 4 1988\n1 4 1988\n3 4 1988''') == '2015'\nassert solution('''2 9\n1 2 2019\n1 3 2019\n2 4 2019\n2 5 2019''') == '2019'\nassert solution('''12 5\n1 2 2018\n1 3 2018\n1 4 2018\n1 5 2018\n2 3 2018\n2 4 2018\n2 5 2018\n3 4 2018\n3 5 2018\n4 5 2018\n4 6 2018\n5 6 2018''') == '2037'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n''') == 'Impossible'\nassert solution('''\n4 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n''') == '1988'\nassert solution('''\n4 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n''') == '1994'\nassert solution('''\n4 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n''') == '1988'\nassert solution('''\n4 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n''') == '1987'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6') == '2008'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n''') == 'Impossible'\nassert solution('''\n2 3\n1 2\n1 3\n''') == '1988'\nassert solution('''\n2 3\n1 2\n1 3\n''') == '2088'\nassert solution('''\n2 3\n1 2\n1 3\n''') == 'Impossible'\nassert solution('''\n4 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n''') == '1988'\n''')"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 0 1\n    N 1 2\n    C 1 2\n    N 1 3\n    C 1 1''') == '3'\nassert solution('''4 0 1\n    N 1 2\n    C 1 2\n    N 1 3\n    C 1 1''') == 'impossible'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == 'impossible'\nassert solution(\"4 0 1\") == 'impossible'\nassert solution(\"2 0 3\") == 'impossible'\nassert solution(\"4 0 1\") == '2'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([4, 0, 1, 1]) == '3', solution([4, 0, 1, 1])\nassert solution([4, 0, 1, 2]) == '4', solution([4, 0, 1, 2])\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 0 1') == 'impossible'\nassert solution('5 1 2') == '2'\nassert solution('4 0 1') == 'impossible'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1') == '3'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\\n') == '3'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1''') == '3'\nassert solution('''4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == 'impossible'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == \"impossible\"\nassert solution('''\n5 0 1\nN 1 2\nC 1 2\nN 2 1\nC 2 3\n''') == \"1\"\nassert solution('''\n4 1 1\nN 1 2\nC 1 2\nN 2 3\n''') == \"2\"\nassert solution('''\n4 1 1\nN 1 2\nC 1 2\nN 3 2\n''') == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == \"impossible\"\n\nassert solution('''\n1 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == \"3\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([4, 0, 1,\n         2, 1,\n         'N', 1, 3,\n         'N', 1, 1]) == 'impossible'\n\nassert solution([2, 3, 1,\n         1, 0,\n         'N', 1, 3,\n         'N', 1, 1]) == '5'\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == 0\nassert solution(\"())\") == 1\nassert solution(\")(()\") == 2\nassert solution(\"((())(())())\") == 10\nassert solution(\"(())((()))\") == 10\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n(())\n''') == '10','sample'\n\nassert solution('''\n()\n''') == '0','single'\n\nassert solution('''\n((()\n)())\n''') == '10', 'three'\n\nassert solution('''\n(())(\n)()\n''') == '6', 'invalid'\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 10"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"()\") == \"0\"\nassert solution(\"())(\") == \"1\"\nassert solution(\"())(())\") == \"4\"\nassert solution(\"()(())\") == \"5\"\nassert solution(\"))(\"\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"()\") == \"()\"\nassert solution(\"(())\") == \"()\"\nassert solution(\")(())\") == \"()\"\nassert solution(\"(())()\") == \"()()\"\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 10\n\"\"\"\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n())') == '0'\nassert solution('2\\n((()))') == '3'"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('((((((((((((())))))\n    )))))\n    )))"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == 10\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == 10\nassert solution('2') == 4\nassert solution('1') == 0\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15''') == '85293'\nassert solution('''8\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\nSample Output:\n85293\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('9\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '85293'\nassert solution('6\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8') == '361685'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8') == '85293'\nassert solution('3') == '0'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8') == \"85293\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''9\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n''') == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8') == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n    3\n    377 a\n    455 h\n    180 a\n    \"\"\") == \"85293\"\nassert solution(\"\"\"\n    4\n    377 a\n    455 h\n    180 a\n    211 a\n    134 a\n    46 h\n    111 h\n    213 h\n    17 a\n    15\n    1 2\n    1 4\n    1 6\n    2 3\n    2 4\n    2 5\n    3 5\n    4 6\n    4 7\n    4 9\n    5 7\n    5 8\n    6 9\n    7 9\n    7 8\n    \"\"\") == \"85293\"\nassert solution(\"\"\"\n    5\n    377 a\n    455 h\n    180 a\n    211 a\n    134 a\n    46 h\n    111 h\n    213 h\n    17 a\n    15\n    1 2\n    1 4\n    1 6\n    2 3\n    2 4\n    2 5\n    3 5\n    4 6\n    4 7\n    4 9\n    5 7\n    5 8\n    6 9\n    7 9\n    7 8\n    \"\"\") == \"1459\"\n\nprint(solution(input()))"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n''') == '85293'\n\nassert solution('''\n11\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n''') == '66649'\n\nassert solution('''\n7\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n''') == '114500'\n\nassert solution('''\n7\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n''') == '354500'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"5\""
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\nassert solution('5 4\\n1 2\\n2 3\\n1 4\\n3 4\\n1 5\\n5 4') == '4'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\n\"\"\""
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\nassert solution('6 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n3 5\\n4 5') == '6'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\nassert solution(\"9 8\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n3 5\\n4 6\\n5 6\\n6 7\\n1 8\\n2 8\\n3 8\\n4 8\\n5 8\\n6 9\\n7 10\\n8 11\\n9 12\\n10 13\\n11 14\\n12 15\\n13 16\") == \"8\"\nassert solution(\"15 13\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n3 5\\n4 5\\n5 6\\n6 7\\n1 8\\n2 8\\n3 8\\n4 8\\n5 8\\n6 9\\n7 10\\n8 11\\n9 12\\n10 13\\n11 14\\n12 15\\n13 16\\n14 17\") == \"13\"\nassert solution(\"16 17\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n3 5\\n4 5\\n5 6\\n6 7\\n1 8\\n2 8\\n3 8\\n4 8\\n5 8\\n6 9\\n7 10\\n8 11\\n9 12\\n10 13\\n11 14\\n12 15\\n13 16\\n14 17\\n15 18\") == \"18\"\nassert solution(\"26 17\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n3 5\\n4 5\\n5 6\\n6 7\\n1 8\\n2 8\\n3 8\\n4 8\\n5 8\\n6 9\\n7 10\\n8 11\\n9 12\\n10 13\\n11 14\\n12 15\\n13 16\\n14 17\\n15 18\\n16 19\") == \"15\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n') == '5'"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\nassert solution('7 2\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n2 5\\n2 6\\n3 7\\n3 8\\n4 7\\n4 8\\n4 9\\n5 6\\n6 9') == '6'\nassert solution('1') == '1'\nassert solution('5') == '5'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 5\n1 2\n1 3\n2 3\n1 4\n2 4\n''') == '5'\nassert solution('''\n4 5\n1 2\n1 3\n2 3\n1 4\n2 4\n''') == '5'\n'''"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '5'\n\n'''\nfrom collections import defaultdict"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n''') == '5100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n\"\"\") == \"5100\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '3900'\nassert solution('2') == '8'\nassert solution('5') == '3900'\n\n'''\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3\\n\"\n    \"caterpillar 3 pupa 7 butterfly\\n\"\n    \"3 dove 3 pigeon 7 aaabaaajss\\n\"\n    \"7 mouse 1 electromouse 5 rat\\n\"\n    \"7 rat\"\n    ) == \"5100\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '5100'\nassert solution('5') == '5100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5') == '5100'\nassert solution('4\\n3\\n2\\n1\\n5') == '5000'\nassert solution('2\\n1\\n2\\n3') == '2'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '500'\nassert solution('15') == '2100'\nassert solution('1000') == '100100'\n\"\"\"\n\nimport sys\n\nsys.stdin = open('input.txt')"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly''') == '5100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n''') == '5100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '100'\nassert solution('3') == '200'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n4\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6', 'First'\nassert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '-1', 'Second'"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6 1 2 3 1 4 5\"\nprint(solution(input))\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\"\nprint(solution(open(\"input.txt\")))"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"\"\"6\n1\n2\n3\n1\n4\n5\"\"\"\n\nassert solution(\"\"\"\n5\n1\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"\"\"2\n1\n2\"\"\"\n\nassert solution(\"\"\"\n10\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n1\n4\n2\n3\n5\n\"\"\") == \"\"\"9\n2\n3\n4\n1\n2\"\"\"\n\nassert solution(\"\"\"\n100\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n1\n4\n2\n3\n5\n1\n4\n2\n3\n5\n1\n4\n2\n3\n5\n\"\"\") == \"\"\"99\n2\n3\n4\n1\n2\"\"\"\n\nassert solution(\"\"\"\n10\n1\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n1\n4\n2\n3\n5\n\"\"\") == \"\"\"1\n1\n1\n1\n1\n1\"\"\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6\\n1\\n2\\n3\\n1\\n4\\n5'\nassert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6\\n1\\n2\\n3\\n1\\n4\\n5'\nassert solution('''\n4\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '-1'\nassert solution('''\n8\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6\\n1\\n2\\n3\\n1\\n4\\n5'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6'\nassert solution('''3\n0\n1\n2\n''') == '-1'\nassert solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6'"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n7\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'\nassert solution('2\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'\nassert solution('8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n') == '-1\\n'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2\n1 2 1 2 1\n4\n1 2 O 3\n2 1 O 3\n1 2 R 5\nSample Input 2:\n3 3\n1 2 1 2 1\n2 1 O 3\n1 2 R 5\nSample Output 2:\n11\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5\n\"\"\") == \"10\"\nassert solution(\n\"\"\"\n2 10\n1 2 O 3\n1 2 O 3\n2 1 O 3\n1 2 O 3\n1 2 O 3\n2 1 O 3\n1 2 O 3\n2 1 O 3\n1 2 R 5\n\"\"\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 5\n1 2 1 2 1\n4\n1 2 O 3\n1 2 R 5\n2 1 O 3\n1 2 R 6\n''') == '10'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5\\n1 2 1 2 1\\n4\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5') == \"10\""
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 5\n1 2 1 2 1\n4\n1 2 O 3\n1 2 R 5\nSample Input 2:\n2 3\n1 2 1 2\n4\n1 2 O 3\n1 2 R 5\nSample Output 2:\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10 5\n1 2 1 2 1 2 1 2 1 2 1\n4\n1 2 O 3\n1 2 R 5\n1 2 O 3\n1 2 R 5\n1 2 O 3\n1 2 R 5\n1 2 O 3\n1 2 R 5\n1 2 O 3\n1 2 R 5\nSample Output 3:\n\"\"\") == \"\"\nassert solution(\"\"\"\n100000 5\n0 1 1 2 3 5\n4\n0 1 2 3 4 5\n1 1 1 2 2 3\n1 1 1 1 1 2\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\nSample Output 4:\n\"\"\") == \"2999999\""
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 5\n1 2 1 2 1\n4\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == '10'\nassert solution('''2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == '6'\nassert solution('''5\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2 3\n1 4 1 2 4\n1 5 1 2 5\n''') == '10'\nassert solution('''7\n1 1 1 1 1 1 1\n1 2 1 2 1 2 1\n1 3 1 2 3 2 1\n1 4 1 2 4 2 1\n1 5 1 2 5 2 1\n1 6 1 2 6 2 1\n''') == '13'\nassert solution('''5\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2 3\n1 4 1 2 4\n1 5 1 2 5\n''') == '11'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 2 1 2 1\n4\n1 2 O 3\n2 1 O 3\n1 2 R 5\nSample Input 2:\n2 4\n1 2 O 3\n2 1 O 3\n3 1 R 4\nSample Output:\n6\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"10\""
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"5 5\") == \"15\"\nassert solution(\"5 3\") == \"16\"\nassert solution(\"5 5\") == \"15\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5') == '10'\nassert solution('4') == '1'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1\\n2 1 1\\n1 2 1\\n0 1 1\\n1 2 1\\n2 3 1') == '1'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n0 1\n1 2\n2 3\n''') == '1'\n\nassert solution('''\n1 2\n1 3\n''') == '2'\n\nassert solution('''\n3 3\n0 1\n1 2\n2 3\n''') == '3'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\nSample Input:\n5 2\n0 1\n0 2\n1 2\nSample Output:\n2\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 2\\n1 3') == '1'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3\\n0 1\\n1 2\\n2 3') == '1'\nassert solution('4 3\\n0 2\\n1 3\\n2 0') == '2'\nassert solution('4 4\\n0 1\\n1 2\\n2 3\\n3 4') == '5'\n\n'''\n\nclass Solution:\n    def __init__(self):\n        self.graph = []\n        self.topologicalSort = []\n        self.visited = []\n    def topologicalSort(self):\n        for i in range(len(self.graph)):\n            if len(self.graph[i]) == 0:\n                self.topologicalSort.append(i)\n                self.visited.append(False)\n            else:\n                for j in range(len(self.graph[i])):\n                    if self.visited[i] == False:\n                        self.visited[i] = True\n                        self.graph[i].pop(0)\n                        if len(self.graph[i]) == 0:\n                            self.topologicalSort.append(i)\n        print(self.topologicalSort)\n        return ''.join(str(x) for x in self.topologicalSort)\n    def solution(self, stdin):\n        for i in range(len(stdin)):\n            if i == 0:\n                self.graph.append(list(map(int, stdin[i].split())))\n            else:\n                self.graph.append(list(map(int, stdin[i].split())))\n        self.topologicalSort()"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3') == '1'\nassert solution('6 4') == '2'\n'''"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '1'\nassert solution('6 1') == '2'\nassert solution('30 2') == '4'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\"\nassert solution(\"4 3\\n0 1\\n1 2\\n2 3\\n\") == \"1\"\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '2 1 3'\nassert solution('1 2 3 4 5') == '5 4 3 2 1'\nassert solution('0 1 2 3') == '2 1 3'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3\\n0 1\\n1 2\\n2 3\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n''') == '0.962962962963'\nassert solution('''\n12\n''') == '0.788398001025'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"0.2\"\nassert solution(\"2\") == \"0.5\"\nassert solution(\"3\") == \"0.962962962963\"\nassert solution(\"2\") == \"0.8333333333333\""
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"0.2\"\nassert solution(\"3\") == \"0.16666666666666666\"\nassert solution(\"4\") == \"0.05555555555555556\"\nassert solution(\"5\") == \"0.0\"\nassert solution(\"10\") == \"0.0000000000000001\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0.363636363636'\nassert solution('4') == '0.962962962963'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"0.000000\"\nassert solution(\"4\") == \"0.962962962963\""
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n3\n1\n0\n2\n0\n''') == '0.962962962963', solution.__doc__\nprint('The local minimum occurs at x = 0.962962962963')\nassert solution('''1\n2\n0\n1\n''') == '0.962962962963', solution.__doc__\nprint('The local minimum occurs at x = 0.962962962963')\nassert solution('''5\n1\n3\n2\n4\n0\n''') == '0.965151289814', solution.__doc__\nprint('The local minimum occurs at x = 0.965151289814')\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0.05'\nassert solution('2') == '0.2'\nassert solution('3') == '0.216666666667'\nassert solution('4') == '0.2'\nassert solution('5') == '0.2666666666667'\n\n\"\"\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0.16666666666666666'\nassert solution('5') == '0.16666666666666666'\n\nstdin = '100'\nprint(solution(stdin))\n\nstdin = '4'\nprint(solution(stdin))\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '0.962962962963'\nassert solution('3') == '0.997070707071'\nassert solution('2') == '0.972972972973'\nassert solution('1') == '0.989898989889'\n\nimport math\nimport decimal"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0.100000000000000000000000000000002'\nassert solution('5') == '0.5'\nassert solution('10') == '0.75'\nassert solution('20') == '0.002050870204256'\nassert solution('100') == '0.01'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"0 0\\n\" + \"40000000 0\\n\" + \"0 40000000\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n\"\"\") == \"\"\"\n0 0\n40000000 0\n0 40000000\n\"\"\".strip()\n\nassert solution(\"\"\"\n7\n\"\"\") == \"\"\"\n0 0\n40000000 0\n0 40000000\n0 50000000\n\"\"\".strip()\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"0 0\\n40000000 0\\n0 40000000\"\nassert solution(\"1\") == \"0\\n\"\nassert solution(\"10000000\") == \"0 40000000\\n0 40000000\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n\") == '0 0\\n40000000 0\\n0 40000000\\n'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"0 0\\n40000000 0\\n0 40000000\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n0 0\n40000000 0\n0 40000000\n''') == '0 0\\n' + '40000000 0\\n' * 3"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n5 2\n4 3\n6 5\n''') == '0 0\\n40000000 0\\n0 40000000'\nassert solution('''\n8\n5 2\n4 3\n6 5\n4 7\n7 6\n8 6\n''') == '0 0\\n40000000 0\\n0 40000000\\n4 3 4 7 6 8 6'\nassert solution('''\n10\n2 2\n1 5\n6 8\n5 8\n7 1\n4 4\n8 9\n8 8\n9 6\n''') == '0 0\\n40000000 0\\n0 40000000\\n2 1 5\\n4 4\\n8 9\\n8 8\\n9 6\\n0 40000000\\n1 5\\n6 8\\n5 8\\n7 1\\n4 4\\n8 9\\n8 8\\n9 6'\n\"\"\"\nRun on:\n\nTotal time: 1.4648816384037568\nYour runtime beats 79.23 % of python3 submissions\nMemory usage beats 12.84 % of python3 submissions (19.12 MB)\n\"\"\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n\"\"\") == \"\"\"\n0 0\n40000000 0\n0 40000000\n\"\"\"\nassert solution(\"\"\"\n6\n\"\"\") == \"\"\"\n0 0\n10000000 0\n10000000 40000000\n10000000 40000000\n10000000 0\n0 10000000\n0 40000000\n\"\"\".strip()\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '0 0'\nassert solution('10') == '0 0'\nassert solution('10000000') == '0 0'\nassert solution('3') == '0 0'\nassert solution('10') == '0 0'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"0 0\\n\" + \"40000000 0\\n\" + \"0 40000000\\n\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"1\") == \"impossible\"\nassert solution(\"3 5 5 2\") == \"impossible\"\nassert solution(\"123456789\") == \"impossible\"\nassert solution(\"1 1 1 1 1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"4 2 7 5\") == \"2\"\nassert solution(\"4 3 5 8\") == \"impossible\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n3 5 5 2\n''') == '1'\nassert solution('''\n2\n3 5 5 2\n''') == '2'\nassert solution('''\n3\n1 2 3\n''') == 'impossible'\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n5\n5\n2''') == \"1\"\nassert solution('''\n3\n5\n5\n2''') == \"impossible\"\nassert solution('''\n4\n5\n5\n2''') == \"impossible\"\n\n'''\n-----Explanation-----\nFirst, we need to check if there is any possible way to get a result of $24$.\n'''\n'''\nSecond, we need to take the initial four values and assign them to four variables.\n'''\n'''\nAnd we need to define our three operations, a, b, and c.\n'''\n'''\nLet us consider first the case when all values are positive:\n'''\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('1 2 3 4') == 'Impossible'\nassert solution('2 3 1 4') == '2'\nassert solution('1 2 3 4') == '2'"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('4 5 2 5 3') == '2'\nassert solution('2 2 3 4') == 'impossible'\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('4 6 2 5') == '2'\nassert solution('7 2 6 9') == '3'\nassert solution('5 8 7 6') == '4'\nassert solution('9 8 5 7') == '5'"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 5 5 2\") == \"1\"\nassert solution(\"1 1 1 2\") == \"1\"\nassert solution(\"2 2 2 3\") == \"2\"\nassert solution(\"2 5 5 2\") == \"impossible\"\nassert solution(\"1 1 3 3\") == \"impossible\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('6 6 6 2') == '2'\nassert solution('6 6 6 2') == 'impossible'\n'''\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n5\n5\n2\n''') == '1'\n\nassert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n''') == '2'\n\nassert solution('''\n1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n21\n23\n25\n27\n29\n31\n33\n35\n37\n39\n41\n43\n45\n47\n49\n51\n53\n55\n57\n59\n61\n63\n65\n67\n69\n71\n73\n75\n77\n79\n81\n83\n85\n87\n89\n91\n93\n95\n97\n99\n''') == '2'\n\nassert solution('''\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n''') == '2'\n\nassert solution('''\n3\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n92\n94\n96\n98\n''') == '1'"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0''') == \"2\"\nassert solution('''20 4 10 5\n-10 0 0\n0 -10 0\n0 0 0\n0 0 0''') == \"0\"\nassert solution('''20 5 4 10\n-10 0 0\n0 -10 0\n0 0 0\n0 0 0''') == \"2\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 20 3 5 5') == '2'\nassert solution('2 10 5 10 1') == '1'"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3 5 5') == '0'\nassert solution('20 3 5 5') == '0'\nassert solution('100 20 0 0') == '0'\nassert solution('20 3 5 0') == '2'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0\"\"\") == \"2\"\nassert solution(\"\"\"20 3 5 5\n-10 -10 -10\n0 0 0\n0 0 0\n30 0 0\n0 0 0\"\"\") == \"1\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 5 5') == '2'\nassert solution('1 1 0') == '0'\nassert solution('10 10 10 10') == '10'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('20 3 5 5') == '2'\nassert solution('20 3 5 5\\n1 1 1\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0') == '1'\nassert solution('10 20 3\\n2 1 2\\n-1 -2 -3\\n-4 -5 -6\\n-7 -8 -9\\n-10 -11 -12\\n-13 -14 -15\\n-16 -17 -18\\n-19 -20 -21\\n-22 -23 -24') == '-10'\nassert solution('10 20 3\\n2 1 2\\n-1 -2 -3\\n-4 -5 -6\\n-7 -8 -9\\n-10 -11 -12\\n-13 -14 -15\\n-16 -17 -18\\n-19 -20 -21\\n-22 -23 -24\\n-25 -26 -27') == '-25'\nassert solution('10 20 3\\n2 1 2\\n-1 -2 -3\\n-4 -5 -6\\n-7 -8 -9\\n-10 -11 -12\\n-13 -14 -15\\n-16 -17 -18\\n-19 -20 -21\\n-22 -23 -24\\n-25 -26 -27\\n-28 -29 -30') == '-28'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('20 3 5 5') == '2'\nassert solution('100 5 5 5') == '2'\nassert solution('100 20 5 5') == '10'\nassert solution('100 50 5 5') == '7'\nassert solution('100 100 50 5 5') == '8'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n20 3 5 5\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 2 -10 0\n0 0 0\n0 0 0\n0 0 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n10 5 10 5\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 0 0\n-10 0\n1 0 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10 5 20 10\n0 0 0\n0 0 0\n0 0 0\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3 5') == '1.4'\nassert solution('20 3 5 5') == '1.36'\nassert solution('20 3 5 4') == '1.36'\nassert solution('20 3 3 5') == '0.00'\nassert solution('20 3 3 3 5') == '1.00'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('11') == '2'\nassert solution('10000000') == '10000001'"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(r\"\"\"\n3\n10 10 5\n\"\"\") == \"15\"\nassert solution(r\"\"\"\n4\n10 10 4\n\"\"\") == \"12\"\nassert solution(r\"\"\"\n5\n10 10 1 2\n\"\"\") == \"11\"\nassert solution(r\"\"\"\n6\n10 10 4 1 2\n\"\"\") == \"13\"\nassert solution(r\"\"\"\n7\n10 10 1 2 3 4\n\"\"\") == \"11\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('12') == '12'\nassert solution('123') == '14'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"01\") == \"01\"\nassert solution(\"1120\") == \"1214\"\nassert solution(\"13\") == \"1214\"\nassert solution(\"1214\") == \"1214\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '5'\nassert solution('10') == '10'\nassert solution('10 20') == '10 20'\nassert solution('1 2 3') == '1 2'\nassert solution('1000') == '2000'"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '3'\nassert solution('4\\n') == '4'\nassert solution('5\\n') == '5'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"13\") == \"12 14\"\nassert solution(\"11\") == \"10\"\nassert solution(\"30\") == \"20\"\nassert solution(\"6\") == \"4\"\nassert solution(\"1234\") == \"3412\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == '12 14'\nassert solution('5') == '12 14'\nassert solution('100') == '10 98'\n'''\n\n'''\nn = int(input())\nd = 0\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('10') == '11'\nassert solution('10000') == '10000'\nassert solution('1000') == '1000'\nassert solution('1213') == '1214'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('10') == '11'\nassert solution('1234') == '1211'\nassert solution('1234567890') == '1234567891'\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1') == '0'\nassert solution('10\\n0 0 1\\n1 1 2\\n2 3 4\\n3 5 6\\n4 7 8\\n5 9 0') == '1'\nassert solution('100\\n0 0 1\\n1 1 2\\n2 3 4\\n3 5 6\\n4 7 8\\n5 9 0') == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '0'\nassert solution('''\n10\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '0'\nassert solution('''\n20\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n1 0 2\n3 0 2\n3 0 1\n''') == '3'\nassert solution('''\n10\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n1 0 2\n3 0 2\n3 0 1\n''') == '2'\nassert solution('''\n15\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n1 0 2\n3 0 2\n3 0 1\n1 0 2\n''') == '1'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n3 0 0\\n2 0 1\\n4 0 1\\n3 0 0') == '0'\nassert solution('5\\n2 0 1\\n4 0 1\\n3 0 0\\n5 0 1\\n4 0 0') == '2'\nassert solution('100\\n3 0 0\\n4 0 0\\n2 0 1\\n3 0 1\\n5 0 0\\n6 0 1\\n7 0 0\\n4 0 1\\n3 0 1\\n1 0 0\\n5 0 0\\n7 0 1\\n8 0 0\\n9 0 1\\n8 0 0\\n10 0 0\\n4 0 1\\n7 0 1\\n9 0 0\\n5 0 1\\n6 0 1\\n2 0 1\\n3 0 0') == '0'\nassert solution('1\\n1 0 1\\n0 1 1\\n1 0 1\\n2 0 1\\n3 0 0') == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '0'\nassert solution('5') == '1'"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\n\nimport sys\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '0'\nassert solution('3\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '0'\nassert solution('5\\n0 1 1 1 1\\n1 0 0\\n1 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n') == '0'\nassert solution('10\\n0 0 1 0 0 1\\n0 1 1\\n0 0 1 1\\n0 0 0 0\\n0 1 1\\n1 1 0\\n0 0 1 1\\n0 0 0 0\\n0 1 1\\n0 0 1 1\\n0 0 0 0\\n0 0 1 1\\n0 0 0 0\\n0 1 1\\n1 1 0\\n0 0 1 1\\n0 0 0 0\\n0 1 1\\n0 0 1 1\\n0 0 0 0\\n0 0 1 1\\n0 0 0 0\\n0 0 1 1\\n') == '42'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1') == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '0'\nassert solution('1') == '1'\nassert solution('1 0 0') == '1'\nassert solution('1 0 1') == '0'\nassert solution('3 0 1') == '1'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n''') == '0'\nassert solution('''\n4\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n''') == '1'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '1'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1 1\"\nassert solution(\"2 3\") == \"1 1\\n2 2\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"2 1\") == \"1 2\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([2,3]) == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3\n1 1\n2 2\n1 3\n2 1\n1 2\n2 3\n''') == '1 2\\n1 3\\n2 1\\n2 2\\n1 2\\n1 3\\n2 1\\n2 3'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"1 1\\n2 2\"\nassert solution(\"2 3\") == \"1 1\\n2 2\"\nassert solution(\"3 3\") == \"1 1\\n2 2\\n3 3\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\"\n\n---Output---\nSample Output\n2\n1 3\n1 2\n2 3\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n3\n1 1\n1 2\n3 2\n\"\"\") == \"\"\"\n1 1\n2 2\n1 3\n2 1\n1 2\n2 3\n\"\"\"\n\nassert solution(\"\"\"\n4\n3\n1 1\n3 2\n2 1\n3 1\n\"\"\") == \"\"\"\n-1\n\"\"\"\n\nassert solution(\"\"\"\n3\n3\n1 1\n2 2\n3 3\n\"\"\") == \"\"\"\n-1\n\"\"\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([2, 3]) == \"1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\""
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n1 2\n3 4\n2 3\n''') == '2 2\\n1 3\\n1 2\\n2 3'\n\n'''\n---\nSample Input:\n8 4\n1 2\n3 5\n4 6\n7 9\n10 11\n13 12\n2 3\n5 4\n8 9\n11 12\n7 10\n9 13\n6 14\n'''\n'''\nSample Output:\n1 1\n1 3\n1 2\n1 3\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n3 1\n3 2\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n3 11\n3 12\n3 13\n4 1\n4 2\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n4 11\n4 12\n4 13\n4 14\n5 1\n5 2\n5 3\n5 4\n5 5\n5 6\n5 7\n5 8\n5 9\n5 10\n5 11\n5 12\n5 13\n5 14\n6 1\n6 2\n6 3\n6 4\n6 5\n6 6\n6 7\n6 8\n6 9\n6 10\n6 11\n6 12\n6 13\n6 14\n7 1\n7 2\n7 3\n7 4\n7 5\n7 6\n7 7\n7 8\n7 9\n7 10\n7 11\n7 12\n7 13\n7 14\n8 1\n8 2\n8 3\n8 4\n8 5\n8 6\n8 7\n8 8\n8 9\n8 10\n8 11\n8 12\n8 13\n8 14\n9 1\n9 2\n9 3\n9 4\n9 5\n9 6\n9 7\n9 8\n9 9\n9 10\n9 11\n9 12\n9 13\n9 14\n10 1\n10 2\n10 3\n10 4\n10 5\n10 6\n10 7\n10 8\n10 9\n10 10\n10 11\n10 12\n10 13\n10 14\n11 1\n11 2\n11 3\n11 4\n11 5\n11 6\n11 7\n11 8\n11 9\n11 10\n11 11\n11 12\n11 13\n11 14\n12 1\n12 2\n12 3\n12 4\n12 5\n12 6\n12 7\n12 8\n12 9\n12 10\n12 11\n12 12\n12 13\n12 14\n13 1\n13 2\n13 3\n13 4\n13 5\n13 6\n13 7\n13 8\n13 9\n13 10\n13 11\n13 12\n13 13\n13 14\n14 1\n14 2\n14 3\n14 4\n14 5\n14 6\n14 7\n14 8\n14 9\n14 10\n14 11\n14 12\n14 13\n14 14\n'''\n'''\n---\nSample Input:\n10 10\n1 2\n3 4\n5 6\n7 8\n9 10\n2 3\n5 4\n8 9\n11 12\n7 10\n9 13\n6 14\n3 4\n5 6\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n2 3\n5 4\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n1 2\n3 4\n5 6\n7 8\n9 10\n2 3\n5 4\n8 9\n11 12\n7 10\n9 13\n6 14\n3 4\n5 6\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n1 2\n3 4\n5 6\n7 8\n9 10\n2 3\n5 4\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n1 2\n3 4\n5 6\n7 8\n9 10\n2 3\n5 4\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n3 4\n5 6\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n1 2\n3 4\n5 6\n7 8\n9 10\n2 3\n5 4\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n1 2\n3 4\n5 6\n7 8\n9 10\n2 3\n5 4\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n3 4\n5 6\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n1 2\n3 4\n5 6\n7 8\n9 10\n2 3\n5 4\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n3 4\n5 6\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n1 2\n3 4\n5 6\n7 8\n9 10\n2 3\n5 4\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n3 4\n5 6\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n1 2\n3 4\n5 6\n7 8\n9 10\n2 3\n5 4\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n3 4\n5 6\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n1 2\n3 4\n5 6\n7 8\n9 10\n2 3\n5 4\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n3 4\n5 6\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n1 2\n3 4\n5 6\n7 8\n9 10\n2 3\n5 4\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n3 4\n5 6\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n1 2\n3 4\n5 6\n7 8\n9 10\n2 3\n5 4\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n3 4\n5 6\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n1 2\n3 4\n5 6\n7 8\n9 10\n2 3\n5 4\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14\n3 4\n5 6\n8 9\n11 12\n7 10\n9 13\n6 14\n4 5\n7 8\n10 11\n13 14"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"1 1\\n2 2\\n1 3\\n2 1\"\nassert solution(\"3 6\") == \"-1\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n3 3\n2 3 1\n3 3 1\n4 4 4\n\"\"\"\n) == \"0.69999999999999997\\n0.69999999999999997\\n0.69999999999999997\\n\", \"Should return allocation for cat picture $3$\"\n\nassert solution(\n\"\"\"\n3 2\n1 2 1\n2 2 1\n3 3 1\n\"\"\"\n) == \"0.6000000000000001\\n0.6000000000000001\\n0.6000000000000001\\n\", \"Should return allocation for cat picture $3$\"\n\nassert solution(\n\"\"\"\n3 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\"\n) == \"1.0\\n1.0\\n1.0\\n1.0\\n\", \"Should return allocation for cat picture $3$\"\n\nassert solution(\n\"\"\"\n1 3\n1 3 1\n2 2 1\n3 3 1\n4 4 4\n\"\"\"\n) == \"1.6\\n1.6\\n1.6\\n1.6\\n\", \"Should return allocation for cat picture $3$\"\n\nassert solution(\n\"\"\"\n1 3\n1 3 1\n2 2 1\n3 3 1\n4 4 4\n\"\"\"\n) == \"1.6\\n1.6\\n1.6\\n1.6\\n\", \"Should return allocation for cat picture $3$\""
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 10') == '3.33333333'\nassert solution('3 20') == '3.5'\nassert solution('3 10') == '3.33333333'\nassert solution('1 10') == '0.25'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 5\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n''') == '2.1666666666666667'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 10\") == \"5.0\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 10 1') == '3.33333333'\nassert solution('2 10 1') == '4.33333333'\nassert solution('3 10 1') == '4.33333333'\nassert solution('4 10 1') == '4.33333333'\n\n\"\"\""
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 2') == '0.75'\nassert solution('3 1 2') == '0.5'\nassert solution('3 3 2') == '0.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 10\n0 10 1\n0 10 1\n''') == '0.3333333333333333'\nassert solution('''\n2 10\n0 10 1\n0 10 1\n''') == '0.3333333333333333'\nassert solution('''\n2 10\n0 10 1\n0 10 1\n''') == '0.3333333333333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 10') == '3.33333333'\nassert solution('3 10') == '3.33333333'\nassert solution('3 10') == '3.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\nassert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 10 1\\n0 10 1\\n0 10 1\\n\") == \"1.8000000000000001\"\nassert solution(\"3 10 1\\n0 10 1\\n0 10 1\\n\") == \"1.8000000000000001\"\nprint(solution(input()))"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n3 3 2') == '1'\nassert solution('4\\n1 2 1 1\\n0 0') == '1'\nassert solution('5\\n1 1 1 1 1\\n0 0') == '2'\nassert solution('6\\n1 1 1 1 1 1\\n0 0') == '2'\nassert solution('7\\n1 1 1 1 1 1 1\\n0 0') == '3'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('1') == '0'\nassert solution('100') == '101'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n3 3 2\\n') == '1\\n'\nassert solution('2\\n10 20\\n') == '1\\n'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1'\nassert solution('1\\n1 2') == '1'\nassert solution('2\\n3 3') == '2'\n\nSample Input:\n4\n1 2 3 4\nSample Output:\n3"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n5 4 3 1\n''') == '2'\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '1'\n\nassert solution('''\n4\n6 2 7 5 3\n''') == '1'\n'''\n\n\n\nimport sys\nimport itertools\n\nsys.stdin = open('input.txt')\n\nfrom itertools import permutations"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '0'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('3 3 2') == '2'\nassert solution('3 4 1 2') == '0'\nassert solution('3 2 5') == '3'\nassert solution('3 4 1 2 3') == '1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2 2 2\\n') == '2'\nassert solution('1\\n2 1 1\\n') == '0'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2') == '2'\n\nassert solution('4 2 abc') == '2'\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\nabba\") == \"2\"\nassert solution(\"4 2\\ncaac\") == \"1\"\nassert solution(\"4 2\\nabba\\ncaac\") == \"2\"\nassert solution(\"4 2\\nabb\\ncaac\") == \"1\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '2'\nassert solution('1 2') == '2'\nassert solution('4 3') == '2'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'\nassert solution(['aaaa', 'bbbb', 'cccc']) == '1'"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"2\""
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2\\nabba') == '2'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2\\nabba') == '2'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\naba\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"2 5\") == \"1\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\nabb\n''') == '2'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2\n1 2\n2 3\n2 4\n''') == '3'\n\nassert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == '2'\n\nassert solution('''\n4 3\n1 2\n2 3\n1 2\n''') == '3'\n\nassert solution('''\n3 3\n1 2\n2 3\n1 2\n''') == '4'\n\nassert solution('''\n4 3\n1 2\n2 3\n1 2\n''') == '2'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == '3'\nassert solution('''\n5 2\n1 2\n3 4\n1 3\n1 5\n''') == '4'\nassert solution('''\n5 4\n1 2\n3 4\n1 5\n2 3\n''') == '5'\nassert solution('''\n6 3\n1 2\n2 4\n3 5\n3 6\n3 5\n''') == '3'\nassert solution('''\n6 4\n1 2\n2 4\n3 5\n4 6\n4 6\n4 6\n''') == '4'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == '3'\nassert solution('5 5\\n3 3\\n5 5\\n1 2\\n1 3\\n1 4\\n4 2\\n2 3\\n3 4\\n3 4') == '5'\nassert solution('10 10\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 1\\n3 2\\n3 3\\n3 4\\n3 5\\n3 6\\n3 7\\n4 1\\n4 2\\n4 3\\n4 4\\n4 5\\n4 6\\n4 7\\n5 1\\n5 2\\n5 3\\n5 4\\n5 5\\n5 6\\n5 7\\n6 1\\n6 2\\n6 3\\n6 4\\n6 5\\n6 6\\n6 7\\n7 1\\n7 2\\n7 3\\n7 4\\n7 5\\n7 6\\n7 7') == '7'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1\\n2 3\\n2 4') == '3'\nassert solution('5 1\\n5 2\\n5 3\\n5 4\\n5 4') == '4'\nassert solution('5 1\\n4 2\\n4 3\\n5 4\\n4 5') == '3'\nassert solution('5 1\\n1 2\\n1 3\\n2 4\\n2 5') == '2'\nassert solution('5 1\\n3 2\\n4 2\\n1 3\\n2 4\\n3 5') == '1'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n2 4\\n\") == \"3\"\nassert solution(\"5 5\\n1 2\\n2 3\\n2 4\\n4 4\\n3 5\\n\") == \"3\"\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == '3'\nassert solution('''\n4 3\n1 2\n2 3\n1 3\nSample Output:\n2\n''') == '2'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n2 4\\n') == '3'\nassert solution('3\\n2 2 3\\n1 1 1\\n') == '2'\nassert solution('7 2\\n1 2 3 4 5 6\\n4 5 6 5 3 2\\n') == '4'\nassert solution('10 2\\n1 2 3 4 5 6 7\\n7 6 5 3 2\\n8 8 8 8 8 8\\n') == '2'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '3'\nassert solution('4 3') == '4'"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == '3'\nassert solution('''\n5 7\n1 2\n1 3\n3 2\n3 1\n3 4\n4 3\n4 1\n''') == '3'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n\"\"\"\n    ) == \"1\"\nassert solution(\n    \"\"\"\n1 1\n1 2\n1 3\n2 4\n1 4\n\"\"\"\n    ) == \"0\"\nassert solution(\n    \"\"\"\n3 3\n1 0\n0 1\n1 2\n0 3\n1 4\n1 5\n1 6\n2 7\n2 8\n2 9\n2 10\n3 11\n3 12\n3 13\n3 14\n3 15\n3 16\n3 17\n3 18\n3 19\n4 20\n4 21\n4 22\n4 23\n4 24\n4 25\n4 26\n4 27\n4 28\n4 29\n4 30\n5 31\n5 32\n5 33\n5 34\n5 35\n5 36\n5 37\n5 38\n5 39\n5 40\n6 41\n6 42\n6 43\n6 44\n6 45\n6 46\n6 47\n6 48\n6 49\n7 50\n7 51\n7 52\n7 53\n7 54\n7 55\n7 56\n7 57\n7 58\n7 59\n7 60\n7 61\n7 62\n7 63\n7 64\n7 65\n7 66\n7 67\n7 68\n7 69\n7 70\n7 71\n7 72\n7 73\n7 74\n7 75\n7 76\n7 77\n7 78\n7 79\n7 80\n8 81\n8 82\n8 83\n8 84\n8 85\n8 86\n8 87\n8 88\n8 89\n8 90\n9 91\n9 92\n9 93\n9 94\n9 95\n9 96\n9 97\n9 98\n9 99\n10 100\n10 101\n10 102\n10 103\n10 104\n10 105\n10 106\n10 107\n10 108\n10 109\n10 110\n10 111\n10 112\n10 113\n10 114\n10 115\n10 116\n10 117\n10 118\n10 119\n10 120\n10 121\n10 122\n10 123\n10 124\n10 125\n10 126\n10 127\n10 128\n10 129\n10 130\n11 131\n11 132\n11 133\n11 134\n11 135\n11 136\n11 137\n11 138\n11 139\n11 140\n11 141\n11 142\n11 143\n11 144\n11 145\n11 146\n11 147\n11 148\n11 149\n11 150\n11 151\n11 152\n11 153\n11 154\n11 155\n11 156\n11 157\n11 158\n11 159\n11 160\n11 161\n11 162\n11 163\n11 164\n11 165\n11 166\n11 167\n11 168\n11 169\n11 170\n11 171\n11 172\n11 173\n11 174\n11 175\n11 176\n11 177\n11 178\n11 179\n11 180\n11 181\n11 182\n11 183\n11 184\n11 185\n11 186\n11 187\n11 188\n11 189\n11 190\n11 191\n11 192\n11 193\n11 194\n11 195\n11 196\n11 197\n11 198\n11 199\n11 200\n12 201\n12 202\n12 203\n12 204\n12 205\n12 206\n12 207\n12 208\n12 209\n12 210\n12 211\n12 212\n12 213\n12 214\n12 215\n12 216\n12 217\n12 218\n12 219\n12 220\n12 221\n12 222\n12 223\n12 224\n12 225\n12 226\n12 227\n12 228\n12 229\n12 230\n12 231\n12 232\n12 233\n12 234\n12 235\n12 236\n12 237\n12 238\n12 239\n12 240\n12 241\n12 242\n12 243\n12 244\n12 245\n12 246\n12 247\n12 248\n12 249\n12 250\n12 251\n12 252\n12 253\n12 254\n12 255\n12 256\n13 257\n13 258\n13 259\n13 260\n13 261\n13 262\n13 263\n13 264\n13 265\n13 266\n13 267\n13 268\n13 269\n13 270\n13 271\n13 272\n13 273\n13 274\n13 275\n13 276\n13 277\n13 278\n13 279\n13 280\n13 281\n13 282\n13 283\n13 284\n13 285\n13 286\n13 287\n13 288\n13 289\n13 290\n13 291\n13 292\n13 293\n13 294\n13 295\n13 296\n13 297\n13 298\n13 299\n13 300\n13 301\n13 302\n13 303\n13 304\n13 305\n13 306\n13 307\n13 308\n13 309\n13 310\n13 311\n13 312\n13 313\n13 314\n13 315\n13 316\n13 317\n13 318\n13 319\n13 320\n13 321\n13 322\n13 323\n13 324\n13 325\n13 326\n13 327\n13 328\n13 329\n13 330\n13 331\n13 332\n13 333\n13 334\n13 335\n13 336\n13 337\n13 338\n13 339\n13 340\n13 341\n13 342\n13 343\n13 344\n13 345\n13 346\n13 347\n13 348\n13 349\n13 350\n13 351\n13 352\n13 353\n13 354\n13 355\n13 356\n13 357\n13 358\n13 359\n13 360\n13 361\n13 362\n13 363\n13 364\n13 365\n13 366\n13 367\n13 368\n13 369\n13 370\n13 371\n13 372\n13 373\n13 374\n13 375\n13 376\n13 377\n13 378\n13 379\n13 380\n13 381\n13 382\n13 383\n13 384\n13 385\n13 386\n13 387\n13 388\n13 389\n13 390\n13 391\n13 392\n13 393\n13 394\n13 395\n13 396\n13 397\n13 398\n13 399\n13 400\n13 401\n13 402\n13 403\n13 404\n13 405\n13 406\n13 407\n13 408\n13 409\n13 410\n13 411\n13 412\n13 413\n13 414\n13 415\n13 416\n13 417\n13 418\n13 419\n13 420\n13 421\n13 422\n13 423\n13 424\n13 425\n13 426\n13 427\n13 428\n13 429\n13 430\n13 431\n13 432\n13 433\n13 434\n13 435\n13 436\n13 437\n13 438\n13 439\n13 440\n13 441\n13 442\n13 443\n13 444\n13 445\n13 446\n13 447\n13 448\n13 449\n13 450\n13 451\n13 452\n13 453\n13 454\n13 455\n13 456\n13 457\n13 458\n13 459\n13 460\n13 461\n13 462\n13 463\n13 464\n13 465\n13 466\n13 4"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 3\\n0 1\\n1 2\\n1 3\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7') == '2'\nassert solution('4 4\\n1 1\\n2 2\\n3 3\\n4 4\\n2 5\\n3 6\\n3 7\\n4 5') == '3'"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1\\n0'"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n10\n1 2\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n3 2\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n4 2\n4 4\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n5 2\n5 5\n5 6\n5 7\n5 8\n5 9\n5 10\n6 2\n6 4\n6 5\n6 6\n6 7\n6 8\n6 9\n6 10\n7 2\n7 4\n7 5\n7 6\n7 7\n7 8\n7 9\n7 10\n8 2\n8 4\n8 5\n8 6\n8 7\n8 8\n8 9\n8 10\n9 2\n9 4\n9 5\n9 6\n9 7\n9 8\n9 9\n9 10\n10 2\n10 4\n10 5\n10 6\n10 7\n10 8\n10 9\n10 10\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n10\n1 0\n0 1\n1000 1\n1 3\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n3 2\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n4 2\n4 4\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n5 2\n5 5\n5 6\n5 7\n5 8\n5 9\n5 10\n6 2\n6 4\n6 5\n6 6\n6 7\n6 8\n6 9\n6 10\n7 2\n7 4\n7 5\n7 6\n7 7\n7 8\n7 9\n7 10\n8 2\n8 4\n8 5\n8 6\n8 7\n8 8\n8 9\n8 10\n9 2\n9 4\n9 5\n9 6\n9 7\n9 8\n9 9\n9 10\n10 2\n10 4\n10 5\n10 6\n10 7\n10 8\n10 9\n10 10\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n10\n1 0\n0 1\n1000 1\n1 3\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n3 2\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n4 2\n4 4\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n5 2\n5 5\n5 6\n5 7\n5 8\n5 9\n5 10\n6 2\n6 4\n6 5\n6 6\n6 7\n6 8\n6 9\n6 10\n7 2\n7 4\n7 5\n7 6\n7 7\n7 8\n7 9\n7 10\n8 2\n8 4\n8 5\n8 6\n8 7\n8 8\n8 9\n8 10\n9 2\n9 4\n9 5\n9 6\n9 7\n9 8\n9 9\n9 10\n10 2\n10 4\n10 5\n10 6\n10 7\n10 8\n10 9\n10 10\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n10\n1 0\n0 1\n1000 1\n1 3\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n3 2\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n4 2\n4 4\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n5 2\n5 5\n5 6\n5 7\n5 8\n5 9\n5 10\n6 2\n6 4\n6 5\n6 6\n6 7\n6 8\n6 9\n6 10\n7 2\n7 4\n7 5\n7 6\n7 7\n7 8\n7 9\n7 10\n8 2\n8 4\n8 5\n8 6\n8 7\n8 8\n8 9\n8 10\n9 2\n9 4\n9 5\n9 6\n9 7\n9 8\n9 9\n9 10\n10 2\n10 4\n10 5\n10 6\n10 7\n10 8\n10 9\n10 10\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n10\n1 0\n0 1\n1000 1\n1 3\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n3 2\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n4 2\n4 4\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n5 2\n5 5\n5 6\n5 7\n5 8\n5 9\n5 10\n6 2\n6 4\n6 5\n6 6\n6 7\n6 8\n6 9\n6 10\n7 2\n7 4\n7 5\n7 6\n7 7\n7 8\n7 9\n7 10\n8 2\n8 4\n8 5\n8 6\n8 7\n8 8\n8 9\n8 10\n9 2\n9 4\n9 5\n9 6\n9 7\n9 8\n9 9\n9 10\n10 2\n10 4\n10 5\n10 6\n10 7\n10 8\n10 9\n10 10\n\"\"\") == \"0\""
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"0\"\nassert solution(['1', '0', '0', '1', '1', '1']) == \"1\"\nassert solution(['1', '0', '0', '1', '2', '1']) == \"0\"\nassert solution(['1', '0', '0', '1', '2', '1']) == \"0\"\nassert solution(['1', '0', '0', '1', '2', '1']) == \"0\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3') == '1'\nprint('Your solution:')\nprint(solution(input))\nprint()\n\nassert solution('2\\n10 20\\n20 20\\n1 1\\n2 2\\n3 3\\n3 3\\n3 3\\n3 3\\n4 4\\n4 4') == '0'\nprint('Your solution:')\nprint(solution(input))"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1\n0 0\n1 1\n2 3\n2 1\n2 2\n1 2\n0 0\n1 1\nSample Output:\n1\n0\n''') == '1\n\n'''\nFor example, if the input is:\n\n1\n2\n3\n5\n6\n7\n8\n9\n\nThe output should be:\n\n1\n3\n'''"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 2\n0 0\n0 1\n1 3\n2 3\n10 4\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 2\n1 0\n0 1\n2 3\n10 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 2\n0 0\n0 1\n1 3\n1 5\n2 3\n10 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 2\n1 0\n0 1\n2 3\n1 5\n2 3\n10 4\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 2\n1 0\n0 1\n3 3\n1 5\n2 3\n10 4\n\"\"\") == \"0\""
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\\n1\\n\") == \"1\"\nassert solution(\"1\\n1\\n10\\n\") == \"1\"\nassert solution(\"1\\n1\\n2\\n3\\n10\\n\") == \"1\"\nassert solution(\"1\\n1\\n2\\n3\\n10\\n100\\n\") == \"2\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('\\n'.join([\n    '3 2',\n    '1 0',\n    '0 1',\n    '1000 1',\n    '1 3',\n    '2 3',\n])) == '1'\nassert solution('\\n'.join([\n    '3 2',\n    '1 0',\n    '0 1',\n    '1 3',\n    '2 3',\n])) == '1'\nassert solution('\\n'.join([\n    '3 2',\n    '1 0',\n    '0 1',\n    '1000 1',\n    '1 3',\n    '2 3',\n])) == '0'\nassert solution('\\n'.join([\n    '3 2',\n    '1 0',\n    '0 1',\n    '1 3',\n    '2 3',\n])) == '0'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '7'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('5') == '4'\nassert solution('3') == '7'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3\\n3 2 2\\n5 2 1') == '7'\nprint('String: ', solution('1 2 3\\n3 2 2\\n5 2 1\\n3 2 1\\n1 2 1\\n1 2 3'))\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '7'\nassert solution('5') == '12'\n\"\"\""
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n''') == '7'"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n''') == '7'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '7'\nassert solution('3 2 2') == '9'\nassert solution('5 2 1') == '11'\nassert solution('3 2 1') == '8'\nassert solution('1 2 1') == '7'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3\\n3 2 2\\n5 2 1\\n3 2 1\\n1 2 1\\n1 2 3') == '7'"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '7'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '7'"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"7\"\n\"\"\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\\n') == '20'\nassert solution(\n    '6 2\\nlinearalgebra 10\\ncalculus2 20\\ncalculus1 50\\nmathanalysis1 100\\nmathanalysis2 50\\n') == '60'\nassert solution(\n    '8 2\\nlinearalgebra 10\\ncalculus1 20\\nmathanalysis1 50\\nmathanalysis2 20\\n') == '100'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '20'\nassert solution('6 5') == '20'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100\"\"\") == \"20\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100''') == '20'\nassert solution('''5 5\nlinearalgebra 1\nlinearalgebra 2\ncalculus 1\ncalculus 2\nhonorsanalysis 1\nhonorsanalysis 2''') == '19'"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2') == '20'\nassert solution('4 3') == '14'\nassert solution('5 7') == '30'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''linearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100''') == '20'\nassert solution('''linearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100''') == '20'\nassert solution('''linearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100''') == '20'\nassert solution('''linearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100''') == '20'\nassert solution('''linearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100''') == '20'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100') == '20'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == '20'\nassert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('0') == '0'\nassert solution('11') == '-1'\n\"\"\""
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2') == '20'\nassert solution('10 2') == '10'\n\n## Write your code here\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '20'\nassert solution('5 2') == '20'\nassert solution('6 2') == '17'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == \"6\"\nassert solution('''\n2 3\n2 2\n3\n''') == \"1\"\nprint(solution(open(0)))\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4') == '6'\nassert solution('1 2 2') == '0'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\nassert solution('''3\n1 5\n2 3\n2 4\n''') == '3'\nassert solution('''3\n1 3\n2 2\n2 4\n''') == '4'\nassert solution('''3\n1 3\n1 2\n2 4\n''') == '4'\nassert solution('''3\n1 2\n1 3\n2 4\n''') == '3'\n'''\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"6\""
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4') == '4'\nassert solution('4 4') == '2'\nassert solution('8 10') == '8'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\nassert solution('''\n3 2\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '12'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '6'"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 2') == '3'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1') == '4', 'Sample Test 1'\nassert solution('4 1') == '3', 'Sample Test 2'\nassert solution('4 2') == '2', 'Sample Test 3'\nassert solution('4 3') == '2', 'Sample Test 4'\nassert solution('4 4') == '0', 'Sample Test 5'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1 1\n2\n3\n1 2\n2 3 1\n1 1\n''') == 'impossible'\nassert solution('''\n3 2 2\n2\n3\n1 2\n1 1\n''') == '3'\nassert solution('''\n3 3 3\n3\n3\n1 2\n1 1\n''') == 'impossible'\nassert solution('''\n3 4 4\n1\n3\n1 1\n1 1\n''') == 'impossible'\nassert solution('''\n1 2\n2\n1\n''') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1 1\\n2\\n3\\n1 2\\n2 3 1') == '2'\nassert solution('5 1 1\\n2\\n3\\n1 2\\n2 3 1') == 'impossible'\nprint(solution(*map(int, input().split())))"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n2 5 1\n1\n1 1\n2 2 1\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 6 1\n1\n2\n1 2\n3 4 1\n1 1\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n2 4 1\n1\n1 1\n2 2 1\n1 1\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n1 3 1\n2\n1 2\n1 3\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 2\n1\n3\n1 1\n2 2\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n3\n1\n2\n3\n1 1''') == 'impossible', 'impossible'\nassert solution('''4\n4\n4\n1\n1\n3\n2\n1\n4\n3\n2\n1\n4\n3\n2\n3''') == '2', '2'\nassert solution('''10\n7\n1\n2\n3\n5\n4\n6\n7\n8\n9\n10\n4\n5\n6\n7\n8\n9\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n5\n6\n7\n8\n9\n10\n5\n6\n7\n8\n9\n10\n5\n6\n7\n8\n9\n10''') == 'impossible', 'impossible'\nassert solution('''8\n7\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n4\n5\n6\n7\n8\n9\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n5\n6\n7\n8\n9\n10\n4\n5\n6\n7\n8\n9\n10\n5\n6\n7\n8\n9\n10\n3\n2\n1\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1''') == '2', '2'\nassert solution('''7\n2\n1\n1\n2\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n2\n2\n1\n1\n1''') == 'impossible', 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"3 1 1\") == \"2\"\nassert solution(\"2\") == \"impossible\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1 1\\n2\\n3\\n1 2\\n2 3 1\\n1 1') == \"impossible\"\nassert solution('2 1 2\\n2 1\\n2 1') == \"impossible\"\nassert solution('3 2 4\\n2 1 2\\n1 1 1\\n2 1') == \"2\"\nassert solution('10 1 1\\n3 1 2\\n4 2 3\\n2 2 1\\n3 3 1\\n2 3\\n3 1 1\\n4 3 1\\n3 4 2\\n3 1 2\\n1 3 1\\n4 2 1\\n2 4 1\\n1 4 1\\n3 3 1\\n4 1 1\\n1 4 1\\n3 1 1\\n1 1\\n3 1 1\\n4 3 1\\n4 3 1\\n3 1 1\\n4 3 1\\n3 4 1\\n2 1 1\\n1 1\\n2 4 1\\n4 2 1\\n3 1 1\\n3 1 1\\n2 3 1\\n1 2 1\\n2 4 1\\n3 1 1\\n2 4 1\\n2 2 1\\n1 3 1\\n2 1 1\\n1 1\\n1 1\\n2 2 1\\n1 1 1\\n1 3 1\\n3 3 1\\n1 3 1\\n1 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 3 1\\n1 3 1\\n2 1 1\\n3 1 1\\n3 3 1\\n1 2 1\\n1 3 1\\n1 2 1\\n2 2 1\\n3 1 1\\n1 2 1\\n2 1 1\\n1 2 1\\n2 1 1\\n1 2 1\\n2 1 1\\n2 1 1\\n1 1 1\\n2 1 1\\n1 1 1\\n1 3 1\\n1 1 1\\n2 3 1\\n2 1 1\\n2 1 1\\n2 1 1\\n1 2 1\\n1 1 1\\n1 4 1\\n3 2 1\\n3 3 1\\n3 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n3 4 1\\n3 4 1\\n2 2 1\\n1 1 1\\n1 1 1\\n2 2 1\\n2 1 1\\n3 1 1\\n4 2 1\\n3 1 1\\n3 3 1\\n2 3 1\\n1 1 1\\n2 4 1\\n1 1 1\\n3 1 1\\n3 1 1\\n2 3 1\\n1 1 1\\n2 1 1\\n2 3 1\\n1 1 1\\n3 1 1\\n1 2 1\\n1 2 1\\n2 3 1\\n2 2 1\\n3 1 1\\n2 1 1\\n1 1 1\\n3 1 1\\n2 4 1\\n1 1 1\\n2 1 1\\n1 3 1\\n1 1 1\\n1 1 1\\n3 3 1\\n1 2 1\\n2 3 1\\n2 3 1\\n2 1 1\\n1 4 1\\n3 2 1\\n2 4 1\\n2 1 1\\n2 2 1\\n1 3 1\\n2 4 1\\n1 4 1\\n1 2 1\\n2 2 1\\n1 2 1\\n3 1 1\\n2 3 1\\n1 3 1\\n2 1 1\\n1 1 1\\n2 1 1\\n2 1 1\\n1 3 1\\n2 1 1\\n2 1 1\\n2 1 1\\n1 2 1\\n2 2 1\\n1 2 1\\n2 1 1\\n1 3 1\\n1 3 1\\n3 3 1\\n2 1 1\\n1 4 1\\n2 1 1\\n3 1 1\\n1 3 1\\n1 3 1\\n2 1 1\\n1 3 1\\n2 1 1\\n1 4 1\\n1 2 1\\n2 3 1\\n1 3 1\\n1 1 1\\n3 2 1\\n1 1 1\\n2 2 1\\n3 2 1\\n1 3 1\\n1 4 1\\n1 1 1\\n3 3 1\\n2 3 1\\n2 1 1\\n2 1 1\\n3 1 1\\n2 1 1\\n1 1 1\\n2 1 1\\n1 1 1\\n1 1 1\\n3 1 1\\n1 1 1\\n3 3 1\\n1 2 1\\n2 2 1\\n2 2 1\\n2 3 1\\n1 4 1\\n1 3 1\\n1 1 1\\n2 1 1\\n1 3 1\\n1 3 1\\n1 2 1\\n1 2 1\\n2 3 1\\n1 3 1\\n1 2 1\\n2 3 1\\n2 2 1\\n3 3 1\\n3 3 1\\n2 1 1\\n2 2 1\\n2 1 1\\n2 1 1\\n1 2 1\\n2 1 1\\n1 2 1\\n2 3 1\\n2 1 1\\n1 4 1\\n1 2 1\\n2 3 1\\n3"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\") == \"2\"\nassert solution(\"3 1 1\") == \"impossible\"\nassert solution(\"3 1 2\") == \"impossible\"\nassert solution(\"3 1 3\") == \"impossible\"\nassert solution(\"3 2 1\") == \"impossible\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1\\n1 1\\n') == '2'\nassert solution('5 10 5\\n4 3 4\\n6 7 1 1\\n5 9 3 4 2 4 6\\n1 5 5\\n7 2 6\\n4 5 3\\n4 1 1\\n3 6 8\\n8 1 1\\n1 6 6\\n2 1 1\\n2 5 8\\n5 2 1\\n1 3 3\\n1 7 6\\n2 8 7\\n2 5 2\\n5 4 4\\n4 1 2\\n5 1 7\\n2 5 1\\n2 1 3\\n3 7 5\\n2 2 2\\n1 8 3\\n6 4 5\\n3 2 2\\n1 1 1\\n1 6 2\\n3 7 6\\n6 5 6\\n1 4 4\\n4 2 2\\n4 5 5\\n1 4 2\\n4 1 2\\n3 4 4\\n2 3 5\\n2 3 2\\n5 2 1\\n1 4 1\\n1 2 2\\n3 2 1\\n3 4 6\\n2 1 1\\n5 7 8\\n4 5 5\\n6 1 3\\n6 4 8\\n5 3 4\\n3 3 5\\n2 4 2\\n1 4 2\\n2 1 5\\n4 7 5\\n1 6 2\\n4 3 7\\n2 4 1\\n5 5 1\\n5 1 2\\n5 1 2\\n1 3 4\\n2 4 1\\n2 5 5\\n3 4 4\\n6 3 7\\n1 3 2\\n2 6 5\\n3 5 3\\n3 2 6\\n1 1 2\\n1 4 3\\n1 1 3\\n2 6 3\\n2 2 3\\n4 6 5\\n3 7 3\\n2 3 7\\n5 4 5\\n4 4 1\\n6 5 1\\n1 6 1\\n1 7 2\\n4 3 1\\n3 5 2\\n2 6 2\\n2 3 1\\n3 4 1\\n5 1 2\\n4 3 1\\n2 5 3\\n2 2 4\\n4 3 1\\n3 4 4\\n4 3 4\\n4 1 4\\n2 5 1\\n3 4 3\\n2 1 1\\n1 2 3\\n2 2 4\\n1 1 5\\n5 1 3\\n5 1 2\\n3 5 1\\n2 3 2\\n5 4 4\\n4 1 2\\n1 4 1\\n3 5 2\\n5 4 4\\n5 3 4\\n2 2 5\\n1 2 3\\n3 3 2\\n2 1 5\\n4 3 1\\n5 3 5\\n3 2 2\\n2 4 4\\n1 5 5\\n1 4 2\\n2 4 1\\n5 2 1\\n1 3 4\\n5 4 1\\n4 5 4\\n5 4 4\\n3 5 2\\n5 3 5\\n2 4 4\\n1 3 4\\n1 5 3\\n5 4 4\\n4 2 2\\n4 1 5\\n4 2 1\\n2 3 1\\n4 4 3\\n1 5 3\\n4 1 3\\n2 4 2\\n3 1 4\\n5 4 1\\n4 1 3\\n1 5 1\\n3 2 5\\n4 4 4\\n2 3 3\\n1 3 1\\n2 2 3\\n3 3 5\\n1 1 1\\n2 2 2\\n4 3 2\\n5 4 2\\n2 1 4\\n3 4 4\\n2 2 4\\n5 3 4\\n4 1 5\\n5 2 3\\n5 4 1\\n3 3 5\\n3 2 3\\n4 6 5\\n5 2 3\\n4 1 5\\n5 3 4\\n4 1 3\\n5 2 1\\n5 4 3\\n4 2 2\\n5 4 4\\n5 4 4\\n1 1 1\\n1 1 1\\n2 1 2\\n5 3 5\\n3 5 4\\n3 1 3\\n5 3 1\\n4 3 5\\n5 3 4\\n2 5 5\\n1 5 3\\n4 4 4\\n2 2 2\\n5 3 5\\n1 1 5\\n4 1 4\\n4 4 2\\n3 4 5\\n4 2 4\\n3 2 4\\n5 3 5\\n2 5 3\\n3 1 5\\n1 4 4\\n4 3 4\\n1 5 3\\n3 4 5\\n3 3 5\\n2 3 2\\n4 5 5\\n5 3 4\\n3 4 4\\n4 4 2\\n2 5 4\\n3 4 1\\n5 4 2\\n2 5 1\\n4 4 3\\n4 3 4\\n4 5 2\\n2 5 1\\n3 4 4\\n1 3 2\\n2 3 4\\n3 4 4\\n5 4 4\\n5 3 4\\n3 2 2\\n4 3 2\\n5 4 4\\n5 2 4\\n5 4 4\\n5 1"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n250 250\n250 750\n\"\"\") == \"500.00\"\nassert solution(\"\"\"\n2\n500 500\n1000 1000\n\"\"\") == \"1000.00\"\nassert solution(\"\"\"\n100\n\"\"\") == \"0.00\"\n\n\"\"\"\n--Challenge--\nFind the maximum amount of rope that can be used in a field with $n$ posts.\n\"\"\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"2.00\"\nassert solution(\"2\") == \"20.00\"\nassert solution(\"2 3\") == \"20.00\"\nassert solution(\"2 3 4\") == \"30.00\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"2\n250 250\n250 750\"\"\") == \"500.00\"\nassert solution(\"\"\"5\n0 0\n0 250\n250 500\n250 250\n250 750\"\"\") == \"700.00\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n250 250\n250 750\n''') == '500.00'\nassert solution('''\n3\n0 0\n2 5\n3 4\n''') == '3.00'\nassert solution('''\n4\n0 0\n1 10\n1 3\n1 0\n''') == '8.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '500.00'\nassert solution('3') == '500.00'\nassert solution('4') == '500.00'\nassert solution('5') == '500.00'\nassert solution('6') == '500.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n0 0\n250 250\n250 750\n250 1000\n250 1250''') == '500.00'\n\nassert solution('''4\n0 0\n500 500\n250 250\n250 750''') == '500.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n250 250\n250 750\n''') == \"500.00\"\nassert solution('''\n1\n250 250\n''') == \"500.00\"\nassert solution('''\n10\n200 300\n100 400\n200 300\n200 400\n100 400\n200 300\n100 400\n100 400\n200 300\n200 400\n''') == \"1000.00\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n10\n50\n50\n40\n30\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"500.00\"\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3\n2 100 10\n100 1 10''') == '0'\nassert solution('''2 4\n2 5 10\n1 100 4\n2 5 8''') == '2'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '0'\nassert solution('1') == '2'\nassert solution('2 1') == '0'\nassert solution('2 1 2') == '1'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '0'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 3\n1 10 3\n''') == '0'\nassert solution('''\n3 4\n1 1 1\n''') == '0'\nassert solution('''\n5 2\n2 1 2 1 2\n''') == '4'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '0'\nassert solution('2 5') == '6'\nassert solution('3 5') == '15'\nprint('SUCCESS')\n----"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3\\n2 100 10\\n100 1 10\\n') == '0'\nassert solution('2\\n2\\n2\\n') == '0'\nassert solution('2\\n1\\n2\\n') == '1'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '0'\nassert solution('1 2') == '1'\nassert solution('100 3') == '2'\nassert solution('100 3') == '2'\nassert solution('100 1 10') == '11'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 3\n2 100 10\n100 1 10\n''') == '0'\nassert solution('''\n2 4\n1 1 10\n1 100 10\n''') == '1'\nassert solution('''\n4 5\n1 1 100 1\n1 1 100 1\n1 100 1 100 1\n1 100 1 100 1\n''') == '3'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\n2 100 10\n100 1 10\n''') == '0'\nassert solution('''\n3 4\n1 1 2\n2 3 4\n''') == '4'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == '2'"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\"\"\") == \"2\"\n\nassert solution(\"\"\"75 5 25 20 50 35\n50 5 25 35\"\"\") == \"3\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5 3 2') == '2'\nassert solution('20 5 3 2') == '5'\nassert solution('50 5 25 20 50 35') == '2'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('20 5 25 20 50 35') == '2'\nassert solution('80 50 3 2') == '1'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('\\n'.join([\n    '4 4 3 2',\n    '75 5 25 20 50 35',\n    '50 5 25 35',\n    '5 5 25 35'\n])) == '2'\n\nassert solution('\\n'.join([\n    '4 4 3 2',\n    '75 5 25 20 50 35',\n    '50 5 25 20 50 35',\n    '50 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20 50 35',\n    '5 5 25 20"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('40') == '5'\nassert solution('80 50 3 2') == '2'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n''') == '2'"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('80 50 3 2\\n75 5 25 20 50 35') == '2'\nassert solution('125 50 2 2\\n125 25 25 25 50 35') == '1'\nassert solution('50 50 2 2\\n50 50 50 50 50 35') == '1'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([80, 50, 3, 2]) == '2'\nassert solution([75, 5, 25, 20, 50, 35]) == '3'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4\n2211\n1112\n1112\n''') == 'AAAABBBB'\nassert solution('''\n3 4\n2211\n1112\n1111\n''') == 'AAAABBBB'\nassert solution('''\n3 4\n2211\n1111\n1112\n''') == 'impossible'\nassert solution('''\n3 4\n2211\n1111\n1111\n''') == 'impossible'\nassert solution('''\n1\n12\n''') == 'A.B.C'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 4\n2211\n1112\n1112\nSample Output:\nAAAA\n...A\n....\n\nBB..\nBBBB\n...B\n\n....\n...C\nCCCC\n''') == 'A.A..A...B...C...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C...A...B...C..."
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n2211\\n1112\\n1112\") == \"AAAA\\n...A\\n....\\nCCCC\"\nassert solution(\"1 1\\n1 1\") == \"AAAA\\nAAAB\\nAAAB\"\nassert solution(\"1\\n1\") == \"AAAA\\nAAAB\\nAAAB\"\nassert solution(\"1\\n1\\n1\\n1\") == \"AAAA\\nAAAB\\nAAAB\\nAAAB\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"AAAA\\nAAAB\\nAAAB\\nAAAB\\nAAAB\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '''\n    4 4\n    2211\n    1112\n    1112\n    ''') == 'AAAA'\n    '''\n    3 4\n    2211\n    1112\n    1112\n    '''\n    assert solution(\n    '''\n    5 5\n    2211\n    1111\n    1111\n    1111\n    ''') == 'AAAAB'\n    '''\n    5 5\n    2211\n    1111\n    1111\n    1111\n    '''\n    assert solution(\n    '''\n    1 1\n    1 1\n    1 1\n    ''') == 'impossible'\n    '''\n    3 3\n    00\n    00\n    '''\n    assert solution(\n    '''\n    5 5\n    1111\n    1111\n    1111\n    1111\n    ''') == 'AAAAB'\n    '''\n    5 5\n    1111\n    1111\n    1111\n    1111\n    '''\n    assert solution(\n    '''\n    4 3\n    1111\n    1111\n    1111\n    ''') == 'AAAAB'\n    '''\n    4 3\n    1111\n    1111\n    1111\n    '''\n    "
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4\\n2211\\n1112\\n1112') == \"AAAABBBB\\n....AB\\n....C\"\nassert solution('3 4\\n2211\\n1112\\n1112') == \"AAAABBBB\\n....AB\\n....C\"\nassert solution('3 4\\n2211\\n1112\\n2211') == \"AAAABBBB\\n....AB\\n....C\"\nassert solution('3 4\\n2211\\n1112\\n2211') == \"AAAABBBB\\n....AB\\n....C\"\nassert solution('3 4\\n2211\\n1112\\n2211') == \"AAAABBBB\\n....AB\\n....C\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 4\n2211\n1112\n1112\n''') == \"AAAA\\n...A\\n....\\n\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 4\n2211\n1112\n1112\n''') == \"AAAA\"\nassert solution('''\n3 4\n2211\n2211\n1112\n''') == \"AAAA\"\nassert solution('''\n3 4\n1112\n2211\n2211\n''') == \"AAAA\"\nassert solution('''\n3 4\n2211\n2211\n2211\n''') == \"AAAA\"\nassert solution('''\n3 4\n2211\n2211\n2211\n''') == \"AAAA\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 4\n2211\n1112\n1112\n\n''') == \"BBBB\"\nassert solution('''\n5 4\n2211\n1112\n1111\n\n''') == \"BBBB\"\nassert solution('''\n5 4\n2211\n1112\n1111\n\n''') == \"BBBB\"\nassert solution('''\n5 4\n2211\n1112\n1111\n\n''') == \"BBBB\"\nassert solution('''\n5 4\n2211\n1112\n1111\n\n''') == \"BBBB\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n2211\\n1112\\n1112\") == \"AAAABBBB\"\nassert solution(\"3 4\\n2211\\n1112\\n1112\") == \"BBBB\"\nassert solution(\"3 4\\n2211\\n2211\\n2211\") == \"BBBBBB\"\nassert solution(\"3 4\\n2211\\n2211\\n1112\") == \"BBBBBB\"\nassert solution(\"3 4\\n2211\\n2211\\n2211\") == \"BBBBBB\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"AAAA\\n...A\\n....\\nBBBB\\n...B\\n...C\\nCCCC\"\nassert solution(__import__(\"sys\").stdin.read()) == \"impossible\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1 3 3') == '9'\nassert solution('3 4 1 2 3 2') == '7'\nassert solution('4 3 1 2 1') == '5'\nassert solution('1 4 1 2 1 3') == '6'\nassert solution('3 2 1 2 1') == '6'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 3 3') == '9'\nassert solution('4 3 1 2 1') == '11'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 3 3') == \"9\"\nassert solution('3 4 1 2 3 2') == \"12\"\nassert solution('4 3 1 2 1 3') == \"3\"\nassert solution('1 4 1 2 1 3') == \"3\""
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n''') == '9'\nassert solution('''\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n''') == '12'\nassert solution('''\n2 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n''') == '12'\nassert solution('''\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n''') == '9'\nassert solution('''\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n''') == '0'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"3 4 1 2 3 2\") == \"4\"\nassert solution(\"4 3 1 2 1 3\") == \"4\"\nassert solution(\"1 4 1 2 1 3\") == \"3\"\n\n'''\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"2\"\nassert solution(\"10\") == \"2\"\nassert solution(\"2 2 2 2 2 2 2 2 2\") == \"10\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3\\n3 4 1 2 3 2') == '8'\nassert solution('3 4 1 2 3 2\\n3 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3') == '7'\nassert solution('3 4 1 2 3 2\\n3 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3\\n1 4 1 2 1\\n1 4 1 2 1\\n2 2 1 2 1\\n2 2 1 2 1\\n3 3 1 2 1\\n3 3 1 2 1\\n4 4 1 2 1\\n4 4 1 2 1\\n3 3 2 2 1\\n3 3 2 2 1\\n3 2 3 2 1\\n3 2 3 2 1\\n4 4 2 2 1\\n4 4 2 2 1\\n3 3 3 2 1\\n3 3 3 2 1\\n4 4 3 2 1\\n4 4 3 2 1\\n3 4 3 2 1\\n3 4 4 2 1\\n4 3 5 2 1\\n4 3 5 2 1\\n4 5 5 2 1\\n4 5 5 2 1\\n3 4 4 3 1\\n3 4 4 3 1\\n3 5 5 3 1\\n3 5 5 3 1\\n4 5 5 4 1\\n4 5 5 4 1\\n4 5 5 5 1\\n4 5 5 5 1\\n5 5 5 5 1\\n5 5 5 5 1\\n5 5 5 5 1') == '8'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n''') == '9'\n\nprint(solution('''\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n'''))"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3\\n\") == \"9\"\nassert solution(\"2 2 2\\n1 2 1 3\") == \"4\"\nassert solution(\"2 3 2\\n1 2 1 3\\n2 2 2 4\") == \"6\"\nassert solution(\"2 5 2\\n1 2 1 3\\n3 2 2 4\") == \"5\"\nassert solution(\"2 5 2\\n1 2 1 3\\n3 2 2 4\\n2 3 2 5\\n1 3 2 6\") == \"11\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 2 3') == '6'\nassert solution('3 4 1 2 3') == '9'\nassert solution('4 3 1 2 1') == '9'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4''') == '20.396078'\nassert solution('''3 1\n2 1\n3 2\n1 1''') == '3.0'\nprint('All tests passed')"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '20.396078'\n\n\"\"\""
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '20.396078'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n''') == '20.396078'\nassert solution('''\n2\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n''') == 'Impossible'\nassert solution('''\n3\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n''') == '10.000000'\nassert solution('''\n8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n8 8\n''') == '16.000120'\nassert solution('''\n10\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == '10.000000'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n''') == '20.396078'\nassert solution('''\n4 4 4 8\n0 0 1 1\n2 2 1 1\n0 2 2 2\n2 1 1 2\n2 1 1 2\n2 1 1 2\n''') == '18.828657'\nassert solution('''\n6 7\n0 0 0 0 0 1\n1 1 1 0 1 1\n0 0 0 0 0 0\n0 0 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n''') == '18.785714'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 2 3\") == \"0.5\"\nassert solution(\"2 1 2 3\") == \"0.5\"\nassert solution(\"2 2 1 3\") == \"0.5\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 2 2 8\") == \"20.396078\"\nassert solution(\"0 0 6\") == \"20.396078\"\nassert solution(\"3 4 7\") == \"IMPOSSIBLE\"\nassert solution(\"0 8 8\") == \"20.396078\"\nassert solution(\"6 8 8\") == \"20.396078\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\") == \"20.396078\"\nassert solution(\"6 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\") == \"IMPOSSIBLE\"\nassert solution(\"7 3 3\\n1 2 3\\n2 2 4\\n3 4 2\\n4 4 2\\n5 2 4\\n6 3 4\\n7 4 4\\n8 4 3\\n9 3 4\\n10 2 2\\n11 2 3\\n12 3 2\\n13 2 4\\n14 4 4\\n15 3 4\\n16 4 2\\n17 4 3\\n18 4 4\\n19 2 3\\n20 3 4\\n21 3 4\\n22 4 2\\n23 2 4\\n24 3 3\\n25 2 3\\n26 2 4\\n27 4 3\\n28 4 4\\n29 4 2\\n30 4 3\\n31 3 4\\n32 4 4\\n33 2 2\\n34 3 2\\n35 3 2\\n36 2 3\\n37 2 2\\n38 2 2\\n39 2 2\\n40 3 2\\n41 3 2\\n42 2 2\\n43 2 2\\n44 2 2\\n45 2 2\\n46 2 2\\n47 2 2\\n48 2 2\\n49 2 2\\n50 2 2\\n51 2 2\\n52 2 2\\n53 2 2\\n54 2 2\\n55 2 2\\n56 2 2\\n57 2 2\\n58 2 2\\n59 2 2\\n60 2 2\\n61 2 2\\n62 2 2\\n63 2 2\\n64 2 2\\n65 2 2\\n66 2 2\\n67 2 2\\n68 2 2\\n69 2 2\\n70 2 2\\n71 2 2\\n72 2 2\\n73 2 2\\n74 2 2\\n75 2 2\\n76 2 2\\n77 2 2\\n78 2 2\\n79 2 2\\n80 2 2\\n81 2 2\\n82 2 2\\n83 2 2\\n84 2 2\\n85 2 2\\n86 2 2\\n87 2 2\\n88 2 2\\n89 2 2\\n90 2 2\\n91 2 2\\n92 2 2\\n93 2 2\\n94 2 2\\n95 2 2\\n96 2 2\\n97 2 2\\n98 2 2\\n99 2 2\\n100 2 2\\n101 2 2\\n102 2 2\\n103 2 2\\n104 2 2\\n105 2 2\\n106 2 2\\n107 2 2\\n108 2 2\\n109 2 2\\n110 2 2\\n111 2 2\\n112 2 2\\n113 2 2\\n114 2 2\\n115 2 2\\n116 2 2\\n117 2 2\\n118 2 2\\n119 2 2\\n120 2 2\\n121 2 2\\n122 2 2\\n123 2 2\\n124 2 2\\n125 2 2\\n126 2 2\\n127 2 2\\n128 2 2\\n129 2 2\\n130 2 2\\n131 2 2\\n132 2 2\\n133 2 2\\n134 2 2\\n135 2 2\\n136 2 2\\n137 2 2\\n138 2 2\\n139 2 2\\n140 2 2\\n141 2 2\\n142 2 2\\n143 2 2\\n144 2 2\\n145 2 2\\n146 2 2\\n147 2 2\\n148 2 2\\n149 2 2\\n150 2 2\\n151 2 2\\n152 2 2\\n153 2 2\\n154 2 2\\n155 2 2\\n156 2 2\\n157 2 2\\n158 2 2\\n159 2 2\\n160 2 2\\n161 2 2\\n162 2 2\\n163 2 2\\n164 2 2\\n165 2 2\\n166 2 2\\n167 2 2\\n168 2 2\\n169 2 2\\n170 2 2\\n171 2 2\\n172 2 2\\n173 2 2\\n174 2 2\\n175 2 2\\n176 2 2\\n177 2 2\\n178 2 2\\n179 2 2\\n180 2 2\\n181 2 2\\n182 2 2\\n183 2 2\\n184 2 2\\n185 2 2\\n186 2 2\\n187 2 2\\n188 2 2\\n189 2 2\\n190 2 2\\n191 2 2\\n192 2 2\\n193 2 2\\n194 2 2\\n195 2 2\\n196 2 2\\n197 2 2\\n198 2 2\\n199 2 2\\n200 2 2\\n201 2 2\\n202 2 2\\n203 2 2\\n204 2 2\\n205 2 2\\n206 2 2\\n207 2 2\\n208 2 2\\n209 2 2\\n210 2 2\\n211 2 2\\n212 2 2\\n213 2 2\\n214 2 2\\n215 2 2\\n216 2 2\\n217 2 2\\n218 2 2\\n219 2 2\\n220 2 2\\n221 2 2\\n222 2 2\\n223 2 2\\n224 2 2\\n225 2 2\\n226 2 2\\n227 2 2\\n228 2 2\\n229 2 2\\n230 2 2\\n231 2 2\\n232 2 2\\n233 2 2\\n234 2 2\\n235 2 2\\n236 2 2\\n237 2 2\\n238 2 2\\n239 2 2\\n240 2 2\\n241 2 2\\n242 2 2\\n243 2 2\\n244 2 2\\n245 2 2\\n246 2 2\\n247 2 2\\n248 2 2\\n249 2 2\\n250 2 2\\n251 2 2\\n252 2 2\\n253 2 2\\n254 2 2\\n255 2 2\\n256 2 2\\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 2 2 8') == '20.396078'\nassert solution('0 0 6') == '20.396078'\nassert solution('3 4 7') == 'IMPOSSIBLE'\nassert solution('0 8 8') == '20.396078'\nassert solution('6 8 8') == '20.396078'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 2 2 8') == '20.396078'\nassert solution('4 5 5 5 7') == 'Impossible'\nassert solution('2 3 1 2 3') == '4.0'\nassert solution('0 0 6') == '20.396078'"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abca') == 'b'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'c'\nassert solution('nn oo pp qq rr ss tt uu vv ww xx yy zz') == 'd'\n\n'''"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\") == \"a\"\n\"\"\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''abca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8''') == 'c'\n\nassert solution('''def solution(stdin: str) -> str:\n    pass\n\nassert solution('''abca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8''') == 'b'\n\nassert solution('''def solution(stdin: str) -> str:\n    pass\n\nassert solution('''bc\ncd\ne\nf''') == 'e'"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"abca\") == \"b\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1 8\") == \"c\""
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('abca') == 'b'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'c'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abca') == 'c'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'b'\nassert solution('nn oo pp qq rr ss tt uu vv ww xx yy zz') == 'x'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nabc\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'a'\nassert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'a'\n'''\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'acd'\n'''"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == \"a\"\nassert solution('''\na\nbc d\nd e\ne f\ng h\nh i\ni j\nj k\nk l\nl m\nm n\nn o\no p\np q\nq r\nr s\ns t\nt u\nu v\nv w\nw x\nx y\ny z\nz\n1\n2\n1 8\n''') == \"bc\"\nassert solution('''\na\nbc d\nd e\ne f\ng h\nh i\ni j\nj k\nk l\nl m\nm n\nn o\no p\np q\nq r\nr s\ns t\nt u\nu v\nv w\nw x\nx y\ny z\nz\n1\n2\n1 8\n''') == \"bc\"\nassert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == \"c\"\nassert solution('''\na\nbc d\nd e\ne f\ng h\nh i\ni j\nj k\nk l\nl m\nm n\nn o\no p\np q\nq r\nr s\ns t\nt u\nu v\nv w\nw x\nx y\ny z\nz\n1\n2\n1 8\n''') == \"cd\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"abca\") == \"b\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"c\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n') == '12\\n10\\n16\\n7'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"12\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"12 10 16 7\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrakija\\n\") == \"12\\n10\\n16\\n7\\n\"\nassert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrakija\\n\") == \"12\\n10\\n16\\n7\\n\"\nassert solution(\"1\\n\") == \"1\\n\"\nassert solution(\"1\\n\") == \"1\\n\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '12'\nassert solution('5') == '10'\nassert solution('5') == '16'\nassert solution('5') == '7'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\nhobotnica\nrobot\nhobi\nhobit\nrobi\n''') == '12'\nassert solution('''\n4\nrobi\nhobi\nhobit\nroba\n''') == '16'\n'''\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '10'\nassert solution('hobotnica') == '12'\nassert solution('robot') == '10'\nassert solution('hobi') == '16'\nassert solution('hobit') == '7'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrakija\\n4\\nrobi\\nhobi\\nhobit\\nrakija') == '12\\n10\\n16\\n7'\nassert solution('4\\nrobi\\nhobi\\nhobit\\nrakija\\n5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi') == '16\\n12\\n7'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '10'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"14 4\\nJQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\nassert solution(\"5 3\\nAXYZ\") == \"XYZ\"\n\"\"\"\nimport math"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read().rstrip()\n\"\"\"\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"14 4\\nJQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\n\nSample Input:\n12 4\nABZ CDEGH JKL\nSample Output:\nANOTHER TEST"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"14 4\\nJQ IRKEYFG EXQ\") == \"THIS IS A TEST\""
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'THIS IS A TEST'"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"14 4\nJQ IRKEYFG EXQ\"\"\") == \"THIS IS A TEST\"\n\nSample Input:\n8 5\nPADKCPKGXQFJJJQKQJIHWL\nSample Output:\nYQJKQJIHWL\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\nassert solution('5 5\\nAAA BBB CCC DDD') == 'AAABBBBBCDDD'\n'''"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"14 4\\nJQ IRKEYFG EXQ\") == \"THIS IS A TEST\""
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == \"THIS IS A TEST\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2.6') == '135'\nassert solution('1.6') == '1'\nassert solution('0.6') == '0'\nassert solution('2.3') == '2'\nassert solution('0.2') == '0'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '135135'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2.6') == '135'\nassert solution('5776') == '76'\nassert solution('5') == 'No solution'\nassert solution('2') == 'No solution'\nassert solution('5.9') == 'No solution'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2.6') == '135'\nassert solution('12.4') == '90'\nassert solution('42.9') == '999'\nassert solution('6.8') == '845'\nassert solution('5.2') == '55'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == \"No solution\"\nassert solution('1.5') == '135'\nassert solution('2.6') == '135135'\nassert solution('5776') == '270270'\nassert solution('1000000') == '2702702702702702702702702702'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2.6') == '135'\nassert solution('1.6') == '135'\nassert solution('12.6') == '135135'\nassert solution('0.6') == 'No solution'\nassert solution('0.5') == 'No solution'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1.2') == \"1\"\nassert solution('1.2') == \"1\"\nassert solution('1.2') == \"1\"\nassert solution('1.2') == \"1\"\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2.6') == '135\\n270\\n135135\\n270270\\n'"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5.6\n''') == '135'\nassert solution('''\n5.6\n''') == '135135'\nassert solution('''\n2.6\n''') == '135270'\nassert solution('''\n5.6\n''') == 'No solution'\nassert solution('''\n5.8\n''') == 'No solution'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2.6') == \"135\\n270\"\nassert solution('5') == \"270\"\nassert solution('16') == \"270270\"\nassert solution('1000') == \"No solution\""
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4'\nassert solution('''\n5\n3 4\n0 1\n2 5\n7 3\n9 4\n1 2\n''') == '4'\n'''\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4'\nassert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '0'\nassert solution('''\n0\n''') == '0'\n'''\n\u0417\u0430\u0434\u0430\u043d\u043e \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u043f\u0440\u0430\u0437\u043d\u0438\u0446\u044c $N$ \u0456 \u043c\u0430\u0439\u0441\u0442\u0440\u0430 \u043f\u043e\u0441\u0438\u043b\u0430\u043d\u043d\u044f, \u043e\u0431\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044f \u0447\u0438 \u0432\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u043a\u0456\u043b\u044c\u043a\u043e\u0441\u0442\u0456 \u043d\u0430\u0431\u043b\u0438\u0436\u0435\u043d\u044c \u0432 \u0437\u0430\u043b\u0435\u0436\u043d\u043e\u043c\u0443 \u0437\u0430\u043b\u0456\u0437\u0443.\n\n\u041f\u043e\u0447\u0430\u0442\u043a\u043e\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437\u0430\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0456 \u043f\u0440\u0438 \u0446\u0456\u0454\u0457 \u043a\u0456\u043b\u044c\u043a\u043e\u0441\u0442\u0456 \u043f\u0440\u0430\u0437\u043d\u0438\u0446\u044c $N$ \u0440\u0430\u0432\u043d\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044e. \u041a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u043d\u0430\u0431\u043b\u0438\u0436\u0435\u043d\u044c $S$ \u0437\u0430\u043b\u0456\u0437\u0443\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u0432 \u0446\u0435\u0439 \u043c\u0430\u0439\u0441\u0442\u0440\u0430\u043f\u043e\u0440\u0442, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u044f\u043a\u0438\u0439 \u0431\u0443\u0434\u0435 \u0432\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0439.\n\n\u0417\u0430 \u043f\u043e\u0447\u0430\u0442\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0432\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u043a\u0456\u043b\u044c\u043a\u043e\u0441\u0442\u0456 \u043d\u0430\u0431\u043b\u0438\u0436\u0435\u043d\u044c \u043d\u0435 \u043f\u0435\u0440\u0435\u043a\u0438\u0434\u0443\u0454\u0442\u044c\u0441\u044f.\n\n\u041f\u0440\u0438\u043a\u043b\u0430\u0434 \u0437\u0430\u043f\u0443\u0441\u043a\u0443:\n\nSample Input:\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\nSample Output:\n4\n\nSample Input:\n0\n''') == '0'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4'\nassert solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '0'\n'''\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4'\n\"\"\""
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"4\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(r\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == \"4\"\nassert solution(r\"5\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\\n1 11\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n2 8\\n2 9\\n2 10\\n2 11\\n3 1\\n3 2\\n3 3\\n3 4\\n3 5\\n3 6\\n3 7\\n3 8\\n3 9\\n3 10\\n3 11\\n4 1\\n4 2\\n4 3\\n4 4\\n4 5\\n4 6\\n4 7\\n4 8\\n4 9\\n4 10\\n4 11\\n5 1\\n5 2\\n5 3\\n5 4\\n5 5\\n5 6\\n5 7\\n5 8\\n5 9\\n5 10\\n5 11\\n6 1\\n6 2\\n6 3\\n6 4\\n6 5\\n6 6\\n6 7\\n6 8\\n6 9\\n6 10\\n6 11\\n7 1\\n7 2\\n7 3\\n7 4\\n7 5\\n7 6\\n7 7\\n7 8\\n7 9\\n7 10\\n7 11\\n8 1\\n8 2\\n8 3\\n8 4\\n8 5\\n8 6\\n8 7\\n8 8\\n8 9\\n8 10\\n8 11\\n9 1\\n9 2\\n9 3\\n9 4\\n9 5\\n9 6\\n9 7\\n9 8\\n9 9\\n9 10\\n9 11\\n10 1\\n10 2\\n10 3\\n10 4\\n10 5\\n10 6\\n10 7\\n10 8\\n10 9\\n10 10\\n10 11\\n11 1\\n11 2\\n11 3\\n11 4\\n11 5\\n11 6\\n11 7\\n11 8\\n11 9\\n11 10\\n11 11\\n12 1\\n12 2\\n12 3\\n12 4\\n12 5\\n12 6\\n12 7\\n12 8\\n12 9\\n12 10\\n12 11\\n13 1\\n13 2\\n13 3\\n13 4\\n13 5\\n13 6\\n13 7\\n13 8\\n13 9\\n13 10\\n13 11\\n14 1\\n14 2\\n14 3\\n14 4\\n14 5\\n14 6\\n14 7\\n14 8\\n14 9\\n14 10\\n14 11\\n15 1\\n15 2\\n15 3\\n15 4\\n15 5\\n15 6\\n15 7\\n15 8\\n15 9\\n15 10\\n15 11\\n16 1\\n16 2\\n16 3\\n16 4\\n16 5\\n16 6\\n16 7\\n16 8\\n16 9\\n16 10\\n16 11\\n17 1\\n17 2\\n17 3\\n17 4\\n17 5\\n17 6\\n17 7\\n17 8\\n17 9\\n17 10\\n17 11\\n18 1\\n18 2\\n18 3\\n18 4\\n18 5\\n18 6\\n18 7\\n18 8\\n18 9\\n18 10\\n18 11\\n19 1\\n19 2\\n19 3\\n19 4\\n19 5\\n19 6\\n19 7\\n19 8\\n19 9\\n19 10\\n19 11\\n20 1\\n20 2\\n20 3\\n20 4\\n20 5\\n20 6\\n20 7\\n20 8\\n20 9\\n20 10\\n20 11\\n21 1\\n21 2\\n21 3\\n21 4\\n21 5\\n21 6\\n21 7\\n21 8\\n21 9\\n21 10\\n21 11\\n22 1\\n22 2\\n22 3\\n22 4\\n22 5\\n22 6\\n22 7\\n22 8\\n22 9\\n22 10\\n22 11\\n23 1\\n23 2\\n23 3\\n23 4\\n23 5\\n23 6\\n23 7\\n23 8\\n23 9\\n23 10\\n23 11\\n24 1\\n24 2\\n24 3\\n24 4\\n24 5\\n24 6\\n24 7\\n24 8\\n24 9\\n24 10\\n24 11\\n25 1\\n25 2\\n25 3\\n25 4\\n25 5\\n25 6\\n25 7\\n25 8\\n25 9\\n25 10\\n25 11\\n26 1\\n26 2\\n26 3\\n26 4\\n26 5\\n26 6\\n26 7\\n26 8\\n26 9\\n26 10\\n26 11\\n27 1\\n27 2\\n27 3\\n27 4\\n27 5\\n27 6\\n27 7\\n27 8\\n27 9\\n27 10\\n27 11\\n28 1\\n28 2\\n28 3\\n28 4\\n28 5\\n28 6\\n28 7\\n28 8\\n28 9\\n28 10\\n28 11\\n29 1\\n29 2\\n29 3\\n29 4\\n29 5\\n29 6\\n29 7\\n29 8\\n29 9\\n29 10\\n29 11\\n30 1\\n30 2\\n30 3\\n30 4\\n30 5\\n30 6\\n30 7\\n30 8\\n30"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4'\nassert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '0'\nassert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '2'\n'''\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n0 1\\n3 7\\n4 5\\n6 5\\n9') == '4'\nassert solution('5\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3') == '0'\nassert solution('4\\n0 1\\n3 7\\n4 5\\n6 5\\n9') == '0'\nassert solution('5\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3') == '0'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3''') == '4'\nassert solution('''1\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3''') == '0'\nassert solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3''') == '0'\nassert solution('''1\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3''') == '0'\nassert solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3''') == '0'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2\n1 3\n1 4\n1 5\n''') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nprint(solution('''5\n1 2\n1 3\n1 4\n1 5\n'''))"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n1 2\") == \"0.0000000 0.0000000\"\nassert solution(\"1\\n1 3\") == \"0.0000000 0.0000000\"\nassert solution(\"1\\n1 4\") == \"0.0000000 0.0000000\"\nassert solution(\"1\\n1 5\") == \"0.0000000 0.0000000\"\nassert solution(\"5\\n1 2\") == \"-1.0000000 0.0000000\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"0.0000000 0.0000000\"\nassert solution(\"1 2 3\") == \"1.0000000 0.0000000\"\nassert solution(\"1 2 4\") == \"0.0000000 0.0000000\"\nassert solution(\"1 2 5\") == \"0.0000000 0.0000000\"\nassert solution(\"1 2 3 4\") == \"-1.0000000 0.0000000\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2\\n1 3\\n1 4\\n1 5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '0.0000000 0.0000000'\nassert solution('1 3') == '0.0000000 0.0000000'\nassert solution('1 4') == '0.0000000 0.0000000'\nassert solution('1 5') == '0.0000000 0.0000000'\nprint('all tests passed')"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"1 4\\n\"\n    \"1 5\\n\"\n) == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2\n1 3\n1 4\n''') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('''\n4\n1 2\n1 3\n1 4\n1 5\n''') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\n''') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('''\n8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n3 1\n3 2\n3 4\n3 5\n3 6\n3 7\n4 1\n4 2\n4 3\n4 5\n4 6\n4 7\n5 1\n5 2\n5 3\n5 4\n5 6\n5 7\n6 1\n6 2\n6 3\n6 4\n6 5\n6 7\n7 1\n7 2\n7 3\n7 4\n7 5\n7 6\n''') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n1.0000000 1.0000000\\n1.0000000 -1.0000000\\n-1.0000000 1.0000000\\n-1.0000000 -1.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1 2\n1 3\n1 4\n1 5\n''') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n'''\n\n---Input Sample 1---\n7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n\n---Input Sample 2---\n11\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 22\n1 23\n1 24\n1 25\n1 26\n1 27\n1 28\n1 29\n1 30\n1 31\n1 32\n1 33\n1 34\n1 35\n1 36\n1 37\n1 38\n1 39\n1 40\n1 41\n1 42\n1 43\n1 44\n1 45\n1 46\n1 47\n1 48\n1 49\n1 50\n1 51\n1 52\n1 53\n1 54\n1 55\n1 56\n1 57\n1 58\n1 59\n1 60\n1 61\n1 62\n1 63\n1 64\n1 65\n1 66\n1 67\n1 68\n1 69\n1 70\n1 71\n1 72\n1 73\n1 74\n1 75\n1 76\n1 77\n1 78\n1 79\n1 80\n1 81\n1 82\n1 83\n1 84\n1 85\n1 86\n1 87\n1 88\n1 89\n1 90\n1 91\n1 92\n1 93\n1 94\n1 95\n1 96\n1 97\n1 98\n1 99\n1 100\n1 101\n1 102\n1 103\n1 104\n1 105\n1 106\n1 107\n1 108\n1 109\n1 110\n1 111\n1 112\n1 113\n1 114\n1 115\n1 116\n1 117\n1 118\n1 119\n1 120\n1 121\n1 122\n1 123\n1 124\n1 125\n1 126\n1 127\n1 128\n1 129\n1 130\n1 131\n1 132\n1 133\n1 134\n1 135\n1 136\n1 137\n1 138\n1 139\n1 140\n1 141\n1 142\n1 143\n1 144\n1 145\n1 146\n1 147\n1 148\n1 149\n1 150\n1 151\n1 152\n1 153\n1 154\n1 155\n1 156\n1 157\n1 158\n1 159\n1 160\n1 161\n1 162\n1 163\n1 164\n1 165\n1 166\n1 167\n1 168\n1 169\n1 170\n1 171\n1 172\n1 173\n1 174\n1 175\n1 176\n1 177\n1 178\n1 179\n1 180\n1 181\n1 182\n1 183\n1 184\n1 185\n1 186\n1 187\n1 188\n1 189\n1 190\n1 191\n1 192\n1 193\n1 194\n1 195\n1 196\n1 197\n1 198\n1 199\n1 200\n1 201\n1 202\n1 203\n1 204\n1 205\n1 206\n1 207\n1 208\n1 209\n1 210\n1 211\n1 212\n1 213\n1 214\n1 215\n1 216\n1 217\n1 218\n1 219\n1 220\n1 221\n1 222\n1 223\n1 224\n1 225\n1 226\n1 227\n1 228\n1 229\n1 230\n1 231\n1 232\n1 233\n1 234\n1 235\n1 236\n1 237\n1 238\n1 239\n1 240\n1 241\n1 242\n1 243\n1 244\n1 245\n1 246\n1 247\n1 248\n1 249\n1 250\n1 251\n1 252\n1 253\n1 254\n1 255\n1 256\n1 257\n1 258\n1 259\n1 260\n1 261\n1 262\n1 263\n1 264\n1 265\n1 266\n1 267\n1 268\n1 269\n1 270\n1 271\n1 272\n1 273\n1 274\n1 275\n1 276\n1 277\n1 278\n1 279\n1 280\n1 281\n1 282\n1 283\n1 284\n1 285\n1 286\n1 287\n1 288\n1 289\n1 290\n1 291\n1 292\n1 293\n1 294\n1 295\n1 296\n1 297\n1 298\n1 299\n1 300\n1 301\n1 302\n1 303\n1 304\n1 305\n1 306\n1 307\n1 308\n1 309\n1 310\n1 311\n1 312\n1 313\n1 314\n1 315\n1 316\n1 317\n1 318\n1 319\n1 320\n1 321\n1 322\n1 323\n1 324\n1 325\n1 326\n1 327\n1 328\n1 329\n1 330\n1 331\n1 332\n1 333\n1 334\n1 335\n1 336\n1 337\n1 338\n1 339\n1 340\n1 341\n1 342\n1 343\n1 344\n1 345\n1 346\n1 347\n1 348\n1 349\n1 350\n1 351\n1 352\n1 353\n1 354\n1 355\n1 356\n1 357\n1 358\n1 359\n1 360\n1 361\n1 362\n1 363\n1 364\n1 365\n1 366\n1 367\n1 368\n1 369\n1 370\n1 371\n1 372\n1 373\n1 374\n1 375\n1 376\n1 377\n1 378\n1 379\n1 380\n1 381\n1 382\n1 383\n1 384\n1 385\n1 386\n1 387\n1 388\n1 389\n1 390\n1 391\n1 392\n1 393\n1 394\n1 395\n1 396\n1 397\n1 398\n1 399\n1 400\n1 401\n1 402\n1 403\n1 404\n1 405\n1 406\n1 407\n1 408\n1 409\n1 410\n1 411\n1 412\n1 413\n1 414\n1 415\n1 416\n1 417\n1 418\n1 419\n1 420\n1 421\n1 422\n1 423\n1 424\n1 425\n1 426\n1 427\n1 428\n1 429\n1 430\n1 431\n1 432\n1 433\n1 434\n1 435\n1 436\n1 437\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n2 1\\n1 2\\n1 3') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 2\n1 3\n1 4\n1 5\n''') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n'\nassert solution('''\n3\n1 2\n1 3\n1 4\n''') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 3\naaa\nabc\naba\na*a\naaa*\n*aaa\n''') == '''2\n1\n1\n'''"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"1 1\") == \"2\""
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('5') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\naaa\naba\na*a\naaa*\n*aaa\n''') == '2'\nassert solution('''\n2\nabc\naba\na*a\naaa*\n*aaa\n''') == '1'\nassert solution('''\n3\naaa\nabc\naba\na*a\naaa*\n*aaa\n''') == '1'\nassert solution('''\n4\nabc\naba\na*a\naaa*\n*aaa\n''') == '1'\nassert solution('''\n5\naaa\nabc\naba\na*a\naaa*\n*aaa\n''') == '0'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    3\n    aaa\n    abc\n    aba\n    a*a\n    aaa*\n    *aaa\n    \"\"\"\n) == \"2\"\nassert solution(\n    \"\"\"\n    4\n    aaa\n    abc\n    aba\n    a*a\n    aaa*\n    *aaa\n    \"\"\"\n) == \"1\"\nassert solution(\n    \"\"\"\n    1\n    aaa\n    aaa*\n    \"\"\"\n) == \"1\"\nassert solution(\n    \"\"\"\n    3\n    aaa\n    abc\n    aba\n    a*a\n    aaa*\n    *aaa\n    \"\"\"\n) == \"1\"\nassert solution(\n    \"\"\"\n    3\n    aaa\n    abc\n    aba\n    a*a\n    aaa*\n    *aaa\n    \"\"\"\n) == \"1\""
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 3\naaa\nabc\naba\na*a\naaa*\n*aaa\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n10 3\n*abc*\n*aaaa*\n*ab*a*\n*aaaa*a*\n*aaaa*a*a\n*a*aa*\n*aaaa*a*\n*aaaa*a*a\n*aaaa*aa*\n*aaaa*a*a\n*aaa*a*\n*aaaa*a*a\n\"\"\") == \"9\"\n\nassert solution(\"\"\"\n15 3\n*abc*\n*aaaa*\n*ab*a*\n*aaaa*a*\n*aaaa*a*a\n*a*aa*\n*aaaa*a*\n*aaaa*a*a\n*aaaa*aa*\n*aaaa*a*a\n*a*aa*\n*aaaa*a*\n*aaaa*a*a\n*aaaa*aa*\n*aaaa*a*\n*aaaa*a*a\n*aaaa*aa*\n*aaaa*a*a\n*aaa*a*\n*aaaa*a*a\n\"\"\") == \"19\"\n\n\"\"\"\n--- Part Two ---\nLittle Matej is studying OOP. The study is taking a long time and he\u2019s still having some trouble. Being stuck for several weeks, he\u2019s curious if there is a way to get the program to finish working correctly.\n\nThe program he\u2019s writing has a bug. The program checks the grammar of an expression for syntactical correctness. While the program produces correct results, it runs into an infinite loop.\n\nThe bug in the program is that it also checks the grammar of the input. The grammar checks whether an input expression is correct in terms of syntactical correctness. When the program encounters a duplicate parentheses pair in the input, it doesn\u2019t check the grammar.\n\nThe bug is that it checks the grammar of the input. However, it doesn\u2019t check the grammar of the output.\n\nFor example, the following program should contain infinite loops:"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\nassert solution(\"aa\") == \"aa\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"abc\") == \"abc\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\naaa\\nabc\\naba\\na*a\\naaa*\\n*aaa\\n\") == \"2\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\nkul\nkul\n''') == '1'\nassert solution('''\n3\nkul\nkul\nkul\n''') == '1'\nassert solution('''\n3\nkul\nkul\nkul\n''') == '1'\nassert solution('''\n3\nkul\nkul\nkul\n''') == '0'\nassert solution('''\n4\nkul\nkul\nkul\nkul\n''') == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\n''') == '1'\nassert solution('''8\nXXX\nXXX\nXXX\nXXX\nXXX\nXXX\nXXX\nXXX\nXXX\n''') == '0'\nassert solution('''16\n
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 2\nOX\nOX\nXO\nOX\nOX\nOO\nXO\nOO''') == '1'\nassert solution('''4 2\nOX\nOX\nXO\nOX\nOX\nOO\nXO\nOO''') == '0'\nassert solution('''4 2\nOX\nOX\nXO\nOX\nOX\nOO\nXO\nOO''') == '1'\nassert solution('''4 2\nOX\nOX\nXO\nOX\nOX\nOO\nXO\nOO''') == '0'\n'''"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOX\\nOX\\nOX\\nOO\\nOX\\nOX\\n') == '1'\n\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOX\\nOX\\nOX\\nOO\\nOX\\nOX\\n') == '0'\n\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOX\\nOX\\nOX\\nOO\\nOX\\nOX\\n') == '0'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\", \"Test 1\"\nassert solution(\"1 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\") == \"1\"\nassert solution(\"3 3\\nXO XO\\nXO XO\\nXO XO\\nOX\\nOX\\nOX\\nOX\\nOX\\nOO\\nOX\\nOO\") == \"0\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"1\"\nassert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"0\"\nassert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"1\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO') == '1'\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO') == '0'\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO') == '1'\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO') == '0'"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1'\nassert solution('5 3') == '0'\nassert solution('3 2') == '0'\nassert solution('100 10') == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == '1'\nassert solution('''\n3 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == '0'\nassert solution('''\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == '1'\nassert solution('''\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == '0'"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '1'\nassert solution('4 5') == '0'\nassert solution('4 4') == '1'\nassert solution('6 6') == '1'\nassert solution('1000 2') == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == '1'\n\nassert solution('''\n5 5\nXXO\nXXX\nXOO\nXXX\nXOO\n''') == '0'\n\nassert solution('''\n5 2\nOX\nXO\nOX\nXO\nOX\n''') == '1'\n\nassert solution('''\n5 2\nXXO\nXXX\nXOO\nXXX\nXOO\n''') == '1'\n\nassert solution('''\n5 2\nOX\nXO\nOX\nXO\nOX\n''') == '1'"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n2 0\n0 2\n-2 0\n0 -2\n''') == '16'"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1 2\n1 2\n2 1\n''') == '16'\nassert solution('''\n5\n5 6\n6 5\n5 6\n6 5\n''') == '55'\nassert solution('''\n5\n5 6\n6 5\n5 6\n6 5\n''') == '56'\nassert solution('''\n3\n2 0\n0 2\n0 -2\n''') == '3'\nassert solution('''\n3\n2 0\n0 2\n0 -2\n''') == '3'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0'\nassert solution('2 3 0') == '1'\nassert solution('5 0 0') == '1'\nassert solution('3 4 4') == '5'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"17\""
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '16'"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 0\n0 2\n-2 0\n0 -2\n''') == '16'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n1\n1\n''') == '4'\nassert solution('''\n1\n2\n2\n''') == '4'\nassert solution('''\n1\n1\n2\n''') == '2'\nassert solution('''\n1\n1\n2\n''') == '0'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 0\\n0 2\\n-2 0\\n0 -2') == '16'\nassert solution('1 1\\n2 2\\n1 -1') == '2'\n\nimport sys\nsys.setrecursionlimit(10**6)\ninput = lambda: sys.stdin.readline().rstrip()\nfrom math import gcd"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '16'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '6'\nassert solution('3') == '6'\nassert solution('4') == '12'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 10 50\n8 8 2 -2\n''') == '80'\nassert solution('''\n5 10 50\n-8 8 2 -2\n''') == '80'\nassert solution('''\n5 10 50\n8 8 2 -2\n''') == '80'\nassert solution('''\n5 10 50\n8 8 2 -2\n''') == '80'\nassert solution('''\n5 10 50\n-8 8 2 -2\n''') == '80'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n8 8 2 -2') == '80'\nassert solution('2\\n10 10 20 10') == '210'\n\"\"\""
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == output"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '80'"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 10 50\\n8 8 2 -2') == '80'"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"4 10 50\\n8 8 2 -2\\n\"\n) == \"80\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 10 50\") == \"80\"\n\"\"\""
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 5 8') == '10'\nassert solution('3 1 2 5 8') == '20'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 0\\n-8 7 0') == '80'\nassert solution('3 4 2\\n0 3 2 -1') == '80'\nassert solution('4 4 2\\n-2 -2 -2 -2') == '80'\nassert solution('5 5 2\\n0 4 -1 -1') == '80'\nassert solution('6 6 2\\n0 5 -1 -1') == '80'"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 10 50\\n8 8 2 -2') == '80'\nassert solution('5 3 100\\n8 9 8 3 -2') == '101'\nassert solution('5 10 100\\n8 9 8 3 -2') == '99'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 8') == '3.000000000'\nassert solution('0 0 10 10') == '2.000000000'\nassert solution('5 1') == '3.000000000'\nassert solution('5 9') == '2.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.000000000'\nassert solution('''\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '5.000000000'\n'''\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 8') == '3.000000000'\nassert solution('0 0 10 10') == '1.5'\nassert solution('5 1') == '5.0'\nassert solution('5 9') == '5.5'\nassert solution('3') == '3.0'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"1 8\n0 0 10 10\n5 1\n5 9\n3\"\"\") == \"3.000000000\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"1 8\n0 0 10 10\n5 1\n5 9\n3\"\"\") == \"3.000000000\"\nassert solution(\"\"\"1 5\n1 1\n1 2\n3\"\"\") == \"2.66666667\"\nassert solution(\"\"\"1 6\n1 2\n0 0 2\n3\"\"\") == \"2.5000000000000001\"\nassert solution(\"\"\"1 5\n1 1\n2 2\n3\"\"\") == \"3.0\"\nassert solution(\"\"\"1 6\n1 2\n1 2\n3\"\"\") == \"2.500000000000002\""
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 8') == '3.000000000'\nassert solution('0 0 10 10') == '4.0'\nassert solution('5 1') == '4.5'\nassert solution('5 9') == '4.5'\nassert solution('3') == '0.5'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 8\") == \"3.000000000\"\nassert solution(\"0 0 10 10\") == \"3.000000000\"\nassert solution(\"5 1\") == \"3.000000000\"\nassert solution(\"5 9\") == \"3.000000000\"\nassert solution(\"3\") == \"3.000000000\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\") == \"3.000000000\"\nassert solution(\"1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n9 8\\n2 2\\n3\") == \"2.75\"\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n\"\"\") == \"3.000000000\"\n\"\"\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4') == '0.5000000000'\nassert solution('8 8') == '7.5'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(r\"\"\"\n3 1\n1 2\n2 3\n2 4\n\"\"\") == \"1\"\n\nassert solution(r\"\"\"\n5 4\n0 1 0 0\n1 2\n2 3\n2 4\n4 5\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3\n0 1 0 0\n1 2\n2 3\n2 4\n''') == '1'\nassert solution('''\n4 6\n0 1 1 0 0\n1 2 0 0 0\n2 3 1 1 1\n2 4 0 0 0\n2 5 0 0 0\n3 4 1 0 1\n''') == '2'\nassert solution('''\n4 3\n0 1 0 0\n1 2\n2 3\n2 4\n''') == '4'\nassert solution('''\n3 4\n0 1 1 0\n1 2 0 0\n2 3 1 1\n''') == '2'\nassert solution('''\n5 3\n0 0 0 0 0\n1 1 0 0 0\n2 2 0 0 0\n2 3 0 0 0\n4 4 0 0 0\n''') == '4'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4') == '1'\nassert solution('7 5') == '5'\n\n\"\"\""
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\", 'Testing'\nassert solution(\"2 3\") == \"1\", 'Testing'\nassert solution(\"0 0 1 0\") == \"2\", 'Testing'"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4') == '1'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"4 3\\n\"\n    \"0 1 0 0\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"2 4\"\n) == \"1\"\nassert solution(\n    \"10 2\\n\"\n    \"0 1\\n\"\n    \"1 0\\n\"\n    \"1 1\\n\"\n    \"1 0\\n\"\n    \"1 0\\n\"\n    \"1 0\\n\"\n    \"1 1\\n\"\n    \"1 1\\n\"\n    \"0 0\\n\"\n    \"1 0\\n\"\n    \"1 1\\n\"\n    \"0 0\\n\"\n    \"0 0\\n\"\n    \"0 0\\n\"\n    \"0 0\\n\"\n    \"1 1\"\n) == \"4\"\n\nprint(solution(\"\"))\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n0 1 0 0\n1 2\n2 3\n2 4\n''') == '1'\nassert solution('''\n4 1\n0 0\n0 1\n0 2\n0 3\n''') == '2'\nassert solution('''\n4 3\n0 1 0 0\n1 2\n2 3\n2 4\n''') == '3'\nassert solution('''\n4 2\n0 1\n0 1\n''') == '4'\nassert solution('''\n4 1\n0 0\n1 1\n0 2\n0 3\n''') == '4'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 3\n0 1 0 0\n1 2\n2 3\n2 4''') == \"1\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2\\n') == '6.283185'\nassert solution('5 5\\n0 0\\n0 1\\n1 0\\n0 1\\n1 0\\n0 2\\n0 3\\n1 2\\n1 3\\n1 4\\n0 5\\n0 5\\n') == '1.824719'\n\nNote:\n\nThe input graph will be Eulerian. In other words, the edges of the graph will form an Eulerian circuit.\nYou can assume that all of the edges of the graph are directed.\nIn any case, you are not allowed to take the time to check for the property of Euler's formula.\n'''\n\nimport math\nimport re\nimport os\nimport sys\nimport heapq\n\nclass Graph():\n    def __init__(self):\n        self.graph = {}\n    \n    def addEdge(self,u,v):\n        if u in self.graph:\n            self.graph[u].append(v)\n        else:\n            self.graph[u] = []\n            self.graph[u].append(v)\n            \n        if v in self.graph:\n            self.graph[v].append(u)\n        else:\n            self.graph[v] = []\n            self.graph[v].append(u)\n            \n    def bfs(self,s):\n        visited = []\n        queue = []\n        queue.append(s)\n        visited.append(s)\n        while queue:\n            s = queue.pop(0)\n            for i in self.graph[s]:\n                if i not in visited:\n                    queue.append(i)\n                    visited.append(i)\n        return visited\n    \n    def top_sort(self,s,visited):\n        top = []\n        for i in self.graph[s]:\n            if i not in visited:\n                top.append(i)\n        return top + self.top_sort(visited)\n    \n    def top_sort_util(self,visited,s):\n        visited[s] = 1\n        top = []\n        for i in self.graph[s]:\n            if i not in visited:\n                top.append(i)\n                top = top + self.top_sort_util(visited,i)\n        return top + self.top_sort_util(visited,s)\n    \n    def top_sort_2(self, s):\n        visited = [0]*(len(self.graph)+1)\n        return self.top_sort_util(visited,s)\n    \n    def is_eulerian(self):\n        if len(self.graph)%2==1:\n            return False\n        n = len(self.graph)\n        visited = []\n        top = []\n        for i in self.graph[0]:\n            if i not in visited:\n                top.append(i)\n        for i in range(1,n):\n            if len(top)==0:\n                return False\n            top = self.top_sort_2(top[0])\n            visited.append(top.pop(0))\n            if len(top)==0:\n                return False\n            top = self.top_sort_2(top[0])\n            visited.append(top.pop(0))\n        return True"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n0 1\\n0 1\\n') == '6.283185'\nassert solution('2 3\\n0 0\\n0 1\\n1 0\\n0 2\\n1 2\\n') == '1.5707963267948966'\nassert solution('3 4\\n0 0\\n0 1\\n1 0\\n0 1\\n1 1\\n') == '1.5707963267949016'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '6.283185'\nassert solution('5 3') == '0.5708'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '6.283185'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2\n''') == '6.283185'\n\nassert solution('''\n3\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2\n''') == '0.000001'\n\nassert solution('''\n2\n0 1\n0 1\n''') == '0'\n\nassert solution('''\n3\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2\n''') == '6.283185'\n\nassert solution('''\n4\n0 0\n0 1\n0 2\n1 2\n0 3\n1 3\n''') == '0.000001'"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '6.283185'\nassert solution('2 3') == '0.0'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n1 0\n1 0\n''') == '6.283185'\n\nassert solution('''\n5\n0 0\n0 1\n1 0\n1 1\n1 2\n2 0\n2 1\nSample Output:\n22.8571429\n''') == '22.8571429'\n\nassert solution('''\n3\n0 0\n0 1\n1 0\nSample Output:\n4.41176471\n''') == '4.41176471'\n\nassert solution('''\n2\n0 0\n1 1\nSample Output:\n-1.5707963\n''') == '-1.5707963'\n\nassert solution('''\n1\n1 0\nSample Output:\n0.0\n''') == '0.0'"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"6.283185\""
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '6.283185'\nassert solution('4 2') == '0.78539816'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'\nassert solution('1\\n2\\n0\\n1\\n2\\n') == '0.0'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 2 3\n1 2 3''') == '1 2 3 1 2 3'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1 2'\nassert solution('5') == '1 2 3 4 5'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1 2 3'\n\nSample Input 2:\n5\nSample Output:\n10 9 8 7 6\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 2 3 4\"\nassert solution(\"5\") == \"1 2 3 4 5\"\nassert solution(\"6\") == \"1 2 3 4 5 6\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '1 2 3'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '1 2 3'\nassert solution('2') == '1 2'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"10\") == \"1 2 4 5 7 8 9 10\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1\n2 3\n4 5''') == \"1 2 3 4 5\"\nassert solution('''6\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14''') == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14\""
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    1\n   / \\\n  2   3\n /   / \\\n4   5   6\n''') == '1 2 3 4 5 6'\n\nassert solution('''\n    2\n   / \\\n  1   3\n /   / \\\n4   5   6\n''') == '1 2 4 5 3 6'\n\nassert solution('''\n    5\n   / \\\n  4   6\n /   / \\\n3   2   1\n''') == '1 2 3 4 5 6'"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 2 3 4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\n\nassert solution('''\n4 2\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\n\nassert solution('''\n4 1\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\n\nassert solution('''\n4 3\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\nassert solution('''\n4 4\n1 3\n1 4\n2 4\n3 4\n''') == '1 3 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4') == '1'\nassert solution('5 5') == '2'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 4\n1 2\n1 3\n2 4\n3 4\n\"\"\") == \"1 2 3 4\"\n\nassert solution(\"\"\"\n3 2\n1 3\n1 4\n\"\"\") == \"2 3 4\"\n\nassert solution(\"\"\"\n4 4\n1 2\n1 3\n2 4\n3 4\n\"\"\") == \"1 2 3 4\"\n\nassert solution(\"\"\"\n5 5\n1 2\n1 3\n2 4\n3 4\n4 5\n\"\"\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n1 2\n1 3\n2 4\n3 4\n\"\"\") == \"1 2 3 4\"\n\nassert solution(\"\"\"\n5\n1 2\n1 3\n2 4\n3 4\n\"\"\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n1 3\\n2 4\\n3 4') == '1 2 3 4'\nassert solution('3 4\\n3 2\\n3 1\\n1 2') == '1 2 3'\nassert solution('1 2\\n2 3\\n4 5') == '1 2'\nassert solution('3 4\\n4 3\\n1 2\\n2 3') == ''\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\n\nassert solution('''\n2 4\n3 5\n1 2\n2 5\n''') == '1 2 3 4 5'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 7\n1 2\n1 3\n2 4\n3 4\n3 5\n''') == '1 2 3 4 5', 'First Test'\nassert solution('''\n5 7\n1 2\n1 3\n2 4\n3 4\n3 5\n''') == '3 5 1 2 4', 'Second Test'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n1 2\") == \"1\"\nassert solution(\"3 2\\n1 2\\n3 1\") == \"2\"\nassert solution(\"4 5\\n1 2\\n3 2\\n4 1\") == \"3\"\nassert solution(\"5 6\\n1 2\\n3 2\\n4 2\\n5 1\") == \"4\"\nassert solution(\"7 8\\n1 2\\n3 2\\n4 2\\n5 2\\n6 1\") == \"5\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n1 2\") == \"1\"\nassert solution(\"2 3\\n1 2\\n3 2\") == \"1\"\nassert solution(\"2 1\\n1 2\\n2 1\") == \"2\""
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1\\n1 2\\n') == '1'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n1 2\n1 3\n2 4\n3 4''') == \"1\"\nassert solution('''4\n1 2\n1 3\n2 4\n3 4''') == \"2\"\nassert solution('''4\n1 2\n1 3\n2 4\n3 4''') == \"1\"\nassert solution('''5\n1 2\n1 3\n1 4\n2 4\n2 3\n3 4''') == \"2\"\nassert solution('''4\n1 2\n1 3\n2 4\n3 4''') == \"2\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n1 2\n2 1\n3 4\n3 4\nSample Output:\n2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n1 2\") == \"1\"\nassert solution(\"3 10\\n1 2 3 5 6\\n10 8 5 2\\n5 4\\n6 2\\n8\\n\") == \"2\""
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '1'"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 2') == '1'\nassert solution('2 5\\n1 2\\n3 4\\n5 6\\n7 8') == '2'"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '45'\n\nprint(solution('100000'))"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n2\n2''') == \"45\"\nassert solution('''1\n3\n2''') == \"60\"\nassert solution('''1\n3\n3''') == \"60\"\nassert solution('''2\n2\n2''') == \"0\"\nassert solution('''1\n1\n1''') == \"1\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0', \"error\"\nassert solution('2') == '0', \"error\"\nassert solution('3') == '1', \"error\"\nassert solution('4') == '1', \"error\"\nassert solution('5') == '1', \"error\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"45\"\nassert solution('''\n    9\n''') == \"7\"\nassert solution('''\n    5\n''') == \"3\"\n''')"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '45'\n\nassert solution('10') == '30'\n\nassert solution('100') == '630'\n\nassert solution('1000') == '18300'"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '45'\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('10') == '10'"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '45'\n\nSample Input:\n8\nSample Output:\n6\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '45'\n\n\"\"\""
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 20 20') == '4'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 20 20\n7 11 9 12 2\n''') == '4'\nassert solution('''10 1 0\n10 10 0\n10 10 0\n''') == '1'\n'''\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(r\"5 20 20\") == \"4\"\nassert solution(r\"7 11 9 12 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 20 20\\n7 11 9 12 2\") == \"4\"\nassert solution(\"3 3 10\\n2 9 8 5\") == \"3\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 20 20\\n\"\n    \"7 11 9 12 2\\n\"\n) == \"4\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n5 20 20\n7 11 9 12 2\n\"\"\") == \"4\""
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 20 20') == '4'\nassert solution('7 11 9 12 2') == '4'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 20 20') == '4'\nassert solution('7 11 9 12 2') == '2'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 20 20\n7 11 9 12 2\n''') == '4'\n\"\"\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 20 20\n7 11 9 12 2\n''') == '4'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '2'\nassert solution('kenny 1 harrypotter1') == '2'\nassert solution('charlie 1 lordoftherings') == '2'\nassert solution('jenny 1 harrypotter1') == '2'\nassert solution('laura 1 lordoftherings') == '1'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 5') == '2'\nassert solution('2 5') == '1'"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n') == '2'\nassert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n') == '2'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '2'\nassert solution('2 3') == '1'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"kenny 1 harrypotter1\") == \"1\"\nassert solution(\"charlie 1 lordoftherings\") == \"1\"\nassert solution(\"jenny 1 harrypotter1\") == \"1\"\nassert solution(\"laura 1 lordoftherings\") == \"1\"\nprint('Tests passed')"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n') == '3'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n') == '2'"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '2'\nassert solution('''\n1 4\ncharlie 1 harrypotter1\n''') == '1'\nassert solution('''\n6\ncharlie 1 harrypotter1\ncharlie 1 harrypotter1\ncharlie 1 harrypotter1\njenny 1 harrypotter1\ncharlie 1 harrypotter1\nlaura 1 harrypotter1\n''') == '3'\nassert solution('''\n1\njenny 1 harrypotter1\n''') == '1'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings') == '2'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_1()) == output_1()\nassert solution(input_2()) == output_2()\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"1\\n\"\n    \"1\\n\"\n    ) == \"1 2\"\n\nassert solution(\n    \"1\\n\"\n    \"0\\n\"\n    ) == \"1 2\"\n\nassert solution(\n    \"1\\n\"\n    \"1\\n\"\n    ) == \"1 2\"\n\nassert solution(\n    \"1\\n\"\n    \"1\\n\"\n    ) == \"1 2\"\n\nassert solution(\n    \"1\\n\"\n    \"0\\n\"\n    ) == \"1 2\""
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n01\nSample Input:\n3\n0111\nSample Output:\n2 1\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '2 1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n0 0\n1\n0\n1\n1\n1\n0\n0\n1\n1\n0\n1\n1\n0\n0\n0\n1\n1\n1\n0\n1\n0\n1\n0\n1\n1\n1\n1\n1\n1\n0\n1\n1\n0\n1\n1\n1\n0\n1\n1\n0\n0\n1\n1\n0\n0\n1\n1\n1\n1\n0\n0\n1\n0\n0\n0\n1\n1\n1\n1\n1\n1\n0\n1\n0\n0\n0\n1\n1\n1\n1\n1\n1\n1\n1\n0\n1\n1\n1\n0\n1\n1\n1\n1\n0\n0\n1\n0\n0\n0\n1\n1\n1\n0\n1\n1\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n1\n0\n1\n1\n1\n1\n0\n0\n1\n1\n1\n1\n0\n0\n0\n1\n1\n1\n1\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0\n1\n1\n1\n1\n1\n1\n1\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0\n0\n1\n1\n1\n1\n1\n0\n0\n1\n1\n1\n0\n0\n0\n0\n0\n1\n1\n1\n1\n0\n1\n1\n1\n0\n1\n0\n0\n0\n1\n0\n1\n0\n1\n1\n1\n1\n0\n1\n0\n1\n1\n1\n0\n0\n1\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n1\n1\n0\n1\n1\n0\n1\n0\n0\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n1\n0\n0\n1\n0\n1\n1\n1\n0\n0\n1\n0\n0\n0\n0\n1\n1\n0\n1\n1\n0\n0\n0\n0\n1\n1\n0\n0\n1\n1\n0\n1\n1\n1\n0\n0\n1\n1\n1\n1\n1\n0\n0\n0\n1\n1\n1\n0\n1\n1\n1\n1\n0\n0\n1\n1\n1\n1\n1\n1\n1\n0\n0\n0\n1\n1\n0\n1\n0\n1\n1\n1\n1\n1\n1\n0\n0\n1\n0\n1\n0\n0\n1\n1\n0\n0\n0\n0\n1\n0\n0\n1\n0\n0\n1\n0\n0\n0\n1\n1\n0\n1\n1\n1\n1\n1\n0\n1\n1\n1\n1\n1\n1\n1\n1\n0\n1\n1\n0\n0\n0\n0\n1\n0\n0\n0\n1\n1\n1\n1\n0\n0\n1\n0\n0\n1\n0\n1\n1\n1\n1\n1\n0\n0\n1\n0\n0\n0\n0\n0\n1\n0\n1\n0\n0\n0\n1\n0\n0\n0\n0\n0\n1\n1\n0\n1\n1\n0\n1\n0\n1\n1\n0\n0\n1\n0\n0\n1\n1\n0\n0\n1\n0\n0\n1\n0\n0\n1\n1\n1\n0\n1\n0\n1\n0\n0\n1\n1\n1\n0\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n0\n1\n0\n1\n0\n1\n0\n1\n0\n0\n0\n0\n0\n1\n0\n1\n1\n1\n0\n1\n1\n0\n1\n0\n1\n0\n1\n1\n0\n1\n1\n0\n1\n0\n1\n1\n0\n0\n1\n0\n0\n1\n1\n1\n0\n0\n0\n0\n1\n1\n1\n0\n0\n0\n1\n0\n0\n0\n0\n0\n1\n1\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n1\n1\n0\n0\n0\n1\n1\n0\n0\n1\n0\n0\n1\n1\n0\n0\n1\n0\n1\n1\n1\n0\n1\n1\n0\n1\n0\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n1\n0\n1\n0\n0\n0\n1\n1\n0\n0\n1\n1\n0\n1\n1\n1\n0\n1\n0\n0\n0\n0\n0\n1\n0\n1\n0\n0\n1\n0\n0\n1\n0\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n1\n0\n0\n0\n1\n1\n1\n0\n0\n1\n0\n0\n1\n1\n1\n0\n0\n1\n1\n0\n1\n1\n1\n0\n1\n1\n0\n0\n1\n0\n0\n1\n0\n1\n0\n1\n1\n0\n0\n1\n0\n0\n0\n1\n1\n0\n0\n1\n0\n1\n1\n1\n0\n0\n1\n0\n1\n1\n1\n0\n0\n1\n0\n1\n1\n1\n1\n1\n1\n0\n0\n1\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n0\n1\n1\n0\n0\n0\n0\n1\n0\n0\n0\n1\n1\n0\n1\n1\n0\n0\n1\n0\n0\n1\n0\n0\n1\n1\n1\n1\n0\n0\n1\n0\n1\n0\n1\n0\n0\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n00\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '2 1'"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"2 1\"\n\nassert solution(input()) == \"1\""
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '2 1'\n\"\"\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n01\") == \"2 1\"\nassert solution(\"1\\n01\\n10\") == \"2 2\"\n\"\"\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Input:\n6\n1\n5 1\n1 4\n1 2\n2 3\n2 4\n2 5\nSample Output:\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n5 6\n5 7\n5 8\n5 9\n5 10\n6 7\n6 8\n6 9\n6 10\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n\"\"\") == \"\"\"\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n5 6\n5 7\n5 8\n5 9\n5 10\n6 7\n6 8\n6 9\n6 10\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n\"\"\".strip()\n\nimport unittest\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2123\n1012\n2123\n''') == '''4 3\n2123\n1012\n2123'''\n\nassert solution('''\n3\n10 3\n2122\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n10 4\n2122\n2222\n2122\n''') == '''10 4\n2122\n2222\n2122'''"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Input:\n4\n2\n2\n2\n12\nSample Output:\n4\n2\n----\n2\n2\n''') == '2'\nassert solution('''\n4\n10\n1\n2\n12\nSample Output:\n4\n10\n----\n2\n2\n''') == '2'\nassert solution('''\n3\n1\n2\n3\nSample Output:\n3\n1\n2\n3\n''') == '1'\nassert solution('''\n3\n1\n2\n3\nSample Output:\n3\n1\n2\n3\n''') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"4 3\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n4 1\\n2123\\n2 2\\n21') == '4 3\\n2123\\n1012'\nassert solution('6\\n5 1\\n2 12\\n1 2\\n3 2\\n4 2\\n2 2') == '5 3\\n2 12\\n1111\\n2222'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n2123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\\n\") == \"4 3\\n2233\\n2233\\n1111\"\nassert solution(\"2\\n\") == \"\""
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n1\n2\n''') == '3 2'\nassert solution('''\n3\n2\n1\n''') == '3 2'\nassert solution('''\n5\n6\n3\n2\n1\n''') == '6 3'\nassert solution('''\n5\n2\n3\n1\n''') == '2 3'\nassert solution('''\n1\n4\n2\n3\n''') == '1 2'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n4 1\\n2123\\n2 2\\n21\\n10\\n2 2') == '4 3\\n2123\\n1012\\n2233\\n1111'\nassert solution('7\\n2 1\\n3 2\\n4 2\\n2 2\\n3 1\\n3 3\\n4 2') == '3 2\\n2 2\\n2 2'\nassert solution('3\\n2 1\\n3 2\\n4 2') == '2 1\\n3 2\\n4 2'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 1\") == \"4 3\"\nassert solution(\"4 1\") == \"2 123\"\nassert solution(\"10 2\") == \"10 2\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == \"4 3\"\nassert solution(\"3\") == \"3 2 1\"\nassert solution(\"2 1\") == \"1 1\"\nassert solution(\"2 1 2\") == \"1 1 2 1\"\nassert solution(\"2 2 2\") == \"2 1 1 2\"\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == 'atk'\nassert solution('15') == 'emacs xorg-x11 lisp'\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n\nlibx11\ncairo\nxlib\n\nlibfontconfig\ngdk-pixbuf-2.0\nfontconfig\n\nlibcairo\npython3.7\n\nlibatspi2\npoppler\n\nlibgegl\nlibgobject\n\nxorg-x11\nlibx11-xext\n\nxorg-x11\npango\n\nlibfontconfig\nlibgobject\n''') == \"atk xorg-x11 xorg-x11-libs freetype glib2 libjpeg pango zlib libtiff libattr gtk2 lisp freetype pcre\"\n'''\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n0\n''') == 'atk pango xorg-x11-libs freetype gtk2 libattr glib2 pcre vim-common vim-X11 gtk2 libattr libjpeg zlib atk atk pango xorg-x11-libs freetype glib2 pcre grep freetype pcre vim-common gtk2 libattr libjpeg zlib'\nprint('\u2705') if solution('''\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n''') == 'emacs lisp' else print('\u274c')\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n8\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'atk'\n'''\n5. Reverse Integer\n\nGiven a 32-bit signed integer, reverse digits of an integer.\n\nNote:\nAssume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\u2212231,  231 \u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\n\nExample 1:\n\nInput: 123\nOutput: 321\nExample 2:\n\nInput: -123\nOutput: -321\nExample 3:\n\nInput: 120\nOutput: 21\nExample 4:\n\nInput: 0\nOutput: 0\n'''\n\nclass Solution:\n    def reverse(self, x: int) -> int:\n        return int(str(x)[::-1])"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'atk pango gtk2 zlib freetype pango freemacs zlib vim-X11 vim-common pango pangocairo pangocairo-devel xorg-x11 pango-utils freetype xorg-x11-common freetype-devel pango-utils pango-apps libpango pango-apps libpangoft2 libpango-apps libpangoft2-dev libpango-apps-dev libpangoft2-devel libpango-apps-devel'\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'atk pango zlib glib2 libjpeg libattr xorg-x11 pango gtk2 freetype vim-X11 grep pcre'"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"vim-common\"\nassert solution(\"20\") == \"atk zlib libtiff libjpeg atk\"\nassert solution(\"26\") == \"atk freetype xorg-x11 libattr pango glib2 pcre\"\nassert solution(\"14\") == \"atk zlib libjpeg atk\"\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"12\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nfreetype\\n0\") == \"cannot be ordered\"\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"atk zlib gtk2 gtk3 pango glib2 lisp xorg-x11 xorg-x11-libs pcre freetype xorg-x11-libs grep vim-common vim-X11 vim-common-common vim-common-common gtk2 gtk3 glib2 gtk2 gtk3 glib2 xorg-x11 lisp pango freetype gtk3 freetype-common libattr libjpeg libattr-common libattr-common gtk2 gtk3 xorg-x11 xorg-x11-libs libtiff atk libtiff-common libtiff-common libtiff-common zlib atk zlib-common zlib-common zlib-common zlib xorg-x11-libs grep freetype glib2 libtiff libtiff-common libtiff-common libtiff-common zlib libattr libattr-common libattr-common libattr-common pango glib2 libtiff libtiff-common libtiff-common libtiff-common zlib libattr-common libattr-common libattr-common libattr-common pango glib2 libtiff libtiff-common libtiff-common libtiff-common zlib gtk2 gtk3 libtiff gtk2 gtk3 pango glib2 gtk2 gtk3 libx11-common libx11-common gtk2 gtk3 x11-common x11-common glib2 glib2 gtk2 gtk3 x11-common x11-common glib2 glib2 x11-common x11-common gtk2 gtk3 x11-common x11-common gtk2 gtk3 x11-common x11-common gtk2 gtk3 x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common gtk2 gtk3 x11-common x11-common gtk2 gtk3 x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common x11-common x11-common gtk2 gtk3 x11-common"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n''') == 'atk freetype gtk2 libattr libjpeg pango zlib xorg-x11 xorg-x11-libs pango vim-X11 vim-common grep vim-common libattr pcre libjpeg glib2 pango zlib libattr pango freetype atk libjpeg libx11 libtiff xorg-x11 freetype glib2 pango xorg-x11 pango xorg-x11-libs pango vim-common grep vim-common pcre libjpeg zlib libattr zlib pango glib2 pango xorg-x11 pango zlib x11-libs atk pango pango x11-libs freetype gtk2 pango atk pango x11-libs libx11 libtiff pango pango x11-libs x11-libs pango x11-libs pango glib2 pango x11-libs pango gtk2 pango gtk2 pango pango x11-libs pango glib2 pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs gtk2 pango gtk2 pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango x11-libs pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango gtk2 pango pango x11-libs pango gtk2 pango gtk2 pango gtk2 pango pango x11-libs pango gtk2 pango pango pango x11-libs pango gtk2 pango pango pango x11-libs pango gtk2 pango pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango gtk2 pango pango gtk2 pango gtk2 pango gtk2 pango pango pango x11-libs pango gtk2 pango gtk2 pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango gtk2 pango pango x11-libs pango gtk2 pango pango gtk2 pango pango x11-libs pango gtk2 pango pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango gtk2 pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango gtk2 pango pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 pango pango x11-libs pango gtk2 p"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('32 20') == '16'\nprint('solution() finished successfully!')\nprint('Your solution:')\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"32 20\") == \"16\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"32 20\"\n) == \"16\"\n\"\"\""
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('32 20') == '16'\n\"\"\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"32 20\") == \"16\"\nprint('\\033[92m' + \"Congratulations, have a nice day!\" + '\\033[0m')\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('32 20') == '16'\nassert solution('2344') == '8'\nassert solution('7') == '7'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n32 20\n''') == '16'\nassert solution(\n'''\n32 20\n''') == '16'\nassert solution(\n'''\n20 20\n''') == '16'\nassert solution(\n'''\n20 20\n''') == '16'\nassert solution(\n'''\n123 123\n''') == '16'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"32 20\\n\") == \"16\"\nassert solution(\"32 20\\n\") == \"16\"\nassert solution(\"32 20\\n\") == \"16\"\nassert solution(\"32 20\\n\") == \"16\""
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('100') == '16'\nassert solution('32') == '16'\nassert solution('20') == '10'\nassert solution('32') == '16'\nassert solution('20') == '10'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    32 20\n''') == '16'\nassert solution('''\n    23 52\n''') == '10'"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3 4\\n\"\n    \".#.\\n\"\n    \".#.\\n\") == \"13\"\n\nassert solution(\n    \"10 10\\n\"\n    \"#..\\n\"\n    \"###\\n\"\n    \"#.#\\n\"\n    \"..#\\n\"\n    \"###\\n\"\n    \"##.#\\n\"\n    \"##.#\\n\"\n    \"##.#\\n\"\n    \"#.#.#\") == \"23\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4\\n.###\\n...#\\n###.\\n#...\\n') == '13'\nassert solution('5 1\\n####\\n#.##\\n#.##\\n#.#.\\n##.##\\n####\\n') == '13'\nassert solution('6 8\\n.#..\\n##...\\n###..\\n##...\\n#...#\\n.##..\\n#.##.\\n') == '11'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '5'\n\nassert solution('1 2') == '1'\n\nassert solution('1 1') == '0'\n\nassert solution('2 3') == '0'\n\nassert solution('1 1') == '1'"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3\\n....\\n.#.#\\n....\\n') == '13'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n.....\n..#.#\n....\n''') == '8'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4\\n###\\n#.#') == '5 13'\nassert solution('3 3\\n###\\n#.##') == '2 2'\nassert solution('3 2\\n###\\n###') == '1 1'\nassert solution('3 3\\n##.#\\n###') == '0 1'\nassert solution('1 1\\n##.#\\n###') == '0 1'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"13\"\nassert solution(\"3 4\") == \"5 13\"\nassert solution(\"3 5\") == \"5 13\"\nassert solution(\"5 5\") == \"5 13\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 4\\n\"\n    \"....\\n\"\n    \"....\\n\") == \"5 13\"\n\nassert solution(\n    \"2 2\\n\"\n    \"....\\n\"\n    \"....\\n\") == \"2 1\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 4\n.#.\n..#\n###\n\"\"\") == \"5 13\"\n\nassert solution(\"\"\"10 5\n...##.\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 4\n....\n.#.#\n....\n.##.''') == '5 13'\nassert solution('''\n1 1\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\\n') == '5'\nassert solution('3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\\n') == '5'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n''') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n5 2 3 1\\n2 3 3 1\\n3 1 2 3\\n\") == \"5\"\nprint(solution(\"3\\n3 1? 0\\n1 2 5 1\\n2 3 3 1\\n3 1 2 3\"))\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '5'\nassert solution('3 3') == '5'\nassert solution('1 2 5 1') == '6'\nassert solution('2 3') == '5'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n''') == '5'\nassert solution('''\n2 4\n1 2 1 1\n1 3??\n''') == '0'\nassert solution('''\n2 3\n1 2??\n2 3??\n3 1??\n''') == '4'\nassert solution('''\n4 5\n1 2 5 1\n2 3 3 1\n3 1? 0\n3 2??\n''') == '2'\n''')\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n''') == '5'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n''') == '5'\n'''\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n''') == '5'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0') == '5'\nassert solution('3 3\\n5 4 7 1\\n2 3 3 1\\n3 1? 0') == '2'\n\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n2 3\n3 1\n''') == '3'\n\nassert solution('''\n2 5\n2 3 2 1\n3 1? 1\n''') == '4'\n\nassert solution('''\n5 5\n1 3 2 1\n2 3 1 1\n2 1? 1\n3 2? 0\n3 1? 1\n2 1? 1\n''') == '1'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '0'\nassert solution('2 3 0') == '1'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"0\""
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1 2\n-1 -1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2 3\n0 1\n1 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2 1\n0 0\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\n\nprint(solution())\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n-1 0\n-1 1\n0 1\n''') == '3'\nassert solution('''\n3 4\n-1 0\n-1 1\n0 2\n''') == '2'\nassert solution('''\n2 3\n-1 0\n-1 1\n0 1\n''') == '2'\nassert solution('''\n5 5\n-1 0\n-1 1\n-1 2\n-1 3\n0 4\n''') == '1'\nassert solution('''\n10 10\n-1 0\n-1 1\n-1 2\n-1 3\n-1 4\n-1 5\n-1 6\n0 7\n-1 8\n-1 9\n-1 10\n''') == '9'\n'''\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '0'\nassert solution('5 4') == '2'\n\"\"\"\n\n\nimport itertools\n\ninput_data = input().split()\n\nn = int(input_data[0])\nm = int(input_data[1])\n\ngraph = []\nfor i in range(n):\n    graph.append(list(map(int, input().split())))"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"0\"\nassert solution(\"10 3\") == \"3\"\nassert solution(\"5 3\") == \"3\"\nassert solution(\"10 10\") == \"10\"\nassert solution(\"1 10\") == \"10\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '0'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '0'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sample_input_1) == \"0\"\nassert solution(sample_input_2) == \"3\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n5\n3\n4\n5\n\"\"\") == '6'\nassert solution(\"\"\"\n2\n2\n1\n\"\"\") == '1'\nassert solution(\"\"\"\n1\n1\n\"\"\") == '1'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '6'\nassert solution('10') == '6'\nassert solution('1') == '0'\nassert solution('10') == '1'\nassert solution('10') == '2'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '2'\nassert solution('6') == '3'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n1\n1\n1''') == '6'\nassert solution('''5\n7\n7\n7\n7\n7''') == '6'\n'''\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n9 6 2 4') == '6'\nassert solution('5\\n9 1 4 4 2') == '10'\nassert solution('6\\n3 1 4 2 6') == '9'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n9 6 2 4''') == '6'\nassert solution('''2\n1 2''') == '2'\nassert solution('''1\n1 1''') == '3'\nassert solution('''4\n1 1 1''') == '4'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n4') == '6'\nassert solution('2\\n4') == '5'\nassert solution('3\\n4') == '4'\nassert solution('4\\n4') == '1'"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"6\"\nassert solution(\"9\") == \"7\"\nassert solution(\"6\") == \"7\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '3'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 1 1 3 2\n2 5 1\n''') == '2.000000'\n\n'''"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\nassert solution(\"2 5 1\") == \"1.00000\""
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('2 5 1') == '3.000000'\n\"\"\"\nimport math"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\nassert solution(\"2 5 1\") == \"1.999999\"\nassert solution(\"2 5 3\") == \"3.000000\"\nassert solution(\"2 5 2\") == \"3.000000\""
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('2 5 1') == '2.000000'\nassert solution('3 3 3 3 1 1 1 1') == '6.000000'\nassert solution('8 1 1 8 1') == '2.000000'\nassert solution('10 1 1 9 1') == '2.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('1 1 1 3 2') == '1.000000'\nassert solution('1 1 1 3 1') == '1.000000'\nassert solution('1 1 1 3 2') == '1.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('2 1 2 3 1') == '3.000000'\n\n'''"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 1 1 3 2''') == '2.000000'\nassert solution('''2 5 1''') == '1.666767'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 3 2\") == \"2.000000\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\n\nstdin = '2 1 1 3 2'\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 4\n''') == '96'\nassert solution('''\n3\n1 2\n2 3\n''') == '96'\nassert solution('''\n3\n1 2\n2 3\n''') == '0'\nassert solution('''\n3\n4 1\n2 3\n''') == '96'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([1, 2, 3, 4]) == 96\nassert solution([1, 3, 4, 2]) == 9\nassert solution([2, 1, 3, 4]) == 4\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == '96'\nassert solution('''\n6\n1 2\n3 4\n5 6\n3 1\n3 2\n1 4\n''') == '84'\nassert solution('''\n5\n1 2\n3 4\n5 6\n3 1\n3 2\n1 4\n''') == '72'\nassert solution('''\n12\n1 2\n3 4\n5 6\n1 3\n1 4\n4 5\n4 3\n1 5\n3 1\n3 2\n1 4\n3 1\n1 2\n1 4\n3 2\n1 3\n1 4\n1 5\n''') == '140'\n\nprint(solution('''\n5\n1 2\n3 4\n5 6\n3 1\n3 2\n1 4\n'''))\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '96'\nassert solution('2') == '96'\nassert solution('1') == '96'\nassert solution('4') == '96'\nassert solution('2') == '96'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '96'\nassert solution('2') == '5'\nassert solution('4') == '97'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '96'\nassert solution('10') == '1000000000000'\nassert solution('5') == '4321'\n\"\"\"\n\nn = int(input())\n\ncables = [[int(i) for i in input().split()] for _ in range(n - 1)]\n\nm = int(input())\n\ncables_new = [[int(i) for i in input().split()] for _ in range(m - 1)]\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"96\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\"\n) == \"96\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n1 2\n1 3\n1 4\nSample Input 2:\n4\n1 2\n2 3\n3 4\n1 3\nSample Output 2:\n16\n''') == '96'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"96\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"96\"\nassert solution(\"4\") == \"96\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n1 1\") == \"3\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"3\"\nassert solution(\"10\\n0 0\\n0 1\\n1 0\\n1 1\\n0 0\\n0 1\\n1 0\\n1 1\") == \"6\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n0 0\n1 1\n2 3\n3 4\n5 5''') == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"3\"\nassert solution(\"5\\n0 0\\n0 1\\n1 0\\n1 1\\n1 2\") == \"5\"\nassert solution(\"8\\n0 0\\n0 1\\n1 0\\n1 1\\n1 2\\n2 0\\n2 1\") == \"4\"\nassert solution(\"15\\n0 0\\n0 1\\n1 0\\n1 1\\n1 2\\n2 0\\n2 1\\n2 2\\n3 0\\n3 1\\n3 2\") == \"6\"\nassert solution(\"1000\\n0 0\\n0 1\\n1 0\\n1 1\\n1 2\\n2 0\\n2 1\\n2 2\\n3 0\\n3 1\\n3 2\\n4 0\\n4 1\\n4 2\\n5 0\\n5 1\\n5 2\\n6 0\\n6 1\\n6 2\\n7 0\\n7 1\\n7 2\\n8 0\\n8 1\\n8 2\\n9 0\\n9 1\\n9 2\\n10 0\\n10 1\\n10 2\\n\") == \"33\"\n\"\"\"\nimport collections\n\nclass DisjointSet():\n    def __init__(self, nums):\n        self.parent = {i:i for i in range(nums)}\n        self.rank = {i:0 for i in range(nums)}\n\n    def find(self, p):\n        if self.parent[p]!= p:\n            self.parent[p] = self.find(self.parent[p])\n        return self.parent[p]\n\n    def union(self, p, q):\n        x = self.find(p)\n        y = self.find(q)\n        if x!= y:\n            if self.rank[x] > self.rank[y]:\n                self.parent[y] = x\n            else:\n                self.parent[x] = y\n                if self.rank[x] == self.rank[y]:\n                    self.rank[y] += 1\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\"\n\nSample Input:\n5\n0 0\n0 1\n1 0\n1 1\n1 2\nSample Output:\n3\n'''"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\\n\") == \"3\""
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '3'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 5 2 5\\n3 2 1 4\\n2 1 4 1\\n') == '9'\nassert solution('2\\n1 5\\n3 2\\n2 1\\n') == '10'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3\n2 8\n3 1\n1 4\n\"\"\") == \"10 10 9\"\n\nassert solution(\"\"\"3\n3 2\n2 1\n1 3\n\"\"\") == \"10 10 9\"\n\nassert solution(\"\"\"3\n1 1\n1 1\n1 1\n\"\"\") == \"1 1 1\"\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n2 8\\n3 1\\n1 4\\n') == '10\\n10\\n9'\n\"\"\"\n\nN = int(input())\n\nA = map(int, input().split())\nB = map(int, input().split())\n\na_list = list(A)\nb_list = list(B)"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '10'\nassert solution('2 8') == '10'\nassert solution('3 1') == '9'\nassert solution('1 4') == '9'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n2 8\n3 1\n1 4\n\"\"\") == \"10 10 9\"\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"10\"\nassert solution(\"\"\"\n2\n4\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n10\n2 8\n3 1\n1 4\n\"\"\") == \"10 10 9\"\nassert solution(\"\"\"\n100\n2 8\n3 1\n1 4\n\"\"\") == \"50 50 10\"\nassert solution(\"\"\"\n1000\n2 8\n3 1\n1 4\n\"\"\") == \"100100 100 100 10\"\nassert solution(\"\"\"\n1000\n3 4\n1 2 1\n\"\"\") == \"0 0 0 0\"\nassert solution(\"\"\"\n1000\n2 4\n1 1\n\"\"\") == \"2000 2000\"\n\n'''"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 8\\n3 1\\n1 4\\n\") == \"10\\n10\\n9\""
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\n2 8\n3 1\n1 4\"\"\") == \"\"\"10\n10\n9\"\"\"[::-1]\n\nassert solution(\"\"\"3\n1 8\n3 1\n1 4\"\"\") == \"\"\"10\n10\n9\"\"\"[::-1]\n\nassert solution(\"\"\"3\n1 1\n1 1\n1 4\"\"\") == \"\"\"10\n10\n9\"\"\"[::-1]\n\nassert solution(\"\"\"2\n2 2\n3 4\"\"\") == \"\"\"5\n3\n2\"\"\"[::-1]\n\nassert solution(\"\"\"2\n4 3\n2 8\n3 1\n1 4\"\"\") == \"\"\"7\n7\n6\"\"\"[::-1]"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3 2') == '10'\nassert solution('4\\n3 4 5 6') == '18'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == 'IMPOSSIBLE'\nassert solution('5 5') == '4'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4\\n####\\n#JF#\\n#..#\\n#..#') == 'IMPOSSIBLE'\nassert solution('5 5\\n###########\\n#.#.#.#.#\\n#.#.#.###\\n#.#.##.##\\n#.###.###\\n#.####.#\\n###########\\n###########') == '2'\nassert solution('2 2\\n###\\n###') == '0'\nassert solution('2 2\\n#####\\n#.#\\n#.#\\n###') == '0'\nassert solution('4 4\\n#####\\n#####\\n#####\\n#####') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 4\n###\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n####\\n#JF#\\n#..#\\n#..#\\n\") == \"IMPOSSIBLE\"\nassert solution(\"3 5\\n#####\\n###.\\n##J\\n###.\\n###.\\n\") == \"0\"\nassert solution(\"5 5\\n#FFF\\n#.F\\n.#J\\n.FF\\n.#J\\n\") == \"3\"\nassert solution(\"2 5\\n###.\\n###.\\n#.J\\n###.\\n###.\\n\") == \"2\"\nassert solution(\"2 3\\n#FF\\n.F\\n.F\\n\") == \"1\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4\\n#####\\n#JF#\\n#####') == 'IMPOSSIBLE'\nassert solution('3 4\\n#####\\n#JF#\\n#####') == '3'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2\\n.#') == 'IMPOSSIBLE'\nassert solution('2 2\\n.J\\n.#') == '3'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n#####\\n#JF#\\n#..#\\n#..#\") == \"IMPOSSIBLE\"\nassert solution(\"5 5\\n#####\\n#JF#\\n#..#\\n#..#\") == \"3\"\nassert solution(\"4 4\\n#####\\n#JF#\\n#..#\\n#..#\") == \"2\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4\n####\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n#JF#\\n#..#\\n#..#\\n\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#..#\") == \"IMPOSSIBLE\"\nassert solution(\"4 4\\n#######\\n#JF#..#\\n#..#.#\\n#..#.J\\n#..#.J#\\n#.F#.#\\n#.##.#\\n#######\") == \"2\"\nassert solution(\"3 3\\n#######\\n#.J.J#\\n#######\") == \"1\"\n\nassert solution(\"2 2\\n#######\\n#F#.#\\n#.F#.J\\n#######\") == \"IMPOSSIBLE\"\nassert solution(\"2 2\\n#######\\n#.F#.J\\n#######\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n2 2 2\n2\n1 1\n\"\"\") == \"0.3333333333\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 2') == '0.3333333333'"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2 2\\n2\\n1 1') == '0.3333333333'\nassert solution('3 2 2\\n2\\n2 1') == '0.3333333333'\nassert solution('3 2 2\\n2\\n1 2') == '0.3333333333'\nassert solution('1 1 2\\n1 1\\n1 2') == '0.3333333333'\nassert solution('1 1 1\\n2\\n1 1\\n1 2') == '0.3333333333'\n\nn, m, d = map(int, input().split())\narr = list(map(int, input().split()))"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 2 2\n2\n1 1\nSample Input 2:\n10 50 100\n1 1\nSample Output 2:\n0.0131578947368421\n\"\"\") == \"0.0131578947368421\"\nprint(\"All test cases passed!\")\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2\\n2\") == '0.3333333333'\nassert solution(\"1 2 2\\n2 2\\n1 2\") == '0.3333333333'\nassert solution(\"1 2 2\\n2 2\\n2 1\") == '0.5555555556'\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2 2\n2\n1 1\n''') == '0.3333333333'"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 2\\n2\\n1 1') == '0.3333333333'\nassert solution('3 6 3\\n7 6 2\\n3 4 1\\n4 1 2\\n1 2 3\\n5 2 1\\n1 4 4\\n6 4 5\\n1 2 5\\n1 2 4\\n2 4 3\\n5 2 3\\n1 3 2\\n3 4 2\\n3 2 4\\n1 2 2\\n3 2 1\\n2 4 2\\n4 5 3\\n1 4 5\\n1 3 5\\n2 1 1\\n6 1 1\\n5 2 1\\n3 4 3\\n1 5 3\\n1 4 5\\n1 2 5\\n2 1 5\\n1 4 2\\n2 5 3\\n2 4 4\\n2 2 2\\n1 1 1\\n3 3 3\\n1 2 3\\n1 3 3\\n1 2 2\\n2 1 1\\n1 3 2\\n1 2 1\\n1 1 2\\n2 1 3\\n1 3 3\\n2 2 2\\n3 2 2\\n3 2 3\\n1 4 4\\n2 4 4\\n2 2 4\\n4 1 5\\n1 2 5\\n1 3 5\\n2 3 4\\n3 4 4\\n2 1 5\\n1 3 5\\n1 3 4\\n1 3 3\\n1 2 5\\n2 2 5\\n2 2 3\\n1 3 4\\n1 3 2\\n1 1 4\\n2 1 4\\n3 1 5\\n4 1 4\\n2 1 4\\n3 2 2\\n3 2 3\\n2 2 2\\n2 1 4\\n4 2 4\\n1 5 5\\n1 4 5\\n1 4 1\\n1 2 5\\n2 4 4\\n1 2 5\\n3 4 4\\n2 4 4\\n2 4 4\\n4 5 2\\n1 4 2\\n2 5 4\\n1 4 5\\n1 2 5\\n1 4 5\\n2 4 4\\n2 4 4\\n1 1 5\\n1 3 3\\n3 4 4\\n1 2 3\\n3 5 2\\n3 5 3\\n2 4 4\\n4 4 5\\n1 2 4\\n2 3 4\\n2 5 4\\n1 4 4\\n1 1 4\\n1 2 4\\n1 1 2\\n1 2 4\\n1 3 4\\n1 1 5\\n1 1 4\\n2 5 4\\n3 2 4\\n1 4 2\\n2 1 5\\n2 4 5\\n1 2 5\\n1 4 4\\n2 4 2\\n3 4 4\\n3 1 3\\n3 4 3\\n3 3 3\\n1 4 4\\n1 4 4\\n1 2 4\\n1 1 3\\n1 4 5\\n1 3 4\\n2 3 4\\n1 5 5\\n1 2 4\\n1 4 5\\n3 2 5\\n1 1 5\\n1 3 5\\n2 3 5\\n3 4 3\\n1 2 5\\n1 5 5\\n1 5 4\\n1 1 5\\n2 5 2\\n3 2 4\\n1 3 3\\n2 2 3\\n1 3 3\\n2 1 4\\n1 3 4\\n1 1 4\\n2 2 4\\n2 1 4\\n1 2 5\\n2 2 4\\n1 4 5\\n1 5 2\\n1 5 4\\n1 4 4\\n1 3 4\\n3 2 4\\n3 3 3\\n3 2 4\\n3 2 4\\n2 2 4\\n1 4 5\\n1 3 5\\n2 5 4\\n3 2 4\\n1 5 4\\n3 4 4\\n3 4 4\\n1 4 3\\n2 3 4\\n1 4 5\\n1 4 3\\n1 4 3\\n1 4 4\\n2 2 5\\n1 4 4\\n1 4 5\\n1 4 4\\n1 2 5\\n2 4 4\\n1 2 5\\n1 5 4\\n1 4 4\\n2 4 5\\n1 4 5\\n1 5 5\\n1 4 4\\n1 4 5\\n2 4 5\\n2 4 4\\n1 4 4\\n2 4 4\\n1 4 4\\n1 4 5\\n1 4 5\\n1 3 5\\n1 4 4\\n2 4 4\\n1 5 5\\n1 4 5\\n1 2 5\\n1 5 5\\n2 4 4\\n1 4 4\\n1 2 5\\n2 1 5\\n1 5 4\\n1 5 5\\n1 5 4\\n1 2 5\\n1 5 5\\n1 2 5\\n1 5 5\\n1 5 5\\n1 4 4\\n2 4 4\\n1 4 5\\n2 1 5\\n1 1 5\\n2 3 4\\n1 2 5\\n1 2 5\\n1 5 4\\n1 5 4\\n2 3 4\\n1 5 4\\n1 4 5\\n1 5 5\\n1 5 5\\n2 1 4\\n1 4 4\\n1 4 4\\n1 4 5\\n1 2 5\\n2 1 4\\n1 4 5\\n1 3 5\\n1 5 5\\n2 4 4\\n1 4 5\\n2 5 5\\n1 5 5\\n2 4 4\\n1 5 5\\n1 4 5\\n1 4 5\\n1 4 5\\n1 4 5\\n1 4 5\\n1 4 5\\n1 4 5\\n1 4 5\\n1 5 5\\n1 4 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 4 5\\n1 5 5\\n1 4 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 4 5\\n1 5 5\\n1 4 5\\n1 5 5\\n1 4 5\\n1 4 5\\n1 5 5\\n1 4 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 4 5\\n1 5 5\\n1 4 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 4 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5 5\\n1 5"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2 2\n2\n1 1\n''') == '0.3333333333'\nassert solution('''\n3\n1 1 1\n3\n''') == '1.0'\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 2') == '0.3333333333'\nassert solution('1 2 3') == '0.1428571429'\nassert solution('1 1 3') == '0.25'\nassert solution('10 10 10') == '0.11111111111'\nassert solution('1 1 0') == '0.0'\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 2') == '0.3333333333'\nassert solution('1 1 1') == '1.0'\n\"\"\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n*''') == '1023'\nassert solution('''\n1\n1''') == '1022'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n111') == '1111'"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1101'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n1\n1''') == '1'\nassert solution('''\n10\n1*1''') == '1023'\nassert solution('''\n10\n1*1*1''') == '1024'\nassert solution('''\n10\n1*1*1*1''') == '1025'\nassert solution('''\n10\n1*1*1*1*1''') == '1026'\n''')\n\n\"\"\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1023'\nassert solution('11') == '1023'"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1023\"\nassert solution(\"1010111\") == \"1111\"\nassert solution(\"0100010\") == \"0\""
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n''') == '1023'\nprint(solution('''\n10\n101\n11\n'''))"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1023'\nassert solution('11') == '2'\nassert solution('1*1') == '2'\nassert solution('1*11') == '2'\nassert solution('1*111') == '2'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n101\n\"\"\") == \"1023\"\nassert solution(\"\"\"\n50\n
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n20\n1*,1*\n''') == '12'\n\nassert solution('''\n20\n1*,11*\n''') == '12321'\n\nassert solution('''\n20\n1*,11*\n''') == '12321'\n\nassert solution('''\n20\n1*,11*\n''') == '12321'\n\nassert solution('''\n20\n1*,1*,11*\n''') == '2311'"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"6\"\nassert solution(\"2 1\") == \"5\"\nassert solution(\"3 5\") == \"13\""
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '6'\nassert solution('2 1') == '6'\nassert solution('4 4') == '10'\n\n\"\"\""
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == '6'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '6'\nassert solution('3 3') == '12'\nassert solution('5 3') == '13'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '6'\n\"\"\"\n\nstdin = input()"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"6\"\nassert solution(\"2 2\") == \"6\"\nassert solution(\"5 5\") == \"15\"\nassert solution(\"0 2\") == \"2\"\nassert solution(\"2 2\") == \"6\"\n\"\"\"\nx,y = map(int,input().split())\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"10 5\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"6 6\") == \"0\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2\n0 1\n0 2\n1 2\n0 1''') == '6'\nprint(solution('''2 2\n0 1\n0 2\n1 2\n0 1'''))"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"6\"\nassert solution(\"2 2\") == \"6\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '6'\nassert solution('1 1') == '2'\nassert solution('2 2') == '1'\nassert solution('3 3') == '4'\nassert solution('0 0') == '0'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1000 2000 7\n100''') == '2930'\nassert solution('''1000 2000 7\n100\n480\n500\n550\n1000''') == 'Impossible'\nassert solution('''1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500''') == 'Impossible'\nassert solution('''1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500''') == 'Impossible'\nassert solution('''1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n900''') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\\n\") == \"2930\"\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\\n\") == \"Impossible\"\nassert solution(\"1000 2000 7\\n1\\n1\\n1\\n1\\n1\\n1\\n\") == \"Impossible\"\nassert solution(\"1000 2000 7\\n1\\n1\\n1\\n1\\n1\\n1\\n\") == \"Impossible\"\nassert solution(\"1000 2000 7\\n10000\\n10000\\n10000\\n10000\\n10000\\n10000\\n\") == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 20 30 40 50 60 70 80 90 100\n10''') == 'Impossible', \"Should be Impossible\"\nassert solution('''\n10 20 30 40 50 60 70 80 90 100\n10''') == '2930', \"Should be 2930\"\n'''"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n7\\n100\\n480\\n500\\n550\\n1000\\n1500\\n') == '2930'\nassert solution('1\\n1000\\n100\\n') == 'Impossible'"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == '2930'\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible'\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible'\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible'\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == '2930'\n\nassert solution('''\n3000 7000 3100\n400\n450\n500\n550\n1000\n1400\n1500\n''') == 'Impossible'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible'"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '2930'\nassert solution('0 0 0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == 'Impossible'\nassert solution('1000 2000 7\\n100000000000\\n100000000000\\n100000000000\\n100000000000\\n100000000000\\n100000000000\\n100000000000') == 'Impossible'\nassert solution('1000 2000 7\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == 'Impossible'\nassert solution('1000 2000 7\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"Impossible\"\nassert solution(\"1000 2000 7\\n10000\\n10000\\n10000\\n10000\\n10000\\n10000\") == \"Impossible\"\nassert solution(\"1000 2000 7\\n1000\\n1000\\n1000\\n1000\\n1000\\n1000\") == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500''') == '2930'\nassert solution('''10 20 7\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10''') == 'Impossible'\nassert solution('''200 1000 7\n100\n480\n500\n550\n1000\n1400\n1500\nSample Output:\n2930\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '2930'\nprint(solution(*(map(int, input().split()))))\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 3\n0\n0\n1\n''') == '2'\nassert solution('''\n4 5 6\n0\n0\n1\n''') == '3'\nassert solution('''\n7 8 9\n0\n0\n1\n''') == '4'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n0\\n0\\n1\") == \"2\""
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '2'"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == '2'\nassert solution(\"3 5 1 2\") == '3'\nassert solution(\"3 3 3\") == '3'\nassert solution(\"1 3 3 2 1\") == '1'\nassert solution(\"1 1 1 2 2 1\") == '0'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('1 2 1') == '2'\nassert solution('1 1 3') == '1'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"2\""
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n    1 2 3\n    0\n    0\n    1\n    \"\"\"\n) == \"2\"\nassert solution(\n    \"\"\"\n    2\n    1\n    2\n    1\n    \"\"\"\n) == \"1\"\nassert solution(\n    \"\"\"\n    5\n    1\n    5\n    0\n    4\n    3\n    \"\"\"\n) == \"0\"\n\nfrom typing import Tuple\n\nimport pytest\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n0 2 1\n1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('1 2 3 1') == '2'\nassert solution('10 1 10 1') == '4'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('1 2 4') == '1'\nassert solution('1 2 5') == '0'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 2\\n-1 -2 -1\\n5 4 -5\"\n) == \"10\"\nassert solution(\n    \"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\"\n) == \"15\"\nassert solution(\n    \"1 1\\n-2 -2\\n1 2\"\n) == \"4\"\nassert solution(\n    \"1 1\\n-2 -2\\n1 1\"\n) == \"0\"\nassert solution(\n    \"3 3\\n1 1\\n3 3\\n1 1\"\n) == \"0\""
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"10\""
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\") == \"10\"\n\nassert solution(\"4 3\\n-4 -2 -5\\n-5 -1 -3\\n0 -4 -4\\n-2 -4 -1\") == \"10\"\n\nassert solution(\"4 3\\n-2 1 -5\\n-1 2 -3\\n0 -4 -4\\n-4 -2 -1\") == \"10\"\n\nassert solution(\"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\") == \"10\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 2') == '8'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '10'\nassert solution('''\n2 2\n0 0\n1 1\n''') == '9'\nassert solution('''\n3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n0 0\nSample Output:\n''') == '5'\nassert solution('''\n2 2\n0 0\n1 1\n''') == '5'\nassert solution('''\n4 4\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '5'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\\n') == '10'\n\nassert solution('3\\n3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\\n') == '12'\n\nassert solution('2\\n4\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\\n') == '16'\n\nassert solution('1\\n3\\n2 2\\n1 1\\n5 4 -5\\n2 2\\n') == '15'\n\"\"\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '10'\nassert solution('3 4') == '6'\nassert solution('5 3') == '17'\nassert solution('5 5') == '59'\nassert solution('3 3') == '6'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '10'\nassert solution('5 4 -5') == '20'\nassert solution('2 2') == '0'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '10'\nassert solution('10 10') == '50'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 5\n-10 -10\n-9 -4\n3 4\n-5 1''') == '120'\nassert solution('''4 4\n-5 1\n-5 3\n1 1\n-4 -1''') == '120'\nassert solution('''1 1\n-5 1\n-1 1''') == '0'\nassert solution('''3 2\n-2 -1\n-1 -3\n-4 -5\n-3 -4\n-1 -2\n-2 -1\n-4 -5\n-1 -2\n-3 -5\n-4 -5\n-1 -2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\nassert solution('''\n3 3\n1 2 1000\n2 3 1000\n4 5 500\n1\n1 4 300\n3 5 300\n''') == '3100'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2\n1 2 1000\n2 3 1000\n4 5 500\n2''') == '3100'\nassert solution('''4 2\n1 2 1000\n2 3 1000\n4 5 500\n2''') == '2000'\nassert solution('''7 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\nSample Output:\n3200\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\") == \"3100\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300''') == '3100'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '2 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300') == '3100'\nassert solution(\n    '8 7\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 6 300\\n3 5 300') == '42000'\nassert solution(\n    '10 7\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 6 300\\n3 5 300') == '132000'\nassert solution(\n    '11 7\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 6 300\\n3 5 300') == '122000'\nassert solution(\n    '12 7\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 6 300\\n3 5 300') == '132000'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '3100'\nassert solution('10 2') == '3000'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"3100\"\n'''\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3100\"\nassert solution(\"1 2 1000\\n2 3 1000\\n4 5 500\\n2\") == \"3100\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1\\n0 1') == '0'\nassert solution('3 3\\n1 1 2\\n1 2 3\\n2 1') == '2'\nassert solution('3 4\\n0 2 0\\n0 1 2\\n1 2 3') == '1'"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '1'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 2\n0 1\n0 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1\\n0 1\\n') == '0'\nassert solution('3 1\\n0 1 1\\n') == '1'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"3 1 1\") == \"1\"\nassert solution(\"3 1 2\") == \"2\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == '0'"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n0 1\") == \"0\"\nassert solution(\"3 2\\n0 1 2\") == \"2\"\nassert solution(\"3 2\\n1 2 1\") == \"1\"\nassert solution(\"3 3\\n1 2 1 2\") == \"1\"\nassert solution(\"4 3\\n0 2 1 1\\n1 3 1 1\") == \"2\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 1\n0 1\n''') == '0'\n\nassert solution('''\n3 1\n1 2\n0 1\n''') == '1'\n\nassert solution('''\n4 1\n0 1\n1 2\n1 3\n0 4\n''') == '1'\n\nassert solution('''\n4 1\n0 1\n1 2\n1 3\n1 4\n''') == '2'\n\nassert solution('''\n4 1\n0 1\n1 2\n1 3\n1 4\n2 5\n0 6\n''') == '3'"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 1\n0 1\n''') == '0'\n\nassert solution('''\n3 4\n0 1 1\n0 2 3\n0 3 4\n''') == '4'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 10\") == \"10\"\nassert solution(\"100000 100000\") == \"1\""
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(None) == \"\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"9 10\") == \"10\"\nassert solution(\"1 9\") == \"10\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 10') == '10'\nassert solution('2 10') == '1'\nassert solution('3 5') == '4'\nassert solution('5 5') == '3'\nassert solution('1 1') == '2'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 5') == '0'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 100') == '99'"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 10') == '10'\nassert solution('5 7') == '6'\n\"\"\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 10\") == \"10\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 100000\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 10''') == '10'\nassert solution('''1 9''') == '9'\nassert solution('''2 3''') == '3'\nassert solution('''3 1''') == '1'\nassert solution('''3 2''') == '2'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 2') == '0'\nassert solution('1 3') == '2'\nassert solution('1 4') == '1'\nassert solution('2 3') == '1'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 2') == '2'\nassert solution('1 3') == '0'\nassert solution('1 5') == '1'\nassert solution('1 6') == '0'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(None) == 0\nassert solution('3') == 3\nassert solution('4') == 0\nassert solution('-1 1') == 0\nassert solution('0 0') == 1\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n0 0\\n1 0\\n0 1\\n1 1\\n') == 0\nassert solution('2\\n0 0\\n1 0\\n0 1\\n1 1\\n') == 2\nassert solution('3\\n0 0\\n1 0\\n0 1\\n1 1\\n') == 0\nassert solution('4\\n0 0\\n1 0\\n0 1\\n1 1\\n') == 2\nassert solution('5\\n0 0\\n1 0\\n0 1\\n1 1\\n') == 2\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n0 0\n1000 0\n0 1000\n''') == \"0\"\nassert solution('''\n5\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == \"0\"\nassert solution('''\n100\n0 0\n200 0\n0 0\n0 0\n0 0\n''') == \"0\"\nassert solution('''\n100\n0 0\n200 0\n200 0\n0 0\n0 0\n''') == \"0\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '0'\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0 0\\n1000 0\") == '0'\nassert solution(\"4\\n0 0\\n1000 0\\n0 1000\\n1000 1000\") == '0'\nassert solution(\"8\\n0 0\\n1000 0\\n0 1000\\n1000 1000\\n0 2000\\n0 1000\\n1000 1000\") == '2'\nassert solution(\"6\\n0 0\\n1000 0\\n0 1000\\n1000 1000\\n1000 2000\\n0 2000\\n0 1000\\n1000 1000\") == '1'\nassert solution(\"8\\n0 0\\n1000 0\\n0 1000\\n1000 1000\\n0 2000\\n0 1000\\n1000 1000\") == '0'"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('1') == '2'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '0'\n\"\"\""
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '0'\nassert solution('2\\n0 0\\n0 0\\n0 0\\n0 0') == '1'\nassert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000\\n0 0') == '2'\nassert solution('6\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0') == '3'\nassert solution('20\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n-1000 -2000\n2000 -1000\n3000 -2000\n\"\"\") == \"0\"\nassert solution(\"\"\"\n6\n-2000 -2000\n2000 -2000\n2000 2000\n2000 2000\n2000 2000\n-2000 -2000\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n2\n-10000 -2000\n2000 -10000\n3000 -2000\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n0 0\n1000 0\n0 1000\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5\n-2000 -2000\n2000 -2000\n2000 2000\n2000 2000\n2000 2000\n-2000 -2000\n\"\"\") == \"1\""
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1\\n0 1 0.5') == '0.500000000 1.000000000'\nassert solution('2 1\\n1 1 1.0') == '0.500000000 1.000000000'\nassert solution('2 1\\n0 0 0.5') == '0.500000000 1.000000000'\nassert solution('2 1\\n1 1 0.5') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1\\n0 1 0.5\\n') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n0 1 0.5\n''') == '0.500000000 1.000000000'\nprint(solution('''\n2 1\n0 1 0.5\n0 0 0.5\n''')) == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 1\n0 0 0.5\n0 1 0.5\n0 2 0.5\n0 3 0.5\n''') == '0.500000000 1.000000000'\nassert solution('''\n4 1\n0 1 0.5\n0 2 0.5\n0 3 0.5\n''') == '0.500000000 0.500000000'\nassert solution('''\n2 2\n0 0 0.5\n0 1 0.5\n0 2 0.5\n''') == '0.500000000 0.500000000'\nassert solution('''\n4 2\n0 0 0.5\n0 1 0.5\n0 2 0.5\n0 3 0.5\n''') == '0.500000000 0.500000000'\nassert solution('''\n5 2\n0 0 0.5\n0 1 0.5\n0 2 0.5\n0 3 0.5\n0 4 0.5\n''') == '0.500000000 0.500000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 1\n0 1 0.5\n0 2 0.4\n0 3 0.6\n''') == '1.000000000 1.000000000'\n\nassert solution('''\n4 3\n0 1 0.5 0.4\n1 2 0.3 0.4\n0 2 0.6 0.3\n0 3 0.4 0.3\n''') == '0.600000000 0.600000000 0.600000000 0.600000000'\n\nassert solution('''\n7 1\n0 1 0.5 0.4 0.3 0.6 0.4\n1 2 0.3 0.4 0.6 0.4 0.3\n0 2 0.6 0.3 0.4 0.3 0.6\n0 3 0.6 0.3 0.4 0.3 0.6\n0 4 0.6 0.3 0.4 0.3 0.6\n0 5 0.6 0.3 0.4 0.3 0.6\n0 6 0.6 0.3 0.4 0.3 0.6\n''') == '0.600000000 0.600000000 0.600000000 0.600000000 0.600000000 0.600000000 0.600000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n0 1 0.5\") == \"0.500000000 1.000000000\"\nprint(solution(input()))\n'''"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1\\n0 1 0.5') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"0.500000000 1.000000000\"\nassert solution(\"3 1\") == \"0.9999999999 1.000000000\"\nassert solution(\"4 1\") == \"0.9999999999 1.000000000\"\nassert solution(\"4 1\") == \"0.9999999999 1.000000000\"\nassert solution(\"5 1\") == \"0.9999999999 1.000000000\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 1\") == \"1\"\nassert solution(\"5\\n1 1\\n3 2\\n5 5\") == \"5\"\nassert solution(\"6\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\\n7 10\") == \"7\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10\n''') == '7'\nassert solution('''\n3\n0 0\n0 0\n''') == '0'\n\n'''\nimport math\n\nn = int(input())\n\ncities = {}\n\nfor i in range(n):\n    x, y = input().split()\n    x = int(x)\n    y = int(y)\n    if (x, y) in cities:\n        cities[(x, y)] += 1\n    else:\n        cities[(x, y)] = 1\n\ndelays = {}\nfor x, y in cities:\n    if (x, y) in delays:\n        delays[(x, y)] += cities[(x, y)]\n    else:\n        delays[(x, y)] = cities[(x, y)]\n\nmax_x = max_y = 0\nmax_time = 0\nfor x, y in delays:\n    if x > max_x:\n        max_x = x\n    if y > max_y:\n        max_y = y\n    if delays[(x, y)] > max_time:\n        max_time = delays[(x, y)]\n\nprint(max_x, max_y)\nprint(max_time)\n'''\n'''\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"7\"\nassert solution_again(solution.__doc__) == \"7\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\\n7 10') == '7'"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\\n7 10') == '7'\nprint('PASS')\n\nstdin = \"\"\"\n10\n1 1\n1 2\n2 2\n2 3\n3 4\n4 5\n5 6\n5 7\n6 8\n6 9\n7 10\n7 11\n7 12\n8 13\n8 14\n9 15\n9 16\n10 17\n10 18\n11 19\n11 20\n12 21\n12 22\n13 23\n13 24\n14 25\n14 26\n15 27\n15 28\n16 29\n16 30\n17 31\n17 32\n18 33\n18 34\n19 35\n19 36\n20 37\n20 38\n21 39\n21 40\n22 41\n22 42\n23 43\n23 44\n24 45\n24 46\n25 47\n25 48\n26 49\n26 50\n27 51\n27 52\n28 53\n28 54\n29 55\n29 56\n30 57\n30 58\n31 59\n31 60\n32 61\n32 62\n33 63\n33 64\n34 65\n34 66\n35 67\n35 68\n36 69\n36 70\n37 71\n37 72\n38 73\n38 74\n39 75\n39 76\n40 77\n40 78\n41 79\n41 80\n42 81\n42 82\n43 83\n43 84\n44 85\n44 86\n45 87\n45 88\n46 89\n46 90\n47 91\n47 92\n48 93\n48 94\n49 95\n49 96\n50 97\n50 98\n51 99\n51 100\n52 101\n52 102\n53 103\n53 104\n54 105\n54 106\n55 107\n55 108\n56 109\n56 110\n57 111\n57 112\n58 113\n58 114\n59 115\n59 116\n60 117\n60 118\n61 119\n61 120\n62 121\n62 122\n63 123\n63 124\n64 125\n64 126\n65 127\n65 128\n66 129\n66 130\n67 131\n67 132\n68 133\n68 134\n69 135\n69 136\n70 137\n70 138\n71 139\n71 140\n72 141\n72 142\n73 143\n73 144\n74 145\n74 146\n75 147\n75 148\n76 149\n76 150\n77 151\n77 152\n78 153\n78 154\n79 155\n79 156\n80 157\n80 158\n81 159\n81 160\n82 161\n82 162\n83 163\n83 164\n84 165\n84 166\n85 167\n85 168\n86 169\n86 170\n87 171\n87 172\n88 173\n88 174\n89 175\n89 176\n90 177\n90 178\n91 179\n91 180\n92 181\n92 182\n93 183\n93 184\n94 185\n94 186\n95 187\n95 188\n96 189\n96 190\n97 191\n97 192\n98 193\n98 194\n99 195\n99 196\n100 197\n100 198\n101 199\n101 200\n102 201\n102 202\n103 203\n103 204\n104 205\n104 206\n105 207\n105 208\n106 209\n106 210\n107 211\n107 212\n108 213\n108 214\n109 215\n109 216\n110 217\n110 218\n111 219\n111 220\n112 221\n112 222\n113 223\n113 224\n114 225\n114 226\n115 227\n115 228\n116 229\n116 230\n117 231\n117 232\n118 233\n118 234\n119 235\n119 236\n120 237\n120 238\n121 239\n121 240\n122 241\n122 242\n123 243\n123 244\n124 245\n124 246\n125 247\n125 248\n126 249\n126 250\n127 251\n127 252\n128 253\n128 254\n129 255\n129 256\n130 257\n130 258\n131 259\n131 260\n132 261\n132 262\n133 263\n133 264\n134 265\n134 266\n135 267\n135 268\n136 269\n136 270\n137 271\n137 272\n138 273\n138 274\n139 275\n139 276\n140 277\n140 278\n141 279\n141 280\n142 281\n142 282\n143 283\n143 284\n144 285\n144 286\n145 287\n145 288\n146 289\n146 290\n147 291\n147 292\n148 293\n148 294\n149 295\n149 296\n150 297\n150 298\n151 299\n151 300\n152 301\n152 302\n153 303\n153 304\n154 305\n154 306\n155 307\n155 308\n156 309\n156 310\n157 311\n157 312\n158 313\n158 314\n159 315\n159 316\n160 317\n160 318\n161 319\n161 320\n162 321\n162 322\n163 323\n163 324\n164 325\n164 326\n165 327\n165 328\n166 329\n166 330\n167 331\n167 332\n168 333\n168 334\n169 335\n169 336\n170 337\n170 338\n171 339\n171 340\n172 341\n172 342\n173 343\n173 344\n174 345\n174 346\n175 347\n175 348\n176 349\n176 350\n177 351\n177 352\n178 353\n178 354\n179 355\n179 356\n180 357\n180 358\n181 359\n181 360\n182 361\n182 362\n183 363\n183 364\n184 365\n184 366\n185 367\n185 368\n186 369\n186 370\n187 371\n187 372\n188 373\n188 374\n189 375\n189 376\n190 377\n190 378\n191 379\n191 380\n192 381\n192 382\n193 383\n193 384\n194 385\n194 386\n195 387\n195 388\n196 389\n196 390\n197 391\n197 392\n198 393\n198 394\n199 395\n199 396\n200 397\n200 398\n201 399\n201 400\n202 401\n202 402\n203 403\n203 404\n204 405\n204 406\n205 407\n205 408\n206 409\n206 410\n207 411\n207 412\n208 413\n208 414\n209 415\n209 416\n210 417\n210 418\n211 419\n211 420\n212 421\n212 422\n213 423\n213 424\n214 425\n214 426\n215 427\n215 428\n216 429\n216 430\n217 431\n217 432\n218 433\n218 434\n219 435\n219 436\n220 437\n220 438\n221 439\n221 440\n222 441\n222 442\n223 443\n223 444\n224 445\n224 446\n225 447\n225 448\n226 449\n226 450\n227 451\n227 452\n228 453\n228 454\n229 455\n229 456\n230 457\n230 458\n231 459\n231 460\n232 461\n232 462\n233 463\n233 464\n234 465\n234 466\n235 467\n235 468\n236 469\n236 470\n237 471\n237 472\n238 473\n238 474\n239 475\n239 476\n240 477\n240"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''6\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10''') == '7'\nassert solution('''6\n1 2\n4 1\n1 5\n10 10\n10 8\n7 10''') == '5'\nassert solution('''6\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10''') == '8'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == '6'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"6\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\\n7 10\") == \"7\"\nassert solution(\n    \"5\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\") == \"8\"\nassert solution(\n    \"4\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\") == \"10\"\nassert solution(\n    \"3\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\") == \"10\"\nassert solution(\n    \"2\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\") == \"10\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"7\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '7'\nassert solution('1 1') == '1'\nassert solution('4 1') == '1'\nassert solution('1 5') == '1'\nassert solution('10 10') == '10'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '9-b'\nassert solution('0') == ''\nassert solution('1') == 'a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\nab\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0') == '8-a'\nassert solution('10\\naab\\naba\\nabb\\nbba\\naab\\nabb\\nbaa\\nbba\\nbaa\\nbaa\\nbaa\\nbba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n\"\"\") == \"9-b\"\nassert solution(\"\"\"\n4\nc d\n1-a 2-a\n2-c 5-a\n3-d 6-a\n3\nab\nac\n\"\"\") == \"1-a 2-a 3-d\"\nassert solution(\"\"\"\n2\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n\"\"\") == \"6-a 2-b 8-b\"\nassert solution(\"\"\"\n1\na b\n2-a 2-b\n3-a 5-b\n\"\"\") == \"2-a 2-b 3-a\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    3-b 5-b\n    6-a 2-b\n    2\n    aba\n    bba\n    ''') == '8-a'\nassert solution('''\n    1\n    a\n    ''') == 'a'\nassert solution('''\n    2\n    a\n    ''') == 'a'\nassert solution('''\n    5\n    b\n    a\n    c\n    a\n    ''') == 'b'\nassert solution('''\n    3-b 5-b\n    6-a 2-b\n    2\n    aba\n    bba\n    ''') == '6-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\na b') == '8-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\nab') == 'a'\nassert solution('3-b 5-b 6-a 2-b') == 'b'\nassert solution('aba') == 'a'\n\n'''"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\nb\nb b a a\na b b a b\nb a b a b\n''') == '9-b'\nassert solution('''\n4\nb b b a a\na b b a a\nb a b a b\nb a b b a\n''') == '8-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '8-a'\nassert solution('''\na b\n3-b 5-b\n6-a 2-b\n1\na\nb\n''') == '5-b'\nassert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '3-b'\n'''\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0') == '9-b'\nassert solution('3\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0') == '8-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('\\n'.join([\n    '2',\n    'a b',\n    '3-b 5-b',\n    '6-a 2-b',\n    '2',\n    'aba',\n    'bba',\n    '0'\n])) == '9-b'\n\nassert solution('\\n'.join([\n    '2',\n    'a b',\n    '3-b 5-b',\n    '6-a 2-b',\n    '2',\n    'ab',\n    'ba',\n    '0'\n])) == '8-a'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '3'\nassert solution('4\\n') == '4'\nassert solution('5\\n') == '5'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\nabc\n1\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\necho') == '3246R3246'\nassert solution('1\\necho') == '3246R3246'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\ntomato\ncar\ndolphin\nracecar\n''') == \"tomatoDolphinRacecar\"\n\nassert solution('''\n5\nsmash\ncountry\npopcorn\npopcorn\n''') == \"countryPopcornPopcorn\"\n\nassert solution('''\n1\n123\n123\n123\n123\n123\n''') == \"123123\"\n\nassert solution('''\n2\nhappo\n''') == \"ha\"\n\nassert solution('''\n3\nbutter\nbutter\nbutter\n''') == \"butterbutterbutter\""
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"3246U3246\"\n\nassert solution(\"\"\"\n1\necho\necho\necho\n
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"5\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"7L\"\nassert solution(\"2\") == \"7R5\"\nassert solution(\"3\") == \"7D7R3\"\nassert solution(\"4\") == \"7D7D7R3\"\nassert solution(\"5\") == \"7D7D7D7R3\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == ''\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\na\n1\nb\n2\nc\n3\nd\n4\ne\n5\nf\n6\ng\n7\nh\n8\ni\n9\nj\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\necho\n1\nechoecho\n''') == '3246R3246'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"NO\"\nassert solution(\"3 1\") == \"YES\"\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"5 5\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"YES\"\nassert solution(\"3 1\") == \"YES\"\nassert solution(\"10 1\") == \"NO\""
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 2\n1 3\n3 2\n1 1\n4 1\n3 4\n''') == 'YES'\n\nassert solution('''\n4 2\n1 3\n3 2\n1 2\n4 1\n3 4\n''') == 'NO'\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n3 2\n3 3\n3 4\n4 2\n4 3\n4 4\n''') == 'YES'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"YES\"\nassert solution(\"5 6\") == \"YES\"\nassert solution(\"6 5\") == \"YES\"\nassert solution(\"15 20\") == \"YES\"\nassert solution(\"25 10\") == \"NO\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == 'YES'\nassert solution('3 2') == 'NO'\nassert solution('2 4') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == 'YES'\nassert solution('2 5') == 'YES'\nassert solution('3 1') == 'NO'\nassert solution('5 5') == 'NO'\n\"\"\""
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('2 3') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"YES\"\nassert solution(\"4 3\") == \"NO\"\nassert solution(\"5 5\") == \"YES\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1') == 'YES'\nassert solution('7 1') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"NO\"\nassert solution(\"3 1\") == \"YES\"\nassert solution(\"2 1\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"9\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n300003\\n333333\") == \"176\"\nassert solution(\n    \"3\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4\\n\"\n    \"1\\n\"\n    \"6 6\\n\"\n    \"333333\"\n) == \"176\"\n\nassert solution(\n    \"9\\n\"\n    \"1\\n\"\n    \"6 6\\n\"\n    \"300003\"\n    \"300003\"\n    \"300003\"\n    \"300003\"\n    \"300003\"\n    \"333333\"\n) == \"176\""
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '176'\nassert solution('3') == '29'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"9\") == \"176\"\nassert solution(\"1\") == \"10\"\nassert solution(\"6 6\") == \"41\"\nassert solution(\"33333\") == \"340\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"176\"\nassert solution(\"12\") == \"838\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"51\"\nassert solution(\"10\") == \"405\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '3',\n    '1',\n    '6 6',\n    '333333',\n    '300003',\n    '300003',\n    '300003',\n    '300003',\n    '333333',\n) == '176'"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"9\") == \"176\"\nassert solution(\"1\") == \"176\"\nassert solution(\"6 6\") == \"176\"\nassert solution(\"333333\") == \"176\"\nassert solution(\"300003\") == \"176\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"20\"\nassert solution(\"5\") == \"208\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"12\") == \"01\"\nassert solution(\"25\") == \"2\"\nassert solution(\"38\") == \"8\"\nassert solution(\"70\") == \"0\"\nassert solution(\"3870\") == \"8708\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('12') == '012'\nassert solution('123') == '123'\nassert solution('1234') == '1234'\nassert solution('123456789101112131415161718') == '01225'\nassert solution('123456789101112131415161718') == '01225'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '6'\nassert solution('10') == '10'\nassert solution('3') == '3'\nassert solution('5') == '5'\nassert solution('1000000') == '1000000'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '12'\nassert solution('123') == '123'\nassert solution('1321') == '321'\nassert solution('1234') == '4'\nassert solution('1235') == '4'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('999999999') == '999'\nassert solution('90000009') == '9'\nassert solution('1000000000') == '999'\nassert solution('10000000000') == '999'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"12\"\nassert solution(\"10000\") == \"100\"\nassert solution(\"5000000\") == \"100\"\nassert solution(\"10000000\") == \"100\"\nassert solution(\"8\") == \"8\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '666'\nassert solution('10') == '10'\nassert solution('13') == '13'\nassert solution('12') == '12'\nassert solution('110') == '110'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('12') == '12'\nassert solution('123') == '12'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"12\") == \"0123\"\nassert solution(\"123\") == \"0123\"\nassert solution(\"123456\") == \"01234\"\nassert solution(\"12345\") == \"0123\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('123456789') == '12345'\nassert solution('1234567890123456789012345678901234567890') == '12345678901234567890'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n((()\\n480\\n617\\n-570\\n928\") == \"480\"\nprint(solution(\"2 1\\n((()\\n480\\n617\\n-570\\n928\"))\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '0'\nassert solution('1 3') == '0'\nassert solution('1 2 3') == '1'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''((()\n480\n617\n-570\n928\n''') == '?', 'Should be \"??\"'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '?', solution.__doc__\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 1') == '?', \"Tests\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '?', \"WA :(\""
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2\n-1000\n1 2\n-1000\n''') == '?', 'First Test Case'\n\nassert solution('''\n3 1\n(())\n-100\n''') == '-100', 'Second Test Case'\n\nassert solution('''\n3 2\n(())(\n-100\n''') == '-100', 'Third Test Case'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '?'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"?\"\nassert solution(\"4 1\") == \"480\"\nassert solution(\"8 1\") == \"??\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n\"\"\") == \"2 4\"\nassert solution(\"\"\"\n2 4\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n\"\"\") == \"2 4 5 6 7 8 9 10 11 12 13\"\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n2\n1\n\"\"\") == \"2 1\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 1 3 5\\n2 2 4\") == \"2 4\"\nassert solution(\"5\\n1 2 3 4 5\\n1 3 5 2 4\\n2 4 6\\n2 5 6 3\\n2 5 6 4 3\") == \"2 4\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\\n') == '2 4\\n5 6\\n7 8 9 10 11 12 13\\n'"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n9\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '5 6 7 8 9 10 11 12 13'\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n13\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '2 4\\n5 6\\n7 8 9 10 11 12 13'"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n13\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\nSample Output:\n5 6\n7 8 9 10 11 12 13\n\"\"\") == \"2 4\""
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1 4 5 6 7 8 9 10 11 12 13'\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('13') == '2 4'\nassert solution('5') == '5'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '''\n2 4\n5 6\n7 8 9 10 11 12 13\n'''\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\\n\") == '2 4\\n5 6\\n7 8 9 10 11 12 13\\n'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5') == '35 39 36 27 29'\nassert solution
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"35 39 36 27 29\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 4\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n\"\"\") == \"35 39 36 27 29\"\nassert solution(\"\"\"\n3 3\n1 2 1\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n\"\"\") == \"36 27 29\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2') == '35 39 36 27 29'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\nassert solution('''\n5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\nassert solution('''\n5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\n''')"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"35 39 36 27 29\"\nassert solution(\"3 2\") == \"1 1 2\"\nassert solution(\"2 2\") == \"1 1 2\"\nassert solution(\"10\") == \"1 1 2 2 4 8 16 32 64 128 256 512 1024\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5') == '35 39 36 27 29'\nassert solution('3 5') == '5'\nassert solution('3 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2') == '35 39 36 27 29'\nassert solution('1 1\\n1 1') == '1'\nassert solution('1 1\\n1 1') == '1'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5') == '35 39 36 27 29'\nassert solution('10 1') == '1 1 1 1 1 1 1 1 1 1 1'\nassert solution('10 2') == '1 1 1 1 1 1 1 1 1 1'\nassert solution('10 3') == '1 1 1 1 1 1 1 1 1'\nassert solution('20 10') == '1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"35 39 36 27 29\"\nprint(solution(input()))"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"0 672\"\nassert solution(\"3 7\") == \"0 758\"\nassert solution(\"3 5\") == \"0 823\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 2 2\") == \"0 2 4\"\nassert solution(\"3 5\") == \"0 3\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '672'\nassert solution('3') == '876'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n3 2 1\n''') == '0 672'\nassert solution('''\n4 3\n1 1 1 1\n''') == '1 0'\n'''\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n3 2 1') == '0 672'\nassert solution('2\\n4 2 3') == '0 672'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([3, 3, 2, 1]) == '0 672'\n\"\"\""
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    3 3\n    3 2 1\n    ''') == '0 672'\n\nassert solution('''\n    2 2\n    2 0 1\n    ''') == '1 0'\n\nassert solution('''\n    4 4\n    4 2 1\n    ''') == '1 0'\n\nassert solution('''\n    10 10\n    4 3 5 5 6 4 6 3\n    3 0 1 0 0 0 0\n    0 0 0 0 0 0 0\n    0 0 0 0 0 0 0\n    ''') == '1 0'\n\nassert solution('''\n    100000 3\n    999999 5 1 2 3\n    0 0 0 0 0 0\n    0 0 0 0 0 0\n    0 0 0 0 0 0\n    ''') == '1 0'"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 2 1\n\"\"\") == \"0 672\"\nassert solution(\"\"\"\n3 4 1\n\"\"\") == \"2 968\"\nassert solution(\"\"\"\n1 5 1\n\"\"\") == \"0 571\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"0 672\"\nassert solution(\"3 3\\n2 1 0\") == \"0 1\"\nassert solution(\"6 7\\n1 0 0 0 2 0\") == \"4 0\""
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 4 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\nassert solution(\"2 4 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"Impossible\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5 100') == '2.500000'\n\"\"\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\nassert solution(\"6 5 100\\n0 1 10\\n1 2 5\\n1 2 30\\n2 2 10\\n3 3 20\\n3 3 50\\n4 4 40\\n4 4 20\") == \"Impossible\""
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 5 100\") == \"2.500000\"\nassert solution(\"4 5 100\") == \"Impossible\""
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n''') == '2.500000'\nassert solution('''\n3 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n''') == 'Impossible'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 5 100') == '2.500000'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4 100') == '2.500000'\nassert solution('4 4 5') == '2.500000'\nassert solution('3 3 5') == 'Impossible'\nassert solution('4 4 2') == 'Impossible'"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 5 100') == 'Impossible'\nassert solution('10 7 3 100') == '2.500001'\nassert solution('100 9 5 100') == '2.500001'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n''') == '2.500000'\n\"\"\""
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n') == 'Impossible'\nassert solution('2\\n') == '2.500000'"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n5 3 4') == '3'\nassert solution('1\\n2 3') == '1'\nassert solution('1\\n3 2') == '1'\n\n\"\"\""
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n5 3 4') == '3'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2 3') == '1\\n3 2'\nassert solution('3\\n5 3 4') == '3\\n2 5 3 4'\nprint(solution())\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\n\nSample Input:\n4\n3 6 5 2\nSample Output:\n4\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n'''\n3\n5 3 4\n''') == '3'\nassert solution(\n'''\n2\n2 2\n''') == '3'\nassert solution(\n'''\n1\n10\n''') == '2'\n\n'''\n1\n10\n'''\nassert solution(\n'''\n3\n3 3 4\n''') == '3'\nassert solution(\n'''\n2\n2 2\n''') == '3'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 4') == '3'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5 3 4\") == \"3\"\nassert solution(\"5 6 7 8\") == \"4\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n5 3 4') == '3'\nassert solution('2\\n2 2') == '0'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    5 3 1\n    ''') == '1'\n\nassert solution('''\n    10 10 10\n    ''') == '999'"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4 1') == '2'\nassert solution('5 5 1') == '2'\nassert solution('2 5 1') == '1'\nassert solution('1 1 1') == '1'\nassert solution('3 4 1') == '1'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 1') == '2'\nassert solution('2 3 5') == '4'\nassert solution('5 3 2') == '9'\nassert solution('2 3 5') == '4'\nassert solution('5 3 2') == '9'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1\\n\") == \"2\"\nassert solution(\"2 2 2\\n\") == \"2\"\nassert solution(\"3 3 4\\n\") == \"1\"\nassert solution(\"12 50 100\\n\") == \"4\""
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2'\nassert solution(__import__('sys').stdin.read()) == '2'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 1') == '2'\nassert solution('4 5 4') == '2'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 1') == '2'\nassert solution('2 2 1') == '0'\nassert solution('3 3 3') == '2'\nassert solution('5 5 5') == '18'"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1') == '2'\nassert solution('3 2 1') == '3'\nassert solution('3 3 1') == '6'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4 2') == '2'\nassert solution('10 10 2') == '2'\nassert solution('5 10 1') == '1'\nassert solution('3 3 2') == '3'\nassert solution('1 1 2') == '2'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\") == \"2\"\nassert solution(\"2 1 1\") == \"1\"\nassert solution(\"3 1 1\") == \"0\"\nassert solution(\"3 2 1\") == \"0\"\nassert solution(\"3 3 1\") == \"3\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '7'\nassert solution('1') == '1'\n'''\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"1 3 5\n\"\"\") == \"7\"\nassert solution(\"\"\"4\n2 1 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 3 5\n''') == '7'''"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '7'\n'''"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3 5') == '7'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1\\n3') == '7'\nassert solution('2\\n2\\n3') == '7'\nassert solution('4\\n4\\n3') == '7'\nassert solution('4\\n4\\n3') == '7'\nassert solution('4\\n4\\n3') == '7'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"2\\n1\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3 5\") == \"7\"\nassert solution(\"2 3 4\") == \"2\"\nassert solution(\"2 2 2\") == \"0\"\nassert solution(\"2 4 3\") == \"0\"\nassert solution(\"2 3 4 5\") == \"5\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3 5') == '7'\nassert solution('5') == '4'\nassert solution('3') == '2'\nassert solution('2') == '1'\n'''"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3 5') == '7'\nassert solution('2 4 6') == '10'\nassert solution('1 2 3 4 5 6 7') == '9'\n\n'''\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'Impossible.\\n'\nassert solution('2') == 'Impossible.\\n'\nassert solution('3') == 'Impossible.\\n'\nassert solution('4') == 'fred jetsons\\n'\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n2\n2\n2\n2\n3\n2\n1\n1\n3\n1\n2\n2\n1\n1\n2\n1\n2\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(open(\"TestInput.txt\")) == 'john jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\nruth rockets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\njohn jets\\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"Impossible\"\nassert solution(\"3\") == \"Impossible\"\nassert solution(\"4\") == \"Impossible\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Impossible.\\n\"\nassert solution(\"2\") == \"john jets\\n\"\nassert solution(\"3\") == \"ruth jets\\n\"\nassert solution(\"4\") == \"mary rhinocerous jets\\n\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n10\nme my 8\nme my 9\nme 8\n10\n9\n3\n8\n9\n10\n6\n6\n7\n''') =='me my 8\\nme my 9\\nme 8\\nme 9\\n'\n''')\nassert solution('''\n1\n0\n2\n''') == 'Impossible.\\n'\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n4\\n4\\n4\\n4\\n') == 'Impossible'\nassert solution('4\\n4\\n4\\n4\\n4\\n') == 'John rhinocerous 2 jetsons'"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4\ndinosaur 2 jets\ndinosaur 2 jets\ndinosaur 2 jets\ndinosaur 2 jets\njohn rhinocerous 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2 jets\nmary rhinocerous 2 jets\nruth platypus 1 jets\n\"\"\") == \"\"\"\ndinosaur jets\njohn jets\nmary jets\nruth jets\n\"\"\", 'It should return the members of the best possible party.'\n\nassert solution(\n\"\"\"\n2\ndinosaur 2 jets\ndinosaur 2 jets\n\"\"\") == \"\"\"\nImpossible.\n\"\"\", 'There should not be any clubs left after removing them.'\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n6\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nruth platypus 1 rockets\n''') == 'ruth rockets'\n'''\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \"fred jetsons\\njohn jets\\nruth rockets\"\nassert solution(\"1\\n2\\n1 knights 2 rings\\n2 knights 3 rings\\n3 knights 4 rings\\n4 knights 5 rings\\n5 knights 6 rings\") == \"1 knights 6 rings\"\nassert solution(\"1\\n2\\n1 knights 2 rings\\n2 knights 3 rings\\n3 knights 4 rings\\n4 knights 5 rings\\n5 knights 6 rings\") == \"1 knights 2 rings\"\nassert solution(\"1\\n2\\n1 knights 2 rings\\n2 knights 3 rings\\n3 knights 4 rings\\n4 knights 5 rings\\n5 knights 6 rings\") == \"1 knights 2 rings\"\nassert solution(\"1\\n2\\n1 knights 2 rings\\n2 knights 3 rings\\n3 knights 4 rings\\n4 knights 5 rings\\n5 knights 6 rings\") == \"1 knights 2 rings\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n3 3\n1 1\n''') == '1 1 1'\n\"\"\"\nInput:\n3\n4 3\n-10 9\n-2 3\n4 4\n1 1\n2 2\n\nOutput:\n1 1 1 1 1 1\n\ninput:\n3\n5 5\n-3 -1\n-1 1\n2 2\n\nOutput:\n5 5 5 5 5\n\ninput:\n1\n1\n2\n\nOutput:\n1\n\"\"\""
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n5 5\n-10 -1\n''') == '1 2 1'\nassert solution('''\n1\n5 5\n-10 -1\n''') == '1 2 1'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4 3\n-10 9\n-2 3\n\"\"\") == \"1 2 1\"\nassert solution(\"\"\"\n3\n-10 9\n-2 3\n\"\"\") == \"0 0 0\"\nassert solution(\"\"\"\n2\n-10 9\n1 3\n\"\"\") == \"1 2\"\n\"\"\"\n\n\n\n\n\nn = int(input())\ncans = []\nans = []\nfor i in range(n):\n    cans.append(list(map(int, input().split())))\n\nfor i in range(len(cans)):\n    x, r = cans[i]\n    for j in range(len(cans)):\n        if i == j:\n            continue\n        else:\n            if (x-cans[j][0])<=r and (x-cans[j][0])>=0:\n                ans.append(1)\n                break\n            elif (cans[j][0]-x)<=r and (cans[j][0]-x)>=0:\n                ans.append(1)\n                break\n    else:\n        ans.append(0)\nprint(*ans, sep=\" \")\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1 2 1'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n1 2\\n2 3') == '1 2 1'"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n4 3\n-10 9\n-2 3\n-4 2\n''') == '1 2 1 1 2'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n4 3\n-10 9\n-2 3\n-3 6\n-7 8\n-1 2\n''') == '1 2 1 1 1'\n\nassert solution('''\n10\n4 3\n-10 9\n-2 3\n-3 6\n-7 8\n-1 2\n-1 4\n-9 8\n-5 7\n-6 6\n-8 5\n-1 1\n''') == '2 2 2 1 1'\n'''\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n4 3\n-10 9\n-2 3\n''') == '1 2 1'\n\nassert solution('''\n2\n0 1\n''') == '1 1'\n\nassert solution('''\n1\n1\n''') == '2'\n\nassert solution('''\n9\n-2 3\n-1 5\n-2 4\n-4 4\n-3 3\n-5 2\n-1 3\n-5 3\n-2 2\n''') == '1 1 2 1 3 1 1 1 1 1 1'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3\n4 3\n-10 9\n-2 3\n\"\"\") == \"1 2 1\"\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n1 1 7\n3 2 3\n5 1 4\n6 10 10''') == '2.125'\nassert solution('''4\n1 2 3\n5 2 5\n4 3 3\n5 3 4''') == '2.25'\nassert solution('''6\n1 1 1\n2 3 4\n3 4 4\n4 5 5\n5 5 5\n5 6 6''') == '2.25'\n\n''')\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '2.125'"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2.125'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 3 3\\n5 1 4\\n6 10 10') == '2.125'\nassert solution('3\\n1 2 3\\n5 1 4\\n6 10 10') == '2.125'\nassert solution('4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10') == '2.125'\nassert solution('7\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10') == '2.125'"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10') == '2.125'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1.6250'\nassert solution('4') == '2.125'\nassert solution('9') == '5.0625'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 1 7\n3 2 3\n5 1 4\n6 10 10''') == '2.125', \"Wrong output\"\n\nassert solution('''5\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 8 9''') == '3.125', \"Wrong output\"\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125'\nassert solution('''\n1\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '3.125'\n'''\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2.125'"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125'\n\nassert solution('''\n7\n2 8 7\n1 3 4\n5 6 5\n4 2 7\n3 1 4\n6 3 6\n1 1 1\nSample Input 2:\n8\n1 1 6\n4 2 8\n2 4 6\n5 6 2\n5 7 6\n1 4 6\n2 6 6\n3 6 4\n4 7 6\n5 6 6\n6 7 6\nSample Output 2:\n0.3333333333333333\n''') == '0.3333333333333333'\n\nassert solution('''\n8\n1 1 5\n4 2 8\n3 4 5\n5 6 2\n5 7 6\n1 4 6\n2 6 6\n3 6 4\n4 7 6\n5 6 6\n6 7 6\n7 7 6\nSample Output 3:\n4.142857142857142\n''') == '4.142857142857142'\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('a') == 'a', 'Not a'\nassert solution('*') == '*', 'Not *'\nassert solution('a*.c') == 'a*.c', 'Not *.c'\nassert solution('a.out') == 'a.out', 'Not a.out'\nassert solution('readme') =='readme', 'Not readme'\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('*.*') == ['main.c', 'a.out','readme', 'yacc']"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('*.*') == ['main.c', 'a.out','readme']\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\"]\nassert solution(\"*.c\") == [\"main.c\"]\nassert solution(\"*.*.txt\") == [\"main.c\", \"a.out\"]\nassert solution(\"*.*.py\") == [\"main.py\"]\nassert solution(\"*.c\") == [\"main.c\"]\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''*.*\n4\nmain.c\na.out\nreadme\nyacc\n''') =='main.c a.out def solution(stdin: str) -> str:'\n'''\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('*.*') =='main.c\\na.out\\nreadme'\n\n'''"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == [\"main.c\", \"a.out\", \"readme\"]\n'''"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"*.*\") == \"main.c\"\n\nassert solution(\"a.out\") == \"readme\"\n\nassert solution(\"*.c\") == \"main.c\"\n\nassert solution(\"*.out\") == \"readme\"\n\nassert solution(\"*.py\") == \"main.py\""
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n*.*\n4\nmain.c\na.out\nreadme\nyacc\n''') =='main.c, a.out, readme, yacc'\n\nassert solution('''\n*.*\n4\nmain.c\na.out\nreadme\nyacc\n''') =='main.c, a.out, readme'"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n*.*\n1\n\"\"\") == \"main.c\"\nassert solution(\n\"\"\"\n*.c\na\n*.c\nb\n\"\"\") == \"main.c\"\nassert solution(\n\"\"\"\n*.c\n*.*\n*.c\n\"\"\") == \"*.c\"\nassert solution(\n\"\"\"\n*.*\nmain.c\nreadme\n\"\"\") == \"main.c\"\nassert solution(\n\"\"\"\n*.c\n*.c\n*.c\n*.*\n\"\"\") == \"*.c\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\n0.500000\\n') == '0.500000'\nassert solution('1 1\\n0.5000\\n') == '0.5'\nassert solution('1 1\\n0.000\\n') == '0.0'\nassert solution('1 1\\n0.00001\\n') == '0.00001'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1\\n0.500000') == '0.500000'\n\n\"\"\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"0.500000\"\nassert solution(\"0 0.200000\") == \"0.200000\"\nassert solution(\"1 1\") == \"0.500000\"\nassert solution(\"0 1\") == \"1.000000\"\nassert solution(\"1 0.5\") == \"0.500000\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '1 1\\n0.500000') == '0.500000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 1\n0.500000''') == '0.500000'\nassert solution('''1 2\n0.1\n0.1\n0.1\n0.1\n0.1''') == '0.2'\nassert solution('''1 3\n0.1\n0.1\n0.1\n0.1\n0.1''') == '0.3'\nassert solution('''1 5\n0.1\n0.1\n0.1\n0.1\n0.1''') == '0.6'\nassert solution('''3 3\n0.1\n0.1\n0.1''') == '0.333'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n0.5 0.5') == '0.500000000000001'\n\"\"\"\n\nn, m = map(int, input().split())\na, b = 0, 1\n\nwhile a!= b:\n    a, b = b, a+b\n\nprint(a)"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"0.500000\"\n\n'''\n\nimport decimal\nimport math"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1\\n0.500000') == '0.500000'\nassert solution('3 3\\n0.000250') == '0.000250'\nassert solution('10 1\\n0.333\\n0.333\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\n0.500\\"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n0.500000\n''') == '0.500000'\nassert solution('''\n1 1\n0.5\n''') == '0.500000'\n\n\"\"\"\n\nfrom decimal import Decimal\n\nimport sys\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n0.1 0.5') == '0.5'\nassert solution('1 2\\n0.1 0.9') == '0.8'\nassert solution('1 2\\n0.4 0.6') == '0.7'\nassert solution('1 2\\n0.9 0.1') == '0.9'\nassert solution('1 2\\n0.8 0.2') == '0.9'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('0 50.0') == '0.0'\nassert solution('1 99.9') == '99.9'\nassert solution('1 100.0') == '100.0'\nassert solution('0.5 50.0') == '50.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 49.9\") == \"0.0\""
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"0.0\""
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 49.9') == '0.0'"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0 49.9\") == \"0.0\"\nassert solution(\"10.51\") == \"0.0\"\n\"\"\"\nimport math"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 49.9\") == \"0.0\"\nassert solution(\"0.0 1.1\") == \"1.0\""
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 49.9') == '0.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''0 49.9\n''') == '0.0'\n\nassert solution('''0 12.4\n''') == '0.0'\n\nassert solution('''0 79.9\n''') == '0.0'\n\nassert solution('''23 32.8\n''') == '0.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == '0.0'\nassert solution('0') == '0.0'\nassert solution('5.9') == '1.0'\nassert solution('0.9') == '0.0'\nassert solution('5.99') == '1.8'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('0 0.1') == '0.0'\nassert solution('0 0.01') == '0.0'\nassert solution('0 0.001') == '0.0'\nassert solution('0 0.0001') == '0.0'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2\\n2 3\\n3 1') == '1 2\\n3 1'\nassert solution('3 1\\n2 1\\n1 3') == '2 1\\n3 1'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n1 2\n2 3\n3 1\n4 1''') == '4 1\\n2 1\\n3 2\\n1 3\\n'''\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"4 1\\n2 1\\n3 2\\n1 3\"\nassert solution(\"2\\n1 2\") == \"2 1\"\nassert solution(\"4\\n2 3\") == \"4 1\"\nassert solution(\"7\\n1 5 3 2 4 6 7\") == \"7 1 2 3 4 5 6 7\"\nassert solution(\"7\\n1 2 3 4 5 6 7\") == \"7 1 2 3 4 5 6 7\"\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n2 1\n1 2\n1 3''') == '2 3'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"1 2\\n2 3\\n3 1\\n4 1\"\nassert solution(\"5\\n1 2\\n2 3\\n3 1\\n4 1\\n1 4\") == \"1 2\\n2 3\\n3 1\\n1 4\\n4 1\""
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '1 1\\n2 2'\nassert solution('1 2') == '1 2'\nassert solution('2 3') == '1 2\\n2 3'\nassert solution('3 1') == '1 2\\n2 3'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"4 1 2 1\"\nassert solution(\"5\\n1 2\\n2 3\\n3 1\\n4 1\\n4 2\\n5 1\\n5 2\") == \"5 1 4 2 1\"\nassert solution(\"1\\n1\\n\") == \"1\"\nassert solution(\"3\\n1 2\\n3 4\\n\") == \"1 2 3 4\"\nassert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n3 1\") == \"4 1\\n2 1\\n3 2\\n1 3\"\nprint(solution(\"4\\n1 2\\n2 3\\n3 1\"))\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2\\n2 3\\n3 1\\n4 1\\n\") == \"4 1\\n2 1\\n3 2\\n1 3\"\n\n-----------------------------------------------------\n\nWrite a function that receives n integers as an array and returns true if the array contains a value that appears more than n / 2 times in the array, otherwise, returns false.\n\n-----Input-----\nThe first line contains an integer $n$ ($2 \\le n \\le 100000$). Then follow $n$ lines, each containing an integer.\n\n-----Output-----\nPrint an integer $0$ or $1$ depending on whether or not the array contains a value that appears more than $n / 2$ times in the array.\n\n-----Examples-----\nSample Input 1:\n2\n1 1\nSample Output 1:\n1\nSample Input 2:\n10\n5 5 5 5 5 5 5 5 5 5 5\nSample Output 2:\n0\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 1\\n4 1') == '4 1\\n2 1\\n3 2\\n1 3'\nassert solution('4\\n1 2\\n2 3\\n3 1\\n4 1') == '4 1\\n1 3\\n2 1\\n3 2'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 5\") == \"1\"\nassert solution(\"10 5\") == \"1\"\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 2\n2 1 6 3 5 3\n1 2 5 3 5\n''') == '1'\nassert solution('''\n10 5\n2 1 6 3 5 3\n1 2 5 3 5\n''') == '2'\nassert solution('''\n10 5\n2 1 6 3 5 3\n1 2 5 3 5\n''') == '0'"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5') == '1'\nassert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5') == '0'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n2 1 6 3 5 3\n1 2 5 3 5''') == '1'\n\nassert solution('''10\n3 2 1 4 5 3 6 7 8 8\n1 2 5 3 5''') == '1'\n\nassert solution('''5\n1 4 1 5 2\n0 1''') == '1'\n\nassert solution('''5\n1 4 1 5 2\n0 2''') == '3'"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 6 3 5 3') == '2'\nassert solution('6\\n2 1 6 3 5 3') == '1'\nassert solution('4\\n4 2 1 6 3 5 3') == '0'\nassert solution('1\\n3 3 2 1 3') == '0'\nassert solution('2\\n3 2 3 3') == '0'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5\\n') == '1'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 5\n2 1 6 3 5 3\n1 2 5 3 5\n''') == '1'\nassert solution('''\n3 6\n1 1 3 4 5 2\n3 2 2 1\n3 4 1 1\n2 5 1 3\n''') == '0'\nassert solution('''\n1\n4\n1\n''') == 'inf'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6\n2 1 6 3 5 3\n1 2 5 3 5\n''') == '1'\nassert solution('''\n6\n2 1 6 3 5 3\n1 2 5 3 5\n''') == '2'\nassert solution('''\n6\n2 1 6 3 5 3\n1 2 5 3 5\n''') == '3'\nassert solution('''\n6\n2 1 6 3 5 3\n1 2 5 3 5\n''') == '4'\nassert solution('''\n6\n2 1 6 3 5 3\n1 2 5 3 5\n''') == '5'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '4'\nassert solution('4 4 4 4') == '5'\nassert solution('1 1 1 1 1') == '1'\nassert solution('3 3 3 3 3') == '1'\nassert solution('1 1 1 2 3') == '1'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6 5\n2 1 6 3 5 3\n1 2 5 3 5''') == '1'\nassert solution('''6 5\n2 1 6 3 5 3\n1 2 5 3 5\n5 4 7 8 9''') == '1'\nassert solution('''6 5\n2 1 6 3 5 3\n1 2 5 3 5\n5 4 7 8 9\n10 20 30 40''') == '3'\nassert solution('''6 5\n2 1 6 3 5 3\n1 2 5 3 5\n5 4 7 8 9\n10 20 30 40\n50 50 50 50 50''') == '4'\nassert solution('''6 5\n2 1 6 3 5 3\n1 2 5 3 5\n5 4 7 8 9\n10 20 30 40\n50 50 50 50 50''') == '2'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 1 10\\n0 1 1 2 6\"\n) == \"3\""
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1 10\n0 1 1 2 6\n''') == '3'\n\nassert solution('''\n2 1 10\n0 1 2 6\n''') == '3'\n\nassert solution('''\n3 1 10\n0 1 1 6\n''') == 'impossible'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 1 10\n0 1 1 2 6\n''') == '3'\n\nprint(solution('''\n3\n1 1 1 1 1\n'''))\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1 10\") == \"3\"\nassert solution(\"2 1 0 10\") == \"impossible\"\nassert solution(\"2 1 -10 -10\") == \"impossible\"\nassert solution(\"2 1 10 -10\") == \"impossible\"\nassert solution(\"2 1 10 10\") == \"3\""
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 10') == '3'\nassert solution('5 5 10') == '11'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 1 10\"\n) == \"3\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6') == '3'\nassert solution('2 2 10\\n0 1 3 6\\n0 2 4 6') == 'impossible'\nassert solution('2 3 10\\n0 1 3 2 4\\n0 2 5 1 6') == '6'\nassert solution('2 4 10\\n0 1 5 2 4\\n0 2 7 3 6') == 'impossible'\n\n'''\n\nclass Solution:\n    def solve(self, n, m, s):\n        # bfs\n        '''\n        if not n or not m:\n            return -1\n\n        if n > m:\n            return -1\n\n        # bfs\n        # dp = [[[-1] * 11 for _ in range(n+1)] for _ in range(n+1)]\n        # for i in range(1, n+1):\n        #     dp[i][i][0] = 0\n\n        # for u, v, t_0, p, d in stdin:\n        #     u -= 1\n        #     v -= 1\n        #     if dp[u][v][0] == -1:\n        #         dp[u][v][0] = d\n        #         dp[u][v][p] = t_0\n        #         dp[u][v][d] = t_0 + p\n\n        #     if dp[u][v][0] == -1:\n        #         return -1\n\n        #     # if dp[u][v][0] <= t_0 + p:\n        #     if dp[u][v][0] <= t_0:\n        #         return -1\n        #     else:\n        #         # print(u,v)\n        #         # print(dp[u][v])\n        #         ans = dp[u][v][d] + d\n        #         for i in range(u+1, v):\n        #             ans = min(ans, dp[u][i][d] + dp[i][v][d] + d)\n\n        #         if ans == -1:\n        #             return -1\n\n        #         return ans\n        '''\n        # greedy\n        # dp = [[-1] * (n+1) for _ in range(m+1)]\n        # for i in range(1, n+1):\n        #     dp[i][i] = 0\n\n        # for u, v, t_0, p, d in stdin:\n        #     dp[u][v] = t_0 + p\n        #     if dp[u][v] >= d:\n        #         return -1\n\n        #     # if dp[u][v] <= t_0 + p:\n        #     if dp[u][v] <= t_0:\n        #         return -1\n        #     else:\n        #         ans = dp[u][v] + d\n        #         for i in range(u+1, v):\n        #             ans = min(ans, dp[u][i] + dp[i][v] + d)\n\n        #         if ans == -1:\n        #             return -1\n\n        #     # print(u,v)\n        #     # print(dp[u][v])\n        #     # print(ans)\n\n        #     # if dp[u][v] <= t_0 + p:\n        #     #     return -1\n\n        # return ans\n\n        # DP\n        dp = [[-1] * (n+1) for _ in range(m+1)]\n        for i in range(1, n+1):\n            dp[1][i] = 0\n\n        for i in range(1, m+1):\n            dp[i][n] = s\n\n        for u, v, t_0, p, d in stdin:\n            dp[u][v] = t_0 + p\n            if dp[u][v] >= d:\n                return -1\n\n            # if dp[u][v] <= t_0 + p:\n            if dp[u][v] <= t_0:\n                return -1\n            else:\n                ans = dp[u][v] + d\n                for i in range(u+1, v):\n                    ans = min(ans, dp[u][i] + dp[i][v] + d)\n\n                if ans == -1:\n                    return -1\n\n        return ans\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6\\n') == '3'\nassert solution('3\\n2 1 1 3 4\\n0 1 1 2 2\\n') == 'impossible'\nassert solution('3\\n4 2 1 1 1\\n0 1 1 2 2\\n') == '4'\nassert solution('6\\n3 3 2 2 4 3\\n0 1 1 2 3\\n') == 'impossible'\nassert solution('6\\n4 2 1 1 1 1\\n0 1 1 2 3\\n') == '4'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1 10\n0 1 1 2 6\n''') == '2'\n\nassert solution('''\n2 1 10\n0 1 1 2 6\n''') == '3'\n\nassert solution('''\n3 1 10\n0 1 1 2 6\n''') == '2'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6\\n') == '3'\nassert solution('1 1 10\\n0 1 1 2 6\\n') == 'impossible'\n\nSample Input:\n3 4 6\n0 1 1 2 3\nSample Output:\nimpossible\n\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 100\") == \"2\"\nassert solution(\"99 1\") == \"1 2\"\nassert solution(\"1 99\") == \"1\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1 100\n99 1\n1 99\n\"\"\") == \"2 1 2\"\nassert solution(\"\"\"\n3 50\n50 7\n100 1\n50 7\n50 1\n50 7\n\"\"\") == \"1 2 3\"\nassert solution(\"\"\"\n5 300\n200 10\n200 10\n200 10\n200 10\n200 10\n\"\"\") == \"1 2 3 4 5\""
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n12\n7 1\n3 1\n4 1\n''') == '''2\n1 2\n3 4\n'''\nassert solution('''3\n12\n7 1\n3 1\n4 1\nSample Input 2:\n2 100\n99 1\n1 99\nSample Output:\n1\n1 2\n''' == '''1\n1 2\n'''\nassert solution('''2\n12\n7 1\n3 1\n4 1\n''') == '''1\n1 2\n'''\nassert solution('''3\n12\n7 1\n3 1\n4 1\nSample Input 3:\n2\n5\n10 50\n9 1\n1 9\nSample Output:\n3\n1 2\n''' == '''2\n1 2\n'''"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 100\\n99 1\\n1 99') == '2'\nassert solution('3 10\\n3 1\\n3 2\\n1 3\\n1 2\\n3 1\\n3 3\\n2 1\\n2 2\\n') == '3 1 3 2 1 2'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1\\n2 99') == '1 2'\nassert solution('1 1\\n3 99') == '1 2'\nassert solution('1 1\\n4 99') == '1 2 3 4'\nassert solution('1 1\\n5 99') == '1 2 3 4 5'\nassert solution('1 1\\n1 1') == '1 1'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 100\n99 1\n1 99\n''') == '2 1 2'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"2 100\\n99 1\\n1 99\"\n) == \"2 1 2\"\nassert solution(\n    \"10 100\\n1 99\\n10 99\\n4 2\\n10 5\\n1 1\\n10 2\\n7 4\\n2 9\\n1 3\\n10 5\\n2 6\\n10 8\\n4 4\\n10 7\\n2 7\\n2 2\\n2 3\\n1 5\\n10 8\\n1 3\\n10 3\\n2 1\\n10 9\\n3 9\\n2 2\\n10 9\\n1 5\\n10 7\\n3 7\\n10 6\\n1 9\\n\"\n) == \"4 1 2 2 3\"\nassert solution(\n    \"2 0\\n\"\n) == \"0\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 100\\n99 1\\n1 99') == '2\\n1 2'\nassert solution('2 100\\n99 1\\n1 99') == '1'\nassert solution('1 100\\n1 100\\n1 99') == '1'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('5') == '3'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 100\\n99 1\\n1 99') == '2\\n1 2'\nassert solution('3 100\\n99 1\\n1 99\\n1 98') == '3\\n1 2'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('H'*20+'T'*20+'0.5') == '0.5'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('H') == '0.5'\nassert solution('HTTTT') == '0.000'\nassert solution('HTH') == '0.0'\nassert solution('HT') == '0.50'\nassert solution('HTT') == '0.0'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('H') == 'H', 'First'\nassert solution('T') == 'H', 'Second'\nassert solution('0.5') == '0.5', 'Third'"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"H\") == \"0.5\", \"Wrong!\"\nassert solution(\"T\") == \"0.5\", \"Wrong!\"\nassert solution(\"0.5\") == \"0.5\", \"Wrong!\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('H') == '1/2'\nassert solution('TT') == '1/2'\nassert solution('HT') == '0'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('H\\nH\\n0.5') == '0.5'\nassert solution('H\\nT\\n0.5') == '0.5'\nassert solution('T\\nH\\n0.5') == '0.5'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('H') == 'H'\nassert solution('T') == 'T'\nassert solution('0.5') == '0.5'\nprint(solution(input()))\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('H' * 20) == 'H' * 20\nassert solution('H' * 20 + 'T') == 'H' * 20 + 'T'\nassert solution('H' * 20 + 'T' + 'H') == 'H' * 20 + 'T' + 'H'\nassert solution('H' * 20 + 'T' + 'H' * 20) == 'H' * 20 + 'T' * 20\nassert solution('H' * 20 + 'T' + 'H' * 20 + 'T') == 'H' * 20 + 'T' * 20 + 'T'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nH\nT\n0.5\n''') == '0.5'\n\n'''\nThe situation is similar to the last one, but here we assume that the game is ended after a coin flip is done. We do not want to waste a flip for another purpose.\n\nWe can count the number of coin flips:\n\nn = 10, k = 'H'\nn = 10, k = 'T'\nn = 1, k = 'H'\nn = 1, k = 'T'\nn = 8, k = 'H'\nn = 8, k = 'T'\nn = 9, k = 'H'\nn = 9, k = 'T'\nn = 10, k = 'H'\nn = 10, k = 'T'\nn = 11, k = 'H'\nn = 11, k = 'T'\nn = 12, k = 'H'\nn = 12, k = 'T'\nn = 13, k = 'H'\nn = 13, k = 'T'\nn = 14, k = 'H'\nn = 14, k = 'T'\nn = 15, k = 'H'\nn = 15, k = 'T'\nn = 16, k = 'H'\nn = 16, k = 'T'\nn = 17, k = 'H'\nn = 17, k = 'T'\nn = 18, k = 'H'\nn = 18, k = 'T'\nn = 19, k = 'H'\nn = 19, k = 'T'\nn = 20, k = 'H'\nn = 20, k = 'T'\n\nLet\u2019s try to count the number of coin flips:\nn = 10, k = 'H'\nn = 10, k = 'T'\nn = 1, k = 'H'\nn = 1, k = 'T'\nn = 8, k = 'H'\nn = 8, k = 'T'\nn = 9, k = 'H'\nn = 9, k = 'T'\nn = 10, k = 'H'\nn = 10, k = 'T'\nn = 11, k = 'H'\nn = 11, k = 'T'\nn = 12, k = 'H'\nn = 12, k = 'T'\nn = 13, k = 'H'\nn = 13, k = 'T'\nn = 14, k = 'H'\nn = 14, k = 'T'\nn = 15, k = 'H'\nn = 15, k = 'T'\nn = 16, k = 'H'\nn = 16, k = 'T'\nn = 17, k = 'H'\nn = 17, k = 'T'\nn = 18, k = 'H'\nn = 18, k = 'T'\nn = 19, k = 'H'\nn = 19, k = 'T'\nn = 20, k = 'H'\nn = 20, k = 'T'\n\nSo, the probability that the game is ended is:\nn = 10, k = 'H'\nn = 10, k = 'T'\nn = 1, k = 'H'\nn = 1, k = 'T'\nn = 8, k = 'H'\nn = 8, k = 'T'\nn = 9, k = 'H'\nn = 9, k = 'T'\nn = 10, k = 'H'\nn = 10, k = 'T'\nn = 11, k = 'H'\nn = 11, k = 'T'\nn = 12, k = 'H'\nn = 12, k = 'T'\nn = 13, k = 'H'\nn = 13, k = 'T'\nn = 14, k = 'H'\nn = 14, k = 'T'\nn = 15, k = 'H'\nn = 15, k = 'T'\nn = 16, k = 'H'\nn = 16, k = 'T'\nn = 17, k = 'H'\nn = 17, k = 'T'\nn = 18, k = 'H'\nn = 18, k = 'T'\nn = 19, k = 'H'\nn = 19, k = 'T'\nn = 20, k = 'H'\nn = 20, k = 'T'\n\nIn this case, the probability that the game is ended is:\n0.0333, which is smaller than the probability 0.5, but it is still correct.\n'''\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n7 8 9 1 5 2\n2 1 6 3 9''') == '8 1 3 5 7 9 11 13 15'"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"8\\n1 3 5 7 9 11 13 15\""
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n''') == '8 1 3 5 7 9 11 13 15'\nassert solution('''\n1\n''') == '0'\nassert solution('''\n2\n''') == '0 0'\nassert solution('''\n5\n''') == '8 1 3 5 7 9 11 13 15'\nassert solution('''\n10\n''') == '8 1 3 5 7 9 11 13 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 100 1 0 0 0\n'''))\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n') == '2'\nassert solution('6\\n') == '0'\nassert solution('8\\n') == '4'\nassert solution('10\\n') == '5'\nassert solution('12\\n') == '7'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '8\\n1 3 5 7 9 11 13 15'\nassert solution('5') == '6\\n1 3 5 7 9 11 13'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"8\\n1 3 5 7 9 11 13 15\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n') == '8\\n1 3 5 7 9 11 13 15'\nassert solution('6\\n') == '8\\n1 3 5 7 9 11 13 15'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n\") == \"8\\n1 3 5 7 9 11 13 15\\n\"\nassert solution(\"5\\n\") == \"12\\n1 2 4 5 6 8 9 10 11\\n\"\nassert solution(\"20\\n\") == \"112\\n1 2 4 5 6 8 9 10 11 12 13 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\\n\"\nassert solution(\"22\\n\") == \"10\\n1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\\n\"\n\n'''\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '8'\nassert solution('3') == '1 3 5 7 9 11 13 15'\nassert solution('6') == '1 3 5 7 9 11 13 15'\n\n'''\n\nn = int(input())\ncount = 0\nfor i in range(n*n):\n    if(n<=8):\n        if(i%n==0 or i%n==1 or i%n==n-1 or i%n==n-2):\n            count+=1\n        elif(i%n==n-1 or i%n==n-2 or i%n==1 or i%n==n-3):\n            count+=1\n    elif(n<=16):\n        if((i%n==0 or i%n==n-1 or i%n==n-2) and (i+1)%n==0):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-1):\n            count+=1\n        elif((i%n==0 or i%n==n-1 or i%n==n-2) and (i+1)%n==n-2):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-3):\n            count+=1\n        elif((i%n==0 or i%n==n-1 or i%n==n-2) and (i+1)%n==n-1):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-2):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-3):\n            count+=1\n    elif(n<=24):\n        if((i%n==0 or i%n==n-1 or i%n==n-2) and (i+1)%n==0):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-1):\n            count+=1\n        elif((i%n==0 or i%n==n-1 or i%n==n-2) and (i+1)%n==n-2):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-3):\n            count+=1\n        elif((i%n==0 or i%n==n-1 or i%n==n-2) and (i+1)%n==n-1):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-2):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-3):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-1):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-2):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-3):\n            count+=1\n    else:\n        if((i%n==0 or i%n==n-1 or i%n==n-2) and (i+1)%n==0):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-1):\n            count+=1\n        elif((i%n==0 or i%n==n-1 or i%n==n-2) and (i+1)%n==n-2):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-3):\n            count+=1\n        elif((i%n==0 or i%n==n-1 or i%n==n-2) and (i+1)%n==n-1):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-2):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-3):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-1):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-2):\n            count+=1\n        elif((i%n==n-1 or i%n==n-2 or i%n==0) and (i+1)%n==n-3):\n            count+=1\nprint(count)\nlst = []\nfor i in range(n*n):\n    if(i%n==0 or i%n==1 or i%n==n-1 or i%n==n-2):\n        lst.append(i+1)\nlst.sort()\nfor i in lst:\n    print(i, end=' ')"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5') == '3\\n1\\n0\\n'\nassert solution('5\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5') == '3\\n1\\n0\\n'\nassert solution('5\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5') == '3\\n1\\n0\\n'\n\n\"\"\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 5 7\\n3') == '3'\nassert solution('4\\n1 3 5 7\\n3\\n1') == '3'\nassert solution('4\\n1 3 5 7\\n3\\n1\\n3') == '0'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n5 7''') == '1'\nassert solution('''4\n1 3 5 7''') == '0'\nassert solution('''3\n4 6''') == '1'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '3'\nassert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '0'\nassert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '0'\nassert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '3'\nassert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '1'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\\n\") == \"3\\n1\\n0\\n\"\nassert solution(\"4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\\n\") == \"3\\n1\\n1\\n\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == '0'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\\n\") == \"3\\n1\\n0\\n\"\nassert solution(\"4\\n1 2 3 4\\n2\\n3\\n4\\n\") == \"3\\n1\\n0\\n\"\nassert solution(\"4\\n1 2 3 4\\n3\\n2\\n4\\n\") == \"1\\n0\\n3\\n\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '1'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4\n1 3 5 7\n3\n2 2\n2 5\n1 5\n\"\"\") == \"3\\n1\\n0\\n\"\n\nassert solution(\"\"\"\n6\n1 3 5 7 8 9\n3\n2 2\n2 5\n1 5\n4 4\n1 3\n\"\"\") == \"3\\n1\\n0\\n1\\n\"\n\nassert solution(\"\"\"\n4\n1 3 5 7\n3\n2 2\n2 5\n1 5\n\"\"\") == \"3\\n1\\n0\\n1\\n\"\n\nassert solution(\"\"\"\n1\n5\n1 5\n\"\"\") == \"0\\n\"\n\nassert solution(\"\"\"\n5\n1 3 5 7 8 9\n3\n2 2\n2 5\n1 5\n4 4\n1 3\n\"\"\") == \"3\\n1\\n0\\n0\\n1\\n\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    4\n    1 3 5 7\n    3\n    2 2\n    2 5\n    1 5\n    \"\"\"\n    ) == \"3\"\n\nassert solution(\n    \"\"\"\n    3\n    2 1\n    2 5\n    1 5\n    \"\"\"\n    ) == \"1\"\n\nassert solution(\n    \"\"\"\n    1\n    1\n    \"\"\"\n    ) == \"1\"\n\nassert solution(\n    \"\"\"\n    5\n    5\n    4\n    3\n    2\n    1\n    \"\"\"\n    ) == \"1\"\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 1\n1 1 -2 0\n''') == '0'\n\nassert solution('''\n3 1\n1 1 2\n0 2 -2\n3 -3 0\n''') == '1'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '2 1\\n1 1 -2 0\\n'\n    ) == '0'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 1\n1 1 -2 0\n''') == '0'\n\nassert solution('''\n10 5\n0 0 -1 0\n0 0 1 0\n0 0 0 1\n1 0 -1 0\n1 0 1 0\n0 0 -1 0\n0 0 1 0\n1 0 -1 0\n1 0 1 0\n0 0 -1 0\n0 0 1 0\n''') == '2'\n\nassert solution('''\n1 100\n1 -1 0\n0 -1 0\n0 -1 0\n1 1 1\n''') == '41'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1\\n1 1 -2 0') == '0'\nprint('YOUR CODE IS CORRECT!')\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1') == '0'\nassert solution('2 2') == '1'\nassert solution('3 3') == '2'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1\\n1 1 -2 0') == '0'\nassert solution('5 1\\n1 1 -2 2 1\\n1 1 -2 2 3\\n1 1 -2 2 3 4\\n1 1 -2 2 4 5\\n1 1 -2 3 4 5') == '1'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 -2 0\\n') == '0\\n'\nassert solution('2 2 -2 2\\n') == '0\\n'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 5\n4 -2 0 2 1\n2 4 2 -2 -1\n3 1 1 2 0\n''') == '1'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 1\n1 1 -2 0\n''') == '0'\nassert solution('''\n2 2\n1 1 1 1\n2 -1 2 -1\n''') == '1'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '194'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6\n5\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n2020 10 23\n2020 10 26\n''') == '194'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n2019 10 17\n2019 10 18\n2019 10 19\n2020 10 01\n2020 10 02\n2020 10 16\n2020 10 23\n''') == '194'\n\nassert solution('''4\n2019 10 17\n2019 10 18\n2019 10 19\n2019 10 20\n2020 10 01\n2020 10 02\n2020 10 16\n2020 10 23\n''') == '192'\n\nassert solution('''5\n2019 10 17\n2019 10 18\n2019 10 19\n2019 10 20\n2020 10 01\n2020 10 02\n2020 10 16\n2020 10 23\n''') == '193'\n\nassert solution('''3\n2019 10 18\n2019 10 19\n2020 10 01\n2020 10 02\n2020 10 16\n2020 10 23\n''') == '194'\n\nassert solution('''4\n2019 10 18\n2019 10 19\n2019 10 20\n2020 10 01\n2020 10 02\n2020 10 16\n2020 10 23\n''') == '192'"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n2020 10 23\n''') == '194'\n\nassert solution('''\n3\n2019 10 18\n2019 10 19\n2019 10 20\n''') == '0'\n\nassert solution('''\n8\n2020 20 15\n2020 20 18\n2020 20 21\n2020 20 22\n2020 20 23\n2020 20 25\n2020 20 28\n2020 20 29\n2020 20 30\n''') == '0'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n1\\n10\\n1 10\\n1 10\\n2\\n2019 10 18\\n2019 10 19\\n') == '194'\nassert solution('2\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23\\n') == '194'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '84959'\nassert solution('1') == '84959'\nassert solution('2') == '377777'\nassert solution('3') == '103733'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"194\"\nassert solution(\"5\") == \"194\"\nassert solution(\"10\") == \"194\"\n\"\"\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n2018 10 21\n2018 10 21\n2018 10 21\n''') == '194'\nassert solution('''\n4\n2018 10 21\n2018 10 21\n2018 10 21\n2018 10 21\n''') == '2019 10 25'\nassert solution('''\n2\n2019 10 16\n2020 10 03\n''') == '20190208'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"5\") == \"\"\nassert solution(\"1\") == \"\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n10\n2\n10 10\n\"\"\") == \"194\"\nassert solution(\"\"\"\n5\n0 1 6\n\"\"\") == \"0 1 6\"\nassert solution(\"\"\"\n10\n1 2 3\n\"\"\") == \"0 1 2 3\"\nassert solution(\"\"\"\n7\n0 1 0\n0 2 0\n0 3 0\n1 4 0\n1 5 0\n2 6 0\n2 7 0\n\"\"\") == \"0 1 2 3 4 5 6 7\"\nassert solution(\"\"\"\n10\n4 1 0\n1 2 0\n2 3 0\n\"\"\") == \"4 1 2 3\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity 0'\nassert solution('5 10 10 5 10 0') == '5 12.5'\nassert solution('6 10 10 10 10 0') == '6 12.5'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 10 10 10 10 0') == \"negative-infinity 0\\n5 12.5\\nnegative-infinity -5\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 10 10 10 10 0\") == \"negative-infinity 0\"\nassert solution(\"5 10 10 5 10 0\") == \"5 12.5\"\nassert solution(\"6 10 10 10 10 0\") == \"positive-infinity -5\"\nassert solution(\"10 10 10 10 10 0\") == \"positive-infinity 10\"\nassert solution(\"0 0 0 0 0 0\") == \"positive-infinity 0\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 10 10 10 10 0\\n5 10 10 5 10 0') == \"negative-infinity 0\\n5 12.5\\nnegative-infinity -5\"\nassert solution('6 10 10 10 10 0\\n6 10 10 5 10 0') == \"negative-infinity -5\\n6 12.5\\nnegative-infinity -5\"\nassert solution('10 10 10 10 10 0\\n10 10 10 5 10 0') == \"negative-infinity -5\\n10 12.5\\nnegative-infinity -5\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity 0'\nassert solution('5 10 10 5 10 0') == 'negative-infinity -5'\nassert solution('6 10 10 10 10 0') == '6 12.5'\nassert solution('6 10 10 5 10 0') == '6 10.5'\n\nimport sys\n\nlines = sys.stdin.readlines()\n\nclass Puzzle:\n    def __init__(self):\n        pass\n    def solve(self, lines):\n        pass\n\nclass Maze:\n    def __init__(self):\n        pass\n    def solve(self, lines):\n        pass\n\nclass HuntAndKill:\n    def __init__(self):\n        pass\n    def solve(self, lines):\n        pass"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 10 10 10 10 0\") == \"negative-infinity 0\"\nassert solution(\"5 10 10 5 10 0\") == \"negative-infinity -5\"\nassert solution(\"6 10 10 10 10 0\") == \"12.5\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 10 10 10 10 0''') == 'negative-infinity 0'\nassert solution('''5 10 10 5 10 0''') == '5 12.5'\nassert solution('''6 10 10 10 10 0''') == 'negative-infinity -5'\nassert solution('''6 10 10 10 10 0''') == '6 12.5'\nassert solution('''5 10 10 10 10 10 0''') == 'negative-infinity -5'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1 1 1\") == \"5 12.5\"\nassert solution(\"5 10 10 10 10 0\") == \"5 12.5\"\nassert solution(\"6 10 10 10 10 0\") == \"5 12.5\""
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 10 10 10 10 0\") == \"negative-infinity 0\"\nassert solution(\"6 10 10 10 10 0\") == \"negative-infinity -5\"\n\n\"\"\""
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity 0'\nassert solution('6 10 10 10 10 0') == '5 12.5'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n''') == '2'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n''') == '2'\nassert solution('''\n4 4\n100 0\n200 200\n300 100\n400 -200\n50 10000\n75 200\n400 -40000\n''') == 'IMPOSSIBLE'\nassert solution('''\n6 6\n5000 2\n10000 2\n3000 2\n5000 -4\n3000 2\n100 50\n''') == '2'\n'''\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 4\\n100 30000\\n200 20000\\n300 10000\\n400 0\") == \"2\"\nassert solution(\"4 4\\n100 30000\\n200 20000\\n300 10000\\n400 0\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n''') == '2'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000''') == '2'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n10 5\n1 0\n0 1\n0 2\n3 1\n0 3\n4 1\n1 5\n0 4\n5 1\n1 2\n3 2\n1 3\n4 2\n2 2\n3 1\n4 1\n2 3\n4 2\n1 3\n1 4\n2 1\n4 1\n2 2\n3 3\n''') == '2'\nassert solution('''\n2\n1 4\n4 3\n2 4\n4 1\n4 5\n3 3\n3 1\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"5 5\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"10 10\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n100 300 200 500 600\\n300 400 100 200 300 200\\n500 200 300 200 400\\n150 500 500 200 300 200\\n-100 200 500 300 400 300\\n-500 100 200 200 200 500\\n200 200 200 300 200 200\\n-400 300 200 400 500 300\\n200 200 300 500 500 200\\n-200 300 500 200 300 200\\n100 300 200 200 200 300\\n400 200 200 200 200 200\\n-500 500 500 200 500 300\\n-100 200 500 500 200 300\\n200 300 500 200 300 300\\n0 0\\n2\") == \"2\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n''') == '345 2'\nassert solution('''\n5 5\n5 1\n4 3\n-6 -3\n3 1\n''') == '501'\nassert solution('''\n3 3\n5 6\n5 6\n4 3\n''') == '16'\n\n\"\"\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100''') == '345 2'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 4\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n''') == '345 2'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"345 2\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2'\nassert solution('3 3\\n1 1 2 3\\n4 1 2 3\\n3 1 2 3') == '100 0'\nassert solution('3 4\\n-1 2 3\\n-4 5 6\\n7 8 9\\n1 2 3') == '100 0'\nassert solution('3 5\\n1 1 1 1 1\\n-1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1') == '0 1'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '1 1\\n-2 -1\\n1 1\\n'\nassert solution('3 3') == '3 3\\nrotS 3 1\\nrotS 3 1\\nnegR 3\\nrotS 3 1\\nnegR 3\\n'\nassert solution('4 4') == '4 4\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\n'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"3 4\n    1 -2 5 200\n    -8 0 -4 -10\n    11 4 0 100\"\"\") == \"\"\"345 2\n    rotS 2 1\n    negR 2\"\"\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2\\nrotS 2 1\\nnegR 2'"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n-1 0 -4\\n11 4 0 100') == \"345 2\"\nassert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == \"345 2\"\nassert solution('5 3\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == \"345 2\"\nassert solution('4 3\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == \"345 2\"\nassert solution('5 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == \"345 2\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n''') == '345 2\\nrotS 2 1\\nnegR 2\\n'''\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '0.5'\nassert solution('1 2 2') == '0.0'\nassert solution('1 5 3') == '0.0'\nassert solution('5 2 2') == '0.0'\nassert solution('3 5 4') == '0.5'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '0.5'\nassert solution('5 3 7') == '2.5'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '0.5'\nassert solution('5 5') == '2.2'\nassert solution('10 10') == '2.2'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"0.5\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"3 3\") == \"0.5\"\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0.5\"\nassert solution(\"3 3\\n1 1 1\") == \"0.5\"\nassert solution(\"8 3\\n5 1 1\\n5 3 2\\n3 2 1\\n2 2 1\\n3 2 2\\n3 2 1\\n2 3 1\\n1 2 2\\n3 1 1\\n3 1 1\\n4 1 1\\n1 4 2\\n1 4 2\\n1 2 3\") == \"1.0\"\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4\\n1 2 1\\n3 2 1\\n3 2 1\\n') == '0.5'\nassert solution('1 2\\n3 2\\n5 2\\n7 2\\n') == '0.0'\nassert solution('10 50\\n1 2 1\\n3 2 1\\n3 2 1\\n5 2 1\\n7 2 1\\n') == '0.0'\n\n---------------------\n\n## Problem 9\nThe function you are asked to write will take an array of integers and return an integer. The function will take in a list of numbers and return the number of unique integers from the list.\n\nIt is important to note that an empty list has one element, which should be considered as unique."
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2\n3 1 1\n''') == '0.5'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '0.5'\nassert solution('5 4') == '4.0'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '1.0000'\nassert solution('1000000000 7') == '2.00000'\nassert solution('5 6 7 8') == '2.0000000'\nassert solution('1000000000 1 1 1 1 1 1 1 1') == '1.000000'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\n2 1 1\") == \"0.5\"\nassert solution(\"10 10\\n1 1 1\") == \"1.0\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4 3\n5 6\n1 2\n2 4\n3 4\n\"\"\") == \"1 4\"\nassert solution(\"\"\"\n10 4\n3 4\n2 4\n3 6\n1 7\n5 2\n5 7\n3 8\n2 2\n2 5\n4 2\n5 1\n4 6\n5 7\n4 8\n\"\"\") == \"2 5 3 4\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('9 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9') == '1 4 5\\n2 6 7\\n2 6 8\\n3 9\\n'\nprint(solution('10 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10')) == '1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n'"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n\"\"\") == \"1 4 5\\n2 6 7\\n\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"1 4\"\nassert solution(\"3 4\") == \"1 2\"\nassert solution(\"7 8\") == \"3 6 5 7\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 11') == '11 10'\nassert solution('12 14') == '11 12'\nassert solution('13 13') == '13 13'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5 6 7 8 9 2 6 8 5 9'\n\nassert solution('''\n10 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5 6 7 8 9 2 6 8 5 9'\n\nassert solution('''\n10 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5 6 7 8 9 2 6 8 5 9'\n\nassert solution('''\n10 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5 6 7 8 9 2 6 8 5 9'\n\nassert solution('''\n10 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5 6 7 8 9 2 6 8 5 9'\n'''\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 5\n1 4\n3 4\n3 5\n3 6\n3 7\n2 8\n2 9\n''') == '1 4 5 2 6 7 3 8 9'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('9 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9') == '1 4 5 2 7 6 8'\nassert solution('4 4\\n1 4\\n2 5\\n3 5\\n3 5\\n3 5\\n3 5\\n3 5\\n4 5\\n5 5\\n5 5\\n4 5\\n5 5\\n') == '1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5\\n2 6 7\\n2 6 7\\n2 6 7\\n3 8 3 9\\n4 8 9\\n3 8 9\\n6 8 9\\n5 9'\nassert solution('''\n6 17\n5 9\n5 7\n4 6\n4 8\n3 5\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3 7\n4 6\n4 8\n3"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"9 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9\\n\") == \"2 6 7\\n1 4 5\\n\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000') == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('11 2') == '1350'\nassert solution('12000') == '1350'\nassert solution('9000') == '5000'\nassert solution('4500') == '5010'\nassert solution('10000') == '10000'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(s) == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('11 2') == '13500'\nassert solution('12000') == '13500'\nassert solution('9000') == '13500'\nassert solution('4500') == '13500'\nassert solution('10000') == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 1\n11000\n\"\"\") == \"13500\"\nassert solution(\"\"\"\n2 1\n12000\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"11 2\") == \"1350\"\nassert solution(\"12000\") == \"1350\"\nassert solution(\"9000\") == \"1250\"\nassert solution(\"4500\") == \"1350\"\nassert solution(\"10000\") == \"1250\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"13500\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('11 2') == '1350'\nassert solution('12000') == '1250'\nassert solution('9000') == '850'\nassert solution('4500') == '475'\nassert solution('10000') == '1350'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"11 2\") == \"13500\"\nassert solution(\"12000\") == \"18000\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n''') == '13500'\nassert solution('''\n11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n''') == '13500'"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 4 4 4 4\nSample Output:\nHot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    2 16\n    Hot cross buns! = Hot cross buns! =\n    4 4 4 4 4 4 4 4\n    One a pen- ny, Two a pen- ny, Hot cross buns! =\n    2 2 2 2 2 2 2 2 4 4 4 4\n    \"\"\"\n) == \"\"\"\nHot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 16') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n\nsolution('2 6')\n'''\n\nimport sys\nfrom itertools import combinations\nimport copy"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 16') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 16\") == \"Hot_cross_buns!_=___Hot_cross_buns!_=\\n________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\"\nassert solution(\"1 1\") == \"\"\nassert solution(\"1 1 1 2 2\") == \"One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\"\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 4 4 4 4''') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=''',stdin.strip())\n\nassert solution('''1 1\na\nb\nc\n1 1\n1 1\n1 1\nd\ne\nf''') == 'a\\"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 16\") == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot___cross____buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\n\\nHot_cross_buns!_=_Hot_cross_buns!_=_\\nHot_cross_buns"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 10\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 4 4 4 4''') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n\nassert solution('''4 2\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 4 4 4 4''') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 16\\n4 4 4 4 4 4 4 4\\nHot cross buns! =\\n2 2 2 2 2 2 2 2 2 4 4 4 4\") == \"Hot_cross_buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 1') == '33'\nassert solution('4 5 3 1') == '34'\nassert solution('5 3 2 2') == '33'\nassert solution('5 2 5 5') == '25'\nassert solution('1 2 5 2') == '5'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 1') == '33'\nassert solution('3 2 2') == 'None'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2 1') == '33'\nassert solution('3 2 2') == '0'\nassert solution('3 2 2') == '0'\n\nstdin = \"\"\"\n4 2 4\n1 2 50\n1 3 50\n2 4 100\n3 4 100\n\"\"\"\nassert solution(stdin) == '200'"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\n\nassert solution('''3 2 2\n2 1 2\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '22'\n\nassert solution('''2 3 1\n2 1 10\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\\n\") == \"33\"\nassert solution(\"1\\n1 2 3\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n\"\"\") == \"33\"\nassert solution(\"\"\"\n10 3 1\n1 2 8 2 2 2 1\n1 4 3 1\n1 6 3 2 2\n1 9 3 1\n1 2 10 5\n1 3 7 1\n1 4 6 1\n1 6 10 3\n1 8 10 3\n2 10 5 2\n1 9 3 1\n1 3 2 3\n1 3 3 1\n2 10 5 1\n1 8 9 1\n1 9 7 1\n1 6 10 5\n2 10 5 2\n1 9 3 1\n1 3 2 3\n1 3 3 1\n2 10 5 2\n1 8 9 1\n1 9 7 1\n1 6 10 5\n\"\"\") == \"39\"\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '''\n    2 2 1\n    1 2 10\n    1 4 6 6\n    1 6 10 5\n    2 10 30 33\n    '''\n) == '33'\nprint('All tests passed!')"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n\"\"\") == \"33\"\nassert solution(\"\"\"\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n\"\"\") == \"31\"\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2 1\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\n\nassert solution('''\n4 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\n\nassert solution('''\n3 3 2\n1 2 2\n1 4 1\n1 6 1\n2 4 3\n''') == '15'\n\nassert solution('''\n5 2 5\n1 3 5\n1 5 3\n1 7 1\n1 8 3\n1 9 2\n2 4 3\n''') == '25'\n\nassert solution('''\n5 3 1\n1 2 1\n1 4 1\n1 6 1\n2 4 3\n''') == '25'"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"405\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '405'\nassert solution('2') == '15'\nassert solution('2') == '10'\nassert solution('1') == '20'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n5 10\\n5 1 4') == '15'\nassert solution('3\\n5 10\\n5 1 4') == '15'\nassert solution('3\\n15 10\\n5 1 4') == '15'\nassert solution('3\\n15 10\\n5 3 2') == '12'\nassert solution('3\\n15 10\\n5 3 2') == '12'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 1 2 2') == '0'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n20 15 10\\n7 7\\n30 0') == '405'\nassert solution('2\\n20 15 10\\n7 7\\n30 0') == '405'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '405'\nassert solution('4') == '2876'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n20 10 10 20 20 20') == '405'\nassert solution('4\\n1 1 1 1') == '5'\nassert solution('5\\n1 1 1 1') == '3'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n20 15 10\n7 7\n30 0\n''') == '405'\nassert solution('''\n3\n20 15 10\n7 7\n100 100\n''') == '330'\n'''\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3 3 1\") == \"10 8 3\"\nassert solution(\"4\\n4 3 4 4\") == \"10 8 21 14\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n2 4 7 3 8''') == '28 4 21 14.0'\nassert solution('''3\n1 2 3''') == '1 2 3'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"4 5 6\"\nassert solution(\"4 5 6\") == \"1 2 3\"\nassert solution(\"3 1 2\") == \"2 3\"\nassert solution(\"5 7 9\") == \"7 8 9\"\nassert solution(\"5 8 7 9\") == \"6 9\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '28 21 14.0'\nassert solution('''\n10\n1 2 4 7 5 9 8 6 3 8 7 2 1\n''') == '39 59 13.0'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '28 4 21 14.0'\nassert solution('2') == '28 4 21 14.0'\nassert solution('3') == '28 4 21 14.0'\nassert solution('4') == '28 4 21 14.0'"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '28 4 21 14.0'"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1.000000\"\nassert solution(\"2\") == \"2.000000\"\nassert solution(\"4\") == \"28.000000\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '28 2 1'\nassert solution('2 3 1') == '1 28 1'\nassert solution('3 1 2') == '1 2 28'\nassert solution('4 7 1 2') == '1 2 1 7'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == \"28 4 21 14.0\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 4 7') == '28 4 21 14.0'\nprint('Solution:')\nprint(solution(*_))\n\n------SOLUTION------\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n1 2 3 4\n2 3 4 1\n''') == 'yes'\n\nassert solution('''\n2 2\n1 2 3 4\n2 3 4 1\n''') == 'yes'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 2\n1 2 3 4\n2 3 4 1\n''') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\nassert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\") == \"yes\\n1 2 3 4\\n2 3 4 1\"\nassert solution(\"5 2\\n1 2 3 4 5\\n2 3 4 1 5\") == \"yes\\n1 2 3 4 5\\n2 3 4 1 5\"\nassert solution(\"5 3\\n1 2 3 4 5\\n2 3 4 1 5\\n3 4 1 2 5\") == \"no\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\\n\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\""
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2\n1 2 3 4\n2 3 4 1\n''') == 'no'\nassert solution('''\n4 2\n1 2 3 4\n2 3 4 1\n''') == 'yes'\nassert solution('''\n1 2\n2 3\n3 4\n''') == 'yes'\nassert solution('''\n3 1\n3 4\n''') == 'no'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\\n\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2\n1 2 3\n2 3 4 1\n3 4 1 2\"\"\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\"\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2\n1 2 3\n2 3 4 1\n''') == 'yes\\n1 2 3\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n'''\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 2\n1 2 3 4\n2 3 4 1\n''') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n'''\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 2\n1 2 3 4\n2 3 4 1\n\"\"\") == \"yes\"\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n10 10 -10 -4 10\\n') == '10.000000000'\nassert solution('6\\n0 0 0 0 0 0\\n') == '0.000000000'"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n10 10 -10 -4 10\n''') == '10.000000000'''\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"10.000000000\"\nassert solution(\"10\") == \"10.000000000\"\nassert solution(\"-10\") == \"0.000000000\"\nassert solution(\"-10 -10\") == \"0.000000000\"\nassert solution(\"10 -10\") == \"5.000000000\"\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"2.0\"\nassert solution(\"1\") == \"0.0\"\nassert solution(\"3\") == \"1.5\"\nassert solution(\"4\") == \"2.0\"\nassert solution(\"5\") == \"2.5\"\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '10.000000000'\nassert solution('10') == '0.000000000'\nassert solution('100') == '0.000000000'\nassert solution('1000') == '0.000000000'\nassert solution('-10') == '0.000000000'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.000000000'\nassert solution('100\\n1 1 1 1 1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n10 10 -10 -4 10') == '10.000000000'\nassert solution('2\\n-1 -2 1 -3 2') == '0.3333333333'\nassert solution('3\\n-1 0 0') == '0.000000000'\nassert solution('4\\n-1 -4 0 0') == '0.000000000'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '10.000000000'\nassert solution('2') == '0.0'\nassert solution('1') == '0.0'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"10\"\nassert solution(\"5 2\") == \"10.5\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n3\\n2\\n45') == '1'\nassert solution('4\\n30\\n3\\n2\\n45') == '1'\nassert solution('5\\n100\\n5\\n3\\n10') == '1'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n30\n3\n2\n45\n''') == '1'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n10\n3\n5\n''') == \"1\", '''(a)'''\nassert solution('''\n2\n12\n2\n12\n''') == \"2\", '''(b)'''\nassert solution('''\n4\n10\n12\n15\n''') == \"1\", '''(c)'''\nassert solution('''\n4\n5\n10\n15\n''') == \"2\", '''(d)'''\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"45\") == \"1\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n3\\n2\\n45\\n') == '1'\nassert solution('4\\n30\\n3\\n2\\n45\\n') == '1'\nassert solution('10\\n5\\n10\\n5\\n10\\n5\\n10\\n5\\n10\\n5\\n10\\n5\\n') == '5'\nassert solution('5\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n') == '1'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('2') == '0'\nassert solution('5') == '0'\nassert solution('6') == '0'"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == '1'"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == 1\nassert solution('5') == 5\nassert solution('9') == 1\nassert solution('25') == 5\nassert solution('1') == 0\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == '1'"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.360000000'\nassert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.000000000'\nassert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 -1.000000000'\nassert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '1.020379658970000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '6 6 3.0 0.66\\n'\n    '2 4 8\\n'\n    '4 6 1\\n'\n    '3 6 1\\n'\n    '4 5 5\\n'\n    '1 5 7\\n'\n    '3 5 3\\n'\n    ) == '0.000000000 1.360000000\\n'\nassert solution(\n    '6 6 3.0 0.66\\n'\n    '2 4 8\\n'\n    '4 6 1\\n'\n    '3 6 1\\n'\n    '4 5 5\\n'\n    '1 5 7\\n'\n    '3 5 3\\n'\n    ) == '0.000000000 1.000000000\\n'\nassert solution(\n    '6 6 3.0 0.66\\n'\n    '2 4 8\\n'\n    '4 6 1\\n'\n    '3 6 1\\n'\n    '4 5 5\\n'\n    '1 5 7\\n'\n    '3 5 3\\n'\n    '2 6 5\\n'\n    '3 5 1\\n'\n    '4 6 1\\n'\n    '2 5 1\\n'\n    '3 5 1\\n'\n    '1 5 1\\n'\n    '4 5 1\\n'\n    '1 6 2\\n'\n    '2 6 1\\n'\n    '1 6 1\\n'\n    '4 6 1\\n'\n    '1 5 2\\n'\n    '2 5 1\\n'\n    '3 5 1\\n'\n    '2 6 1\\n'\n    '2 5 1\\n'\n    '2 5 2\\n'\n    '1 5 2\\n'\n    '3 5 1\\n'\n    '1 5 2\\n'\n    '4 5 2\\n'\n    '3 5 1\\n'\n    '2 6 1\\n'\n    '2 5 1\\n'\n    '3 5 1\\n'\n    '1 6 2\\n'\n    '2 6 1\\n'\n    '2 5 1\\n'\n    '2 5 2\\n'\n    '1 5 2\\n'\n    '3 5 1\\n'\n    '1 5 2\\n'\n    '4 5 2\\n'\n    '3 5 1\\n'\n    '2 6 1\\n'\n    '2 5 1\\n'\n    '3 5 1\\n'\n    '1 6 2\\n'\n    '2 6 1\\n'\n    '2 5 1\\n'\n    '2 5 2\\n'\n    '1 5 2\\n'\n    '3 5 1\\n'\n    '1 5 2\\n'\n    '4 5 2\\n'\n    '3 5 1\\n'\n    '2 6 1\\n'\n    '2 5 1\\n'\n    '3 5 1\\n'\n    '1 6 2\\n'\n    '2 6 1\\n'\n    '2 5 1\\n'\n    '2 5 2\\n'\n    '1 5 2\\n'\n    '3 5 1\\n'\n    '1 5 2\\n'\n    '4 5 2\\n'\n    '3 5 1\\n'\n    '2 6 1\\n'\n    '"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.360000000'\nassert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.000000000'\nassert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 0.360000000'\nassert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 -1.000000000'\nassert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 0.360000000'\n'''\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 6 3.0 0.66') == '0.000000000 1.360000000'\nassert solution('2 4 8') == '0.000000000 1.000000000'\nassert solution('4 6 1') == '0.000000000 1.000000000'\nassert solution('3 6 1') == '0.000000000 1.000000000'\nassert solution('4 5 5') == '0.000000000 0.360000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.360000000'\nassert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.000000000'\nassert solution('4 6 2.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '-1.000000000 -0.360000000'\nassert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 0.360000000'\nassert solution('6 6 2.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.000000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.360000000'\nassert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.000000000'\nassert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 -1.000000000'\nassert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '1.02037965897'\nassert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.880000000 0.000000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0.000000000 1.000000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\nassert solution(\"12 12 4.6 0.66\\n4 6 8\\n6 3 2\\n2 7 6\\n6 7 8\\n6 5 1\\n3 7 7\\n7 5 3\\n6 5 3\\n7 6 6\\n6 2 1\\n6 5 6\\n1 4 4\\n3 7 8\\n5 2 4\\n3 2 5\\n5 6 3\\n6 5 5\\n3 5 3\\n4 3 4\\n5 5 4\\n4 4 7\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\n\n'''\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\nprint(solution(input()))\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == '4'\nassert solution('''\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == '4'\n'''\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_data) == \"4\""
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1\\n2 2\\n') == '2'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n0 0\\n0 3\\n3 3\\n3 0\\n2') == '4'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == '4', 'First'\nassert solution('''\n4\n0 0\n0 -3\n-3 3\n-3 0\n2\n1 1\n2 2\n''') == '4', 'Second'\n\"\"\"\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '4'\nassert solution('2') == '2'\nassert solution('3') == '2'"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '4'\n\"\"\"\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n4\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n5\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '2'\n\nassert solution('10 1') == '10'\n\nassert solution('10 2') == '10'\n\nassert solution('100 10') == '100'\n\nassert solution('100 20') == '100'"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 0\n0 1\n0 2\n''') == '2'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 0\n0 1\n0 2\n0 3\n\"\"\") == \"2 3 1\"\n\nassert solution(\"\"\"\n4 0\n0 1\n0 2\n0 3\n\"\"\") == \"3 2 1\"\n\nassert solution(\"\"\"\n4 0\n0 1\n0 2\n0 3\n\"\"\") == \"3 1 2\"\n\nassert solution(\"\"\"\n4 0\n0 1\n1 2\n2 3\n\"\"\") == \"3 2 1\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 0') == '2'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n6 0\n0 1\n0 2\n0 3\n\"\"\") == \"\"\"\n2\n3 2\n3 1\n\"\"\"[:-1]\n\nassert solution(\"\"\"\n4 0\n0 1\n0 2\n0 3\n\"\"\") == \"\"\"\n3\n3 2\n3 1\n\"\"\"[:-1]"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '4 0\\n'\n    '0 1\\n'\n    '0 2\\n'\n    '0 3\\n'\n) == '2 1 2 3'\nassert solution(\n    '4 0\\n'\n    '1 0\\n'\n    '0 1\\n'\n    '0 2\\n'\n) == '1 3 2'\nassert solution(\n    '4 0\\n'\n    '0 1\\n'\n    '0 2\\n'\n    '1 3\\n'\n) == '3 1 2'\nassert solution(\n    '4 1\\n'\n    '1 0\\n'\n    '0 1\\n'\n    '0 2\\n'\n) == '4 1'\nassert solution(\n    '4 0\\n'\n    '1 0\\n'\n    '0 1\\n'\n    '2 3\\n'\n    '0 2\\n'\n) == '4 2'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4 0\n0 1\n0 2\n0 3\n\"\"\") == \"2 3 1\"\n\nassert solution(\"\"\"\n4 0\n0 1\n0 2\n0 3\n1 4\n\"\"\") == \"2 1 3 4\"\n\nassert solution(\"\"\"\n3 0\n2 1\n3 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3 0\n0 1\n0 2\n1 4\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n10 1\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\n17 19\n18 20\n19 21\n20 22\n21 23\n22 24\n23 25\n24 26\n25 27\n26 28\n27 29\n28 30\n29 31\n30 32\n31 33\n30 34\n29 35\n28 36\n27 37\n26 38\n25 39\n24 40\n23 41\n22 42\n21 43\n20 44\n19 45\n18 46\n17 47\n16 48\n15 49\n14 50\n13 51\n12 52\n11 53\n10 54\n9 55\n8 56\n7 57\n6 58\n5 59\n4 60\n3 61\n2 62\n1 63\n\"\"\") == \"2 1 6 12\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 0\") == \"2\\n3 2\\n3 1\\n\"\nassert solution(\"3 0\") == \"1\\n2\\n3\\n\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 0') == '2\\n3 2\\n'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 0\n0 1\n0 2\n0 3\n\"\"\") == \"2 3 1\"\nassert solution(\"\"\"\n4 0\n0 1\n0 2\n0 3\n\"\"\") == \"4 3 1\"\n\nassert solution(\"\"\"\n5 0\n0 1\n0 2\n0 3\n0 4\n\"\"\") == \"3 4 1\"\n\nassert solution(\"\"\"\n6 0\n0 1\n0 2\n0 3\n0 4\n0 5\n\"\"\") == \"4 5 2\"\n\nassert solution(\"\"\"\n5 0\n0 1\n0 2\n0 3\n0 4\n\"\"\") == \"6 4 2\""
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '2\\n'\n    '0 0 0\\n'\n    '0 1.5 0\\n'\n    '') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'ok'\nassert solution('2') == 'ok'\nassert solution('3') == 'crash'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n0 0 0\n0 1.5 0\n\"\"\") == \"ok\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n0 0 0\n0 1.5 0\n''') == 'ok'\nassert solution('''\n2\n0 0 0\n0 0 1\n''') == 'crash'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"ok\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n0 0 0\\n0 1.5 0\\n') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n0 0 0\n0 1.5 0\n''') == 'ok'\nassert solution('''\n2\n0 0 0\n0 1.5 0\n''') == 'crash'\nassert solution('''\n2\n0 0 0\n0 0 0\n''') == 'crash'"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n0 0 0\n0 1.5 0\n''') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n    0 0 0\n    0 1.5 0\n\"\"\") == \"ok\"\n\nassert solution(\"\"\"\n    1 0 0\n    0 1.5 0\n\"\"\") == \"crash\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4\n0 0 0\n0 1.5 0\n\"\"\") == \"ok\"\n\nassert solution(\"\"\"\n2\n0 0 0\n0 1.5 0\n\"\"\") == \"crash\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\nassert solution('''\n4 7\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == '4'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4''') == '''7\nRRG'''\nassert solution('''5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4''') == '''2\nRRGG'''\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 5\") == \"1\"\nassert solution(\"4 5\") == \"2\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4') == '2'\nassert solution('6 2\\n2 2\\n2 2\\n3 3\\n5 5\\n6 6\\n3 5\\n5 6\\n7 7\\n8 8\\n0 9\\n0 9\\n9 10\\n10 10\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\n10 10\\n10 10\\n10 10\\n12 12\\n12 12\\n12 12\\n0 10\\n0 10\\"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"9 4\") == \"10\""
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\nassert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '5'\nassert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '1'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4') == '2'\nassert solution('15 3\\n0 2\\n0 4\\n0 6\\n1 8\\n0 7\\n2 9\\n0 10\\n1 12\\n0 11\\n2 14\\n0 13\\n3 16\\n0 15\\n4 18\\n0 17\\n5 20\\n0 19\\n6 22\\n0 21\\n7 24\\n0 23\\n8 26\\n0 25\\n9 28\\n0 27\\n10 30\\n0 29\\n11 32\\n0 31\\n12 34\\n0 33\\n13 36\\n0 35\\n14 38\\n0 37\\n15 40\\n0 39\\n16 42\\n0 41\\n17 44\\n0 43\\n18 46\\n0 45\\n19 48\\n0 47\\n20 50\\n0 49\\n21 52\\n0 51\\n22 54\\n0 53\\n23 56\\n0 55\\n24 58\\n0 57\\n25 60\\n0 59\\n26 62\\n0 61\\n27 64\\n0 63\\n28 66\\n0 65\\n29 68\\n0 67\\n30 70\\n0 69\\n31 72\\n0 71\\n32 74\\n0 73\\n33 76\\n0 75\\n34 78\\n0 77\\n35 80\\n0 79\\n36 82\\n0 81\\n37 84\\n0 83\\n38 86\\n0 85\\n39 88\\n0 87\\n40 90\\n0 89\\n41 92\\n0 91\\n42 94\\n0 95\\n43 96\\n0 97\\n98 100\\n0 99\\n99' == '2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\n\nassert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\n\nassert solution('''\n3 4\n0 1\n0 2\n0 4\n0 3\n''') == '3'\n\nassert solution('''\n2 2\n0 1\n0 2\n0 4\n''') == '4'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\nassert solution('''\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '1'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('3 1 2') == '1'\nassert solution('6 6 3') == '3'\nassert solution('4 8 7') == '2'\nassert solution('11 11 11') == '3'\n\n\"\"\"\n\nimport math\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''7 3 3 3\n    A B C\n    D E F\n    3 A E G\n    3 A C E\n    3 B D F\n    ''') == '2'\n\nassert solution('''10 2 7 3\n    A B C D\n    E F G\n    H I J\n    K L M\n    N O P\n    Q R S\n    T U V\n    W X Y\n    Z''') == '1'\n\nassert solution('''5 5 5 5\n    A B C D\n    E F G H\n    I J K L\n    M N O P\n    Q R S T\n    U V W X\n    Y Z\n    ''') == '3'"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F') == '2'\nassert solution('7 3 3 4\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F') == '1'\nassert solution('9 5 6 4\\nA B C\\nD E F\\n8 F G H\\n3 A E G\\n4 B D E\\n5 G H J\\n6 E J K\\n7 J K L') == '2'\nassert solution('10 15 5 1\\nA B C\\nD E F\\nG H I J\\n8 G H I J\\n9 I J K\\n10 I K L\\n11 K L M\\n12 M L N\\n13 N M L\\n14 M L N\\n15 N M L') == '1'\nassert solution('12 21 12 13\\nA B C\\nD E F\\nG H I J\\n8 G H I J\\n9 I J K\\n10 I K L\\n11 K L M\\n12 M L N\\n13 N M L\\n14 M L N\\n15 N M L\\n16 N M L\\n17 M L N\\n18 N M L') == '1'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7 3 3 3\") == \"2\"\nassert solution(\"10 8 10 8\") == \"4\"\n\nimport re\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"5 2 3\") == \"1\"\nassert solution(\"4 3 1\") == \"2\"\nassert solution(\"7 4 4\") == \"3\"\nassert solution(\"5 4 5\") == \"5\"\n\n\"\"\"\n\nfrom itertools import combinations\n\nn, r, f, t = map(int, input().split())\nstate_list = input().split()\n\nfactory_list = input().split()\n\ntransportation_list = list()\nfor i in range(0, t):\n    transportation_list.append(input().split())\n\ncombinations_list = list(combinations(state_list, r))\nfactory_list = list(combinations(factory_list, f))\ntransportation_list = list(combinations(transportation_list, t))\n\nfinal_list = []\nfor i in range(0, len(combinations_list)):\n    for j in range(0, len(factory_list)):\n        for k in range(0, len(transportation_list)):\n            tmp = combinations_list[i]\n            tmp.extend(factory_list[j])\n            tmp.extend(transportation_list[k])\n\n            final_list.append(tmp)\n\nfinal_list.sort()\nfinal_list.sort(key=lambda s: (len(s), s))\n\nfor i in final_list:\n    print(len(i))\n    print(' '.join(i))"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3 2 3') == '2'\nassert solution('7 3 3 3') == '2'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == \"2\"\n'''\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == \"2\"\nassert solution('''\n4 5 6 3\nAB CF\nCD HD\nEF FG\nGH IJ\n''') == \"1\"\nassert solution('''\n10 10 10 10\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n''') == \"2\"\nassert solution('''\n10 10 10 10\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n''') == \"3\"\n'''\n'''\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '7 3 3 3'\n    'A B C'\n    'D E F'\n    '3 A E G'\n    '3 A C E'\n    '3 B D F') == '2'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\nYYY\nNYY\nYNY\n''') == '2 1 3'\n\nassert solution('''\n2\nYYY\n''') == '1 2'\n'''\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\nYYY\\nNYY\\nYNY') == '2 3 1 2'\n\n'''\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\nYYY\\nNYY\\nYNY\\n') == '2 1 3'\nassert solution('10\\nYNYYYNYYY\\nYYYYYYYYYYY\\nYYYYYYYYYYY\\nYYYYYYYYYYYY\\nYYYYYYYYYYYY\\nYYYYYYYYYYYY\\nYYYYYYYYYYYY\\nYYYYYYYYYYYY\\nYYYYYYYYYYYY\\n') == '10 1 2'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\nYYY\\nNYY\\nYNY') == '1 2 3'\nassert solution('2\\nYYY\\nYYY\\nYYY') == '0'\nassert solution('3\\nYYY\\nYYY\\nYYY') == '3 1 2'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\nYYYYY\\nNYYYY\\nYYYYY\\nY\") == \"1 2 3\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 2 3\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\nYYY\\nNYY\") == \"2 1 2\"\nprint('SUCCESS')"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\\\n2\nYYY\nNYY\nYNY\n''') == '2 1 3\\n3 1 2\\n'\nassert solution('''\\\n1\nYYY\n''') == '1 1 1\\n'\nassert solution('''\\\n3\nYYY\nNYY\nYNY\n''') == '3 3 3\\n'\n\"\"\"\n--- Part Two ---\nOk, so the buttons are all different now. Let\u2019s try again. It turns out that the button dimensions are in the form of $n \\times m$. We can make a grid of buttons and check if the position of a person is valid in the grid.\n\nThis is the size of the grid. We can determine this by getting the minimum $m$ and maximum $n$ from the input. So, the grid will have a width of the maximum $m$ and a height of the minimum $n$. (This is because if we were to put a button on the middle of the grid it would be impossible to have the person standing on the same button twice. This is the reason the grid is constructed as such).\n\nLet\u2019s try to make a program that can tell you how many astronauts can stand on each button. (Remember that in each case we can only put a person on the same button twice. This is a requirement for the problem.)\n\nI\u2019ll start by checking for the minimum $m$ and maximum $n$.\n\nHere\u2019s an example of a grid:\n\n-----Input-----\n3\nYYY\nNYY\nYNY\n3\n1 2 3\n3 1 2\n4\n5\n6\n7\nThe first line is the minimum $m$ and the maximum $n$. The next $n$ lines are three integers that describe the first row, the second row, and the third row of the grid.\n\nThe first row is one of the 3 rows of buttons. The first integer is the minimum width (or height) of the button, the second integer is the maximum width (or height) of the button, and the third integer is the minimum height (or height) of the button.\n\nFor example, here is the grid in the example above:\n\n-----Output-----\nThere are only $3$ rows of buttons, so there is only one possible way to fit 3 astronauts into the grid.\n\n3 2 1\n1 2 1\n3 1 2\n\nThere are only $4$ rows of buttons, so there is only one possible way to fit 4 astronauts into the grid.\n\n4 1 2\n2 1 2\n1 2 1\n3 1 2\n\nIn this case, the first row has a width of 3, a minimum width of 2 and a maximum width of 2. The second row has a width of 1, a minimum width of 1 and a maximum width of 1. And the third row has a width of 2, a minimum width of 2 and a maximum width of 2.\n\nSo, in total, there are only $4$ possible ways to fit 3 astronauts into the grid.\n\nNow, let\u2019s try to find out how many astronauts can stand on each button. To do this, we\u2019ll get to work with a grid of buttons that has a width of $n \\times m$. This is why we can define a grid of buttons as a matrix. We will define a matrix as follows:\n\nLet\u2019s consider a matrix of size $m \\times n$ with each cell having a value of either $1$ or $0$. So, we can represent a matrix like this:\n\n1 1 1\n1 0 0\n1 1 1\n\nThe $1$ cells have a value of one, and the $0$ cells have a value of zero. We can represent a matrix in Python like this:\n\n[\n[1, 1, 1],\n[0, 0, 0],\n[1, 1, 1],\n]\n\nWe will call a cell $i, j$ in the matrix a \u201csquare\u201d if it has a value of either $1$ or $0$. A square $i, j$ is in the grid if it has a value of $1$ or $0$. We can represent a matrix like this:\n\n[[1, 1, 1],\n[0, 0, 0],\n[1, 1, 1],\n]\n\nThe squares are in the middle of the matrix (i.e., if we had a matrix like this, the middle would be square $3$ in the top left corner):\n\n[\n[1, 1, 1],\n[0, 0, 0],\n[1, 1, 1],\n]\n\nNote that a square is in the middle of the matrix if it is in the top or bottom left or right or bottom right.\n\nIn this case, we can represent the grid like this:\n\n[[1, 1, 1, 1],\n[0, 0, 0, 0],\n[1, 1, 1, 1],\n[1, 1, 1, 1],\n]\n\nSo we have a grid of size $m \\times n$ with each cell having a value of either $1$ or $0$. To find out how many astronauts can stand on each button, we have to get the first few rows of the matrix. For each row we can get the minimum $m$ and maximum $n$ of the row. So, we can compute the minimum $m$ and maximum $n$ for each row, and then calculate the sum of the minimums and maximums for each row. The output should be a single integer that represents the number of astronauts that can stand on each button.\n\nHere is a smaller example:\n\n1 1 1\n1 0 0\n1 1 1\n\nHere is the smallest matrix:\n\n[[1, 1, 1],\n[0, 0, 0],\n[1, 1, 1],\n]\n\nWe can compute the minimum $m$ and maximum $n$ of the row:\n\n1 2\n1 1\n1 1\n\nWe can then calculate the minimum $m$ and maximum $n$ of the row:\n\n1 1\n1 1\n\nWe can then calculate the minimum $m$ and maximum $n$ of the row:\n\n1 2\n1 2\n\nWe can then calculate the minimum $m$ and maximum $n$ of the row:\n\n2 2\n\nNow we can calculate the minimum $m$ and maximum $n$ of the row:\n\n2 2\n\nAnd we can calculate the minimum $m$ and maximum $n$ of the row:\n\n2 2\n\nWe can then calculate the minimum $m$ and maximum $n$ of the row:\n\n2 2\n\nAnd we can calculate the minimum $m$ and maximum $n$ of the row:\n\n2 2\n\nAnd we can calculate the minimum $m$ and maximum $n$ of the row:\n\n2 2\n\nAnd we can calculate the minimum $m$ and maximum $n$ of the row:\n\n2 2\n\nWe can then calculate the minimum $m$ and maximum $n$ of the row:\n\n2 2\n\nWe can then calculate the minimum"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\nNYY\nYNY\n''') == '2 1 2'\nassert solution('''\n2\nNYY\nYYY\n''') == '1 1 1'\nassert solution('''\n3\nYNY\nNYY\nYNY\n''') == '1 1 1'\nassert solution('''\n5\nYNY\nYNY\nYNY\nYNY\nYNY\n''') == '3 1 2 2 3'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\nx.\n.x.\n..x.\n''') == '4'\nassert solution('''\n3 3\nx.\n.x.\n.x.\n''') == '5'\nassert solution('''\n7 7\nxxxxxxxx\nx.xx.xx\nx.xx.xx\nx.xx.xx\nxx.xx.x\nxx.xx.x\nxx.xx.x\n''') == '0'\nassert solution('''\n6 7\nx.x.x.x\n.x.x.x.\nxx.xx.x.\nxx.xx.x.\nxx.xx.x.\nxx.xx.x.\n''') == '12'\nassert solution('''\n10 10\nx.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.\nx.x.x.x.x.x.x\nx.x.x.x.x.x.x\nx.x.x.x.x.x.x\nx.x.x.x.x.x.x\nx.x.x.x.x.x.x\nx.x.x.x.x.x.x\nx.x.x.x.x.x.x\nx.x.x.x.x.x.x\nx.x.x.x.x.x.x\nx.x.x.x.x.x.x\nx.x.x.x.x.x.x\nx.x.x.x.x.x.x\nx.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '4'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '4'\nassert solution('3 4') == '5'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n\"\"\") == \"4\\n0\\n5\"\nassert solution(\"\"\"\n10 5\nx.....x\n........x\n....x.x\n.xx.....\nxxxxxx.\n.xxx.xx\nx.xx.xx\nxx.xx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\nxxxxx.x\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4 0'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\nx.\\n...') == '4\\n0\\n5\\n'\nassert solution('4 5\\n3 1\\n1 1\\n3 3') == '5\\n4\\n1\\n4\\n'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n''') == '4\\n0\\n5'\n''')\nassert solution('''\n5 5\nxxxx\nx.x\nx.x\nxx.\nxxxx\nx.x\n''') == '8\\n4\\n4'\n''')\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\n.....\n...x.\n....''') == \"4\"\n\nassert solution('''3 3\n.x..\n.x..\n.x..\n\n3\n1 1\n2 2\n2 2\nSample Output:\n4\n0\n5\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"4\") == \"0\"\nassert solution(\"3\") == \"5\"\n\"\"\"\n\nfrom collections import deque\n\nimport pytest\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\nx..\\n...\\n\") == \"4\"\nassert solution(\"5\\n1 3\\n1 1\\n3 2\\n\") == \"5\""
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n1\\n3') == '0.000 -0.000'\nassert solution('2\\n3\\n2\\n1') == '0.000 -0.000'\nassert solution('10\\n1\\n1\\n2\\n2\\n3\\n3\\n3\\n4\\n4\\n4\\n5\\n5\\n5\\n5') == '0.000 -0.000'\nassert solution('5\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6') == '0.000 -0.000'\nassert solution('100\\n1\\n1\\n2\\n2\\n3\\n3\\n3\\n4\\n4\\n4\\n5\\n5\\n5\\n5') == '0.000 -0.000'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n5\n3\n4\n5 3\n''') == '4.114 -2.842\\n6.297 -0.784\\n5.000 3.000'\n'''\n\n\nimport math"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2.100'\nassert solution('3') == '3.000'\nassert solution('4') == '4.100'\nassert solution('5') == '5.000'\nassert solution('6') == '6.000'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n5\\n3\") == \"4.114 -2.842\"\nassert solution(\"2\\n8\\n5\\n3\") == \"5.000 3.000\"\nassert solution(\"2\\n5\\n1\\n3\") == \"6.297 -0.784\"\nassert solution(\"3\\n5\\n3\") == \"4.114 -2.842\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3') == '1.118 2.037\\n5.000 3.000\\n'\n\nassert solution('2\\n3') == '4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\\n'\n\nassert solution('4\\n5') == '5.000 3.000\\n4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\\n'\n\nassert solution('10\\n6') == '6.297 -0.784\\n5.000 3.000\\n4.114 -2.842\\n6.098 -1.188\\n5.000 3.000\\n4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\\n4.114 -2.842\\n6.098 -1.188\\n5.000 3.000\\n4.114 -2.842\\n6.098 -1.188\\n5.000 3.000\\n4.114 -2.842\\n6.098 -1.188\\n5.000 3.000\\n4.114 -2.842\\n6.098 -1.188\\n5.000 3.000\\n4.114 -2.842\\n6.098 -1.188\\n5.000 3.000\\n4.114 -2.842\\n6.098 -1.188\\n5.000 3.000\\n'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n3\n3\n4\n5 3\n''') == '3.100'\nassert solution('''\n2\n3\n3\n4\n5 3\n''') == '4.100'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == \"1.118 2.037\"\nassert solution('5') == \"4.114 -2.842\"\nassert solution('3') == \"1.118 2.037\"\nassert solution('4') == \"6.297 -0.784\"\nassert solution('5') == \"4.114 -2.842\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n3\\n1\\n2\\n2\\n') == '1.116 -0.785'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n5\\n3') == '4.114 -2.842'\nassert solution('3\\n1\\n1') == '1.118 2.037'\nassert solution('2\\n2\\n3') == '5.000 3.000'\nassert solution('3\\n1\\n1\\n5\\n1\\n3') == '4.114 -2.842\\n6.297 -0.784\\n5.000 3.000'\nassert solution('4\\n8\\n10\\n5\\n9\\n12\\n3') == '8.000 -0.150\\n12.000 -0.300\\n9.000 1.000\\n5.000 3.000'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1.118 2.037'\nassert solution('2') == '1.118 2.037'\nassert solution('1') == '1.118 2.037'\nassert solution('4') == '6.297 -0.784'\nassert solution('3') == '1.118 2.037'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '13'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 5\n2 3 5 7\n2\n3\n5\n6\n8\n\"\"\") == \"13\"\n\nassert solution(\"\"\"\n5 5\n2 4 3 6 7\n2\n2\n3\n5\n6\n8\n\"\"\") == \"13\"\n\nassert solution(\"\"\"\n10 10\n2 4 3 5 8 6 7 9 10\n2\n3\n5\n6\n8\n10\n12\n15\n18\n\"\"\") == \"18\""
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 5\\n2 3 5 7\\n3\\n5\\n8\\n\") == \"6\"\nassert solution(\"2 1\\n3\\n4\\n5\\n\") == \"3\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"1 1 2 3\") == \"4\"\nassert solution(\"1 1 2 3 4\") == \"7\"\nassert solution(\"10 10 10 10 10 10 10 10 10\") == \"12\"\nassert solution(\"1 1 2 2 2 3 2 3 3 2 4 4 3 4\") == \"12\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n\") == \"3\"\nassert solution(\"3 1\\n1\\n2\\n1\\n1\\n1\\n\") == \"3\"\nassert solution(\"1 2\\n3\\n5\\n7\\n9\\n11\\n13\\n15\\n\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n3\n5\n6''') == '13'\nassert solution('''\n5\n1\n2\n2\n3\n1\n3''') == '3'"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"1\"\nassert solution(\"2 5\") == \"6\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"5\") == \"8\"\nassert solution(\"5\") == \"13\"\nassert solution(\"5\") == \"10\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 5 7') == '6'\nassert solution('2') == '2'\nassert solution('5') == '10'\nassert solution('6') == '13'\nassert solution('8') == '13'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 3\n2 3 5 7\n2\n3\n5\n6\n8\n''') == \"8\"\nprint(solution('''\n4 5\n2 3 5 7\n2\n3\n5\n6\n8\n'''))"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"0\"\nassert solution(\"6 3\") == \"0\"\nassert solution(\"6 2\") == \"2\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '0'\nassert solution('6 3') == '1'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n') == '0'\nassert solution('12 5\\n1 2\\n3 4\\n5 6\\n5 7\\n8 9\\n1 2\\n5 6\\n8 9\\n') == '3'\nassert solution('16 6\\n1 2\\n3 4\\n5 6\\n5 7\\n8 9\\n1 2\\n5 6\\n8 9\\n') == '1'\nassert solution('10 5\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n') == '3'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3\\n0 1\\n1 2\\n2 3') == '0'\nassert solution('2\\n3\\n0 1\\n1 2\\n2 3') == '1'"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 3\") == \"1\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"0\"\nassert solution(\"5 6\") == \"2\"\nassert solution(\"6 10\") == \"2\"\nassert solution(\"6 1\") == \"5\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n0\\n1\\n1\\n0\\n\") == \"0\""
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5 \n''') == '0'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"6 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\"\n    ) == \"0\"\nassert solution(\n    \"7 5\\n0 1\\n1 3\\n3 4\\n3 4\\n4 5\\n5 1\\n5 3\"\n    ) == \"2\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"107\""
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 3\n5 2 100 1 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\nSample Input:\n4 5\n5 1\n5 1\n5 1\n5 1\nSample Output:\n3 5\n5 5\n5 5\n5 5\n''') == '106\\n107\\n71\\n107\\n'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n''') == '107'\n\nassert solution('''\n2 1\n1 1 5 C1 L1 C1 U1\n''') == '106'\n\nassert solution('''\n10 10\n1 1 5 C1 L1 C100 U1 C1\n4 4 5 C1 L1 C1 U1 C1\n9 9 4 C1 L1 C1 U1 C1\n4 4 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n1"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '106\\n107\\n71\\n'"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n\"\"\") == \"\"\"\n106\n107\n71\n\"\"\".strip()\nassert solution(\"\"\"\n10 10\n1 2 5 C1 L1 C100 U1 C1\n3 5 2 C1 L1 U1 C100\n3 5 2 C1 L1 U1 C100\n7 5 2 C1 L1 U1 C100\n7 5 2 C1 L1 U1 C100\n1 2 5 C1 L1 U1 C100\n\"\"\") == \"\"\"\n106\n107\n71\n\"\"\".strip()\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '106'\nassert solution('6 1') == '107'\nassert solution('1 1') == '71'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1') == '106\\n107\\n71\\n'\nassert solution('2 1 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1') == '106\\n107\\n71\\n'\nassert solution('5 1 10 C1 L1 C1 L2 C1 L1 C2 U1 L3 U2 U3 U1 L3 U4 U1 L2 C2 U5 L1 U6') == '110\\n111\\n120\\n121\\n130\\n131\\n100\\n101\\n110\\n111\\n120\\n121\\n130\\n131\\n110\\n111\\n110\\n111\\n120\\n121\\n130\\n131\\n100\\n101\\n110\\n111\\n120\\n121\\n130\\n131\\n110\\n111\\n110\\n111\\n120\\n121\\n130\\n131\\n'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n\"\"\") == \"106\\n107\\n71\\n\"\n\nassert solution(\"\"\"\n3 2\n60 10 50 20\n80 20 30 50\n\"\"\") == \"90\\n90\\n80\\n\"\n\nassert solution(\"\"\"\n10 20\n10 20 30 30 30 30 30 30 30 30 30\n10 20 20 20 20 20 20 20 20 20\n10 20 20 20 20 20 20 20 20 20 20\n10 20 20 20 20 20 20 20 20 20 20\n10 20 20 20 20 20 20 20 20 20 20\n10 20 20 20 20 20 20 20 20 20 20\n10 20 20 20 20 20 20 20 20 20 20\n10 20 20 20 20 20 20 20 20 20 20\n10 20 20 20 20 20 20 20 20 20 20\n10 20 20 20 20 20 20 20 20 20 20\n\"\"\") == \"120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n120\\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"106\\n107\\n71\\n\"\nprint(solution())\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '''\n    3 1\n    50 2 5 C1 L1 C1 U1 C1\n    1 1 5 C1 L1 C100 U1 C1\n    70 3 1 C1\n    '''\n) == '106\\n107\\n71'\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nAA\n''') == '51'\nassert solution('''\nAABCDDCB\n''') == '58'\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('AAAAAA') == '51'\nassert solution('AA') == '2'\nassert solution('A') == '1'\nassert solution('AAA') == '5'\nassert solution('AAAB') == '8'\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"AA\") == \"51\"\nassert solution(\"AB\") == \"11\"\nassert solution(\"CD\") == \"6\"\nassert solution(\"A\") == \"50\"\nassert solution(\"BB\") == \"10\"\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"AA\") == \"51\"\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('AA') == \"5\"\nassert solution('AAB') == \"10\"\nassert solution('ABA') == \"11\"\nassert solution('ABCB') == \"11\"\nassert solution('CAB') == \"10\""
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('AA') == '51'\nassert solution('A') == '0'\n'''"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"AA\") == \"51\"\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('AA') == '51'\nassert solution('BA') == '6'\nassert solution('BABA') == '11'\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('AAAA') == 5\n'''\n\nimport math"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"AA\") == \"1\""
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n\") == \"1 2\"\nassert solution(\"2\\n4 27 42 54 71\\n8 17 35 55 61\\n15 26 42 53 71\\n10 25 31 57 64\\n6 20 44 52 68\\n\") == \"1 2\"\nassert solution(\"2\\n14 23 39 59 63\\n8 17 35 55 61\\n15 26 42 53 71\\n10 25 31 57 64\\n6 20 44 52 68\\n\") == \"1 2\"\nassert solution(\"2\\n1 19 43 50 72\\n3 29 45 56 68\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n\") == \"2 1\"\nassert solution(\"2\\n1 19 43 50 72\\n3 29 45 56 68\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n\") == \"1 2\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'no ties'\nassert solution('1') == 'no ties'\nassert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\nassert solution('4') == '1 2 3 4'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"no ties\"\nassert solution(\"2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n\") == \"1 2\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\") == \"1 2\"\nassert solution(\"2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n2 7 8\\n\") == \"1 2\"\nassert solution(\"2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n2 7 8\\n1 3 5\") == \"1 3\""
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"no ties\"\nassert solution(\"1\") == \"1 2\"\nassert solution(\"3\") == \"1 2\"\nassert solution(\"4\") == \"1 2\"\n\nfrom collections import Counter\nimport itertools\nfrom itertools import combinations\nimport sys\n\nsys.setrecursionlimit(10**6)\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\") == \"1 2\"\nassert solution(\"2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\") == \"1 2\"\nassert solution(\"4\\n1 2 3 5\\n9 10 11 12\\n8 13 14 15\\n7 16 17 18\\n6 19 20 21\\n5 22 23 24\\n4 25 26 27\\n3 28 29 30\") == \"3 2\"\nassert solution(\"9\\n1 3 5 7\\n2 4 6 8\\n3 5 9 10\\n4 6 11 12\\n5 7 13 14\\n6 8 15 16\\n7 9 11 13 15\\n8 10 12 14 16\\n9 11 15 17 18\") == \"1 2\""
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\") == \"1 2\"\n\nassert solution(\n\"\"\"\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\") == \"\"\n\nassert solution(\n\"\"\"\n3\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\") == \"1 2\"\n\nassert solution(\n\"\"\"\n5\n9 2 8 7 6\n3 1 5 4 8\n2 4 8 5 7\n4 1 2 6 7\n1 5 9 4 8\n4 5 3 2 6\n\"\"\") == \"1 2\"\n\nassert solution(\n\"\"\"\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\") == \"1 2\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\n14 23 39 59 63\n8 17 35 55 61\n15 26 42 53 71\n10 25 31 57 64\n6 20 44 52 68\n''') == '1 2'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\") == \"1 2\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"no ties\"\nassert solution(\"3\") == \"1 2\"\nassert solution(\"3\") == \"1 2\"\nassert solution(\"3\") == \"1 2\"\nassert solution(\"3\") == \"1 2\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1 3 2 4 5\n2 3 1 4 5\n1 2 3 4 5''') == '0'\nassert solution('''10\n1 3 9 2 7 5 8 4 6 8 9\n2 3 8 1 9 4 7 6 5 8\n3 8 4 1 7 9 5 6 8 2\n4 8 9 1 5 7 6 3 2 1\n5 8 4 1 9 3 7 6 2 8''') == '2'\nassert solution('''10\n1 3 9 2 7 5 8 4 6 8 9\n2 3 8 1 9 4 7 6 5 8\n3 8 4 1 7 9 5 6 8 2\n4 8 9 1 5 7 6 3 2 1\n5 8 4 1 9 3 7 6 2 8\n6 7 4 1 8 9 5 3 2 1\n7 4 1 8 9 5 3 2 1 6\n8 4 1 7 9 5 3 2 1 6\n9 4 1 7 9 5 3 2 1 6\n10 4 1 7 9 5 3 2 1 6''') == '3'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'\nassert solution([1, 2, 3]) == '0'\nassert solution([3, 2, 1]) == '0'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0', 'Wrong'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n3 2 1\\n1 2 3\\n1 2 3') == '0'\nprint(solution(input()))\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n2 1\n1 2 3\n1 2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5\n3 2 1\n1 2 3\n1 2 3\n1 3 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10\n3 3 4 4 3 3 2 4 1 5\n3 3 4 4 3 3 2 4 1 5\n4 4 4 4 4 4 4 3 3 3\n1 2 3 4 5 6 7 8 9 1\n1 1 3 2 4 5 6 7 8 9\n3 1 4 4 5 6 7 8 9 1\n3 1 4 4 5 6 7 8 9 1\n3 1 4 4 5 6 7 8 9 1\n3 1 4 4 5 6 7 8 9 1\n\"\"\") == \"24\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n3 2 1\\n1 2 3\\n1 2 3') == '0'"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n2 1\n1 2\nSample Input 2:\n5\n1 3 6 9\n1 2 3 4 5\n3 4 2 1\n2 1 3 4 5\nSample Output 2:\n0\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n3 2 1\\n1 2 3\\n1 2 3') == '0'\nassert solution('3\\n1 1 1\\n1 2 3\\n1 2 3') == '0'\nassert solution('3\\n3 2 1\\n3 2 1\\n3 2 1') == '1'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '0.4'\nassert solution('6 2 3') == '0.2'\nassert solution('10 2 3') == '0.171428571429'\nassert solution('16 3 4') == '0.228571428571'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\") == \"0.4\\n0\"\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 2 3\n6 2 3\n10 2 3\n''') == '0.4\\n0'\nassert solution('''\n4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''') == '0.2\\n0'\nassert solution('''\n6\n0 0 0\n10 1 2\n9 2 3\n8 3 4\n7 4 5\n''') == '0.171428571429\\n0'\nassert solution('''\n6\n0 0 0\n10 1 2\n9 2 3\n8 3 4\n7 4 5\n''') == '0.2\\n0'\nassert solution('''\n8\n0 0 0\n10 1 2\n9 2 3\n8 3 4\n7 4 5\n6 5 6\n''') == '0.171428571429\\n0.2'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n3\\n10\\n16') == '0.2'\nassert solution('3\\n3\\n10\\n16') == '0.171428571429'\nassert solution('3\\n3\\n5\\n2') == '0.333333333333'"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0.4\\n0.2\\n0.171428571429\\n0.228571428571\\n\"\nprint(solution(\"3\\n1 2 3\"))\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''') == '0.2'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1 1\\n1\\n') == '0.2'\nassert solution('10\\n10 2\\n10\\n') == '0.2'\nassert solution('1\\n1 2\\n1\\n') == '0.4'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2 3\n6 2 3\n10 2 3\n16 3 4\n''') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''') == '0.4\\n0'\n\nassert solution('''\n4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''') == '0.2\\n0'\n\nassert solution('''\n1\n5 3\n0 1\n1 2\n1 5\n''') == '0.2\\n0.171428571429'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571\\n'''\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('1\\n1\\n1\\n1\\n') == 'impossible'\nassert solution('5\\n-1 -6\\n3 3\\n-4 -5\\n2 2') == '2 * 2 = 4\\n3 + 3 = 6\\n-4 + -5 = -1'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"4\n1 5\n3 3\n4 5\n-1 -6\n\"\"\") == \"\"\"3 + 3 = 6\n9 * 3 = 27\n4 - 5 = -1\n-1 - -6 = 5\"\"\",\n\nassert solution(\"\"\"10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10\"\"\") == \"\"\"2 * 3 = 6\n3 * 5 = 15\n5 + 7 = 14\n14 - 10 = -3\n7 - 2 = 6\n3 * 3 = 9\n6 * 2 = 12\n10 * 3 = 30\"\"\",\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 5\n3 3\n4 5\n-1 -6\n''') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('''\n3\n1 2\n3 4\n5 6\n''') == '1 + 2 = 3\\n3 * 4 = 12\\n5 + 6 = 9'\nassert solution('''\n4\n1 5\n3 3\n4 5\n-1 -6\n''') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('''\n1\n2\n''') == '2 = 2'\n\n'''\nThe complete code in this module has been provided.\nFor your reference and to get started, please read the docstring of each function.\n\n''')"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\nassert solution(\"5\\n1 2\\n3 4\\n5 6\\n7 8\") == \"1 + 2 = 3\\n3 + 4 = 7\\n7 + 8 = 11\\n11 - 8 = 3\\n3 - 4 = 1\\n1 - 2 = -3\"\nassert solution(\"6\\n1 2\\n3 4\\n5 6\\n7 8\\n10 10\") == \"1 + 2 = 3\\n3 + 4 = 7\\n7 + 8 = 11\\n11 - 8 = 3\\n3 - 4 = 1\\n1 - 2 = -3\\n3 + 4 = 7\\n7 + 8 = 11\\n11 - 8 = 3\\n3 - 4 = 1\\n1 - 2 = -3\\n3 * 4 = 12\\n12 * 4 = 48\\n48 * 4 = 96\\n96 * 4 = 144\\n144 * 4 = 192\\n192 * 4 = 288\\n288 * 4 = 360\\n360 * 4 = 432\"\nassert solution(\"10\\n1 2\\n3 4\\n5 6\\n7 8\\n10 10\") == \"1 + 2 = 3\\n3 + 4 = 7\\n7 + 8 = 11\\n11 - 8 = 3\\n3 - 4 = 1\\n1 - 2 = -3\\n3 + 4 = 7\\n7 + 8 = 11\\n11 - 8 = 3\\n3 - 4 = 1\\n1 - 2 = -3\\n3 * 4 = 12\\n12 * 4 = 48\\n48 * 4 = 96\\n96 * 4 = 144\\n144 * 4 = 192\\n192 * 4 = 288\\n288 * 4 = 360\\n360 * 4 = 432\\n432 * 4 = 512\\n512 * 4 = 600\\n600 * 4 = 720\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == \"3 * 3 = 9\\n3 - 3 = 0\\n3 + 3 = 6\"\nassert solution('2') == \"2 * 2 = 4\\n2 - 2 = 0\\n2 + 2 = 4\"\nassert solution('1') == \"1 * 1 = 1\\n1 - 1 = 0\\n1 + 1 = 2\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n1 2\n3 4\n-1 -2\n4 -3\n-5 -6\n\"\"\") == \"\"\"\n-1 + -2 = -3\n3 * 3 = 9\n4 - 5 = -1\n-1 - -6 = 5\n\"\"\"\nassert solution(\"\"\"\n2\n1 2\n3 4\n\"\"\") == \"\"\"\nimpossible\n\"\"\""
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('5\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('10\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n15 16\\n-1 -6') == '1 + 2 = 3\\n3 * 4 = 8\\n4 - 5 = -1\\n-1 - -6 = 5'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\nassert solution(\"2\\n3 4\\n1 1\\n1 2\\n1 3\\n1 4\") == \"1 + 1 = 2\\n1 * 1 = 1\\n1 + 1 = 3\\n1 * 1 = 1\"\nassert solution(\"3\\n1 1\\n1 1\\n1 1\") == \"1 + 1 = 3\\n1 * 1 = 1\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n2 3\\n4 5') == \"1 + 2 = 3\\n3 * 3 = 9\\n4 - 5 = -1\"\nassert solution('3 2\\n4 3\\n5 6') == \"3 + 2 = 5\\n3 * 3 = 9\\n5 - 6 = -3\"\nassert solution('3 5\\n-1 1\\n5 2') == \"3 + 5 = 8\\n-1 - 1 = 0\\n5 - 2 = 3\"\nassert solution('4 5\\n-1 5\\n5 1') == \"4 + 5 = 9\\n-1 - 5 = 1\\n5 - 1 = 4\"\nassert solution('3 5\\n1 1\\n1 2') == \"3 + 5 = 8\\n1 * 1 = 1\\n1 * 2 = 2\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6\\n') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '1'\nassert solution('''\n5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '1'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '4'\nassert solution('4 2') == '0'\nassert solution('5 5') == '10'\nassert solution('3 3') == '0'\nassert solution('7 7') == '5'"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(solution.__doc__) == \"3 4 6\"\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3\\n5 6\\n1 7 4\\n1 3 1\\n') == '4\\n1\\n4\\n6\\n0\\n'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '4\\n1\\n4\\n6\\n0'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"4\"\nassert solution(\"5 4\") == \"1\""
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '4\\n1\\n4\\n6\\n0\\n'\nassert solution('1 2') == '0\\n'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5') == '0 0 0 1 1'\nassert solution('3 4') == '0 0 0 1 1 1'\nassert solution('2 3') == '0 0 0 1 1 1'\nassert solution('3 3') == '0 0 0 0 1 1'\nassert solution('5 5') == '1 2 2 1 1'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == '4\\n1\\n4\\n6\\n0'\nassert solution('1 2 3 4') == '1\\n4\\n0\\n0\\n0\\n'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '1\\n4\\n0\\n'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('6') == '4'\nassert solution('7') == '7'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"6\") == \"2\""
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1 2 3 4\") == \"4\"\n\"\"\"\n\n\"\"\"\nThe idea is to iterate through the array and use a set to keep track of all the indices. \nThe number of ways to pick 3 integers from the set is equivalent to the number of ways to pick 2 integers from the set. \nThen use a counter to keep track of the number of ways. \n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '1'\n'''\n        pass\n\nassert solution('''\n3\n5 4 2\n''') == '0'\n'''"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('3 1 2 4') == '3'\nassert solution('3 2 1 4') == '2'\nassert solution('2 1 3 4') == '1'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == '4'\nprint(solution('''1 2 3 4'''))"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 3 4') == \"4\"\nassert solution('4 1 3 2') == \"3\"\n\"\"\"\n\nN = int(input())\n\nnums = input().split()\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"0\"\nassert solution(\"5\\n1 1 1 1 1\") == \"5\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1 1\") == \"14\"\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 2 3 5\") == \"1\"\n\"\"\"\nimport collections\nfrom itertools import combinations_with_replacement, combinations"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n20 30\n30 40\n30 50\n''') == '4 3', solution.__doc__\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 31 2') == '4 3'\nassert solution('20 60') == '3 1'\nassert solution('50 90') == '1 1'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 30 2\n20 60\n50 90\n''') == '2 3'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 1 2\n20 60\n50 90\n30 60\n30 90\n10 60\n''') == '4 3'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == None\nassert solution('1 31 2') == '4 3'\nassert solution('20 60') == '4 3'\nassert solution('50 90') == '1 2'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"0 0\"\nassert solution(\"1 1\") == \"0 0\"\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 21 10') == '3 3'\nassert solution('20 25 25 20') == '2 1'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"1 20 2\\n\"\n    \"20 60\"\n) == \"4 3\"\nassert solution(\n    \"1 20 2\\n\"\n    \"60 60\"\n) == \"1 0\"\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 31 2') == '4 3'\nassert solution('20 60') == '3 4'\nassert solution('50 90') == '2 2'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 31 2\") == \"4 3\"\nassert solution(\"20 60\") == \"7 8\"\nassert solution(\"50 90\") == \"5 3\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"20 20\") == \"20 20\"\n\"\"\""
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('3 2 1') == '6'\n\n'''"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 1') == '3'\nassert solution('3 1 1') == '6'\n\"\"\"\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2 1') == '3'\nassert solution('5 7 3') == '6'\nassert solution('10 20 10') == '11'\nassert solution('1 1') == '1'\nassert solution('3 5 2') == '3'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1\") == \"3\"\nassert solution(\"2 2 1\") == \"6\"\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == '3'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == '3'\n\"\"\"\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 1\") == \"3\"\nassert solution(\"2 2 1\") == \"1\"\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1\") == \"3\"\nassert solution(\"3 2 2\") == \"6\"\nassert solution(\"1 2 1\") == \"2\"\n\n----Input----\n4 1 2 1\n----Output----\n3\n----Input----\n4 1 2 3\n----Output----\n9\n\"\"\""
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n20 2 4\n''') == '3'\nassert solution('''\n10 0 0\n''') == '0'\nassert solution('''\n5 7 1\n''') == '6'\n'''\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"1\\n\"\n    \"1341 2412 1200 3112 2391\"\n) == \"3 1\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n4\\n6 7 8\") == \"1 3\"\nassert solution(\"2\\n10 8 5 1 4 4 2 4 2\") == \"2 1\""
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1341\\n2412\\n1200\\n3112\\n2391') == '1 2'\nassert solution('3\\n4 5 6') == '1'\nassert solution('1\\n2 3') == '0 1'\nassert solution('1\\n3 2') == '0 2'\nassert solution('5\\n10 30 20 40 80\\n30 20 40 80 20\\n20 30 40 80 80 20\\n10 30 20 40 80 20\\n30 20 40 80 80 20') == '3 1'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '3 1'\nassert solution('2') == '3 1'\nassert solution('4') == '4 3'\nassert solution('6') == '4 3 1'\nassert solution('8') == '5 3 1'\n\"\"\"\n\nn = int(input())\np = list(map(int,input().split()))"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"1\"\n) == \"0 1\"\nassert solution(\n    \"5\"\n) == \"0 1\"\nassert solution(\n    \"10\"\n) == \"0 0\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '3 1'"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"3 1\""
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1341 2412 1200 3112 2391\n''') == '3 1'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1341 2412 1200 3112 2391\n''') == '3 1'''\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3 1'"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"0\\n\"\nassert solution(\"10 20\") == \"4\\n\"\nassert solution(\"1 20\") == \"4\\n\"\nassert solution(\"1 20\") == \"4\\n\"\nassert solution(\"10 20\") == \"5\\n\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([10, 20]) == '6'\nassert solution([3, 5]) == '4'\nassert solution([1, 3, 7]) == '1'\nassert solution([2, 1, 1]) == '1'\nassert solution([2, 3, 2]) == '2'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 20') == '6'\nassert solution('3 5') == '2'\nassert solution('1 3 7') == '7'\nassert solution('2 1 1') == '1'\nassert solution('2 3 2') == '3'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_string) == \"6\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 20') == '13'\nassert solution('3 5') == '8'\nassert solution('1 3 7') == '2'\nassert solution('2 1 1') == '1'\nassert solution('2 3 2') == '5'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4') == '6'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 10\\n5 5\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\") == \"6\"\nassert solution(\"2 5\\n2 3\\n2 3\\n2 3\\n2 3\") == \"0\"\nassert solution(\"2 5\\n3 1\\n2 3\\n2 1\\n2 3\") == \"0\"\nassert solution(\"1 3\\n1 2\\n3 1\\n3 2\") == \"0\"\nassert solution(\"1 2\\n1 3\\n1 3\") == \"0\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 20\") == \"11\"\nassert solution(\"10 20\") == \"13\"\nassert solution(\"5 5\") == \"11\"\nassert solution(\"10 10\") == \"9\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '6'\n\"\"\"\n--- Day 5: Binary Boarding ---\nhttps://adventofcode.com/2015/day/5\n\nThe binary numbers are surprisingly useful:\n\n49: 1,0,0,1\n26: 0,1,0,1\n63: 0,1,1,1\n\nFor example, when used with binary addition, these numbers combine to form 16.\n\nAfter some calculations, it turns out that 15\u2019s binary, 1101, contains the fewest number of 1 bits.\n\nHow many 1 bits are in the binary representation of every number from 1 to +\u221e?\n\"\"\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n') == '6'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 ab b\\n1 b') == '0 1'\nassert solution('2 a1 b\\n1 b') == '0 -1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 ab b\n1 b\n\"\"\") == \"0 1 "
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 ab b\n1 b\n''') == '1 0 \n'''\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 ab b\n1 ab\n\"\"\") == \"0 1 -1 0 -1 0 -1 2\nassert solution(\"\"\"\n5 ab b\n1 ab\n\"\"\") == \"0 1 -1 -1 -1 -1 0 0\nassert solution(\"\"\"\n5 ab b\n1 ab\n\"\"\") == \"0 1 -1 -1 -1 -1 0 0\nassert solution(\"\"\"\n2 ab b\n1 ab\n\"\"\") == \"0 1 -1 -1 -1 -1 0 0\nassert solution(\"\"\"\n2 ab b\n1 ab\n\"\"\") == \"0 1 -1 0 -1 2 0\n\"\"\""
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 ab b\\n1 b\") == \"0 1\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 ab b\") == \"0 1\"\nassert solution(\"2 x x\") == \"1 -1\""
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"2\"\nassert solution(\"2 ab b\") == \"0 1\"\nassert solution(\"2 c a b\") == \"-1 0\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2 ab b\n1 b\n\"\"\") == \"0 1\"\nassert solution(\"\"\"\n2 ab b\n1 a\n\"\"\") == \"-1 0\"\nassert solution(\"\"\"\n2 ab b\n1 c\n\"\"\") == \"0 -1\"\nassert solution(\"\"\"\n2 ab b\n1 d\n\"\"\") == \"0 1\"\nassert solution(\"\"\"\n2 ab b\n1 a\n\"\"\") == \"0 -1\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1 1 -1'"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 ab b\") == \"0 1\"\nassert solution(\"2 aa bb\") == \"-1 1\""
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4\\n1 1 2\\n2') == '3'\nassert solution('2 4\\n1 1 2\\n2\\n') == '8'\nassert solution('2 4\\n1 1 2\\n2\\n') == '6'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 4\n1 1 2\n2\n1 1 2\n2\n''') == '''1\n3'''"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 4\n1 1 2\n2\n1 1 2\n2\n''') == '1'\nassert solution('''3\n1\n1\n1\n2\n''') == '1'\n'''"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 1 2\n2\n1 1 2\n2\n''') == '0.3125000000000'\nassert solution('''\n2\n1 1 2\n2\n''') == '2.0'\n\ninput_lines = int(input())\noutput_lines = int(input())\ninput_lines = int(input())\n\nline_number = 0\n\nwhile line_number < input_lines:\n    line_number += 1\n    line = input()\n    if line_number == input_lines:\n        print(line)\n        break"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1'\nassert solution('2') == '2'\n\n---\nSample Input:\n3 5\n2 1 3 1 4 1 2 4\n2\n3\n\nSample Output:\n0.0\n0.5"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4') == '1'\nassert solution('2 3') == '4'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"3\"\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\\n2\\n\") == \"1\\n3\"\nassert solution(\"2 4\\n1 1 2\\n2\\n\") == \"1\\n3\"\nassert solution(\"2 4\\n1 1 2\\n2\\n\") == \"1\\n3\"\nassert solution(\"2 4\\n1 1 2\\n2\\n\") == \"1\\n3\"\nassert solution(\"2 4\\n1 1 2\\n2\\n\") == \"1\\n3\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 4\n1 1 2\n2''') == '0.5 0.5'\nassert solution('''2 4\n1 1 2\n2''') == '0.25 0.125'\nassert solution('''2\n1\n2''') == '0.25 0.25'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n3\n1 2\n2\n2\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3\n3\n1 2\n2\n2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n10\n1\n1 2 2 2 2 2 2 2 2 2\n2\n3\n1 2\n2\n2\n\"\"\") == \"5.5\""
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '7'"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    3\n    0 5 2\n    5 0 4\n    2 4 0\n    \"\"\"\n) == \"7\"\n\nassert solution(\n    \"\"\"\n    4\n    0 1 1 1\n    0 1 0 1\n    1 0 1 1\n    1 1 0 1\n    \"\"\"\n) == \"8\"\n\nassert solution(\n    \"\"\"\n    1\n    0\n    \"\"\"\n) == \"0\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n0 5 2\n5 0 4\n2 4 0\n''') == '7'\n\nassert solution('''\n3\n1 5 2\n5 0 4\n2 4 0\n''') == '10'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n0 5 2\\n5 0 4\\n2 4 0\\n') == '7'\nassert solution('5\\n5 0 4\\n2 4 0\\n') == '7'\nassert solution('2\\n0 4 0\\n') == '1'\nassert solution('3\\n4 0 2\\n') == '3'\nassert solution('4\\n3 0 1\\n') == '3'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 5 2\n5 0 4\n2 4 0\n''') == '7'\n\nassert solution('''\n3\n0 5 2\n5 0 4\n2 4 0\n''') == '7'\n'''\n    return \"Your program is too slow, I'm sorry!\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 5 2') == '7'\nassert solution('3 5 2') == '9'\nassert solution('4 6 3') == '8'"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1 2') == '3'\nassert solution('5 2 2') == '3'\nassert solution('2 2 2') == '2'\nassert solution('2 1 0') == '2'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '7'\nassert solution('3') == '4'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 4\\n5 0 4') == '7'\nassert solution('5 2 4\\n0 5 4') == '7'\nassert solution('5 2 4\\n2 4 0') == '7'"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n0 5 2\\n5 0 4\\n2 4 0') == '7'\n\"\"\""
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"4\"\nassert solution(\"10\") == \"3\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '8'\nassert solution('20') == '0'\nassert solution('1000000000000000000') == '7'\nassert solution('0') == '2'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == '8'\nassert solution('3') == '0'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10000000000000000000000000000000000000000000000000000000000000\") == \"8\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1'\nassert solution('1000000000000') == '9'\n\"\"\""
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2\\n4') == '8'\nassert solution('100000000000\\n100000000000\\n100000000000\\n100000000000\\n100000000000') == '8'\nassert solution('1376\\n1009\\n1041\\n1051\\n1063\\n1087\\n1091\\n1103\\n1111\\n1113\\n1123\\n1137\\n1149\\n1161\\n1171\\n1181\\n1183\\n1213\\n1229\\n1237\\n1241\\n1251\\n1259\\n1271\\n1283\\n1313\\n1319\\n1337\\n1341\\n1349\\n1359\\n1371\\n1373\\n1397\\n1409\\n1419\\n1429\\n1437\\n1441\\n1453\\n1459\\n1471\\n1477\\n1483\\n1491\\n1511\\n1513\\n1517\\n1523\\n1531\\n1541\\n1543\\n1547\\n1553\\n1559\\n1561\\n1571\\n1579\\n1589\\n1607\\n1609\\n1617\\n1619\\n1621\\n1627\\n1637\\n1639\\n1643\\n1649\\n1651\\n1657\\n1661\\n1663\\n1667\\n1669\\n1679\\n1691\\n1693\\n1697\\n1703\\n1709\\n1721\\n1723\\n1729\\n1741\\n1743\\n1747\\n1753\\n1759\\n1761\\n1767\\n1771\\n1773\\n1779\\n1783\\n1787\\n1789\\n1801\\n1811\\n1823\\n1831\\n1841\\n1847\\n1849\\n1853\\n1859\\n1861\\n1871\\n1873\\n1877\\n1881\\n1883\\n1891\\n1901\\n1907\\n1913\\n1937\\n1941\\n1943\\n1947\\n1949\\n1951\\n1957\\n1961\\n1963\\n1969\\n1981\\n1987\\n1993\\n1997\\n1999\\n2003\\n2011\\n2013\\n2017\\n2027\\n2029\\n2033\\n2039\\n2041\\n2043\\n2047\\n2051\\n2053\\n2063\\n2069\\n2081\\n2083\\n2087\\n2089\\n2099\\n2111\\n2113\\n2129\\n2131\\n2137\\n2141\\n2143\\n2153\\n2161\\n2179\\n2203\\n2207\\n2213\\n2221\\n2237\\n2239\\n2243\\n2251\\n2267\\n2269\\n2273\\n2281\\n2287\\n2293\\n2297\\n2309\\n2311\\n2333\\n2339\\n2341\\n2347\\n2351\\n2357\\n2371\\n2373\\n2379\\n2389\\n2393\\n2399\\n2411\\n2417\\n2423\\n2437\\n2441\\n2447\\n2459\\n2467\\n2473\\n2477\\n2503\\n2521\\n2531\\n2539\\n2543\\n2549\\n2551\\n2557\\n2579\\n2591\\n2593\\n2609\\n2617\\n2621\\n2633\\n2647\\n2657\\n2659\\n2663\\n2671\\n2677\\n2683\\n2687\\n2689\\n2693\\n2699\\n2707\\n2711\\n2713\\n2719\\n2729\\n2731\\n2741\\n2749\\n2753\\n2767\\n2771\\n2773\\n2779\\n2789\\n2791\\n2797\\n2801\\n2807\\n2819\\n2833\\n2837\\n2843\\n2851\\n2857\\n2861\\n2879\\n2887\\n2897\\n2903\\n2909\\n2917\\n2927\\n2939\\n2953\\n2957\\n2963\\n2969\\n2971\\n2999\\n3001\\n3011\\n3013\\n3019\\n3023\\n3037\\n3041\\n3043\\n3049\\n3061\\n3067\\n3079\\n3083\\n3089\\n3109\\n3119\\n3121\\n3137\\n3163\\n3167\\n3169\\n3181\\n3187\\n3191\\n3203\\n3209\\n3217\\n3221\\n3229\\n3251\\n3263\\n3271\\n3299\\n3301\\n3307\\n3313\\n3319\\n3323\\n3329\\n3331\\n3343\\n3347\\n3359\\n3361\\n3371\\n3373\\n3379\\n3389\\n3391\\n3407\\n3413\\n3433\\n3449\\n3457\\n3461\\n3463\\n3467\\n3469\\n3479\\n3481\\n3487\\n3493\\n3499\\n3503\\n3511\\n3517\\n3527\\n3529\\n3533\\n3539\\n3541\\n3547\\n3551\\n3553\\n3559\\n3571\\n3581\\n3583\\n3589\\n3607\\n3613\\n3617\\n3623\\n3631\\n3637\\n3643\\n3659\\n3661\\n3673\\n3677\\n3691\\n3697\\n3709\\n3719\\n3727\\n3733\\n3739\\n3741\\n3763\\n3769\\n3779\\n3793\\n3799\\n3803\\n3809\\n3821\\n3823\\n3833\\n3847\\n3851\\n3853\\n3863\\n3867\\n3869\\n3873\\n3877\\n3881\\n3899\\n3907\\n3911\\n3917\\n3919\\n3923\\n3929\\n3931\\n3943\\n3947\\n3967\\n3989\\n4001\\n4003\\n4009\\n4013\\n4019\\n4021\\n4027\\n4049\\n4051\\n4057\\n4073\\n4079\\n4091\\n4093\\n4099\\n4111\\n4127\\n4129\\n4133\\n4139\\n4153\\n4157\\n4159\\n4177\\n4201\\n4243\\n4249\\n4253\\n4259\\n4261\\n4271\\n4273\\n4279\\n4281\\n4287\\n4293\\n4299\\n4327\\n4331\\n4333\\n4349\\n4357\\n4363\\n4369\\n4373\\n4391\\n4397\\n4409\\n4421\\n4423\\n4441\\n4447\\n4463\\n44"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1099511627776') == '8'\nassert solution('131900819027') == '7'\nassert solution('10732657273') == '9'\nassert solution('110111010101') == '9'\nassert solution('1099511627776') == '8'\n\"\"\""
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"6\") == \"4\""
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(INP1) == EXP1, \"Should return {}\".format(EXP1)\n\nINP1 = '1'\nEXP1 = '1'\n\nINP2 = '2'\nEXP2 = '0'\n\nINP3 = '4'\nEXP3 = '2'\n\nINP4 = '1099511627776'\nEXP4 = '8'\n\nINP5 = '1010010010'\nEXP5 = '2'\n\nINP6 = '1099511627776'\nEXP6 = '8'\n\nINP7 = '2'\nEXP7 = '2'\n\nINP8 = '100000000'\nEXP8 = '8'\n\nINP9 = '16'\nEXP9 = '1'\n\nINP10 = '32'\nEXP10 = '4'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3\\nx x\\nx x\\nx') == '1'\nassert solution('3\\n3\\nx x\\nx x\\nx') == '1'\nassert solution('1\\n3\\nx x\\nx x\\nx') == '2'\nassert solution('3\\n3\\nx x\\nx x\\nx') == '2'\nassert solution('1\\n1\\nx x\\nx x\\nx') == '0'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n\n''') == '2'\nassert solution('''\n\n.x.\nx.x\n''') == '3'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\nx.x.x.\nx.x.x.\nx.x.x.\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\nx..\n.x.\nx.x\n''') == '2'\nassert solution('''\n3 1\nx.x.\nx.x.\nx.x.\n''') == '1'\n\nstdin = '''\n8 9\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'\nassert solution(['.x.x.x', 'x.x.x.x', 'x.x.x.']) == '1'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\nx..\n.x.\nx.x\n''') == '2'\nassert solution('''\n3 3\nx.x\nx.x\nx.x\n''') == '3'\nassert solution('''\n3 3\nx.x\nx.x\nx.x\n''') == '3'\nassert solution('''\n3 3\nx.x\nx.x\nx.x\n''') == '3'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '2'\nassert solution('10 5') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1 1 1 1 1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1 1 1 1 1') == '2'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '2'\nassert solution('2 5') == '2'\nassert solution('1 1') == '1'\nassert solution('2 2') == '1'\nassert solution('2 3') == '1'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    x.x\n   .x.\n    x.x\n''') == '2'\nassert solution('''\n    x.x\n   .x.\n    x.x\n''') == '1'\n'''"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n''') == '9'\n\nassert solution('''\n5\n1 1 2\n2 0 0\n3 0 0\n4 2 2\n5 0 0\n''') == '-1'\n\nassert solution('''\n3\n1 3 2\n2 5 2\n3 0 0\n''') == '5'\n\nassert solution('''\n3\n1 3 2\n2 5 2\n3 0 0\n''') == '6'\n\nassert solution('''\n3\n1 3 2\n2 5 2\n3 0 0\n''') == '-1'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '9'\nassert solution([5,1,3,2,4]) == '6'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == \"9\\n-1\\n5\\n6\\n\"\nassert solution(\"4\\n1 2 3\\n1 2 1\\n2 1 2\\n3 2 1\") == \"8\\n-1\\n4\\n6\\n\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '9\\n-1'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n''') == '9'\nprint(solution('''\n2\n10 1 4\n5 3 4\n'''))"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n''') == '9\\n-1\\n5\\n6\\n'\nassert solution('''\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n''') == '9\\n-1\\n5\\n6\\n'\n''' == solution('''\n4\n0 0 0\n1 2 4\n2 5 4\n3 3 2\n''') == '10\\n20\\n30\\n-1\\n''')"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == \"9\\n-1\\n5\\n6\\n\"\nassert solution(\"20\\n1 1 2\\n1 3 4\\n1 4 2\\n2 3 3\\n2 4 4\\n3 4 3\\n3 4 4\\n4 4 3\\n4 5 4\\n4 6 5\\n5 5 3\\n5 6 6\\n6 6 3\\n6 7 5\\n6 8 4\\n6 9 3\\n7 8 2\\n7 9 2\\n8 9 1\\n8 10 1\\n9 10 1\\n9 11 2\\n10 11 2\\n10 12 1\\n11 12 1\\n11 13 1\\n12 13 1\\n12 14 2\\n13 14 1\\n13 15 2\\n14 15 1\\n14 16 1\\n15 16 1\\n15 17 2\\n16 17 1\\n16 18 1\\n17 18 1\\n17 19 1\\n18 19 1\\n18 20 1\\n19 20 1\\n19 21 1\\n20 21 1\\n20 22 2\\n21 22 1\\n21 23 1\\n22 23 1\\n22 24 1\\n23 24 1\\n23 25 1\\n24 25 1\\n24 26 1\\n25 26 1\\n25 27 2\\n26 27 1\\n26 28 1\\n27 28 1\\n27 29 2\\n28 29 1\\n28 30 1\\n29 30 1\\n29 31 1\\n30 31 1\\n30 32 1\\n31 32 1\\n31 33 1\\n32 33 1\\n32 34 1\\n33 34 1\\n33 35 1\\n34 35 1\\n34 36 1\\n35 36 1\\n35 37 1\\n36 37 1\\n36 38 1\\n37 38 1\\n37 39 1\\n38 39 1\\n38 40 1\\n39 40 1\\n39 41 1\\n40 41 1\\n40 42 1\\n41 42 1\\n41 43 1\\n42 43 1\\n42 44 1\\n43 44 1\\n43 45 1\\n44 45 1\\n44 46 1\\n45 46 1\\n45 47 1\\n46 47 1\\n46 48 1\\n47 48 1\\n47 49 1\\n48 49 1\\n48 50 1\\n49 50 1\\n49 51 1\\n50 51 1\\n50 52 1\\n51 52 1\\n51 53 1\\n52 53 1\\n52 54 1\\n53 54 1\\n53 55 1\\n54 55 1\\n54 56 1\\n55 56 1\\n55 57 1\\n56 57 1\\n56 58 1\\n57 58 1\\n57 59 1\\n58 59 1\\n58 60 1\\n59 60 1\\n59 61 1\\n60 61 1\\n60 62 1\\n61 62 1\\n61 63 1\\n62 63 1\\n62 64 1\\n63 64 1\\n63 65 1\\n64 65 1\\n64 66 1\\n65 66 1\\n65 67 1\\n66 67 1\\n66 68 1\\n67 68 1\\n67 69 1\\n68 69 1\\n68 70 1\\n69 70 1\\n69 71 1\\n70 71 1\\n70 72 1\\n71 72 1\\n71 73 1\\n72 73 1\\n72 74 1\\n73 74 1\\n73 75 1\\n74 75 1\\n74 76 1\\n75 76 1\\n75 77 1\\n76 77 1\\n76 78 1\\n77 78 1\\n77 79 1\\n78 79 1\\n78 80 1\\n79 80 1\\n79 81 1\\n80 81 1\\n80 82 1\\n81 82 1\\n81 83 1\\n82 83 1\\n82 84 1\\n83 84 1\\n83 85 1\\n84 85 1\\n84 86 1\\n85 86 1\\n85 87 1\\n86 87 1\\n86 88 1\\n87 88 1\\n87 89 1\\n88 89 1\\n88 90 1\\n89 90 1\\n89 91 1\\n90 91 1\\n90 92 1\\n91 92 1\\n91 93 1\\n92 93 1\\n92 94 1\\n93 94 1\\n93 95 1\\n94 95 1\\n94 96 1\\n95 96 1\\n95 97 1\\n96 97 1\\n96 98 1\\n97 98 1\\n97 99 1\\n98 99 1\\n98 100 1\\n99 100 1\\n99 101 1\\n100 101 1\\n100 102 1\\n101 102 1\\n101 103 1\\n102 103 1\\n102 104 1\\n103 104 1\\n103 105 1\\n104 105 1\\n104 106 1\\n105 106 1\\n105 107 1\\n106 107 1\\n106 108 1\\n107 108 1\\n107 109 1\\n108 109 1\\n108 110 1\\n109 110 1\\n109 111 1\\n110 111 1\\n110 112 1\\n111 112 1\\n111 113 1\\n112 113 1\\n112 114 1\\n113 114 1\\n113 115 1\\n114 115 1\\n114 116 1\\n115 116 1\\n115 117 1\\n116 117 1\\n116 118 1\\n117 118 1\\n117 119 1\\n118 119 1\\n118 120 1\\n119 120 1\\n119 121 1\\n120 121 1\\n120 122 1\\n121 122 1\\n121 123 1\\n122 123 1\\n122 124 1\\n123 124 1\\n123 125 1\\n124 125 1\\n124 126 1\\n125 126 1\\n125 127 1\\n126 127 1\\n126 128 1\\n127 128 1\\n127 129 1\\n128 129 1\\n128 130 1\\n129 130 1\\n129 131 1\\n130 131 1\\n130 132 1\\n131 132 1\\n131 133 1\\n132 133 1\\n132 134 1\\n133 134 1\\n133 135 1\\n134 135 1\\n134 136 1\\n135 136 1\\n135 137 1\\n136 137 1\\n136 138 1\\n137 138 1\\n137 139 1\\n138 139 1\\n138 140 1\\n139 140 1\\n139 141 1\\n140 141"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"7\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\\n') == '9\\n-1\\n5\\n6\\n'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\\n') == '9\\n-1\\n5\\n6\\n'\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"92\"\nassert solution(\"\"\"\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"91\"\nassert solution(\"\"\"\n5\n1 1 10 20 30 40\n1 1 95 100 50 80\n1 1 80 100 50 40\n1 1 95 100 50 40\n1 1 95 100 50 40\n\"\"\") == \"94\"\nassert solution(\"\"\"\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"91\"\n\"\"\")"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '91'\nassert solution('1') == '91'\nassert solution('2') == '90'\nassert solution('3') == '91'\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3\\n\"\n    \"1 1 40 30 20 10\\n\"\n    \"3 1 95 95 95 10\\n\"\n    \"2 1 95 50 30 20\\n\"\n) == \"91\"\n\nassert solution(\n    \"10\\n\"\n    \"1 1 20 10 10 10 10 10\\n\"\n    \"2 1 20 10 10 10 10\\n\"\n    \"3 1 20 10 10 10 10\\n\"\n    \"4 1 20 10 10 10 10\\n\"\n    \"5 1 20 10 10 10 10\\n\"\n    \"6 1 20 10 10 10 10\\n\"\n    \"7 1 20 10 10 10 10\\n\"\n    \"8 1 20 10 10 10 10\\n\"\n    \"9 1 20 10 10 10 10\\n\"\n    \"10 1 20 10 10 10 10\\n\"\n) == \"35\"\n\nimport itertools\nfrom operator import mul\nfrom functools import reduce"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == \"91\"\nassert solution(\"10\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\\n5 1 40 60 30 20 10\\n6 1 95 95 95 50 20\\n7 1 95 95 95 50 20\\n8 1 95 95 95 50 50 20\\n9 1 95 95 95 50 50 50 20\\n10 1 95 95 95 50 50 50 50 20\") == \"1190\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 2 5\n1 1 5\n1 2 5\n2 1 5\n1 1 5\n1 2 5\n2 1 5\n1 1 5\n2 1 5\n\"\"\") == \"191\"\nassert solution(\"\"\"\n1 2 2\n1 1 2\n1 2 2\n2 1 2\n1 1 2\n1 2 2\n2 1 2\n1 1 2\n2 1 2\n\"\"\") == \"131\"\nassert solution(\"\"\"\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n4 1 5\n1 1 5\n1 2 5\n2 1 5\n3 1 5\n4 1 5\n5 1 5\n1 1 5\n1 2 5\n2 1 5\n3 1 5\n\"\"\") == \"167\"\nassert solution(\"\"\"\n4\n3 1 5\n1 1 5\n1 2 5\n1 3 5\n1 4 5\n1 5 5\n2 1 5\n3 1 5\n4 1 5\n5 1 5\n\"\"\") == \"255\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"91\"\nassert solution(\"2\") == \"95\"\nassert solution(\"1\") == \"40\"\nassert solution(\"1 0 0 0 0 0 0 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1 1 40 30 20 10\\n2 1 95 95 95 10') == '91'\nassert solution('4\\n1 1 40 30 20 10\\n2 1 95 95 95 10\\n3 1 95 95 95 10') == '18'\n\nfrom collections import deque"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n''') == '91'\n\"\"\"\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '15'\nassert solution('2') == '15'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n15 20\\n0') == '15'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n15 20\n0\n1 1\n''') == '15'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '15'\nassert solution('4') == '9'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n15 20\\n0\\n1 1') == '15'\nassert solution('4\\n10 20 30 40\\n0\\n1 2 3') == '10'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n5 3\\n0\\n1 1\\n') == '15'\nassert solution('3\\n9 12\\n1 2\\n2 5\\n1 3\\n') == '15'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '15'"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '15'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4\\n') == 'impossible'\nassert solution('2 1 375\\n') == '285'\nassert solution('1 4 716\\n') == '716'\nassert solution('3 4 98\\n') == '98'\nassert solution('5 3\\n') == 'impossible'"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98') == 'impossible'\n\"\"\""
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"impossible\"\nassert solution(\"5 4\") == \"500\"\nassert solution(\"4 3\") == \"100\""
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98') == 'impossible'\nassert solution('5 6\\n6 7 8 9 10 11 12\\n5 4 715\\n3 2 5 14\\n4 1 1 5 18\\n4 6 7 15\\n4 2 6 13\\n4 5 5 12\\n3 1 1 9') == '1565'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == 'impossible'\nassert solution('''\n3 4\n1 2 3\n4 5\n6 7\n''') == '0'\nassert solution('''\n7 10\n5 1 2 3 4 5 6 7 8 9 10\n1 5 2 4 3 6 8 7\n''') == '10'\nassert solution('''\n8 10\n1 5 1 7 2 3 6 4\n5 7 8 9\n6 8 7\n7 7 6\n4 4 4\n8 2\n3 3 3\n''') == '4'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98\\n') == 'impossible'\nassert solution('6 3\\n1 1 2\\n3 3 2\\n2 3 1\\n2 2 1\\n3 2 3\\n') == '8'\nassert solution('5 2\\n3 1 391\\n2 5 84\\n1 4 565\\n3 4 23\\n') == '14'\nassert solution('10 5\\n2 1 79\\n4 8 79\\n8 7 79\\n8 9 79\\n7 7 79\\n6 6 79\\n5 8 79\\n') == '13'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1 375\") == \"impossible\"\nassert solution(\"2 5 283\") == \"375\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"5 4\") == \"impossible\"\nassert solution(\"4 5\") == \"impossible\"\nassert solution(\"3 1 375\") == \"375\"\nassert solution(\"2 5 283\") == \"283\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([3, 1, 375, 2, 5, 283, 1, 4, 716, 3, 4, 98]) == \"impossible\"\nassert solution([5, 4, 3, 1, 375, 2, 5, 283, 1, 4, 716, 3, 4, 98]) == \"1068\"\n\n## --SOLUTION-- ##"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98') == 'impossible'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('10') == '11.000000000'"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_1) == \"1.000000000\"\nassert solution(input_2) == \"3.6666666667\"\n'''\n\ninput_1 = '1'\ninput_2 = '2'"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1.3333333333333'\n\"\"\"\nfrom math import inf\nfrom random import randint"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n''') == '1.000000000'\nassert solution('''\n3\n''') == '3.000000000'\nassert solution('''\n10\n''') == '7.999999999'\nassert solution('''\n1000\n''') == '4575.0'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n') == '1.000000000'\nassert solution('10\\n') == '1.0'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '2.000000000'\nassert solution('3') == '3.000000000'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('4') == '1.99999999'"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '0.0'\nassert solution('3') == '0.0'"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1.000000000'"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1.000000000'"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('100 3 10') == '115.000000000'\nassert solution('15 99 98') == '93.3333333333'\nassert solution('40 3 2') == '39.75'\nassert solution('90 10 9') == '89.25'"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0.0000000000\"\nassert solution(\"3 3 10\") == \"11.9999999999\"\nassert solution(\"15 99 98\") == \"119.9999999998\"\nassert solution(\"40 3 2\") == \"39.9999999996\"\nassert solution(\"90 10 9\") == \"89.0000000008\"\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('100 3 10') == '115.0'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"100 3 10\") == \"115.000000000\"\nassert solution(\"15 99 98\") == \"149.714285714\"\nassert solution(\"40 3 2\") == \"205.636363636\"\nassert solution(\"90 10 9\") == \"87.0\"\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'\nassert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'\n'''"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n\"\"\") == \"115.000000000\"\n\n\"\"\"\n--- Part Two ---\n\nNow you are ready to find out how long your best performing pill combination will take to live. It is guaranteed that you will be able to live for some value of $n$. The current best combination has a total of $c$ seconds and will age your body $y$ seconds after the $x$-th pill is introduced.\n\nFind the number of seconds you would need to take to get to the next pill.\n\n-----Input-----\nThe first line of input consists of three positive integers, $n$ ($n \\le 3\\cdot 10^9$), representing the number of seconds you would live without taking any pills, $p$ ($p \\le 10^5$), the number of pills that become available on the market, and $c$ ($c \\le 10^5$), the time in seconds you age as soon as you switch to a different pill. $p$ lines follow with the $i^{th}$ line containing three space separated integers: $t_{i}$ $(1 \\le t_{i} \\le 10^{12})$, $x_{i}$ and $y_{i}$ $(1 \\le y_{i} < x_{i} \\le 10^{4}$), representing the time the $i^{th}$ pill gets introduced to the market, and the corresponding $x$ and $y$ values for it. In addition, for all $i$, $1 \\le i \\le n-1$, it is guaranteed that $t_{i+1} - t_{i} > c$.\n\n-----Output-----\nOutput a single real number, representing the number of seconds that you would need to take to get to the next pill. Your answer should be correct within a relative or absolute error of $10^{-6}$.\n\n-----Examples-----\nSample Input:\n100 3 10\n15 99 98\n40 3 2\n90 10 9\nSample Output:\n92.9999999999\n\"\"\"\n\n\"\"\"\n--- Part Two ---\n\nThe pillaging firm unfortunately added a new concept, which is that a pill may not be introduced until the company is prepared to make it. If your company can make the $i^{th}$ pill available before it has an open market seat for it, you can still live with the $i^{th}$ pill.\n\nThe company has made you a great adviser, and you are ready to learn how to tune your strategy to account for the possibility of using the new feature.\n\nThe current best combination has a total of $c$ seconds and will age your body $y$ seconds after the $x$-th pill is introduced.\n\nFind the number of seconds you would need to take to get to the next pill.\n\n-----Input-----\nThe first line of input consists of three positive integers, $n$ ($n \\le 3\\cdot 10^9$), representing the number of seconds you would live without taking any pills, $p$ ($p \\le 10^5$), the number of pills that become available on the market, and $c$ ($c \\le 10^5$), the time in seconds you age as soon as you switch to a different pill. $p$ lines follow with the $i^{th}$ line containing three space separated integers: $t_{i}$ $(1 \\le t_{i} \\le 10^{12})$, $x_{i}$ and $y_{i}$ $(1 \\le y_{i} < x_{i} \\le 10^{4}$), representing the time the $i^{th}$ pill gets introduced to the market, and the corresponding $x$ and $y$ values for it. In addition, for all $i$, $1 \\le i \\le n-1$, it is guaranteed that $t_{i+1} - t_{i} > c$.\n\n-----Output-----\nOutput a single real number, representing the number of seconds that you would need to take to get to the next pill. Your answer should be correct within a relative or absolute error of $10^{-6}$.\n\n-----Examples-----\nSample Input:\n100 3 10\n15 99 98\n40 3 2\n90 10 9\nSample Output:\n100.000000000\n\"\"\""
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('100 3 10') == '115.000000000'\nassert solution('15 99 98') == '81.80000000000'\nassert solution('40 3 2') == '83.20000000'\nassert solution('90 10 9') == '82.30000000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('100 3 10') == '115.000000000'\nassert solution('15 99 98') == '123.000000000'\nassert solution('40 3 2') == '55.000000000'\nassert solution('90 10 9') == '55.000000000'"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([100, 3, 10]) == '115.000000000'\nassert solution([15, 99, 98]) == '110.000000000'\nassert solution([40, 3, 2]) == '39.9999999995'\nassert solution([90, 10, 9]) == '90.000000000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n100 1 1\\n100 1 1.5\\n\") == \"199.500000\"\nassert solution(\"3\\n0 0 0\\n0 1 1\\n1 2 1\\n\") == \"2\"\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n100 1 1\n100 1 1.5\n''') == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '199.5'\nassert solution('1') == '199'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n10\n1 1 1\n1 1 1.5\n''') == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n100 1 1') == '199.500000'\nassert solution('2\\n100 1 1') == '199.500000'\nassert solution('3\\n100 1 1') == '199.500000'\nassert solution('4\\n100 1 1.5') == '199.500000'\nassert solution('5\\n100 1 1.5') == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"199.500000\", 'error'\n\nassert solution(\"\"\"\n1\n1\n1.5\n\"\"\") == \"199.500000\", 'error'\n\nassert solution(\"\"\"\n3\n1 0 0.5\n1 0 0.5\n1 0 0.5\n\"\"\") == \"199.500000\", 'error'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n100 1 1\n100 1 1.5\n\"\"\") == \"199.500000\"\n\nassert solution(\"\"\"\n1\n100 1 1\n100 1 1.5\n\"\"\") == \"199.500000\"\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n100 1 1\\n100 1 1.5') == '199.5000000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n100 1 1\n100 1 1.5\n''') == '199.500000'\n\nassert solution('''\n1\n1 0 0\n''') == '1.0'\n\nassert solution('''\n6\n100 0 0.5\n100 1 0.5\n100 1 1\n100 1 1.5\n100 1 2\n100 1 2.5\n''') == '199.500000'\n\nassert solution('''\n4\n100 0 0\n100 0 1\n100 1 0\n100 1 1\n''') == '199.500000'\n\nassert solution('''\n5\n100 0 0\n100 0 1\n100 1 0\n100 1 1\n100 1 1.5\n''') == '299.500000'"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.500000'\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\n\"\"\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\nassert solution('''\n1 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '2'\nassert solution('''\n2 2\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '0'"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == \"1\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3\\n1 2 3 4 5 6 7 8 9 10 11 12') == '1'\nassert solution('2 4\\n1 2 3 4 5 6 7 8 9 10 11 12') == '0'\nassert solution('2 5\\n1 2 3 4 5 6 7 8 9 10 11 12') == '-1'\nassert solution('4 6\\n1 2 3 4 5 6 7 8 9 10 11 12') == '1'\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 2 3 4 5 6 7 8 9 10 11 12') == '1'\nprint(solution(input()))\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1', 'First Example'\nassert solution('''\n3 2\n1 2 3\n''') == '2', 'Second Example'\nassert solution('''\n4 4\n1 2 3 4 5 6 7 8\n''') == '0', 'Third Example'\nassert solution('''\n6 4\n1 2 3 4 5 6 7 8\n''') == '2', 'Fourth Example'\nassert solution('''\n2 8\n3 4 5 6 7 8 9 10\n''') == '6', 'Fifth Example'\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\nassert solution('''\n4 5\n1 2 3 4 5 6 7 8 9 10 11\n11 13 14 15 16 17 18 19 20\n21 22 23 24 25 26 27 28 29\n31 32 33 34 35 36 37 38 39\n41 42 43 44 45 46 47 48 49\n51 52 53 54 55 56 57 58 59\n61 62 63 64 65 66 67 68 69\n71 72 73 74 75 76 77 78 79\n81 82 83 84 85 86 87 88 89\n91 92 93 94 95 96 97 98 99\n103 104 105 106 107 108 109 110\n113 114 115 116 117 118 119 120\n123 124 125 126 127 128 129 130\n133 134 135 136 137 138 139 140\n142 143 144 145 146 147 148 149\n151 52 53 54 55 56 57 58 59\n61 62 63 64 65 66 67 68 69\n71 72 73 74 75 76 77 78 79\n81 82 83 84 85 86 87 88 89\n91 92 93 94 95 96 97 98 99\n103 104 105 106 107 108 109 110\n113 114 115 116 117 118 119 120\n123 124 125 126 127 128 129 130\n133 134 135 136 137 138 139 140\n142 143 144 145 146 147 148 149\n151 52 53 54 55 56 57 58 59\n61 62 63 64 65 66 67 68 69\n71 72 73 74 75 76 77 78 79\n81 82 83 84 85 86 87 88 89\n91 92 93 94 95 96 97 98 99\n103 104 105 106 107 108 109 110\n113 114 115 116 117 118 119 120\n123 124 125 126 127 128 129 130\n133 134 135 136 137 138 139 140\n142 143 144 145 146 147 148 149\n151 52 53 54 55 56 57 58 59\n61 62 63 64 65 66 67 68 69\n71 72 73 74 75 76 77 78 79\n81 82 83 84 85 86 87 88 89\n91 92 93 94 95 96 97 98 99\n103 104 105 106 107 108 109 110\n113 114 115 116 117 118 119 120\n123 124 125 126 127 128 129 130\n133 134 135 136 137 138 139 140\n142 143 144 145 146 147 148 149\n151 52 53 54 55 56 57 58 59\n61 62 63 64 65 66 67 68 69\n71 72 73 74 75 76 77 78 79\n81 82 83 84 85 86 87 88 89\n91 92 93 94 95 96 97 98 99\n103 104 105 106 107 108 109 110\n113 114 115 116 117 118 119 120\n123 124 125 126 127 128 129 130\n133 134 135 136 137 138 139 140\n142 143 144 145 146 147 148 149\n151 52 53 54 55 56 57 58 59\n61 62 63 64 65 66 67 68 69\n71 72 73 74 75 76 77 78 79\n81 82 83 84 85 86 87 88 89\n91 92 93 94 95 96 97 98 99\n103 104 105 106 107 108 109 110\n113 114 115 116 117 118 119 120\n123 124 125 126 127 128 129 130\n133 134 135 136 137 138 139 140\n142 143 144 145 146 147 148 149\n151 52 53 54 55 56 57 58 59\n61 62 63 64 65 66 67 68 69\n71 72 73 74 75 76 77 78 79\n81 82 83 84 85 86 87 88 89\n91 92 93 94 95 96 97 98 99\n103 104 105 106 107 108 109 110\n113 114 115 116 117 118 119 120\n123 124 125 126 127 128 129 130\n133 134 135 136 137 138 139 140\n142 143 144 145 146 147 148 149\n151 52 53 54 55 56 57 58 59\n61 62 63 64 65 66 67 68 69\n71 72 73 74 75 76 77 78 79\n81 82 83 84 85 86 87 88 89\n91 92 93 94 95 96 97 98 99\n103 104 105 106 107 108 109 110\n113 114 115 116 117 118 119 120\n123 124 125 126 127 128 129 130\n133 134 135 136 137 138 139 140\n142 143 144 145 146 147 148 149\n151 52 53 54 55 56 57 58 59\n61 62 63 64 65 66 67 68 69\n71 72 73 74 75 76 77 78 79\n81 82 83 84 85 86 87 88 89\n91 92 93 94 95 96 97 98 99\n103 104 105 106 107 108 109 110\n113 114 115 116 117 118 119 120\n123 124 125 126 127 128 129 130\n133 134 135 136 137 138 139 140\n142 143 144 145 146 147 148 149\n151 52 53 54 55 56 57 58 59\n61 62 63 64 65 66 67 68 69\n71 72 73 74 75 76 77 78 79\n81 82 83 84 85 86 87 88 89\n91 92 93 94 95 96 97 98 99\n103 104 105 106 107 108 109 110\n113 114 115 116 117 118 119 120\n123 124 125 126 127 128 129 130\n133 134 135 136 137 138 139 140\n142 143 144 145 146 147 148 149\n151 52 53 54 55 56 57 58 59\n61 62 63 64 65 66 67 68 69\n71 72 73 74 75 76 77 78 79\n81 82 83 84 85 86 87 88 89\n91 92 93 94 95 96 97 98 99\n103 104 105 106 107 108 109 110\n113 114 115 116 117 118 119 120\n123 124 125 126 127 128 129 130\n133 134 135 136 137 138 139 140\n142 143 144 145 146 147 148 149\n151 52 53 54 55 56 57 58 59\n61 62 63 64 65 66 67 68 69\n71 72 73 74 75 76 77 78 79\n81 82 83 84 85 86 87 88 89\n91 92 93 94 95 96 97 98 99\n103 104 105 106 107 108 109 110\n113 114 115 116 117 118 119 120\n123 124 125 126 127 128 129 130\n133 134 135 136 137 138 139 140\n142 143 144 145 146 147 148 149\n151 52 53 54 55 56 57 58 59\n61 62 63 64 65 66 67 68 69\n71 72 73 74 75 76 77 78 79\n81 82 83 84 85 86 87 88 89\n91 92 93 94 95 96 97 98 99\n103 104 105 106 107 108 109 110\n113 114 115 116 117 118 119 120\n123 124 125 126 127 128 129 130\n133 134 135 136 137 138 139 140\n142 143 144 145 146 147 148 149\n151 52 53 54 55 56 57 58 59\n61 62 63 64 65 66 67 68 69\n71 72 73 74 75 76 77 78 79\n81 82 83 84 85 86 87 88 89\n91 92 93 94 95 96 97 98 99\n103 104 105 106 107 108 109 110\n113 114 115 116 117 118 119 120\n123 124 125 126 127 128 129 130\n133 134 135 136 137 138 139 140\n142 143 144 145 146 147 148 149\n151 52 53 54 55 56 57 58 59\n61 62 63 64 65 66 67 68 69\n71 72 73 74 75 76 77 78 79"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\nassert solution('''\n2 4\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\nassert solution('''\n3 4\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '2'\nassert solution('''\n4 5\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\nassert solution('''\n5 6\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '2'\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 3\n1 2 3 4 5 6 7 8 9 10 11 12\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 4\n1 2 3 4 5 6 7 8 9 10 11 12\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 4\n1 2 3 4 5 6 7 8 9 10 11 12\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n6 4\n1 2 3 4 5 6 7 8 9 10 11 12\n\"\"\") == \"2\""
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\nassert solution('''\n1 2\n3 4\n5 6\n7 8\n''') == '0'\nassert solution('''\n5 4\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '0'\nassert solution('''\n5 4\n1 2 3 4 5\n6 7 8 9 10 11\n12\n''') == '1'\n\n'''\n---Part Two---\n\nConsider the case of the same problem as above, but with more than two machines.\n\nConsider the case of the same problem as above, but with more than two machines.\n\nConsider the case of the same problem as above, but with more than two machines.\n\nConsider the case of the same problem as above, but with more than two machines.\n\nConsider the case of the same problem as above, but with more than two machines.\n\nIf you're not getting the point, then try writing it in one line of code.\n'''\n\n'''\n---Part Three---\n\nConsider the case of the same problem as above, but with more than two machines.\n\nConsider the case of the same problem as above, but with more than two machines.\n\nConsider the case of the same problem as above, but with more than two machines.\n\nConsider the case of the same problem as above, but with more than two machines.\n\nConsider the case of the same problem as above, but with more than two machines.\n\nConsider the case of the same problem as above, but with more than two machines.\n\nDefine the following variables:\n\n* `n` - the number of machines\n* `k` - the number of batteries per machine\n* `k_min` - the minimum number of batteries that can be used to allocate the batteries to the machines\n* `n_min` - the minimum number of machines that can be used to allocate the batteries to the machines\n* `k_max` - the maximum number of batteries that can be used to allocate the batteries to the machines\n* `n_max` - the maximum number of machines that can be used to allocate the batteries to the machines\n* `d` - the smallest difference of power outputs of the two chips in each machine\n* `solution` - an expression in terms of `n`, `k_min`, `n_min`, `k_max`, `n_max`, `d` that returns an optimal solution to the above problem\n* `all_solutions` - an expression in terms of `n`, `k_min`, `n_min`, `k_max`, `n_max`, `d` that returns a list of solutions to the above problem\n* `all_possible_solutions` - an expression in terms of `n`, `k_min`, `n_min`, `k_max`, `n_max`, `d` that returns a list of all possible solutions to the above problem\n* `k_min_to_k_max` - an expression in terms of `n`, `k_min`, `n_min`, `k_max`, `n_max`, `d` that returns the number of machines with the smallest number of batteries that can be used to allocate the batteries to the machines\n\nConsider the following code for a recursive implementation of the above problem:\n'''\n\n'''\n>>> from typing import Iterable\n>>> n = 3\n>>> k = 2\n>>> k_min = 1\n>>> n_min = 1\n>>> k_max = 9\n>>> n_max = 9\n>>> d = 2\n>>> solution = '0'\n>>> all_solutions = lambda : None\n>>> all_possible_solutions = lambda : None\n>>> k_min_to_k_max = lambda : None\n\n>>> def solution(stdin: Iterable) -> str:\n...     n, k = stdin\n...     k_min = max(1, n_min)\n...     n_min = max(1, n_min)\n...     k_max = min(k_max, n_max)\n...     n_max = min(n_max, n)\n...     k_min_to_k_max = lambda k_min, k_max: max(k_min, min(n_min, k_max))\n...     solutions = lambda: ''\n...     if n == 0:\n...         return solution\n...     elif k == 1:\n...         return solutions + '0'\n...     elif k == 2:\n...         return solutions + '1'\n...     elif k > 2:\n...         k_max = k_min_to_k_max(k_min, k)\n...         k_min = k - k_max\n...         if k_min == k_min_to_k_max(k_min, k_max):\n...             return solution + solutions(solution)\n...         k_min = k_min_to_k_max(k_min, k_max)\n...         k_max = k_min_to_k_max(k_min, k_max)\n...         return solutions(solution) + '1' + solutions(solution)\n...\n\n>>> all_solutions()\n'''\n'''\n---Part Four---\n\nConsider the following problem, where `n` is the number of machines and `k` is the number of batteries per machine.\n\nConsider the following problem, where `n` is the number of machines and `k` is the number of batteries per machine.\n\nConsider the following problem, where `n` is the number of machines and `k` is the number of batteries per machine.\n\nConsider the following problem, where `n` is the number of machines and `k` is the number of batteries per machine.\n\nConsider the following problem, where `n` is the number of machines and `k` is the number of batteries per machine.\n\nDefine the following variables:\n\n* `n` - the number of machines\n* `k` - the number of batteries per machine\n* `n_min` - the minimum number of machines that can be used to allocate the batteries to the machines\n* `k_min` - the minimum number of batteries that can be used to allocate the batteries to the machines\n* `n_max` - the maximum number of machines that can be used to allocate the batteries to the machines\n* `k_max`"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3 2 1 1\\n\"\n) == \"5\""
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'Impossible'\nassert solution('2') == '5'\nassert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1 1\") == \"5\"\nassert solution(\"2 3 2 1\") == \"Impossible\"\nassert solution(\"8 8 8 8\") == \"3\"\nassert solution(\"18 18 18 18\") == \"3\"\nassert solution(\"1 1 1 1\") == \"3\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"Impossible\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n3 2 1 1') == 'Impossible'\nassert solution('13\\n3 2 1 1') == '5'\nassert solution('5\\n10 2 1 1') == '10'\nassert solution('8\\n1 2 1 1') == '8'\nassert solution('9\\n10 2 1 1') == 'Impossible'"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 1 1') == 'Impossible'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n2 1 1\n''') == 'Impossible'\n\nassert solution('''\n13\n3 2 1 1\n''') == '5'\n\nassert solution('''\n100000\n3 2 1 1\n''') == 'Impossible'\n\nassert solution('''\n5\n3 2 1 1\n''') == '5'\n\nassert solution('''\n25\n3 2 1 1\n''') == '1'"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n10\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '5'\n\n\"\"\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"3 2 1 1\\n\"\n) == \"5\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n\ntotal_coins = [100, 50, 20, 10, 5, 2]"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''aabcad''') == 'yes'\nassert solution('''aba''') == 'no'\nassert solution('''acd''') == 'no'\nassert solution('''a''') == 'no'\nassert solution('''ab''') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''aabcad''') == 'yes'\nassert solution('''aba''') == 'yes'\nassert solution('''acd''') == 'no'\n\ns = input()\nans = ''\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        if s[i:j] in s[i+1:]:\n            ans = 'yes'\n            break\n    if ans == 'yes':\n        break\nprint(ans)\n\n\ns = input()\nans = True\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        if s[i:j] in s[i+1:]:\n            ans = False\n            break\nprint('yes' if ans else 'no')\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'yes'\nassert solution(input(\"\")) == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''aabcad\naba\nacd''') == \"yes\"\n\nassert solution('''\nabbc\nb\nbb''') == \"no\"\n\nassert solution('''\nabab\na\nb''') == \"yes\"\n\nassert solution('''\na\nab\na\nb''') == \"yes\"\n\nassert solution('''\naaa\naaa\naaaa''') == \"yes\""
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(r\"\"\"\naabcad\naba\nacd\"\"\") == \"yes\"\nassert solution(r\"\"\"\na\nb\nc\"\"\") == \"no\"\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'yes'\nassert solution('acd') == 'no'"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'yes'\n\nsample_input_1 = 'abcd'\nsample_input_2 = 'abacd'\nassert solution(__import__('sys').stdin.read()) == 'no'\n\"\"\"\n\nstdin = __import__('sys').stdin.read()\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'yes'\nassert solution('acd') == 'no'"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'yes'\nassert solution('acd') == 'no'"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5 10') == '5'\nassert solution('3 2') == '3'\nassert solution('3 1 1 6') == '6'\nassert solution('3 4 7 10') == '7'\nassert solution('2 4 3 5') == '5'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == \"5\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\nassert solution('''\n1 2\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n''') == '8'\nassert solution('''\n3 2\n2 4\n1 2\n3 1 1 6\n3 4 7 10\n''') == '7'\n\n\"\"\"\n\u0418\u043c\u0435\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432 \u043d\u0435\u0451 \u0431\u0430\u0433\u043e\u0432.\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $N$, \u0447\u0438\u0441\u043b\u043e $L$, \u0438 \u0447\u0438\u0441\u043b\u043e $B$ (\u043e\u0442 1 \u0434\u043e 10^9).\n\n\u041d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e - \u0447\u0438\u0441\u043b\u043e \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u0432 \u043d\u043e\u0432\u043e\u043c \u043f\u043e\u043b\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\nSample Input 1:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output 1:\n5\nSample Input 2:\n1 2\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\nSample Output 2:\n8\nSample Input 3:\n3 2\n2 4\n1 2\n3 1 1 6\n3 4 7 10\nSample Output 3:\n7\nSample Input 4:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output 4:\n6\n\"\"\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5 10\\n3 2') == '5'\n\n2 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n\nclass LockingRoom:\n    def __init__(self, room_number, lower, upper):\n        self.room_number = room_number\n        self.lower = lower\n        self.upper = upper\n\nclass Badge:\n    def __init__(self, badge_number, lower_bound, upper_bound):\n        self.badge_number = badge_number\n        self.lower_bound = lower_bound\n        self.upper_bound = upper_bound"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"1\\n2\\n3\\n4\\n5\"\nassert solution(\"4 5 10\") == \"1\\n2\\n3\\n4\\n5\"\nassert solution(\"3 2\") == \"1\\n2\\n3\\n4\\n5\"\nassert solution(\"3 1 1 6\") == \"1\\n2\\n3\\n4\\n5\"\nassert solution(\"3 4 7 10\") == \"1\\n2\\n3\\n4\\n5\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"4 5 10\\n\"\n    \"3 2\\n\"\n    \"1 2 4 7\\n\"\n    \"3 1 1 6\\n\"\n    \"3 4 7 10\\n\"\n    \"2 4 3 5\\n\"\n    \"4 2 8 9\\n\"\n    ) == \"5\"\n\nassert solution(\n    \"4 5 10\\n\"\n    \"3 2\\n\"\n    \"1 2 4 7\\n\"\n    \"3 1 1 6\\n\"\n    \"3 4 7 10\\n\"\n    \"2 4 3 5\\n\"\n    \"4 2 8 9\\n\"\n    ) == \"5\"\n\nassert solution(\n    \"4 5 10\\n\"\n    \"3 2\\n\"\n    \"1 2 4 7\\n\"\n    \"3 1 1 6\\n\"\n    \"3 4 7 10\\n\"\n    \"2 4 3 5\\n\"\n    \"4 2 8 9\\n\"\n    ) == \"5\"\n\nassert solution(\n    \"4 5 10\\n\"\n    \"3 2\\n\"\n    \"1 2 4 7\\n\"\n    \"3 1 1 6\\n\"\n    \"3 4 7 10\\n\"\n    \"2 4 3 5\\n\"\n    \"4 2 8 9\\n\"\n    ) == \"5\"\n\nassert solution(\n    \"4 5 10\\n\"\n    \"3 2\\n\"\n    \"1 2 4 7\\n\"\n    \"3 1 1 6\\n\"\n    \"3 4 7 10\\n\"\n    \"2 4 3 5\\n\"\n    \"4 2 8 9\\n\"\n    ) == \"5\""
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5 10') == '5'\nassert solution('3 2') == '3'\nassert solution('1 2 4 7') == '5'\nassert solution('3 1 1 6') == '5'\nassert solution('3 4 7 10') == '8'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5 10') == '5'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 3\n1 2\n1 2\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n2 2\n1 2\n1 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\n\nassert solution('''\n2 5 10\n1 2 3 4\n1 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '7'\n\nassert solution('''\n5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\n\nassert solution('''\n1 1\n2 2\n2 1\n''') == '3'\n\nassert solution('''\n2 1\n3 1\n3 1\n''') == '3'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 2\n2 4 same\n3 5 same\n''') == '4'\nassert solution('''\n5 2\n2 4 same\n3 5 different\n''') == '0'"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same\\n') == '4'\nassert solution('5 1\\n0 1 same\\n3 5 same\\n') == '3'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''\n2 4 same\n3 5 same\n''') == '4'\n'''"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n2 4 same\\n3 5 same\\n\") == \"4\""
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same\\n') == '4'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 2\n2 4 same\n3 5 same\n''') == '4'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 2\n2 4 same\n3 5 same\n''') == '4'\nassert solution('''\n5 2\n2 3 same\n3 5 same\n''') == '0'\nassert solution('''\n5 2\n2 4 different\n3 5 same\n''') == '2'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '2'\nassert solution('5 5') == '1'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2\n2 4 same\n3 5 same\n''') == '4'\nassert solution('''\n3 3\n1 2 1\n2 1 1\n''') == '2'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 4\\n0 1\\n0 2\\n3 4\\n3 5') == \"3\""
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 4\n0 1\n0 2\n3 4\n3 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1 1\n1 2\n3 4\n3 5\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3 3\n0 0\n1 1\n1 0\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 1\n0 1\n2 1\n2 2\n1 1\n2 1\n\"\"\") == \"2\""
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3') == '2'\nassert solution('6 4') == '3'\nassert solution('10 5') == '4'\nassert solution('0 0') == '0'\nassert solution('0 1') == '1'"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == '3'\nassert solution(\"\") == '0'\nassert solution(\"3\") == '2'\nassert solution(\"6 4\") == '3'\nassert solution(\"3 4\") == '2'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4\\n0 1\\n0 2') == '3'\nassert solution('6 4\\n0 1\\n0 2\\n3 4\\n3 5') == '4'"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 4\n0 1\n0 2\n3 4\n3 5\n''') == '3'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n0 1\n0 2\n3 4\n3 5\n''') == '3'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '3'\nassert solution('8 3') == '3'\nassert solution('5 4') == '4'\nassert solution('8 4') == '4'\nassert solution('5 5') == '4'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 4') == '3'\nassert solution('7 3') == '5'\nassert solution('1 2') == '0'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 4\n0 1\n0 2\n3 4\n3 5\n''') == '3'\n\nassert solution('''\n4 5\n0 0\n0 1\n1 2\n3 3\n''') == '4'\n\nassert solution('''\n1 10\n0 0\n1 2\n2 2\n3 3\n3 4\n4 5\n4 6\n5 7\n''') == '6'\n\nassert solution('''\n4 4\n0 0\n1 1\n1 2\n2 2\n3 3\n3 4\n4 5\n''') == '4'\n\nassert solution('''\n6 10\n0 0\n1 1\n1 2\n2 2\n3 3\n3 4\n4 5\n4 6\n5 7\n''') == '8'"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"6.5\"\nassert solution(\"1 1 1 1 2 2\") == \"6.0\"\nassert solution(\"3 5 3 4 5\") == \"9.0\"\nassert solution(\"1 2 3 4 5\") == \"6.5\""
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '9.0'\nassert solution('4') == '6.5'\nassert solution('5') == '2.5'\nassert solution('5') == '2.5'"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == \"9.0\"\nassert solution('10') == \"6.5\"\nassert solution('100') == \"2.5\"\n\n[21:32:53]Found a wooden board and $N$ nails in his attic. Mirko hammered the nails into the board as fast as possible. The board can be modeled by a coordinate plane and the nails as points in it. No two nails have the same $x$- or the same $y$-coordinate.\n\nIn order to keep having fun, Mirko stole his sister\u2019s elastic hair band, spread it over all nails and then let go. The elastic, naturally, tightened around the nails.\n\nMirko then repeats these steps while there are at least three nails in the board:\n - Write down the area of the shape enclosed by the hair band.\n - Picks the leftmost, rightmost, topmost or bottommost nail in the board.\n - Remove the chosen nail from the board; the elastic tightens again around the remaining nails.\n\nWrite a program that calculates the numbers written in step 1 of each iteration, if we know the nail Mirko picks in step 2 of each iteration."
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR') == '9.0\\n6.5\\n2.5'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR\\n\") == \"9.0\\n6.5\\n2.5\"\nassert solution(\"3\\n1 2\\n4 1\\n5 3\\n2 5\\nUDLR\\n\") == \"15.0\\n21.0\\n21.0\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '6.5'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '9.0\\n6.5\\n2.5\\n'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1 4\n2 2\n4 1\n3 5\n5 3\nLUR\n''') == '9.0\\n6.5\\n2.5\\n'''\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '9.0'\nassert solution('4') == '6.5'\nassert solution('3') == '2.5'\nassert solution('5') == '9.0'\nassert solution('6') == '12.5'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR') == '9.0\\n6.5\\n2.5'\nassert solution('6\\n5 2\\n2 5\\n5 4\\n3 5\\n5 3\\nLUR') == '4.5\\n9.0\\n6.5'\nassert solution('10\\n10 2\\n5 2\\n5 2\\n5 4\\n3 5\\n5 3\\nLUR') == '5.5\\n11.0\\n6.5'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 2\\nB 1 2\\nB 2 3\\nR 3 1') == '1'\nassert solution('4 4 1\\nR 3 1\\nR 2 3\\nR 1 4\\n') == '0'\nassert solution('1\\nR') == '1'\n\"\"\"\n\nfrom collections import defaultdict, Counter"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\n\"\"\"\nimport collections\nimport itertools"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5 4 1\nB 1 2\nB 2 3\nR 3 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10 6 5\nB 1 3\nB 3 1\nB 4 1\nB 3 4\nR 2 3\nR 3 4\nR 4 5\nR 2 1\nB 2 2\nB 3 2\nB 4 2\nR 3 3\nR 3 4\nR 4 5\nR 5 2\nR 1 1\nB 2 1\nB 3 1\nB 4 1\nB 5 1\nR 1 2\nR 3 3\nR 4 3\nR 1 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n10 4 3\nR 3 1\nR 3 4\nR 4 1\nR 4 2\nB 3 1\nB 3 2\nB 3 3\nB 3 4\nB 3 5\nB 3 6\nB 3 7\nB 3 8\nB 3 9\nB 3 10\nB 3 11\nB 3 12\nR 2 1\nR 2 2\nR 2 3\nR 2 4\nR 2 5\nR 2 6\nR 2 7\nR 2 8\nR 2 9\nR 2 10\nR 2 11\nR 2 12\nR 2 13\nB 2 3\nB 2 4\nB 2 5\nB 2 6\nB 2 7\nB 2 8\nB 2 9\nB 2 10\nB 2 11\nB 2 12\nB 2 13\nB 2 14\nR 1 1\nR 1 2\nR 1 3\nR 1 4\nB 1 1\nB 1 2\nB 1 3\nB 1 4\nB 1 5\nB 1 6\nB 1 7\nB 1 8\nB 1 9\nB 1 10\nB 1 11\nB 1 12\nB 1 13\nB 1 14\nR 4 3\nR 4 4\nR 4 5\nR 4 6\nB 4 1\nB 4 2\nB 4 3\nB 4 4\nB 4 5\nB 4 6\nB 4 7\nB 4 8\nB 4 9\nB 4 10\nB 4 11\nB 4 12\nB 4 13\nB 4 14\nR 3 3\nR 3 4\nR 3 5\nR 3 6\nB 3 1\nB 3 2\nB 3 3\nB 3 4\nB 3 5\nB 3 6\nB 3 7\nB 3 8\nB 3 9\nB 3 10\nB 3 11\nB 3 12\nB 3 13\nB 3 14\nR 2 3\nR 2 4\nR 2 5\nR 2 6\nB 2 2\nB 2 3\nB 2 4\nB 2 5\nB 2 6\nB 2 7\nB 2 8\nB 2 9\nB 2 10\nB 2 11\nB 2 12\nB 2 13\nB 2 14\nR 1 1\nR 1 2\nR 1 3\nR 1 4\nB 1 1\nB 1 2\nB 1 3\nB 1 4\nB 1 5\nB 1 6\nB 1 7\nB 1 8\nB 1 9\nB 1 10\nB 1 11\nB 1 12\nB 1 13\nB 1 14\nR 4 4\nR 4 5\nR 4 6\nB 4 1\nB 4 2\nB 4 3\nB 4 4\nB 4 5\nB 4 6\nB 4 7\nB 4 8\nB 4 9\nB 4 10\nB 4 11\nB 4 12\nB 4 13\nB 4 14\nR 3 5\nR 3 6\nR 3 7\nB 3 1\nB 3 2\nB 3 3\nB 3 4\nB 3 5\nB 3 6\nB 3 7\nB 3 8\nB 3 9\nB 3 10\nB 3 11\nB 3 12\nB 3 13\nB 3 14\nR 2 2\nR 2 3\nR 2 4\nR 2 5\nB 2 1\nB 2 2\nB 2 3\nB 2 4\nB 2 5\nB 2 6\nB 2 7\nB 2 8\nB 2 9\nB 2 10\nB 2 11\nB 2 12\nB 2 13\nB 2 14\nR 1 3\nR 1 4\nB 1 1\nB 1 2\nB 1 3\nB 1 4\nB 1 5\nB 1 6\nB 1 7\nB 1 8\nB 1 9\nB 1 10\nB 1 11\nB 1 12\nB 1 13\nB 1 14\nR 3 4\nR 3 5\nB 3 1\nB 3 2\nB 3 3\nB 3 4\nB 3 5\nB 3 6\nB 3 7\nB 3 8\nB 3 9\nB 3 10\nB 3 11\nB 3 12\nB 3 13\nB 3 14\nR 2 3\nR 2 4\nB 2 2\nB 2 3\nB 2 4\nB 2 5\nB 2 6\nB 2 7\nB 2 8\nB 2 9\nB 2 10\nB 2 11\nB 2 12\nB 2 13\nB 2 14\nR 1 4\nR 1 5\nR 1 6\nR 1 7\nB 1 1\nB 1 2\nB 1 3\nB 1 4\nB 1 5\nB 1 6\nB 1 7\nB 1 8\nB 1 9\nB 1 10\nB 1 11\nB 1 12\nB 1 13\nB 1 14\nR 4 5\nR 4 6\nB 4 1\nB 4 2\nB 4 3\nB 4 4\nB 4 5\nB 4 6\nB 4 7\nB 4 8\nB 4 9\nB 4 10\nB 4 11\nB 4 12\nB 4 13\nB 4 14\nR 3 6\nR 3 7\nR 3 8\nR 3 9\nB 3 1\nB 3 2\nB 3 3\nB 3 4\nB 3 5\nB 3 6\nB 3 7\nB 3 8\nB 3 9\nB 3 10\nB 3 11\nB 3 12\nB 3 13\nB 3 14\nR 2 4\nR 2 5\nB 2 1\nB 2 2\nB 2 3\nB 2 4\nB 2 5\nB 2 6\nB 2 7\nB 2 8\nB 2 9\nB 2 10\nB 2 11\nB 2 12\nB 2 13\nB 2 14\nR 1 3\nR 1 4\nB 1 1\nB 1 2\nB 1 3\nB 1 4\nB 1 5\nB 1 6\nB 1 7\nB 1 8\nB 1 9\nB 1 10\nB 1 11\nB 1 12\nB 1 13\nB 1 14\nR 4 5\nR 4 6\nB 4 1\nB 4 2\nB 4 3\nB 4 4\nB 4 5\nB 4 6\nB 4 7\nB 4 8\nB 4 9\nB 4 10\nB 4 11\nB 4 12\nB 4 13\nB 4 14\nR 3 5\nR 3 6\nB 3 1\nB 3 2\nB 3 3\nB 3 4\nB 3 5\nB 3 6\nB 3 7\nB 3 8\nB 3 9\nB 3 10\nB 3 11\nB 3 12\nB 3 13\nB 3 14\nR 2 4\nR 2 5\nR 2 6\nR 2 7\nB 2 1\nB 2 2\nB 2 3\nB 2 4\nB 2 5\nB 2 6\nB 2 7\nB 2 8\nB 2 9\nB 2 10\nB 2 11\nB 2 12\nB 2 13\nB 2 14\nR 1 4\nR 1 5\nR 1 6\nB 1 1\nB 1 2\nB 1 3\nB 1 4\nB 1 5\nB 1 6\nB 1 7\nB 1 8\nB 1 9\nB 1 10\nB 1 11\nB 1 12\nB 1 13\nB 1 14\nR 4 5\nR 4 6\nB 4 1\nB 4 2\nB 4 3"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 4 3\nB 2 3\nR 3 1\nB 1 2\n''') == '1'\nassert solution('''\n4 4 3\nB 2 3\nR 3 1\nB 1 2\n''') == '0'\nassert solution('''\n10 5 4\nB 5 3\nB 2 4\nR 1 5\nB 1 2\nR 3 2\nR 1 1\nR 1 3\nB 1 4\nB 1 5\nR 3 1\nR 4 4\nR 5 5\n''') == '0'\nassert solution('''\n12 6 4\nR 1 5\nR 6 2\nB 1 2\nR 7 3\nR 8 6\nB 7 4\nB 8 5\nR 9 1\nR 10 4\nB 11 3\nB 12 2\nB 12 4\nB 11 5\nR 11 1\nR 9 1\nR 7 2\nR 5 4\nB 8 2\nB 10 4\nB 12 1\nB 8 5\nB 11 4\nR 6 4\n''') == '1'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n6 5 3\nR 5 1\nR 1 3\nR 2 5\nB 3 1\nB 1 2\nB 3 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5 6 1\nR 5 1\nR 1 3\nR 2 5\nB 3 1\nB 1 2\nB 3 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 2') == '1'\nassert solution('3 3 2') == '0'\nassert solution('3 3 3') == '0'\nassert solution('1 2 2') == '0'\nassert solution('1 2 1') == '0'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 2') == '1'\nassert solution('3 3 4') == '0'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 2') == '1'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == '88'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n5 0 5\\n7 0 7\\n4\") == \"88\\n5\\n5\\n7\\n\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7\\n\"\n) == \"88\\n5\\n\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"88\"\nassert solution(\"4\") == \"5\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '12'\nassert solution('2') == '21'\nassert solution('100') == '256192256256'\nassert solution('10000') == '256256256256256256'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"5\"\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nt = list(map(int, input().split()))\n\nnq = int(input())\n\nq = list(map(int, input().split()))"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"88\"\nassert solution(\"5\") == \"5\"\nassert solution(\"4\") == \"7\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(solution.__doc__) == '88'\nassert solution([5, 0, 5]) == '5'\nassert solution([4, 4, 4, 5]) == '4'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == \"88\"\n\nassert solution('''\n2\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == \"5\"\n\nassert solution('''\n1\n5 0 5\n4\n89\n5\n6\n7\n''') == \"5\""
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 0 5') == '88'\nassert solution('7 0 7') == '5'\nassert solution('4') == '7'\n\n'''\n\nfrom math import sqrt"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 2 1 2\n1 3 3\n2 3 3\n3 5 3\n3 6 2\n3 7 3\n3 8 3\n4 7 2\n4 8 1\n''') == '5'\nassert solution('''\n10 2 1 2\n1 3 3\n2 3 3\n3 5 3\n3 6 2\n3 7 3\n3 8 3\n4 7 2\n4 8 1\n''') == '-1'\nassert solution('''\n10 2 1 2\n1 3 3\n2 3 3\n3 5 3\n3 6 2\n3 7 3\n3 8 3\n4 7 2\n4 8 1\n''') == '-1'\nassert solution('''\n10 2 1 2\n1 3 3\n2 3 3\n3 5 3\n3 6 2\n3 7 3\n3 8 3\n4 7 2\n4 8 1\n''') == '5'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 2\") == \"5\"\nassert solution(\"3 3 1 1\") == \"2\"\nassert solution(\"3 3 1 1\") == \"2\"\nassert solution(\"3 3 1 1\") == \"2\"\nassert solution(\"3 3 1 2\") == \"2\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 1 2') == '5'\nassert solution('3 3 1 2 2 2 2') == '-1'\n\"\"\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 2\\n2\\n1 2 2\\n1 3 1\") == \"5\"\nassert solution(\"3 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\") == \"-1\"\nprint(solution(*TEST_INPUT))\nprint(solution(*INPUT))\n\"\"\"\nfrom collections import defaultdict\n\nstdin = \"\"\"\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n\"\"\"\n\nTEST_INPUT_1 = (\"2 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\", \"2\")\nINPUT_1 = (\"\"\"\n2 4 1 3\n3\n1 2 2\n1 3 1\n2 3 3\n\"\"\", \"1\")\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 2') == '-1'\nassert solution('2 1 1 2') == '2'\nassert solution('3 1 1 2') == '4'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\") == \"5\"\nprint(solution(input))\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\\n') == '5'\nassert solution('4 3 1 2\\n1 3 1\\n2 3 2\\n2 3 3\\n1 1 1\\n') == '-1'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 1 2') == '5'\nassert solution('3 3 1 2') == '-1'\nassert solution('4 2 1 3') == '-1'\nassert solution('1 3 1 2') == '4'\nassert solution('2 3 3 3') == '-1'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 1 2') == '5'\nassert solution('3 4 1 2') == '-1'\n\n----------------\n\nSample Input:\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\nSample Output:\n8\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n''') == '-1'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"mirkovC4nizCC44\") == \"FRULA\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'\nassert solution('mirkC4nizCC44') =='mirkC4nizCC44'\nassert solution('mirkC4nizCC44') == 'C4nizCC44'\nassert solution('mirkC4nizCC44') == 'CC44'\nassert solution('mirkC4nizCC44') == 'CC44'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirnoviz\"\nassert solution(\"C4nizCC44\") == \"mirkoviz\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'\nassert solution('mirkoDBA1') =='mirkoDBA1'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('mirkovC4nizCC44') =='mirnoviz'"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"mirkoC4nizCC44\nC4\n\"\"\") == \"mirko\""
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'\nassert solution('mirkoC4nizCC44') =='mirkoC4nizCC44'\nassert solution('mirkoC4nizC11') == 'C4nizC11'\nassert solution('mirkoC4nizC1111') == 'C4nizC1111'\nassert solution('mirkoC4nizCC44') == 'FRULA'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"mirkovC4nizCC44\"\"\") == \"mirkovnizCC44\"\nassert solution(\"\"\"mirkovC4nizCC44\"\"\", \"CC44\") == \"mirkovCC44CC44\""
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkvC44'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'\n\"\"\"\n\n\"\"\"\n--- Day 16: Spatial Logic ---\n\nSanta is delivering presents to an infinite two-dimensional grid of houses.\n\nEach house is located at a point in the grid and houses are laid out in a spiral pattern, starting at the center house and going around the grid clockwise.\n\nThe center house is at position (0, 0).\n\nVisually, the grid of houses looks like this:\n\n\n\n\n\nOnce Santa arrives at the house at position (1, 1) (bottom-left corner) he has a small gift for every house he visits: a present if the house is empty, a present if there are no presents at the house, and a key if there is a house at the house location but no present.\n\nThe street lights at his house are initially turned all the way down, so he digs a route across the grid to reach the house.\n\nHe grabs a present and picks it up.\n\nThe present is a big thank-you card with regards to Santa.\n\nHe drops the present and takes the key with him. The key is also useful: if present and key are adjacent, he will bring the presents on both the left and right side of the house.\n\nHis house and the key are not adjacent, so his route is the shortest: he takes the key and picks it up, then heads back towards the house.\n\nHis house and the present are not adjacent, so he finds the key and picks it up, then takes the present and heads back towards the house.\n\nThe second person he meets, who is one step away from the door, has no presents and no key, and must pick one up.\n\nSo, the third person he meets has two presents and one key, giving Santa 3 credits.\n\nGiven the location of the grants and the order in which the grants are delivered, find the fewest number of turns Santa must take to reach the door (if he ever does, what is the fewest number of turns he must take?).\n\nIf no presents are delivered, return -1.\n\n--- Part Two ---\n\nAs he follows Santa to the house, he sees a little boy sitting by the fire. He is surprised to see that the fire has not been caused by fire.\n\nHe sees the key in the corner of the room, and puts it in the ignition. The ignition explodes.\n\nThe boy wakes up and takes a seat. The key falls off and immediately kills the boy. He is left alone.\n\nHe then takes the presents and leads off into the sky.\n\nHe meets a group of friends. The first person he meets is one step away from the door.\n\nHe meets the second person in the group.\n\nThe third person he meets is one step away from the door.\n\nThe fourth person he meets is two steps away from the door.\n\nThe fifth person he meets is two steps away from the door.\n\nThe sixth person he meets is three steps away from the door.\n\nThe seventh person he meets is three steps away from the door.\n\nThe eighth person he meets is four steps away from the door.\n\nThe ninth person he meets is four steps away from the door.\n\nThe tenth person he meets is five steps away from the door.\n\nThe eleventh person he meets is five steps away from the door.\n\nThe twelfth person he meets is six steps away from the door.\n\nThe thirteenth person he meets is six steps away from the door.\n\nThe fourteenth person he meets is seven steps away from the door.\n\nThe fifteenth person he meets is seven steps away from the door.\n\nThe sixteenth person he meets is eight steps away from the door.\n\nThe seventeenth person he meets is eight steps away from the door.\n\nThe eighteenth person he meets is nine steps away from the door.\n\nThe eighteenth-last person he meets is nine steps away from the door.\n\nThe eighteenth-last person he meets is 10 steps away from the door.\n\nThe ninth-to-last person he meets is 10 steps away from the door.\n\nThe last person he meets is 11 steps away from the door.\n\nHow many turns does it take Santa to the door?\n\"\"\"\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"32\"\nassert solution(\"4\") == \"65\"\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n3\\n65\\n45\\n60\\n25\\n') == '32'\n\nSample Input:\n5\n100 150\n200 10\n20 10\n0 20\n2\nSample Output:\n140\n\nimport math\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n3 65\n45 10\n60 25\n\"\"\") == \"32\"\nassert solution(\"\"\"\n10\n30 95\n45 10\n60 25\n\"\"\") == \"68\"\nassert solution(\"\"\"\n2\n10 100\n100 10\n\"\"\") == \"10\"\n\"\"\""
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n3 65\n45 10\n60 25\n\"\"\") == \"32\"\nassert solution(\"\"\"\n1\n3 9\n2 2\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3\\n1 3\\n5 7\\n9 20\\n21 5\\n24 10') == '32'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"32\"\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"32\"\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('10') == '3'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('1') == '0'\nassert solution('3') == '4'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"32\""
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 0 3 1\") == \"3\"\nassert solution(\"5\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"5 3 3\") == \"2\"\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '''\n1 2 0 3 1\n'''\n) == '3'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2 0 3 1\\n') == '2'\nassert solution('5\\n0 0 0 1 2\\n') == '2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n4 3 0 1') == '3'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '10'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '3\\n2'"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 2 0 3 1\n''') == '2'\n\nassert solution('''\n5\n0 1 0 3 1\n''') == '3'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 0 3 1') == '2'\nassert solution('4\\n0 1 2 3 1') == '3'\nassert solution('5\\n1 2 0 3 1') == '2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0'\nassert solution('5') == '2'\nassert solution('10') == '0'\nassert solution('20') == '2'\nassert solution('30') == '2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2 0 3 1\n''') == '3 2'\n\nassert solution('''\n10\n1 3 5 0 2 5 8 7 6 4\n''') == '6 4'\n\nassert solution('''\n5\n1 2 0 3 1\n''') == '3 2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 0 3 1') == '3'\nassert solution('5') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4''') == '2'\nassert solution('''2 4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4''') == '1'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4\") == \"2\"\nassert solution(\"2 2 5\") == \"2\"\nassert solution(\"2 2 1\") == \"1\"\nassert solution(\"2 2 2\") == \"1\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4 4') == '2'\nassert solution('+ 1 1') == '1'\nassert solution('- 1 2') == '1'\nassert solution('+ 1 3') == '1'\nassert solution('- 1 4') == '1'\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '1'\n\nassert solution('1 2 2 3') == '2'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4') == '1'\nassert solution('3 5 4\\n+ 1 1\\n+ 1 2\\n+ 1 3\\n- 1 4\\n+ 1 5\\n+ 1 6\\n+ 1 7') == '7'\nassert solution('8 8 8\\n+ 1 1\\n+ 1 2\\n+ 1 3\\n+ 1 4\\n+ 1 5\\n+ 1 6\\n+ 1 7\\n+ 1 8\\n- 1 1\\n- 1 2\\n- 1 3\\n- 1 4\\n- 1 5\\n- 1 6\\n- 1 7\\n- 1 8') == '64'"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 5 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4\n''') == '1'"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4 4') == '2'\nassert solution('5 5 5') == '0'"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3 3\") == \"7\"\nassert solution(\"5 5 5\") == \"12\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4 4') == \"2\"\nassert solution('1 4 4') == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4\n''') == '1', \"2 lines test\"\nassert solution('''\n2 4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4\n''') == '5', \"2 lines test\"\n'''\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1000000000 0\n1000000000 1\n''') == '500000004'\nassert solution('''\n4\n1000000000 0\n3000000000 1\n1000000000 2\n1000000000 3\n''') == '16593470015952264081'\nassert solution('''\n2\n1000000000 0\n1000000000 1\n''') == '0'\nassert solution('''\n2\n1000000000 0\n1000000000 1\n''') == '1'\nassert solution('''\n3\n1000000000 0\n2000000000 1\n3000000000 2\n''') == '0'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n5 6 7') == '11605835490518776698614482648224586461806244056170072829203967239245562'\nassert solution('2\\n1 1') == '1'\nassert solution('1000000000 0\\n1000000000 1') == '10**9+7'"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n1000000000 0\n1000000000 1\n''') == '500000004'\nassert solution('''\n2\n1000000000 0\n1000000000 1\n''') == '10000000'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n1000000000 0\\n1000000000 1') == '500000004'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n1000000000 0\n1000000000 1\n''') == '500000004'\nassert solution('''\n1000000000 1\n1000000000 0\n''') == '500000004'\nassert solution('''\n3\n1000000000 0\n1000000000 1\n1000000000 2\n''') == '11000000000'\n''')"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1000000000 0\\n1000000000 1') == \"500000004\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1000000000 0\\n1000000000 1\") == \"500000004\"\nassert solution(\"3\\n1000000000 0 1\\n1000000000 1\") == \"500000004\"\nassert solution(\"1000000000 0\\n1000000000 1\") == \"500000004\"\nassert solution(\"1000000000 0 1\") == \"500000004\"\nassert solution(\"1000000000 1\") == \"500000004\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1000000000 0\n1000000000 1\n1000000000 2\n1000000000 3\n''') == '60000000'\n'''\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n') == '500000004'\nassert solution('2\\n') == '900000000000000000'\nassert solution('10\\n') == '989999999999999999999999999999999999999'\nassert solution('100\\n') == '9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1000000000 1\n1000000000 0\n1000000000\n''') == '500000004'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 8') == '12'\n\n'''\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 8\") == \"12\"\nassert solution(\"10 20\") == \"20\""
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 3 13 27\\n3 5 23 24\"\n) == \"12\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 8') == '12'\n\nstdin = \"\"\"5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n\"\"\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 2 4') == '1'\nassert solution('3 8') == '3'"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5 20 21') == '12'\nassert solution('5 8') == '12'\nprint(solution(input))\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 7\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n''') == '12'\nassert solution('''\n1 2\n1 3\n''') == '0'\nassert solution('''\n1 3\n1 2\n''') == '4'\nassert solution('''\n1 4\n1 2\n1 3\n''') == '2'\n''')"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_1) == \"8\"\nassert solution(input_2) == \"3\"\nassert solution(input_3) == \"0\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 8') == '12'\nassert solution('5 6') == '1'\nassert solution('7 7') == '1'\nassert solution('1 7') == '1'\nassert solution('1 2 3') == '0'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n100000\n100000\n4\n1\n20\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1\n20\n100000\n20\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1\n1000000\n1000000\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '2'\nassert solution('5') == '3'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n15 5 3\\n12 4 4\\n20 10 5') == '3'\nassert solution('1\\n1 2 3\\n1 2 3\\n2 2 4') == '2'\nassert solution('2\\n2 2 2\\n2 1 2\\n3 3 3\\n3 3 3') == '1'\nassert solution('5\\n5 5 5\\n5 5 5\\n4 4 4\\n4 4 4\\n5 5 5') == '1'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 19\\n15 5 3\\n12 4 4\\n20 10 5\\n') == '3'\nassert solution('3 4\\n20 10\\n2 2\\n3 5\\n10 10\\n') == '3'\nassert solution('2 1\\n2 2\\n') == '0'\nassert solution('10 10\\n2 2\\n') == '1'\nassert solution('3 2\\n5 4\\n9 8\\n') == '0'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    3 3\n    2 2 2\n    4 4\n    6\n''') == \"3\"\n\nassert solution('''\n    2 2 2\n    2 2 2\n    2\n''') == \"4\"\n\nassert solution('''\n    3 4\n    7 6 3\n    8 8 6\n    9 9 8\n''') == \"4\"\n\nassert solution('''\n    4 2\n    8 4 4\n    10 4 2 2\n    15 4 2 2\n    20 6 2\n    25 10 2\n    30 4 2\n''') == \"1\"\n\nassert solution('''\n    1 1\n    10 1\n    25\n''') == \"3\""
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 19\n15 5 3\n12 4 4\n20 10 5\n''') == '3'\nassert solution('''\n3 18\n16 5 1\n20 10 5\n''') == '1'\nassert solution('''\n3 17\n16 5 1\n20 10 5\n''') == '2'"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n15 5 3\n12 4 4\n20 10 5\n''') == '3'\nprint('SUCCESS')"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 19\\n15 5 3\\n12 4 4\\n20 10 5\\n') == '3'\n\n'''"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n15 5 3\\n12 4 4\\n20 10 5') == '3'\nassert solution('5\\n25 20 30 20\\n22 22 22\\n22 22 22\\n22 22 22\\n22 22 22\\n22 22 22') == '0'\nassert solution('5\\n15 5 3\\n12 4 4\\n20 10 5\\n20 10 5\\n20 10 5\\n20 10 5') == '2'\nassert solution('5\\n25 20 30 20\\n22 22 22\\n22 22 22\\n22 22 22\\n22 22 22\\n22 22 22\\n22 22 22\\n22 22 22') == '0'\nassert solution('5\\n15 5 3\\n12 4 4\\n20 10 5\\n20 10 5\\n20 10 5\\n20 10 5') == '2'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 20\n15 5 3\n12 4 4\n20 10 5\n''') == '3'\n\nassert solution('''\n8 16\n2 4 2\n2 4 2\n2 4 2\n2 4 2\n2 4 2\n2 4 2\n2 4 2\n2 4 2\n2 4 2\n''') == '4'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1 1') == '1'\nassert solution('2\\n3 2\\n4 4') == '2'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\n\"\"\"\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1 2\n3 4''') == '2'\nassert solution('''5\n1 3\n2 4\n5 2\n6 1\n3 5''') == '1'\nassert solution('''3\n4 3\n2 5\n3 6''') == '3'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1 1') == '1'"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    2 2\n    1 2\n    1 3\n    2 4\n    ''') == '2'\n\nassert solution('''\n    3 2\n    1 1\n    1 2\n    1 3\n    1 4\n    2 2\n    2 4\n    ''') == '4'\n\nassert solution('''\n    4 3\n    1 1\n    1 1\n    1 2\n    1 2\n    2 2\n    2 4\n    ''') == '3'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n1 1\") == \"1\"\nassert solution(\"3\\n3 1 1\") == \"4\"\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n1 1') == '1'"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 1\") == \"1\"\nassert solution(\"3\\n1 2 1\\n1 3 1\\n2 3 1\\n2 4 2\\n3 4 2\") == \"2\"\nassert solution(\"4\\n1 2 1 1\\n1 3 1 1\\n2 3 1 1\\n2 4 1\\n3 4 1\\n3 5 2\\n4 5 2\\n4 6 1\\n5 6 1\\n5 7 1\\n6 7 1\\n6 8 2\\n7 8 2\\n7 9 1\\n8 9 1\\n8 10 1\\n9 10 1\\n9 11 1\\n10 11 1\\n10 12 2\\n11 12 2\\n11 13 1\\n12 13 1\\n12 14 1\\n13 14 1\\n13 15 1\\n14 15 1\\n14 16 1\\n15 16 1\\n15 17 2\\n16 17 2\\n16 18 1\\n17 18 1\\n17 19 1\\n18 19 1\\n18 20 2\\n19 20 2\\n19 21 1\\n20 21 1\\n20 22 1\\n21 22 1\\n21 23 1\\n22 23 1\\n22 24 2\\n23 24 2\\n23 25 1\\n24 25 1\\n24 26 2\\n25 26 2\\n25 27 2\\n26 27 2\\n26 28 1\\n27 28 1\\n27 29 1\\n28 29 1\\n28 30 1\\n29 30 1\\n29 31 1\\n30 31 1\\n30 32 1\\n31 32 1\\n31 33 1\\n32 33 1\\n32 34 1\\n33 34 1\\n33 35 1\\n34 35 1\\n34 36 2\\n35 36 2\\n35 37 1\\n36 37 1\\n36 38 2\\n37 38 2\\n37 39 1\\n38 39 1\\n38 40 1\\n39 40 1\\n39 41 1\\n40 41 1\\n40 42 2\\n41 42 2\\n41 43 1\\n42 43 1\\n42 44 1\\n43 44 1\\n43 45 1\\n44 45 1\\n44 46 2\\n45 46 2\\n45 47 1\\n46 47 1\\n46 48 1\\n47 48 1\\n47 49 1\\n48 49 1\\n48 50 1\\n49 50 1\\n49 51 2\\n50 51 2\\n50 52 1\\n51 52 1\\n51 53 1\\n52 53 1\\n52 54 2\\n53 54 2\\n53 55 1\\n54 55 1\\n54 56 1\\n55 56 1\\n55 57 2\\n56 57 2\\n56 58 1\\n57 58 1\\n57 59 1\\n58 59 1\\n58 60 2\\n59 60 2\\n59 61 1\\n60 61 1\\n60 62 2\\n61 62 2\\n61 63 1\\n62 63 1\\n62 64 2\\n63 64 2\\n63 65 1\\n64 65 1\\n64 66 1\\n65 66 1\\n65 67 1\\n66 67 1\\n66 68 2\\n67 68 2\\n67 69 1\\n68 69 1\\n68 70 1\\n69 70 1\\n69 71 1\\n70 71 1\\n70 72 2\\n71 72 2\\n71 73 1\\n72 73 1\\n72 74 1\\n73 74 1\\n73 75 1\\n74 75 1\\n74 76 1\\n75 76 1\\n75 77 2\\n76 77 2\\n76 78 1\\n77 78 1\\n77 79 1\\n78 79 1\\n78 80 1\\n79 80 1\\n79 81 1\\n80 81 1\\n80 82 2\\n81 82 2\\n81 83 1\\n82 83 1\\n82 84 1\\n83 84 1\\n83 85 1\\n84 85 1\\n84 86 1\\n85 86 1\\n85 87 1\\n86 87 1\\n86 88 1\\n87 88 1\\n87 89 1\\n88 89 1\\n88 90 1\\n89 90 1\\n89 91 1\\n90 91 1\\n90 92 1\\n91 92 1\\n91 93 1\\n92 93 1\\n92 94 1\\n93 94 1\\n93 95 1\\n94 95 1\\n94 96 1\\n95 96 1\\n95 97 1\\n96 97 1\\n96 98 1\\n97 98 1\\n97 99 1\\n98 99 1\\n98 100 1\\n99 100 1\\n99 101 1\\n100 101 1\\n100 102 2\\n101 102 2\\n101 103 1\\n102 103 1\\n102 104 1\\n103 104 1\\n103 105 1\\n104 105 1\\n104 106 1\\n105 106 1\\n105 107 1\\n106 107 1\\n106 108 1\\n107 108 1\\n107 109 1\\n108 109 1\\n108 110 1\\n109 110 1\\n109 111 1\\n110 111 1\\n110 112 1\\n111 112 1\\n111 113 1\\n112 113 1\\n112 114 1\\n113 114 1\\n113 115 1\\n114 115 1\\n114 116 1\\n115 116 1\\n115 117 2\\n116 117 2\\n116 118 1\\n117 118 1\\n117 119 1\\n118 119 1\\n118 120 1\\n119 120 1\\n119 121 1\\n120 121 1\\n120 122 1\\n121 122 1\\n121 123 1\\n122 123 1\\n122 124 1\\n123 124 1\\n123 125 1\\n124 125 1\\n124 126 1\\n125 126 1\\n125 127 1\\n126 127 1\\n126 128 1\\n127 128 1\\n127 129 1\\n128 129 1\\n128 130 1\\n129 130 1\\n129 131 1\\n130 131 1\\n130 132 1\\n131 132 1\\n131 133 1\\n132 133 1\\n132 134 1\\n133 134 1\\n133 135 1\\n134 135 1\\n134 136 1\\n135 136 1\\n135 137 1\\n136 137 1\\n136 138 1\\n137"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"RBRB\") == \"1\"\nassert solution(\"RBBB\") == \"2\"\nassert solution(\"BBBB\") == \"3\"\nassert solution(\"YRRG\") == \"5\"\nassert solution(\"YRYB\") == \"5\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('RGGR') == '3'\nassert solution('GBGB') == '4'\nassert solution('BYBY') == '4'\nassert solution('YRYR') == '5'\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"RGRR\") == \"1\"\nassert solution(\"GRGR\") == \"2\"\nassert solution(\"BYBY\") == \"0\"\nassert solution(\"YRYR\") == \"4\""
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nRGRR\nGBGB\nBYBY\nYRYR''') == '3'\nassert solution('''\nRGRR\nGBGR\nBYBY\nYRYR''') == '4'\nassert solution('''\nRGRR\nGBGR\nBYBY\nYRYR''') == '5'\nassert solution('''\nRGGR\nGBGB\nBYBY\nYRYR\n''') == '11'\nassert solution('''\nRGRR\nGBGR\nBYBY\nYRYR\n''') == '6'\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('RBRR') == '3'\nassert solution('RRRR') == '3'\nassert solution('RRGGB') == '4'\nassert solution('YBGBR') == '2'\nassert solution('YBBRG') == '2'\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"RGGR\") == \"1\"\nassert solution(\"GBGB\") == \"1\"\nassert solution(\"BYBY\") == \"2\"\nassert solution(\"YRYR\") == \"3\"\n\nprint(solution(input()))\n\n\"Y\"\n\"Y\"\n\"R\"\n\"G\"\n\"B\"\n\"R\"\n\"R\"\n\"G\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\"B\"\n\""
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nRRRRRRRRRR\nRRRRRRRRRR\nRRRRRRRRRR\nRRRRRRRRRR\n''') == '13'\nassert solution('''\nRYYBBRRRRR\nRYYBBRRRRR\nYYYRBYRRRR\nYYYRBYRRRR\n''') == '10'\nassert solution('''\nRYYBBRRRRR\nBYYYRBYRRR\nBYYYRBYRRR\nYYYBBRRRR\nYYYBBRRRR\n''') == '11'\nassert solution('''\nRRRRRGGGGR\nRRRRRGGGGR\nRRRRRGGGGR\nRRRRRGGGGR\nRRRRRGGGGR\n''') == '10'\nassert solution('''\nRRRRRGGGGR\nRRRRRGGGGR\nRRRRRGGGGR\nRRRRRGGGGR\nRRRRRGGGGR\n''') == '9'\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"RRYG\") == \"4\"\nassert solution(\"RGR\") == \"3\"\nassert solution(\"RGYG\") == \"2\"\nassert solution(\"RBYG\") == \"1\"\nassert solution(\"YRYR\") == \"4\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('RGGGG') == '1'\nassert solution('GGBBB') == '5'\nassert solution('YYYYY') == '4'\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('RGGR') == '2'\nassert solution('GBGB') == '2'\nassert solution('BYBY') == '3'\nassert solution('YRYR') == '3'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n-2 -1 0 1 2\n2 1 0 -1 -2''') == 'AAAAA'\n\nSample Input 2:\n10\n-1 -2 -3 -4 -5\n1 2 3 4 5\n-1 -2 3 4 5\nSample Output 2:\nAAAAAB\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == 'AAAAA'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"ABBA\"\n\nassert solution(\"1\") == \"A\""
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"ABABA\"\n\n\"\"\"\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\na.sort()\nb.sort()"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\", \"Just an empty string\"\nassert solution(\"1\") == \"A\", \"Just one character\"\nassert solution(\"-1\") == \"A\", \"Just one character\"\nassert solution(\"0\") == \"B\", \"Just one character\"\nassert solution(\"1 2\") == \"AAB\", \"All the same\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == 'AAABA'\nassert solution('''\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == 'AAABA'\nassert solution('''\n4\n-3 -1 0 1\n2 1 0 -1\n''') == 'AAABB'\nassert solution('''\n4\n-3 -1 0 1\n2 1 0 -1\n''') == 'AAABB'\nassert solution('''\n1\n-1\n''') == 'A'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n-2 -1 0 1 2\") == \"AAA\"\nassert solution(\"5\\n-2 -1 0 1 2\") == \"AAAA\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == 'AAABAA'\nassert solution('''\n5\n-1 0 -1 -2 1\n1 1 0 -1 -2\n''') == 'AAABAA'\nassert solution('''\n5\n-1 0 1 -2 1\n1 1 0 -1 -2\n''') == 'AAABAA'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([5, -2, 0, 1, 2]) == \"AAAAA\""
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"ABBAA\"\nassert solution(\"10\") == \"AAABBBAABBAA\"\nassert solution(\"9\") == \"AAABBBAABBAA\"\nassert solution(\"2\") == \"AAABBAABBAA\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'IMPOSSIBLE'"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 3') == '1'\nassert solution('5 4') == '2'\nassert solution('4 0') == '4'\nassert solution('6 1') == 'IMPOSSIBLE'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"4 0\") == \"2\"\nassert solution(\"0 2\") == \"3\"\nassert solution(\"6 1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n2 3\\n4 0\\n0 2\\n6 1') == '1'\nassert solution('5 5\\n3 4\\n1 0\\n0 2\\n6 2\\n') == '2'\nassert solution('5 5\\n1 2\\n1 0\\n1 1\\n4 2\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == \"IMPOSSIBLE\"\nassert solution('4 0') == \"IMPOSSIBLE\"\nassert solution('0 2') == \"IMPOSSIBLE\"\nassert solution('6 1') == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6') == '2'\nassert solution('1\\n3\\n2\\n0\\n6\\n5') == '4'\nassert solution('1\\n2\\n3\\n4\\n0\\n5') == 'IMPOSSIBLE'\nassert solution('2\\n3\\n4\\n0\\n5\\n6') == 'IMPOSSIBLE'"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 3\") == \"IMPOSSIBLE\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"4 0\") == \"4\"\nassert solution(\"0 2\") == \"2\"\nassert solution(\"6 1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3\\n2 3\\n4 0\\n0 2\\n6 1\\n') == 'IMPOSSIBLE'\nassert solution('5 5\\n0 3\\n2 3\\n4 0\\n1 4\\n') == '8'\nassert solution('5 7\\n0 2\\n1 1\\n3 5\\n4 2\\n6 5\\n') == '6'\nassert solution('5 5\\n0 2\\n1 1\\n3 5\\n4 2\\n6 5\\n') == '7'"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n') == 'IMPOSSIBLE', \"First\"\nassert solution('2\\n') == '1', \"Second\"\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '12\\n4\\n11\\n3\\n2\\n'\n\nassert solution('''1\n''') == '0\\n'\n\nassert solution('''5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '10\\n8\\n10\\n'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx') == '12\\n4\\n11\\n3\\n2\\n'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\") == \"12\\n4\\n11\\n3\\n2\\n\"\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx') == '12\\n4\\n11\\n3\\n2\\n'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria''') == '''12\n4\n11\n3\n2\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria''') == '''12\n4\n11\n3\n2\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx''') == '''12\n4\n11\n3\n2'''"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria''') == '12\\n11\\n3\\n2\\n'\nassert solution('''4 4\na\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria''') == '4\\n3\\n2\\n'\nassert solution('''3 3\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria''') == '3\\n3\\n'\n'''"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5\\naustria\\naustria\\naustria\\naustria\\nautocorrect\\nautocorrelation\\nzyx\\naustria\\n') == \"12\\n4\\n11\\n3\\n2\"\nassert solution('10 10\\nhello\\nhello\\nhello\\nhello\\nhello\\nhello\\nhello\\nhello\\nhello\\n') == \"10\\n\"\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx') == '12\\n4\\n11\\n3\\n2\\n'"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([0, 1, 1]) == \"3\"\nassert solution([0, 1, 3]) == \"4\"\nassert solution([1, 3, 0]) == \"1\"\nassert solution([1, 3, 1]) == \"3\"\nassert solution([1, 3, 2]) == \"3\"\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 1 1\") == \"3\"\nassert solution(\"2\\n0 1 0\") == \"impossible\"\nassert solution(\"2\\n0 0 1\") == \"impossible\"\nassert solution(\"1\\n0\") == \"impossible\"\nassert solution(\"1\\n1\") == \"1\"\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '12'"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 1 1\n''') == '3'\nassert solution('''\n3\n2 2 1\n''') == '3'\nassert solution('''\n3\n2 2 1\n''') == '4'\nassert solution('''\n3\n1 1 1\n''') == '1'\nassert solution('''\n3\n1 1 1\n''') == '2'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 1 1\n''') == '3'\nassert solution('''\n3\n2 1 1\n''') == '3'\nassert solution('''\n3\n1 0 0\n''') == '0'\nassert solution('''\n3\n3 1 2\n''') == '5'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1 1') == '4'\nassert solution('5 3 3') == '4'\nassert solution('3 10 10') == '11'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n0 1\\n') == '3'\nassert solution('1\\n0 1\\n') == '2'\nassert solution('3\\n0 0 0\\n') == '1'"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3') == '3'\nassert solution('1\\n0\\n0') == 'impossible'\nassert solution('5\\n5 0 0\\n1 1 0\\n4 4 1') == '7'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '3'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nHFBJCDEGIA\nBIGEDCJFAH\nBIGEDCJFAH\n''') == 'HFBJCDEGIA'\nassert solution('''\nHFBJCDEGIA\nBIGEDCJFAH\nIGEDCJBAFH\n''') == 'HFBJCDEGIA'\nassert solution('''\nHFBJCDEGIA\nBIGEDCJFAH\nIGEDCJBAFH\n''') == 'HFBJCDEGIA'\nassert solution('''\nHFBJCDEGIA\nBIGEDCJFAH\nIGEDCJBAFH\n''') == 'HFBJCDEGIA'\nassert solution('''\nHFBJCDEGIA\nBIGEDCJFAH\nIGEDCJBAFH\n''') == 'HFBJCDEGIA'\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"HFBIGEDCJA\") == \"HFBJCDEGIA\"\nassert solution(\"BIGEDCJFAH\") == \"IGEDCJBAFH\"\n\nSample Input:\nHGHEFABCCDCDCE\nCDEBCACGCDHDCCA\nCDEBCACGCDHDCCA\nSample Output:\nPre In In In\nCDEGHDCCA\nEABBCACCDCD\nEABBCACCDCD\n\"\"\""
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nHFBJCDEGIA\nBIGEDCJFAH\nIGEDCJBAFH\n''') == 'Pre In In Post In Post Pre'\nassert solution('''\nFJADEDCEBIG\nBIGEDCJFAH\nIGEDCJBAFH\n''') == 'Pre In In Post In Pre'\n'''\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''HFBJCDEGIA\nBIGEDCJFAH\nIGEDCJBAFH''') == 'Pre In In Post In Pre'\n\nassert solution('''ABCDEFG\nABCDEFG\nACDEFGH''') == 'Pre In In Post In Pre'\n\nassert solution('''AACDEFG\nAACDEFG\nDEFGHH''') == 'Pre In In Post In Pre'\n\nassert solution('''AACDEFG\nAACDEFG\nACDEFGH''') == 'Pre In In Post In Pre'\n\nassert solution('''ACDEFGH\nACDEFGH\nDEFGHIJ''') == 'Pre In In Post In Pre'"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('HFBIGEDCJA') == 'Pre In Post In Pre'\nassert solution('BIGEDCJFAH') == 'Pre In Post In Pre'\nassert solution('BIGEDCJFAH') == 'Pre In Post In Pre'\n'''\n\nfrom collections import deque\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('HFBJCDEGIA') == 'HFBJCDEGIA'\nassert solution('IGEDCJBAFH') == 'IGEDCJBAFH'\n\"\"\"\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('HBFIIGEDCJA') == 'HFBJCDEGIA'\nassert solution('BIGEDCJFAH') == 'BIGEDCJFAH'\nassert solution('BIGEDCJFAH') == 'BIGEDCJFAH'\n\nSample Input:\nCOINCOINCOIN\nCINCOINCIN\nCOINCOINCIN\nSample Output:\nPre In In Pre\nCOINCOINCOIN\nCINCOINCIN\nCOINCOINCIN'\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('HFBIGEDCJA') == 'Pre In In Post In Post Pre'\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    HFBJCDEGIA\n    BIGEDCJFAH\n    IGEDCJBAFH\n    ''') == 'Pre In Post In Pre'\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('HCBIGEDCJA') == 'HFBJCDEGIA'\nassert solution('BIGEDCJFAH') == 'IGEDCJBAFH'\nassert solution('BIGEDCJFAH') == 'IGEDCJBAFH'\nassert solution('CHICAGOBIGEDCJA') == 'CHICAGOIGEDCJFA'\nassert solution('ABBADABBA') == 'ABBABBBB'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '5'\nassert solution('4') == '12'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '11'\nassert solution('2') == '10'\nassert solution('3') == '6'\nassert solution('3') == '7'\nassert solution('4') == '5'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n2\\n10 0') == '10'\nassert solution('2\\n3 1 1') == '10'\nassert solution('1\\n4 1 0') == '9'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n1\n10 0\n2 1 1\n1\n4 1 0\n''') == '11'\nassert solution('''\n2\n2\n10 0\n3 1 1\n1\n4 1 0\n''') == '10'\n'''\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '1'\n\n'''"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '10'\nassert solution('2') == '10'\nassert solution('2') == '10'\nassert solution('2') == '10'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '10'\nassert solution('1') == '10'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '10'\nassert solution('5') == '7'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '10'\nassert solution('4') == '9'\n'''\nimport sys\nimport io\n\nsys.stdin = io.BytesIO(sys.stdin.read().encode())\nprint(f\"{solution() = }\")\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n2\n0\n''') == '11'\n\nassert solution('''\n3\n3 1 1\n1\n4 1 0\nSample Output:\n11\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''\n0 0 100 100\n30 30 60 60\n''') == '10000.00'\nassert solution(\n'''\n100 100 100 100\n100 100 100 100\n''') == '10000.00'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n0 0 100 100\n30 30 60 60\n''') == '10000.00\n'''\n    return str(sum(list(map(lambda x: (float(x[0]) * float(x[1])), stdin.strip().split('\\n')))))\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == '0.00'\nassert solution(\"1\") == '1.00'\nassert solution(\"2\") == '2000.00'\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n0 0 100 100\\n30 30 60 60') == '10000.00'\nassert solution('1\\n-1000 -1000 1000 1000\\n0 0 100 100\\n30 30 60 60') == '10000.00'\nassert solution('1\\n-1000 -1000 1000 1000\\n-100 -100 100 100\\n30 30 60 60') == '20000.00'"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n2 2 2\\n10 10 10\\n1 1 1\\n') == \"10000.00\"\nassert solution('5\\n1 0 1 0 1\\n2 2 1\\n3 3 1\\n4 4 1\\n5 5 1\\n') == \"40000.00\"\nassert solution('4\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n') == \"40000.00\"\nassert solution('5\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == \"10000.00\""
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n0 0 100 100\n30 30 60 60\n''') == '10000.00'"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''0 0 100 100\n30 30 60 60\n''') == '10000.00'\n\nassert solution('''1\n0 0 100 100\n''') == '10000.00'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n10\n0 0 100 100\n10 20 60 60\n3 20 20 20\n5 30 30 30 30\n0 0 100 100\n30 30 60 60\n\"\"\") == \"10000.00\"\nassert solution(\"\"\"\n2\n0 0 100 100\n30 30 60 60\nSample Output:\n100000000.00\n\"\"\") == \"100000000.00\"\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n0 0 100 100\\n30 30 60 60\\n') == '10000.00'\nprint('PASSED!')\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n0 0 100 100\n30 30 60 60\n''') == '10000.00'\nassert solution('''\n0 0 10 10\n30 30 10 10\n''') == '30.00'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 3\n1 3\n4 5\n2 4\n\"\"\") == \"5\"\nassert solution(\"\"\"\n2 2\n3 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 1\n1 3\n4 5\n2 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10 10\n1 4\n2 5\n3 6\n4 7\n5 8\n6 9\n7 10\n\"\"\") == \"4\"\n\"\"\""
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"5\"\nassert solution(\"4 5\") == \"5\"\nassert solution(\"2 4\") == \"0\"\nassert solution(\"1 3\") == \"1\""
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 3\n1 3\n4 5\n2 4\n''') == '5'\nassert solution('''\n5 3\n1 2\n4 5\n2 3\n''') == '4'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n1 3\n4 5\n2 4\n''') == '1'\nprint(solution('''\n5 3\n1 3\n4 5\n2 4\n'''))\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == '5'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3\\n4 5') == '5'\nassert solution('1 2 3\\n4 1 2\\n2 3 4\\n2 4 1\\n1 3 1\\n3 2 4\\n3 1 4\\n4 2 3\\n3 4 1\\n2 3 4\\n1 1 2\\n1 2 2\\n3 2 1\\n1 1 3\\n1 3 2\\n1 4 2\\n2 4 3\\n3 4 1\\n4 4 2\\n4 3 3\\n2 3 2\\n1 4 1\\n4 2 2\\n1 1 3\\n1 3 2\\n3 4 1\\n4 3 1\\n3 3 2\\n2 2 2\\n3 1 3\\n2 1 1\\n3 2 2\\n1 3 1\\n1 1 3\\n4 2 1\\n2 4 2\\n2 2 1\\n2 2 2\\n3 1 4\\n3 1 1\\n4 4 1\\n3 2 1\\n1 4 2\\n3 3 1\\n1 1 1\\n1 1 2\\n1 2 3\\n1 2 1\\n2 2 3\\n2 3 2\\n2 2 3\\n2 1 3\\n2 2 2\\n1 1 3\\n3 4 1\\n4 4 1\\n4 4 2\\n4 3 4\\n4 2 1\\n4 1 2\\n3 1 3\\n2 3 4\\n2 4 2\\n2 2 1\\n3 2 1\\n3 1 4\\n4 2 3\\n3 1 1\\n3 2 2\\n1 2 2\\n1 3 2\\n2 1 2\\n3 4 3\\n4 1 4\\n4 1 3\\n4 2 2\\n4 2 4\\n4 1 1\\n4 1 1\\n4 1 3\\n4 3 2\\n4 4 2\\n4 3 2\\n4 3 1\\n4 2 2\\n4 4 2\\n3 2 1\\n1 3 2\\n3 2 4\\n4 1 2\\n4 2 1\\n3 4 3\\n3 2 4\\n3 1 3\\n3 3 4\\n3 4 3\\n1 4 2\\n1 4 1\\n1 4 2\\n1 3 4\\n1 3 3\\n4 2 4\\n1 1 4\\n3 1 2\\n2 4 3\\n4 1 3\\n4 4 1\\n4 3 2\\n4 3 2\\n4 4 1\\n3 2 4\\n2 4 2\\n1 1 3\\n1 3 2\\n1 4 1\\n3 1 3\\n1 1 3\\n3 1 2\\n2 2 1\\n4 2 2\\n3 2 1\\n4 4 1\\n2 1 3\\n3 4 1\\n2 3 1\\n4 2 2\\n1 3 2\\n3 1 2\\n3 1 2\\n2 3 2\\n2 3 1\\n4 1 4\\n2 4 4\\n4 1 4\\n4 2 2\\n2 2 2\\n4 2 2\\n2 2 2\\n2 1 1\\n3 1 4\\n2 1 3\\n2 2 1\\n4 3 2\\n2 3 3\\n2 2 2\\n3 4 3\\n1 4 1\\n3 4 4\\n1 1 1\\n2 3 2\\n2 2 2\\n3 3 1\\n2 3 2\\n4 1 2\\n3 4 3\\n1 1 1\\n1 4 2\\n3 1 4\\n1 4 4\\n3 2 2\\n1 1 3\\n4 2 2\\n2 4 4\\n1 2 1\\n1 1 3\\n1 3 2\\n3 4 1\\n3 4 1\\n2 3 4\\n4 3 2\\n4 4 2\\n1 2 2\\n2 1 2\\n3 1 1\\n1 1 3\\n2 2 2\\n3 2 4\\n2 2 1\\n2 1 2\\n3 1 1\\n3 1 2\\n3 2 2\\n1 4 3\\n2 4 2\\n1 3 2\\n2 1 2\\n3 2 3\\n1 1 1\\n3 2 2\\n1 3 4\\n2 4 1\\n1 1 3\\n1 3 2\\n1 1 1\\n2 3 2\\n2 2 2\\n1 3 4\\n2 4 1\\n1 1 1\\n3 2 1\\n2 3 1\\n1 4 1\\n3 2 2\\n4 2 2\\n4 2 4\\n3 1 2\\n2 4 3\\n1 4 1\\n3 4 3\\n3 4 3\\n2 3 3\\n1 2 1\\n3 2 3\\n3 4 3\\n2 1 4\\n1 4 2\\n3 3 2\\n4 4 1\\n1 4 1\\n1 1 3\\n1 4 1\\n2 4 1\\n1 1 3\\n1 1 3\\n1 2 2\\n3 1 2\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 3\\n4 5\\n2 4\\n') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1 3\n2 4\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '3'\nassert solution('5 4') == '7'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '5'\nassert solution('5 5') == '6'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''11 13 17\n5 2 4\n0 0 0\n''') == '2095'\nassert solution('''11 11 11\n5 1 3\n0 1 2\n''') == '2112'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\nassert solution(\"1000001\\n1000002\\n1000003\") == \"0\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n11 13 17\n5 2 4\n0 0 0\n''') == '2095'\nassert solution('''\n11 13 17\n5 2 4\n1 2 3\n''') == '1580'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('15\\n4 5 6\\n3 4 5\\n1 1 1') == '2095'\nassert solution('13\\n7 2 8\\n5 3 4\\n1 2 3') == '2093'\nassert solution('11\\n13 17\\n5 2 4\\n0 0 0') == '2095'"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('11 13 17') == '2095'\nassert solution('10 11 13 17') == '2624'\nassert solution('0 0 0') == '0'\nassert solution('11 1 11') == '10'\n\n\"\"\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''m_1 10 m_2 9 m_3 8\nx_1 4\nx_2 2\nx_3 1\ny_1 0\ny_2 2\ny_3 1''') == \"2095\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('11 13 17') == '2095'\nassert solution('2 2 2') == '4'\nassert solution('10 11 17') == '19'\nassert solution('11 13 17') == '2095'\nassert solution('1 5 4') == '9'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\\n\") == \"2095\"\nassert solution(\"11 9 5 2 7 8 10 11\\n9 5 2 10 10 9 11\\n0 0 0 0 0 0\\n\") == \"1012\"\nassert solution(\"11\\n13\\n17\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''11 13 17\n5 2 4\n0 0 0''') == '2095'\nassert solution('''6 11 7\n1 2 3\n5 6 8''') == '110'\nassert solution('''6 11 7\n1 2 3\n5 6 8''') == '18'\nassert solution('''6 11 7\n1 2 3\n5 6 8''') == '5'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"11 13 17\n5 2 4\n0 0 0\"\"\") == '2095'\nassert solution(\"\"\"14 19 17\n5 2 4\n2 0 0\"\"\") == '2095'\nassert solution(\"\"\"15 13 17\n5 2 4\n0 0 0\"\"\") == '2095'\nassert solution(\"\"\"18 17 17\n5 2 4\n0 0 0\"\"\") == '2095'\nassert solution(\"\"\"14 13 17\n5 2 4\n0 0 0\"\"\") == '2095'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('a = \"Gon\";\\nb = a;\\nc = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == \"My name is Gon\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''var a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.''') == 'My name is Gon'\n'''"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == \"My name is Gon\"\n\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${a}`;\\nprint `My name is ${b}`;\\nend.') == \"My name is Gon\"\n\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${b}`;\\nprint `My name is ${b}`;\\nend.') == \"My name is Gon\"\n\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${a}`;\\nprint `My name is ${b}`;\\nprint `My name is ${c}`;\\nend.') == \"My name is Gon\"\n\nassert solution('print `My name is ${a}`;\\nprint `My name is ${b}`;\\nprint `My name is ${c}`;\\nend.') == \"My name is Gon\""
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == \"My name is Gon\"\nassert solution('print `My name is ${a}`;\\nprint `My name is ${b}`;\\nend.') == \"My name is Gon\""
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon\\nMy name is Gon'"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon\\nMy name is Gon'\n\nassert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon\\nMy name is Gon'\n'''\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    var a = \"Gon\";\n    var b = a;\n    var c = `My name is ${a}`;\n    print c;\n    print `My name is ${b}`;\nend\n''') == 'My name is Gon\\nMy name is Gon'\n\nassert solution('''\n    print `My name is ${b}`;\n    print `My name is ${b}`;\nend\n''') == 'My name is Gon\\nMy name is Gon'\n\nassert solution('''\n    var a = \"Gon\";\n    var b = a;\n    var c = `My name is ${a}`;\n    print c;\n    print `My name is ${b}`;\nend\n    \n''') == 'My name is Gon\\nMy name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\nassert solution('print `My name is ${a}`;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${b}`;\\nprint `My name is ${c}`;\\nend.') == 'My name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${a}`;\\nprint `My name is ${b}`;\\nprint `My name is ${c}`;\\nend.') == 'My name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${a}`;\\nprint `My name is ${b}`;\\nprint `My name is ${c}`;\\nend.') == 'My name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${a}`;\\nprint `My name is ${b}`;\\nprint `My name is ${c}`;\\nend.') == 'My name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''var a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon'\nassert solution('''var a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon'\n'''"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'fill 2 discard 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer 2 discard 2 fill 2 transfer"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n5\n4\n''') == 'fill 2\ndiscard 1\nfill 2\ntransfer 2 1\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ndiscard 1\n''')\n\nassert solution('''\n2\n8\n12\n''') == 'fill 2\ndiscard 1\nfill 2\ntransfer 2 1\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ndiscard 1\n''')\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '0 0 0 1 0 0 1 0 1 0 1 1 0 1 0 0 1 1 1 0 1 1 0 1 0 0 0 0 1 0 0 1 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 1 1 0 0 0 1 0 0 1 1 1 0 0 1 1 0 1 1 0 1 0 1 0 1 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 1 0 1 0 0 0 0 1 1 0 1 0 1 1 1 0 1 1 0 1 0 1 1 1 0 0 1 0 1 0 1 1 1 0 1 0 0 0 1 1 0 1 1 0 0 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 0 0 1 1 1 0 1 1 0 1 1 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 1 0 1 1 0 0 1 1 1 0 0 0 0 1 1 0 1 1 1 0 1 1 1 0 0 0 0 0 1 1 0 0 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 0 0 1 1 1 0 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 0 0 0 0 1 1 1 0 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 1 1 1 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 0 1 0 1 1 1 1 1 1 0 1 0 0 1 0 0 1 1 1 1 1 1 1 0 1 1 1 0 0 1 0 0 0 1 1 1 0 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n7 8\\n10') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n'\nassert solution('2\\n8 5\\n7') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\nassert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\nassert solution('6') == 'impossible'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\n8\n3\n\"\"\") == \"fill 2\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\ndiscard 1\nassert solution(\"\"\"\n5\n10\n3\n\"\"\") == \"fill 2\\ntransfer 2 0\\ndiscard 1\\ntransfer 2 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ntransfer 2 0\nassert solution(\"\"\"\n10\n20\n\"\"\") == \"fill 2\\ntransfer 2 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ntransfer 2 0\nassert solution(\"\"\"\n5\n1\n1\n\"\"\") == \"fill 2\\ntransfer 2 0\\ndiscard 1\\ntransfer 2 1\\ndiscard 1\\nfill 2\\ntransfer 2 0\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'fill 2 discard 1 transfer 2 1 transfer 2 0 discard 1 fill 2 transfer 2 0'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n7 8\\n10') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1'\nassert solution('1\\n7 8\\n10') == 'impossible'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"1 2 0\"\nassert solution(\"3\") == \"impossible\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1'\nassert solution('2') == 'fill 2\\ntransfer 2 0\\ndiscard 1'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 4 3\n''') == '27'\n\nassert solution('''\n5 2 3\n''') == '10'\n\nassert solution('''\n1000000000000 1\n''') == '1000000000000'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''10 4 3\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10''') == '27', \"Wrong answer\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2 4\") == \"1\"\nassert solution(\"7 10 4\") == \"11\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('3 4 2') == '3'"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '27'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_string) == output\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3') == '3'\nassert solution('4\\n4\\n4') == '4'\nassert solution('10\\n20\\n30') == '10'\nassert solution('10\\n20\\n50') == '20'\nassert solution('10\\n20\\n30') == '20'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"27\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('20 4 3') == '27'"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"5 3 5\n2 3 1 2\n2\"\"\") == \"3\"\nassert solution(r\"\"\"4 3 5\n2 3 1 2\n2\"\"\") == \"4\"\nassert solution(r\"\"\"4 3 5\n2 3 1 2\n3\"\"\") == \"-1\"\nassert solution(r\"\"\"5 3 5\n2 3 1 2\n1 1 1\n2\n1 1 1\n2\"\"\") == \"-1\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\") == \"4\"\nassert solution(\"3 4 5\\n1 1 1 1\\n1\\n1 1 1\\n2\") == \"-1\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '3'\nassert solution('''\n2 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '-1'"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\") == \"4\"\nassert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\") == \"3\"\n\nassert solution(\"2\\n1 2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\\n\") == \"3\"\nassert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n\") == \"-1\"\nprint(solution(input()))\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3 5\") == \"3\"\nassert solution(\"4 3 5\") == \"-1\"\nassert solution(\"3 4 5\") == \"4\"\nassert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 2\") == \"2\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 5') == '3'\nassert solution('2 3 1 2') == '-1'\nassert solution('1 3 3') == '4'\nassert solution('2') == '-1'"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\\n1 1 1\\n2\") == \"4\"\nassert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\\n1 1 1\\n2\") == \"3\"\nassert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\\n1 1 1\\n2\") == \"-1\"\nassert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\\n1 1 1\\n2\") == \"4\"\nassert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\\n1 1 1\\n2\") == \"3\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 5\\n2 3 1 2\\n2\\n1 3 3\") == \"3\"\nassert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\") == \"4\"\nprint(\"You're a so smart!\")\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 5\") == \"3\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"-1\"\nassert solution(\"1 4\") == \"2\"\nassert solution(\"1 5\") == \"2\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1000 3000 1000') == '533.3333333333'\nassert solution('10 10 10') == '-1'\n\"\"\""
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('50 50 50') == '75.6'\nassert solution('50 1000 50') == '50'\nassert solution('1000 1000 1000') == '1000'\nassert solution('1000 1000 1000') == '1000'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1000 3000 1000\n\"\"\") == \"533.3333333333\"\nassert solution(\"\"\"\n100 200 800 100\n\"\"\") == \"943.5238095238\"\nassert solution(\"\"\"\n1000 100 1000\n\"\"\") == \"1000000\"\nassert solution(\"\"\"\n100 100 100\n\"\"\") == \"1000000\"\n\nstdin = \"\"\"\n1000 3000 1000\n\"\"\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == \"533.3333333333\"\nassert solution(\"1000 3000 1000\") == \"533.3333333333\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1000 3000 1000\n\"\"\") == \"533.3333333333\"\nassert solution(\"\"\"\n9999 999 999 999\n\"\"\") == \"533.3333333333\"\nassert solution(\"\"\"\n101 0 0 101\n\"\"\") == \"102.5\"\nassert solution(\"\"\"\n1000 3000 1000\n\"\"\") == \"533.3333333333\"\nassert solution(\"\"\"\n9999 999 999 999\n\"\"\") == \"534.3333333333\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1\\n') == '1.0'\nassert solution('3 3 1\\n') == '1.5'\nassert solution('2 1 1\\n') == '1.0'\nassert solution('3 2 1\\n') == '1.5'\nassert solution('4 2 2\\n') == '1.5'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1000 3000 1000') == '533.3333333333'\nassert solution('2\\n900 2000 1000') == '1176.3333333334'\nassert solution('3\\n900 2000 1000') == '1196.3333333335'\nassert solution('4\\n900 2000 1000') == '1196.3333333335'\nassert solution('5\\n900 2000 1000') == '1196.3333333335'"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 1000 1000\n\"\"\") == \"533.3333333333\"\nassert solution(\"\"\"\n5 100 1000\n\"\"\") == \"5\"\nassert solution(\"\"\"\n100 1000 100\n\"\"\") == \"100\"\nassert solution(\"\"\"\n10000 1000 1000\n\"\"\") == \"10000\"\nassert solution(\"\"\"\n5 100 1000\n\"\"\") == \"533.3333333333\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1000 3000 1000\n''') == '533.3333333333'\nassert solution('''\n1000 2000 1000\n''') == '534.5'\nassert solution('''\n1000 100000 1000\n''') == '49169.491693'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1000 3000 1000''') == '533.3333333333'\nassert solution('''1000 1000 1000''') == '501.6666666667'\nassert solution('''1000000 1000000 1000000''') == '1000000.00'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 3\\n2 5\\n2 1\\n4 2') == \"1.67\"\nassert solution('10 10\\n1 1\\n2 2\\n2 5\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9') == \"11.67\"\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n10 10\\n') == '14.14'\nassert solution('2\\n0\\n10 0\\n') == '13.36'"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 10\\n10 10\\n') == '14.14'\nassert solution('2 0\\n10 0\\n10 10\\n') == '16.67'"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 0\n2 0\n2 0\n''') == '1.11'\nassert solution('''\n1 0\n1 0\n''') == '1.11'\nassert solution('''\n4 0\n2 0\n2 0\n''') == '1.11'\nassert solution('''\n1 2\n3 4\n2 4\n''') == '6.35'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 0\n3 10\n10 10\n10 10\n''') == '15.00'\nassert solution('''\n3 0\n10 0\n0 10\n0 10\n''') == '2.14'\nassert solution('''\n1 0\n1 1\n''') == '1.24'\nassert solution('''\n10 0\n10 10\n10 10\n''') == '7.04'\nassert solution('''\n3 0\n2 0\n1 1\n''') == '2.00'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 0\n10 0\n10 10\n\"\"\") == \"14.14\"\nassert solution(\"\"\"\n2 0\n0 0\n10 10\n\"\"\") == \"8.81\"\nassert solution(\"\"\"\n5 0\n0 0\n0 0\n0 0\n0 0\n\"\"\") == \"5.00\"\nassert solution(\"\"\"\n8 1\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n\"\"\") == \"8.81\"\nassert solution(\"\"\"\n5 0\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n\"\"\") == \"7.00\"\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 0\n10 0\n10 10\n\"\"\") == \"14.14\"\n\"\"\"\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 1\n10 1\n10 10\n10 1\n10 10\n10 1''') == '18.04'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n1 1\n1 1\n\n2 1\n1 2\n\n3 2\n1 3\n\"\"\") == \"14.14\"\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"14.14\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '123457 0\\n0 2\\n'\n\nassert solution('''\n3 2\n123456 1\n123458 2\n123457 3\n''') == '123457 0\\n0 1\\n123458 1\\n'\n\nassert solution('''\n2 1\n123456 2\n123458 4\n''') == '123458 0\\n'\n\nassert solution('''\n1 2\n123456 2\n123458 4\n''') == '123456 0\\n0 2\\n'\n\nassert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '123457 0\\n0 2\\n123458 1\\n'"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == '2 1 0'\nassert solution('1 2 3 4') == '2 1 0'\nassert solution('1 2 3 4') == '2 1 0'\nassert solution('1 2 3 4') == '2 1 0'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456') == '123457 0\\n0 2\\n'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '123457 0\\n0 2\\n123458 1\\n'\nassert solution('''\n2 1\n6\n''') == '6 0\\n'\nassert solution('''\n5 5\n1234567890000000 3331\n1000000000000 3332\n1111110000000000 3333\n2222220000000 3334\n33333333000000 3335\n''') == '33333333000000 3335 1\\n'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4') == '2 1'\nassert solution('3 3') == '0 2'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"0 2\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '123457 0\\n0 2\\n123458 1\\n'''\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n\"\"\") == \"\"\"\n123457 0\n0 2\n\"\"\".strip()\n\nassert solution(\"\"\"\n5 1\n10000000 1000000 10000000\n10000000 1000001 1000001\n1000001 1000002 1000001\n1000001 1000001 1000001\n1000001 1000001 1000001\n10000002 1000001 1000001\n\"\"\") == \"\"\"\n10000002 0\n10000001 1\n\"\"\".strip()\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '0 1 2'\n''')"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '0 2\\n1 2\\n2 2\\n'\nassert solution('4 5') == '4 0\\n0 0\\n1 0\\n2 0\\n3 0\\n'\nassert solution('7 9') == '7 0\\n0 1\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n'\nassert solution('4 4') == '0 2\\n0 2\\n0 2\\n'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n3 5 10 2 5\n2 4 5 1 3\n\"\"\") == \"90\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '90'\nassert solution('1\\n2 3 4\\n3 5 6 7') == '60'\nassert solution('2 3\\n4 1 2\\n1 3 4') == '36'\nassert solution('3\\n10 20 30\\n5 6 7 8\\n9 10\\n2 3\\n4 5\\n8 6\\n1 2\\n7 3') == '160'\nassert solution('20\\n35 20\\n14 35\\n1 18\\n30 30\\n19 16\\n12 12\\n1 9\\n5 4\\n22 20\\n16 9\\n18 2') == '664'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n3 5 10 2 5\n2 4 5 1 3\n\"\"\") == \"90\"\nassert solution(\"\"\"\n5\n3 7 10 2 5\n2 4 5 1 3\n\"\"\") == \"143\"\n\"\"\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n3 5 10 2 5\n2 4 5 1 3\n''') == '90'\nassert solution('''\n1\n1\n1\n''') == '1'\nassert solution('''\n6\n3 5 10 2 5 6\n2 4 5 1 3\n''') == '120'\nassert solution('''\n13\n2 1 3 5 9 8 12 7 6 4\n9 8 7 1 6 5 4 3 2\n''') == '222'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n') == '5'\nassert solution('1\\n5\\n2\\n3\\n4\\n') == '10'\nassert solution('1\\n3\\n2\\n5\\n4\\n') == '15'\n\"\"\"\n\nn = int(input())\ncoaches = list(map(int, input().split()))\norder = list(map(int, input().split()))\n\nprint(sum(order) * sum(coaches))\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\\\n2\n5 5\n2 1\n3 4\"\"\") == \"90\"\n\nassert solution(\"\"\"\\\n5\n1 5\n2 2\n3 4\n4 5\"\"\") == \"75\"\n\nassert solution(\"\"\"\\\n5\n10 10\n5 10\n10 5\n5 5\n10 5\"\"\") == \"115\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3\\n1 3 2\\n') == '3'\nassert solution('5\\n2 3 6 8 1\\n1 2 5 3\\n') == '9'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"90\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"30\"\nassert solution(\"5\\n3 10 2 5\\n2 4 5 1 3\") == \"90\"\nassert solution(\"5\\n3 5 10 2 5\\n2 4 5 1 3\") == \"45\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n3 5 10 2 5\n2 4 5 1 3\n''') == '90'"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n3 5 10 2 5\\n2 4 5 1 3\\n') == '90'\nassert solution('8\\n4 1 3 6 2 5 7\\n4 3 1 2 6 5 7\\n3 1 4 2 7 6 5\\n3 2 4 1 7 6 5\\n') == '90'\nassert solution('9\\n8 7 6 5 4 3 2 1\\n8 7 6 5 4 3 2 1\\n8 7 6 5 4 3 2 1\\n8 7 6 5 4 3 2 1\\n') == '90'\n\n\"\"\""
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 10') == '6.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 2 6\n0 4 3\n0 8 2\n4 5 7\n''') == '7.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 10\n1 2 6\n0 4 3\n0 8 2\n''') == '6.000000'\nassert solution('''\n4 5\n1 2 5\n1 3 4\n2 3 5\n2 4 5\n''') == '6.000000'\nassert solution('''\n3 8\n1 2 5\n1 3 4\n2 3 5\n2 4 5\n''') == '6.000000'\nassert solution('''\n7 8\n1 2 5\n1 3 4\n1 5 2\n1 6 3\n1 6 5\n1 7 4\n1 7 6\n2 3 5\n2 4 5\n2 5 3\n2 6 3\n2 6 5\n2 7 4\n2 7 6\n''') == '9.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 10\") == \"6.000000\""
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 10\\n1 2 6\\n0 4 3\\n0 8 2') == '6.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '6.000000'\n\nstdin = \"\"\"\n10 5\n1 0 2\n0 2 3\n0 5 1\n1 3 2\n1 5 3\n1 7 3\n1 9 3\n1 11 3\n2 6 3\n2 8 3\n2 12 3\n2 14 3\n3 5 3\n3 8 3\n3 11 3\n3 13 3\n4 2 3\n4 4 3\n4 6 3\n4 8 3\n4 10 3\n5 2 3\n5 2 4\n5 6 4\n5 8 4\n5 10 4\n5 12 4\n5 14 4\n6 1 4\n6 2 4\n6 3 4\n6 5 4\n6 6 4\n6 7 4\n6 8 4\n6 10 4\n7 2 4\n7 3 4\n7 4 4\n7 5 4\n7 6 4\n7 7 4\n7 8 4\n7 10 4\n8 2 4\n8 3 4\n8 4 4\n8 6 4\n8 8 4\n8 10 4\n9 2 4\n9 3 4\n9 4 4\n9 6 4\n9 8 4\n9 10 4\n10 2 4\n10 3 4\n10 4 4\n10 6 4\n10 8 4\n10 10 4\n11 2 4\n11 3 4\n11 4 4\n11 6 4\n11 8 4\n11 10 4\n12 2 4\n12 3 4\n12 4 4\n12 6 4\n12 8 4\n12 10 4\n13 2 4\n13 3 4\n13 4 4\n13 6 4\n13 8 4\n13 10 4\n14 2 4\n14 3 4\n14 4 4\n14 6 4\n14 8 4\n14 10 4\n15 2 4\n15 3 4\n15 4 4\n15 6 4\n15 8 4\n15 10 4\n\"\"\"\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestThis(unittest.TestCase):\n    def test_something(self):\n        pass\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 10\\n3 2 6\\n0 4 3\\n0 8 2\\n') == '6.000000'"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3 10\n1 2 6\n0 4 3\n0 8 2\n\"\"\") == \"6.000000\"\n\nprint(\"Aufgabe 1:\")\nprint(\"Mittelwert:\", solution(input()))\n\n\"\"\"\n    Hint: This problem can be solved efficiently. You can use a simple recursion to iterate over the buildings and see if there is a transmitter.\n\"\"\"\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2\n0 4\n0 8 2\n''') == '6.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 10') == '6.000000'"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('\\n'.join([\n    '2',\n    '0 0',\n    '0 0',\n    '1.',\n    '..',\n    '0',\n    'Sample Output'\n])) == '1.\\n.\\n'\nassert solution('\\n'.join([\n    '1',\n    '0 0',\n    '0 0',\n    '2.',\n    '.1',\n    '0',\n    'Sample Output'\n])) == '2.\\n.\\n'\n\"\"\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n1.\n2\n1.\n3\n1.\n3\n0.1\n3\n1.1.1.1\n\"\"\") == \"1.1.1.1\"\nassert solution(\"\"\"\n1\n0.\n3\n0.\n3\n1.1.1.1\n\"\"\") == \"1.1.1.1\"\nassert solution(\"\"\"\n3\n1.\n1.\n0.\n\"\"\") == \"1.1.1.1\"\nassert solution(\"\"\"\n3\n0.\n0.\n0.\n\"\"\") == \"1.1.1.1\"\nassert solution(\"\"\"\n3\n0.\n0.\n0.\n0.\n0.\n\"\"\") == \"1.1.1.1\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2 0 0 2\\n0 2 0 1.\\n0 0\\n0 0') == '1.\\n.\\n0.\\n1.\\n.\\n.\\n.\\n.'\nassert solution('4 0 0 0\\n0 2 0 0\\n1 0 0 0\\n0 0\\n0 0') == '0.\\n.\\n0.\\n0.\\n0.\\n0.\\n0.\\n0.'\nassert solution('5 0 0 0 2\\n0 2 0 1.\\n0 0\\n0 0\\n0 0') == '1.\\n.\\n0.\\n1.\\n.\\n0.\\n0.\\n.'\nassert solution('4 0 0 0\\n0 2 0 0\\n1 0 0 0\\n0 0\\n0 0') == '0.\\n.\\n0.\\n0.\\n0.\\n0.\\n0.\\n0.'\nassert solution('5 2 0 0 2\\n0 2 0 1.\\n0 0\\n0 0\\n0 0') == '1.\\n.\\n0.\\n1.\\n.\\n0.\\n0.\\n.'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n0 0\n0 0\n1.\n..\n0\n''') == '1.\\n..\\n'\n\nassert solution('''\n2\n0 0\n0 0\n0 2\n1.\n..\n0\n''') == '1.\\n..\\n'\n\nassert solution('''\n2\n0 0\n0 0\n0 0\n1.\n..\n0\n''') == '1.\\n..\\n'\n\nassert solution('''\n2\n0 0\n0 0\n0 0\n1.\n..\n0\n''') == '1.\\n..\\n'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n0 0\n0 0\n1.\n..\n0\nSample Output:\n1.\n..\n''') == '1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.2.1.2.2.2.1.2.2.1.2.1.2.2.2.1.2.2.1.2.2.1.2.2.1.2.2.1.2.1.2.1.1.1.1.2.1.1.1.1.1.2.1.1.2.2.1.2.2.1.2.1.1.1.1.1.1.1.1.1.1.1.1.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.2.1.1.1.1.1.1.1.1.1.2.2.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\n3\n1.\n1.\n2.\n\"\"\") == \"2.\n\"\"\"\n)"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(r\"\"\"\n2\n0 0\n0 0\n1\n..\n0\n\"\"\") == r\"\"\"\n1.\n..\n\"\"\",'solution'"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1.\\n..\\n\"\nassert solution(\"10\") == \".\\n.\\n..\\n..\\n.\\n..\\n..\\n\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n0 0\n0 0\n1.\n..\n0\n''') == '1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('\\n'.join(map(str, [[0, 0], [0, 0], [1., 1., 1.], [0, 0], [0, 0]]))) == '\\n'.join(map(str, [[0, 0], [0, 0], ['.', '.', '.'], [0, 0], [0, 0]]))\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('3') == '2'\nassert solution('3') == '2'\nassert solution('3') == '3'\nassert solution('3') == '1'\n\n------Solution------\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\nassert solution('''\n    3\n    ab\n    abc\n    ''') == '3'\nassert solution('''\n    3\n    ab\n    abc\n    ''') == '2'\nassert solution('''\n    2\n    2\n    2\n    ''') == '1'\n''')\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '1 1'\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '1'\nassert solution('15') == '4'\nassert solution('12') == '2'\nassert solution('12') == '2'\n\"\"\"\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1\\n1\\n2'\nassert solution() == '0\\n0\\n1'\nassert solution() == '0\\n1\\n2'\n\"\"\"\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '3'\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n    6\n    ab\n    abc\n    abcd\n    abcde\n    xyz\n    12345\n    \"\"\") == \"3\"\nassert solution(\"\"\"\n    10\n    dd\n    d\n    a\n    asd\n    a\n    as\n    asda\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd\n    a\n    asd"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1\\n1\\n1\\n1\\n1'\n\"\"\"\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\na\nbc\nabc\n''') == '1'\n\nassert solution('''\n3\na\nbc\nabc\n''') == '1'\n\nassert solution('''\n3\na\nbc\nabc\n''') == '0'\n\nassert solution('''\n3\na\nbc\nabc\n''') == '2'\n\nassert solution('''\n3\na\nbc\nabc\n''') == '3'"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1 1') == 'YES'\n\nimport sys\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 2 1 2') == 'NO'\nassert solution('1 3 1 3') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"2 4 2 2\") == \"YES\"\nassert solution(\"1 1 1 2\") == \"NO\"\nassert solution(\"2 4 2 1\") == \"YES\""
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 3 1 3') == 'YES'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 1 2 1') == 'NO'\nassert solution('1 1 2 2') == 'YES'\nassert solution('1 1 1 1 1') == 'YES'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 2 2 2') == 'NO'\n\n---Input---\n5 3 5 1\n\n---Output---\nNO\n'''\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"YES\"\nassert solution('1 1 1 1') == \"YES\"\nassert solution('1 2 3 4') == \"NO\"\nassert solution('1 2 3 4 5') == \"NO\"\nassert solution('1 2 3 4 5 6') == \"NO\"\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('0 0 0 0') == 'NO'\nassert solution('1 2 3 4') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1 1') == \"YES\"\nassert solution('5 5 3 3') == \"NO\""
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('4 5 6 7') == 'NO'\nassert solution('1') == 'NO'"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 96') == '80.5696000000'\nassert solution('3 1.5 0.5 2') == '74.75'"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 96') == '80.5696000000'\nassert solution('10 2.5 0.4 1.1') == '13.0'\n\"\"\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 96\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000''') == '80.5696000000'\nprint('All tests passed!')\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 96\") == \"80.5645\"\nassert solution(\"5 10\") == \"60.4\""
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\nSample Output:\n80.5696000000\n''') == '80.5696000000'\nassert solution('''\n5\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\nSample Output:\n80.5696000000\n''') == '80.5696000000'\n'''\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000') == '80.5696000000'\nprint('The maximum average grade you can obtain is', solution(input()))\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 96') == '80.5696000000'\nassert solution('1 1 2') == '4.25'\n\n-------Hints--------\nIn python, mathematical expressions are evaluated using the order of operations.\nA single line can be used to split the string in tokens, which are split according to spaces.\n\nA string can be split at whitespaces, with'split' function.\n\nA function can be defined in a single line, with a colon symbol (:).\n\nA string can be split at the last whitespace character, with 'rsplit' function.\n\nUse math module for mathematical operations.\n'''\n\nfrom math import sqrt\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 96') == '80.5696000000', \"Wrong answer\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 96 -0.0080 1.5417 25.0000 -0.0080 1.5417 25.0000') == '80.5696000000'\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 96') == '80.5696000000'\nassert solution('2 96') == '101.73900000000'\nassert solution('3 96') == '98.7800000000'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 0 0 1 1 1 0 0 1') == '2'\nassert solution('7 0 0 1 1 1 0 0 1') == '3'\nassert solution('3 0 0 1 1 1 0 0 1') == '4'\nassert solution('4 0 0 1 1 1 0 0 1') == '4'\nassert solution('3 0 0 1 1 1 0 0 1 0 0') == '4'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 0 0 1 1 1 0 0 1') == '2'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 1 3 0 1 4 1 4') == '2'\nassert solution('3 1 1 3 0 1 4 1 4') == '3'\nassert solution('100 2 0 0 1 1 2 1 2') == '1'\nassert solution('1 1 1 1 2 3 4') == '4'\nassert solution('1 2 3 4 1 5 6 7') == '3'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 0 0 1 1 1 0 0 1\\n') == '2'"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 0 0 1 1 1 0 0 1\n''') == '2'\nassert solution('''\n3 0 0 1 1 1 0 0 1\n''') == '1'\nassert solution('''\n2 0 0 1 1 1 0 0 1\n2 1 1 2 2 1 2 1 2\n''') == '3'\nassert solution('''\n1 0 0 1 1 1 0 0 1\n''') == '1'\nassert solution('''\n3 0 0 1 1 1 0 0 1\n3 1 1 2 2 1 2 1 3\n''') == '2'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1') == '2'\nassert solution('1 1 1 1 1') == '1'"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1') == '2'\nassert solution('5 0 0 1 1 1 0 0 1') == '2'\nassert solution('10 0 0 1 1 1 0 0 1') == '4'\nassert solution('99 0 0 1 1 1 0 0 1') == '3'\nassert solution('1000 0 0 1 1 1 0 0 1') == '5'"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n0 0 0\n0 0 0\n0 0 0''') == '2'\nassert solution('''4\n0 0 0\n0 0 0\n0 0 0\n0 0 0''') == '1'\nassert solution('''3\n0 0 0\n0 0 0\n0 0 0''') == '3'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 0 0 1 1 1 0 0 1\n0 0 0 1 1 1 0 0 0\n0 1 1 1 1 0 0 0 0\n0 0 0 1 1 1 1 1 1\n0 1 1 1 1 1 1 1 1\n0 0 0 1 1 1 1 1 1''') == '2'\nassert solution('''5 -1 -1 1 1 1 1 0 0 1\n-1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n-1 -1 -1 1 1 1 1 1 1\n0 0 0 1 1 1 1 0 0\n0 1 1 1 1 1 0 0 0\n0 0 0 1 1 1 1 1 1\n0 1 1 1 1 1 1 1 1\n0 0 0 1 1 1 1 1 1\n-1 -1 -1 1 1 1 1 1 1\n0 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1''') == '3'\nassert solution('''6 -1 -1 0 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 -1 -1 0 1 1 1 1 1 1\n0 0 0 1 1 1 1 1 1 1\n0 1 1 1 1 1 1 1 1 1\n0 0 0 1 1 1 1 1 1 1\n0 1 1 1 1 1 1 1 1 1\n0 0 0 1 1 1 1 1 1 1\n-1 -1 -1 0 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1''') == '4'\n'''"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2 3\") == \"impossible\"\nassert solution(\"3 1 2\") == \"impossible\"\nassert solution(\"3 1 3\") == \"impossible\"\nassert solution(\"3 3 3\") == \"impossible\"\nassert solution(\"5 1 5\") == \"impossible\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2 3\") == \"1400\"\nassert solution(\"10 10 10\") == \"impossible\"\nassert solution(\"1 1 1\") == \"impossible\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n''') == '1400'"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150') == '1400'\nassert solution('3 2 3\\n0 0 300\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150') == 'impossible'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n\"\"\") == \"1400\"\nassert solution(\"\"\"\n4 4 4\n0 0 400\n1000 0 400\n2000 0 400\n3000 0 400\n1300 0 400\n1320 0 400\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n''') == '1400'\n\nassert solution('''\n3 2 2\n0 0 0\n1 0 0\n2 0 0\n''') == 'impossible'\n\n'''\n(1)\nIn the example above, we want to build a courier system in the islands. In the first island we have a tree at (0,0). We can make a tunnel between this tree and the (1,0) tree at (1,0) in one move.\n\nIn the second island we have a tree at (0,0). We can make a tunnel between this tree and the (2,0) tree at (2,0) in one move.\n\nIn the third island we have a tree at (0,0). We can make a tunnel between this tree and the (0,1) tree at (0,1) in one move.\n\nThe total length of the three tunnels is 1400.\n\n(2)\nWe want to move an object from an island to an island. In the first island we have a tree at (0,0). In the second island we have a tree at (0,0). We want to make a tunnel between these trees.\n\nWe have to move a tree from the first island to the second island in one move. We can make a tunnel between the trees at (0,0) and (0,1) in one move.\n\nThe total length of the two tunnels is 1400.\n\n(3)\nWe want to build a courier system in the islands. In the first island we have a tree at (0,0). We want to make a tunnel between this tree and the (1,0) tree at (1,0) in one move.\n\nIn the second island we have a tree at (0,0). We want to make a tunnel between this tree and the (2,0) tree at (2,0) in one move.\n\nIn the third island we have a tree at (0,0). We want to make a tunnel between this tree and the (0,1) tree at (0,1) in one move.\n\nIn total, the total length of the three tunnels is 1400.\n\n(4)\nWe want to build a courier system in the islands. In the first island we have a tree at (0,0). We want to make a tunnel between this tree and the (1,0) tree at (1,0) in one move.\n\nIn the second island we have a tree at (0,0). We want to make a tunnel between this tree and the (2,0) tree at (2,0) in one move.\n\nIn the third island we have a tree at (0,0). We want to make a tunnel between this tree and the (0,1) tree at (0,1) in one move.\n\nWe have to move a tree from the first island to the second island in one move. We can make a tunnel between the trees at (0,0) and (0,1) in one move.\n\nIn total, the total length of the three tunnels is 1400.\n\n(5)\nWe want to build a courier system in the islands. In the first island we have a tree at (0,0). We want to make a tunnel between this tree and the (1,0) tree at (1,0) in one move.\n\nIn the second island we have a tree at (0,0). We want to make a tunnel between this tree and the (2,0) tree at (2,0) in one move.\n\nIn the third island we have a tree at (0,0). We want to make a tunnel between this tree and the (0,1) tree at (0,1) in one move.\n\nWe have to move a tree from the first island to the second island in one move. We can make a tunnel between the trees at (0,0) and (0,1) in one move.\n\nIn total, the total length of the three tunnels is 1400.\n\n(6)\nWe want to build a courier system in the islands. In the first island we have a tree at (0,0). We want to make a tunnel between this tree and the (1,0) tree at (1,0) in one move.\n\nIn the second island we have a tree at (0,0). We want to make a tunnel between this tree and the (2,0) tree at (2,0) in one move.\n\nIn the third island we have a tree at (0,0). We want to make a tunnel between this tree and the (0,1) tree at (0,1) in one move.\n\nWe have to move a tree from the first island to the third island in one move. We can make a tunnel between the trees at (0,0) and (0,1) in one move.\n\nIn total, the total length of the three tunnels is 1400.\n\n(7)\nWe want to build a courier system in the islands. In the first island we have a tree at (0,0). We want to make a tunnel between this tree and the (1,0) tree at (1,0) in one move.\n\nIn the second island we have a tree at (0,0). We want to make a tunnel between this tree and the (2,0) tree at (2,0) in one move.\n\nIn the third island we have a tree at (0,0). We want to make a tunnel between this tree and the (0,1) tree at (0,1) in one move.\n\nWe have to move a tree from the first island to the third island in one move. We can make a tunnel between the trees at (0,0) and (0,1) in one move.\n\nIn total, the total length of the three tunnels is 1400.\n\n(8)\nWe want to build a courier system in the islands. In the first island we have a tree at (0,0). We want to make a tunnel between this tree and the (1,0) tree at (1,0) in one move.\n\nIn the second island we have a tree at (0,0). We want to make a tunnel between this tree and the (2,0) tree at (2,0) in one move.\n\nIn the third island we have a tree at (0,0). We want to make a tunnel between this tree and the (0,1) tree at (0,1) in one move.\n\nWe have to move a"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150') == '1400'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1 2 2\n0 0 400\n1 0 400\n2 0 400\n\"\"\") == \"1400\"\nassert solution(\"\"\"\n2 3 2\n0 0 400\n100 0 400\n200 0 400\n300 0 150\n10 0 150\n10 0 150\n\"\"\") == \"10\"\nassert solution(\"\"\"\n2 3 3\n0 0 400\n0 0 400\n2 0 400\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3 3 3\n0 0 400\n100 0 400\n200 0 400\n300 0 150\n10 0 150\n10 0 150\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2 1\n0 0 400\n1000 0 400\n2000 0 400''') == '1400'\nassert solution('''5 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150''') == '1400'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == \"impossible\"\nassert solution('2 2 1') == \"impossible\"\nassert solution('3 4 4') == \"impossible\"\nassert solution('3 2 3') == \"impossible\"\nassert solution('2 3 3') == \"impossible\"\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 15') == '3907'\nassert solution('20 10') == '0'\nassert solution('100 10') == '0'\nassert solution('100 20') == '0'\nassert solution('100 30') == '0'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 15') == '3907'\nassert solution('10 10') == '0'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam''') == '3907'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3907'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 15') == '3907'\nassert solution('20 12') == '2907'\nassert solution('10 15') == '3907'"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam''') == '3907'\n\nSample Input:\n3\nabc\nsample\nSample Output:\n1\n'''\n    )\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\n\"\"\"\n) == \"3907\""
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 20\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\n''') == '3907'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 15\\n' +\n                'stockholm\\n' +\n                 'amsterdam\\n' +\n                 'london\\n' +\n                 'berlin\\n' +\n                 'copenhagen\\n' +\n                 'oslo\\n' +\n                 'helsinki\\n' +\n                 'dublin\\n' +\n                'reykjavik\\n' +\n                 'brussels\\n' +\n                 'oslo stockholm\\n' +\n                 'oslo london\\n' +\n                 'oslo copenhagen\\n' +\n                 'oslo berlin\\n' +\n                 'oslo amsterdam\\n' +\n                 'oslo dudlin\\n' +\n                 'oslo reykjavik\\n' +\n                 'oslo brussels\\n' +\n                 'oslo helsinki\\n' +\n                 'oslo copenhagen\\n' +\n                'stockholm helsinki\\n' +\n                'stockholm brussels\\n' +\n                'stockholm reykjavik\\n' +\n                'stockholm dudlin\\n' +\n                'stockholm amsterdam\\n' +\n                'stockholm copenhagen\\n' +\n                 'copenhagen berlin\\n' +\n                 'copenhagen amsterdam\\n' +\n                 'copenhagen dublin\\n' +\n                 'copenhagen reykjavik\\n' +\n                 'copenhagen london\\n' +\n                 'copenhagen brussels\\n' +\n                 'copenhagen amsterdam\\n' +\n                 'copenhagen dudlin\\n' +\n                 'copenhagen oslo\\n' +\n                 'london amsterdam\\n' +\n                 'london dublin\\n' +\n                 'london reykjavik\\n' +\n                 'london brussels\\n' +\n                 'london helsinki\\n' +\n                 'london amsterdam\\n' +\n                 'london dudlin\\n' +\n                 'london oslo\\n' +\n                 'berlin amsterdam\\n' +\n                 'berlin dublin\\n' +\n                 'berlin reykjavik\\n' +\n                 'berlin brussels\\n' +\n                 'berlin helsinki\\n' +\n                 'berlin amsterdam\\n' +\n                 'berlin dudlin\\n' +\n                 'berlin oslo\\n' +\n                 'amsterdam dublin\\n' +\n                 'amsterdam reykjavik\\n' +\n                 'amsterdam brussels\\n' +\n                 'amsterdam helsinki\\n' +\n                 'amsterdam amsterdam\\n' +\n                 'amsterdam dudlin\\n' +\n                 'amsterdam oslo\\n' +\n                 'dublin reykjavik\\n' +\n                 'dublin brussels\\n' +\n                 'dublin helsinki\\n' +\n                 'dublin amsterdam\\n' +\n                 'dublin dudlin\\n' +\n                 'dublin oslo\\n' +\n                'reykjavik dublin\\n' +\n                'reykjavik brussels\\n' +\n                'reykjavik helsinki\\n' +\n                'reykjavik amsterdam\\n' +\n                'reykjavik dudlin\\n' +\n                'reykjavik oslo\\n' +\n                 'london brussels\\n' +\n                 'london helsinki\\n' +\n                 'london amsterdam\\n' +\n                 'london dudlin\\n' +\n                 'london oslo\\n' +\n                 'oslo brussels\\n' +\n                 'oslo helsinki\\n' +\n                 'oslo amsterdam\\n' +\n                 'oslo dudlin\\n' +\n                 'oslo oslo\\n' +\n                'stockholm brussels\\n' +\n                'stockholm helsinki\\n' +\n                'stockholm amsterdam\\n' +\n                'stockholm dudlin\\n' +\n                'stockholm oslo\\n' +\n                 'oslo brussels\\n' +\n                 'oslo helsinki\\n' +\n                 'oslo amsterdam\\n' +\n                 'oslo dudlin\\n' +\n                 'oslo oslo\\n')\n    cities = stdin.strip().split('\\n')\n    train_lines = stdin.strip().split('\\n')\n    costs = {}\n    for line in train_lines:\n        city1, city2, cost = line.split()\n        cost = int(cost)\n        costs.setdefault(city1, {}"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 15\") == \"3907\"\nassert solution(\"10 12\") == \"0\"\n\"\"\"\n\n\nimport sys\nfrom queue import Queue\n\nsys.setrecursionlimit(100000)\n\ninput = lambda: sys.stdin.readline().rstrip()"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n') == '1'\nprint(solution(input()))\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"1\"\nassert solution(\"8 8\\n2 2\\n5 5\\n0 0\\n3 1\\n4 3\\n1 1\\n0 0\\n3 0\\n0 0\\n3 0\\n3 1\\n3 2\\n0 3\\n0 3\\n2 2\\n2 2\\n2 2\\n4 3\\n2 1\\n2 1\\n0 0\\n4 1\\n0 0\\n4 0\\n2 1\\n2 1\\n2 0\\n0 2\\n0 2\\n0 2\\n0 2\\n1 1\\n1 1\\n1 1\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n1 1\\n1 1\\n1 1\\n0 2\\n0 2\\n0 2\\n0 2\\n2 1\\n2 1\\n2 1\\n0 2\\n0 2\\n0 2\\n0 2\\n2 1\\n2 1\\n2 1\\n0 2\\n0 2\\n0 2\\n0 2\\n1 1\\n1 1\\n1 1\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n1 1\\n1 1\\n1 1\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n1 1\\n1 1\\n1 1\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0 2\\n0"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1') == '1'\nassert solution('6 5\\n3 1 3 4 2\\n0 5\\n4 5\\n0 5\\n3 1\\n1 2\\n2 3\\n1 2') == '1'\nassert solution('10 5\\n6 9\\n8 6\\n9 3\\n7 3\\n8 2\\n5 1\\n9 3\\n6 8\\n7 2\\n6 1\\n9 7\\n7 8\\n4 4\\n6 2\\n8 6\\n7 3\\n1 2\\n3 4\\n5 2\\n4 2') == '3'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_1) == '1'\nassert solution(input_2) == '0'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 4\\n\"\n    \"3 1 3 4 2\\n\"\n    \"0 5\\n\"\n    \"0 9\\n\"\n    \"4 5\\n\"\n    \"2 1\\n\"\n    ) == \"1\"\n\nassert solution(\n    \"5 4\\n\"\n    \"3 1 3 4 2\\n\"\n    \"0 5\\n\"\n    \"0 9\\n\"\n    \"4 5\\n\"\n    \"2 1\\n\"\n    ) == \"2\"\n\nassert solution(\n    \"5 4\\n\"\n    \"3 1 3 4 2\\n\"\n    \"0 5\\n\"\n    \"0 9\\n\"\n    \"4 5\\n\"\n    \"2 1\\n\"\n    ) == \"2\"\n\nassert solution(\n    \"5 4\\n\"\n    \"3 1 3 4 2\\n\"\n    \"0 5\\n\"\n    \"0 9\\n\"\n    \"4 5\\n\"\n    \"2 1\\n\"\n    ) == \"2\""
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 4') == '1'\nassert solution('5 5') == '1'\nassert solution('0 0') == '0'\nassert solution('4 3') == '1'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n''') == '1'\nassert solution('''\n4 4\n3 1 2 3\n0 1\n1 1\n1 1\n1 1\n''') == '1'\nassert solution('''\n5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n''') == '2'\nassert solution('''\n5 4\n3 1 2 3\n0 1\n1 1\n1 1\n1 1\n''') == '1'\nassert solution('''\n5 4\n3 1 2 3\n0 1\n1 1\n1 1\n1 1\n''') == '1'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4') == '1'\nassert solution('4 4') == '0'\nassert solution('2 1') == '1'\nassert solution('4 5') == '2'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"2\\n1\\n2\\n1\\n\"\nassert solution(\"5 5\\n1 2 3 4 5\\n1 2\\n2 2\\n2 2\\n3 3\\n3 2\") == \"3\\n3\\n3\\n2\\n2\\n\"\nassert solution(\"6 5\\n1 2 3 4 5 6\\n1 2\\n2 3\\n3 2\\n3 2\\n4 4\\n4 2\") == \"4\\n4\\n3\\n3\\n3\\n2\\n2\\n\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\\n\"\nassert solution(\"5 4\\n1 1 3 4 2\\n0 5\\n4 5\\n2 1\") == \"1\\n\"\n\nstdin = \"\"\"3\n4\n1 2\n2\n3\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 4\n0 0 1 0 0\n0 1 1 1 1\n1 1 1 1 0\n0 0 1 0 0\n1 0 1 1 1\n''') == '00010'\nassert solution('''\n5 4\n1 1 1 1 1\n0 1 1 1 1\n1 0 1 1 1\n1 0 1 1 1\n0 1 1 1 1\n''') == '00110'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == \"00010\"\nassert solution(\"4 1\") == \"01001\"\nassert solution(\"6 5\") == \"01100\"\nassert solution(\"10 5\") == \"10011\"\n\n\"\"\""
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 2 2 2') == '001101'\nassert solution('1 1 1 1 1') == '111111'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n01001\n11100\n10111\n''') == '00010'\n\nassert solution('''\n1\n01\n11\n101\n''') == '011'\n\nassert solution('''\n1\n11\n011\n''') == '011'\n\nassert solution('''\n2\n01\n11\n''') == '011'\n\nassert solution('''\n2\n11\n01\n''') == '011'"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5') == '10011'\nassert solution('4 5') == '10011'\n'''"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n01001\n11100\n10111\n''') == '00010'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '00010'\nassert solution('1') == '00010'\n\"\"\""
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2 5\") == \"00010\"\nassert solution(\"3 5\") == \"00010\"\nassert solution(\"10 10\") == \"00010010111001011\"\nassert solution(\"3 5\") == \"00010\"\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5') == '00010'\nassert solution('1 2') == '1110'\nassert solution('3 1') == '0000'\nassert solution('10 1') == '1110'\nassert solution('100 1') == '01110'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5\\n01001\\n11100\\n10111\\n') == '00010'\nassert solution('4 4\\n00100\\n11100\\n01100\\n') == '00100'\nassert solution('1 5\\n01100\\n11100\\n00100\\n') == '01100'\nassert solution('5 5\\n11100\\n11100\\n01100\\n01100\\n') == '11100'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2 2\\n6 10\") == \"possible\"\nassert solution(\"1\\n4 2\\n6 12\") == \"impossible\"\nassert solution(\"1\\n4 2\\n6 4\\n4 3\") == \"impossible\"\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"possible\"\n\n2\n5 2\n1 0\n2 0\nSample Output:\nimpossible\n\n3\n5 3\n0 1\n1 3\nSample Output:\nimpossible\n\n4\n8 2\n0 1\n0 2\n2 1\nSample Output:\nimpossible\n\n5\n6 1\n0 3\n0 4\n0 5\nSample Output:\npossible\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n6 2\\n0 4\\n6 12') == 'possible'\nassert solution('1\\n6 2\\n6 8\\n1 2') == 'impossible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n1 1\n3 2\n4 5\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n4\n1 1\n2 3\n4 5\n7 6\n\"\"\") == \"possible\"\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'possible'\nassert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n6\\n12') == 'possible'\nassert solution('1\\n6\\n12') == 'impossible'\nassert solution('4\\n1\\n0\\n6\\n2') == 'impossible'\nassert solution('1\\n1\\n0\\n6\\n2') == 'possible'\nassert solution('4\\n2\\n2\\n6\\n1') == 'impossible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2\\n0 4\\n6 12') == 'possible'\nassert solution('3 2\\n0 4\\n6 0') == 'impossible'\n\nassert solution('5\\n1 2\\n3 4\\n5 6\\n2 4\\n4 6\\n2 6') == 'possible'\nassert solution('5\\n1 2\\n3 4\\n5 6\\n2 4\\n4 6\\n2 6') == 'impossible'\n\nassert solution('3\\n10 10\\n100 100\\n200 200') == 'impossible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n6 2\\n0 4\\n6 12\\n') == 'possible'\nassert solution('1\\n6 2\\n6 12\\n') == 'impossible'\nassert solution('1\\n0 4\\n6 12\\n') == 'impossible'\nassert solution('1\\n0 4\\n6 12\\n') == 'possible'\nassert solution('3\\n6 4\\n7 8\\n9 10\\n') == 'impossible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'possible'\nassert solution('1\\n0 4\\n6 12') == 'impossible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n0 4\\n6 12\") == \"possible\"\nassert solution(\"1\\n6 2\\n0 4\\n6 12\") == \"impossible\"\nassert solution(\"1\\n6 2\\n0 4\\n6 12\") == \"impossible\"\nassert solution(\"1\\n6 2\\n0 4\\n6 12\\n4 5\\n6 12\") == \"impossible\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\") == \"2\"\nassert solution(\n    \"5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\") == \"1\"\nassert solution(\n    \"3\\n1 0 1\\n10 1 1\\n2 0 1\") == \"1\"\nassert solution(\n    \"8\\n0.1 0.1 0.1\\n0.1 0.1 0.1\\n0.1 0.1 0.1\\n0.1 0.1 0.1\\n0.1 0.1 0.1\\n0.1 0.1 0.1\\n0.1 0.1 0.1\\n0.1 0.1 0.1\") == \"1\"\nassert solution(\n    \"100\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0.1\\n1.1 0.1 0"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n5 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n''') == '2'\n'''"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n') == '2'\n\"\"\"\n\n\"\"\" \nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        def f(x, y, r):\n            if x == y: return r\n            elif x > y: x, y = y, x\n            \n            # two-circle case\n            if r <= (x-y):\n                return (2*x-y) // 2 + (x+y)\n            \n            # two-line case\n            if (x-y)*(x+y) <= r*r:\n                return max(f(x,y,r), f(x-y,y,r)) + 1\n            \n            # one-circle case\n            else:\n                return 2 * (x-y) + 1\n        \n        ans = 0\n        \n        for line in stdin.splitlines():\n            x, y, r = map(int, line.split())\n            ans = max(ans, f(x,y,r))\n            \n        return str(ans)\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        def f(x, y, r):\n            if x == y: return r\n            elif x > y: x, y = y, x\n            \n            # two-circle case\n            if r <= (x-y):\n                return (2*x-y) // 2 + (x+y)\n            \n            # two-line case\n            if (x-y)*(x+y) <= r*r:\n                return max(f(x,y,r), f(x-y,y,r)) + 1\n            \n            # one-circle case\n            else:\n                return 2 * (x-y) + 1\n        \n        ans = 0\n        \n        for line in stdin.splitlines():\n            x, y, r = map(int, line.split())\n            ans = max(ans, f(x,y,r))\n            \n        return str(ans)\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1''') == '2'\nassert solution('''5\n0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1''') == '1'\nassert solution('''5\n0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1''') == '3'\nassert solution('''5\n0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n0 -5 1''') == '1'\nassert solution('''5\n0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n0 -5 1''') == '2'\n'''"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n') == '2'\nassert solution('10\\n0 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n') == '3'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n4 5 5\n-4 -4 -2\n-2 2 -2\n-1 1 -1\n5 1 2\n\"\"\") == \"4\"\nassert solution(\"\"\"\n4\n1 1 2\n-1 -1 -2\n-1 1 -2\n1 -1 2\n-2 -1 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10\n10 -20 -20\n-10 -10 20\n-20 20 -10\n20 20 10\n-10 20 -10\n-20 -10 10\n20 -20 10\n-20 10 -10\n10 10 -20\n-10 20 -20\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '1'\nassert solution('5 0 1') == '1'\nassert solution('10 0 1') == '2'\nassert solution('0 5 1') == '1'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n') == '2'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '2'\nassert solution('5 0 1') == '2'\nassert solution('10 0 1') == '1'\nassert solution('0 5 1') == '1'\nassert solution('0 -5 1') == '2'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Yes\\n3 Just A Dream'\nassert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\nD 2\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Yes\\n3 Just A Dream'\nassert solution('1\\nE\\nS 2!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Yes\\n3 Just A Dream'\nassert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Plot Error'\nassert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Plot Error'"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\nE a\nE b\nE c\nS 1\nD 1\nS 2\nD 2\nS 3\nD 3\nS 4\nD 4\nS 5\nD 5\nS 6\nD 6\nS 7\nD 7\nS 8\nD 8\nS 9\nD 9\nS 10\nD 10\nS 11\nD 11\nS 12\nD 12\nS 13\nD 13\nS 14\nD 14\nS 15\nD 15\nS 16\nD 16\nS 17\nD 17\nS 18\nD 18\nS 19\nD 19\nS 20\nD 20\nS 21\nD 21\nS 22\nD 22\nS 23\nD 23\nS 24\nD 24\nS 25\nD 25\nS 26\nD 26\nS 27\nD 27\nS 28\nD 28\nS 29\nD 29\nS 30\nD 30\nS 31\nD 31\nS 32\nD 32\nS 33\nD 33\nS 34\nD 34\nS 35\nD 35\nS 36\nD 36\nS 37\nD 37\nS 38\nD 38\nS 39\nD 39\nS 40\nD 40\nS 41\nD 41\nS 42\nD 42\nS 43\nD 43\nS 44\nD 44\nS 45\nD 45\nS 46\nD 46\nS 47\nD 47\nS 48\nD 48\nS 49\nD 49\nS 50\nD 50\nS 51\nD 51\nS 52\nD 52\nS 53\nD 53\nS 54\nD 54\nS 55\nD 55\nS 56\nD 56\nS 57\nD 57\nS 58\nD 58\nS 59\nD 59\nS 60\nD 60\nS 61\nD 61\nS 62\nD 62\nS 63\nD 63\nS 64\nD 64\nS 65\nD 65\nS 66\nD 66\nS 67\nD 67\nS 68\nD 68\nS 69\nD 69\nS 70\nD 70\nS 71\nD 71\nS 72\nD 72\nS 73\nD 73\nS 74\nD 74\nS 75\nD 75\nS 76\nD 76\nS 77\nD 77\nS 78\nD 78\nS 79\nD 79\nS 80\nD 80\nS 81\nD 81\nS 82\nD 82\nS 83\nD 83\nS 84\nD 84\nS 85\nD 85\nS 86\nD 86\nS 87\nD 87\nS 88\nD 88\nS 89\nD 89\nS 90\nD 90\nS 91\nD 91\nS 92\nD 92\nS 93\nD 93\nS 94\nD 94\nS 95\nD 95\nS 96\nD 96\nS 97\nD 97\nS 98\nD 98\nS 99\nD 99\nS 100\nD 100\nS 101\nD 101\nS 102\nD 102\nS 103\nD 103\nS 104\nD 104\nS 105\nD 105\nS 106\nD 106\nS 107\nD 107\nS 108\nD 108\nS 109\nD 109\nS 110\nD 110\nS 111\nD 111\nS 112\nD 112\nS 113\nD 113\nS 114\nD 114\nS 115\nD 115\nS 116\nD 116\nS 117\nD 117\nS 118\nD 118\nS 119\nD 119\nS 120\nD 120\nS 121\nD 121\nS 122\nD 122\nS 123\nD 123\nS 124\nD 124\nS 125\nD 125\nS 126\nD 126\nS 127\nD 127\nS 128\nD 128\nS 129\nD 129\nS 130\nD 130\nS 131\nD 131\nS 132\nD 132\nS 133\nD 133\nS 134\nD 134\nS 135\nD 135\nS 136\nD 136\nS 137\nD 137\nS 138\nD 138\nS 139\nD 139\nS 140\nD 140\nS 141\nD 141\nS 142\nD 142\nS 143\nD 143\nS 144\nD 144\nS 145\nD 145\nS 146\nD 146\nS 147\nD 147\nS 148\nD 148\nS 149\nD 149\nS 150\nD 150\nS 151\nD 151\nS 152\nD 152\nS 153\nD 153\nS 154\nD 154\nS 155\nD 155\nS 156\nD 156\nS 157\nD 157\nS 158\nD 158\nS 159\nD 159\nS 160\nD 160\nS 161\nD 161\nS 162\nD 162\nS 163\nD 163\nS 164\nD 164\nS 165\nD 165\nS 166\nD 166\nS 167\nD 167\nS 168\nD 168\nS 169\nD 169\nS 170\nD 170\nS 171\nD 171\nS 172\nD 172\nS 173\nD 173\nS 174\nD 174\nS 175\nD 175\nS 176\nD 176\nS 177\nD 177\nS 178\nD 178"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Yes'\nassert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == '3 Just A Dream'\nassert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Plot Error'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 3!bobby_dies it_goes_on_and_on\nS 4!bobby_dies\nS 5!bobby_dies it_goes_on_and_on\nS 6!bobby_dies\nS 7!bobby_dies it_goes_on_and_on\nD 4\n''') == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on') == 'Yes'\nassert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nS 3!bobby_dies\\nS 4!bobby_dies\\nS 5!bobby_dies\\nS 6!bobby_dies\\nS 7!bobby_dies\\nS 8!bobby_dies\\nS 9!bobby_dies\\nS 10!bobby_dies\\nS 11!bobby_dies\\nS 12!bobby_dies\\nS 13!bobby_dies\\nS 14!bobby_dies') == 'Yes'\nassert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nS 3!bobby_dies\\nS 4!bobby_dies\\nS 5!bobby_dies\\nS 6!bobby_dies\\nS 7!bobby_dies\\nS 8!bobby_dies\\nS 9!bobby_dies\\nS 10!bobby_dies\\nS 11!bobby_dies\\nS 12!bobby_dies\\nS 13!bobby_dies\\nS 14!bobby_dies') == 'Yes'\nassert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nS 3!bobby_dies\\nS 4!bobby_dies\\nS 5!bobby_dies\\nS 6!bobby_dies\\nS 7!bobby_dies\\nS 8!bobby_dies\\nS 9!bobby_dies\\nS 10!bobby_dies\\nS 11!bobby_dies\\nS 12!bobby_dies\\nS 13!bobby_dies\\nS 14!bobby_dies') == 'No'\nassert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nS 3!bobby_dies\\nS 4!bobby_dies\\nS 5!bobby_dies\\nS 6!bobby_dies\\nS 7!bobby_dies\\nS 8!bobby_dies\\nS 9!bobby_dies\\nS 10!bobby_dies\\nS 11!bobby_dies\\nS 12!bobby_dies\\nS 13!bobby_dies\\nS 14!bobby_dies') == 'Plot Error'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\") == \"3 Just A Dream\\nYes\""
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sample_input) == \"Yes\"\nassert solution(input) == \"Plot Error\"\nassert solution([\"S 3 a\", \"E b\", \"S 2 a\", \"D 1\", \"S 1!bobby_dies business_as_usual\", \"E it_goes_on_and_on\"]) == \"Yes\"\nassert solution([\"S 1 a\", \"E!bobby_dies\", \"D 2\", \"E!bobby_dies\", \"D 3\"]) == \"Yes\"\nassert solution([\"D 3\", \"E!bobby_dies\", \"S 1 b\", \"E a\", \"S 1 b\", \"S 2 b\", \"D 2\", \"S 2 b\", \"S 3 b\"]) == \"Yes\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"Plot Error\"\nassert solution(\"1\") == \"3 Just A Dream\"\nassert solution(\"2\") == \"3 Just A Dream\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"Yes\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"1\") == \"3 Just A Dream\"\nassert solution(\"2\") == \"Plot Error\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"Plot Error\""
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('24 5 8 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\\n'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n24 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur Excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum\n''') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+'"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('24 5 8 7') == \"------------------+---+------------------+---+------------------+---+----------------+-----------------+---+-------------------+--------+------------------+\"\nassert solution('23 5 8 7') == \"----------------+---+----------------+---+------------------+---+------------------+---+----------------+------------+------------+-----------+\"\nassert solution('24 4 5 8 7') == \"-------------------+---+----------------+---+-------------------+---+------------------+---+-------------------+-------+\"\nassert solution('12 2 1 2') == \"  ++  + -  +   +  + -   +        +  +      +  +  +   +  +  +      +   +   +   +  +   +    +   +    +      +\"\n\nprint(len(solution.__doc__))\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sample_input) == expected_output\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 6 7 8\") == \"+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n+------------------------+-+\"\n\"\"\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''24 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur Excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum\n''') == '+----------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consectetur | |\\n|adipisicing elit sed do | |\\n|eiusmod tempor incididunt ut | |\\n|laborum et dolore magna aliqua Ut | |\\n|enim ad minim veniam quis nostrud | |\\n|exercitation ullamco    | |\\n+----------------+-+\\ndefun thumb (lines height first) (/ (* (- height 3) first) (- lines height))\\n\\n(defun thumb (lines height first) (/ (/ (* (- height 3) first) (- lines height)))'''\nassert solution('''5 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur Excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum\n''') == '+----------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consectetur | |\\n|adipisicing elit sed do | |\\n|eiusmod tempor incididunt ut | |\\n|laborum et dolore magna aliqua Ut | |\\n|enim ad minim veniam quis nostrud | |\\n|exercitation ullamco    | |\\n+----------------+-+\\ndefun thumb (lines height first) (/ (* (- height 3) first) (- lines height))\\n\\n(defun thumb (lines height first) (/ (/ (* (- height 3) first) (- lines height)))'''\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"24 5 8 7\") == \"+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consectetur |X|\\n|Duis aute irure dolor in | |\\n|reprehenderit in        |v|\\n+------------------------+-+\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"4 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur Excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum\"\"\") == \"\"\"+------------------------+-+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n|Duis aute irure dolor in| |\n|reprehenderit in        |v|\n+------------------------+-+\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"24 5 8 7\") == \"+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n20 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur Excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum\n\"\"\") == \"+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\\ndef solution(stdin: str) -> str:\n    pass\n\nassert solution(\"\"\"\n10 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur Excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum\n\"\"\") == \"+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\\ndef solution(stdin: str) -> str:\n    pass\n\nassert solution(\"\"\"\n0 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur Excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum\n\"\"\") == \"+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\\ndef solution(stdin: str) -> str:\n    pass\n\"\"\")\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 10') == 'possible'\nassert solution('3 0 2 1') == 'impossible'\n\"\"\""
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\n''') == 'possible'\nassert solution('''\n4 4\n1 1 2 3\n2 3 3 2\n1 1 1 1\n3 3 3 1\n''') == 'impossible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 10') == 'possible'\nassert solution('5 10\\n3 0 2 1\\n2 1 0 2\\n1 3 2 0\\n0 3 2 1') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\n''') == 'possible'\n\nassert solution('''5 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\n''') == 'impossible'\n\nassert solution('''7 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\n4 5 3 2\n2 3 2 1\n1 2 1 0\n''') == 'impossible'\n\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 0 4 2 1') == 'impossible'\nassert solution('5 1 2 4 3 0') == 'impossible'\nassert solution('5 0 2 1 3 4') == 'possible'\nassert solution('5 1 2 3 4 0') == 'possible'\nassert solution('7 1 2 3 4 0') == 'impossible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4\\n3 0 1 2\\n2 1 0 2\\n1 3 2 0') == 'impossible'\nassert solution('10 6\\n1 4 2 3 5 7 8 9 10 11 12 13 14\\n1 3 4 0 2 1 6 8 7 9 10\\n2 5 0 3 1 6 9 8 7 4\\n3 6 1 4 5 7 8 9 0 2') == 'possible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\nassert solution('6 6\\n0 1 2 3 4 5\\n1 3 4 0 2 5\\n2 4 5 0 3 1\\n4 5 0 3 2 1\\n5 4 2 1 0 3') == 'impossible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\nassert solution('3 2\\n0 1 2\\n3 2 1\\n1 1 0') == 'impossible'\nassert solution('3 4\\n1 2 3\\n3 2 0\\n2 1 0') == 'impossible'"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\") == \"impossible\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(3000)"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\nassert solution('3 5\\n2 0 3 4\\n1 2 3 4\\n0 1 3 2') == 'impossible'"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 1 1\n1\n2\n''') == \"1.00000000\"\n\nassert solution('''\n2 10 1\n3\n5\n''') == \"0.99999997\"\n\nassert solution('''\n2 50 1\n1\n5\n''') == \"0.99999997\"\n\nassert solution('''\n2 100 1\n1\n5\n''') == \"0.99999997\"\n\nassert solution('''\n2 100 1\n3\n5\n''') == \"0.99999997\""
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 1\\n1') == \"1.00000000\"\nassert solution('2 1 1\\n2') == \"1.00000000\"\nassert solution('2 1 1\\n2') == \"1.00000000\"\nassert solution('2 1 1\\n1') == \"0.00000000\"\nassert solution('2 1 1\\n2') == \"0.00000000\"\n\n\"\"\"\nimport math\nfrom decimal import Decimal\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 1') == '1.0'\nassert solution('2 1 1') == '0.0'\nassert solution('10 1 1') == '0.9'\nassert solution('10 1 1') == '0.1'\nassert solution('10 1 1') == '0.0'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2\") == \"1\"\nassert solution(\"1 1 1\") == \"2\"\nassert solution(\"2 1 1\") == \"1\"\nassert solution(\"2 1 2\") == \"2\"\nassert solution(\"4 5 2\") == \"0\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 1') == '1.00000000'\nassert solution('2 1 1.5') == '1.000002'\nassert solution('2 1 2') == '0.500001'\nassert solution('2 1 3') == '0.333333'\nassert solution('2 2 2') == '0.500001'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 1') == \"1\"\nassert solution('2 2 1') == \"2\"\nassert solution('3 3 1') == \"2\"\nassert solution('1 1 1') == \"1\"\nassert solution('1 2 2') == \"2\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 1') == '1'\nassert solution('1') == '0'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1\\n1\\n2\") == \"1\"\nassert solution(\"3 3 3\\n2 2 2\\n4 4 4\\n3 3 3\") == \"2\"\nassert solution(\"3 3 3\\n5 5 5\\n5 5 5\\n5 5 5\") == \"1\""
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 1 1\n1\n2\n''') == '1.00000000\nassert solution('''\n5 1 1\n1\n3\n''') == '1.00000000\nassert solution('''\n5 1 1\n1\n2\n''') == '1.00000000\nassert solution('''\n5 1 1\n1\n3\n''') == '1.00000000\nassert solution('''\n3 5 1 1\n1\n2\n''') == '1.00000000\n''')\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1\\n2\") == \"1.00000000\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n1 2\n1 1\n2 4\n\"\"\") == \"2\n\nassert solution(\"\"\"\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n\"\"\") == \"1\n\nassert solution(\"\"\"\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n\"\"\") == \"3\n\nassert solution(\"\"\"\n5\n5 4 3 3 2\n1 2\n1 1\n2 4\n\"\"\") == \"1\n\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n3\n5 4\n6 7 8 9 10\n12 13 14\n15 16 17\n18 19 20\n\"\"\") == \"3"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\\n1\\n3\\n\""
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '''\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n'''\n) == '2'\nassert solution(\n    '''\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n'''\n) == '1'\nassert solution(\n    '''\n3\n1 2\n3 2\n1 1\n'''\n) == '2'"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n4 3 3 2\n3\n1 2\n1 1\n2 4''') == '2'\nassert solution('''5\n4 3 3 2\n3\n1 2\n1 1\n2 4\n2''') == '3'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('3') == '1'\nassert solution('1') == '1'"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n1\\n1\") == \"1\"\nassert solution(\"1\\n3\\n1\\n1\") == \"3\"\nassert solution(\"1\\n3\\n1\\n2\") == \"2\"\nassert solution(\"5\\n4 3 3 2\\n3\\n1 2\") == \"2\"\nassert solution(\"5\\n4 3 3 2\\n1\\n1\\n2 4\\n2\\n2\\n2\\n2\\n2\\n2\\n2\") == \"1\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '2'\nassert solution('''\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '3'\nassert solution('''\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '2'\nassert solution('''\n2\n1\n1\n2\n''') == '1'\nassert solution('''\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '3'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n') == '1'\nassert solution('4\\n') == '3'\nassert solution('100\\n') == '9'\nassert solution('5\\n') == '4'\nassert solution('10\\n') == '1'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2\n0 1\n1 2\n0 2\n''') == '1'\nassert solution('''\n3 2\n0 1\n2 1\n0 2\n''') == '2'\nassert solution('''\n4 3\n0 1\n1 2\n1 2\n0 2\n''') == '2'\nassert solution('''\n5 4\n0 1\n1 2\n0 2\n2 3\n0 3\n''') == '0'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n0 1\\n1 2\\n0 2') == '1'"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n0 1\n1 2\n0 2\n''') == \"1\""
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 3') == '1'\nassert solution('3 2') == '2'\nassert solution('3 4') == '5'"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 2\n0 1\n1 2\n0 2\n1 3\n0 3\n2 3\n''') == '1'\n\nassert solution('''\n6 3\n0 1\n1 2\n1 3\n2 3\n0 3\n1 4\n''') == '1'\n\nassert solution('''\n6 2\n0 1\n0 2\n1 3\n1 4\n2 4\n''') == '0'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '3'\nassert solution('8 5') == '3'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n0 1\n1 2\n0 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n0 1\n1 2\n0 2\n\"\"\") == \"never meet\"\nassert solution(\"\"\"\n1\n0 0\n\"\"\") == \"never meet\"\nassert solution(\"\"\"\n3\n0 1\n0 2\n2 0\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n1 0\n2 1\n0 1\n\"\"\") == \"never meet\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2\n0 1\n1 2\n0 2\n''') == '1'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'never meet', f'Solution is wrong: \\n{solution(\"\")}'\nassert solution('2') == '1', f'Solution is wrong: \\n{solution(\"\")}'\nassert solution('3') == '1', f'Solution is wrong: \\n{solution(\"\")}'\nassert solution('4') == '1', f'Solution is wrong: \\n{solution(\"\")}'\nassert solution('5') == '1', f'Solution is wrong: \\n{solution(\"\")}'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 2') == '1'\nassert solution('5 1') == '0.1'\nassert solution('5 2') == '0.2'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 4 2\") == \"14500000001\"\nassert solution(\"2 2 2\") == \"0\"\nassert solution(\"2 2 3\") == \"1\"\nassert solution(\"2 2 0\") == \"2\"\nassert solution(\"0 2 3\") == \"2\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4 2') == '14500000001'\nassert solution('15 5 2') == '1400000001'\nassert solution('8 3 2') == '400000001'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 4 2\") == \"14500000001\"\n\"\"\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 4 2\n''') == '14500000001'\nassert solution('''\n2 2 1\n''') == '1'\nassert solution('''\n2 2 0\n''') == '0'\nassert solution('''\n2 2 4\n''') == '0'\n'''\nimport math\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4 2') == '14500000001'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '14500000001'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4 2\") == \"14500000001\"\nassert solution(\"10 11 10\") == \"10999999999\"\nassert solution(\"5 4 2\") == \"12500000001\"\nassert solution(\"10 11 10\") == \"999999\"\nassert solution(\"11 22 11\") == \"100000\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4 2') == '13760000'\nassert solution('9 4 2') == '7613'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4 2') == '14500000001'\nassert solution('5 4 3') == '14700000002'\n\"\"\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 3\") == \"14\"\nassert solution(\"4 4 1\") == \"1\"\nassert solution(\"5 7 4\") == \"1400000001\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 4\n2 4\n3 4''') == '0\nassert solution('''8\n1 4\n4 6\n1 3\n1 2\n3 4\n6 7\n2 6\n4 8\n2 5''') == '1\nassert solution('''50\n1 1\n2 2\n2 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n1 4\n3 7\n1 6\n2 6\n''') == '0\\n1\\n1\\n1\\n2'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n1 2\n2 2\n3 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n1 3\n2 2\n3 4\n3 4\n4 4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == \"0\\n1\"\nassert solution('1') == \"1\"\n\"\"\""
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3 5\\n2 5\\n2 5\\n') == '2'\n\nassert solution('2\\n2 5\\n1 4\\n') == '2'\n\nassert solution('2\\n4 4\\n3 4\\n') == '1'\n\nassert solution('2\\n1 2\\n3 3\\n') == '0'\n\nassert solution('3\\n4 5\\n2 6\\n1 6\\n') == '1'"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n10\n1 4\n3 7\n1 6\n2 6\n1 6\n3 7\n3 6\n3 7\n3 6\n3 6\n\"\"\") == \"\"\"0\n1\n1\n1\n1\n2\n1\n1\n1\n1\n2\n1\n\"\"\".strip()\nassert solution(\"\"\"\n5\n1 4\n2 5\n3 4\n4 5\n2 4\n\"\"\") == \"\"\"0\n1\n1\n1\n1\n2\n\"\"\".strip()\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 4\n3 7\n1 6\n2 6\n''') == '0\n1\n1\n1\n2\n''')\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 4\\n3 7\\n1 6\\n2 6\") == \"0\\n1\\n1\\n2\"\nassert solution(\"3\\n2 4\\n1 2\\n1 4\") == \"2\\n3\\n1\\n2\"\nassert solution(\"5\\n5 5\\n5 5\\n5 5\\n5 5\") == \"5\\n5\\n5\\n5\\n5\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4\n1 4\n3 7\n1 6\n2 6\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300') == '3100'\nassert solution('5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300') == '3100'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3100\""
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"3100\"\nassert solution(\"1 2 3\") == \"3100\"\nassert solution(\"1 2 5\") == \"4100\"\nassert solution(\"1 3 4\") == \"4100\"\nassert solution(\"2 3 1\") == \"3500\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"3100\"\nassert solution(\"5 3\") == \"3100\"\nassert solution(\"2 4\") == \"4100\"\nassert solution(\"4 5\") == \"7100\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100', 'Should be 3100'\nassert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '4000', 'Should be 4000'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3') == '2700'\nassert solution('4 4') == '3700'\nassert solution('5 5') == '3700'\nassert solution('10 10') == '3700'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 5\n1 2 1000\n2 3 1000\n4 5 500\n2''') == '3100'\nassert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2''') == '3100'\nassert solution('''3 5\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '2750'\nassert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '2750'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '3500'\nassert solution('8 3') == '14000'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '100'\nassert solution('4 5') == '300'\nassert solution('2') == '120'\n\n\"\"\""
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 2 1000\\n2 3 1000\") == \"3100\"\nassert solution(\"2 3\\n1 2 1000\\n2 3 1000\\n2 3 1000\") == \"3000\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '3.0'\nassert solution('4 3') == '3.0'\nassert solution('1 1') == '1.0'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '2.0'\nassert solution('2 1') == '0.0'\nassert solution('2 9') == '7.0'\nassert solution('6 6') == '8.0'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 2\n1 8\n6 5\n2 5\n2 9\n7 13''') == '5.250000000'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '5.25'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2') == '5.25'\nassert solution('5 2') == '5.25'\nassert solution('3 1') == '5.25'\nassert solution('6 10') == '10.0'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2') == '5.25'\nassert solution('1 8') == '5.5'\nassert solution('6 5') == '3.5'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"2.00000\"\n\"\"\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1\\n4 5') == '4.5'\n\nassert solution('2 1\\n5 3\\n4 5\\n3 3') == '3.333333333333333'\n\nassert solution('2 1\\n3 3\\n2 3\\n4 5\\n3 3') == '2.75'\n\nassert solution('6 8\\n1 2\\n4 5\\n3 6\\n3 3\\n7 7\\n3 1') == '4.666666666666666'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0.000000\"\nassert solution(\"1 8\") == \"1.75\"\nassert solution(\"6 5\") == \"2.000000\"\nassert solution(\"2 5\") == \"1.75\"\nassert solution(\"2 9\") == \"2.000000\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '1.5'\nassert solution('2 2') == '1.5'\nassert solution('4 1') == '2'\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == \"2\"\nassert solution('3') == \"1\"\n\"\"\"\n\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(tuple(map(int, stdin.strip().split('\\n')))) == stdout.strip()\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 2 3 1 2 1 1\") == \"7\"\nassert solution(\"1 2 3 1 2 1 1\") == \"2\"\nassert solution(\"1 2 3 1 2 1 1\") == \"0\"\nassert solution(\"1 2 3 1 2 1 1\") == \"4\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7') == '7'\nassert solution('5') == '2'"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(open('test_file.in')) == '7\\n2\\n2\\n0\\n4'\nprint('Congratulations! All test cases passed.')\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2') == '7\\n2\\n2\\n0\\n4'\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '7\\n2\\n2\\n0\\n4'"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '7\\n2\\n2\\n0\\n4\\n'"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"5\\n\"\n    \"1 2 3 1 2 1 1\\n\"\n    \"5\\n\"\n    \"1 3 1 2 3\\n\"\n    \"1 2 1 2\\n\"\n    \"2 2 2 3\\n\"\n    \"3 2 1 2\\n\"\n    \"4 2 1 2\\n\"\n) == \"7\\n\"\nassert solution(\n    \"7\\n\"\n    \"1 2 3 1 2 1 1\\n\"\n    \"5\\n\"\n    \"1 3 1 2 3\\n\"\n    \"1 2 1 2\\n\"\n    \"2 2 2 3\\n\"\n    \"3 2 1 2\\n\"\n    \"4 2 1 2\\n\"\n) == \"2\\n\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sample_input) == '4\\n2\\n2\\n0\\n4'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.0 0.2\n''') == '32.6405451448'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.0 0.2\n''') == '32.6405451448'"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '32.6405451448'"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2\\n') == '32.6405451448'\nprint(solution('4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2\\n')) == '32.6405451448'"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n''') == '32.6405451448'"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '32.6405451448'\nassert solution('4') == '56.39485542'\nassert solution('10') == '-1.127425533'"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n''') == '32.6405451448'\nassert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n''') == '41.009939019'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n40 30 30 40 20 40 50 30 30 50') == '32.6405451448'\nprint(solution(input()))\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n''') == '32.6405451448'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n40 30 30 40 20 40 50 30 30 50''') == '32.6405451448'\nassert solution('''5\n30 20 30 20 30 40 20 40 50 30''') == '32.6405451448'\nassert solution('''6\n30 30 30 30 30 30 30 30 30''') == '32.6405451448'\nassert solution('''7\n30 30 30 30 30 30 30 30 30''') == '32.6405451448'\nassert solution('''8\n30 30 30 30 30 30 30 30 30''') == '32.6405451448'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n2 1 4 3\nSample Input:\n3\n1 2 4\nSample Output:\n1 2 3\n''') == '1 2 3'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n2 1 4 3\n\"\"\") == \"3 2 1 4 1\"\nassert solution(\"\"\"\n4\n2 1 4 3\n\"\"\") == \"3 2 1 4 3\"\nassert solution(\"\"\"\n5\n5 1 4 3 2\n\"\"\") == \"4 3 2 1 5\"\nassert solution(\"\"\"\n3\n2 1 4 3\n\"\"\") == \"2 3 1 4\"\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2 3 4 1'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n2 1 4 3\n''') == '2 3 4 1'\nassert solution('''\n5\n2 1 4 3 2\n''') == '3 4 2 1'\nassert solution('''\n10\n5 7 3 4 6 2 8 9 1\n''') == '8 9 1 7 3 4 5 6 2'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n1 2 3') == '1 3 2'\nassert solution('3\\n2 4 1') == '3 1 4 2'\nassert solution('3\\n1 3 2') == '1 2 3 3'\nassert solution('5\\n2 4 1 4 5') == '2 1 5 1 4'\nassert solution('3\\n3 3 3') == '3 3 3'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 4 3') == '2 3 4 1'\nassert solution('10 1 10 3 10 10 3 10') == '1 10 10 3 10 10 3 10'\nassert solution('1 1 1 1') == '1 1 1 1'\nassert solution('10 10 10 10 10 10') == '10 10 10 10 10 10'"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n2 1 4 3\\n') == '2 3 4 1'\nassert solution('6\\n5 7 6 8 5 9 3\\n1 3 5 2 8 5 7\\n4 2 5 3 5 6 5 8\\n6 4 3 6 6 2 9 8\\n2 6 5 4 4 6 6 5 5 5\\n5 3 3 4 6 4 5 2 4 3 2\\n7 3 2 4 1 3 5 5 4\\n4 2 6 1 2 4 6 3 5 5\\n1 1 4 5 2 4 4 2 5 4\\n2 4 3 2 5 4 1 6 6\\n3 1 4 5 1 3 3 5 4\\n4 4 4 3 3 3 4 4 4\\n1 3 5 4 3 5 2 3 4 1\\n2 6 4 5 5 5 1 4 5 3\\n6 3 4 2 5 1 2 6 2 6\\n7 3 3 2 6 3 2 6 3\\n3 4 2 4 6 4 2 5 4 5\\n8 4 3 2 4 4 6 5 1 4\\n5 1 1 1 3 4 4 5\\n8 2 4 5 4 4 4 4 1\\n1 4 5 5 2 3 6 5 4\\n7 2 3 5 4 4 4 3 4 4\\n6 2 3 6 5 2 4 4 1\\n1 4 5 5 2 3 4 4 4\\n3 2 3 4 4 3 5 1 5\\n4 4 4 4 4 4 4 4 5\\n3 4 4 4 4 4 4 5 3\\n7 4 4 4 4 4 4 4 4\\n2 5 4 4 4 4 4 4 4\\n3 2 5 4 5 5 5 5 4 5\\n6 5 4 4 4 4 5 4 4\\n5 3 4 4 5 4 4 3 5\\n8 5 4 4 4 5 4 4 4\\n2 4 3 4 5 5 4 4 4\\n6 1 5 4 4 5 2 3\\n5 1 3 3 4 5 5 3\\n8 6 4 2 5 2 5 5 1\\n1 2 2 5 1 3 3\\n1 2 5 1 2 3 4\\n4 5 4 4 4 4 4 4\\n7 2 5 3 4 5 4 4\\n5 2 5 3 4 4 4 5\\n5 4 5 3 4 4 4 5\\n1 1 5 5 5 5 5\\n2 5 3 3 4 5 4\\n7 5 5 5 5 5 4\\n5 1 5 5 5 5\\n1 6 5 5 5 5\\n2 5 5 5 5 5\\n6 5 5 5 5 5\\n6 6 5 5 5 5\\n5 2 3 5 5 5\\n8 5 5 5 5 5\\n4 2 3 5 5 5\\n4 5 5 5 5 5\\n6 5 5 5 5 5\\n2 5 4 5 5 5\\n1 4 5 5 5 5\\n3 2 5 5 5 5\\n2 5 5 5 5 5\\n5 2 5 5 5 5\\n4 6 5 5 5 5\\n5 2 5 5 5 5\\n1 2 5 5 5 5\\n1 2 4 5 5 5\\n1 2 5 5 5 5\\n1 1 5 5 5 5\\n2 4 5 5 5 5\\n2 4 5 5 5 5\\n3 2 5 5 5 5\\n5 1 5 5 5 5\\n1 6 5 5 5 5\\n3 5 5 5 5 5\\n4 5 5 5 5 5\\n6 5 5 5 5 5\\n6 5 5 5 5 5\\n5 2 5 5 5 5\\n5 4 5 5 5 5\\n4 1 5 5 5 5\\n7 5 5 5 5 5\\n3 2 5 5 5 5\\n2 4 5 5 5 5\\n5 5 5 5 5 5\\n4 3 5 5 5 5\\n3 5 5 5 5 5\\n2 5 5 5 5 5\\n1 2 5 5 5 5\\n3 5 5 5 5 5\\n3 5 5 5 5 5\\n3 5 5 5 5 5\\n5 2 5 5 5 5\\n7 5 5 5 5 5\\n5 3 5 5 5 5\\n1 5 5 5 5 5\\n4 2 5 5 5 5\\n3 2 5 5 5 5\\n6 5 5 5 5 5\\n5 2 5 5 5 5\\n7 5 5 5 5 5\\n7 5 5 5 5 5\\n5 3 5 5 5 5\\n6 5 5 5 5 5\\n7 5 5 5 5 5\\n5 2 5 5 5 5\\n7 5 5 5 5 5\\n7 5 5 5 5 5\\n5 3 5 5 5 5\\n6 5 5 5 5 5\\n7 5 5 5 5 5\\n6 5 5 5 5 5\\n5 3 5 5 5 5\\n5 4 5 5 5 5\\n5 2 5 5 5 5\\n1 5 5 5 5 5\\n7 5 5 5 5 5\\n5 4 5 5 5 5\\n3 5 5 5 5 5\\n2 5 5 5 5 5\\n7 5 5 5 5 5\\n4 5 5 5 5 5\\n2 5 5 5 5 5\\n1 4 5 5 5 5\\n5 4 5 5 5 5\\n4 1 5 5 5 5\\n1 6 5 5 5 5\\n2 6 5 5 5 5\\n6 6 5 5 5 5\\n5 1 5 5 5 5\\n7 5 5 5 5 5\\n7 5 5"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 4 3') == '2 3 1 4'\nassert solution('1 2 3 4') == '1 2 3 4'\nassert solution('5 3 1 2 4') == '5 4 1 2 3'\nassert solution('1 3 2 4 5') == '1 3 2 4 5'\nassert solution('3 4 2 1 5') == '3 4 2 1 5'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('\\n'.join([\n    '4',\n    '2 1 4 3',\n])) == '2 3 4 1'\nassert solution('\\n'.join([\n    '4',\n    '2 4 3 1',\n])) == '2 4 3 1'\nassert solution('\\n'.join([\n    '4',\n    '4 3 2 1',\n])) == '4 4 3 1'\nassert solution('\\n'.join([\n    '4',\n    '3 4 1 2',\n])) == '3 4 1 2'\nassert solution('\\n'.join([\n    '4',\n    '1 3 2 4',\n])) == '1 3 2 4'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1 4 3') == '2 3 1 4'"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1') == '7.656854249492381'\nassert solution('10\\n1 2\\n2 3\\n3 4\\n3 2\\n2 1\\n1 3\\n2 4\\n3 3\\n4 4\\n4 5\\n5 4\\n5 4\\n5 3\\n6 4\\n6 4\\n6 4\\n7 4\\n7 4\\n7 4\\n7 3\\n7 4\\n7 4\\n7 4\\n7 5\\n7 5\\n7 5\\n7 5\\n7 4\\n7 3\\n7 3\\n7 3\\n7 3\\n7 4\\n7 4\\n7 4\\n7 3\\n7 4\\n7 4\\n7 5\\n7 5\\n7 5\\n7 5\\n7 4\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 4\\n7 4\\n7 4\\n7 4\\n7 3\\n7 4\\n7 5\\n7 5\\n7 5\\n7 5\\n7 4\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 4\\n7 4\\n7 4\\n7 5\\n7 5\\n7 5\\n7 5\\n7 4\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 4\\n7 4\\n7 4\\n7 4\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 3\\n7 4\\n7 4\\n7 4\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 4\\n7 5\\n7 5\\n7 5\\n7 5\\n7 4\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 4\\n7 4\\n7 4\\n7 4\\n7 4\\n7 4\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 4\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 4\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"2\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n\") == \"7.656854249492381\"\n\nassert solution(\n    \"6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n\") == \"7.656854249492381\""
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n2\n3\n3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n\") == \"7.656854249492381\"\nassert solution(\"10\\n1 2\\n5 4\\n8 9\\n10 5\\n9 8\\n7 6\\n5 1\\n4 3\\n1 1\\n\") == \"11.0\"\nassert solution(\"1\\n0\\n\") == \"1.0\"\nassert solution(\"5\\n1 2\\n2 4\\n1 4\\n3 5\\n\") == \"4.0\"\nassert solution(\"5\\n0 0\\n4 4\\n\") == \"4.0\"\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\"\n) == \"7.656854249492381\"\nassert solution(\n    \"10\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\"\n) == \"10.000000000000001\"\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4\\n3 2\\n2 1') == '7.656854249492381'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1') == '7.656854249492381'\nprint(solution(*(stdin.split())))\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '9'\nassert solution('5') == '9'\nassert solution('7') == '14'\nassert solution('7') == '14'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n3 3\") == \"7.656854249492381\"\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 1\\n3 4\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\") == \"7.656854249492381\"\nassert solution(\"4\\n-4 -1\\n-3 3\\n-2 2\\n-3 -1\") == \"7.656854249492381\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '2'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n2 2 4\n0 0\n0 4\n4 2\n2 0\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n4 1 7\n0 0\n0 3\n1 4\n3 2\n2 3\n4 4\n\"\"\"\n) == \"3\"\nassert solution(\n\"\"\"\n5 5 7\n1 4\n2 3\n3 1\n0 0\n0 4\n4 2\n2 4\n3 0\n3 1\n1 2\n\"\"\"\n) == \"6\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0''') == '2'\nassert solution('''3 5 5\n2 2\n4 2\n1 4\n0 1\n0 3\n0 1\n1 2\n1 3\nSample Output:\n1\n''') == '1'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\\n\") == \"2\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\\n\") == '2'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'\n\"\"\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\\n') == '2'\nassert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\\n') == '2'\nassert solution('5 5 3\\n0 0\\n0 4\\n1 1\\n1 2\\n3 3\\n1 4\\n0 1\\n1 2\\n2 3\\n2 4\\n') == '4'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '2'\nassert solution('''\n2 2\n0 0\n1 1\n''') == '1'\nassert solution('''\n1\n1\n''') == '1'\nassert solution('''\n
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5 3') == '2'\nassert solution('4 5 4') == '2'\nassert solution('5 5 3') == '1'\nassert solution('10 10 10') == '10'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"3 5 3\\n\"\n    \"1 1\\n\"\n    \"2 2\\n\"\n    \"1 3\\n\"\n    \"0 0\\n\"\n    \"0 3\\n\"\n    \"1 4\\n\"\n    \"3 3\\n\"\n    \"3 0\\n\"\n) == \"2\"\n\nassert solution(\n    \"6 10 6\\n\"\n    \"0 0\\n\"\n    \"1 1\\n\"\n    \"2 2\\n\"\n    \"3 3\\n\"\n    \"4 4\\n\"\n    \"5 5\\n\"\n    \"6 6\\n\"\n    \"7 7\\n\"\n    \"8 8\\n\"\n    \"9 9\\n\"\n    \"10 10\\n\"\n    \"11 11\\n\"\n    \"12 12\\n\"\n    \"13 13\\n\"\n    \"14 14\\n\"\n    \"15 15\\n\"\n    \"16 16\\n\"\n    \"17 17\\n\"\n    \"18 18\\n\"\n    \"19 19\\n\"\n) == \"15\"\n\nassert solution(\n    \"7 6 6\\n\"\n    \"0 0\\n\"\n    \"1 1\\n\"\n    \"2 2\\n\"\n    \"3 3\\n\"\n    \"4 4\\n\"\n    \"5 5\\n\"\n    \"6 6\\n\"\n    \"7 7\\n\"\n    \"8 8\\n\"\n    \"9 9\\n\"\n    \"10 10\\n\"\n    \"11 11\\n\"\n    \"12 12\\n\"\n    \"13 13\\n\"\n    \"14 14\\n\"\n    \"15 15\\n\"\n    \"16 16\\n\"\n    \"17 17\\n\"\n    \"18 18\\n\"\n    \"19 19\\n\"\n) == \"16\"\n\nassert solution(\n    \"10 10 10\\n\"\n    \"0 0\\n\"\n    \"1 1\\n\"\n    \"2 2\\n\"\n    \"3 3\\n\"\n    \"4 4\\n\"\n    \"5 5\\n\"\n    \"6 6\\n\"\n    \"7 7\\n\"\n    \"8 8\\n\"\n    \"9 9\\n\"\n    \"10 10\\n\"\n    \"11 11\\n\"\n    \"12 12\\n\"\n    \"13 13\\n\"\n    \"14 14\\n\"\n    \"15 15\\n\"\n    \"16 16\\n\"\n    \"17 17\\n\"\n    \"18 18\\n\"\n    \"19 19\\n\"\n    \"20 20\\n\"\n    \"21 21\\n\"\n    \"22 22\\n\"\n    \"23 23\\n\"\n    \"24 24\\n\"\n) == \"22\"\n\nassert solution(\n    \"20 20 20\\n\"\n    \"0 0\\n\"\n    \"1 1\\n\"\n    \"2 2\\n\"\n    \"3 3\\n\"\n    \"4 4\\n\"\n    \"5 5\\n\"\n    \"6 6\\n\"\n    \"7 7\\n\"\n    \"8 8\\n\"\n    \"9 9\\n\"\n    \"10 10\\n\"\n    \"11 11\\n\"\n    \"12 12\\n\"\n    \"13 13\\n\"\n    \"14 14\\n\"\n    \"15 15\\n\"\n    \"16 16\\n\"\n    \"17 17\\n\"\n    \"18 18\\n\"\n    \"19 19\\n\"\n    \"20 20\\n\"\n    \"21 21\\n\"\n    \"22 22\\n\"\n    \"23 23\\n\"\n    \"24 24\\n\"\n) == \"24\""
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == '9'\nassert solution('2 0') == '1'\nassert solution('3 1') == '2'\nassert solution('3 0') == '2'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '9'\nassert solution('10 2') == '9953'\nassert solution('8 10') == '9953'\nassert solution('5 4') == '998244353'\nassert solution('10 20') == '944332764555'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"9\"\nassert solution(\"1 10\") == \"1\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"9\"\nassert solution(\"1000000000 1000000\") == \"1000000000 1000000\"\nassert solution(\"7 1\") == \"0\"\nassert solution(\"5 5\") == \"6\"\nassert solution(\"3 1\") == \"7\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"9\"\nassert solution(\"7 3\") == \"4\"\nassert solution(\"2 2\") == \"4\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"9\"\nassert solution(\"9 9\") == \"1\"\nassert solution(\"3 3\") == \"0\"\n\nassert solution(\"9 3\") == \"9\"\nassert solution(\"3 5\") == \"1\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1') == '9'\nassert solution('100 50') == '944474'\nassert solution('1000 1000') == '987654321'\n\"\"\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 3\n4 5\n6 7\n''') == '9'\n\nassert solution('''1 1\n2 1\n3 1\n''') == '3'\n\nassert solution('''1 2\n2 2\n3 2\n''') == '0'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"9\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 2') == '2'\nassert solution('2 1') == '1'\nassert solution('2 2') == '0'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"12\"\nassert solution(\"2\") == \"12\"\nassert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"12\"\nassert solution(\"7\") == \"12\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n{\n    7\n    10\n    9\n    3\n    15\n    8\n    11\n    6\n    14\n    13\n}\n''') == '6'\nassert solution('''\n{\n    2\n    3\n    5\n    7\n    11\n    15\n    13\n    14\n    16\n}\n''') == '16'\nassert solution('''\n{\n    14\n    10\n    11\n    15\n    7\n    8\n    9\n    6\n    3\n    12\n}\n''') == '12'\n'''"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n2\n3\n5\n7\n12\n''') == '12'\n\nassert solution('''\n4\n2\n3\n5\n7\n12\n''') == '12'\n\nassert solution('''\n5\n1\n3\n5\n7\n12\n''') == '12'\n\nassert solution('''\n8\n1\n3\n5\n7\n11\n13\n15\n17\n19\n''') == '13'"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('7') == '1'\nassert solution('12') == '3'\n\"\"\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('4') == '4'\n\n-----Explanation-----\nThe inputs are:\n\n5: There are 4 distinct integers in S, and the maximum d = 12.\n\n2: There is no max d, as S only contains 2 distinct integers.\n\n3: The max d = 5.\n\n5: The max d = 5, as it equals 12.\n\n7: The max d = 7.\n\n12: There is no max d.\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"\", \"Your solution must be non-empty\"\nassert solution(\"2\") == \"\", \"Your solution must be non-empty\"\nassert solution(\"3\") == \"\", \"Your solution must be non-empty\"\nassert solution(\"5\") == \"12\", \"Your solution must be 12\"\nassert solution(\"7\") == \"\", \"Your solution must be non-empty\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\n2\n3\n5\n7\n12\n\"\"\") == \"12\"\nassert solution(\"\"\"\n5\n2\n3\n5\n7\n12\n\"\"\") == \"\"\nassert solution(\"\"\"\n1\n2\n3\n5\n7\n\"\"\") == \"\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\\n5\\n7\\n12\") == \"12\\n\"\nassert solution(\"2\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1\n3\n5\n7\n''') == '12'\nassert solution('''\n4\n-7\n7\n4\n-8\n''') == ''\nassert solution('''\n1\n3\n''') == ''\n\"\"\""
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == ''\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('7') == '4'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n00\n01\n\n''') == '01'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n0\n1\n''') == \"1\"\nassert solution('''7\n00\n01\n10\n100\n110\n111\n''') == \"11\"\nassert solution('''10\n100\n001\n010\n011\n101\n010\n001\n00\n''') == \"0\"\nassert solution('''1\n2\n3\n''') == \"3\"\nassert solution('''5\n110\n101\n100\n010\n001\n''') == \"010\"\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"11\"\nassert solution() == \"11\"\nassert solution() == \"11\"\nassert solution() == \"11\"\nassert solution() == \"11\"\n'''"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n00\n01\n10\n110\n111\n''') == '11', 'Should return a string that is the longest string that doesn\u2019t include s_1, \\dots, s_5'\n'''\nSample Input 2:\n3\n11\n10\n00\nSample Output:\n11\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('00') == '1'\nassert solution('01') == '0'\nassert solution('10') == '1'\nassert solution('110') == '1'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('00') == '1'\nassert solution('01') == '1'\nassert solution('10') == '1'\nassert solution('110') == '1'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n00\n01\n10\n110\n111\nSample Output:\n-1\n''') == '-1'\nassert solution('''\n5\n00\n01\n10\n110\n111\nSample Output:\n11\n''') == '11'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10\\n10\\n') == '10'\nassert solution('11\\n10\\n') == '10'\nassert solution('10\\n10\\n') == '10'\nassert solution('10\\n10\\n') == '10'\nassert solution('10\\n10\\n') == '10'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n00\\n01\\n10\\n110\\n111') == '01'\nassert solution('4\\n11') == '11'\nassert solution('3\\n11') == '11'\nassert solution('2\\n11') == '11'\nassert solution('5\\n00') == '00'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '11'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2\\n20 100\\n100 10\\n1\\n150 50\\n1\") == \"100 250 320\"\nassert solution(\"10\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\") == \"100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\"\nassert solution(\"20\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320'\n\nassert solution('''3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320'\n'''\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '100 250 320'\nassert solution('1') == '10'\n'''\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"100\"\nassert solution(\"20\") == \"100\"\nassert solution(\"1\") == \"0\"\nassert solution(\"150\") == \"250\"\nassert solution(\"150\") == \"250\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '100 250 320'\nassert solution('2') == '100 250 320'\nassert solution('1') == '100 250 320'\nassert solution('4') == '1'"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n20 10\\n1\\n150 50\\n') == '100 250 320'"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n20 100\n100 10\n1\n150 50\n1\n150 100''') == '100 250 320'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '100 250 320'\nassert solution('3') == '100 250 320'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n20 100\n100 10\n1\n150 50\n1\n150 100''') == \"100 250 320\", \"First\"\n\nassert solution('''\n5\n20 200\n100 100\n200 200\n100 100\n100 200\n100 100\n1\n150 100\n1\n150 100\n1\n150 100''') == \"100 200 400 500 600 800 1000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000\n''') == \"100 200 400 500 600 800 1000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n\"\"\") == \"100 250 320\""
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\nassert solution('10 10') == '1 2 2 1 2 1 2 1 2 1'\nassert solution('0 0') == '0'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('50 100') == '7 7 7 7 7 7 7 7 7 7'\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"50 100\") == \"3 7 4 6 5 7 2 15 2\"\nassert solution(\n    \"51 1\") == \"1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\n\"\"\""
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"50 100\") == \"3 7 4 6 5 7 2 15 2\"\nprint(solution(input()))"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"50 100\") == \"3 7 4 6 5 7 2 15 2\"\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('50') == '3 7 4 6 5 7 2 15 2'\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''50 100''') == '3 7 4 6 5 7 2 15 2'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n\"\"\") == \"40.0000000000\"\nassert solution(r\"\"\"\n4\n1 1\n1 4\n4 4\n4 1\n1 1\n1 2\n4 5\n4 3\n4 1\n1 1\n1 4\n4 2\n4 5\n\"\"\") == \"40.0000000000\"\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n''') == '40.0000000000'\nprint('Everything passed')"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"5 5\") == \"\"\nassert solution(\"4 4\") == \"\"\nassert solution(\"3 0 0 0 0 0 0 0\") == \"\"\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '40.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7\\n') == '40.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0.0000000000'\nassert solution('1\\n4') == '40.0000000000'\n\n\"\"\""
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n''') == '40.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n0 0\n0 14\n15 14\n15 0\n''') == '40.0000000000'\n\nassert solution('''\n5\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\nSample Output:\n80.0000000000\n''') == '80.0000000000'"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n''') == '40.0000000000'\nassert solution('''\n4\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n''') == '-80.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n0 0\\n0 14\\n15 14\\n15 0') == \"40.0000000000\"\nassert solution('3\\n0 0\\n0 14\\n15 14\\n15 0') == \"10.0000000000\"\nassert solution('4\\n0 0\\n0 14\\n15 14\\n15 0') == \"40.0000000000\"\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n2 1 3\n''') == '2'\n\nassert solution('''\n1\n3\n1 2 3\n''') == '0'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == '0'\nassert solution(\"3\") == '1'\nassert solution(\"2 1 3\") == '1'\nassert solution(\"2 1 2 3\") == '2'\nassert solution(\"3 2 3\") == '1'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2 1 3\\n\") == \"1\""
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n2 1 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10\n5 3 6 6 6 3 6 6 2 6 7 2 1\n\"\"\") == \"5 6 7 1 2\"\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n4\n0 1 2 3''') == '1'\nassert solution('''5\n6\n1 3 2 4''') == '5'\nassert solution('''10\n8\n7 8 8 8 7 8 7 8 7 8''') == '10'\nassert solution('''15\n13\n12 13 14 13 12 13 13 14 12 13 14''') == '13'\nassert solution('''17\n11\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8''') == '17'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n2 1 3\n1 2 3\n''') == '1 1'\nassert solution('''\n1\n10 100 200 300 500\n2 10 30 50 80 90\n''') == '2 3'\nassert solution('''\n5\n3 2 4 6 7\n4 8 1 9 2\n2 10 2 6 3\n8 9 1 7 6 5\n1 6 7 8 9 2\n''') == '4 1 4 6'\n''')"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2'"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n1 2\n''') == \"1\"\nassert solution('''\n3\n2 1 3\n''') == \"1\"\nassert solution('''\n3\n3 2 1\n''') == \"1\"\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n3\n1 2 3\n''') == '1'\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '1 2 3 4 5'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"199 162\""
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('17.0 1.71 2.38') == '199 162'\nassert solution('1.3 7.5 2.38') == 'None'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7.25 1.71 2.38') == '199 162'\nassert solution('7.99 5.00 0.20 0.50 0.20') == '208'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1.5 1.6 1.95\") == \"199 162\"\nassert solution(\"1.5 1.6 2.95\") == \"199 162\"\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3.25 1.71 2.38\") == \"199 162\"\n\nprint(solution(\"3.25 1.71 2.38\"))\n>>> 199 162\n\nprint(solution(\"0.75 0.10 0.25 0.00\"))\n>>> None\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"725.85 1.71 2.38\") == \"199 162\"\nassert solution(\"815.75 1.80 2.00\") == \"None\"\nprint(solution(input()))"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '199 162'\nassert solution('''\n6.0 1.81 2.78\n8.0 1.71 3.0\n5.0 1.71 2.78\n3.0 1.71 2.78\n1.0 1.71 2.78\n''') == '6 6'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n275.00 1.70 2.48\n''') == '199 162'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('85.0 1.71 2.38') == '199 162'\nassert solution('100.00 0.00 3.29') == 'None'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2.65 3.85\n''') == 'None'\nassert solution('''\n5.03 2.38\n''') == 'None'\nassert solution('''\n3.60 1.05\n''') == 'None'\nassert solution('''\n3.00 1.23\n''') == 'None'\nassert solution('''\n7.80 3.00\n''') == 'None'"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '1 1 1'\nassert solution('1 1 2') == '0 0 0'\nassert solution('0 -1 2 -3') == '0 0 0'\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 -1\") == \"16\"\nassert solution(\"1 3 2\") == \"13\"\nassert solution(\"0 2 3\") == \"5\"\nassert solution(\"2 1 1\") == \"9\"\nassert solution(\"3 3 0\") == \"6\"\nprint(\"all tests passed\")\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\\n') == '16'\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n''') == '16'\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0') == '16'\nassert solution('15 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0') == '14'\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0''') == '16'\nassert solution('''5 5\n2 2 2 1 2\n1 1 2 2 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1''') == '20'"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0') == '16'\nprint(solution('''5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0'''))\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0''') == \"16\"\n\nassert solution('''5 3\n3 1 1\n1 3 2\n0 2 3\n2 1 1\n3 3 0''') == \"20\"\n\nassert solution('''5 3\n1 1 1\n3 3 2\n0 2 3\n2 1 1\n3 3 0''') == \"19\"\n\nassert solution('''5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0''') == \"16\"\n\nassert solution('''5 3\n1 1 1\n3 3 2\n0 2 3\n2 1 1\n3 3 0''') == \"19\"\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\\n\") == \"16\\n\"\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0') == '16'"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\nO 1\\nE 1\\nI 1\\n') == '2 1 1'\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\nO 2\\nE 4\\n\") == \"2 1 4\"\nassert solution(\"1\\nO 2\\nI 4\\n\") == \"4 2 1\"\nassert solution(\"1\\nO 2\\nI 4\\n\") == \"2 1 4\"\n\n---"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1 2 4\"\nassert solution(\"2\") == \"1 2 3\"\nassert solution(\"3\") == \"1 2 2\"\n\"\"\"\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 O 4\n1 E 3\n1 I 2\n2 O 3\n2 E 6\n2 I 6\n''') == '1 2 4'\nassert solution('''\n1 O 4\n1 E 4\n1 I 8\n2 O 3\n2 E 2\n2 I 8\n''') == '2 1 4'\nassert solution('''\n1 O 4\n1 E 6\n1 I 7\n2 O 2\n2 E 2\n2 I 2\n''') == '2 1 4'\n'''\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\nO 2\\nO 3\\nE 4\\nO 5\\n\") == \"2 3 1\"\nassert solution(\"1\\nO 2\\nO 3\\nE 4\\nO 5\\n\") == \"1 4 2\"\nassert solution(\"1\\nO 2\\nO 3\\nE 4\\nO 5\\n\") == \"2 1 1\""
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\nO 4') == '2 1 4'\nassert solution('2\\nE 4') == '1 1 4'\nassert solution('3\\nI 4') == '2 2 1'\nassert solution('4\\nO 2') == '2 1 4'"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\nO 4\\nO 1\\nI 1') == '4 1'\nassert solution('2\\nO 4\\nO 1\\nI 1') == '0 1'\nassert solution('3\\nO 4\\nO 1\\nI 1') == '1 2'\n\"\"\"\n\nn = int(input())\nfor i in range(n):\n    # Odd\n    if i % 2 == 0:\n        print(i, end = \"\")\n        print(i + 1, end = \"\")\n        print(i + 2)\n    # Even\n    else:\n        print(i + 2)\n        print(i + 1, end = \"\")\n        print(i)\n    # Ingmariay\n    if i == n - 1:\n        print(i + 1)\n        print(i + 2, end = \"\")\n        print(i)\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\nO 1\\nE 1\\n') == '2 1 4'\nassert solution('1\\nO 2\\nE 2\\n') == '1 2 4'\nassert solution('1\\nO 3\\nE 2\\n') == '1 2 2'\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\nO 3\\nI 4\") == \"2 1 3\"\nassert solution(\"1\\nE 3\\nO 2\\nI 5\") == \"1 1 2\"\nassert solution(\"1\\nI 3\\nO 2\\nE 4\") == \"1 1 3\""
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\nO 4\") == \"2 1 4\"\nassert solution(\"2\\nO 4\") == \"1 2 4\"\nassert solution(\"3\\nO 4\") == \"2 1 4\"\nassert solution(\"4\\nO 4\") == \"2 1 4\""
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r'''5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14''') == '4'\nassert solution(r'''6 1 4 3\n1 4 2 3\n4 5 7 8\n1 5 2 5\n5 6 8 4\n3 1 2 4\n2 5 1 7\n5 4 7 3\n3 6 2 5''') == '3'\n''')\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\"\"\"\n) == \"4\"\nassert solution(\n\"\"\"\n5 5\n1 1 1 1\n2 1 1 1\n1 2 1 1\n1 1 2 1\n1 1 1 2\n\"\"\"\n) == \"3\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4\"\nassert solution(\"3 4\\n4 3\\n4 4\\n1 2 3\\n2 3\\n3 4\") == \"2\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 2 3') == '2', \"First\"\nassert solution('5 1 12 4') == '3', \"Second\"\nassert solution('5 5 9 10') == '6', \"Third\"\nassert solution('1 6 4 10') == '5', \"Fourth\"\nassert solution('2 11 7 14') == '8', \"Fifth\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1 4 5\") == \"4\", \"Wrong answer\"\nassert solution(\"5 8\") == \"5\", \"Wrong answer\"\nassert solution(\"5 1 12 4\") == \"3\", \"Wrong answer\"\nassert solution(\"5 5 9 10\") == \"1\", \"Wrong answer\"\nassert solution(\"1 6 4 10\") == \"1\", \"Wrong answer\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n''') == '4'\nassert solution('''5 10\n5 1 6 4\n5 2 7 3\n5 3 8 9\n2 9 1 3\n2 5 6 3\n1 6 8 2\n1 8 2 9\n2 8 9 7\n4 3 8 5\n2 5 6 4\n1 2 9 7\n1 3 7 8\n2 4 5 8\n2 6 1 3\n2 9 6 7\n4 8 5 7\n4 1 7 2\n3 1 5 3\n2 7 8 6\n3 6 2 9\n4 2 1 3\n3 4 8 9\n''') == '4'\nassert solution('''2 1 4 5\n3 1 6 4\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n''') == '5'\nassert solution('''5 1\n5 2\n3 1\n3 2\n3 4\n4 1\n3 4\n''') == '3'\nassert solution('''5 10\n5 1 6 4\n5 2 7 3\n5 3 8 9\n2 9 1 3\n2 5 6 3\n1 6 8 2\n1 8 2 9\n2 8 9 7\n4 3 8 5\n2 5 6 4\n1 2 9 7\n1 3 7 8\n2 4 5 8\n2 6 1 3\n2 9 6 7\n4 8 5 7\n4 1 7 2\n3 1 5 3\n2 7 8 6\n3 6 2 9\n4 2 1 3\n3 4 8 9\n''') == '4'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"4\"\n\nSample Input:\n3 4\n1 5 2\n4 3 2\n7 5 3\nSample Output:\n2\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n7 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n''') == '4'\nassert solution('''\n2 2\n2 1\n2 1\n''') == '2'\n'''\n---Input---\n\n5 2\n2 1\n5 1\n5 5\n1 6\n2 11\n'''\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14''') == '4'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('9 99 9 99 9') == '9.585073'"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('99.99 99.99 9999.99') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"-99.99 99.99 9999.99\") == \"9.585073\"\nassert solution(\"99 9 999 9999\") == \"7.364072\"\nassert solution(\"9 99 9 99 9\") == \"8.071071\"\nassert solution(\"5 5 5 5\") == \"5\""
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n99.99 99.99 9999.99\n99 9 999 9999\n9 99 9 99 9\n''') == '9.585073'\nassert solution('''\n-99.99 99.99 9999.99\n99 9 999 9999\n9 99 9 99 9\n''') == '9.585073'\nassert solution('''\n-99.99 99.99 9999.99\n99 9 999 9999\n9 99 9 999 9\n''') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('99 9 999 9999 9999') == '9.585073'\nassert solution('99 9 999 9999 9999 9999') == '9.585073'\nassert solution('999 9 999 9999 9999 9999') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('9 99 9 99 9') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '-9.095593'\nassert solution('9 99 9 99 9') == '-9.105593'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0.99 999.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('9 99 9 999 9') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '8.664278'\nassert solution('9 99 9 99 9') == '8.664278'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('99.99 99.99 9999.99') == '9.585073'\nassert solution('99 99 9999 9999') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('9 99 9999 9') == '9.585073'\nassert solution('9 9 999 9999') == '9.585073'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('20 30') == '12.74 127.83'\nassert solution('1 1') == 'Impossible'\nassert solution('1 1') == 'impossible'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 10 10 10 10 10') == 'impossible'\n\nassert solution('10 10 20 20 20 20') == 'impossible'\n\nassert solution('20 30 2 10 20 2 24 18 28 10') == '12.74 127.83'"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"20 30\") == \"12.74 127.83\""
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n20 30\n2 10 20 2 24 18 28 10\n''') == '12.74 127.83'\nassert solution('''\n20 30\n0 2 5 6\n''') == 'impossible'\nassert solution('''\n20 30\n1 2 3\n''') == 'impossible'\nassert solution('''\n20 30\n1 0\n''') == 'impossible'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 30\n2 10 20 2 24 18 28 10\n''') == '12.74 127.83\n\nassert solution('''\n10 30\n2 10 20 2 24 18 28 10\n''') == '12.74 127.83\n\nassert solution('''\n20 30\n2 10 20 2 24 18 28 10\n''') == 'impossible'\n\nassert solution('''\n20 30\n2 10 20 2 24 18 28 10\n''') == 'impossible'\n\nassert solution('''\n20 30\n5 10 20 2 24 18 28 10\n''') == 'impossible'"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 20') == '12.74'\nassert solution('10 20') == '12.74'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"12.79 12.79\") == \"impossible\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('20 30\\n2 10 20 2 24 18 28 10\\n') == '12.74 127.83'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n20 30\n2 10 20 2 24 18 28 10\n''') == '12.74 127.83'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('20 30') == '12.74 127.83'\nassert solution('10 20') == '12.78 14.34'\nassert solution('10 20 3 5') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n110\n6\nSample Input 2:\n4\n1002\n921\n1021\n1021\nSample Output 2:\n10021\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1\n2\n1\n1\n3\n1\n1\n3\n1\n3\n1\n3\n4\n1\n1\n3\n1\n4\n1\n3\n4\n3\n1\n3\n1\n3\n''') == '0'\n\nassert solution('''\n2\n2\n1\n3\n2\n3\n3\n3\n2\n3\n1\n3\n1\n2\n3\n3\n''') == '01'\n\nassert solution('''\n7\n6\n2\n9\n4\n3\n2\n8\n9\n3\n3\n1\n3\n7\n1\n2\n5\n4\n9\n''') == '0116'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n110\\n6') == '0116'\n\nassert solution('100\\n1\\n2\\n3') == '1112'\n\nassert solution('100\\n9\\n8\\n7\\n6') == '9678'\n\nassert solution('1\\n1\\n1\\n1') == '1'\n\nassert solution('1\\n1\\n1\\n1\\n1\\n1') == '1'"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(r\"\"\"\n1\n6\n\"\"\") == \"0116\"\nassert solution(r\"\"\"\n100\n2\n\"\"\") == \"00010\"\nassert solution(r\"\"\"\n1\n10\n\"\"\") == \"0\"\nassert solution(r\"\"\"\n100\n101\n\"\"\") == \"1\"\nassert solution(r\"\"\"\n1\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n20\n7\n''') == '01164'\nassert solution('''\n10\n1\n''') == '0123456789'\nassert solution('''\n100\n6\n''') == '0123456789'\n\n'''\nSample Input 2:\n1\n1\nSample Output 2:\n0\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == \"0116\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n    110\n    6\n\"\"\") == \"0116\"\nassert solution(\"\"\"\n    110\n    120\n\"\"\") == \"0201\"\n\"\"\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n110') == '0116'\nassert solution('3\\n110') == '0116'\nassert solution('4\\n110') == '0116'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\\n1\") == \"11\"\nassert solution(\"2\\n2\") == \"21\"\nassert solution(\"3\\n3\") == \"32\"\nassert solution(\"4\\n3\") == \"33\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('\\n'.join([\n    \"1\",\n    \"110\"\n])) == \"0116\"\n\nassert solution('\\n'.join([\n    \"4\",\n    \"724\"\n])) == \"3724\"\n\nassert solution('\\n'.join([\n    \"8\",\n    \"7324\"\n])) == \"7324\"\n\nassert solution('\\n'.join([\n    \"20\",\n    \"724\"\n])) == \"724\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"0 2 4\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"8 3\\n4 4 4\\n\") == \"0 2 4\"\n\"\"\""
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 3\\n4 4 4') == '0 2 4'\nassert solution('7 5\\n3 6 5 7 5 6 2') == '0 1 5 7 2 6 5 3'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n8 3\n4 4 4\n''') == '0 2 4'\n\nassert solution('''\n10 3\n5 5 5\n''') == '0 2 5'\n\nassert solution('''\n15 7\n2 2 2\n''') == '0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"8 3\n4 4 4\"\"\") == \"0 2 4\"\nassert solution(\"\"\"10 2\n10 10 10\n
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3\\n2 5') == '0 0 3'\nassert solution('5 5\\n1 3') == '0 0 3'\nassert solution('20 20\\n10 10') == '0 0 10'\nassert solution('100 20\\n10 10') == '0 0 0'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 3') == '0 2 4'\nassert solution('6 4') == '0 2 4'\nassert solution('10 7') == '0 3 4 5'"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"0 0 0\"\nassert solution(\"3 4\") == \"0 0 0\"\nassert solution(\"6 10\") == \"0 2 4 4 2 4\"\nassert solution(\"1 5\") == \"0 2 4 4 2\"\nassert solution(\"1 20\") == \"0 2 4 4 2\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n4 4 4\n''') == '0 2 4\nassert solution('''\n4 3\n4 4 4\n''') == '0 2 3\n'''\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"0 2 4\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\\n\") == \"impossible\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5''') == \"impossible\"\nassert solution('''4\n4\n4 2\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5''') == \"impossible\"\nassert solution('''3\n4\n1 2\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5''') == \"possible\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == 'impossible'\nassert solution('3') == 'impossible'\nassert solution('1') == 'impossible'\nassert solution('2') == 'possible'\nassert solution('4') == 'possible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"impossible\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"4\") == \"impossible\"\nassert solution(\"5\") == \"impossible\"\nassert solution(\"6\") == \"impossible\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'impossible'\nassert solution('\\n'.join([\n    '4',\n    '7',\n    '2 2 4',\n    '3 1 3 5',\n    '1 2',\n    '2 1 5',\n    '4 2 6 4 7',\n    '2 5 7',\n    '2 6 5',\n])) == 'impossible'\nassert solution('\\n'.join([\n    '3',\n    '5',\n    '1 2',\n    '2 1 5',\n    '3 1 3 5',\n    '2 5 7',\n])) == 'impossible'\nassert solution('\\n'.join([\n    '8',\n    '7',\n    '2 2 4',\n    '3 1 3 5',\n    '1 2',\n    '2 1 5',\n    '4 2 6 4 7',\n    '2 5 7',\n    '2 6 5',\n])) == 'possible'\nassert solution('\\n'.join([\n    '10',\n    '7',\n    '2 2 4',\n    '3 1 3 5',\n    '1 2',\n    '2 1 5',\n    '4 2 6 4 7',\n    '2 5 7',\n    '2 6 5',\n])) == 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'impossible'\nassert solution('''\n7\n7\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'possible'\nassert solution('''\n7\n7\n2 3 4\n1 2\n3 1 5\n4 1 7\n1 1 6\n1 5 7\n1 6 7\n''') == 'impossible'\nassert solution('''\n7\n7\n3 1 3 5\n1 2\n3 1 5\n4 1 7\n1 1 6\n1 5 7\n1 6 7\n''') == 'possible'\nassert solution('''\n7\n7\n3 1 3 5\n1 2\n3 1 5\n4 1 7\n1 1 6\n1 5 7\n1 6 7\n''') == 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"impossible\"\nassert solution(\"4 5\") == \"impossible\"\nassert solution(\"4 6 7\") == \"impossible\"\nassert solution(\"4 5 7\") == \"impossible\"\nassert solution(\"4 5 6\") == \"impossible\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n7\\n2 2 4\\n3 1 3 5\\n1 2') == 'impossible'\nassert solution('4\\n7\\n3 1 3 5\\n2 5 7\\n2 6 5\\n1 5 7') == 'possible'\nassert solution('4\\n7\\n2 5 7\\n2 6 5\\n1 6 5\\n4 2 6 4 7') == 'possible'\nassert solution('4\\n7\\n1 2\\n3 1 3 5\\n2 5 7\\n2 6 5\\n1 5 7\\n4 2 6 4 7') == 'impossible'\nassert solution('4\\n7\\n3 1 3 5\\n2 5 7\\n2 6 5\\n1 6 5\\n4 2 6 4 7') == 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'impossible'\nassert solution('''5\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'possible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3\n4\n1 2\n2 1\n3 1\n3"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'impossible'\nassert solution('0 0') == '0'\nassert solution('0 10') == '10'\nassert solution('2') == 'impossible'"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n1 2\n1 3\n2 4\n2 1\n2 5\n3 4\n3 1\n3 5\n4 4\n4 1\n3 0\n\"\"\") == \"6.00000\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n0 0\\n1 1\") == \"1.00000\"\nassert solution(\"2\\n0 0\\n1 1\") == \"impossible\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n0 0\n0 10\n2\n4 10\n4 0\n''') == '4.00000'\nassert solution('''\n0 0\n1 2\n4 5\n3 4\n3 1\n''') == '4.00000'\nassert solution('''\n0 0\n2\n10\n3 4\n0 1\n''') == 'impossible'\nassert solution('''\n0 0\n1 2\n4 5\n3 4\n1 1\n''') == 'impossible'\nassert solution('''\n5 1\n0 0\n1 2\n4 5\n3 4\n2 5\n1 1\n''') == '5.00000'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"4.00000\"\nassert solution(\"1\") == \"Impossible\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 0\") == \"4.00000\"\nassert solution(\"2 0 1\") == \"2.00000\"\nassert solution(\"2 0 1 1\") == \"2.00000\"\nassert solution(\"2 0 1 1 2\") == \"impossible\"\nassert solution(\"1\") == \"impossible\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '4.00000'\nassert solution_again() == 'impossible'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n0 0\\n0 10\\n2\\n4 10\\n4 0\\n') == '4.00000'\nassert solution('6\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n') == 'Impossible'"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n0 0\n0 10\n2\n4 10\n4 0\n''') == '4.00000'\nassert solution('''\n0 0\n0 10\n2\n4 10\n4 0\n''') == 'impossible'\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n0 0\n0 10\n2\n4 10\n4 0''') == '4.00000'\nassert solution('''4\n0 0\n0 10\n2\n4 10\n4 0''') == 'impossible'\nassert solution('''5\n0 0\n0 10\n2\n4 10\n4 0''') == '5.00000'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('\\n'.join([\n    '3 2 5',\n    '1 1',\n    '1 3',\n    '3 1',\n    '3 3',\n    '2 2',\n])) == '1', \"Should be 1\"\nassert solution('\\n'.join([\n    '3 2 5',\n    '1 1',\n    '1 3',\n    '3 1',\n    '3 3',\n    '2 2',\n])) == '0', \"Should be 0\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2 5') == '1'\nassert solution('5 5 4') == '0'\nassert solution('3 3 3') == '0'\nassert solution('10 10 5') == '1'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 5') == '1'\nassert solution('3 2 5') == '0'\n\n'''"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 2 3\n1 1\n2 2\n1 3\n3 1\n\"\"\") == \"1\", \"TEST 1\"\nassert solution(\"\"\"\n5 5 7\n1 1\n3 2\n3 3\n2 2\n3 3\n1 1\n2 3\n\"\"\") == \"0\", \"TEST 2\"\nassert solution(\"\"\"\n5 5 7\n1 1\n2 2\n3 3\n4 4\n5 4\n6 5\n\"\"\") == \"1\", \"TEST 3\"\nassert solution(\"\"\"\n8 8 7\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n\"\"\") == \"1\", \"TEST 4\"\nassert solution(\"\"\"\n8 8 7\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n\"\"\") == \"0\", \"TEST 5\"\n\"\"\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2 5\") == \"1\"\nassert solution(\"3 2 6\") == \"0\"\nassert solution(\"3 2 5\") == \"1\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n\") == \"1\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1'\nassert solution('''\n3 3 3\n1 1 1\n2 2 2\n3 3 3\n''') == '0'\nassert solution('''\n1 1 2\n2 2 1\n2 1 2\n''') == '1'\n'''"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1', 'First'\nassert solution('''\n3 3 4\n1 2\n1 2\n1 1\n1 1\n1 2\n''') == '0', 'Second'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n\") == \"1\""
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '1 0\\n2 4\\n4 3\\n'\n\nassert solution('''\n6 3\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '1 0\\n2 4\\n4 3\\n'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3') == '5 3\\n1 0\\n2 4\\n'\nassert solution('4 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3') == 'impossible'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"impossible\"\n\nassert solution(\"5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\") == \"5 3 1 0\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"5 3\\n1 0\\n2 4\""
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '5 3\\n1 0\\n2 4\\n', \"Should print the matching pairs of translators\"\n\nassert solution('''\n10 5\n0 2\n1 3\n2 4\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n21 23\n22 24\n22 25\n''') == '10 4\\n1 23\\n2 21\\n3 20\\n4 18\\n5 15\\n', \"Should print the matching pairs of translators\"\n\nassert solution('''\n10 5\n0 2\n1 3\n2 4\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n21 23\n22 24\n22 25\n''') == '10 4\\n1 23\\n2 21\\n3 20\\n4 18\\n5 15\\n', \"Should print the matching pairs of translators\"\n\nassert solution('''\n10 5\n0 2\n1 3\n2 4\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n21 23\n22 24\n22 25\n''') == 'impossible', \"Should print the impossible matching\"\n''')\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n\"\"\") == \"\"\"\n5 3\n1 0\n2 4\n\"\"\"\nassert solution(\"\"\"\n6 6\n0 1\n0 2\n0 3\n1 2\n1 3\n1 4\n2 3\n2 4\n2 5\n\"\"\") == \"\"\"\nimpossible\n\"\"\"\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n\"\"\") == \"3 3\"\n\nassert solution(\"\"\"\n5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n\"\"\") == \"2 1\"\n\nassert solution(\"\"\"\n5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '0 1\\n2 4\\n1 0\\n'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '5 3\\n1 0\\n2 4\\n''', \"Wrong output\"\nassert solution('''\n4 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '0 1\\n2 3\\n4 3\\n''', \"Wrong output\"\n'''\n4 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n'''"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6') == '5 3'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '2\\n1 2'\nassert solution('8 1\\n0 0\\n0 1\\n1 0\\n1 1\\n1 2\\n2 1\\n2 2\\n') == '6\\n1 1\\n2 1'"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 1\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '2\\n1 2'\nassert solution('4 3\\n0 0\\n0 1\\n0 2\\n1 0\\n1 1\\n') == '1\\n1 2'\nassert solution('4 2\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '1\\n1 2'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 1\n0 0\n0 1\n1 0\n1 1\n''') == '2\\n1 2'\nassert solution('''\n2 2\n0 0\n1 1\n0 1\n1 0\n''') == '1\\n2'\n'''))"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"1 2\""
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 1\n0 0\n0 1\n1 0\n1 1''') == '2'\nassert solution('''4 5\n0 0\n0 1\n1 0\n1 1\n2 0\n2 1''') == '3'\nassert solution('''6 5\n0 0\n1 1\n2 2\n3 0\n4 1\n5 0\n5 1''') == '2'\nassert solution('''10 10\n0 0\n0 1\n1 0\n1 1\n2 2\n2 3\n3 2\n3 3\n3 4\n4 0\n4 1\n4 2\n4 3\n4 4''') == '4'\nassert solution('''4 4\n0 0\n1 1\n2 2\n3 3''') == '3'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == '2'\nassert solution('2 0') == '2'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"2\\n1 2\"\nassert solution(\"4 1\") == \"3\\n1 2\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n0 0\n1 1\n1 2\n''') == '2'\nassert solution('''\n4 1\n0 0\n0 1\n1 0\n1 1\n''') == '2'\nassert solution('''\n6 6\n0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n''') == '3'\nassert solution('''\n10 10\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n''') == '5'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2\\n1 0\\n0 1\\n1 0\\n1 1') == '2\\n1 2'\nassert solution('10 1\\n0 0\\n0 1\\n1 0\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10') == '10'\nassert solution('20 20\\n10 10\\n10 10\\n20 20\\n20 20\\n20 20\\n20 20\\n20 20\\n20 20') == '6'\nassert solution('5 1\\n0 0\\n0 1\\n1 0\\n1 1') == '2'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\\n\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\n1\\n') == '1'\nassert solution('2 2\\n3 4\\n') == '0'\nprint('Almost done!')\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 1\n1 3 5 7 9 11 13 15 17 16''') == \"1\"\nassert solution('''5 2\n1 3 5 7 9 11 13 15 17 16''') == \"1\"\nassert solution('''8 5\n1 2 3 4 5 6 7 8''') == \"3\"\nassert solution('''5 2\n1 3 5 7 9 11 13 15 17 16''') == \"1\"\nassert solution('''5 2\n1 3 5 7 9 11 13 15 17 16''') == \"1\"\n'''\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 3') == '1'\nassert solution('4 5') == '1'\nassert solution('6 7') == '0'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 2\n1 3 5 7 9 11 13 15 17 16\n''') == '1'\nassert solution('''\n10 2\n1 2 3 4 5 6 7 8 9 10\n''') == '0'\nassert solution('''\n10 2\n1 1 2 3 3 4 5 5 6 7\n''') == '1'\nassert solution('''\n10 2\n1 2 3 4 5 6 7 8 9 10\n''') == '1'\nassert solution('''\n10 2\n1 2 3 4 5 6 7 8 9 10\n''') == '1'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 2\n1 3 5 7 9 11 13 15 17 16\n''') == '1'\nassert solution('''\n100 10\n10 3 4 5 6 7 8 9 10\n''') == '10'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n''') == '1'\nassert solution('''\n2 100\n1 2\n''') == '1'\nassert solution('''\n2 1\n1 2\n''') == '1'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 2\n1 3 5 7 9 11 13 15 17 16\n''') == '1'"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n'\n) == '1'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n10 2\n1 3 5 7 9 11 13 15 17 16\n\"\"\") == \"1\"\nassert solution(\"\"\"\n200 3\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"2\"\nassert solution(\"\"\"\n200 10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"0\"\nassert solution(\"\"\"\n200 20\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"1\"\nassert solution(\"10 2\\n1 2 3 4 5 6 7 8 9\") == \"2\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 3 5 7 9 11 13 15 17 16') == '1'\nassert solution('10 2\\n1 3 5 7 9 11 13 15 17 16') == '1'"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\\n') == '7 4'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7\n\"\"\") == \"7 4\""
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6') == '4 13'\nassert solution('8 9') == '7 4'\n\"\"\"\n\nimport itertools\nfrom itertools import product\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n7 5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7\n''') == '7 4'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input.strip()) == '7 4'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7 5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7\n''') == '7 4'\n\nassert solution('''\n7 7\nAAA\nAAA\nAAA\nAAA\nAAA\nAAA\nAAA\nAAA\nAAA\nAAA\nAAA\nAAA\nAAA\n''') == '7 4'\n\nassert solution('''\n4 4\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\nDD\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3\\nACDBB\\n4 3\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\\n') == '7 4'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"2 2\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7\n''') == '7 4'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 5\\n' + 'ACDBB\\n' + '5 6\\n' + '8 9\\n' + '4 13\\n' + '1 10\\n' + '7 4\\n' + '10 9\\n' + '3 7\\n') == '7 4'"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE '\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\\n\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_data) == \"DONE\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE '\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\\n\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 LET A = 1\\n20 PRINT 'HELLO THERE '\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\""
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1 2\"\nassert solution(\"1 1 1 1\") == \"1 1 2\"\nassert solution(\"-1 -2 -3 -4 -5\") == \"-1 -2 -3 -4 -5\"\nassert solution(\"-100 -2 -3 -4 -5\") == \"-100 -2 -3 -4 -5\"\nassert solution(\"2 0\") == \"2 2\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\nprint('all tests passed')"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 LET A = 1') == 'HELLO THERE 1'\nassert solution('20 PRINT \"HELLO THERE \"') == 'HELLO THERE '\nassert solution('30 PRINTLN A') == 'HELLO THERE '\nassert solution('40 LET A = A + 1') == 'HELLO THERE 2'\nassert solution('50 IF A <= 5 THEN GOTO 20') == 'HELLO THERE '\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE'\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\nprint(solution(input()))\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n\"\"\"\nimport sys\nsys.stdin = open(r'C:\\Users\\User\\Desktop\\programmers\\A-z\\input.txt')"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3\"\n\"\"\"\n\nn = int(input())\ndiffs = list(map(int,input().split()))\ntasks = list(map(int,input().split()))\ndp = [1]*n\n\nfor i in range(n):\n    if i == 0:\n        pass\n    else:\n        for j in range(i):\n            if j == 0 and diffs[i]!= diffs[j]:\n                dp[i] = dp[i] + dp[j]\n                pass\n            elif j == 1 and diffs[i] == diffs[j]:\n                dp[i] = dp[i] + dp[j]\n                pass\n            else:\n                continue\nprint(sum(dp))\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3 0 1\n0 1\n''') == '4'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 0 1\n0 1\n1 2\n''') == '3\n\n'''\nTakes an input consisting of N lines of integers and returns the number of ways to assign the tasks to the next round.\n\nN is an integer greater than or equal to 2.\n\nThe input will always have exactly 2 lines of input.\n\nThe first line will contain a single integer $n$ of the number of tasks in a single round.\n\nThe second line will contain $n$ integers that are not greater than $10^9$ for the tasks assigned to the next round.\n\nThe third line will contain $n-1$ integers that are not greater than $10^9$ for the tasks assigned to the next round.\n\nExamples:\n\nInput 1:\n3\n3 0 1\n0 1\n1 2\nOutput 1:\n3\n\nInput 2:\n1\n1 1\nOutput 2:\n4\n'''"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 0 1\n0 1\n1 0\n0 1\nSample Input 2:\n6\n3 1 1\n1 2\n2 3\nSample Output 2:\n5\n''') == '5'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == '3'"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n3 0 1\n0 1''') == '4'\n\nassert solution('''4\n2 0 2 1''') == '4'\n\nassert solution('''5\n3 0 0 1 1\n0 1\n1 2''') == '5'\n\nassert solution('''5\n3 0 0 1 1\n0 1\n1 2\n0 3\n0 4''') == '6'\n\nassert solution('''10\n2 0 0 1 1 2 3 4 5 6 7 8 9\n3 9\n1 1 1 1 1 1 1 1 1 1''') == '5'"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n0 1\\n0 1\\n') == '3'"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n2 0 1\n0 1\nSample Input:\n4\n3 0 1\n0 1\n2 0\n0 2\nSample Output:\n2\n''') == '2'\n\nassert solution('''\n3\n3 0 1\n0 1\n2 0\nSample Input:\n6\n2 0 1\n0 1\n3 0\n0 2\nSample Output:\n3\n''') == '3'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n\") == \"LLRRRRLL\"\n\"\"\""
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3') == 'LRRLRLLLRRRLR'\nassert solution('4\\n2 5\\n2 3\\n3 4\\n3 4\\n1 3') == 'LRLLRRRRRRLLLRRRRLLRRLRLRLRLRLRLLRLL'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n\") == \"LLRRRRLL\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n\") == \"LLRRRRLL\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LLRLRLL'\nassert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'RRRLLRLR'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'RRRRRLRR'\nassert solution('5\\n1 2\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'impossible'\nassert solution('5\\n1 2\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'RLRRRLRL'\nassert solution('5\\n1 2\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'RRRLRLRL'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n\"\"\") == \"RLRRRLRLL\"\n\nassert solution(\"\"\"\n5\n1 2\n2 5\n3 4\n4 5\n1 3\n3 5\n4 5\n1 3\nSample Output:\nimpossible\n\"\"\") == \"impossible\""
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3') == 'LLRRRRLL'\nassert solution('4\\n1 2\\n2 3\\n3 1\\n1 3') == 'RRLLRLRLR'\nassert solution('5\\n1 2\\n2 3\\n3 1\\n1 3\\n3 4\\n3 4') == 'RRLLRLRLR'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n3 4\\n4 5\\n4 5\\n4 5') == 'impossible'\nassert solution('100\\n1 2\\n2 3\\n3 1\\n1 3\\n3 4\\n3 4\\n4 5\\n4 5\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n11 12\\n12 13\\n13 14\\n14 15\\n14 15\\n15 16\\n15 16\\n16 17\\n16 17\\n17 18\\n17 18\\n18 19\\n18 19\\n19 20\\n19 20\\n20 21\\n20 21\\n21 22\\n21 22\\n22 23\\n22 23\\n23 24\\n23 24\\n24 25\\n24 25\\n25 26\\n25 26\\n26 27\\n26 27\\n27 28\\n27 28\\n28 29\\n28 29\\n29 30\\n29 30\\n30 31\\n30 31\\n31 32\\n31 32\\n32 33\\n32 33\\n33 34\\n33 34\\n34 35\\n34 35\\n35 36\\n35 36\\n36 37\\n36 37\\n37 38\\n37 38\\n38 39\\n38 39\\n39 40\\n39 40\\n40 41\\n40 41\\n41 42\\n41 42\\n42 43\\n42 43\\n43 44\\n43 44\\n44 45\\n44 45\\n45 46\\n45 46\\n46 47\\n46 47\\n47 48\\n47 48\\n48 49\\n48 49\\n49 50\\n49 50\\n50 51\\n50 51\\n51 52\\n51 52\\n52 53\\n52 53\\n53 54\\n53 54\\n54 55\\n54 55\\n55 56\\n55 56\\n56 57\\n56 57\\n57 58\\n57 58\\n58 59\\n58 59\\n59 60\\n59 60\\n60 61\\n60 61\\n61 62\\n61 62\\n62 63\\n62 63\\n63 64\\n63 64\\n64 65\\n64 65\\n65 66\\n65 66\\n66 67\\n66 67\\n67 68\\n67 68\\n68 69\\n68 69\\n69 70\\n69 70\\n70 71\\n70 71\\n71 72\\n71 72\\n72 73\\n72 73\\n73 74\\n73 74\\n74 75\\n74 75\\n75 76\\n75 76\\n76 77\\n76 77\\n77 78\\n77 78\\n78 79\\n78 79\\n79 80\\n79 80\\n80 81\\n80 81\\n81 82\\n81 82\\n82 83\\n82 83\\n83 84\\n83 84\\n84 85\\n84 85\\n85 86\\n85 86\\n86 87\\n86 87\\n87 88\\n87 88\\n88 89\\n88 89\\n89 90\\n89 90\\n90 91\\n90 91\\n91 92\\n91 92\\n92 93\\n92 93\\n93 94\\n93 94\\n94 95\\n94 95\\n95 96\\n95 96\\n96 97\\n96 97\\n97 98\\n97 98\\n98 99\\n98 99\\n99 100\\n99 100\\n100 101\\n100 101\\n101 102\\n101 102\\n102 103\\n102 103\\n103 104\\n103 104\\n104 105\\n104 105\\n105 106\\n105 106\\n106 107\\n106 107\\n107 108\\n107 108\\n108 109\\n108 109\\n109 110\\n109 110\\n110 111\\n110 111\\n111 112\\n111 112\\n112 113\\n112 113\\n113 114\\n113 114\\n114 115\\n114 115\\n115 116\\n115 116\\n116 117\\n116 117\\n117 118\\n117 118\\n118 119\\n118 119\\n119 120\\n119 120\\n120 121\\n120 121\\n121 122\\n121 122\\n122 123\\n122 123\\n123 124\\n123 124\\n124 125\\n124 125\\n125 126\\n125 126\\n126 127\\n126 127\\n127 128\\n127 128\\n128 129\\n128 129\\n129 130\\n129 130\\n130 131\\n130 131\\n131 132\\n131 132\\n132 133\\n132 133\\n133 134\\n133 134\\n134 135\\n134 135\\n135 136\\n135 136\\n136 137\\n136 137\\n137 138\\n137 138\\n138 139\\n138 139\\n139 140\\n139 140\\n140 141\\n140 141\\n141 142\\n141 142\\n142 143\\n142 143\\n143 144\\n143 144\\n144 145\\n144 145\\n145 146\\n145 146\\n146 147\\n146 147\\n147 148\\n147 148\\n148 149\\n148 149\\n149 150\\n149 150\\n150 151\\n150 151\\n151 152\\n151 152\\n152 153\\n152 153\\n153 154\\n153 154\\n154 155\\n154 155\\n155 156\\n155 156\\n156 157\\n156 157\\n157 158\\n157 158\\n158 159\\n158 159\\n159 160\\n159 160\\n160 161\\n160 161\\n161 162\\n161 162\\n162 163\\n162 163\\n163 164\\n163 164\\n164 165\\n164 165\\n165 166\\n165 166\\n166 167\\n166 167\\n167 168\\n167 168\\n168 169\\n168 169\\n169 170"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'LLRRRRLL'\nassert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'impossible'\nassert solution('10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n') == 'LRLLRRLL'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LLRRRRLL'\nassert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LLRLRRLR'\nassert solution('''\n1\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'impossible'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\") == \"LLRRRRLL\"\nassert solution(\"10\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1009 2011') == '2011'\nassert solution('2\\n1009 2011') == '1009'\n\n\"\"\""
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1009 2011\n1017 2011\n''') == '1'\nassert solution('''\n3\n1009 2011\n1017 2011\n1018 2011\n''') == '0'\nassert solution('''\n2\n1009 2011\n1017 2011\n''') == '1'\nassert solution('''\n5\n1009 2011\n1017 2011\n1018 2011\n1019 2011\n1010 2011\n''') == '0'\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1009 2011\\n1017 2011\") == \"1\\n2011\"\nassert solution(\"2\\n1000 2001\\n1009 2001\") == \"1\\n2001\"\nassert solution(\"2\\n2001 2001\\n1009 2001\") == \"0\"\nassert solution(\"2\\n1001 2000\\n1001 2001\") == \"0\"\nassert solution(\"2\\n1001 2001\\n1001 2001\") == \"0\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('1') == '1019'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('1') == '1001'\nprint(\"You're welcome!\")"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n1009 2011\\n1017 2011') == '1\\n2011'"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"2011\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '1'\n\n\"\"\"\n\nn = int(input())\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    if a!= b:\n        print(a)\n\n\"\"\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1009 2011\\n1017 2011') == '1\\n2011'\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n1009 2011\\n1017 2011') == '1\\n2011'\nassert solution('3\\n1009 1009 1009\\n1017 1017 1017') == '2\\n1009\\n1017'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4\\n1 2 100\\n0 3 100\\n0 2 100\\n1 3 100\\n2 3 100') == '0 3'\nassert solution('3 3\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100') == '0 3'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4') == '0 3'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4\") == \"0 1\""
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4') == '0 3'\nassert solution('5 4') == '0 4'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n\"\"\") == \"0 3\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"0 3\""
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n''') == '0 3'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4') == '0 3'\nassert solution('4 5') == '0 3'\nassert solution('4 10') == '0 3'\nassert solution('4 20') == '0 3'\nassert solution('4 50') == '0 3'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4') == '0 3'\n\nn,m = map(int,input().split())\nN,M = map(int,input().split())\n\nv = []\nfor i in range(n):\n    v.append(list(map(int,input().split())))\n\nv.sort(key = lambda x: x[0])\nv.sort(key = lambda x: x[1])\nv.sort(key = lambda x: x[2])\nv.sort(key = lambda x: x[3])\n\nres = []\ni = 0\nj = 0\nk = 0\nwhile i < len(v) and j < len(v):\n    if v[i][0] < v[j][0]:\n        res.append(v[i][2])\n        i += 1\n    else:\n        res.append(v[j][2])\n        j += 1\nprint(res)"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3') == '0 3'\nassert solution('8 7\\n0 1 2 3 4 5 6 7 8\\n0 2 3 4 5 6 7 8\\n0 3 4 5 6 7 8\\n0 4 5 6 7 8\\n0 5 6 7 8\\n0 6 7 8\\n0 7 8\\n0 8\\n0 1 2 3 4 5 6 7 8\\n1 3 4 5 6 7 8\\n2 3 4 5 6 7 8\\n3 4 5 6 7 8\\n4 5 6 7 8\\n5 6 7 8\\n6 7 8\\n7 8') == '8 7'"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2.0 10.0') == \"20\"\nassert solution('3 3 0 0') == \"20\"\nprint(solution('3 1 1 0 1'))"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2.0 10.0') == '20.0'\nassert solution('3 3 0 0') == '20.0'\nassert solution('1.0 10.0') == '20.0'\nassert solution('1.0 100.0') == '30.0'\nassert solution('1.0 0.0') == '30.0'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"2.0 10.0\\n\"\n    \"3 3 0 0\\n\"\n    \"2001 1000 100\\n\"\n    \"1001 10000 200\\n\"\n    \"100 0 0\\n\") == \"20\"\nassert solution(\n    \"2.0 10.0\\n\"\n    \"3 3 0 0\\n\"\n    \"2002 1000 100\\n\"\n    \"1001 10000 200\\n\"\n    \"100 0 0\\n\") == \"20\"\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(r\"\"\"\n\n\"\"\") == \"20\"\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\n''') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"20\"\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1.0 10.0\") == \"20\"\nassert solution(\"2.0 10.0\") == \"20\"\nassert solution(\"2.0 1.0\") == \"20.0\"\nassert solution(\"2.0 2.0\") == \"20.0\"\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\n''') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2.0 10.0\") == \"20\"\n\n\"\"\"\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '4'\nassert solution('0 2 3 4 5 6') == '4'\nassert solution('0 1 3 4 5 6') == '4'\nassert solution('1 6 5 4 2 1') == '4'\nassert solution('2 6 5 3 2 1') == '4'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '4'\nassert solution('2 2 2 2') == '0'\n\"\"\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '4'\nassert solution('''5\n0 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n''') == '3'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == '4'\nassert solution('6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == '2'\nassert solution('3\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == '1'\nassert solution('7\\n0 2 3 4 5 6 7\\n0 1 3 4 5 6 7\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n3 2 1 2 3 4 5\\n4 2 1 2 3 4 5 6\\n5 2 1 2 3 4 5 6 7\\n6 2 1 2 3 4 5 6 7\\n1 1 2 3 4 5 6 7\\n') == '1'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3 1\") == \"3\"\nassert solution(\"3 2 3 1\") == \"3\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == '4'\nassert solution('7\\n0 2 3 4 5 6 7\\n0 1 3 4 5 6 7\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6 7\\n2 1 2 3 4 5 7\\n') == '2'"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == \"4\"\nassert solution('8\\n1 2 3 4 5 6 7 8\\n1 5 2 4 3 6 7 8\\n1 1 2 3 4 5 6 7\\n2 1 2 4 3 6 7 8\\n1 1 2 3 5 6 7 8\\n2 1 2 4 3 5 6 7\\n1 2 1 3 5 6 7 8\\n2 1 2 4 3 6 7 8\\n1 3 1 4 5 6 7 8\\n2 1 2 4 3 5 6 7\\n1 1 2 3 4 5 6 7\\n2 1 2 3 4 5 6 8\\n') == \"3\"\nassert solution('6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == \"0\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5\n0 2 3 4 5\n0 1 3 4 5\n1 6 5 4 2\n2 6 5 3 2\n1 1 2 3 4\n2 1 2 3 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n100\n1 2 3 4 5 6 7 8 9 10\n1 1 2 3 4 5 6 7 8 9 10\n2 1 2 3 4 5 6 7 8 9 10\n3 1 1 2 3 4 5 6 7 8 9 10\n4 1 1 1 2 3 4 5 6 7 8 9 10\n5 1 1 1 1 2 3 4 5 6 7 8 9 10\n6 1 1 1 1 1 2 3 4 5 6 7 8 9 10\n7 1 1 1 1 1 1 2 3 4 5 6 7 8 9 10\n8 1 1 1 1 1 1 1 1 2 3 4 5 6 7 8 9 10\n9 1 1 1 1 1 1 1 1 1 1 2 3 4 5 6 7 8 9 10\n10 1 1 1 1 1 1 1 1 1 1 1 1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"10\"\nassert solution(\"\"\"\n10\n0 2 3 4 5 6 7 8 9 10\n0 1 3 4 5 6 7 8 9 10\n1 6 5 4 2 1 2 3 4 5\n2 6 5 3 2 1 1 6 4 5\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 5 4 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1\n1 1 2 3 4 6 5 4 2 1\n2 1 2 3 4 5 6 3 2 1"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '4'\nassert solution('0 2 3 4 5 6') == '4'\nassert solution('0 1 3 4 5 6') == '5'\nassert solution('1 6 5 4 2 1') == '3'\nassert solution('2 6 5 3 2 1') == '4'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '4'\nassert solution('0 2 3 4 5 6') == '4'\nassert solution('0 1 3 4 5 6') == '4'\nassert solution('2 6 5 4 2 1') == '4'\nassert solution('1 1 2 3 4 6') == '3'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7\n''') == '4'\nassert solution('''4\n5\n3 5 5 4\n4 5 4 3\n5 5 2 4\n1 1\n''') == '5'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1\\n1\\n1') == '1'\nassert solution('2\\n1 2\\n1 2') == '2'\nassert solution('10\\n5 5 6 7 5 5 6 7 5 5 6 7') == '10'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '4'\nassert solution('5') == '5'\nassert solution('100') == '100'\nassert solution('1234567890') == '123456789'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\\n') == '4'\nassert solution('6\\n2 4\\n5 2 4 6 1\\n3 4 6 5 7\\n1 1\\n3 4 6 5 7\\n') == '13'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7') == '4'\n\"\"\"\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n') == '3', \"Just testing\"\nassert solution('5\\n1 2 3 4 5\\n3 3 4 6 5\\n2 4 5 6 7\\n4 5 6 7 8\\n5 6 7 8 9') == '9', \"Just testing\"\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == \"4\"\nassert solution(\"5\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\\n5 5 6 7\") == \"8\"\nassert solution(\"10\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\\n5 5 6 7\\n6 6 7 8\\n7 7 8 9\\n8 8 9 10\\n9 9 10 11\\n10 10 11 12\") == \"12\"\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"6\"\nassert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"5\"\nassert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"4\"\nassert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"3\"\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\nassert solution('10\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\\n3.1 4.2\\n3.1 3.1\\n4.2 5.1\\n3.1 4.2\\n4.2 5.1\\n5.1 5.1\\n') == '6'\nassert solution('30\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\\n3.1 4.2\\n3.1 3.1\\n4.2 5.1\\n3.1 4.2\\n4.2 5.1\\n5.1 5.1\\n') == '6'\nassert solution('50\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\\n3.1 4.2\\n3.1 3.1\\n4.2 5.1\\n3.1 4.2\\n4.2 5.1\\n5.1 5.1\\n') == '6'\nassert solution('100\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\\n3.1 4.2\\n3.1 3.1\\n4.2 5.1\\n3.1 4.2\\n4.2 5.1\\n5.1 5.1\\n') == '6'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1.0 1.0\n3.1 1.0\n1.0 3.1\n''') == '6'\n\nassert solution('''\n3\n1.0 1.0\n3.1 1.0\n1.0 3.1\n''') == '4'\n\nassert solution('''\n8\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n1.0 5.1\n3.1 5.1\n5.1 3.1\n3.1 5.1\n''') == '5'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '6', \"You are wrong!\"\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n3.1 3.1\\n1.0 3.1') == '6'\nassert solution('100\\n1.0 3.1\\n3.1 3.1\\n3.1 3.1') == '5'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"6\"\nassert solution(\"3.1 1.0\") == \"4\"\nassert solution(\"1.0 3.1\") == \"4\"\nassert solution(\"3.1 3.1\") == \"5\"\nassert solution(\"4.2 3.1\") == \"5\"\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '6'\nprint(solution())"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n1.0 1.0\\n3.1 1.0') == '6'\nassert solution('3\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1') == '5'\nassert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '7'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n2') == '5'\nassert solution('3\\n3\\n3') == '7'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n2\n2\n''') == '5'\nassert solution('''\n3\n1\n1\n''') == '7'\nassert solution('''\n3\n1\n2\n''') == '4'\n'''\n\nimport sys"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n2\n2\n2\n2\n2\n''') == '5'\n\nassert solution('''\n4\n1\n2\n2\n2\n''') == '4'\n\nassert solution('''\n3\n2\n2\n''') == '3'"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n2\n2\n''') == '1'\nassert solution('''\n1\n1\n2\n''') == '5'\nassert solution('''\n3\n1\n1\n2\n''') == '2'\nassert solution('''\n2\n1\n2\n''') == '1'\nassert solution('''\n3\n1\n2\n''') == '5'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n1') == '1'\nassert solution('2\\n2\\n1') == '1'\nassert solution('3\\n2\\n1') == '2'\nassert solution('4\\n2\\n1') == '2'\nassert solution('5\\n2\\n1') == '1'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n2\\n2\\n2') == '5'\nassert solution('3\\n2\\n2\\n1') == '7'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n2\n2\n''') == '1'\nassert solution('''\n1\n2\n2\n''') == '2'\nassert solution('''\n2\n2\n2\n''') == '2'\nassert solution('''\n3\n2\n2\n''') == '3'\nassert solution('''\n5\n1\n2\n2\n2\n''') == '5'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '4'\nassert solution('2') == '3'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n2\n2\n2\n2\n2\n2''') == '7'\n\nassert solution('''2\n2\n2\n2\n2\n2\n2''') == '5'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n2\n2\n2\n\"\"\") == \"5\"\n\nassert solution(\"\"\"3\n2\n2\n1\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '1 1'\nassert solution('1 1') == '1 1'\nassert solution('4 4 1 1') == '0 1'\nassert solution('2 9') == '1 1'\nassert solution('9 8') == '2 0'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3\\n2 2 2 1') == '1 1'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4\n2 2 2 1\n\"\"\") == \"1 1\"\n\nassert solution(\"\"\"\n4\n2 2 1\n\"\"\") == \"0 1\"\n\nassert solution(\"\"\"\n5\n2 3 2 1\n\"\"\") == \"0 0\"\n\nassert solution(\"\"\"\n5\n2 3 1\n\"\"\") == \"4 4\"\n\nassert solution(\"\"\"\n5\n2 3 1\n\"\"\") == \"7 7\"\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 2 1') == '1 1'\nassert solution('2 2 2 1') == '2 2'\nassert solution('2 2 2 1') == '1 2'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3') == '1 1'\nassert solution('1 2 3') == '2 2'\nassert solution('1 4 5 6 7 8 9 10 11') == '4 5'\n\n\"\"\"\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 3\n2 2 2 1\n''') == '1 1'"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0 0\"\nassert solution(\"2 3\") == \"1 1\"\nassert solution(\"2 3 4\") == \"1 1\"\nassert solution(\"2 3 4 5\") == \"1 1\"\nassert solution(\"3 3\") == \"1 1\"\n\n--------------------------------------------------------------\nTask 1\n\n\u0417\u0430\u0434\u0430\u0447\u0430 3. \u041f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0438\u043a\u0442\u043e, \u0435\u0441\u043b\u0438 \u0432 \u043d\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a.\n\n\u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0447\u0435\u043c\u043f\u0438\u043e\u043d \u0438\u0433\u0440\u043e\u043a\u043e\u043c \u043a\u0430\u043a \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u0438\u0437 \u0442\u0440\u0451\u0445 \u0438\u043b\u0438 \u043f\u044f\u0442\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0434\u0440\u0443\u0436\u0431\u044b. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439.\n\n\u0412\u0445\u043e\u0434\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u0432\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 $n$ \u0438 $m$. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0434\u0440\u0443\u0436\u0431\u044b \u0432 \u0442\u0440\u0451\u043c \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0432\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 $A$ \u0438 $B$, \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0432 \u0442\u0440\u0451\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u043e\u0438\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a.\n\n\u0412\u044b\u0445\u043e\u0434\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e:\n$1 \\leq N, N \\leq 10^9$, \u0437\u0430\u0442\u0435\u043c \u043e\u0434\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e:\n$1 \\leq t_i \\leq 10^9$, \u0433\u0434\u0435 i \\in[1,N] \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0430\u0431\u0440\u0430\u043b \u0432\u0441\u0435 \u0438\u0433\u0440\u043e\u043a\u0438, \u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c i. \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u043e\u0438\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a.\n\nSample Input 1:\n4 2\n1\n2\n3\n4\nSample Output 1:\n3\n2\nSample Input 2:\n5 3\n1\n2\n1\n2\n2\n3\nSample Output 2:\n1\n4\nSample Input 3:\n3 2\n1\n2\n3\nSample Output 3:\n2\n2\nSample Input 4:\n5 4\n1\n2\n1\n2\n3\nSample Output 4:\n2\n2\n2\nSample Input 5:\n1 10\n1\nSample Output 5:\n0\nSample Input 6:\n10 10\n2\n3\n4\n5\n6\n7\n8\n9\n10\nSample Output 6:\n6\n3\n4\n5\n6\n7\n8\n9\n10\nSample Input 7:\n1 9\n1\nSample Output 7:\n0\nSample Input 8:\n1 9\n1\nSample Output 8:\n0\nSample Input 9:\n1 8\n1\nSample Output 9:\n0\nSample Input 10:\n10 1\n1\nSample Output 10:\n0\nSample Input 11:\n10 1\n1\nSample Output 11:\n0\nSample Input 12:\n4 10\n1\n3\n2\n4\nSample Output 12:\n1\n0\n0\nSample Input 13:\n5 10\n1\n3\n5\n1\n2\nSample Output 13:\n0\n0\n0\n0\nSample Input 14:\n4 2\n1\n2\n3\n4\nSample Output 14:\n3\n0\n0\n0\nSample Input 15:\n3 3\n1\n2\n3\nSample Output 15:\n1\n1\n1\nSample Input 16:\n5 5\n1\n2\n3\n4\n5\nSample Output 16:\n1\n1\n1\n0\nSample Input 17:\n6 6\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '1 2'\nassert solution('1 1') == '1 1'\nassert solution('2 2 2 1') == '2 3'"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 3\n2 2 2 1\n''') == '1 1'\n\nassert solution('''\n1 2\n2 2 3\n3 2 1\n''') == '2 2'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 3\n2 2 2 1\n''') == '1 1'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '12'\nassert solution('3') == '20'\nassert solution('4') == '12'\nassert solution('5') == '10'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '8'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '10'\n\nassert solution('1') == '1'\n\nassert solution('1') == '1'\n\nassert solution('10') == '2'\n\nassert solution('10') == '2'"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '10\\n'\nassert solution('2\\n') == '20\\n'\nassert solution('3\\n') == '19\\n'\nassert solution('4\\n') == '18\\n'\nassert solution('5\\n') == '15\\n'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"10\"\nassert solution(\"2\") == \"20\"\nassert solution(\"3\") == \"100\"\nassert solution(\"4\") == \"200\"\nassert solution(\"5\") == \"300\"\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\n\nassert solution('6') == '3'\n\nassert solution('10') == '5'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '9'\nassert solution('3') == '8'\nassert solution('4') == '9'\nassert solution('5') == '9'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"10\"\nassert solution(\"2\") == \"10\"\nassert solution(\"3\") == \"15\"\nassert solution(\"4\") == \"18\"\nassert solution(\"5\") == \"20\"\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '10'\nassert solution('4') == '10'\nassert solution('7') == '9'\nassert solution('100') == '13'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 2\n1000 1 0\n1 1000 1\n\"\"\") == \"0.001\", \"Should return 0.001\"\nassert solution(\"\"\"\n1 2\n10000 1 0\n1 10000 1\n\"\"\") == \"0.000\", \"Should return 0.000\"\nassert solution(\"\"\"\n2 1\n10000 1 0\n1 10000 1\n\"\"\") == \"0.000\", \"Should return 0.000\"\nassert solution(\"\"\"\n1 2\n10000 1 0\n1 10000 1\n\"\"\") == \"0.000\", \"Should return 0.000\""
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n5 1 0\\n1 2 3\\n4 0 2\\n5 1 3\\n3 3 3\\n4 1 1') == '0.037'\nassert solution('3\\n5 2 0\\n3 2 1\\n1 1 2\\n4 0 3\\n3 1 2\\n4 3 1\\n5 1 3\\n3 2 3') == '0.027'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '0.001'\nassert solution('1 2.1') == '0.002'\nassert solution('1 2.11') == '0.003'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\n1000 1 0\n1 1000 1\n''') == '0.001'\n'''\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 2\n1000 1 0\n1 1000 1\n''') == '0.00100'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '0.001'\nassert solution('1 1') == '1.0'\nassert solution('1 1 1') == '1.0'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2\n1000 1 0\n1 1000 1\n''') == '0.001'\nassert solution('''\n5 3\n1 1 2 5\n2 4 3\n1 2 5\n4 3 1\n3 1 1\n''') == '0.346'\nassert solution('''\n2 3\n1 1\n2 1\n1 3\n''') == '0.101'\n\n'''"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '0.001'\nassert solution('1000000 1 0') == '1.0000'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == \"0.001\"\nassert solution('1 2') == \"0.002\"\nassert solution('1 2') == \"0.003\"\nassert solution('1 2') == \"0.004\"\nassert solution('1 2') == \"0.005\""
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"0.001\", solution\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 3 2 10000\n1 2\n2 3\n3 1\"\"\") == \"0\"\nassert solution(\"\"\"3 3 3 10000\n1 2\n2 3\n3 1\"\"\") == \"1\"\nassert solution(\"\"\"3 3 1 10000\n1 2\n2 3\n3 1\"\"\") == \"0\"\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2 10000\\n1 2\\n2 3\\n3 1\\n\") == \"0\""
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4 3 10000\") == \"1\"\nassert solution(\"3 4 2 10000\") == \"1\"\nassert solution(\"3 4 1 10001\") == \"1\"\nassert solution(\"3 4 1 10001\") == \"1\"\nassert solution(\"3 4 1 10001\") == \"0\"\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 2 10000\\n1 2\\n2 3') == '0'\nassert solution('5 5 3 10000\\n1 2\\n2 3\\n3 1') == '3'\nassert solution('5 5 3 10000\\n1 2\\n2 3\\n3 1') == '1'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n2 3\") == \"1\"\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 3 2 10000\n1 2\n2 3\n3 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 3 2 5\n1 2\n2 3\n3 1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2 10000\\n1 2\\n2 3\\n3 1\") == \"0\"\nassert solution(\"10 2 1 3\\n4 5\\n6 1\\n7 1\\n8 1\\n9 1\\n2 3\\n3 4\\n5 5\\n6 6\\n7 6\\n8 6\\n9 6\") == \"14\"\nassert solution(\"1 4\\n2 4\\n3 4\\n4 4\") == \"3\"\nassert solution(\"1 5\\n6 5\\n7 5\\n8 5\\n9 5\") == \"16\"\nassert solution(\"5 7\\n6 6\\n7 7\\n8 7\\n9 7\") == \"17\"\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 2 10000') == '0'\nassert solution('1 2') == '0'\nassert solution('2 3') == '1'\n\nstdin = input()\nfor line in range(int(input())):\n    print(solution(stdin))"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 2 10000\\n1 2\\n2 3\\n3 1\\n') == '0'\nassert solution('4 4 2 50000\\n1 2\\n1 3\\n2 4\\n3 4\\n3 1\\n3 2\\n3 4\\n4 4\\n4 2\\n') == '0'\nassert solution('5 5 2 70000\\n1 2\\n3 4\\n2 4\\n3 4\\n4 4\\n4 2\\n4 3\\n3 4\\n2 4\\n') == '1'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '0'\nassert solution('1 2 1') == '1'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0') == '26'\nassert solution('4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\\n3 4 4 4') == '45'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == \"26\"\nassert solution('3') == \"0\""
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\\n') == '26'\nprint('PASSED')\n\"\"\""
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0 1 1 1\") == \"2\"\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0\n''') == '26'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\") == \"26\"\nassert solution(\"4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\") == \"51\""
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0\n''') == '26'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0') == '26'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0\n''') == '26'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0') == '26'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '0.5'\nassert solution('3 2') == '0.5 0.5 0.5'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == '0.0'\nassert solution(\"1\") == '0.5'\nassert solution(\"2\") == '0.5'\nassert solution(\"20\") == '0.33333333333333333'\nassert solution(\"20 20 20 40\") == '0.33333333333333333'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2\n20 20 20 40\n.X.\nT.T\nSample Output:\n0.333333333\n0.666666667\n''') == '0.6000000000000001'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(r\"\"\"\n3 2\n20 20 20 40\nX.X\nT.T\n\"\"\") == r\"\"\"\n0.333333333\n0.666666667\n\"\"\", 'You should return the answer as a string, not an integer.'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n10 3\n20 20 20 40\nT.T\nX.X\n\"\"\") == \"0.666666667\\n0.33333333\\n\"\"\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2\n20 20 20 40\n.X.\nT.T\n''') == '0.83333333333333333'\nassert solution('''3 2\n20 20 20 40\n.X.\nT.T\n''') == '0.666666667'\nprint('Congratulations, has the function solved the puzzle!')\n\nfor line in stdin:\n    line = line.rstrip()\n    line = line.split()\n    print(solution(line))\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n20 20 20 40\n.X.\n.T\n''') == '0.41176470588235294'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10\\n20 20 20\\nX.X\\nT.T') == '0.3333333333333333'\nprint(solution('''1\n1\n1\n1\n1'''))\nprint(solution('''1\n1\n1\n1\n1'''))\nprint(solution('''1\n2\n1\n1\n1'''))\nprint(solution('''1\n2\n1\n1\n1'''))\nprint(solution('''1\n3\n1\n1\n1'''))\nprint(solution('''1\n4\n1\n1\n1'''))\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n20 20 20 40\\nT.T\") == \"0.33333333333\\n0.666666667\"\n\n\"\"\"\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '4 1\\n'\n    '20 20 20 40\\n'\n    'X.X\\n'\n    'T.T\\n'\n) == '0.333333333 0.666666667 0.333333333 0.666666667 0.333333333'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1.0\\n') == '1.0'\nassert solution('0.00000001\\n') == '0.99999999'\nassert solution('-1.0\\n') == '0.99999999'\nassert solution('0.0000000001\\n') == '0.99999999'\nassert solution('0.0000001\\n') == '0.99999999'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0 0 0 0') == '0.0'\nassert solution('1 1 1 1') == '0.25'\nassert solution('2 2 2 2') == '0.125'\nassert solution('3 3 3 3') == '0.0625'\nassert solution('4 4 4 4') == '0.03125'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 0 0 0') == '0.0'\nassert solution('45 45 0 0') == '0.75'\nassert solution('85 0 0 0') == '0.0'\nassert solution('85 45 0 0') == '0.75'\nassert solution('0 0 45 0') == '0.0'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\nassert solution(\"1 1 0 0\") == \"0.0\"\nassert solution(\"1.00000000000009 1.00000000000009 0 0\") == \"1.00000000000009\"\nassert solution(\"4.00000000000004 4.00000000000004 0 0\") == \"1.0\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\nassert solution(\"56 56 0 0\") == \"0.75\"\nassert solution(\"45 0 0 45\") == \"0.75\"\nassert solution(\"56 0 0 56\") == \"0.75\"\nassert solution(\"45 45 45 45\") == \"0.75\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 7 0 0') == '0.75'\nassert solution('5 7 0 0.1') == '0.75'\nassert solution('1.00001 1.00001 1.00001 1.00001') == '0.99999'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('45 45 0 0') == '0.75', \"Should be 0.75\"\nassert solution('1 1 0 0') == '1.0', \"Should be 1.0\"\nassert solution('15 15 0 0') == '0.25', \"Should be 0.25\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('45 45 0 0') == '0.75'\nassert solution('90 90 0 0') == '0.75'\nassert solution('180 180 0 0') == '0.75'\nassert solution('270 270 0 0') == '0.75'\nassert solution('360 360 0 0') == '0.75'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('45 45 0 0') == '0.75'\nassert solution('0.001 0.000001 0.00000001 0.1') == '0.0'\n\"\"\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''45 45 0 0''') == '0.75'\nassert solution('''0 0 0 0''') == '0.0'\nassert solution('''90 90 0 0''') == '0.0'\nassert solution('''10 10 10 10''') == '1.0'\nassert solution('''15 15 15 15''') == '1.0'\n''')"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\") == \"4\"\nassert solution(\"6 3\\n0 1 5\\n0 2 4\\n1 5 2\\n2 4 1\\n4 3 5\\n5 3 1\\n\") == \"2\"\nprint(\"All test cases passed!\")\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '4'\nassert solution('1 2\\n0 1 2') == '1'\nassert solution('5 2\\n0 1 2 3\\n0 3 4') == '2'\nassert solution('5 2\\n0 1 2 3\\n0 3 4\\n1 2 11') == '4'\nassert solution('1\\n2\\n0 1 2\\n0 3 4') == '2'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9') == '4'\nassert solution('5 5\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\\n4 0 2\\n4 1 4') == '6'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\\n\") == \"4\"\nassert solution(\"3 2\\n1 2\\n2 3\\n\") == \"0\"\nassert solution(\"1 1\\n1 1\\n\") == \"0\""
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '4'\nassert solution('6 4') == '3'\nassert solution('7 3') == '7'\nassert solution('10 2') == '9'\nassert solution('10 1') == '10'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'\n\nassert solution('''\n10\n0 2 2\n0 4 3\n1 2 1\n1 3 5\n2 3 3\n2 4 8\n3 4 7\n3 6 8\n4 7 2\n4 8 5\n5 7 6\n6 8 4\n7 8 9\n8 9 7\n9 5 6\n10 5 8\n''') == '3'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\") == \"4\"\nassert solution(\"5 8\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\") == \"18\"\nassert solution(\"5 100\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\") == \"0\"\nassert solution(\"1 2\\n0 1 2\\n0 1 2\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\") == \"1\"\nassert solution(\"5 100\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\\n3 5 6\\n5 2 6\\n5 3 6\\n5 4 6\\n5 5 6\\n5 6 6\\n5 7 6\\n5 8 6\\n5 9 6\\n5 10 6\\n5 11 6\") == \"11\"\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 6\") == \"4\"\nassert solution(\"10 3\") == \"9\"\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"5 6\\n\"\n    \"0 1 2\\n\"\n    \"0 3 8\\n\"\n    \"1 2 11\\n\"\n    \"2 3 5\\n\"\n    \"2 4 2\\n\"\n    \"4 3 9\\n\"\n) == \"4\"\nassert solution(\n    \"5 2\\n\"\n    \"0 1\\n\"\n    \"0 3\\n\"\n) == \"3\"\nassert solution(\n    \"1 4\\n\"\n    \"0 1\\n\"\n    \"0 2\\n\"\n) == \"4\"\nassert solution(\n    \"3 5\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n) == \"4\"\nassert solution(\n    \"6 6\\n\"\n    \"1 2\\n\"\n    \"1 2\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"3 4\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n10 10 0 5\\n') == '100'\nassert solution('3\\n20 10 0 5\\n') == '120'\nassert solution('100\\n10 10 0 5\\n') == '100'\nassert solution('2\\n20 10 0 5\\n') == '100'\nassert solution('100\\n10 10 0 5\\n') == '100'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 1 1 2 3\n3\n3 5 3 4 3\n2\n3 1 3 2 4\n3\n1 2 2 3 3\n3\n1 1 1 2 3\n3\n''') == \"30\"\nassert solution('''\n2\n1 1 1 2\n2\n1 2 2\n3\n''') == \"2\"\nassert solution('''\n5\n1 1 1 2 3\n3\n3 5 3 4 3\n2\n3 1 3 2 4\n3\n1 2 2 3 3\n3\n1 1 1 2 3\n3\n''') == \"9\"\n'''\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '100'\nassert solution('3') == '666'\nassert solution('1 1 0 5') == '999'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n10 0 5\n2\n1 1 1 1 1\nSample Input:\n2\n2\n2 1 1 1\nSample Output:\n3\n''') == '3'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n10 10 0 5\\n') == '100'\nassert solution('2\\n10 20 0 5\\n') == '15'\nassert solution('3\\n10 20 0 5\\n') == '10'\nassert solution('4\\n10 20 0 5\\n') == '0'\nassert solution('5\\n10 20 0 5\\n') == '20'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"100\""
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '100'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n10 10 0 5\nSample Output:\n100''') == '100'\nassert solution('''2\n10 10 0 5\n10 20 0 5\nSample Output:\n80''') == '80'\nassert solution('''1\n10 10 0 5\nSample Output:\n100''') == '100'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"100\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n10 10 0 5') == '100'\nassert solution('1\\n10 10 0 10') == '110'\nassert solution('1\\n1000 1000 1000 1000 1000') == '0'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n0 0 2 2\n1 1 3 4\n5 7 6 8\n6 5 5 7\n''') == '1'\nassert solution('''\n7\n1 1 5 6 6 9 9\n1 1 5 6 6 7 8\n1 1 5 6 6 7 9\n1 1 5 6 6 7 8\n1 1 5 6 6 7 8\n1 1 5 6 6 7 8\n1 1 5 6 6 7 8\n''') == '0'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"7\") == \"0\"\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1 1 3 4') == '1'\nassert solution('2\\n1 1 3 4\\n5 7 6 8') == '0'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n''') == '1'\n\nassert solution('''\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n''') == '0'\n\nassert solution('''\n5\n2 8 4 6 5\n5 6 3 7 8\n6 7 5 6 3\n1 4 5 2 7\n''') == '1'\n\nassert solution('''\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n''') == '1'\n\nassert solution('''\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n''') == '0'"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    3\n    0 0 2 2\n    1 1 3 4\n    5 7 6 8\n    ''') == '1'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n2 3 4\n\"\"\") == '1'\nassert solution(\"\"\"\n4\n2 3 6 5\n5 8 7 3\n\"\"\") == '0'\nassert solution(\"\"\"\n2\n3 4 5\n3 4 6\n\"\"\") == '0'\nassert solution(\"\"\"\n4\n3 2 5 2\n4 2 5 5\n1 2 5 5\n1 5 5 4\n\"\"\") == '1'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8\\n') == '1'\nprint('OK')\n\n----\nhttps://github.com/justmarkham/interview_prep/blob/master/src/algo/interview/rectangle_intersection.py\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\nSample Output:\n1\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\") == \"17\"\nassert solution(\"8 8\\n5 5\\n-2 -2 -2 -2 -2\\n9 9 9 9 9\\nS S S S S\\n-1 1 1 1 1\") == \"26\"\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '17'\nassert solution('''\n3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '1'"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"17\""
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '17'\nprint('All tests passed!')"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\nE E E E') == '17'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '17'\nassert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '10'\nassert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '18'\nassert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '0'\nassert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '9'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\\n') == '17'\nassert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\\n') == '19'\nassert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\\n') == '23'\nassert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\\n') == '36'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5') == '17'"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n'''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '17'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == '17'\nassert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == '17'\nassert solution('''5 4\nE E E E E\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2 2\n-2 2 2 2"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\nassert solution('1\\n1 1') == 'impossible'\nassert solution('2\\n2 1') == 'impossible'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n\") == \"impossible\"\nassert solution(\"5 1 2 3 4 5\\n\") == \"1 4 3 5 2\"\nassert solution(\"2 5 3 2 4 4 5 1\\n\") == \"2 5 3 4 5 4 1\"\n\"\"\""
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\n\"\"\""
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n3 2 3 1 1') == \"1 4 3 5 2\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '1 4 3 5 2'\nassert solution('3') == '1 4 3 5 2'\nassert solution('4') == '1 4 3 5 2'\nassert solution('5') == '1 4 3 5 2'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1 4 3 5 2'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == \"1 4 3 5 2\""
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n3 4\") == \"1 4 3\"\nassert solution(\"5\\n3 2 1\") == \"impossible\"\nassert solution(\"5\\n1 1 1\") == \"1 3 5\""
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"impossible\"\nassert solution(\"1\") == \"impossible\"\nassert solution(\"1 2 1 3\") == \"1 4 3 2\"\nassert solution(\"3 2 1 3\") == \"3 4 1 2\"\nassert solution(\"3 2 4 3\") == \"3 4 1 2\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n3 2 3 1 1\n''') == '1 4 3 5 2'\n\nassert solution('''4\n3 2 3 1 1\n''') == 'impossible'\n\nassert solution('''2\n2 2 1\n''') == '1 2 2'\n\nassert solution('''8\n3 1 2 3 5 4 6 7\n''') == '1 2 3 5 4 6 7'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 0 1\n1 4\n''') == '0.76772047', \"Wrong answer\"\nassert solution('''\n3 0 1\n0 4\n''') == '0.66152541', \"Wrong answer\"\nassert solution('''\n4 1 1\n0 0\n''') == '0.69230769', \"Wrong answer\"\nassert solution('''\n5 0 2\n0 0\n''') == '0.75', \"Wrong answer\"\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 0 1\\n1 4\\n') == '0.76772047'\nassert solution('1\\n3 1\\n') == '0.5'\nassert solution('2\\n3 3\\n') == '1.0'\nassert solution('5\\n10 5\\n') == '0.25'\nassert solution('1\\n1\\n') == '1.0'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 0 1\n1 4\n\"\"\") == \"0.76772047\"\nassert solution(\"\"\"\n5 0 5\n-5 3\n\"\"\") == \"0.0\"\nassert solution(\"\"\"\n5 0 5\n0 -5\n\"\"\") == \"0.0\"\nassert solution(\"\"\"\n10 0 5\n0 -5\n\"\"\") == \"0.01448428\"\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0.5', 'Wrong answer'\nassert solution('2') == '0.333333333333333333', 'Wrong answer'\nassert solution('3') == '0.5', 'Wrong answer'\nassert solution('4') == '0.16666666666666666', 'Wrong answer'\nassert solution('5') == '0.16666666666666666', 'Wrong answer'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0.76772047'\nassert solution('1') == '0.76772047'"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1 2\\n2 1\\n') == '0.76772047'\nassert solution('100\\n30 30\\n50 50\\n') == '0.10685431'\nassert solution('1000\\n5 5\\n100 100\\n') == '0.00000001'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3 0 1\\n1 4') == '0.76772047'\nassert solution('4\\n1 2 1\\n2 2') == '0.0'\n\n---Input---\n3\n2 0 1\n1 5\n4 2\n2 1 1\n4 2\n2 4\nSample Output:\n0.0\n\"\"\"\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n3 0 1\\n1 4\\n') == '0.76772047'\nassert solution('1\\n1 0 1\\n1 4\\n') == '0.3439787'\nassert solution('3\\n4 0 1\\n1 4\\n') == '0.9731058'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 0 1\\n1 4') == '0.76772047'\nassert solution('4 3 2\\n-2 -2 -2\\n-1 2 2\\n2 3 1\\n2 1 2\\n-2 2 1\\n1 1 2\\n1 1 2\\n2 1 2\\n') == '0.9285714285714286'\nassert solution('3 1\\n-1 1\\n1 1\\n1 1\\n') == '0.9090909090909091'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2 3\\n2 0 1\\n1 4') == '0.76772047'\nassert solution('4\\n1 1\\n4 4\\n1 2 3\\n3 1 4') == '0.35943895499999996'\nassert solution('1\\n2 3\\n2 2 3\\n1 4') == '0.3333333333333333'\nassert solution('1\\n2 3\\n2 2 3\\n1 4') == '0.2689414213'"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nlohi\n''') == 'lohi'\nassert solution('''\nteams\n''') == 'teams'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    hello teams\n''') == '27'\nassert solution('''\n    hel\n    el\n    els\n''') == '1'\nassert solution('''\n    hel\n    l\n    els\n''') == '3'\nassert solution('''\n    hel\n    l\n    els\n''') == '2'\nassert solution('''\n    hel\n    l\n    els\n''') == '1'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('hello teams') == '27'\nassert solution('bababa') == '3'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"27\"\n\nstdin = \"\"\"\nheels\ndog\ndog\n\"\"\""
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"hello teams\") == \"27\"\nassert solution(\"hello team\") == \"3\"\nassert solution(\"teams\") == \"1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('hello teams') == '27'\nassert solution('bbdddbbbb') == 'bbbbbbbbbb'\nassert solution('babababab') == 'ababababab'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"hello teams\") == \"27\"\nassert solution(\"hello z\") == \"6\"\nassert solution(\"\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"./test_files/day02_test.in\") == \"1\"\nassert solution(\"./test_files/day02_test2.in\") == \"3\"\nassert solution(\"./test_files/day02_test3.in\") == \"7\"\nassert solution(\"./test_files/day02_test4.in\") == \"8\"\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nhelmp\nteamp\nteamp\n''') == '27'\n\nassert solution('''\nabd\nbbbb\nbab\n''') == '2'\n\nassert solution('''\nkajsdf\naslkajs\n''') == '-1'\n\nprint(solution('''\nkajsdf\naslkajs\n'''))"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"hello teams\") == \"27\"\nassert solution(\"helloteams\") == \"15\""
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n5 4\n6 7\n9 2\n4 7 2\n6 3 1\n12 6 3\n''') == '2'\n\nprint(solution(input()))"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '''\n    6 3\n    1 8\n    5 4\n    7 7\n    9 2\n    16 6\n    17 10\n    4 7 2\n    6 3 1\n    12 6 3\n    '''\n) == '2'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n''') == \"2\"\n\nassert solution('''\n100 5\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"1\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"3 4\") == \"4\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"2\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 3') == '2'\nassert solution('1 8') == '2'\nassert solution('5 4') == '1'\nassert solution('7 7') == '1'\nassert solution('9 2') == '1'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '2'\nassert solution('3 5') == '3'\nassert solution('5 5') == '2'\nassert solution('10 3') == '4'\nassert solution('10 5') == '4'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n''') == '2'\nassert solution('''\n6 5\n1 2\n4 2\n3 2\n2 5\n5 4\n1 3\n4 3\n3 5\n5 3\n1 6\n4 6\n''') == '1'\nassert solution('''\n6 6\n1 2\n4 2\n3 2\n2 5\n5 4\n1 3\n4 3\n3 5\n5 3\n1 6\n4 6\n''') == '0'\nassert solution('''\n6 5\n1 2\n4 2\n3 2\n2 5\n5 4\n1 3\n4 3\n3 5\n5 3\n1 6\n4 6\n''') == '0'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3\\n4') == \"2\"\nassert solution('2\\n3\\n4\\n5') == \"4\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"0\"\nassert solution(\"10 6\") == \"6\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n5\\n') == '26'\n\"\"\""
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"26\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2\na\nb\nc\nd\ne\ncad\n''') == '26'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == '2'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '6'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '5'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 3\na\nb\nc\nd\ne\ncad\n''') == \"26\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '26'\nassert solution('6 5') == '41'\nassert solution('10 5') == '45'\nassert solution('15 5') == '50'\nassert solution('100 5') == '95'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n5\na\nb\nc\nd\ne\ncad\n''') == '26'\n\nassert solution('''\n1\n2\nab\nac\nad\n''') == '18'\n\nassert solution('''\n1\n2\nab\nac\nad\n''') == '19'\n\nassert solution('''\n1\n3\nab\nac\nad\n''') == '26'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '26'\nassert solution('5 2') == '5'\nassert solution('10 20 30 40 50 60 70 80 90 100') == '49'\nassert solution('9 1') == '2'\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'\nassert solution('3 2 5 1 3') == 'impossible'\nassert solution('5 10 100') == '5 6 1 9 2'\nassert solution('5 1 3 2') == 'impossible'\nassert solution('5 10 3') == '3 5 2 1 4'\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 10 30\") == \"3 5 2 1 4\"\nassert solution(\"10 5 3 1 3\") == \"3 5 2 1 4\"\n\"\"\"\n\nn, m, k = list(map(int, input().split()))\nscores = list(map(int, input().split()))\n\nscores.sort(reverse=True)"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 10 30\n10 5 3 1 3\n''') == '3 5 2 1 4'\nassert solution('''5 10 30\n1 5 3 1 3\n''') == '1 5 2 3 3 4'\nassert solution('''5 10 30\n2 2 2 1 3\n''') == '1 2 2 3 3 4'\nassert solution('''5 10 30\n2 2 2 1 3\n''') == 'impossible'\nassert solution('''3 3 1\n3 3 3\n1 1 1\n''') == '1 2 3 3 4'\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 10 30\\n10 5 3 1 3\\n') == '3 5 2 1 4'\nassert solution('1 2 3 4 5 6 7 8 9 10 11\\n') == '1 2 3 4 5 6 7 8 9 10 11'"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 10 30\n10 5 3 1 3''') == '3 5 2 1 4'\nassert solution('''5 10 30\n10 5 3 1 3''') == 'impossible'\nassert solution('''2 2 1''') == '1 2 1'\nassert solution('''3 2 1''') == 'impossible'\nassert solution('''8 8 5''') == '5 3 2 1 4 6 7 8'\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 10 30') == '3 5 2 1 4'\nassert solution('5 10 30') == '3 5 2 1 4'\nassert solution('2 1 2 2') == 'impossible'\nassert solution('3 4 1 3') == '3 1 2 3 4'\nassert solution('4 5 2 1 3') == '3 1 2 4 5'\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 10 30\") == \"3 5 2 1 4\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"10 20 5\") == \"10 20 5\"\n\"\"\""
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n5 10 30\n10 5 3 1 3\n'''\n) == '3 5 2 1 4'\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 10 30\") == \"3 5 2 1 4\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'\n\nassert solution('6 1 0') == '1 2 0 3'\n\nassert solution('1 3 5 1') == '3 5 1 1'\n\nassert solution('1 6 1 1 1 1') == '1 6 1 1 1'\n\nassert solution('10 2 8') == '2 5 8 10'"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1\n2 3\n2 3\n''') == '2'\nassert solution('''\n2\n1 1\n1 2\n''') == '2'\nassert solution('''\n1\n1 1\n1 2\n''') == '1'\nassert solution('''\n1\n1 1\n2 2\n''') =='shovel time!'\n''') =='shovel time!'\n''') =='shovel time!'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1\\n2 3\\n2 3') == \"2\"\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == \"2\"\nassert solution('6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == \"1\"\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7') == \"1\"\nassert solution('10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8') == \"2\"\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n1 1\n2 3\n1 3\n''') =='shovel time!'\nassert solution('''\n6\n1 2\n1 2\n1 1\n2 2\n1 3\n2 3\n''') =='shovel time!'\nassert solution('''\n5\n1 2\n1 2\n1 3\n1 4\n''') =='shovel time!'"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1\\n2 3\\n2 3') == '2'\nassert solution('3\\n1 1\\n2 2\\n2 3') == '0'\nassert solution('5\\n2 5\\n3 6\\n4 5') == '1'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5') == '2'\nassert solution('10\\n1 2\\n3 3\\n5 5\\n8 8') == '0'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1 1\n2 3\n2 3\n''') == '2'\n\nassert solution('''3\n1 1\n2 3\n2 3\n''') =='shovel time!'\n\nassert solution('''4\n2 4\n2 4\n2 4\n''') =='shovel time!'"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() =='shovel time!'"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n2 2\n''') =='shovel time!''','sample case'\n\nassert solution('''\n8\n8 1\n1 9\n7 3\n2 5\n6 2\n3 3\n4 4\n5 6\n6 7\n''') == '10', 'other case'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1\\n2 3\\n2 3') == \"2\"\nassert solution('3\\n1 1\\n2 2\\n2 3') == \"3\"\nassert solution('10\\n0 1\\n2 4\\n8 8\\n10 10\\n12 12\\n14 14\\n16 16\\n20 20\\n22 22\\n24 24') == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"shovel time!\"\nassert solution(\"2\") == \"shovel time!\"\nassert solution(\"3\") == \"shovel time!\""
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 1\n2 3\n2 3\n''') == '2'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 1\n1\n1 2''') == '3'\nassert solution('''3\n1 2 1\n1\n1 2\n1''') == '2'\nassert solution('''10\n1 2 3 4 1 2 3 1 2 1\n4\n4 4 4 4''') == '4'\nassert solution('''10\n1 2 3 4 1 2 3 1 2 1\n4\n4 4 4 4''') == '4'\nassert solution('''9\n3 2 1 4 1 2 3 1 2 3\n3\n3 3 3 3''') == '2'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 1 2') == '3'\nassert solution('3 2 3') == '1'"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n3 1 2 1') == '3'\nassert solution('3\\n1 3 2 1') == '3'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(INPUT) == OUTPUT"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2 2 2 2') == '3'\nassert solution('10\\n2 2 4 4 2 5 5 5 4') == '4'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 1\\n2 1 2\\n3 1 2\\n\") == \"3\"\nassert solution(\"4\\n1 2 1 2\\n2 1 2\\n3 1 2\\n4 1 2\\n\") == \"2\"\nassert solution(\"4\\n1 2 1 2\\n2 1 2\\n3 1 2\\n4 1 2\\n5 1 2\\n\") == \"3\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\n4\n1 2 1 2\n''') == '3'\nassert solution(\n'''\n4\n2 5 4 7\n''') == '3'\nassert solution(\n'''\n6\n1 1 1 1 1 1\n''') == '2'\nassert solution(\n'''\n9\n1 2 2 2 2 1 1 1 1\n''') == '3'\n'''\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 4 999999937''') == '79'\nprint(solution('''5 5 16302144826'''))\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == '79'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n\"\"\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 2 1\\n\"\n) == \"1\"\n\nassert solution(\n    \"4 3 5\\n\"\n) == \"3\"\n\nassert solution(\n    \"5 4 6\\n\"\n) == \"8\"\n\nassert solution(\n    \"5 6 8\\n\"\n) == \"30\"\n\nassert solution(\n    \"4 4 999999937\\n\"\n) == \"79\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4 999999937') == '79'\nassert solution('3 2 4 5 6 7') == '1190'\nprint(solution(input()))\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 2 3 1 1\") == \"0\"\nassert solution(\n    \"2 2 3 1 2\") == \"1\"\nassert solution(\n    \"2 2 3 4 1 2\") == \"1\"\nassert solution(\n    \"3 4 3 1 2 1\") == \"0\"\n\nstdin = \"\"\"\n2 2 2\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 5 2\n2\n1 1''') == '37'\nassert solution('''4 5 1\n1\n1\n1''') == '41'\nassert solution('''5 5 4\n2\n1 1\n1\n1''') == '39'\nassert solution('''5 5 4\n2\n1 1\n1\n1\n1''') == '56'\nassert solution('''10 10 10\n2\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 5 8 1 2 2 4') == '4'\nassert solution('4 3 6 2 2 4') == '2'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4 999999937') == '79'\nassert solution('5 4 999999937') == '170'\nassert solution('10 4 999999937') == '61'\nassert solution('10 6 999999937') == '29'\nassert solution('5 5 999999937') == '84'\n\"\"\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 4 999999937\n''') == '79'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n4 +zucchini +mozzarella +mushrooms -artichoke\\n') == 'zucchini'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'zucchini'\nassert solution('3') == 'zucchini'\nassert solution('100') == 'zucchini'\nassert solution('23') == 'zucchini'\nassert solution('123') == 'zucchini'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini\\nmushrooms\\nartichoke\\n'\nassert solution('''\n1\n2 +zucchini +mozzarella\n''') == 'zucchini\\nmushrooms'\nassert solution('''\n1\n2 +zucchini +mozzarella +mushrooms +artichoke\n''') == 'zucchini\\nmushrooms\\nartichoke\\n'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n+zucchini +mozzarella +mushrooms -artichoke''') == 'zucchini\\nmushrooms\\nmozzarella\\nartichoke'\nassert solution('''1\n+zucchini +mozzarella +mushrooms -artichoke''') == 'zucchini\\nmushrooms'\nassert solution('''5\n+zucchini +mozzarella +mushrooms -artichoke''') == 'zucchini'\nassert solution('''4\n+zucchini +mozzarella''') == ''\nassert solution('''4\n+zucchini +mozzarella +mushrooms -artichoke''') == 'zucchini\\nmushrooms\\nmozzarella\\nartichoke'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n-paneer +chicken +mushrooms +peppers +beef\n-tomato +carrots +peppers +beef +onion +cheese +peppers\n-olives +beef +peppers +peppers +onion +cheese +peppers\n-chicken +chicken +peppers +beef +peppers +peppers +cheese\n-chicken +peppers +cheese +cheese +peppers +peppers +beef\n-pepperoni +cheese +beef +cheese +onion +peppers +onion +beef\n-paneer +chicken +mushrooms +peppers +beef +beef +onion\n-paneer +mozzarella +mushrooms +cheese +peppers +peppers +beef\n-paneer +chicken +mozzarella +peppers +beef +beef +onion\n-pepperoni +cheese +peppers +peppers +onion +peppers +beef\n-chicken +cheese +onion +cheese +onion +cheese +cheese\n-chicken +onion +cheese +cheese +onion +cheese +cheese +beef\n-tomato +cheese +cheese +peppers +cheese +peppers +beef\n-chicken +cheese +cheese +peppers +beef +beef +onion\n-pepperoni +onion +cheese +cheese +onion +cheese +onion +peppers\n-beef +peppers +peppers +peppers +cheese +peppers +onion +onion +beef\n-chicken +onion +onion +onion +cheese +onion +cheese +peppers +cheese\n-paneer +chicken +mushrooms +beef +peppers +peppers +cheese +onion\n-paneer +chicken +mozzarella +peppers +peppers +peppers +onion +onion +cheese\n-paneer +chicken +mozzarella +peppers +cheese +onion +peppers +onion +cheese +onion +beef\n-pepperoni +cheese +beef +cheese +peppers +cheese +peppers +beef +peppers +cheese\n-chicken +onion +cheese +onion +cheese +onion +cheese +peppers +peppers +cheese +cheese +beef\n-chicken +cheese +cheese +cheese +cheese +cheese +cheese +peppers +peppers +cheese +cheese +beef\n-tomato +cheese +cheese +peppers +cheese +peppers +peppers +peppers +cheese +peppers +cheese +cheese +beef\n-chicken +chicken +cheese +onion +cheese +cheese +onion +cheese +onion +cheese +cheese +beef\n-chicken +mozzarella +mushrooms +cheese +cheese +peppers +cheese +peppers +cheese +peppers +cheese +cheese +cheese +beef\n-paneer +mushrooms +cheese +cheese +onion +cheese +cheese +onion +cheese +cheese +cheese +cheese +cheese +beef\n-paneer +mushrooms +peppers +cheese +peppers +cheese +peppers +cheese +peppers +cheese +peppers +cheese +peppers +cheese +peppers +cheese +cheese +peppers +beef\n-paneer +mushrooms +peppers +cheese +cheese +peppers +cheese +cheese +peppers +cheese +cheese +cheese +cheese +peppers +peppers +cheese +peppers +peppers +cheese +peppers +cheese +peppers +beef\n-pepperoni +cheese +cheese +peppers +cheese +peppers +cheese +peppers +cheese +peppers +cheese +peppers +peppers +cheese +peppers +cheese +peppers +peppers +cheese +peppers +cheese +peppers +beef\n-paneer +chicken +mushrooms +cheese +cheese +peppers +cheese +cheese +peppers +cheese +cheese +cheese +cheese +peppers +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +beef\n-paneer +chicken +cheese +cheese +peppers +cheese +cheese +peppers +cheese +cheese +peppers +cheese +peppers +cheese +peppers +cheese +peppers +cheese +cheese +cheese +cheese +cheese +cheese +cheese +beef\n-chicken +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +beef\n-paneer +chicken +mushrooms +cheese +cheese +peppers +cheese +cheese +peppers +cheese +peppers +cheese +peppers +cheese +peppers +cheese +peppers +cheese +peppers +cheese +peppers +cheese +peppers +cheese +peppers +cheese +peppers +cheese +peppers +cheese +peppers +cheese +cheese +peppers +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese +cheese"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini\\nmushrooms\\nmozzarella'\nassert solution('''2\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini\\nmushrooms\\nmozzarella\\nartichoke'\nassert solution('''1\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini\\nmushrooms\\nmozzarella\\nartichoke'\nassert solution('''1\n1 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini\\nmushrooms\\nmozzarella\\nartichoke'\nassert solution('''1\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini\\nmushrooms\\nmozzarella\\nartichoke'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'zucchini'\nassert solution('2') == 'zucchini mozzarella'\nassert solution('3') == 'zucchini mozzarella mushrooms'\nassert solution('4') == 'zucchini mozzarella mushrooms artichoke'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini\\nmushrooms\\nartichoke'\nassert solution('''1\n3 +zucchini +mozzarella\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini\\nmushrooms\\nartichoke'\nassert solution('''1\n5 +zucchini +mozzarella +mushrooms -artichoke\n4 +zucchini +mozzarella +mushrooms +apple slices\n''') == 'zucchini\\nmushrooms\\nartichoke\\napple slices'\n'''\n\n\n\nimport re\nimport sys"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n+zucchini\n+mozzarella\n+mushrooms\n-artichoke\n''') == 'zucchini\\nmozzarella\\nmushrooms\\nartichoke'\n\nassert solution('''\n1\n+zucchini +mozzarella +mushrooms\n+zucchini\n+mozzarella\n-artichoke\n-zucchini\n''') == 'zucchini\\nmozzarella\\nmushrooms\\nzucchini\\nartichoke'\n\nassert solution('''\n2\n+fresno +indian +lamb +mushrooms\n-palm\n-green +tomato\n+pineapple -artichoke\n''') == 'fresno\\nindian\\nlamb\\nmushrooms\\npineapple\\ngreen\\ntomato\\nartichoke'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4\\nPP\\nRR\\nPS\\nSS') == 'SS\\nPP\\nRR'\n\n'''\n\nn, s = map(int, input().split())\na = input().split()\n\nfor i in range(len(a)):\n    a[i] = ord(a[i])\n\na = sorted(a, key=lambda x: -(x % 9))\n\nprint(*a)\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2\nPP\nR\nPS\nP\n\"\"\") == \"PP\"\nassert solution(\"\"\"\n2\nPP\nR\nPS\nS\n\"\"\") == \"PS\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1\\nR') == 'R'\nassert solution('3\\n1\\nP\\nR\\n1\\nP') == 'R'\nassert solution('3\\n1\\nP\\nR\\n1\\nP') == 'R'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4') == 'PP'\nassert solution('3 1') == 'PP'\nassert solution('3 2') == 'PP'\nassert solution('3 4') == 'PP'\nassert solution('2 3') == 'PP'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2\\nPP\\nRR\\nPS\\nSS\\n') == 'PP'\nassert solution('6 2\\nRRRRRR\\nPPPPPP\\nRRRRRR\\nPPPPPP\\nRRRRRR\\nPPPPPP\\n') == 'PPPPPP'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4\\nPP\\nRR\") == \"RR\"\nassert solution(\"1 5\\nRPS\") == \"RPS\"\nassert solution(\"2 4\\nRPS\") == \"RPS\"\nassert solution(\"2 10\\nRPS\") == \"RPS\"\nassert solution(\"3 1\\nRPS\") == \"RPS\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"PP\"\nassert solution(\"1\") == \"PS\"\nassert solution(\"4\") == \"PPPS\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4\\nPP\\nRR\\nPS\\nSS') == 'PP'\nassert solution('3 4\\nPP\\nRK\\nPP\\nRR\\nPS\\nSS') == 'PP'"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\nPP\\nRR\\nPS\") == \"PS\"\nassert solution(\"3 4\\nPP\\nRR\\nSS\") == \"PS\"\nassert solution(\"3 4\\nPP\\nRR\\nSS\") == \"PP\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\nRRR\nPPP\nPP\nP\nSSS\"\"\") == \"PP\"\n\nassert solution(\"\"\"\n5\nPP\nRR\nPS\nSS\nPP\"\"\") == \"RR\"\n\nassert solution(\"\"\"\n5\nRR\nPP\nPS\nSS\nPP\"\"\") == \"PS\"\n\nassert solution(\"\"\"\n5\nRRR\nPP\nPS\nSS\nPP\"\"\") == \"SS\"\n\nassert solution(\"\"\"\n5\nRRR\nPPP\nPP\nP\nSSS\"\"\") == \"SS\"\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n0.1 2.0\n0\n0\n0\n0\n0''') == '288.0'\nprint('Solution:')\nprint(solution('''5\n0.1 2.0\n0\n0\n0\n0\n0'''))\n\nassert solution('''5\n0.1 0.2\n0\n0\n0\n0\n0''') == '308.8'\nprint('Solution:')\nprint(solution('''5\n0.1 0.2\n0\n0\n0\n0\n0'''))\n\nassert solution('''5\n0.1 2.0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0''') == '6070.0'\nprint('Solution:')\nprint(solution('''5\n0.1 2.0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0'''))\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1.00000000000000'\nassert solution('2') == '2.00000000000000'\nassert solution('3') == '2.00000000000000'\nassert solution('4') == '2.00000000000000'\nassert solution('5') == '2.00000000000000'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '28'\nassert solution('3') == '290'\nassert solution('4') == '318'\nassert solution('5') == '278'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n0.1 2.0\n0\n0\n0\n0\n0\n\"\"\") == \"288.0\"\nassert solution(\"\"\"5\n0.1 2.0\n0\n0\n0\n0\n0\n\"\"\") == \"288.0\"\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '289.0'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '288'\nassert solution('2.0') == '100'\n'''"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0') == '288'\nassert solution('5\\n0.1 2.0\\n1\\n0\\n0\\n0') == '293'\nassert solution('5\\n0.1 2.0\\n2\\n0\\n0\\n0') == '292'\nassert solution('5\\n0.1 2.0\\n3\\n0\\n0\\n0') == '291'\nassert solution('5\\n0.1 2.0\\n4\\n0\\n0\\n0') == '290'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '288.0'\nassert solution('1000000000') == '50000000.0'\nassert solution('10000000') == '10000000.0'\nassert solution('10000') == '10000.0'\nassert solution('1') == '1.0'"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n0.1 2.0\\n0\\n0\\n0\\n0\") == \"288\"\n\n\"\"\"\n\nstdin = \"\"\"10\n0.1 2.0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n0.1 2.0\n0\n0\n0\n0\n0''') == '288.0', solution.__doc__\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('pastimeofwhimsy') == 1\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdin.read()\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('pastimeofwhimsy') == '1'\n\nprint(solution('pastimeofwhimsy'))\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"pastimeofwhimsy\") == \"1\"\n\nSample Input:\nchick\nSample Output:\n1\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('pastimeofwhimsy') == 1\nassert solution('a') == 1\nassert solution('aabb') == 2\nassert solution('aab') == 2\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '1'\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"pastimeofwhimsy\") == \"1\""
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('pastimeofwhimsy') == '1'"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('pastimeofwhimsy') == '1'\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"pastimeofwhimsy\") == \"1\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('2 2') == 'NO'\nassert solution('3 1') == 'YES'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4\\n1 2 2 1\\n') == 'YES'\nassert solution('3 4\\n1 2 2 1\\n') == 'NO'\nassert solution('5 5\\n1 2 2 1\\n') == 'NO'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"10 3\") == \"YES\"\nassert solution(\"1000000000\") == \"NO\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n1 2 2 1 \n''') == 'YES', './inputs/02_split.py'\nassert solution('''\n5 2\n1 1 1 1 1\n''') == 'NO', './inputs/02_split.py'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n1 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\\n1 2 2 1\") == \"NO\"\nassert solution(\"1 2 3 4\\n4 3 2 1\") == \"NO\"\nassert solution(\"1 2 3 4\\n1 1 1 1\") == \"NO\"\nassert solution(\"1 2 3 4\\n1 2 2 2\") == \"YES\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sample_input) == \"YES\"\nassert solution(input) == \"YES\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4\\n1 2 2 1') == 'YES'"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 4\n1 2 2 1 \n''') == \"YES\"\nassert solution('''8 4\n1 1 1 1 1 1 1 1 1 \n''') == \"NO\""
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n1 2 2 1\n''') == 'YES'\nassert solution('''\n5 1\n3\nSample Input:\n5 3\n3 1 3 2 2\nSample Output:\nYES\n''') == 'YES'\nassert solution('''\n5 2\n2 1 1 3 2\nSample Output:\nNO\n''') == 'NO'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 2 2 1 \n''') == 'YES'\nassert solution('''\n4\n1 2 3 4\n''') == 'NO'\nassert solution('''\n5\n1 2 5 5 1\n''') == 'YES'\nassert solution('''\n5\n1 1 1 1 1\n''') == 'NO'\n''')\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1/2'\nassert solution('1 2 4') == '3/2'\nassert solution('1 2 3') == '1/3'\nassert solution('1 2 3 4') == '1/1'"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n3\\n4') == '3/1'\nassert solution('7\\n3\\n5') == '7/5'\nassert solution('5\\n2\\n2') == '5/2'"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\n3\n4\n''') == \"3/1\"\nprint('Done')\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3/1'\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n3\\n4') == '1/2'\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n4\") == \"3/1\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n4\n1 2\n5\n6\n''') == \"3/1\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2\n3\n4''') == \"3/1\"\nprint(solution('''1 2\n3\n4'''))"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3/1\"\nassert solution(\"\"\"\n1 2\n3\n4\n\"\"\") == \"1/2\"\nprint(solution())\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n3\\n') == '1/3'\nassert solution('1 2\\n2 3\\n4\\n') == '2/1'\nassert solution('2 1\\n2 3\\n1 4\\n') == '2/1'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1.2 10.2') == '1.114672365'\nassert solution('2.2 15.2') == '0.078718041875'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n1.2 10.2\\n2.2 15.2') == \"1.114672365\"\nprint(solution(*[input() for _ in range(int(input()))]))\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n1.2 10.2\\n2.2 15.2') == '1.114672365'\nassert solution('3\\n1.2 10.2\\n2.2 15.2\\n3.2 20.2') == '2.191765'\nassert solution('4\\n1.2 10.2\\n2.2 15.2\\n3.2 20.2\\n4.2 25.2') == '1.187321'\nassert solution('5\\n1.2 10.2\\n2.2 15.2\\n3.2 20.2\\n4.2 25.2\\n5.2 30.2') == '0.892641'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n1\n2\n2\n''') == '0.33'\n\nassert solution('''\n5\n1.2 10.2\n2.2 15.2\n2.2 10.2\n4.2 20.2\n1.2 15.2\n''') == '0.44'\n\nassert solution('''\n3\n5\n2\n7\n''') == '0.12'\n\nassert solution('''\n5\n6.2\n5.4\n4.2\n3.4\n3.6\n''') == '2.16'\n\nassert solution('''\n10\n1.2 10.2\n2.2 15.2\n2.2 10.2\n4.2 20.2\n1.2 15.2\n''') == '1.08'"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n1.2 10.2\\n2.2 15.2') == '1.114672365'\n\n---Input---\n4\n1.1 1.2 2.1 2.2\n1.1 1.2 1.3 2.2\n1.1 1.2 2.2 1.3\n1.1 1.2 2.1 1.3\n2.1 2.2 1.3 1.4\n1.1 1.2 1.3 1.4\nSample Output:\n0.832873633"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1.114672365'\nassert solution('10') == '0.0012421371'\nassert solution('12') == '1.0'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n1.2 10.2\n2.2 15.2\n''') == '1.114672365'\nprint(solution('''\n2\n1.2 10.2\n2.2 15.2\n'''))"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == \"1.00\"\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1.2 10.2\\n2.2 15.2') == '1.114672365'\nassert solution('2\\n1.2 10.2\\n2.2 15.2') == '1.114672365'\nassert solution('2\\n1.2 10.2\\n2.2 15.2') == '1.114672365'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1.2 10.2\\n2.2 15.2') == '1.114672365'\nprint(solution(*[input() for _ in range(int(input()))]))\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 2\n2 1\n0 3\n2 0\n3 2\n''') == '2 3 1 2'\n\nassert solution('''\n2\n0 1\n1 2\n''') == '1 2'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n0 3\\n1 1\\n2 1\\n2 0\\n') == '3 1 2 3 2\\n'\nassert solution('5\\n4 5\\n3 1\\n1 1\\n2 1\\n2 1\\n') == '3 1 2 3 2 4\\n'\nassert solution('4\\n0 3\\n1 1\\n2 0\\n2 0\\n') == '3 1 2 3 2 4\\n'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1\\n3\\n3') == '1 2 3 2'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n0 3\\n1 1\\n2 1\\n2 0') == '3 1 2 3 2'\nassert solution('1\\n1') == '1'\n\"\"\"\n\nn = int(input())\ndata = []\n\nfor _ in range(n):\n    f, h = map(int, input().split())\n    data.append((f, h))\n\ndata.sort(key=lambda x: (x[1], x[0]))"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n0 3\n1 1\n2 1\n2 0\n\"\"\") == \"3 1 2 2\"\n\nassert solution(\"\"\"\n5\n1 2\n2 3\n0 3\n2 4\n4 5\n\"\"\") == \"3 1 2 2 5\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\n0 3\n1 1\n2 1\n2 0\n\"\"\") == \"\"\"\n3\n1 2 3 2\n\"\"\".strip()\n\nassert solution(\"\"\"\n5\n0 3\n1 1\n2 1\n2 0\n3 0\n\"\"\") == \"\"\"\n2\n1 2 3 1\n\"\"\".strip()\n\nassert solution(\"\"\"\n10\n0 3\n1 1\n2 1\n2 0\n3 0\n3 0\n4 1\n5 1\n6 2\n7 0\n8 0\n9 2\n10 1\n\"\"\") == \"\"\"\n3\n1 2 3 1\n3 2 3 1\n2 2 3 1\n\"\"\".strip()\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n3 3 1 1\\n2 1\\n2 0') == '1 2 3 2'"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2 2'\nassert solution('5') == '4 2 1 3'\nassert solution('7') == '5 5 4 2 2'\nassert solution('2') == '0 0'\nprint('All test cases passed...')\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n0 3\\n1 1\\n2 1\\n2 0\\n') == '3 1 2 3'"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n0 3\\n1 1\\n2 1\\n2 0') == '3\\n1 2 3 2'\n\n\"\"\"\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('4') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1,2'\nassert solution('4') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2 3\n''') == '1'\nassert solution('''3\n1 1 2\n''') == '1'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '1'\nassert solution('''\n3\n1 1 2\n''') == 'none'\nassert solution('''\n4\n1 2 1 3\n''') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('4') == 'none'\nassert solution('3') == '1 2 3'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n1 2 1 3''') == 'none'\nassert solution('''10\n1 2 1 3 2 3 2 4 1''') == '1 4 2 3 1'"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('3') == '2'\nassert solution('4') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2 3\n''') == '1'\nassert solution('''3\n1 1 2\n''') == 'none'\nprint('all tests passed')\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 2 3\n1 1 2''') == '1 2 3'\nassert solution('''1 1 2\n1 2 3''') == '1 1 2'\nassert solution('''3\n1 1 2''') == 'none'\nprint('Tests passed')\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1'\nassert solution('4') == 'none'"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3'"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '1'\nassert solution('3\\n') == '1'\nassert solution('4\\n') == '2'\nassert solution('5\\n') == '3'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n0 1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n0\n\"\"\") == \"1\"\nassert solution(\"\"\"\n7\n2 1 0 1 2 3 3\n\"\"\") == \"5\"\nassert solution(\"\"\"\n11\n0 1 5 0 0 1 0 1 2 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 1 0 1 2 3 3') == '4'\nassert solution('4\\n2 1 1 2 3 3') == '4'\nassert solution('4\\n2 1 1 2 2 3 3') == '3'\nassert solution('4\\n2 2 2 2 2 3 3') == '2'\nassert solution('4\\n2 2 2 2 3 3') == '1'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1 0 1 2 3 3\n''') == '5'\nassert solution('''\n3\n1 2 3\n''') == '1'\nassert solution('''\n5\n1 2 3 4 5\n''') == '2'\nassert solution('''\n5\n1 2 3 4 5\n6 7 8 9 10\n''') == '9'\nassert solution('''\n5\n1 2 3 4 5\n6 7 8 9 10\n1 1 5 8 9 10\n''') == '10'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n2 1 0 1 2 3 3\n''') == '5'\nassert solution('''\n2\n2 1 0 2 3 4 3\n''') == '4'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 1 1\n''') == '2'\n\nassert solution('''\n4\n1 1 2 2\n''') == '3'\n\nassert solution('''\n6\n2 2 2 2 2 2\n''') == '5'\n\nassert solution('''\n10\n2 2 1 1 3 2 1 2 1\n''') == '4'\n\nassert solution('''\n101\n1 1 1 1 1 1 1 1 1\n''') == '2'"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '4'\nassert solution('8') == '0'\nassert solution('15') == '9'\n\"\"\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '5'\nassert solution() == '7'\nassert solution() == '3'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6\\n#####\\n#...#\\n#_###\\n#__.#\\n#####') == '-1 -1 -1 -1 -1\\n-1 4 5 6 -1\\n-1 4 -1 -1 -1\\n-1 1 0 1 -1\\n-1 3 1 2 -1\\n-1 -1 -1 -1 -1'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6') == '-1 -1 -1 -1 -1'\nassert solution('10 20') == '3 5 6 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '-1 -1 -1 -1 -1'\nassert solution('5 6') == '-1 -1 -1 -1 -1'\nassert solution('10 1') == '1 4 5 6 -1'\nassert solution('50 2') == '2 4 -1 -1 -1'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 6\n#####\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 4 5 6\\n#####\\n#...#\\n#_###\\n#__.#\\n#####\") == \"4 5 6 -1\\n-1 4 5 6 -1\\n-1 4 -1 -1 -1\\n-1 1 0 1 -1\\n-1 3 1 2 -1\\n-1 -1 -1 -1 -1\"\nassert solution(\"3 3\\n...##\\n_MM_\\n.###\") == \"6 6 -1\\n-1 6 6 -1\\n-1 2 2 3 -1\\n-1 4 2 2 -1\\n-1 6 3 2 -1\"\nassert solution(\"9 9\\n#####\\n#...#\\n#_###\\n#__.#\\n#####\\n#####\\n#_###\\n#__.#\\n#####\") == \"3 3 -1\\n-1 3 3 -1\\n-1 2 2 3 -1\\n-1 3 2 2 -1\\n-1 2 3 2 -1\\n-1 1 2 3 -1\\n-1 1 1 2 -1\"\nassert solution(\"3 4\\n###..\\n#_###\\n#_###\\n###..\\n#_###\\n###..\") == \"3 3 -1\\n-1 3 3 -1\\n-1 2 2 3 -1\\n-1 3 2 2 -1\\n-1 2 3 2 -1\\n-1 1 2 3 -1\""
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 6\n#####\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 6\\n#####\\n#...#\\n_###\\n_M.#\\n__.#') == '-1 4 5 6 -1\\n-1 4 -1 -1 -1\\n-1 1 0 1 -1\\n-1 3 1 2 -1\\n-1 -1 -1 -1 -1'\nassert solution('5 5\\n__#\\n#..\\n...\\n..#\\n###') == '-1 4 -1 -1 4 5 6 -1\\n-1 -1 -1 -1 -1 1 0 1 -1\\n-1 3 1 2 -1\\n-1 -1 -1 -1 -1 -1 -1'"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n#####\\n#...#\\n_###\\n_M.#\\n__.#\\n#####\") == \"-1 -1 -1 -1 -1\\n-1 4 5 6 -1\\n-1 4 -1 -1 -1\\n-1 1 0 1 -1\\n-1 3 1 2 -1\\n-1 -1 -1 -1 -1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\", \"Error with empty input\"\nassert solution(\"5 6\") == \"-1 -1 -1 -1 -1\", \"Error with non-empty input\"\n\nprint(solution('''\n\n#########\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n#####\\n#...#\\n_###\\n_M.#\\n#####\") == \"-1 -1 -1 -1 -1\\n-1 4 5 6 -1\\n-1 4 -1 -1 -1\\n-1 1 0 1 -1\\n-1 3 1 2 -1\\n-1 -1 -1 -1 -1\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == '6'\nassert solution('''4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == 'Impossible'\nprint(solution('''3 6 2\n1 2 3\n1 3 2\n2 3 1\n2 4 1\n3 4 2\n'''))\nprint(solution('''3 6 2\n1 2 3\n1 3 2\n2 3 1\n2 4 1\n3 4 2\n'''))"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'impossible'\nprint(solution())\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3') == '6'\nprint(solution('4\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3'))\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '6'\nassert solution('3 1 2\\n3 4 1\\n2 4 3\\n') == '6'\nassert solution('4 5 2\\n1 5 1\\n4 1 4\\n5 2 5\\n') == 'impossible'\nassert solution('5 3 2\\n1 2 1\\n4 3 4\\n5 4 5\\n') == 'impossible'\nassert solution('4 1 2\\n1 2 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\\n') == '7'\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3''') == '6'\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n4\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n4\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n4\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3 1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\") == \"6\"\nassert solution(\"2 1\\n1 3\") == \"impossible\""
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 4 4\\n2 4 1\\n2 4 3\\n3 4 3\\n2 5 2\\n4 6 1\") == \"6\"\nassert solution(\"3\\n1 2 2\\n1 2 1\\n1 3 1\\n1 4 1\\n2 4 2\\n2 4 1\\n2 5 2\\n3 4 3\\n3 4 3\\n4 5 2\\n5 4 1\\n\") == \"impossible\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"6\""
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('2 8 3 5') == '0011'\nassert solution('1 9 2 4') == '0110101'\nassert solution('4 1 5 1') == '0110101'"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sample_input_1) == '10010'\nassert solution(sample_input_2) == '011011'"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 4 2 1\") == \"01001\", \"1st\"\nassert solution(\"7 4 2 1\") == \"01100\", \"2nd\"\nassert solution(\"8 4 2 1\") == \"11110\", \"3rd\"\nassert solution(\"3 4 2 1\") == \"impossible\", \"4th\"\nassert solution(\"1\") == \"impossible\", \"5th\"\nprint(\"All tests passed\")\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '0111'\n\nstdin = input()\nx,y,z,n = map(int, stdin.split())"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\nassert solution(\"7 4 2 1\") == \"10101\"\nassert solution(\"2 5 3 2\") == \"00010\"\nassert solution(\"10 2 3 2\") == \"10011\"\nassert solution(\"11 4 3 2\") == \"10101\"\n\"\"\""
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == \"01001\"\n\"\"\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('5 4 2 1') == '010101'\nassert solution('2 9 2 1') == '101010'\nassert solution('3 2 5 1') == '011101'\nassert solution('3 3 1 1') == '011101'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\n\"\"\""
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('5 4 2 1') == '01010'\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4 6\") == \"impossible\"\nassert solution(\"3 4 5\") == \"possible\"\nassert solution(\"3 4 6\") == \"possible\"\nassert solution(\"3 4 5\") == \"possible\"\nassert solution(\"3 4 4\") == \"possible\"\n\n'''\n\n'''\nStep 1:\n\n'''\nimport math\nimport copy"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"impossible\"\nassert solution(\"1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 2\\nv 2\\n< 3\\nv 3\\n< 4\\nv 4\"\nassert solution(\"2 3\\n3 4\\n3 5\\n4 5\\n5 4\\n4 3\\n5 2\\n2 1\\n3 1\\n3 2\\n4 2\\n4 1\\n3 1\\n2 1\\n1 1\") == \"possible\\n^ 2\\nv 2\\n^ 3\\nv 3\\nv 3\\n^ 4\\nv 4\\nv 4\\n^ 4\\nv 3\\n^ 2\\nv 2\\n^ 3\\nv 3\\nv 3\\n^ 3\\nv 2\\nv 2\\nv 1\\nv 1\\n^ 2\\nv 2\\n^ 3\\nv 3\\n^ 2\\nv 2\\nv 2\\n^ 3\\nv 3\\n^ 2\\nv 2\\n^ 2\\nv 1\\n^ 1\\nv 1\\n^ 2\\nv 2\\n^ 2\\nv 1\\n^ 2\\nv 2\\n^ 3\\nv 3\\n^ 2\\nv 2\\n^ 3\\nv 3\\n^ 2\\nv 2\\n^ 2\\nv 1\\n^ 2\\nv 1\\n^ 2\\nv 2\\n^ 3\\nv 3\\n^ 2\\nv 2\\n^ 3\\nv 3\\n^ 2\\nv 2\\n^ 2\\nv 1\\nv 1\\n^ 2\\nv 1\\n^ 2\\nv 2\\n^ 2\\nv 2\\n^ 2\\nv 1\\n^ 2\\nv 1\\n^ 2\\nv 2\\n^ 3\\nv 3\\n^ 2\\nv 2\\n^ 3\\nv 3\\n^ 2\\nv 2\\n^ 2\\nv 1\\n^ 2\\nv 1\\n^ 2\\nv 2\\n^ 3\\nv 3\\n^ 2\\nv 2\\n^ 3\\nv 3\\n^ 2\\nv 2\\n^ 2\\nv 1\\n^ 2\\nv 1\\n^ 2\\nv 2\\n^ 2\\nv 2\\n^ 2\\nv 1\\n^ 2\\nv 1\\n^ 2\\nv 2\\n^ 3\\nv 3\\n^ 2\\nv 2\\n^ 3\\nv 3\\n^ 2\\nv 2\\n^ 3\\nv 3\\n^ 2\\nv 2\\n^ 2\\nv 1\\n^ 2\\nv 1\\n^ 2\\nv 2\\n^ 3\\nv 3\\n^ 2\\nv 2\\n^ 3\\nv 3\\n^ 2\\nv 2\\n^ 2\\nv 1\\n^ 2\\nv 1\\n^ 2\\nv 2\\n^ 2\\nv 2\\n^ 2\\nv 1\\n^ 2\\nv 1\\n^ 2\\nv 2\\n^ 3\\nv 3\\n^ 2\\nv 2\\n^ 3"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4 6') == 'possible'\nassert solution('2 2') == 'impossible'\nassert solution('3 4') == 'impossible'\nassert solution('1 1') == 'possible'\nassert solution('1 2') == 'impossible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4 6\") == \"possible\"\nassert solution(\"3 3 3\") == \"impossible\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n\") == \"possible\"\nassert solution(\"3 4 4\\n1 2\\n3 1\\n3 1\\n\") == \"impossible\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3') == 'possible'\nassert solution('4 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3') == 'impossible'\nprint('\\033[92m' + 'Congratulations, have fun' + '\\033[0m')\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'possible'\nassert solution('''\n3 4 6\n1 2\n1 2\n2 3\n2 3\n3 4\n''') == 'impossible'\nassert solution('''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'impossible'\nassert solution('''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'impossible'\nassert solution('''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'impossible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4 6') == 'impossible'\nassert solution('3 4 6') == 'possible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n\"\"\") == \"possible\"\nassert solution(\"\"\"\n5 6 9\n1 1\n1 3\n3 3\n3 4\n4 4\n4 1\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3 6 10\n1 1\n1 2\n2 2\n2 4\n3 4\n4 4\n\"\"\") == \"possible\"\n\nassert solution(\"\"\"\n3 4 2\n1 1\n1 1\n1 2\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3 4 3\n1 1\n2 1\n3 1\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'possible'\n\nassert solution('''\n3 5 3\n1 2\n2 3\n4 4\n5 5\n6 6\n''') == 'impossible'\n\nassert solution('''\n5 6 3\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n''') == 'impossible'\n\nassert solution('''\n5 5 4\n1 2\n2 3\n3 4\n4 5\n6 6\n''') == 'impossible'\n\nassert solution('''\n3 5 1\n1 2\n2 3\n4 4\n5 5\n6 6\n''') == 'impossible'"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n\"\n) == \"2.0\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1.0'\nassert solution('3') == '3.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0.0000\"\nassert solution(\"2\") == \"1.0000\"\nassert solution(\"3\") == \"1.5000\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([4, 0, 1, 0, 1, 2]) == \"2.0\"\nassert solution([3, 3, 3, 2, 2, 1]) == \"1.0\""
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2.0'\nassert solution('4') == '3.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\") == \"2.0\""
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0.0'\nassert solution('2') == '0.0000'\nassert solution('3') == '0.3247'\nassert solution('4') == '1.7869'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == '2.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n''') == '2.0'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 5 4 3 2 1 6 7') == '4'\nassert solution('7 5 5 1 1 3 4 7') == '4'\nassert solution('3 7 1 4 5 6 2') == '3'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2\") == \"4\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4 3 2 1 6 7\") == \"4\"\nassert solution(\"6 10 20 5 20 10 3 1 2\") == \"6\"\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 5 4 3 2 1 6 7') == \"4\"\nassert solution('10 5 8 7 3 4 1 6 2 9') == \"6\"\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2') == '4'\nassert solution('10\\n12 5 13 6 1 3 6 5 6 3\\n5 6 7 1 8 9 2 3 1\\n6 2 8 9 6 7 1\\n8 3 7 8 5 2 9 1\\n7 9 3 6 1 6 9 5 4\\n3 6 5 7 2 1 1 4 5 6\\n3 6 9 4 8 5 6 7 1\\n9 8 1 4 7 2 5 3 6\\n1 5 7 2 9 8 4 6 1\\n1 7 1 6 1 8 1 9 9\\n5 6 1 1 7 3 4 8 9\\n8 2 4 1 9 6 5 3\\n6 7 1 4 8 5 2 3 9\\n8 8 3 9 4 8 9 7 6\\n9 5 8 2 9 7 6 1 4\\n8 5 7 5 5 8 4 2 9\\n7 3 3 5 6 6 9 2 3\\n7 8 6 9 8 7 3 5 6\\n7 9 1 9 9 8 3 2\\n2 9 8 7 5 1 5 5 7\\n7 1 6 6 7 4 8 6 3\\n5 2 4 2 8 9 6 9 5\\n2 4 7 7 6 3 5 6 1\\n3 7 7 5 6 2 3 4\\n4 5 1 5 8 9 7 6 3\\n5 8 3 3 5 6 3 5 6\\n5 7 4 3 7 5 6 9\\n7 3 1 4 5 5 4 5 6\\n2 6 6 7 3 7 7 7\\n7 8 6 7 4 5 5 3\\n8 9 1 5 9 4 7 5 3\\n6 5 3 2 4 2 9 6 1\\n3 3 5 6 5 5 4 9 5\\n6 4 6 6 6 6 6 5 7\\n2 6 5 6 6 4 8 1 9\\n6 3 6 5 7 1 1 4 4\\n6 6 7 1 1 5 8 1 6\\n6 6 7 8 4 3 6 5\\n1 7 6 1 7 3 5 5 5\\n3 6 5 6 5 5 4 5 7\\n6 4 6 5 4 3 6 1 7\\n5 2 2 1 4 4 7 2 1\\n2 3 5 7 2 5 2 7\\n4 1 1 5 1 3 3 4\\n6 1 1 5 1 4 1 2\\n8 5 9 3 4 1 4 8\\n2 2 4 5 3 4 1 8\\n2 5 5 6 6 5 8 1\\n7 3 1 3 6 5 2 7\\n5 7 7 1 7 5 2 4\\n8 7 5 4 1 7 7 7\\n5 9 1 2 7 4 6 6\\n7 5 5 4 3 5 7 5\\n6 6 4 5 7 4 6 3\\n2 4 7 8 5 9 6 7\\n3 3 4 5 5 5 5 4\\n6 3 6 5 5 1 4 2\\n6 1 6 5 7 4 5 1\\n5 2 3 3 1 3 2 5\\n2 4 5 2 4 1 3 5\\n2 5 5 4 5 5 1 5\\n3 5 5 5 1 3 1 3\\n5 6 6 6 5 1 6 4\\n4 3 3 5 6 2 7 1\\n7 1 4 3 5 5 6 9\\n5 8 7 4 3 8 8 3\\n7 2 3 5 4 7 7 6\\n7 6 5 5 4 6 5 5\\n3 2 4 3 2 4 1 6\\n8 1 4 3 4 4 8 5\\n8 3 2 2 7 6 3 3\\n8 4 2 1 6 5 2 7\\n9 5 3 2 5 6 5 8\\n6 4 7 2 3 5 4 5\\n1 2 1 2 1 1 1 1\\n8 2 6 6 8 5 2 1\\n6 1 1 5 5 2 1 2 3\\n6 1 1 5 5 2 1 2 3\\n6 3 5 2 1 2 1 2\\n7 4 3 5 5 5 4 1\\n7 2 4 2 5 1 5 5\\n7 1 7 5 2 3 4 5\\n2 5 7 7 7 7 7 7\\n7 7 5 2 5 3 4 5\\n3 6 5 5 5 4 4 6\\n7 4 4 4 4 4 5 3\\n6 4 4 5 5 4 4 5\\n3 5 5 2 5 5 5 2\\n5 4 5 5 5 4 4 5\\n6 6 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n8 6 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n6 7 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5\\n3 4 5 5 5 5 5 5\\n2 4 5 5 5 5 5 5\\n5 3 5 5 5 5 5 5\\n3 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5\\n6 7 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n8 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n6 7 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5\\n7 3 5 5 5 5 5 5\\n8 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n6 7 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n8 7 5 5 5 5 5 5\\n7 6 5 5 5 5 5 5\\n6 7 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n8 7 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n6 7 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n8 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n6 7 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n8 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n6 7 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n8 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n6 7 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n8 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n6 7 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n8 7 5 5 5 5 5 5\\n7 6 5 5 5 5 5 5\\n6 7 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n8 7 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n6 7 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5\\n7 3 5 5 5 5 5 5\\n8 7 5 5 5 5 5 5\\n7 5 5 5 5 5 5 5\\n6 7 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5\\n7 5 5 5 5 5 5"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5 1 3 2 1\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2\") == \"4\"\nassert solution(\"2\\n3 1 1 3 4 7\\n3 7 1 4 5 6 2\") == \"3\"\nassert solution(\"3\\n5 1 1 3 4 7\\n3 7 1 4 5 6 2\") == \"0\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2') == '4'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n3 2 1\n1 2 1''') == '1'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '2'\nassert solution('20') == '12'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"2\\n-10 0\\n-10 10\\n\"\n    ) == \"2\""
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"3\\n2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('1 2 3 4') == '2'"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n-10 0\n-10 10\n''') == '2'"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '2'\nassert solution('10 0') == '2'\nassert solution('10 10') == '2'"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '2'\nassert solution('-10 0') == '2'\nassert solution('-10 10') == '3'\nassert solution('10 10 -10 -10') == '2'\nassert solution('1 0 0 0') == '2'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"4\\n-10 0\\n-10 10\\n\"\n    ) == \"2\"\n\nassert solution(\n    \"10\\n-10 -10\\n-10 -10\\n\"\n    ) == \"4\"\n\nassert solution(\n    \"4\\n-1 0\\n1 2\\n3 2\\n\"\n    ) == \"4\"\n\nassert solution(\n    \"100\\n-50 -50\\n50 50\\n\"\n    ) == \"100\"\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n1 5\n\"\"\") == \"0\"\n\n\"\"\"\n\nIn the above code, if you test your code using the following input and output, you should get the correct result:\n\nSample Input:\n1 5\nSample Output:\n0\n\n\"\"\"\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    1 5\n    ''') == '0'\nassert solution('''\n    1 5\n    ''') == '0'\nassert solution('''\n    1 5\n    1 1\n    ''') == '2'\nassert solution('''\n    1 5\n    1 1\n    1 2\n    ''') == '3'\nassert solution('''\n    1 5\n    1 1\n    1 2\n    1 3\n    ''') == '4'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"0\"\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5') == '0'\nassert solution('1 2') == '0'\nassert solution('1 3') == '1'\nassert solution('1 4') == '2'\nassert solution('2 4') == '1'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '1 5') == '0'\n\nassert solution(\n    '1 50') == '1'\n\nassert solution(\n    '5 10') == '1'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 5\n''') == '0'\nassert solution('''\n1 5\n''') == '0'\nassert solution('''\n2 3\n''') == '2'\nassert solution('''\n2 3\n''') == '1'\nassert solution('''\n2 4\n''') == '2'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5') == '0'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('1 5') == '1'\nassert solution('2 2') == '1'\nassert solution('3 4') == '1'\nassert solution('4 6') == '2'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == output\n'''\n\n'''\n1 5\n0\n\n1 6\n10\n'''\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(1, 5) == \"0\"\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"1 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\"\"\") == \"0 0\"\nassert solution(\"\"\"2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\"\"\") == \"1 1\"\nassert solution(\"\"\"3 3\n1 0\n0 1\n0 1\"\"\") == \"1 2\"\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"0 0\"\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1''') == '0 0\\n1 1'\nassert solution('''3 3\n1 0\n0 1\n0 0 1\nSample Output:\n1 1''') == '1 1'\nassert solution('''2 2\n0 0\n0 1\nSample Output:\n0 0''') == '0 0'\nassert solution('''2 2\n1 0\n0 1\nSample Output:\n0 0''') == '0 0'\nassert solution('''3 3\n1 0\n0 1\n0 0 1\nSample Output:\n1 1''') == '1 1'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n\"\"\") == \"0 0\\n1 1\"\n\nassert solution(\"\"\"3 4\n1 2 1\n0 1 0\n1 1 2\n0 0 1\n\"\"\") == \"0 1 1\\n0 0 0\\n1 0 1\""
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0 0\\n1 1'\nassert solution('1 5\\n1 1\\n1 1\\n1 1\\n') == '1 2'"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n\"\"\") == \"\"\"0 0\n1 1\n\"\"\"\n\nassert solution(\"\"\"2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n\"\"\") == \"\"\"0 0\n1 1\n\"\"\""
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"0 0\\n1 1\""
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1''') == '0 0\\n1 1\\n'''\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '0 0\\n1 1'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1''') == '0 0\\n1 1'\n\nassert solution('''2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1''') == '0 0\\n1 1'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2 0.950000\n0.700000 50\n''') == '44.975'\nprint(solution('''\n1 5 0.950000\n0.70000 1\n'''))\nprint(solution('''\n1 10 0.950000\n0.70000 2\n'''))\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 0.950000\n0.700000 50\n''') == '44.975'\nassert solution('''\n1 1 0.950000\n0.700000 50\n''') == '1.000'\nassert solution('''\n2 1 0.950000\n0.700000 50\n''') == '2.500'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 0.950000') == '44.975'\nassert solution('2 3 0.955000') == '89.955'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == \"44.975\"\n\"\"\"\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\nassert solution('1 1 0.950000\\n0.700000 50') == '1.28850000'\nassert solution('1 2 0.950000\\n0.700000 100') == '1.00010000'\nassert solution('1 1 0.950000\\n0.700000 100') == '0.85000000'\nassert solution('1 2 0.950000\\n0.700000 50') == '0.09999999'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 0.950000') == '44.975'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == \"44.975\"\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 0.950000\") == \"44.975\"\nassert solution(\"0.700000 50\") == \"44.975\"\n\nB, T, f = map(int, stdin.readline().split())\nbugs = [[int(i), float(j)] for i, j in zip(stdin.readline().split(), stdin.readline().split())]"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2 0.950000\n0.700000 50\n''') == '44.975', 'First'\nassert solution('''\n3 4 0.850000\n0.100000 50\n0.100000 50\n''') == '9.9185', 'Second'\nassert solution('''\n8 8 0.5\n0.0 0\n0.0 0\n0.0 0\n0.0 0\n0.0 0\n0.0 0\n''') == '0.0', 'Third'\nassert solution('''\n2 2 0.950000\n0.700000 50\n''') == '0.0', 'Fourth'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 0.950000\\n0.700000 50\") == \"44.975\"\nassert solution(\"0.950000\\n0.700000 50\") == \"44.975\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\"\nassert solution(\"5 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"3\") == \"IMPOSSIBLE\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3 2 3\n1 1\n5 2\n1 3\n3\"\"\") == \"2\"\nassert solution(\"\"\"3 4 2\n1 1\n5 2\n1 3\n3\n2\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"10 2 5\n1 1\n10 5\n1 3\n5 1\n3\"\"\") == \"2\"\nassert solution(\"\"\"10 2 3\n1 1\n10 3\n1 2\n3 1\n3\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"10 2 5\n1 1\n10 5\n1 3\n5 1\n3\"\"\") == \"3\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2 3') == 'IMPOSSIBLE'\nassert solution('1 1') == '2'\nassert solution('5 2') == '1'\nassert solution('1 3') == '3'\nassert solution('3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 3') == 'IMPOSSIBLE'\nassert solution('1 1') == '2'\nassert solution('5 2') == '3'\nassert solution('1 3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 3') == '2'\nassert solution('5 2') == '3'\nassert solution('3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2 3\") == \"2\"\nassert solution(\"3 2 3\") == \"IMPOSSIBLE\"\nassert solution(\"3 3 5\") == \"2\"\nassert solution(\"3 1 2\") == \"IMPOSSIBLE\"\nassert solution(\"3 3 5\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1''') == '2'\n\nassert solution('''10 5\n1 1\n5 1\n1 2\n3 2\n2 1\n1 3\n4 2\n5 3\n5 4\n4 1\n3 1\n3 2''') == '5'\n\nassert solution('''10 5\n1 1\n5 1\n1 2\n3 2\n2 1\n1 3\n4 2\n5 3\n5 4\n4 1\n3 1\n3 2''') == 'IMPOSSIBLE'\n\nassert solution('''10 5\n1 1\n5 1\n1 2\n3 2\n2 1\n1 3\n4 2\n5 3\n5 4\n4 1\n3 1\n3 2''') == '2'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 3') == '2'\nassert solution('3 2 3') == 'IMPOSSIBLE'\nassert solution('1 1') == '1'\nassert solution('3') == '3'\nassert solution('1 3') == '3'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 2 3\n1 1\n5 2\n1 3\n3''') == '2'\nassert solution('''3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\nSample Input 2:\n5 4 2\n1 1\n1 1\n5 5\nSample Output 2:\n0\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2') == '1'\n\"\"\""
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '1.0'\nassert solution('2 1') == '1.0'\nassert solution('2 5') == '1.0'\nassert solution('3 1') == '0.5'\nassert solution('5 3') == '4.0'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0\") == \"4.0\"\nassert solution(\"2 2\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0\") == \"6.0\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"4.0\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0\n''') == \"4.0\"\nassert solution('''\n1 1\n5 5\n5 5\n''') == \"7.0\"\nassert solution('''\n10 10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == \"50.0\"\nassert solution('''\n4 4\n1.0 2.0\n1.0 2.0\n1.0 2.0\n1.0 2.0\n2.0 1.0\n2.0 1.0\n2.0 1.0\n2.0 1.0\n1.0 2.0\n''') == \"32.0\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '4.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"4.0\"\nassert solution(stdin=\"\"\"\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n\"\"\") == \"1.0\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '4.0'\n\nimport sys\nfrom io import StringIO\nimport unittest\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '2.0'\nassert solution('1 2') == '1.0'\nassert solution('1 2') == '1.0'\nassert solution('3 3') == '4.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4') == '16.0'\nassert solution('5 5') == '30.0'\nassert solution('1 1') == '1.0'\nassert solution('2 2') == '2.0'"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '4.0'"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n220 29\n195 20\n200 9\n180 30\n''') == '18000'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n220 29\\n195 20\\n200 9\\n180 30') == \"18000\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n220 29\n195 20\n200 9\n180 30\n''') == '18000'\nassert solution('''\n3\n11 101\n9 100\n4 100\n''') == '4000'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n195 20\\n200 9') == '18000'\nassert solution('3\\n220 29\\n195 20\\n180 30') == '18000'\nassert solution('4\\n180 30\\n200 9\\n195 20\\n220 29') == '18000'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n220 29\\n195 20\\n200 9\\n180 30') == '18000'\nassert solution('2\\n250 30\\n190 20\\n220 20\\n250 30') == '11000'\nassert solution('3\\n300 30\\n250 20\\n250 30\\n300 20') == '15000'\nassert solution('4\\n300 30\\n250 20\\n250 30\\n250 30') == '70000'\nassert solution('5\\n500 30\\n250 20\\n250 30\\n250 30') == '0'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n220 29\\n195 20\\n200 9\\n180 30\\n') == '18000'\nassert solution('1\\n150 150\\n20 50\\n10 30\\n50 10\\n') == '101000'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n220 29\\n195 20\\n200 9\\n180 30\") == \"18000\"\nassert solution(\"100\\n10\\n11\") == \"10100\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n220 29\n195 20\n200 9\n180 30\n\"\"\") == \"18000\"\nassert solution(\"\"\"\n4\n250 270 300\n250 215 175\n200 9\n180 30\n\"\"\") == \"12000\"\n\"\"\"\n4\n250 270 300\n250 215 175\n200 9\n180 30\n\"\"\""
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"18000\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n220 29\\n195 20\\n200 9\\n180 30\\n') == '18000'\nassert solution('20\\n220\\n240\\n195\\n180\\n30\\n30\\n') == '80000'\nassert solution('3\\n1\\n100\\n1\\n') == '100000'"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"BUYSTICKERS\") == \"POSSIBLE\"\nassert solution(\"TICKERS\") == \"IMPOSSIBLE\"\nassert solution(\"STICKY\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nBUYSTICKERS\n4\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8\n''') == '28'\n\nassert solution('''\nBUYSTICKERS\n5\nBUYER 1\nTICKERS 3\nERS 8\nSTICKY 3\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nBUYSTICKERS\n4\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8\n''') == '28'\n'''\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"BUYSTICKERS\") == \"28\"\nassert solution(\"TICKERS\") == \"IMPOSSIBLE\"\nassert solution(\"STICKERS\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"BUYSTICKERS\") == \"28\"\nassert solution(\"STICKY\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('BUYSTICKERS') == '27'\nassert solution('TICKERS') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nBUYSTICKERS\n4\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8\n''') == '28'\nassert solution('''\nBUYSTICKERS\n4\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8\n''') == 'IMPOSSIBLE'\nassert solution('''\nBUYSTICKERS\n10\nBUYER 1\nSTICKY 1\nTICKERS 1\nERS 8\nERS 9\nERS 4\n''') == '25'\n'''\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('BUYSTICKERS') == '28'\nassert solution('TICKERS') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"BUYSTICKERS\") == \"28\"\nassert solution(\"STICKY TICKERS\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"BUYSTICKERS\") == \"IMPOSSIBLE\", \"Too many stickers\"\nassert solution(\"TICKERS\") == \"IMPOSSIBLE\", \"Not enough stickers\"\nassert solution(\"TICKERS1\") == \"28\", \"Not enough stickers\"\nassert solution(\"TICKERS2\") == \"IMPOSSIBLE\", \"Too many stickers\"\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3 8\") == \"INDV 1 CORP 1 INDV 4 CORP 2 INDV 3 CORP 3 INDV 5\"\nassert solution(\"5 3 8\") == \"CORP 1 INDV 2 CORP 2 INDV 3 CORP 3 INDV 4 CORP 4\"\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\\n') == 'INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\\nCORP 5\\nCORP 1\\nCORP 2\\nCORP 3\\nCORP 4\\nCORP 5\\nCORP 1\\nCORP 2\\nCORP 3\\nCORP 4\\nCORP 5'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 8') == 'CORP 4\\nINDV 3\\nCORP 3\\nINDV 1\\nINDV 2\\nCORP 2\\nCORP 1\\nINDV 5'\nassert solution('2 5 4') == 'CORP 3\\nINDV 5\\nCORP 1\\nCORP 2\\nINDV 4'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 8') == 'INDV 2'\nassert solution('1 1') == 'INDV 1'\nassert solution('2 1') == 'INDV 1'\nassert solution('3 1') == 'INDV 2'\nassert solution('4 2') == 'INDV 2'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3 8') == 'INDV 4'\nassert solution('1 1') == 'INDV 1'\nassert solution('2 1') == 'INDV 1'\nassert solution('3 1') == 'INDV 2'\nassert solution('4 2') == 'INDV 2'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n''') == 'INDV 1 CORP 1 INDV 2 INDV 4 CORP 2 INDV 3 CORP 3 INDV 5 CORP 1 INDV 1 CORP 1 INDV 4 CORP 2 INDV 3 CORP 3 INDV 5 CORP 1 INDV 1 CORP 1 INDV 4 CORP 2 INDV 3 CORP 3 INDV 5 CORP 1 INDV 1 CORP 1 INDV 4 CORP 2 INDV 3 CORP 3 INDV 5 CORP 1 INDV 1 CORP 1 INDV 4 CORP 2 INDV 3 CORP 3 INDV 5 CORP 1 INDV 1 CORP 1 INDV 4 CORP 2 INDV 3 CORP 3 INDV 5 CORP 1 INDV 1 CORP 1 INDV 4 CORP 2 INDV 3 CORP 3 INDV 5 CORP 1 INDV 1 CORP 1 INDV 4 CORP 2 INDV 3 CORP 3 INDV 5 CORP 1 INDV 1 CORP 1 INDV 4 CORP 2 INDV 3 CORP 3 INDV 5 CORP 1 INDV 1 CORP 1 INDV 4 CORP 2 INDV 3 CORP 3 INDV 5 CORP 1 INDV 1 CORP 1 INDV 4 CORP 2 INDV 3 CORP 3 INDV 5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV 5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV 5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV 5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP 1 INDV4 CORP 2 INDV 3 CORP 3 INDV5 CORP 1 INDV 1 CORP"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3') == 'INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5'\nassert solution('10 5 20\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n6 2\\n7 2\\n8 2\\n9 2\\n10 2\\n11 2\\n12 2\\n13 2\\n14 2\\n15 2\\n16 2\\n17 2\\n18 2\\n19 2\\n20 2\\n') == 'INDV 1\\nCORP 1\\nINDV 2\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 4\\nCORP 4\\nINDV 5\\nCORP 5\\nINDV 6\\nCORP 6\\nINDV 7\\nCORP 7\\nINDV 8\\nCORP 8\\nINDV 9\\nCORP 9\\nINDV 10\\nCORP 10\\nINDV 11\\nCORP 11\\nINDV 12\\nCORP 12\\nINDV 13\\nCORP 13\\nINDV 14\\nCORP 14\\nINDV 15\\nCORP 15\\nINDV 16\\nCORP 16\\nINDV 17\\nCORP 17\\nINDV 18\\nCORP 18\\nINDV 19\\nCORP 19\\nINDV 20\\nCORP 20'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"INDV 2\\nINDV 3\\nCORP 2\\nCORP 3\"\n\n'''\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n''') == 'INDV 2 CORP 2 INDV 4 CORP 2 INDV 3 CORP 3 INDV 5 CORP 1'\nassert solution('''5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n''') == 'INDV 1 CORP 2 INDV 3 CORP 1 INDV 4 CORP 2 INDV 5 CORP 1'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3 8') == 'INDV 2\\nINDV 1\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5'\nassert solution('4 1 5') == 'INDV 2\\nCORP 1\\nINDV 1\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5'"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '0.0'\nassert solution('10 1') == '2.0'\nassert solution('10 1 2 3 4 5 6 7 8 9') == '5.6391891946'\nassert solution('10 1 2 3 4 5 6 7 8 9 10') == '5.6391891946'\nassert solution('10 1 2 3 4 5 6 7 8 9 10 10') == '5.6391891946'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4\n10 1\n1\n0\n10\n10\n\"\"\") == \"2.4142135624\"\nassert solution(\"\"\"\n4\n3 2\n0\n1\n2\n\"\"\") == \"2.08333333333\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n') == '0\\n', 'First'\nassert solution('1\\n1\\n') == '1\\n', 'Second'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n10 1\n1\n0\n10\n10''') == '2.4142135624'\nassert solution('''100\n10\n10\n0\n10\n0''') == '3.1622776601'"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"3.0\"\nassert solution(\"2\") == \"1.4142135624\""
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 1\\n2\\n3\\n0\\n4\\n0\\n6\") == \"3.1622776601\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0.0'\nassert solution('4') == '1.4142135624'\nassert solution('10') == '4.2426406871'\nassert solution('12') == '5.1739130434'\nassert solution('16') == '6.8284271247'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == \"4.0000\"\nassert solution('10') == \"2.8284\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n6\\n0\\n5\\n1\\n0\\n0\\n1\\n2\\n1\") == \"2.4142135624\"\nassert solution(\"10\\n15\\n0\\n5\\n1\\n0\\n0\\n1\\n2\\n1\") == \"3.60555127546\"\nassert solution(\"8\\n10\\n0\\n5\\n1\\n0\\n0\\n1\\n2\\n1\") == \"2.5\""
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n10 1\n1\n0\n10\n10\n''') == '2.4142135624'\n\nassert solution('''12\n10 1\n2\n0\n8\n1\n5\n3\n6\n4\n7\n11\n10\n9\n''') == '3.1622776601'\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 5') == '15'\n\n##Task\nA tower of Hanoi is made up of three rods and n disks. The objective of the puzzle is to move the entire stack to a new stack. You have one of the three rods, a source rod, and a destination rod. The objective is to move the entire stack of disks from the source rod to the destination rod using the three rods, obeying the following rules:\n\nAll disks must be moved exactly one step at a time.\nMoving a disk from one rod to another is done in one of several ways:\n\n(1) Move the top disk from source rod to destination rod.\n(2) Move the top disk from source rod to destination rod, then move the top disk from source rod to destination rod.\n(3) Move the top disk from source rod to destination rod, then move the top disk from destination rod to source rod.\n(4) Move the top disk from source rod to destination rod, then move the top disk from source rod to destination rod, then move the top disk from source rod to destination rod.\n\nHow many distinct ways are there to move the entire stack of disks from the source rod to the destination rod?\n\n##Input\nThe first line of input contains an integer $n$ (1 \\le n \\le 250000). The next n lines contain three integers $u$, $v$, and $c$ (1 \\le u, v \\le n), describing a bidirectional path connecting nations $u$ and $v$. The third line contains an integer $x$ (1 \\le x \\le n), the number of times that each nation is placed on the destination rod. The fourth line contains an integer $y$ (1 \\le y \\le x), the number of times that each nation is placed on the source rod.\n\n##Output\nDisplay the number of distinct ways to move the entire stack of disks from the source rod to the destination rod.\n\n##Examples\nSample Input:\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\nSample Output:\n4\n>>> \n\n##Task\nA tower of Hanoi is made up of three rods and n disks. The objective of the puzzle is to move the entire stack of disks from a source rod to a destination rod. You have one of the three rods, a source rod, and a destination rod. The objective is to move the entire stack of disks from the source rod to the destination rod using the three rods, obeying the following rules:\n\nAll disks must be moved exactly one step at a time.\nMoving a disk from one rod to another is done in one of several ways:\n\n(1) Move the top disk from source rod to destination rod.\n(2) Move the top disk from source rod to destination rod, then move the top disk from source rod to destination rod.\n(3) Move the top disk from source rod to destination rod, then move the top disk from destination rod to source rod.\n(4) Move the top disk from source rod to destination rod, then move the top disk from source rod to destination rod, then move the top disk from source rod to destination rod.\n\nHow many distinct ways are there to move the entire stack of disks from the source rod to the destination rod?\n\n##Input\nThe first line of input contains an integer $n$ (1 \\le n \\le 250000). The next n lines contain three integers $u$, $v$, and $c$ (1 \\le u, v \\le n), describing a bidirectional path connecting nations $u$ and $v$. The third line contains an integer $x$ (1 \\le x \\le n), the number of times that each nation is placed on the destination rod. The fourth line contains an integer $y$ (1 \\le y \\le x), the number of times that each nation is placed on the source rod.\n\n##Output\nDisplay the number of distinct ways to move the entire stack of disks from the source rod to the destination rod.\n\n##Examples\nSample Input:\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\nSample Output:\n4\n>>> \n\n##Task\nA tower of Hanoi is made up of three rods and n disks. The objective of the puzzle is to move the entire stack of disks from a source rod to a destination rod. You have one of the three rods, a source rod, and a destination rod. The objective is to move the entire stack of disks from the source rod to the destination rod using the three rods, obeying the following rules:\n\nAll disks must be moved exactly one step at a time.\nMoving a disk from one rod to another is done in one of several ways:\n\n(1) Move the top disk from source rod to destination rod.\n(2) Move the top disk from source rod to destination rod, then move the top disk from source rod to destination rod.\n(3) Move the top disk from source rod to destination rod, then move the top disk from destination rod to source rod.\n(4) Move the top disk from source rod to destination rod, then move the top disk from source rod to destination rod, then move the top disk from source rod to destination rod.\n\nHow many distinct ways are there to move the entire stack of disks from the source rod to the destination rod?\n\n##Input\nThe first line of input contains an integer $n$ (1 \\le n \\le 250000). The next n lines contain three integers $u$, $v$, and $c$ (1 \\le u, v \\le n), describing a bidirectional path connecting nations $u$ and $v$. The third line contains an integer $x$ (1 \\le x \\le n), the number of times that each nation is placed on the destination rod. The fourth line contains an integer $y$ (1 \\le y \\le x), the number of times that each nation is placed on the source rod.\n\n##Output\nDisplay the number of distinct ways to move the entire stack of disks from the source rod to the destination rod.\n\n##Examples\nSample Input:\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\nSample Output:\n4\n>>> \n\n##Task\nA tower of Hanoi is made up of three rods and n disks. The objective of the puzzle is to move the entire stack of disks from a source rod to a destination rod. You have one of the three rods, a source rod, and a destination rod. The objective is to move the entire stack of disks from the source rod to the destination rod using the three rods, obeying"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n    \"\"\"\n) == \"15\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"15\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"15\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"10\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n2 1\n3 1\n1 3\n5 0\n1 3''') == '15'\nassert solution('''4\n2 1\n3 2\n1 2\n1 4\n1 3''') == '-1'\n'''"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\nassert solution('''\n2\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '22'\nassert solution('''\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '36'\nassert solution('''\n4\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '38'\nassert solution('''\n5\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '28'\n'''\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n\"\"\") == \"15\"\n\nassert solution(\"\"\"\n5\n1 2\n3 4\n5 4\n2 5\n\"\"\") == \"14\"\n\nassert solution(\"\"\"\n3\n1 2\n3 1\n2 1\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 5\\n3 1 5\\n2 1') == '15'\nassert solution('3\\n2 1\\n1 3\\n5 0') == '0'\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n\"\"\") == \"15\"\nassert solution(\"\"\"\n10 4\n1 2 6\n0 1 3\n8 5 6\n2 3 1\n4 6 4\n9 3 1\n10 7 4\n8 8 1\n\"\"\") == \"37\"\nprint('Tests completed')"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 5\\n3 1 5\\n2 1') == '15'\nassert solution('5\\n0 0\\n1 3') == '10'\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5 3 3 4') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD'\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5 3 3 4\") == \".....\\n..BBC\\n..A.C\\n....C\\n@DDDD\\n\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3 1\") == \"ABCDD\"\nassert solution(\"3 4 5 2\") == \"BCDDD\"\nassert solution(\"1 3 2 5\") == \"ABCD\"\nassert solution(\"1 1 1 1\") == \"AT\"\nassert solution(\"1 1 1 1\") == \"AT\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 5 3 3 4\n''') == '....C'\nassert solution('''\n4 5 3 2 3\n''') == '..A.C'\nassert solution('''\n5 5 1 2 3\n''') == '@DDDD'\nassert solution('''\n20 20 1 2 3\n''') == '#AB.C.'\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 1 1 1\") == \".@.@.@.@.@.@.\"\nassert solution(\"1 3 1 2\") == \".ABC.@.@.@.@.@.@.\"\nassert solution(\"1 2 1 1\") == \"B.@.@.@.@.@.@.\"\nassert solution(\"1 3 1 2\") == \"BC@.@.@.@.@.@.@.\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 5 3 3 4\n''') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD\\n'\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([3, 5, 3, 4]) == \"...B.C...@C...DD.D...\"\nassert solution([3, 5, 4, 4]) == \"...B.C...@.D...\"\nassert solution([3, 5, 3, 3]) == \"...B.C...@...C...\"\nassert solution([3, 5, 5, 5]) == \"...B.C.....@.C...\"\nassert solution([3, 5, 3, 3, 3]) == \"...B.C.....@...C...\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n3 5 3 3 4\n''') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD\\n'\n\nassert solution(\n'''\n4 5 3 3 4\n''') == '.....\\n..A.C\\n....C\\n@DDDD\\n@BBBC\\n'\n\nassert solution(\n'''\n5 4 4 4 4\n''') == '@DDDD\\n@BBBC\\n@ABBC\\n@ABCD\\n@ABBA\\n'\n\nassert solution(\n'''\n6 5 5 5 4\n''') == '@ABCD\\n@ABBA\\n@A.C.B\\n@A.BCD\\n@ABBAC\\n@A.BCBA\\n'\n\nassert solution(\n'''\n10 4 4 4 4\n''') == '@A.BCBA\\n@A.ABBA\\n@A.C.B\\n@A.BCD\\n@ABBAC\\n@A.BCBA\\n@A.ABBA\\n@A.C.B\\n@A.BCD\\n@ABBA\\n@A.C.B\\n@A.ABCD\\n@ABBA\\n@A.C.B\\n@A.BCD\\n@ABBAC\\n@A.ABCD\\n@ABCD\\n@A.BCBA\\n@A.ABBA\\n@A.ABCD\\n@A.ABCD\\n@ABBA\\n@A.ABCD\\n@A.BCD\\n@A.ABCD\\n@A.ABCD\\n@A.BCBA\\n@A.ABCD\\n@ABCD\\n@ABCD\\n@ABBA\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABBA\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABCD\\n@ABC"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 5 3 3 4\n.....\n..BBC\n..A.C\n....C\n@DDDD''') == 'CBBAA'\nassert solution('''5 5 3 3 4\n.....\n..BBC\n..A.C\n....C\n@DDDD\n@A.B.C''') == 'CBAABC'\nassert solution('''5 5 3 3 4\n.....\n..BBC\n..A.C\n....C\n@DDDD\n@A.B.C\nA.B.C''') == 'DDDCCBB'\nassert solution('''5 5 3 3 4\n.....\n..BBC\n..A.C\n....C\n@DDDD\n@A.B.C\nA.B.C\nC.D.E''') == 'DDBBBDD'\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \".\"\nassert solution(\"1 2 3 4\") == \"...\"\nassert solution(\"5 5 3 3 4\") == \"...AB...C\"\nassert solution(\"10 10 8 8\") == \"A...\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '001'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\") == \"001\\n001\\n001\\n111\\n200\"\nassert solution(\"5 3\\n000\\n111\\n001\\n000\\n111\\n000\") == \"000\\n000\\n111\\n111\\n111\\n111\"\nassert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\\n111\\n000\") == \"111\\n000\\n000\\n111\\n111\\n111\\n111\"\nassert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\\n111\\n000\") == \"000\\n000\\n111\\n111\\n111\\n111\"\nassert solution(\"5 3\\n000\\n111\\n000\\n111\\n000\\n111\\n000\") == \"000\\n000\\n111\\n111\\n111\\n111\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '001'\nassert solutionn\nSample Output:\n0 0 0 1 0 0 2 0 0 1 0 1 0 2 0 0 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\") == \"001\\n001\\n001\\n111\\n200\""
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '001'\nassert solution('10 3') == '001'\nassert solution('20 3') == '001'\nassert solution('10 5') == '001'\nassert solution('100 10') == '001'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\") == \"001\\n001\\n001\\n111\\n200\"\nassert solution(\"2 1\\n10\\n11\") == \"10\\n11\"\nassert solution(\"5 6\\n2423\\n4323\\n6543\\n8765\\n8976\") == \"2423\\n4323\\n6543\\n8765\\n8976\"\nassert solution(\"5 3\\n1234\\n567\\n89\\n5678\") == \"1234\\n5678\\n5678\"\nassert solution(\"5 3\\n1234\\n5678\\n890\\n5678\") == \"1234\\n5678\\n5678\\n890\\n5678\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n111\\n001\\n000\\n111\\n000') == '001\\n001\\n001\\n111\\n200'\nassert solution('5 5\\n1234\\n123\\n12\\n123\\n12') == '12\\n12\\n12\\n123\\n123'\nassert solution('5 5\\n1234\\n123\\n12\\n12\\n123') == '123\\n12\\n12\\n123\\n123'\nassert solution('10 9\\n9 8\\n8 7\\n7 6\\n6 5\\n5 4\\n4 3\\n3 2\\n2 1') == '2 1\\n2 1\\n3 2\\n4 3\\n5 4\\n6 5\\n7 6\\n8 7\\n9 8\\n10 9'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"001\"\nassert solution(\"2 3\") == \"002\"\nassert solution(\"2 4\") == \"004\"\nassert solution(\"5 4\") == \"110\"\nassert solution(\"1 2 3\") == \"123\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 3\n111\n001\n000\n111\n000\n''') == '001000000000000111100000000000'\nassert solution('''\n5 3\n111\n001\n000\n111\n000\n''') == '000000000011111111100000000000'\nassert solution('''\n5 3\n111\n001\n000\n111\n000\n''') == '0000000001111111111111111111111'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\") == \"001\\n001\\n001\\n111\\n200\"\nassert solution(\"5 2\\n11\\n00\\n0\\n10\\n1\") == \"01\"\nassert solution(\"3 3\\n111\\n111\\n000\\n000\\n001\") == \"111\\n111\\n000\\n000\\n001\"\nassert solution(\"8 3\\n11111\\n00001\\n00001\\n00001\\n00001\\n00001\\n00001\\n00001\\n00001\\n00001\\n00001\") == \"00001\\n00001\\n00001\\n00001\\n00001\\n00001\\n00001\\n00001\\n00001\\n00001\\n00001\\n11111\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''19/13\n10/1\n19/14''') == '19 20'\nassert solution('''4/3\n20/7''') == '20 15 13 7 2'\nassert solution('''20/13\n19/15''') == '20 15 13 7 2'"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''19/13\n10/1''') == '10 20'\nassert solution('''19/14\n10/1''') == '19 20'\nassert solution('''4/3\n20/7''') == '10 15 13 7'\nassert solution('''20/7\n10/1''') == '10 13 7'\nassert solution('''19/7\n10/1''') == '10 13 7'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"19/13\") == \"19 20\"\nassert solution(\"10/1\") == \"10 20\"\nassert solution(\"19/14\") == \"14 16\"\nassert solution(\"4/3\") == \"4 6 3\"\nassert solution(\"20/7\") == \"7 17\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"19/13\") == \"19 20\"\nassert solution(\"10/1\") == \"10\"\nassert solution(\"19/14\") == \"17 20\"\nassert solution(\"4/3\") == \"7 15 14 13 8\"\nassert solution(\"20/7\") == \"17 13 12 11 7\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"19/13\") == \"20 20\"\nassert solution(\"10/1\") == \"10 10\"\nassert solution(\"19/14\") == \"20 20\"\nassert solution(\"4/3\") == \"14 16\"\nassert solution(\"20/7\") == \"15 20\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/13\\n19/2\\n19/17\\n10/7\\n20/13\\n19/1') == '19 20\\n17 15 14 13 7 2\\n'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(r'''\n19/13\n10/1\n19/14\n4/3\n20/7\n19/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/17\n19/2\n19/17\n''') == r'''\n19 20\n17 15 14 13 7 2\n'''\n\nassert solution(r'''\n6/5\n5/2\n10/3\n10/7\n12/8\n6/4\n12/1\n''') == r'''\n12 8 5 1\n'''\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"20 17 14 13 7 2\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''19/13\n10/1\n19/14\n4/3\n20/7\n19/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/15\n10/7\n20/13\n19/"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\\n') == '19 20\\n17 15 14 13 7 2'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\\n') == 'possible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 4\") == \"possible\"\nassert solution(\"1 2 3\") == \"possible\"\nassert solution(\"0 0\") == \"possible\""
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"impossible\"\nassert solution(\"4 5\") == \"possible\"\nassert solution(\"3 3\") == \"impossible\""
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == 'possible'\nassert solution('5 5') == 'possible'\nassert solution('6 6') == 'impossible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == 'possible'\nassert solution('3 0') == 'impossible'\n\"\"\""
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\") == \"possible\"\nassert solution(\"3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3''') == 'possible'\nassert solution('''1 1\n0 0\n0 2\n1 2 3\n2 2 2\n3 0 3''') == 'impossible'\nassert solution('''2 2\n0 0\n0 2\n1 2 3\n2 2 2\n3 0 3''') == 'impossible'"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == 'possible'\nassert solution('1 2') == 'possible'\nassert solution('2 0') == 'impossible'\nassert solution('2 2') == 'impossible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"possible\"\nassert solution(\"2 4\") == \"possible\"\nassert solution(\"1 0\") == \"impossible\"\nassert solution(\"2 2 2\") == \"impossible\"\n\n'''\n\n\nimport math\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3') == 'possible'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"4\""
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 2\n2\n2\n2\n''') == \"4\"\nassert solution('''\n4 4\n1 2 1\n1 3 1\n1 4 1\n''') == \"3\"\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2\\n2\\n2 1\\n2\\n') == '4'\nassert solution('2 1\\n2 1\\n2 2\\n2\\n') == '3'\nassert solution('2 1\\n2 2\\n2 1\\n2\\n') == '2'\nassert solution('2 3\\n2 2\\n2 1\\n2\\n') == '1'"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 3\n3\n2\n2\n''') == '5'\nassert solution('''\n2 1\n2\nSample Input 2:\n3\n1\n1\nSample Output 2:\n0\n''') == '1'\nassert solution('''\n4 2\n1\n2\n1\nSample Output 3:\n1\n''') == '2'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 2\n2\n2\n2\n''') == '4'\nassert solution('''\n4 2\n3\n2\n3\n''') == '4'\nassert solution('''\n4 3\n4\n1\n1\n2\n4\n1\n''') == '5'\n\n'''\nSample Input:\n3 2\n2\n3\nSample Output:\n3\n'''\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\n\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(1, m + 1):\n        if a[i - 1] == 1:\n            count += n - 2\n        elif a[i - 1] == 2:\n            count += n - 1\n        else:\n            count += n\n    print(count)\n\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = set()\n    for i in range(1, m + 1):\n        if a[i - 1] == 1:\n            b.add(i)\n        elif a[i - 1] == 2:\n            b.add(i)\n        else:\n            b.add(i)\n    print(len(b))"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1\n2\n3\n''') == '4'\nassert solution('''\n3\n1\n2\n''') == '4'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1\\n3\\n1 1 1 1\\n3\\n1 1 1\\n3\\n2 2 2\\n4') == '4'\nassert solution('5 1\\n4\\n1 2 1 1 1\\n3\\n2 2\\n3\\n3 3\\n4') == '4'\nassert solution('5 1\\n3\\n1 2 1 1 1\\n3\\n2 2 2\\n3\\n3 3\\n4') == '4'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'Slavko'\nassert solution('2') == 'Mirko'\n\nimport sys\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2 2\\n4 1\\n1 2\\n1 3\\n\") == \"Slavko\"\nassert solution(\"3\\n2 2\\n4 1\\n1 2\\n1 3\\n\") == \"Mirko\"\nprint(solution(input()))\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 'Mirko'\nassert solution('3') == 'Slavko'\nassert solution('1 1') == 'Mirko'\nassert solution('1 2') == 'Slavko'\nassert solution('1 3') == 'Slavko'\n\nSample Input:\n4\n1 1\n1 2\n1 3\n2 1\nSample Output:\nSlavko\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'Slavko'\nassert solution('3') == 'Mirko'\nassert solution('4') == 'Slavko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == 'Mirko'\nassert solution('1 2') == 'Slavko'\nassert solution('1 3') == 'Mirko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n    3\n    1 1\n    1 2\n    1 3\n\"\"\") == \"Mirko\"\n\nassert solution(\"\"\"\n    2\n    1 1\n    1 2\n\"\"\") == \"Slavko\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'Mirko'\nassert solution('4') == 'Slavko'"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"Mirko\"\nassert solution(\"2\") == \"Slavko\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n1\\n') == 'Mirko'\nassert solution('2\\n2\\n1\\n') == 'Slavko'\nassert solution('2\\n3\\n2\\n') == 'Slavko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1 1\n2 3\n3 2\n4 4\n2 4''') == 'Slavko'"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n1\n2\n3\n4\n''') == '1 2 3 4'\nassert solution('''4\n9\n16\n24\n32\n''') == '9 16 24 32'\nprint('You passed all tests!')\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2 4\""
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n4\n12\n4\n3\n8\nSample Input 2:\n8\n1\n10\nSample Output 2:\n3\n4\n3\n4\n3\n''') == '2 4'"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"2 4 6 8\"\nassert solution(\"5\") == \"2 4 6 8 10 12\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2 4'"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2 4'\nassert solution('5') == '2 4 3 6'\nassert solution('12') == '2 4 6'\nassert solution('6') == '2 4 3 6'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n    2\n    4\n    \"\"\"\n    ) == \"2 4\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6\n34\n38\n''') == '2 4'\nassert solution('''\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n''') == '5 8'\nassert solution('''\n3\n5\n1\n''') == '4'\nassert solution('''\n3\n7\n3\n''') == '0 3'\nassert solution('''\n5\n3\n2\n7\n1\n''') == '1 0 2 3 7'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '''\n    6\n    34\n    38\n    '''\n    ) == '2 4'\n\nassert solution(\n    '''\n    5\n    34\n    38\n    23\n    49\n    '''\n    ) == '2 4'\n\nassert solution(\n    '''\n    4\n    34\n    38\n    23\n    '''\n    ) == '2 4'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"3\\n\"\n    \"6\\n\"\n    \"34\\n\"\n) == \"2 4\"\nassert solution(\n    \"5\\n\"\n    \"18\\n\"\n    \"34\\n\"\n    \"99\\n\"\n    \"2\\n\"\n) == \"4 2\"\nassert solution(\n    \"3\\n\"\n    \"4\\n\"\n    \"2\\n\"\n) == \"2 2 2\"\nassert solution(\n    \"9\\n\"\n    \"21\\n\"\n    \"7\\n\"\n    \"10\\n\"\n    \"24\\n\"\n    \"13\\n\"\n    \"35\\n\"\n    \"3\\n\"\n) == \"10 10 10 10 10 10 10 10 10\"\nassert solution(\n    \"8\\n\"\n    \"4\\n\"\n    \"6\\n\"\n    \"2\\n\"\n    \"8\\n\"\n    \"4\\n\"\n    \"8\\n\"\n    \"12\\n\"\n    \"6\\n\"\n) == \"6 6 6 6 6 6 6 6\"\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(example_input_1) == \"12\"\nassert solution(example_input_2) == \"12\"\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n4\n10000 400000 500000 900000\n\"\"\"\n) == \"12\"\n\nassert solution(\n\"\"\"\n5\n8 10 2 1000000 30556926000\n\"\"\"\n) == \"12\"\n\nassert solution(\n\"\"\"\n100000\n\"\"\"\n) == \"100000\"\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"4\"\n) == \"12\"\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n100000000 100000000 100000000\n10\n500000000 500000000\n20\n500000000 500000000\n''') == '12'\n\nassert solution('''\n7\n100000000 100000000 100000000\n10\n500000000 500000000\n20\n500000000 500000000\n30\n500000000 500000000\n40\n500000000 500000000\n''') == '12'\n\nassert solution('''\n4\n100000000 100000000 100000000\n10\n500000000 500000000\n20\n500000000 500000000\n30\n500000000 500000000\n40\n500000000 500000000\n''') == '12'"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n10000 400000 500000 900000\n''') == '12'\nassert solution('''\n5\n8 10 2 1000000 30556926000\n''') == '12'\n\nprint(\"All Tests Passed\")\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '12'\nassert solution('5') == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '12'\nassert solution('1') == '12'\nassert solution('1,2,3') == '12'\nassert solution('1,2,2') == '6'\nassert solution('4,4,5,5') == '8'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n10000 400000 500000 900000') == '12'\nassert solution('5\\n8 10 2 1000000 30556926000') == '12'\n\n---"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n10000 400000 500000 900000\n''') == '12'\nassert solution('''\n5\n8 10 2 1000000 30556926000\n''') == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '12'\nassert solution('5') == '12'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(samples.ZAXXAZ) == 'YES'\nassert solution(samples.INPUT_1) == 'NO'\nassert solution(samples.INPUT_2) == 'YES'\nassert solution(samples.INPUT_3) == 'YES'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0''') == 'YES'"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == \"YES\"\nassert solution('3\\n10 10\\n0\\n1 4 0\\n2 5 0\\n3 7 0\\n4 7 0\\n5 4 0\\n6 7 0\\n7 1 0\\n8 6 0\\n9 2 0\\n10 3 0') == \"NO\"\nassert solution('10\\n100 100\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 3 4 5\n0\n0\n0\n0\n0\n5 6 7 8 9\n0\n0\n0\n0\n0\n0''') == 'YES'\nassert solution('''4\n0 1 1 2\n0\n0\n1\n2\n3\n0\n0\n4\n5\n6\n0\n0\n7\n8\n9\n0\n0\n0\n0\n0\n0''') == 'NO'\nassert solution('''10\n0\n0\n1\n0\n0\n2\n0\n0\n3\n0\n0\n4\n0\n0\n5\n0\n0\n6\n7\n8\n0\n0\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0''') == 'NO'\nassert solution('''10\n0\n1\n0\n0\n1\n0\n0\n2\n0\n0\n3\n0\n0\n4\n0\n0\n5\n0\n0\n6\n7\n8\n0\n0\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0''') == 'YES'\n\n'''"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0''') == 'YES'\nassert solution('''2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0''') == 'NO'\nassert solution('''1 2 0\n2 4 0\n3 5 0\n5 4 0\n3 5 0\n6 7 0\n2 4 0\n3 5 0\n3 5 0\n5 4 0\n3 5 0\n4 6 0\n4 7 0\n6 3 0\n5 2 6 0\n1 6 0\n7 3 0\n''') == 'YES'\nassert solution('''2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n2 4 0\n3 5 0\n3 5 0\n5 4 0\n3 5 0\n4 6 0\n4 7 0\n6 3 0\n5 2 6 0\n1 6 0\n7 3 0\n''') == 'NO'\nassert solution('''8 8\n0\n1 1 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n2 4 0\n3 5 0\n3 5 0\n5 4 0\n3 5 0\n4 6 0\n4 7 0\n6 3 0\n5 2 6 0\n1 6 0\n7 3 0\n''') == 'YES'"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0''') == 'YES'\nassert solution('''8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0''') == 'NO'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8 8\\n0\") == 'YES'\nassert solution(\"8 8\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == 'YES'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0''') == 'YES'\n\nassert solution('''5 6\n0\n0\n0\n1 1 0\n3 2 0\n0''') == 'YES'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 5 6 1 2') == '5 6 1 2 3 4'\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4', 'Wrong result'\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\nprint(solution(\n\"\"\"\n3 4 5 6 1 2\n\"\"\"\n))\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '5 6 1 2 3 4'\n'''"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n4') == '1 2 3 4'\nassert solution('1\\n2') == '1 1 1 1 1'\nassert solution('2\\n3') == '2 2 2 2 2'\nassert solution('3\\n3') == '3 3 3 3 3'\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1 2\n''') == '1 2'\nassert solution('''\n3\n1 2 3\n''') == '2 1 3'\nassert solution('''\n4\n2 1 3 4\n''') == '2 4 1 3'\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\""
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n2 3 4') == '3 4 1 2'\nassert solution('6 3') == '3 4 1 2 3'\nassert solution('8 1') == '3 4 1 2 3 4 5 6'\nassert solution('10 3') == '3 4 1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"5 6 1 2 3 4\"\nassert solution(\"\") == \"Impossible\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3\\n4 5 6\\n') == '5 6 1 2 3 4'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2 9 5\") == \"20512\"\nassert solution(\"5 2 8 4\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 7 7 8\n''') == '207'\nassert solution('''\n1 10 9 8\n''') == 'IMPOSSIBLE'\nassert solution('''\n6 12 2 2\n''') == '21212'\nassert solution('''\n8 7 4 2\n''') == '207'\n''')"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n2\n5\n7\n12\n''') == '12'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2 4 5\") == \"13245\"\nassert solution(\"1 2 3 4\") == \"1234\"\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"2 2 4 4\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 4 4\") == \"IMPOSSIBLE\"\nassert solution(\"4 5 6 4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '20512'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3 4\") == \"205\"\nassert solution(\"5 3 7\") == \"1257\"\nassert solution(\"5 7 2\") == \"3684\"\nassert solution(\"5 5 5\") == \"IMPOSSIBLE\"\n\n'''"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 3 3 5\") == \"15\", \"Wrong Answer\"\nassert solution(\"2 8 4 5\") == \"20\", \"Wrong Answer\"\nassert solution(\"2 2 2 2\") == \"IMPOSSIBLE\", \"Wrong Answer\"\nassert solution(\"3 1 5 2\") == \"3\", \"Wrong Answer\"\nassert solution(\"2 2 3 3\") == \"IMPOSSIBLE\", \"Wrong Answer\"\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2 8 4\n''') == '20512'\nassert solution('''\n20 10 5 4\n''') == 'IMPOSSIBLE'\nassert solution('''\n5 3 6 4\n''') == 'IMPOSSIBLE'\n\n'''"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"A\") == \"A\"\nassert solution(\"AA\") == \"AA\"\nassert solution(\"ABCDEF\") == \"ABCDEF\"\nassert solution(\"AAABBCBCCCCCCD\") == \"ABCCCCD\"\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == 2\nassert solution('3 8') == 3\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('2 4 5') == '1'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 3\nBAC\nABC\n''') == '2'\nassert solution('''\n3 8\nHGBDFCAE\nADBGHFCE\nHCFGBDAE\n''') == '3'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == 2\nassert solution(\"3 8\") == 3\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"3\""
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '3'\nassert solution('4 4') == '6'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 2') == '3'\nassert solution('2 3') == '6'\nassert solution('3 2') == '5'\nassert solution('3 3') == '8'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '3'\n\nassert solution('1 1') == '3'\nassert solution('2 1') == '3'\nassert solution('2 2') == '6'"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2\\n') == '3'\nassert solution('1 1\\n') == '3'\nassert solution('2 2\\n') == '6'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '3'\nassert solution([1, 2]) == '3'\nassert solution([1, 2, 3]) == '0'\nassert solution([2, 3, 4]) == '0'\nassert solution([3, 4, 5]) == '0'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '3'\nassert solution([1, 2]) == '3'"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([\n    '1',\n    '2',\n    ]) == '3'\n\nassert solution([\n    '1',\n    '2',\n    ]) == '3'\n\nassert solution([\n    '1',\n    '2',\n    ]) == '2'\n\nassert solution([\n    '1',\n    '2',\n    ]) == '2'\n\nassert solution([\n    '1',\n    '2',\n    ]) == '2'"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '3'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\"\n\nprint(solution())\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '3'"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n''') == '3'\nassert solution('''\n1 1\n1 2\n2 1\n2 2\n3 1\n3 2\n''') == '3'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3') == '3'\nassert solution('5 5\\n2 1 2\\n3 0 2 3\\n3 1 4 5\\n2 1 4\\n2 2 3') == '3'\nassert solution('5 5\\n2 1 2\\n3 0 2 3\\n3 2 4 5\\n2 1 4\\n2 2 3') == '2'\nassert solution('5 5\\n2 1 2\\n3 0 2 3\\n3 1 4 5\\n2 1 4\\n2 2 3') == '1'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3') == '3'\nassert solution('10 10\\n0 1 2\\n1 4 2\\n2 1 3\\n5 2 4\\n3 1 4\\n2 2 3\\n5 2 5\\n2 4 2\\n2 5 3\\n3 5 2') == '4'"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 3\n2 1 2\n2 1 4\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5 3\n1 3 2\n2 4 2\n4 1 1\n1 1 1\n3 4 4\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '3'\nassert solution('5 3') == '3'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3') == '3'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '3'\nassert solution('5 1') == '1'\nassert solution('10 10') == '5'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3') == '3'\nassert solution('7 2\\n3 0 0 1 2 1 3\\n1 1 3\\n2 1 3\\n3 1 3\\n0 0 3\\n1 1 4\\n2 0 3\\n1 0 1\\n0 0 3\\n2 2 4\\n1 0 4\\n2 3 3\\n0 1 2\\n0 1 3\\n0 2 3') == '3'\nassert solution('6 6\\n0 0 0 0 0 1 1\\n1 1 3\\n1 2 2\\n0 0 1 2 3\\n0 0 0 1 2 3\\n1 1 2\\n0 1 2 3\\n1 1 2\\n1 1 2\\n1 2 1\\n0 0 2 3\\n1 1 2 3') == '4'\nassert solution('5 5\\n2 0 0 1 1\\n1 2 2\\n2 1 3\\n1 0 3\\n1 2 2\\n1 1 1\\n2 0 2\\n1 2 0\\n1 1 1\\n1 2 1\\n1 1 2\\n1 0 2\\n1 2 2') == '4'\nassert solution('12 5\\n4 0 2 4 0 0\\n1 0 3 4 3 4\\n0 3 2 4 4 3\\n0 0 1 2 3 3\\n0 2 3 2 4 3\\n0 0 1 1 2 3\\n1 0 3 4 3 3\\n0 0 2 1 2 3 3\\n0 2 0 2 2 3 2\\n1 0 2 3 4 3\\n1 0 2 2 4 3 3\\n2 0 0 2 1 4 3\\n1 0 3 3 3 3\\n2 0 1 1 4 4\\n3 1 4 1 4 4\\n2 0 4 0 1 3\\n1 0 1 4 4 4\\n2 0 1 4 4 4\\n3 0 1 2 4 4\\n2 1 0 4 3 4\\n2 0 1 4 3 4\\n3 0 1 2 3 4\\n2 1 0 3 3 4\\n1 0 2 4 4 4\\n0 0 2 2 4 4 3\\n0 2 0 4 3 3 4\\n1 2 0 2 3 4\\n0 0 1 4 4 4\\n0 1 3 0 4 4 3\\n1 3 0 0 4 4 3\\n0 1 2 0 4 4 3\\n1 0 2 1 4 4 3\\n0 1 2 1 4 4 4\\n0 0 2 3 4 4 4\\n1 0 2 1 4 4 4\\n0 1 2 1 4 4 4\\n1 0 2 1 4 4 4\\n2 1 0 3 4 4 4\\n1 0 1 4 4 4 4\\n2 0 0 3 4 4 4\\n1 0 1 4 4 4 4\\n2 0 0 2 4 4 4\\n2 1 0 4 4 4 4\\n1 0 1 4 4 4 4\\n2 0 1 4 4 4 4\\n3 1 1 4 4 4 4\\n2 0 1 4 4 4 4\\n2 1 0 4 4 4 4\\n1 2 1 4 4 4 4\\n0 0 2 4 4 4 4\\n1 0 2 4 4 4 4\\n2 1 0 4 4 4 4\\n1 2 2 4 4 4 4\\n0 0 1 4 4 4 4\\n1 2 1 4 4 4 4\\n2 0 1 4 4 4 4\\n1 1 1 4 4 4 4\\n1 1 1 4 4 4 4\\n0 2 2 4 4 4 4\\n1 1 1 4 4 4 4\\n0 2 1 4 4 4 4\\n0 0 1 4 4 4 4\\n1 1 1 4 4 4 4\\n2 0 0 2 4 4 4\\n0 0 2 4 4 4 4\\n1 1 0 3 4 4 4\\n0 0 1 4 4 4 4\\n1 0 1 4 4 4 4\\n0 1 1 4 4 4 4\\n2 1 0 3 4 4 4\\n1 1 1 4 4 4 4\\n0 1 1 4 4 4 4\\n1 0 1 4 4 4 4\\n2 0 0 1 4 4 4\\n1 2 1 4 4 4 4\\n0 0 1 4 4 4 4\\n1 1 1 4 4 4 4\\n0 1 1 4 4 4 4\\n1 0 1 4 4 4 4\\n2 0 0 1 4 4 4\\n1 1 1 4 4 4 4\\n1 1 1 4 4 4 4\\n1 0 2 4 4 4 4\\n2 0 0 2 4 4 4\\n1 1 1 4 4 4 4\\n0 1 1 4 4 4 4\\n0 1 1 4 4 4 4\\n0 1 1 4 4 4 4\\n1 2 1 4 4 4 4\\n0 0 1 4 4 4 4\\n0 1 1 4 4 4 4\\n1 0 1 4 4 4 4\\n1 1 1 4 4 4 4\\n1 1 1 4 4 4 4\\n1 2 1 4 4 4 4\\n0 1 1 4 4 4 4\\n1 1 1 4 4 4 4\\n0 0 1 4 4 4 4\\n1 1 1 4 4 4 4\\n0 0 1 4 4 4 4\\n0 0 0 3 4 4 4\\n1 2 1 4 4 4 4\\n1 1 1 4 4 4 4\\n1 1 1 4 4 4 4\\n1 0 1 4 4 4 4\\n0 1 1 4 4 4 4\\n1 0 1 4 4 4 4\\n0 1 1 4 4 4 4\\n0 0 0 3 4 4 4\\n1 0 1 4 4 4 4\\n1 0 1 4 4 4 4\\n0 1 1 4 4 4 4\\n1 0 1 4 4 4 4\\n1 0 1 4 4 4 4\\n1 0 1 4 4 4 4\\n0 0 1 4 4 4 4\\n1 0 1 4 4 4 4\\n0 1 1 4 4 4 4\\n1 1 1 4 4 4 4\\n1 2 1 4 4 4 4\\n0 1 1 4 4 4 4\\n1 1 1 4 4 4 4\\n1 1 1 4 4 4 4\\n1 1 1 4 4 4 4\\n1 1 1 4 4 4 4\\n1 2 1 4 4 4 4\\n1 1 1 4 4 4 4\\n1 1 1 4 4 4 4\\n1 2 1 4 4 4 4\\n0 1 1 4 4 4 4\\n0 1 1 4 4 4 4\\n0 0 1 4 4 4 4\\n0 0 1 4 4 4 4\\n0 0 1 4 4 4 4\\n0 0 1 4 4 4 4\\n1 1 1 4 4 4 4\\n1 0 1 4 4 4 4\\n1 1 1 4 4 4 4\\n1 0 1 4 4 4 4\\n0 0 1 4 4 4 4\\n1 0 1 4 4 4 4\\n0 0 0 3 4 4 4\\n0 1 1"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3\\n') == '3'\nassert solution('1\\n3\\n3\\n3\\n2\\n') == '1'\nassert solution('3\\n4\\n5\\n6\\n') == '2'\nassert solution('3\\n6\\n5\\n4\\n3\\n') == '4'\nassert solution('3\\n0\\n1\\n2\\n') == '1'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 2') == '1'\nassert solution('5 3') == '3'\nassert solution('5 3') == '3'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"YES\\nNO\\n\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1 1') == 'YES\\n'\nassert solution('1\\n1 3') == 'NO\\n'\nassert solution('2\\n1 1\\n1 3') == 'NO\\n'\nassert solution('2\\n1 1\\n1 2\\n2 1') == 'YES\\n'\nassert solution('3\\n1 1\\n1 3\\n2 1') == 'NO\\n'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"YES\\nYES\\nNO\\nYES\\nYES\\nNO\""
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n1 2\n2 1\n2 2\n2 3\n3 1\n3 2\n''') == 'NO'\nassert solution('''\n2\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n''') == 'YES'\nassert solution('''\n1\n1 1\n1 2\n1 3\n2 3\n3 2\n''') == 'NO'\n'''\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n') == 'YES'\nassert solution('3\\n') == 'NO'\nassert solution('4\\n') == 'NO'"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'YES'\nassert solution('1') == 'NO'\nassert solution('2') == 'YES'\nassert solution('1') == 'NO'\nassert solution('1') == 'NO'\n\"\"\""
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n') == \"YES\"\nassert solution('5\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3') == \"NO\"\nprint(solution(input()))\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'YES'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n1\n2\n3\n3\n4\n5\n4\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n2\n1 2\n2 4\n3 4\n3 4\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n5\n1 2\n1 3\n1 4\n2 3\n2 5\n3 3\n3 4\n4 5\n4 4\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n3\n1 1\n1 3\n2 2\n2 3\n3 1\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n3\n1 1\n1 3\n2 2\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n1 1\n1 2\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 3\n2 2\n1 2\n1 2\n1 2\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 3\n1 2\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 2\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 3\n1 2\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 3\n1 2\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 2\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 3\n1 2\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 3\n1 2\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 3\n1 2\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 3\n1 2\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 2\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 3\n1 2\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 3\n1 2\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 3\n1 2\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 3\n1 2\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 3\n2 2\n3 1\n3 2\n3\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2\"\n    ) == \"3.000000000\"\nassert solution(\n    \"20\"\n    ) == \"1.0000000000\"\n\n\"\"\"\nimport random\nimport statistics\nimport time\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0.5'\nassert solution('2') == '2.50000000000001'"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2') == '3.000000000'\nassert solution('2\\n1') == '3.000000000'\nassert solution('10\\n1') == '9.99999999'\nassert solution('9\\n2') == '6.000000000'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '3.000000000'\nassert solution('20') == '7.20000000000'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '3.000000000'\n'''\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '3.000000000'\nassert solution('6') == '6.999999996'\nassert solution('100') == '100.00000001'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '3.000000000'\nassert solution('8') == '11.99999999'\nassert solution('10') == '24.0'\nassert solution('40') == '84.0'\nassert solution('50') == '191.0'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '3.000000000'\nassert solution('20') == '14.5'\nassert solution('10000') == '844.0'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n1\n\"\"\"\n) == \"3.000000000\"\n\nassert solution(\n\"\"\"\n10\n\"\"\"\n) == \"11.833333333\"\n\nassert solution(\n\"\"\"\n50\n\"\"\"\n) == \"100.500\"\n\nassert solution(\n\"\"\"\n100000000\n\"\"\"\n) == \"199999999.999\"\n\nassert solution(\n\"\"\"\n10\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '3.000000000'\nassert solution('123') == '7.000000000'\nassert solution('1000') == '4.000000000'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2\n3\n''') == '1'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n3') == '1'\n\"\"\""
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2\\n3') == '1'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"3 4\") == \"1\"\nassert solution(\"5 4\") == \"2\"\nassert solution(\"5 5\") == \"2\"\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n3') == '1'\nassert solution('1 2\\n3') == '1'\nassert solution('10 3\\n3 2 1 8') == '1'\nassert solution('1 2\\n3') == '1'\nassert solution('10 3\\n3 2 1 8') == '2'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 2') == '0'\nassert solution('10 11 12') == '4'\nassert solution('10 10 11 12') == '2'\nassert solution('10 10 10 11 12') == '3'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n1 2 3\n1 1 2\n''') == '2'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n3\n2\n3\n1\n''') == '3'\nprint('all test cases are passed')"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '2'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4\\n') == '3'\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4\\n') == '2'\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4\\n') == '3'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '1'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4\\n') == '3'\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4\\n') == '2'\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4\\n') == '3'\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4\\n') == '2'"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\nSample Input:\n3 5 2\n0 1 2\n1 2 4\n1 3 4\nSample Output:\n1\n2\n1\n3\n''') == '2'"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\nHelloWorld.c\nint Main() {\n    printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***''') == '''2 HelloWorld.c\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\nHelloWorld.c\\nint Main() {return 0}\\n***END***') == '2 HelloWorld.c\\ndef solution(stdin): return 0\\n'\nassert solution('1\\nint Main() {return 0}\\n***END***') == '1\\nint solution(stdin): return 0\\n'\n'''\n\n'''\nSample Input:\n2\nFile1.c\nint main() {\n    int a = 3;\n    int b = 3;\n}\nFile2.c\nint main() {\n    int a = 1;\n    int b = 4;\n}\n***END***\nFile3.c\nint main() {\n    int a = 1;\n    int b = 3;\n}\n***END***\nSample Output:\n2 File1.c File2.c\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"2 Add.c\"\n\nSample Input:\n2\nHelloWorld.c\nint Main() {\n    printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***\nSample Output:\n2 HelloWorld.c\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"HelloWorld.c\\nint Main() {\\n  printf(\"Hello %d\\n\",i);\\n}\\n***END***\") == \"2 Add.c\"\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('HelloWorld.c') == 'HelloWorld.c'\nassert solution('Add.c') == 'Add.c'\nassert solution('5.c') == '5.c'\nassert solution('7.c') == '7.c'\nassert solution('1.c') == '1.c'\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\nHelloWorld.c\\nint Main() {\") == \"2 HelloWorld.c\\ndef solution(stdin: str) -> str:\"\nassert solution(\"2\\nAdd.c\\nint Main() {\") == \"2 Add.c\\ndef solution(stdin: str) -> str:\"\nassert solution(\"0\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\nHelloWorld.c\nint Main() {\n  printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***\n''') == '2 HelloWorld.c\\n1 Add.c\\n3 HelloWorld.c\\n2 Add.c\\n'\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\nHelloWorld.c\\nint Main() {\\n    printf('Hello %d\\n', i);\\n}\\n***END***\") == \"2 HelloWorld.c def solution(stdin: str) -> str:\""
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\nHelloWorld.c\\nint Main() {\") == \"2 HelloWorld.c\\n def solution(stdin: str) -> str:\""
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('HelloWorld.c') == 'HelloWorld.c'\n\nassert solution('Add.c') == 'Add.c'\n\nassert solution('1 2 3') == '0'\n\nassert solution('1 2 3 4') == '1 2 3 4'\n\nassert solution('1 2 3 4 5') == '0'"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 3\n2 2 2\n4 2 1\n4 4 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 2\n1 1\n1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 3\n2 2 2\n4 2 1\n4 4 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 1\n1 1 1\n1 1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 2\n3 3 3 2 2\n5 5 5 5 5\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1'\n\nassert solution('2 3') == '1'\n\nassert solution('4 2 1') == '2'\n\nassert solution('4 4 1') == '2'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n1') == '1'\nassert solution('2\\n3\\n1') == '1'\nassert solution('3\\n2\\n1') == '2'"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2 2 2\\n4 2 1\\n4 4 1') == '1'\nassert solution('3 3\\n2 2 2\\n4 2 1\\n4 4 1') == '2'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n2 2 2\\n4 2 1\\n4 4 1\") == \"1\\n2\\n2\""
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n2 2 2\n4 2 1\n4 4 1\n4 5 1\n4 5 1\n''') == '2'\nassert solution('''\n10\n2 2 2\n2 2 2\n2 2 3\n2 2 3\n2 2 4\n2 2 5\n2 3 2\n2 3 3\n2 3 4\n2 3 5\n2 4 2\n2 4 3\n2 4 4\n2 4 5\n2 5 2\n2 5 3\n2 5 4\n2 5 5\n3 2 2\n3 2 3\n3 2 4\n3 2 5\n3 3 2\n3 3 3\n3 3 4\n3 3 5\n3 4 2\n3 4 3\n3 4 4\n3 4 5\n3 5 2\n3 5 3\n3 5 4\n3 5 5\n4 2 2\n4 2 3\n4 2 4\n4 2 5\n4 3 2\n4 3 3\n4 3 4\n4 3 5\n4 4 2\n4 4 3\n4 4 4\n4 4 5\n4 5 2\n4 5 3\n4 5 4\n4 5 5\n5 2 2\n5 2 3\n5 2 4\n5 2 5\n5 3 2\n5 3 3\n5 3 4\n5 3 5\n5 4 2\n5 4 3\n5 4 4\n5 4 5\n5 5 2\n5 5 3\n5 5 4\n5 5 5\n''') == '3'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n2 2 2\n4 2 1\n4 4 1\n''') == '2'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n2 2 2\n4 2 1\n4 4 1\n''') == '1\\n2\\n2\\n'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2\n2 2\n2 2\n''') == '1'\nassert solution('''3 3\n2 2 2\n4 2 1\n4 4 1\n''') == '2'\nassert solution('''3 1\n2 2\n2 2\n''') == '1'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 20\") == \"5\"\nassert solution(\"3 20 50 70 10\") == \"10\"\nassert solution(\"3 20 100 110 4\") == \"9\"\nassert solution(\"3 200 100 110 4\") == \"9\"\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\nassert solution('''\n4\n100 110 4\n50 70 10\n150 190 16\n''') == '7'\nassert solution('''\n10\n100 110 4\n50 70 10\n150 190 16\n''') == '9'\nassert solution('''\n1\n100 110 4\n50 70 10\n150 190 16\n''') == '10'\nassert solution('''\n3\n100 110 4\n50 70 10\n150 190 16\n''') == '7'"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 20') == '5'\nassert solution('5 20') == '5'\nassert solution('100 110 4') == '5'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\nprint(solution('''\n3\n50 70 10\n100 110 4\n150 190 16\n'''))\nassert solution('''\n3\n20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\nprint(solution('''\n3\n20\n50 70 10\n100 110 4\n150 190 16\n'''))\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\n\"\"\"\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n20\\n50 70 10\\n100 110 4\\n150 190 16') == '5'\nassert solution('2\\n20\\n50 70 10\\n100 110 4\\n150 190 16') == '10'\nassert solution('3\\n20\\n50 70 10\\n100 110 4\\n150 190 16') == '5'\nassert solution('4\\n20\\n50 70 10\\n100 110 4\\n150 190 16') == '10'\nassert solution('5\\n20\\n50 70 10\\n100 110 4\\n150 190 16') == '5'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\nassert solution(\n'''\n5 20\n1 5 2\n''') == '3'\n'''\nChallenge\nO(n*u^n) time complexity, O(1) space complexity\n'''\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n10\n1 1 1\n''') == '1', f\"First test case failed: {solution('''1\n10\n1 1 1\n''') == '1'}\"\nassert solution('''\n2\n3\n1 1 1\n2 2 2\n''') == '2', f\"Second test case failed: {solution('''2\n3\n1 1 1\n2 2 2\n''') == '2'}\"\nassert solution('''\n3\n5\n1 1 1\n2 2 2\n3 3 3\n''') == '3', f\"Third test case failed: {solution('''3\n5\n1 1 1\n2 2 2\n3 3 3\n''') == '3'}\"\nassert solution('''\n3\n10\n1 1 1\n2 2 2\n3 3 3\n''') == '5', f\"Fourth test case failed: {solution('''3\n10\n1 1 1\n2 2 2\n3 3 3\n''') == '5'}\"\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 20\n50 70 10\n100 110 4\n150 190 16\n\"\"\") == \"5\"\nassert solution(\"\"\"\n3 20\n0 0 10\n0 0 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 20\n50 100 10\n100 110 4\n150 190 16\n\"\"\") == \"4\"\n\"\"\"\nExplanation\nFor the example input above, the buffer sizes:\n\np = 0, b = 0, u = 0\np = 50, b = 70, u = 10\np = 100, b = 110, u = 4\np = 150, b = 190, u = 16\nThe minimum buffer sizes after the second is 3 - (70 + 4 + (110 + 4) = 3.\n\"\"\"\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\nassert solution('''\n3 20\n100 110 4\n150 190 16\n''') == '15'\n\n'''\nn, C = map(int, input().split())\n\ndata = []\nfor i in range(n):\n    p, b, u = map(int, input().split())\n    data.append((p, b, u))\n\ndata.sort(key = lambda x: x[2])\n\nminB = 0\n\nfor i in range(n):\n    minB = max(minB, data[i][1] - data[i][2])\n\nprint(minB)"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == '26'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3') == 'IMPOSSIBLE'\nassert solution('2 3') == '26'\nassert solution('2 5') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\n''') == '26'"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5') == '26'\nassert solution('1') == 'IMPOSSIBLE'\nassert solution('6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)') == '26'\nassert solution('2') == 'IMPOSSIBLE'\nassert solution('1 (2 2)') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5\\n(2 5)\\n....#\\n.#.#.\\n1') == 'IMPOSSIBLE'\nassert solution('5 5\\n(2 5)\\n....#\\n.#.#.\\n1\\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)') == '26'\nassert solution('5 5\\n(2 5)\\n....#\\n.#.#.\\n1\\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)') == 'IMPOSSIBLE'\nassert solution('5 5\\n(2 5)\\n....#\\n.#.#.\\n1\\n6 (3 2) (3 3) (2 3) (1 3) (1 2)') == '26'\nassert solution('5 5\\n(2 5)\\n....#\\n.#.#.\\n1\\n6 (3 2) (3 3) (2 3) (1 3) (1 2)') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5\\n(2 5)\\n(5 3)\\n.....\\n.#.#.\\n1\\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)'\n                '\\n') == \"26\"\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '5 5\\n'\n    '(2 5) (5 3)'\n    '.....'\n    '#.#.#'\n    '#.#.#\\n'\n    '1\\n'\n    '6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)'\n) == '26'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\n''') == '26'\nassert solution('''\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\n''') == 'IMPOSSIBLE'\nassert solution('''\n4 4\n(2 1) (1 2) (2 3) (3 2)\n.....\n....#\n.##.#\n.###.\n...#.\n''') == '13'\nassert solution('''\n4 4\n(2 1) (1 2) (2 3) (3 2)\n.....\n....#\n.##.#\n.###.\n...#.\n''') == 'IMPOSSIBLE'\nassert solution('''\n4 4\n(2 1) (1 2) (2 3) (3 2)\n.....\n....#\n.##.#\n.###.\n...#.\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 5\") == \"26\"\nassert solution(\"5 5\") == \"26\"\nassert solution(\"1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    6\n    -1 0\n    0 0\n    1 0\n    -1 1\n    0 2\n    1 1\n    ''') == 'failure'\n    assert solution('''\n        6\n        -1 0\n        0 0\n        1 0\n        -1 1\n        0 2\n        1 1\n        ''') =='success'"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') == 'failure'\nassert solution('5\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') =='success'\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'failure'\nassert solution('2') =='success'\nassert solution('3') == 'failure'\nassert solution('4') =='success'\nassert solution('5') =='success'"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1\n''') == 'failure'\nassert solution('''\n6\n1 1\n1 2\n3 5\n-1 2\n4 -1\n-3 3\n''') =='success'\nassert solution('''\n1\n-1\n''') == 'failure'\n''')\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 -1\\n0 0\\n1 0\\n-1 1\") == \"failure\"\n\nassert solution(\"5\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\") == \"success\"\n\nassert solution(\"10\\n-1 -1\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n-1 2\\n0 3\\n1 3\\n-1 4\\n0 4\") == \"failure\"\n\nassert solution(\"4\\n1 -1\\n0 0\\n1 0\\n-1 1\") == \"success\""
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '5\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n'\n    ) =='success'\nassert solution(\n    '10\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n-1 2\\n0 3\\n1 2\\n-1 3\\n0 4\\n1 3\\n'\n    ) == 'failure'\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"success\"\nassert solution(\"5\\n1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"success\"\nassert solution(\"5\\n1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"success\"\nassert solution(\"5\\n1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"failure\"\nassert solution(\"5\\n1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"failure\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"failure\"\nassert solution(\"10\") == \"success\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n') == 'failure'\n\"\"\""
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') == 'failure'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 2\\n1 2\\n3 3\\n5 2 2') == 'impossible'\nassert solution('2 1 3 2\\n2 3 4\\n2 3 4\\n2 3 4') == 'possible'\nassert solution('1 1 1\\n2 2 2\\n3 3 3\\n5 5 5') == 'impossible'\nassert solution('5 2 2\\n1 2\\n3 3 3\\n5 2 2') == 'possible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 2\\n1 2\\n3 3\\n5 2 2') == 'possible'\nassert solution('2 2 2\\n1 2\\n3 3\\n5 2 2') == 'impossible'\nassert solution('4 2 3\\n6 5\\n8 1 2\\n7 3\\n2 2\\n1 2\\n') == 'impossible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2 2\\n1 2\\n3 3\") == \"possible\"\nassert solution(\"2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2\") == \"impossible\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == 'impossible'\nassert solution('3 3') == 'possible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2\") == \"possible\"\nassert solution(\"1 2\") == \"impossible\"\nassert solution(\"3 3\") == \"impossible\"\nassert solution(\"5 2 2\") == \"possible\"\nassert solution(\"5 2 2\") == \"possible\""
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 2\\n1 2\\n3 3') == 'possible'\nassert solution('2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2\\n') == 'impossible'\n\"\"\""
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 2') == 'possible'\nassert solution('1 2') == 'impossible'\nassert solution('3 3') == 'impossible'\nassert solution('5 2 2') == 'impossible'\nassert solution('5 2 2') == 'impossible'\n\nimport itertools\nn,q,s = (int(x) for x in stdin.split())\nprint('possible' if sum(1 for l in map(lambda x: int(x) <= q, list(itertools.chain(*[[x]*(q+1) for x in range(1,n+1)])))) <= s else 'impossible')"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\n1 2\n3 4''') == 'impossible'\nassert solution('''5 4\n1 2\n3 4\n5 2''') == 'possible'"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2 2\n1 2\n3 3\n5 2 2\n5 2 2\n''') == \"possible\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2 2\n1 2\n3 3\n5 2 2\n5 2 2\n''') == 'possible'\nassert solution('''\n3 2 2\n1 2\n3 3\n5 2 2\n5 2 2\n''') == 'impossible'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '0'\nassert solution('1 1 2') == '1'\nassert solution('-1 1 2') == '1'"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3 2\n1 1 2\n1 2 1\n-1 1 2\n\"\"\") == \"0\"\nassert solution(\n\"\"\"\n4 3\n1 2 1 3\n2 3 1 2\n3 2 1 3\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n10 10\n
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 1 2') == '1'\nassert solution('3 1 2 3') == '2'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '0'\nassert solution('1 1 2') == '1'\nassert solution('1 2 1') == '1'\nassert solution('-1 1 2') == '0'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '0'\nassert solution('''\n3 3\n1 1 2\n2 1 3\n2 3 1\n''') == '2'\nassert solution('''\n5 4\n1 1 2\n3 3 2\n1 1 4\n3 3 3\n3 3 4\n''') == '1'\nassert solution('''\n5 4\n1 2 1\n1 2 3\n3 3 1\n1 2 4\n2 3 2\n2 2 2\n2 2 4\n''') == '1'\nassert solution('''\n5 2\n1 1 1\n1 1 2\n''') == '0'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 2\n1 1 2\n1 2 1\n-1 1 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1 2\n2 1\n1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 2\n3 2 1\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 2\n-1 1 2\n-1 2 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 5\n1 1 1 2 1 1\n1 2 1 1 2 1\n1 1 1 2 1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '0'\nassert solution('''\n3 1\n1 2\n1 1\n-1 1\n''') == '2'\nassert solution('''\n3 4\n2 2 4 1\n2 3 1 4\n2 4 3 1\n1 2 4 1\n1 4 2 1\n''') == '0'\n''')"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '0'\nassert solution('1 2') == '1'\nassert solution('-1 1 2') == '0'\n\n'''"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 2\n1 1 2\n1 2 1\n-1 1 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4 5\n-1 -1 1 2 1\n1 1 1 3 1\n2 2 2 4 2\n3 3 1 2 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 2\n-1 -1 2\n2 -2 3\n1 1 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 5\n1 1 1 2 1\n1 1 1 3 1\n2 2 2 4 2\n3 3 1 2 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3 2\n-1 -1 2\n2 -2 3\n1 1 3\n\"\"\") == \"0\""
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '3'\nassert solution('4 2') == '4'\n\nprint(solution(*tuple(map(int, input().split()))))\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"4 2\") == \"4\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"5 3\") == \"6\"\nassert solution(\"8 4\") == \"10\"\nassert solution(\"9 9\") == \"10\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '5'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n353\") == \"3\\n1313\"\nassert solution(\"4 2\\n1234\") == \"4\\n1313\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '5'\nassert solution('10') == '1'"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n12345') == '12345'\nassert solution('2\\n12345') == '12345'\nassert solution('3\\n12345') == '12345'\nassert solution('4\\n12345') == '12345'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"4 2\") == \"4\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\\\n12 30 45 3 11\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\\\n3 47 0 4 9\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\\\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\\\n3 47 0 4 9\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\\\n3 47 0 4 9\n\"\"\") == \"YES\""
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n12 30 45 3 11\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n3 47 0 4 9\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'\n\n'''\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('12 30 45 3 11') == \"YES\"\nassert solution('12 0 1 12 1') == \"YES\"\nassert solution('3 47 0 4 9') == \"YES\""
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\""
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('3 47 0 4 9') == 'YES'\nassert solution('3 23 5 2 9') == 'YES'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('3 47 0 4 9') == 'YES'\n\n'''\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'\nprint(solution(input()))\n\n\n\n##------OR------"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('12 30 45 3 11') == \"NO\"\nassert solution('12 0 1 12 1') == \"YES\"\nassert solution('3 47 0 4 9') == \"YES\"\nassert solution('11 21 51 37 81 32 60') == \"YES\"\nassert solution('12 32 31 17 1 21 28') == \"NO\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([1, 1, 2, 3, 1, 0]) == \"3\"\nassert solution([1, 1, 2, 3, 1, 0]) == \"0\"\nassert solution([1, 1, 2, 3, 1, 0]) == \"0\"\n\n\n------Ans\n\n1. We can obtain optimal routes to collect $3$ data nodes at the same time using 2D grid search.\n\n2. We can obtain optimal routes to collect $2$ data nodes at the same time using 2D grid search.\n\n3. We can't get more than $4$ nodes at the same time. \n\n\n------Ans\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == \"2\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 1 2 3 1 0\n2 4 20''') == '3'\nassert solution('''1 1 2 3 1 0\n2 2 1''') == '0'\nassert solution('''1 1 2 3 1 0\n15 27 26''') == '2'\nassert solution('''1 1 2 3 1 0\n2 2 1''') == '0'\nprint(solution('''1 1 2 3 1 0\n2 4 20'''))\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 1 2 3 1 0\n2 4 20\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1 1 2 3 1 0\n15 27 26\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 1 2 3 1 0\n2 2 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 1 2 3 1 0\n2 2 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 2 3 1 0\\n2 4 20') == '3'\nassert solution('1 1 2 3 1 0\\n15 27 26') == '2'\nassert solution('1 1 2 3 1 0\\n2 2 1') == '0'\nassert solution('1 1 2 3 1 0\\n15 22 22') == '0'\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"1 1 2 3 1 0\n2 4 20\"\"\") == \"3\"\nassert solution(\"\"\"1 1 2 3 1 0\n2 2 1\"\"\") == \"0\"\nassert solution(\"\"\"1 1 2 3 1 0\n15 27 26\"\"\") == \"2\""
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 2 3 1 0\\n2 4 20\") == \"3\"\nassert solution(\"1 1 2 3 1 0\\n15 27 26\") == \"2\"\nassert solution(\"1 1 2 3 1 0\\n0 0 0\") == \"0\""
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 1 2 3 1 0\n2 4 20''') == '3'\nassert solution('''1 1 2 3 1 0\n15 27 26''') == '2'\nassert solution('''1 1 2 3 1 0\n2 2 1''') == '0'\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 2 3 1 0') == '3'\nassert solution('2 4 20') == '2'\nassert solution('1 1 2 3 1 0') == '0'\nassert solution('1 1 2 3 1 0') == '0'\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1 2 3 1 0\n2 4 20\n''') == '3'\nassert solution('''\n1 1 2 3 1 0\n15 27 26\n''') == '2'\nassert solution('''\n1 1 2 3 1 0\n2 2 1\n''') == '0'\nassert solution('''\n1 1 2 3 1 0\n15 27 26\n''') == '0'\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '4'\nassert solution('3') == '6'\nassert solution('3') == '8'\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n0 0 1\n2 0 1\n4 0 1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n0 0 2\n3 0 2\n6 0 2\n\"\"\") == \"8\"\nassert solution(\"\"\"\n3\n0 0 2\n3 0 2\n6 0 2\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4'\nassert solution('3') == '4'\nassert solution('3') == '4'\n\"\"\""
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    2\n    0 0 1\n    2 0 1\n''') == '4'\nassert solution('''\n    3\n    0 0 1\n    2 0 1\n    4 0 1\n''') == '4'\nassert solution('''\n    3\n    0 0 2\n    3 0 2\n    6 0 2\n''') == '8'\n'''"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    3\n    0 0 1\n    2 0 1\n    4 0 1\n''') == '4'\n\nassert solution('''\n    3\n    0 0 2\n    2 0 2\n    1 1 2\n''') == '8'\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([0, 0, 1]) == 4\nassert solution([2, 0, 1]) == 3\nassert solution([3, 0, 2]) == 8\nassert solution([0, 0, 2]) == 3\nassert solution([0, 0, 1]) == 4\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n0 0 1\n2 0 1\n4 0 1\n''') == '4'\nassert solution('''\n3\n0 0 2\n3 0 2\n6 0 2\n''') == '8'\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 1 1\n2 1 2\n2 2 1\n3 3 3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n0 0 1\n2 0 1\n4 0 1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n0 0 2\n1 1 2\n2 0 2\n3 3 3\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n0 0 1\n2 0 1\n4 0 1\n''') == '4'\n\nassert solution('''3\n0 0 2\n3 0 2\n6 0 2\n''') == '8'\n\nassert solution('''3\n0 0 1\n2 0 1\n1 1 2\n''') == '8'\n\nassert solution('''6\n0 0 2\n3 0 2\n6 0 2\n2 2\n4 4\n5 5\n''') == '8'\n\nassert solution('''3\n0 0 1\n2 0 1\n0 0 2\n''') == '2'\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"YES\"\nassert solution('''0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == \"YES\"\nassert solution('''6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n''') == \"YES\"\nassert solution('''3 1 2 5 5 3 1\n4 7 6 9 10 7 8\n4 6 7 9 10 7 8\n''') == \"NO\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1\") == \"YES\"\nassert solution(\"0 0 6 0 6 6 0 6\\n7 4 4 7 7 10 10 7\") == \"NO\""
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == 'YES'\n\nassert solution('''\n0 0 6 0 6 6 0 6\n7 3 9 5 11 3 9 1\n''') == 'NO'\n\nassert solution('''\n7 5 5 7 7 10 10 7\n7 4 4 7 7 10 10 7\n''') == 'YES'\n\nassert solution('''\n7 5 5 7 7 10 10 7\n7 4 4 7 7 10 10 7\n''') == 'NO'\n\nassert solution('''\n0 0 6 0 6 6 0 6\n0 0 6 0 6 6 6 0\n''') == 'NO'"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == 'YES'\nassert solution('''\n6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n''') == 'YES'\nassert solution('''\n6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n''') == 'NO'"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1\") == \"YES\"\nassert solution(\"0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1\") == \"NO\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == 'YES'\nassert solution('''\n0 0 6 0 6 6 0 6\n7 4 4 7 7 10 10 7\n''') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n    '''\n) == 'YES'\n\nassert solution(\n    '''\n6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n    '''\n) == 'NO'\n\nassert solution(\n    '''\n6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n    '''\n) == 'YES'"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == 'YES'\n\nassert solution('''\n6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n''') == 'YES'\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\") == \"YES\"\nassert solution(\"1 3 3 5 5 3 3 1\") == \"NO\""
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == \"YES\"\nassert solution('''\n0 0 6 0 6 6 0 6\n7 3 9 5 11 3 9 1\n''') == \"NO\"\n\n\n\n\"\"\""
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n0\\n\") == \"sjfnb\"\nassert solution(\"2\\n1 0\\n\") == \"sjfnb\"\nassert solution(\"2\\n2 2\\n\") == \"cslnb\"\nassert solution(\"3\\n2 3 1\\n\") == \"sjfnb\"\n\n[exec(i) for i in filter(lambda x: x.strip(),[l.strip() for l in stdin.strip().split(\"\\n\")])]\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'cslnb'\nassert solution('2') =='sjfnb'\nassert solution('3') =='sjfnb'\nassert solution('4') == 'cslnb'\nassert solution('5') =='sjfnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() in (\"sjfnb\", \"cslnb\")\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"sjfnb\"\nassert solution(\"2\") == \"cslnb\"\nassert solution(\"3\") == \"sjfnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == \"sjfnb\"\nassert solution('2') == \"cslnb\"\nassert solution('3') == \"sjfnb\"\nassert solution('3') == \"cslnb\"\nassert solution('4') == \"sjfnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n3\n2 0\n''') == 'cslnb'\n\nassert solution(\n'''\n2\n1 0\n''') == 'cslnb'\n\nassert solution(\n'''\n3\n2 2\n''') =='sjfnb'\n\nassert solution(\n'''\n3\n2 3 1\n''') =='sjfnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') =='sjfnb'\nassert solution('2') == 'cslnb'\nassert solution('3') =='sjfnb'\nassert solution('4') == 'cslnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2 3 1\\n') == \"sjfnb\"\nassert solution('2\\n1 0\\n') == \"cslnb\"\nassert solution('3\\n2 3 1\\n') == \"sjfnb\""
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"sjfnb\"\nassert solution(\"2\") == \"sjfnb\"\nassert solution(\"3\") == \"sjfnb\"\nassert solution(\"4\") == \"cslnb\""
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n0\n\"\"\") == \"sjfnb\"\nassert solution(\"\"\"\n2\n1 0\n\"\"\") == \"sjfnb\"\nassert solution(\"\"\"\n2\n2 2\n\"\"\") == \"sjfnb\"\nassert solution(\"\"\"\n3\n2 3 1\n\"\"\") == \"sjfnb\"\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n2\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"1\""
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 4\") == \"1\"\nassert solution(\"3 5\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"3 1\") == \"0\"\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5\\n1 5 3') == '2'\nassert solution('1 2\\n1') == '1'\nassert solution('1 1\\n1') == '0'\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 5\n1 5 3\n''') == '2'\n\nassert solution('''1 2\n1\n''') == '1'\n\nassert solution('''1 1\n1\n''') == '0''')\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 5\n1 5 3\n''') == '2'\n\nassert solution('''\n1 2\n1\n''') == '1'\n\nassert solution('''\n1 1\n1\n''') == '0'\n\nassert solution('''\n1 1\n1\n''') == '0'\n\nassert solution('''\n1 1\n1\n''') == '0'"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2\n1\n''') == \"1\"\nassert solution('''\n1 1\n1\n''') == \"0\"\nassert solution('''\n10 10\n1 2 3 4 5 6 7 8 9 10\n''') == \"9\"\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5') == '2'\nassert solution('1 2') == '1'\nassert solution('1 1') == '0'\nassert solution('0') == '0'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 1\n1 5 3\n''') == '2'\nassert solution('''1 2\n1\n''') == '1'\nassert solution('''3 4\n4 1 2\n''') == '1'\nassert solution('''4 1\n1 3 4\n''') == '1'\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([3, 5], [1, 5, 3]) == 2\nassert solution([1, 2], [1]) == 1\nassert solution([1, 1], [1]) == 0\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 1') == '2'\nassert solution('3 5') == '3'\nassert solution('5 5') == '4'\n\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_string) == \"2 -1 0 1\"\n\n\"\"\"\n\n\nfrom math import gcd\nfrom sys import stdin"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\\n0 1\\n1\"\nassert solution(\"2\") == \"2\\n-1 0 1\\n1\"\n\n\"\"\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1 0 1'"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1 0 1'\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1 0 1'\nassert solution('2') == '2 -1 0 1'"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1 0 1'\nassert solution('3') == '-1 -1 -1'\n\"\"\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1 0 1'\nassert solution('4') == '2 -1 0 1'\n\n'''\nimport math"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1 0 1'\nassert solution('3') == '-1 0 1'\n\n\n'''\n\nfrom math import gcd"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2 3\n2 3 4''') == \"2 0 1\"\nassert solution('''2\n0 1\n1 0''') == \"1\"\nassert solution('''4\n1 2 3\n2 3 4''') == \"1 0 1\"\nassert solution('''4\n0 1\n1 0''') == \"1\"\nassert solution('''6\n0 0 0 0 0 1\n0 0 1 0 1''') == \"2 0 1\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '-1 0 1'\nassert solution('10') == '-1 0 1'\nassert solution('21') == '-1 0 1'\nassert solution('11') == '-1 0 1'\nassert solution('15') == '-1 0 1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1 5 4') == '1 3 3', solution('3 1 5 4')\nassert solution('3 1 5 3') == '2 3 2', solution('3 1 5 3')\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1 5 4\n1 2 1 3\n''') == '1 3 3'\nassert solution('''\n3 1 5 3\n1 3 1\n''') == '1 2 2'"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 5 4\\n1 2 1 3\\n') == '1 3 3'\nassert solution('3 1 5 3\\n1 3 1\\n') == '1 2 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 1 5 3\n1 3 1\n\"\"\") == \"1 3 3\"\nassert solution(\"\"\"\n3 1 5 3\n1 3 1\n\"\"\") == \"2 3 2\"\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 5 4') == '1 3 3', 'First'\nassert solution('3 1 5 3') == '2 3 2', 'Second'"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 5 3\n1 2 2 1 3 1 3 3\n''') == '1 2 1 2 3 1 3 3'\nassert solution('''\n6 2 8\n2 1 3 1 2 1\n''') == '1 2 1 2 3 1 3'\nassert solution('''\n20 2 8\n1 2 3 4 5 6 7 8 9 1 2 3 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(example_input) == answer\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 5 4') == '1 3 3'\nassert solution('3 1 5 3') == '2 3 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 5 4') == '1 3 3'\nassert solution('3 1 5 3') == '1 3 1'"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('111') == '10'\nassert solution('111111011') == '169'\nassert solution('111011101') == '177'\nassert solution('101110101') == '17'\nassert solution('110110101') == '17'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"110\") == \"3\"\nassert solution(\"111111011\") == \"169\"\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '3'\nassert solution('111111011') == '169'\nassert solution('3') == '3'\n\"\"\"\n\nn = int(input())\nk = int(input())\nn_2_bit = 1 << (n.bit_length()-1)\n\nspecial_numbers = []\n\nfor i in range(1 << (n.bit_length()-1)):\n    number = n_2_bit - i\n    count = 0\n    while number > 0:\n        number = number & (number - 1)\n        count += 1\n    if count >= k:\n        special_numbers.append(number)\n\nspecial_numbers.sort()\n\nprint(len(special_numbers))\nprint(\"{:b}\".format(special_numbers[-1]))\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\n2\n''') == '3'\nassert solution('''\n11\n2\n''') == '169'\nassert solution('''\n
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '110',\n    '2') == '3'\n\nassert solution(\n    '111111011',\n    '2') == '169'\n\nassert solution(\n    '110110101',\n    '2') == '67'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"110\") == \"3\"\nassert solution(\"111111011\") == \"169\"\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('110') == '3'\nassert solution('1101_2') == '169'\nassert solution('1_1_1_1') == '3'\nassert solution('111111011') == '169'"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"110\") == \"3\"\nassert solution(\"111111011\") == \"169\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 1 4 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n\"\"\") == \"33.121375178000\"\nassert solution(\"\"\"\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n\"\"\") == \"33.121375178000\"\n\nassert solution(\"\"\"\n3 1 1 2 0 0\n3\n1 1\n2 1\n2 2\n\n\"\"\") == \"11.084259940083\"\nassert solution(\"\"\"\n3 0 4 2 2 0\n3\n3 2\n3 5\n3 5\n3 3\n\"\"\") == \"11.084259940083\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n''') == '33.121375178000'\nassert solution('''4 4 2 2 0\n4\n4 2\n3 4\n2 4\n''') == '12.86547446883'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\n\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_string) == \"33.121375178000\"\nprint(solution(input_string))\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\nassert solution('3') == '0.000000'\nassert solution('5') == '0.000000'\nassert solution('4') == '0.000000'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('5 0 4 2 2 0') == '33.121375178000'"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    3 1 1 2 0 0\n    3\n    1 1\n    2 1\n    2 3\n    ''') == '11.084259940083'\nassert solution('''\n    5 0 4 2 2 0\n    5\n    5 2\n    3 0\n    5 5\n    3 5\n    3 3\n    ''') == '33.121375178000'\n''')\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 1 4 2 2\n3 1\n3 1\n2 3\n''') == '33.121375178000'\nassert solution('''\n3 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n''') == '11.084259940083'\nassert solution('''\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n''') == '33.121375178000'\nassert solution('''\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n''') == '33.121375178000'"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 0 2 1 1') == '6.7675584278866'\nassert solution('6 0 4 1 1') == '13.451176635754'\nassert solution('6 0 4 3 0') == '15.518958116913'\nassert solution('5 0 4 2 2') == '33.121375178000'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n1 1\n''') == '11.084259940083'\nassert solution('''\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n''') == '33.121375178000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n8 5\n''') == '2'\nassert solution('''\n8 15\n''') == '1'\nassert solution('''\n7 20\n''') == '0'\nassert solution('''\n1000000000000 1000000000001\n''') == '500000000000'\nprint('OK')"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n10\n''') == '0'\n\nassert solution('''\n8\n5\n''') == '2'\n\nassert solution('''\n7\n20\n''') == '1'\n\nassert solution('''\n1000000000000\n1000000000001\n''') == '500000000000'"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8 5\n''') == '2'\nassert solution('''8 15\n''') == '1'\nassert solution('''7 20\n''') == '0'\nassert solution('''1000000000000 1000000000001\n''') == '500000000000'\nprint('Tests passed')\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n8 5\n''') == '2'\nassert solution('''\n7 20\n''') == '1'\nassert solution('''\n1000000000000 1000000000001\n''') == '500000000000'"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n    3 5\n\"\"\") == \"2\"\nassert solution(\"\"\"\n    8 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n    7 20\n\"\"\") == \"0\"\nassert solution(\"\"\"\n    1000000000000 1000000000001\n\"\"\") == \"500000000000\""
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1, 5\") == \"0\"\nassert solution(\"8, 5\") == \"1\"\nassert solution(\"15, 5\") == \"2\"\nassert solution(\"7, 20\") == \"0\"\nassert solution(\"1000000000000, 1000000000001\") == \"500000000000\"\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 5') == '2'\nassert solution('8 15') == '1'\nassert solution('7 20') == '0'\nassert solution('1000000000000 1000000000001') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_1) == '2'\nassert solution(input_2) == '1'\nassert solution(input_3) == '0'\nassert solution(input_4) == '500000000000'"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''8 5\n''') == '2'\nassert solution('''8 15\n''') == '1'\nassert solution('''7 20\n''') == '0'\nassert solution('''1000000000000 1000000000001\n''') == '500000000000'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 1 10\n01000\n\n\"\"\") == \"11\"\n\nassert solution(\"\"\"\n5 10 1\n01000\n\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n7 2 3\n1111111\n\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 1 3\n11111\n\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4 1 1\n11000\n\n\"\"\") == \"0\""
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 1 10\n01000\n\nOutput\n11\n\nInput\n5 10 1\n01000\n\nOutput\n2\n\nInput\n7 2 3\n1111111\n\nOutput\n0''') == '0'\n\nassert solution('''5 10 1\n01000\n\nOutput\n11\n\nInput\n5 10 1\n01000\n\nOutput\n2\n\nInput\n7 2 3\n1111111\n\nOutput\n0''') == '11'\n\nassert solution('''1 1 10\n01\n\nOutput\n0\n\nInput\n7 2 3\n11\n\nOutput\n1\n\nInput\n5 10 1\n01000\n\nOutput\n11\n\nInput\n5 10 1\n01000\n\nOutput\n2\n\nInput\n7 2 3\n1111111\n\nOutput\n0''') == '2'\n\nassert solution('''5 10 1\n01000\n\nOutput\n11\n\nInput\n5 10 1\n01000\n\nOutput\n2\n\nInput\n7 2 3\n1111111\n\nOutput\n0''') == '0'\n\nassert solution('''5 10 1\n01000\n\nOutput\n11\n\nInput\n5 10 1\n01000\n\nOutput\n2\n\nInput\n7 2 3\n1111111\n\nOutput\n0''') == '11'"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 10 1\n01000''') == '11'\nassert solution('''5 10 1\n01000''') == '2'\nassert solution('''7 2 3\n1111111''') == '0'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 1 10\") == \"11\"\nassert solution(\"5 10 1\") == \"2\"\nassert solution(\"7 2 3\") == \"0\"\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1 10') == '11'\nassert solution('5 10 1') == '2'\nassert solution('7 2 3') == '0'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([5, 1, 10]) == \"11\"\nassert solution([7, 2, 3]) == \"0\"\nassert solution([10, 10, 10]) == \"0\"\nassert solution([100, 10, 10]) == \"0\"\nassert solution([1, 1, 1]) == \"0\""
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 1 10\") == \"11\"\nassert solution(\"5 10 1\") == \"2\"\nassert solution(\"7 2 3\") == \"0\""
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 1 10\n01000''') == '11'\nassert solution('''5 10 1\n01000''') == '2'\nassert solution('''7 2 3\n1111111''') == '0'"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\") == \"0\"\nassert solution(\"3 2 3\") == \"2\"\nassert solution(\"3 2 0\") == \"2\"\nassert solution(\"3 10 1\") == \"11\"\nassert solution(\"5 10 1\") == \"11\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([3, 1, 1]) == \"2 1\"\nassert solution([5, 1, 2]) == \"19 5\"\nassert solution([6, 2, 3]) == \"22 22\"\nassert solution([10, 5, 2, 3]) == \"22 22\"\nassert solution([2, 3, 4, 5]) == \"22 22\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'\n\n\n\"\"\""
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\n\n\n\"\"\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\n\n'''\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 1') == '6'\nassert solution('7 2') == '4'"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 1') == '6'\nassert solution('10 2') == '4'\nassert solution('7 1') == '6'\nassert solution('10 3') == '3'\nassert solution('1000000000 2') == '1000000000'"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 1\") == \"6\"\nassert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\nassert solution(\"15 2\") == \"6\"\nassert solution(\"10 3\") == \"4\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''7 1\n''') == '6'\nassert solution('''10 2\n''') == '4'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0.0.0.0/0\"\nassert solution(\"2\") == \"195.0.0.0/8\"\nassert solution(\"3\") == \"127.0.0.0/30\""
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('4') == '0.0.0.0/0'\nassert solution('5') == '195.0.0.0/8'\nassert solution('2') == '149.154.167.99'\nassert solution('5') == '129.0.0.0/8'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('4') == '0.0.0.0/0'\nassert solution('5') == '195.0.0.0/8'\nassert solution('2') == '196.0.0.0/8'\nassert solution('3') == '196.0.0.0/8'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n-149.154.167.99\\n\") == \"0.0.0.0/0\"\nassert solution(\"4\\n-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\\n\") == \"2.149.154.167.99\\n149.154.167.120/29\"\nassert solution(\"5\\n-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\\n\") == \"2.195.0.0/8\\n-127.0.0.4/30\\n127.0.0.8/29\""
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == '0.0.0.0/0'\nassert solution(\"-149.154.167.99\") == '0.0.0.0/0'\nassert solution(\"+149.154.167.100/30\") == '149.154.167.100/30'\nassert solution(\"+149.154.167.128/25\") == '149.154.167.128/25'\nassert solution(\"-149.154.167.120/29\") == '149.154.167.120/29'"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('4') == '0.0.0.0/0'\nassert solution('5') == '195.0.0.0/8'\nassert solution('2') == '0.0.0.0/0'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0.0.0.0/0\"\nassert solution(\"1\") == \"0.0.0.0/0\"\nassert solution(\"4\") == \"0.0.0.0/0\"\nassert solution(\"4\") == \"0.0.0.0/0\"\nassert solution(\"5\") == \"195.0.0.0/8\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n-149.154.167.99\n+149.154.167.100/30\n+149.154.167.128/25\n-149.154.167.120/29\n''') == '1\\n0.0.0.0/0\\n'\nassert solution('''\n4\n-149.154.167.99\n+149.154.167.100/30\n+149.154.167.128/25\n-149.154.167.120/29\n''') == '2\\n149.154.167.99\\n149.154.167.120/29\\n'\nassert solution('''\n5\n-127.0.0.4/31\n+127.0.0.8\n+127.0.0.0/30\n-195.82.146.208/29\n-127.0.0.6/31\n''') == '2\\n195.0.0.0/8\\n127.0.0.4/30\\n'\nassert solution('''\n2\n+127.0.0.1/32\n-127.0.0.1\n''') == '-1\\n'"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n-149.154.167.99\n\n2\n149.154.167.99\n149.154.167.120/29\n\"\"\") == \"\"\"2\n195.0.0.0/8\n127.0.0.1/32\n\"\"\"[1:-1]\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1\\n0.0.0.0/0\\n', solution()\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0123456789\n987654321\n987654321\n''') == '2'\nassert solution('''\n4\n0000000000\n0123456789\n987654321\n987654321\n''') == '0'\nassert solution('''\n5\n0000000000\n0123456789\n987654321\n987654321\n987654321\n''') == '0'\nassert solution('''\n3\n0123456789\n987654321\n987654321\n''') == '0'\nassert solution('''\n1\n31415926535\n''') == '1'\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"11\") == \"1\"\nassert solution(\"22\") == \"2\"\nassert solution(\"11\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(['11', '31415926535']) == '2'\nassert solution(['11', '31115926535']) == '0'\nassert solution(['11', '3141']) == '1'\n\"\"\""
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"11\") == \"1\"\nassert solution(\"22\") == \"2\"\nassert solution(\"11\") == \"0\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n        '11',\n        '00000000008',\n    ) == '1'\nassert solution(\n        '22',\n        '0011223344556677889988',\n    ) == '2'\nassert solution(\n        '11',\n        '31415926535',\n    ) == '0'\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n11\n00000000008\n''') == '1'\n\nassert solution('''\n22\n0011223344556677889988\n''') == '2'\n\nassert solution('''\n11\n31415926535\n''') == '0'\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == '1'\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\nassert solution(\"22\") == \"2\"\nassert solution(\"11\") == \"0\""
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"11\") == \"1\"\nassert solution(\"22\") == \"2\"\nassert solution(\"11\") == \"0\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"4\"\nassert solution() == \"3\"\nassert solution() == \"-1\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_data) == '2'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 5\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n''') == '4'\nassert solution('''3 3\n0 0 0\n0 1 0\n0 0 0\n''') == '-1'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3 5\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n\"\"\") == \"4\"\nassert solution(\"\"\"3 3\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"3 3\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\\n') == '4'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '3'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '-1'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 5\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n''') == '4'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '3'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\\n\") == \"4\\nrow 1\\nrow 1\\ncol 4\\nrow 3\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"3\\nrow 1\\nrow 2\\nrow 3\""
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    3 5\n    2 2 2 3 2\n    0 0 0 1 0\n    1 1 1 2 1\n    ''') == '4'\nassert solution('''\n    3 3\n    1 1 1\n    1 1 1\n    1 1 1\n    ''') == '3'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 5\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n''') == '4'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '3'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '-1'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 5\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n''') == '4'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '3'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '-1'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"YES\""
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"YES\"\nassert solution(input) == \"NO\""
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 6 4 5\") == \"YES\"\nassert solution(\"6 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"YES\"\nassert solution(\"4 2 1 4\") == \"YES\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"YES\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 6 4 5') == 'YES'\nassert solution('8 6 4 6') == 'NO'\nassert solution('10 3 11 4') == 'YES'\nassert solution('4 2 1 4') == 'YES'"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 3 11 4\") == \"YES\"\nassert solution(\"8 6 4 5\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"YES\"\nassert solution(\"10 4 10 4\") == \"NO\"\nassert solution(\"10 4 4 10\") == \"NO\""
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 6 4 5') == 'YES'\nassert solution('8 6 4 6') == 'NO'\nassert solution('10 3 11 4') == 'YES'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''8 6 4 5''') == 'YES'\nassert solution('''8 6 4 6''') == 'NO'\nassert solution('''10 3 11 4''') == 'YES'\nassert solution('''4 2 1 4''') == 'YES'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 6 4 5') == 'YES'\nassert solution('8 6 4 6') == 'NO'\nassert solution('10 3 11 4') == 'YES'\nassert solution('4 2 1 4') == 'NO'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 2\n1 3\n1 4\n''') == '6'\nassert solution('''7 8\n1 6\n2 6\n3 5\n3 6\n4 3\n5 1\n5 2\n5 3\n''') == '12'\nassert solution('''1 2\n2 3\n3 5\n''') == '-1'"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '3'\nassert solution('7 8') == '12'"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([4,2]) == 6\nassert solution([7,8]) == 12\nassert solution([2,2]) == -1"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 2\n1 3\n1 4\n\n''') == '6'\nassert solution('''\n7 8\n1 6\n2 6\n3 5\n3 6\n4 3\n5 1\n5 2\n5 3\n\n''') == '12'\nassert solution('''\n2 2\n1 2\n2 1\n\n''') == '-1'\nassert solution('''\n2 2\n1 2\n2 1\n\n''') == '-1'\nassert solution('''\n2 2\n1 2\n2 1\n\n''') == '-1'"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2\n1 3\n1 4\n''') == \"6\"\nassert solution('''\n7 8\n1 6\n2 6\n3 5\n3 6\n4 3\n5 1\n5 2\n5 3\n''') == \"12\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"7 8\") == \"12\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '6'\nassert solution('4 2') == '6'\nassert solution('7 8') == '12'"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"7 8\") == \"12\"\nassert solution(\"2 2\") == \"-1\"\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == '6'\nassert solution(\"7 8\") == '12'\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2\n1 2\n2 1''') == '6'\nassert solution('''4 2\n1 3\n1 4\n\nOutput\n6''') == '6'\nassert solution('''7 8\n1 6\n2 6\n3 5\n3 6\n4 3\n5 1\n5 2\n5 3\n\nOutput\n12''') == '12'\nassert solution('''2 2\n1 2\n2 1\n\nOutput\n-1''') == '-1'\nassert solution('''10 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n84 85\n85 86\n86 87\n87 88\n88 89\n89 90\n90 91\n91 92\n92 93\n93 94\n94 95\n95 96\n96 97\n97 98\n98 99\n99 100\n100 101\n101 102\n102 103\n103 104\n104 105\n105 106\n106 107\n107 108\n108 109\n109 110\n110 111\n111 112\n112 113\n113 114\n114 115\n115 116\n116 117\n117 118\n118 119\n119 120\n120 121\n121 122\n122 123\n123 124\n124 125\n125 126\n126 127\n127 128\n128 129\n129 130\n130 131\n131 132\n132 133\n133 134\n134 135\n135 136\n136 137\n137 138\n138 139\n139 140\n140 141\n141 142\n142 143\n143 144\n144 145\n145 146\n146 147\n147 148\n148 149\n149 150\n150 151\n151 152\n152 153\n153 154\n154 155\n155 156\n156 157\n157 158\n158 159\n159 160\n160 161\n161 162\n162 163\n163 164\n164 165\n165 166\n166 167\n167 168\n168 169\n169 170\n170 171\n171 172\n172 173\n173 174\n174 175\n175 176\n176 177\n177 178\n178 179\n179 180\n180 181\n181 182\n182 183\n183 184\n184 185\n185 186\n186 187\n187 188\n188 189\n189 190\n190 191\n191 192\n192 193\n193 194\n194 195\n195 196\n196 197\n197 198\n198 199\n199 200\n200 201\n201 202\n202 203\n203 204\n204 205\n205 206\n206 207\n207 208\n208 209\n209 210\n210 211\n211 212\n212 213\n213 214\n214 215\n215 216\n216 217\n217 218\n218 219\n219 220\n220 221\n221 222\n222 223\n223 224\n224 225\n225 226\n226 227\n227 228\n228 229\n229 230\n230 231\n231 232\n232 233\n233 234\n234 235\n235 236\n236 237\n237 238\n238 239\n239 240\n240 241\n241 242\n242 243\n243 244\n244 245\n245 246\n246 247\n247 248\n248 249\n249 250\n250 251\n251 252\n252 253\n253 254\n254 255\n255 256\n256 257\n257 258\n258 259\n259 260\n260 261\n261 262\n262 263\n263 264\n264 265\n265 266\n266 267\n267 268\n268 269\n269 270\n270 271\n271 272\n272 273\n273 274\n274 275\n275 276\n276 277\n277 278\n278 279\n279 280\n280 281\n281 282\n282 283\n283 284\n284 285\n285 286\n286 287\n287 288\n288 289\n289 290\n290 291\n291 292\n292 293\n293 294\n294 295\n295 296\n296 297\n297 298\n298 299\n299 300\n300 301\n301 302\n302 303\n303 304\n304 305\n305 306\n306 307\n307 308\n308 309\n309 310\n310 311\n311 312\n312 313\n313 314\n314 315\n315 316\n316 317\n317 318\n318 319\n319 320\n320 321\n321 322\n322 323\n323 324\n324 325\n325 326\n326 327\n327 328\n328 329\n329 330\n330 331\n331 332\n332 333\n333 334\n334 335\n335 336\n336 337\n337 338\n338 339\n339 340\n340 341\n341 342\n342 343\n343 344\n344 345\n345 346\n346 347\n347 348\n348 349\n349 350\n350 351\n351 352\n352 353\n353 354\n354 355\n355 356\n356 357\n357 358\n358 359\n359 360\n360 361\n361 362\n362 363\n363 364\n364 365\n365 366\n366 367\n367 368\n368 369\n369 370\n370 371\n371 372\n372 373\n373 374\n374 375\n375 376\n376 377\n377 378\n378 379\n379 380\n380 381\n381 382\n382 383\n383 384\n384 385\n385 386\n386 387\n387 388\n388 389\n389 390\n390 391\n391 392\n392 393\n393 394\n394 395\n395 396\n395 397\n397 398\n397 399\n399 400\n400 401\n401 402\n402 403\n403 404\n404 405\n405 406\n406 407\n407 408\n408 409\n409 410\n410 411\n411 412\n412 413\n413 414\n414 415\n415 416\n416 417\n417 418\n418 419\n419 420\n420 421\n421 422\n422 423\n423 424\n424 425\n425 426\n426 427\n427 428\n428 429\n429 430\n430 431\n431 432\n432 433\n433 434\n434 435\n435 436\n436 437\n437 438\n438 439\n439 440\n440 441\n441 442\n442 443\n442 444\n443 445\n445 446\n446 447\n447 448\n447 449\n448 450\n448 451\n449 452\n452 453\n453 454\n454 455\n455 456\n456 457\n457 458\n458 459\n459 460\n460 461\n461 462\n462 4"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0''') == \"YES\", \"First example\"\nassert solution('''3 2\n1 0\n1 1\n0 1\n\nassert solution('''3 2\n1 0\n1 1\n0 1\n\nassert solution('''3 2\n1 0\n1 1\n0 0\n\nassert solution('''3 2\n1 0\n1 1\n0 1"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == 'NO'\nassert solution('3 2') == 'YES'\n\n\n\"\"\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == 'NO'\nassert solution('3 2') == 'YES'\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'YES'\n\n\"\"\""
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == 'NO'"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0''') == 'NO'\nassert solution('''3 2\n1 0\n1 1\n0 1\n\nOutput\nYES''') == 'YES'''\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"YES\"\nassert solution(\"5 3\") == \"NO\"\n\n---"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 'NO'\nassert solution(input()) == 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2\n1 0\n1 1\n0 1''') == 'YES'\nassert solution('''3 2\n1 0\n1 1\n0 1''') == 'NO'\n'''\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == \"Yes\"\nassert solution(\"2 7\") == \"No\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 5') == 'Yes'\nassert solution('2 7') == 'No'\nprint(solution())\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"Yes\"\nassert solution(\"4 5\") == \"No\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2\n2 4\n''') == 'Yes'"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 5\n2 3\n''') == 'Yes'\nassert solution('''2 7\n2 3\n''') == 'No'\nassert solution('''3 7\n2 3\n''') == 'No'\nassert solution('''4 5\n2 3 5 12\n''') == 'Yes'\nassert solution('''3 3\n2 3\n''') == 'No'\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 6\n2 3\n\"\"\") == \"Yes\"\n\nassert solution(\"\"\"\n2 7\n2 3\n\"\"\") == \"No\""
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 5') == 'Yes'\nassert solution('2 7') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n2 3\") == \"Yes\"\nassert solution(\"2 7\") == \"No\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n2 3 5 12''') == \"Yes\"\nassert solution('''2\n7''') == \"No\"\nassert solution('''4\n2 3 5 12\n''') == \"Yes\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 5\n2 3 5 12\n''') == \"Yes\"\nassert solution('''2 7\n2 3\n''') == \"No\"\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1 2\n''') == '3'\n\nassert solution('''\n3 4 2\n''') == '6'\n\nassert solution('''\n2 3 4\n''') == '-1'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3 4\") == \"8\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"8\"\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\""
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 4 1\") == \"6\"\nassert solution(\n    \"6 4 2\") == \"8\"\nassert solution(\n    \"2 3 4\") == \"-1\""
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 4 1\n2 3 3''') == '6'\nassert solution('''6 4 2\n1 3 4''') == '8'\nassert solution('''2 3 4\n2 3 2''') == '-1'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == \"6\"\nassert solution(\"4 4 3\") == \"8\"\nassert solution(\"3 4 2\") == \"-1\""
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\""
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'\n\n'''"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('3\\n4') == '0'\nassert solution('5\\n1 2 2 4 3') == '2'\nassert solution('3\\n4 1 1') == '2'\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 2 4 3\\n') == '2'\nassert solution('4\\n4 1 1\\n') == '0'\nassert solution('8\\n0 3 1 1 4 2 1 3\\n') == '2'\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"0\""
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 2 4 3\") == \"2\"\nassert solution(\"5\\n4 1 1\") == \"0\""
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 2 2 4 3\n''') == '2'\nassert solution('''\n4\n4 1 1\n''') == '0'\nassert solution('''\n10\n5 2 5 2 4 1 4 4 2 2 1\n''') == '3'\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n2 1 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n2 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '-1'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n\n5\n1 2 2 4 3\n\n''') == \"2\"\n\nassert solution('''\n\n3\n4 1 1\n\n''') == \"0\"\n\nassert solution('''\n\n4\n0 3 0 4\n\n''') == \"0\""
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '0'\nassert solution('5') == '-1'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n01\n''') == '5'\nassert solution('''2\n01\n''') == '2'\nassert solution('''6\n01\n''') == '1'\nassert solution('''10\n
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    5\n    10011011\n    ''') == 5\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '5'"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(example_input) == 5\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n8\n10000011\n''') == '5'\nassert solution('''\n2\n01\n''') == '2'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8') == '5'\nassert solution('2') == '2'\nassert solution('01') == '2'"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10000011\") == \"5\"\nassert solution(\"01\") == \"2\"\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    3\n    11\n    ''') == '3'\n\nassert solution('''\n    2\n    10\n    ''') == '2'\n\nassert solution('''\n    5\n    1101\n    ''') == '4'\n\nassert solution('''\n    5\n    1111\n    ''') == '4'\n\nassert solution('''\n    5\n    1111\n    ''') == '4'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(solution.__doc__) == \"5\"\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10000011') == '5'\nassert solution('01') == '2'"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n2 3 1 4\n''') == '3'\nassert solution('''\n4\n4 4 4 4\n''') == '-1'\nassert solution('''\n4\n2 1 4 3\n''') == '1'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n2 3 1 4\n\n''') == '3'\n\nassert solution('''\n4\n4 4 4 4\n\n''') == '-1'\n\nassert solution('''\n4\n2 1 4 3\n\n''') == '1'"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 1 4\\n\") == \"3\"\nassert solution(\"4\\n4 4 4 4\\n\") == \"-1\"\nassert solution(\"4\\n2 1 4 3\\n\") == \"1\"\nassert solution(\"4\\n4 4 4 4\\n\") == \"4\"\nassert solution(\"4\\n2 2 2 2\\n\") == \"2\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(s) == str(solution(s))"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == str(solution_python(input_))\nprint(\"\ud1b5\uacfc\")\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n2 3 1 4\n''') == '3'\n\nassert solution('''\n4\n4 4 4 4\n''') == '-1'\n\nassert solution('''\n4\n2 1 4 3\n''') == '1'\n\nprint(solution('''\n4\n2 3 1 4\n'''))"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_data) == '3'"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n2 3 1 4\n''') == '3'\nassert solution('''4\n2 1 4 3\n''') == '1'\nassert solution('''4\n2 3 4 1\n''') == '-1'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n2 3 1 4\n''') == '3'\nassert solution('''\n4\n4 4 4 4\n''') == '-1'\nassert solution('''\n4\n2 1 4 3\n''') == '1'"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"7\") == \"0\"\nassert solution(\"2\") == \"1\""
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n\n1 3 2\n\n2 2\n''') == '1'\n\nassert solution('''\n7\n\n1 3 3 2 1 2 3\n\n2 2\n''') == '0'\n\nassert solution('''\n2\n\n2 2\n''') == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 3 2 0\n''') == '2'\n\nassert solution('''\n7\n1 3 3 2 1 2 3\n''') == '0'\n\nassert solution('''\n2\n2 2\n''') == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '2'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n') == '2'\nassert solution('7\\n') == '1'\nassert solution('2\\n') == '0'\nassert solution('3\\n') == '0'"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '2'\nassert solution('7') == '0'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3 2 0\") == \"2\"\nassert solution(\"7\") == \"0\"\nassert solution(\"2\") == \"1\""
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n\n1 3 2 0\n\n2 2\n\n3 3\n\n1 3\n\n''') == '2'\nassert solution('''\n7\n\n1 3 3 2 1 2 3\n\n2 2\n\n3 3\n\n1 3\n\n''') == '0'\nassert solution('''\n2\n\n2 2\n\n3 3\n\n1 3\n\n''') == '1'"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 3 2 0\") == \"2\"\nassert solution(\"1 3 3 2 1 2 3\") == \"0\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\nassert solution('8') == '1112'"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n\n''') == '504'\nassert solution('''\n7\n\n''') == '210'\nassert solution('''\n9\n\n''') == '504'\nassert solution('''\n6\n\n''') == '210'\nassert solution('''\n7\n\n''') == '210'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\""
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n9\n7\n6\n5\n''') == '504'\nassert solution('''\n1\n2\n3\n''') == '6'\nassert solution('''\n3\n1\n2\n''') == '12'\nassert solution('''\n1\n2\n0\n''') == '0'\nassert solution('''\n1\n3\n0\n''') == '0'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"210\"\nassert solution(\"4\") == \"10\"\nassert solution(\"10\") == \"10\"\nassert solution(\"1000000000\") == \"10000000000\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"7\") == \"210\""
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\nassert solution('''5\n0 0 5 5\n0 1 4 4\n1 2 6 7\n1 1 4 4\n8 1 9 2\n''') == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n\n\"\"\") == \"1 1\"\n\nassert solution(\"\"\"\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n\n\"\"\") == \"1 1\"\n\nassert solution(\"\"\"\n4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n\n\"\"\") == \"1 1\"\n\nassert solution(\"\"\"\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n\n\"\"\") == \"3 4\""
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1 1'\nassert solution('4') == '3 4'\nassert solution('5') == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\nassert solution('''\n4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n''') == '1 1'\nassert solution('''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n''') == '3 4'"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\nassert solution(input()) == \"3 4\"\nassert solution(input()) == \"3 4\"\nassert solution(input()) == \"1 1\"\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\nassert solution('''2\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\nassert solution('''3\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n''') == '1 1'\nassert solution('''4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n''') == '1 1'\nassert solution('''5\n0 0 10 8\n0 0 4 4\n1 1 4 4\n1 1 4 4\n8 1 9 2\n''') == '3 4'\n\nimport itertools\nimport sys\n\nn = int(sys.stdin.readline().strip())"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == ''\nassert solution(\"4\") == '1 1'\nassert solution(\"3\") == '1 1'\nassert solution(\"5\") == '3 4'\n\n'''\n\nfrom math import inf\nfrom math import floor\nimport sys"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\\n') == '1 1'\nassert solution('5\\n0 0 1 1\\n0 1 1 2\\n1 0 2 1\\n') == '1 1'\nassert solution('5\\n0 0 1 1\\n0 1 1 2\\n1 0 2 1\\n') == '1 1'\nassert solution('5\\n0 0 1 1\\n0 1 1 2\\n1 0 2 1\\n') == '1 1'\nassert solution('5\\n0 0 1 1\\n0 1 1 2\\n1 0 2 1\\n') == '1 1'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '3 4'\nassert solution('6') == '1 2'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1 1'\nassert solution('3') == '1 1'\nassert solution('3') == '1 1'\nassert solution('3') == '1 1'\nassert solution('4') == '3 4'\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == 'NO'\nassert solution('4') == 'YES'\nassert solution('8') == 'YES'"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == 'NO'\nassert solution('8') == 'YES'"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"NO\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"1\") == \"YES\""
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n18 55 16 17\n''') == 'YES'\nassert solution('''\n6\n40 41 43 44 44 44\n''') == 'NO'\nassert solution('''\n8\n5 972 3 4 1 4 970 971\n''') == 'YES'\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"4\\n18 55 16 17\") == \"YES\"\nassert solution(\"6\\n40 41 43 44 44 44\") == \"NO\"\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"6\") == \"NO\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n18 55 16 17\") == \"YES\"\nassert solution(\"6\\n40 41 43 44 44 44\") == \"NO\"\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"0\") == \"NO\""
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n18 55 16 17\n''') == 'YES'\nassert solution('''8\n5 972 3 4 1 4 970 971\n''') == 'YES'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 1\n1 2\n3''') == '2'\nassert solution('''3 5\n1 2 3\n2 3 4\n3 4 5\n3 5 6\n4 5 6\n5 6 7\n5 7 8\n6 7 9\n6 8 9''') == '9'\nassert solution('''4 4\n1 2 3 4\n1 2 3 4\n5 6 7 8\n5 6 7 8''') == '8'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"1 5\\n1 2 3\\n1 2 3 7 8 9 11 12 13\\n\"\n) == \"9\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 9\") == \"9\"\nassert solution(\"5 5\") == \"10\"\nprint(solution(input()))"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 9\") == \"9\"\nassert solution(\"5 5\") == \"10\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 9') == '9'\nassert solution('5 5') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n'''\n) == '9'\nassert solution(\n'''5 5\n1 2 3 4 5\n1 2 3 4 5\n'''\n) == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 9\\n1 2 3\\n1 2 3 7 8 9 11 12 13\\n\") == \"9\"\nassert solution(\"5 5\\n1 2 3 4 5\\n1 2 3 4 5\\n\") == \"10\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 9\") == \"9\"\nassert solution(\"5 5\") == \"10\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n\n5 5\n1 2 3 4 5\n1 2 3 4 5\n\n3 4\n4 5\n5 6\n3 7\n2 8\n1 9\n''') == '9'\nassert solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n\n5 5\n1 2 3 4 5\n1 2 3 4 5\n\n7 8\n7 8\n7 8\n3 7\n2 8\n1 9\n''') == '10'"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == '9'\nassert solution('''\n5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"2\") == \"Petya\"\nassert solution(\"8\") == \"Petya\""
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    1\n    ''') == 'Vasya', f'Expected \"Vasya\" but got {solution('''\n    1\n    ''')}'\nassert solution('''\n    2\n    ''') == 'Petya', f'Expected \"Petya\" but got {solution('''\n    2\n    ''')}'\nassert solution('''\n    8\n    ''') == 'Petya', f'Expected \"Petya\" but got {solution('''\n    8\n    ''')}'\n''')\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"2\") == \"Petya\"\nassert solution(\"8\") == \"Petya\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n\n\n\"\"\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n2\n3\n5\n7\n9''') == 'Petya'\n\nassert solution('''8\n1\n3\n5\n7''') == 'Vasya'\n\nassert solution('''8\n1\n4\n5\n7''') == 'Vasya'\n\nassert solution('''3\n5\n7\n9''') == 'Petya'\n\nassert solution('''3\n5\n7\n9''') == 'Petya'"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 5 3\") == \"1\"\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3 6\n1 2\n2 2\n2 1\n''') == '1'\nassert solution('''1 5 3\n1 3\n1 1\n1 5\n''') == '2'\nassert solution('''4 3 6\n1 2\n1 3\n2 2\n2 3\n3 1\n3 3\n''') == '1'\n\nimport math\n\nfrom collections import defaultdict\nfrom itertools import product\nfrom bisect import bisect_left\nfrom functools import reduce\nfrom typing import List\n\nfrom collections import Counter\nfrom pprint import pprint\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5 3') == '2'\nassert solution('2 2 3') == '0'\nassert solution('1 5 3') == '1'\nassert solution('4 3 6') == '1'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 3') == '0'\nassert solution('1 5 3') == '2'\nassert solution('4 3 6') == '1'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3\") == \"0\"\nassert solution(\"1 5 3\") == \"2\"\nassert solution(\"4 3 6\") == \"1\"\n\n\"\"\"\n\nimport sys\nimport os\nfrom itertools import permutations\nimport math"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 3\\n1 2\\n2 2\\n2 1\\n') == '0'\nassert solution('1 5 3\\n1 3\\n1 1\\n1 5\\n') == '2'\nassert solution('4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\\n') == '1'\nprint('You passed all tests!')\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(example1) == \"1\"\nassert solution(example2) == \"2\"\nassert solution(example3) == \"2\"\nassert solution(example4) == \"1\"\nassert solution(example5) == \"1\"\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 3\") == \"0\"\nassert solution(\"1 5 3\") == \"2\"\nassert solution(\"4 3 6\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 5 3\\n1 3\\n1 1\\n1 5\") == \"2\"\nassert solution(\"4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\") == \"1\"\nassert solution(\"10 10 10\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\") == \"1\"\nassert solution(\"10 10 10\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\") == \"2\"\nassert solution(\"10 10 10\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\\n4 4\\n4 4\\n4 4\") == \"1\"\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4 3\") == \"1\"\nassert solution(\"4 5 3\") == \"2\"\nassert solution(\"10 10 3\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '1'\nassert solution('5') == '0'\nassert solution('1') == '1'\nassert solution('8') == '1'\nassert solution('10') == '0'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\nA\nB\nB\nA\n''') == '2'\nprint('tests completed!')\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '2'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\nA\\nB\\nB\\nA\\n') == '2'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == \"2\""
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\nA\\nB\\nB\\nA') == '2'\nassert solution('5\\nA\\nB\\nB\\nA') == '2'\nassert solution('2\\nA\\nA\\nA\\nA') == '4'\nassert solution('4\\nA\\nA\\nA\\nA') == '1'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\nA\\nB\\nB\\nA') == '2'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"2\"\n\n---\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2 3 4\\n') == '2'\nassert solution('5\\n2 3 4 6 7\\n') == '3'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 4') == '2'\nassert solution('5 2 3 4 5') == '3'\n\n\nhttps://leetcode.com/problems/kth-largest-element-in-a-stream/\n\n\n\"\"\""
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n2 3 4\n''') == '2'\nassert solution('''5\n2 3 4 6 7\n''') == '3'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"3\"\nassert solution(sys.stdin.read()) == \"4\"\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n2 3 4\n''') == '2'\nassert solution('''\n5\n2 3 4 6 7\n''') == '3'\nassert solution('''\n4\n3 5 6 7\n''') == '4'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n2 3 4''') == '2'\nassert solution('''5\n2 3 4 5 6''') == '3'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 3 4\\n\") == \"2\"\nassert solution(\"5\\n2 3 4 6 7\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3 4\\n\") == \"2\"\nassert solution(\"5\\n2 3 4 6 7\\n\") == \"3\"\n\n'''\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3 4\\n2 3 4\") == \"2\"\nassert solution(\"5 2 3 4 6 7\\n2 3 4 6 7\") == \"3\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == 0, 'Test 1, correct solution!'\nassert solution(\"ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\nABAC') == '11'\nassert solution('5\\nABABC') == '10'\nassert solution('5\\nABC') == '9'\nassert solution('5\\nABCA') == '8'\n\"\"\"\n\nn = int(input())\ns = input()\n\na = s.count('A')\nb = s.count('B')\nc = s.count('C')"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\nABAAC') == '11'\nassert solution('8\\nABABCABCDABCD') == '30'\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"11\"\nassert solution(\"1000000000\") == \"100000001\"\n\nimport math"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\nABAAC\n''') == '11'\n\n'''"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"11\"\n\n-------\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\nABAAC\") == \"11\"\nassert solution(\"2\\nABBA\") == \"6\"\nassert solution(\"3\\nABBC\") == \"0\"\nassert solution(\"4\\nABAAC\") == \"3\"\nassert solution(\"5\\nABBA\") == \"10\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == 11"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n        \"5\\n\"\n        \"ABACA\"\n        ) == \"11\"\nassert solution(\n        \"4\\n\"\n        \"ABCD\"\n        ) == \"7\"\nassert solution(\n        \"5\\n\"\n        \"ABAAC\"\n        ) == \"11\"\nassert solution(\n        \"5\\n\"\n        \"ABACB\"\n        ) == \"12\"\nassert solution(\n        \"5\\n\"\n        \"ABACA\"\n        ) == \"11\"\n\"\"\""
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n4 2\\n1 1\") == \"3\"\nassert solution(\"1023\\n1 2\\n1 0\\n1 2\\n1 1\") == \"-1\"\n\nInput\n5\n0 0\n0 0\n0 0\n0 0\n\nOutput\n-1\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n4 2\\n1 1\\n0 1\\n2 3\\n') == '3'\nassert solution('1023\\n1 2\\n1 0\\n1 2\\n1 1\\n') == '-1'\nassert solution('101\\n1 2\\n0 1\\n1 2\\n1 1\\n') == '2'\n\n\"\"\"\n\nfrom math import floor\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2') == '3'\nassert solution('1023 1 2') == '-1'\n\n\"\"\"\nfrom math import sqrt, floor\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n4 2\n1 1\n0 1\n2 3\n''') == '3'\nassert solution('''1023\n1 2\n1 0\n1 2\n1 1\n''') == '-1'\nassert solution('''5\n10 2\n1 1\n0 1\n2 3\n''') == '3'\nassert solution('''1023\n1 2\n1 0\n1 2\n1 1\n''') == '-1'\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 1\\n0 1\\n2 3\\n') == '3'\n\nassert solution('1023\\n1 2\\n1 0\\n1 2\\n1 1\\n') == '-1'"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"1023\") == \"-1\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4 2\\n1 1\\n0 1\\n2 3\") == \"3\"\nassert solution(\"1023\\n1 2\\n1 0\\n1 2\\n1 1\") == \"-\""
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(5) == \"3\"\nassert solution(1023) == \"-1\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n4 2\\n1 1\\n0 1\\n2 3\") == \"3\"\nassert solution(\"1023\\n1 2\\n1 0\\n1 2\\n1 1\") == \"-1\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"2\"\n\"\"\"\n\nimport math\nfrom math import floor\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2'\n\n'''\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n4 5') == '2'\nassert solution('4\\n3 2') == '2'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n4 5\n''') == '2'\nprint(solution('''2\n4 5\n'''))\nassert solution('''3\n1 2 3\n''') == '0'\nprint(solution('''3\n1 2 3\n'''))"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('4') == '2'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"2\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"10 5\") == \"3\"\nassert solution(\"10 2\") == \"1\"\nassert solution(\"10 10\") == \"1\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n4 5\n''') == '2'\nassert solution('''3\n2\n''') == '3'\nassert solution('''4\n2\n''') == '1'\nassert solution('''5\n3\n''') == '1'\nassert solution('''6\n3\n''') == '2'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'\n\n\"\"\"\nfrom collections import deque\n\nstdin = input()\nn = int(stdin)\n\nl = list(map(int, stdin.split()))\n\ndq = deque()\n\nfor i in range(1, 10):\n    if i not in l:\n        dq.append(i)\n\nx = 0\n\nwhile dq:\n    x += 1\n    prime = dq.popleft()\n    for i in range(1,10):\n        l.remove(i)\n        if prime**i in l:\n            dq.append(prime**i)\n            l.remove(prime**i)\nprint(x)\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_string) == \"NO\"\nassert solution(input_string_2) == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([2, 2, 2, 1]) == \"YES\"\nassert solution([1, 2, 3, 4]) == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 2 1') == 'YES'\nassert solution('1 2 3 4') == 'NO'\nassert solution('2 2 2 3') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 2 1') == 'YES'\nassert solution('1 2 3 4') == 'NO'\nassert solution('2 2 2 3') == 'NO'\n\n\"\"\""
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2 2 1\n''') == 'YES'\nassert solution('''\n1 2 3 4\n''') == 'NO'\nassert solution('''\n2 2 2 3\n''') == 'NO'\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 2 1\") == \"YES\"\nassert solution(\"2 2 2 3\") == \"NO\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2 2 1\n''') == 'YES'\nassert solution('''\n1 2 3 4\n''') == 'NO'\nassert solution('''\n2 2 2 3\n''') == 'NO'\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n1 3 2 4\\n1 3 4 2\\n\") == \"YES\"\nassert solution(\"4 4\\n1 2 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n\") == \"NO\"\n\nstdin = \"\"\"2 4\n1 3 2 4\n1 3 4 2\"\"\"\n\nassert solution(stdin) == \"YES\""
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2 3 4\\n1 3 4 2\\n2 1 3 4\\n4 1 2 3') == 'YES'\nassert solution('3 6\\n2 1 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5') == 'NO'"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"YES\"\nassert solution(input) == \"NO\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 4\n1 3 2 4\n1 3 4 2\n\n''') == 'NO'\nassert solution('''\n4 4\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3\n\n''') == 'YES'\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"YES\""
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([3, 6], [[2, 1, 3, 4, 5, 6],\n                        [1, 2, 4, 3, 5, 6],\n                        [1, 2, 3, 4, 5, 6]]) == \"YES\"\nassert solution([4, 4], [[2, 1, 4, 3, 5, 6],\n                        [1, 2, 3, 4, 5, 6],\n                        [1, 2, 3, 4, 6, 5],\n                        [1, 2, 3, 6, 5, 4]]) == \"YES\"\nassert solution([4, 3], [[2, 1, 4, 3, 5, 6],\n                        [1, 2, 3, 4, 5, 6],\n                        [1, 2, 3, 6, 5, 4],\n                        [1, 2, 3, 6, 5, 4]]) == \"NO\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'YES'\nassert solution(input) == 'YES'"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'YES\\n'\n\n'''\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == 'NO'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1') == '0', \"Wrong solution\"\nassert solution('1 2 1') == '666666672', \"Wrong solution\""
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\nassert solution('2 2 2') == '1'\nassert solution('3 2 2') == '33333'\nassert solution('4 2 2') == '285714285714285714285714285714'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 2 1\") == \"666666672\""
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 1 1''') == '0'\nassert solution('''1 2 1''') == '666666672'\nassert solution('''1 1 1''') == '0'\nassert solution('''2 1 1''') == '2'\nassert solution('''3 1 1''') == '1'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n1 1 1\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n1 2 1\n\"\"\"\n) == \"666666672\"\n\nassert solution(\n\"\"\"\n1 1 1\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n2 2 2\n\"\"\"\n) == \"10111010\"\n\nassert solution(\n\"\"\"\n1 2 1\n\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 1') == '0'\nassert solution
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_data) == \"0\"\n\n'''"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\") == \"0\", 'Expected 0'\nassert solution(\"1 2 1\") == \"666666672\", 'Expected 66.666...'\nassert solution(\"1 2 2\") == \"222222222\", 'Expected 222...'"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"7\") == \"1\"\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([6, 7, 2, 3, 1, 5, 6]) == 5\nassert solution([3, 2, 1]) == 1\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_data) == \"5\"\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"5\""
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n7 2 3 1 5 6\n''') == '5'\nassert solution('''\n4\n2 1 5 3\n''') == '1'\nassert solution('''\n3\n5 1 2\n''') == '1'\nassert solution('''\n9\n3 9 1 2 7 2 5 7 3 1\n''') == '5'"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5 1 3 2\") == \"2\"\nassert solution(\"4\\n6 2 3 1 5 6\") == \"5\""
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 2 3 4\n''') == '3'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\n7 2 3 1 5 6') == '5'\nassert solution('20\\n1011 2 3 5 4 6 9 5 4 8 4') == '8'\nassert solution('1000000\\n999999999999999999') == '1000000'\nprint(solution(*sys.stdin.read().split()))\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6\\n7 2 3 1 5 6') == '5'\nassert solution('8\\n0 1 2 3 4 5 6 7') == '7'\nassert solution('9\\n0 1 2 3 4 5 6 7 8') == '7'\nassert solution('11\\n0 1 2 3 4 5 6 7 8 9') == '7'\nassert solution('12\\n0 1 2 3 4 5 6 7 8 9 0') == '9'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\""
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 2\n\nassert solution(\"1 1 1 8\") == 2\nassert solution(\"4 2 2 6\") == 3\nassert solution(\"3 7 4 6\") == 1\n\nassert solution(\"3 7 4 5\") == 1\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4 1 1 8\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 2 2 6\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3 7 4 6\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1 1 8\n''') == '2'\n\nassert solution('''\n4 2 2 6\n''') == '3'\n\nassert solution('''\n3 7 4 6\n''') == '1'"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1 1 8\n''') == '2'\nassert solution('''\n4 2 2 6\n''') == '3'\nassert solution('''\n3 7 4 6\n''') == '1'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 5\n''') == '2'\nassert solution('''\n-1 4 15\n''') == '4'\nassert solution('''\n0 -1 5\n''') == '-1'\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 5\n''') == \"2\"\nassert solution('''\n-1 4 15\n''') == \"4\"\nassert solution('''\n0 -1 5\n''') == \"-1\""
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\""
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 5\\n\") == \"2\"\nassert solution(\"-1 4 15\\n\") == \"4\"\nassert solution(\"0 -1 5\\n\") == \"-1\""
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 5\\n\") == \"2\"\nassert solution(\"-1 4 15\\n\") == \"4\"\nassert solution(\"0 -1 5\\n\") == \"-1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == str(-1)"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('-1 4 15') == '4'\nassert solution('0 -1 5') == '-1'"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 1\n2 1 2 3 4 3\n''') == '2'\nassert solution('''\n6 2\n2 1 2 3 4 3\n''') == '0'\nassert solution('''\n6 1\n1 1 2 2 3 3\n''') == '2'\n\n'''"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 1\\n2 1 2 3 4 3') == '2'\nassert solution('6 2\\n1 1 2 2 3 3') == '0'\nassert solution('6 1\\n1 1 2 2 3 3') == '2'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6 1\n2 1 2 3 4 3\n''') == \"2\"\nassert solution('''6 2\n2 1 2 3 4 3\n''') == \"0\"\nassert solution('''6 1\n1 1 2 2 3 3\n''') == \"2\""
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 1') == '2'\nassert solution('6 2') == '0'\nassert solution('6 1') == '2'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 1\\n2 1 2 3 4 3') == '2'\nassert solution('6 2\\n1 1 2 2 3 3') == '0'\nassert solution('6 1\\n1 1 2 2 3 3') == '1'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 1\\n2 1 2 3 4 3\\n') == '2'\nassert solution('6 2\\n2 1 2 3 4 3\\n') == '0'\nassert solution('6 1\\n1 1 2 2 3 3\\n') == '1'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 1\n2 1 2 3 4 3\n''') == '2'\nassert solution('''\n6 2\n1 1 2 2 3 3\n''') == '0'\nassert solution('''\n6 1\n1 1 2 2 3 3\n''') == '2'\nassert solution('''\n5 1\n1 2 2 3 3\n''') == '2'\nassert solution('''\n6 1\n1 1 2 2 3 3\n''') == '0'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 1') == '2'\nassert solution('6 2') == '0'\nassert solution('6 1') == '2'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 2\n2 1 2 3 4 3\n''') == '2'\nassert solution('''\n5 2\n2 1 2 3 4 3\n''') == '0'\nassert solution('''\n5 2\n1 1 2 2 3 3\n''') == '2'\nassert solution('''\n5 2\n1 1 2 2 3 3\n''') == '0'\nassert solution('''\n5 2\n1 1 2 3 3\n''') == '0'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 1\\n2 1 2 3 4 3\\n') == '2'\nassert solution('6 2\\n1 1 2 2 3 3\\n') == '0'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('monday\\ntuesday') == 'NO'\nassert solution('saturday\\ntuesday') == 'YES'"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('monday') == 'NO'\nassert solution('saturday') == 'NO'\nassert solution('sunday') == 'YES'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"monday\\ntuesday\\n\") == \"YES\"\nassert solution(\"saturday\\ntuesday\\n\") == \"YES\"\nassert solution(\"sunday\\ntuesday\\n\") == \"YES\"\nassert solution(\"saturday\\nsunday\\n\") == \"NO\""
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nmonday\ntuesday\n''') == \"NO\"\nassert solution('''\nsunday\nsunday\n''') == \"NO\"\nassert solution('''\nsaturday\ntuesday\n''') == \"YES\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nmonday\ntuesday\n''') == 'YES'\nassert solution('''\nsaturday\nsaturday\n''') == 'NO'\nassert solution('''\nsunday\nsunday\n''') == 'YES'\n\nassert solution('''\ntuesday\nwednesday\n''') == 'NO'\n\nassert solution('''\nsunday\nsunday\n''') == 'YES'"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('saturday\\ntuesday\\n') == 'YES'\nassert solution('saturday\\nwednesday\\n') == 'NO'\nassert solution('saturday\\nsunday\\n') == 'YES'\nassert solution('saturday\\ntuesday\\n') == 'YES'\nassert solution('saturday\\ntuesday\\n') == 'YES'\n\n\"\"\""
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''monday\n    tuesday''') == \"NO\"\nassert solution('''saturday\n    tuesday''') == \"YES\"\nassert solution('''sunday\n    sunday''') == \"YES\"\nassert solution('''saturday\n    sunday''') == \"YES\""
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('monday') == 'NO'\nassert solution('tuesday') == 'YES'\nassert solution('wednesday') == 'NO'\nassert solution('thursday') == 'YES'\nassert solution('friday') == 'NO'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('monday\\ntuesday') == 'NO'\nassert solution('saturday\\ntuesday') == 'YES'\nassert solution('saturday\\nsunday') == 'NO'\nassert solution('sunday\\nsunday') == 'YES'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5000000001 4999999999') == '91'\nassert solution('1234567890123456789012345678901234567890') == '99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('10000000000') == '91'\nassert solution('1000000000') == '0'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"17\"\nassert solution(input()) == \"91\"\n\n'''\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('35\\n') == '17'\nassert solution('10000000000\\n') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"35\\n\") == \"17\"\nassert solution(\"10000000000\\n\") == \"91\"\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''35''') == '17'\nassert solution('''10000000000''') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '4'\nassert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\""
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\""
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''AHA''') == 'YES'\nassert solution('''Z''') == 'NO'\nassert solution('''XO''') == 'NO'\nassert solution('''AYC''') == 'YES'\nassert solution('''GZM''') == 'YES'\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\nprint(solution('X'))\nprint(solution('XO'))\n\nimport re"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\n\n\n\n## Solution"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\""
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"AHA\") == \"YES\", \"Test 1 failed\"\nassert solution(\"Z\") == \"NO\", \"Test 2 failed\"\nassert solution(\"XO\") == \"NO\", \"Test 3 failed\""
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\"\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\n\n\n\"\"\"\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n1 5''') == '1'\nassert solution('''3\n1 2 5''') == '2'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n1 5\n''') == '0'\nassert solution('''\n3\n1 2 5\n''') == '1'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_string) == '0'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1 5\n''') == '0'\nassert solution('''3\n1 2 5\n''') == '1'\nassert solution('''4\n1 2 3\n''') == '2'\nassert solution('''5\n1 2 3\n''') == '3'\nassert solution('''6\n1 2 3\n''') == '4'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"0\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 5\n1 5\n1 5\n''') == '0'\nassert solution('''3\n1 2 5\n3\n5\n5\n''') == '1'\nassert solution('''1\n1\n1\n''') == '0'\nassert solution('''4\n1 2 3\n4\n5\n5\n''') == '2'"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n1 2 5\") == \"0\"\nassert solution(\"2\\n1 2 5\") == \"1\""
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1 5\\n') == '0'\nassert solution('3\\n1 2 5\\n') == '1'\n\nassert solution('2\\n1 1 2 3\\n') == '1'\nassert solution('2\\n1 1 2 3\\n') == '0'\n\n\"\"\""
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'\n\n\"\"\""
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"-1 1000000000\") == \"Yes\"\nassert solution(\"0 0\") == \"Yes\"\nassert solution(\"1000000000\") == \"Yes\"\nassert solution(\"0 0\") == \"No\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"-1 1000000000\") == \"Yes\"\nassert solution(\"0 0\") == \"Yes\""
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == \"No\"\nassert solution('-1 1000000000') == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([\"2 2\", \"RU\"]) == \"Yes\"\nassert solution([\"1 2\", \"RU\"]) == \"No\"\nassert solution([\"-1 1000000000\", \"LRRLU\"]) == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0 0\") == \"Yes\"\nassert solution(\"2 2\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"-1 1000000000\") == \"Yes\"\nassert solution(\"0 0\") == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2\nRU\n''') == 'Yes'\nassert solution('''1 2\nRU\n''') == 'No'\nassert solution('''-1 1000000000\nLRRLU\n''') == 'Yes'\nassert solution('''0 0\nD\n''') == 'Yes'"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"-1 1000000000\") == \"Yes\"\nassert solution(\"0 0\") == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"No\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 3 7\\n') == '1'\nassert solution('10   3   7\\n') == '1'\nassert solution('314\\n') == '0'\nassert solution('22 19 3\\n') == '1'\nassert solution('60\\n') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 3 7') == '1'\nassert solution('10   3   7') == '1'\nassert solution('314') == '0'\nassert solution('22 19 3') == '1'\nassert solution('60') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"60\") == \"1\"\n\"\"\""
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 3 7\n''') == '1'\nassert solution('''\n10  3  7\n''') == '1'\nassert solution('''\n314\n''') == '0'\nassert solution('''\n18 123\n''') == '1'\nassert solution('''\n1 2 3\n''') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 2 3\n''') == '1 2'\nassert solution('''\n1 2 3\n''') == '1 2'\nassert solution('''\n1\n''') == '1'\nassert solution('''\n-3\n''') == '0'\nassert solution('''\n2\n''') == '1'"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10 3 7\n10\n3\n7\n''') == '1'\nassert solution('''10   3   7\n10\n3\n7\n''') == '1'\nassert solution('''314\n159 265\n358\n''') == '0'\nassert solution('''22 19 3\n22\n19\n3\n''') == '1'\nassert solution('''60\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \nSample Output 5:\n1\n''') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 3 7') == '1'\nassert solution('10   3   7') == '1'\nassert solution('314') == '0'\nassert solution('22 19 3') == '1'\nassert solution('60') == '1'\n\"\"\"\nimport sys"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 3 7\\n') == '1'\nassert solution('10   3   7\\n') == '1'\nassert solution('314\\n') == '0'\nassert solution('22 19 3\\n') == '1'\nassert solution('60\\n') == '1'"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10 3 7\n''') == '1'\n\nassert solution('''10   3   7\n''') == '1'\n\nassert solution('''314\n''') == '0'\n\nassert solution('''22 19 3\n''') == '1'\n\nassert solution('''60\n''') == '0'"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '7'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n\"\"\"\nfrom itertools import product\nfrom functools import reduce\nfrom math import log\nimport operator"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '9'\nassert solution('1000000') == '9'\nassert solution('1234567') == '9'\nassert solution('1234') == '8'\nassert solution('123456') == '8'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '9'\nassert solution('10') == '21'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n\n''') == '9'\nassert solution('''3\n\n''') == '9'\n'''\n'''\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '12'\nassert solution('3') == '9'\nassert solution('4') == '18'\nassert solution('5') == '36'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '9'\nassert solution('10') == '98'\nassert solution('100') == '989'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 6 28 9\") == \"4\"\nassert solution(\"5\\n5 12 9 16 48\") == \"3\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"-\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 3 4\") == \"3\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n5 12 9 16 48''') == \"4\"\nassert solution('''4\n1 2 4 8''') == \"-1\"\nassert solution('''4\n3 6 28 9''') == \"4\"\nassert solution('''4\n1 2 4 8''') == \"3\""
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '4'\nassert solution('5\\n5 12 9 16 48') == '3'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4'\nassert solution('5\\n12 9 16 48') == '3'\nassert solution('4\\n3 6 28 9') == '4'"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n3 6 28 9\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n5\n5 12 9 16 48\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n4\n1 2 4 8\n\"\"\") == \"-1\""
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n3 6 28 9\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5\n5 12 9 16 48\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\n1 2 4 8\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4\n3 6 28 9\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5\n5 12 9 16 48\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\n1 2 4 8\n\"\"\") == \"-1\""
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"1\\n1\\n1\\n\"\nassert solution(\"4\\n3 6 28 9\\n\") == \"4\\n1 2 4 8\\n\"\nassert solution(\"4\\n5 12 9 16 48\\n\") == \"3\\n1 2 4 8\\n\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '3'\nassert solution(input()) == '-1'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 3 5 7\n''') == \"1\"\n\nassert solution('''\n7\n1 0 0 5 0 0 2\n''') == \"2\"\n\nassert solution('''\n4\n1 3 5 7\n''') == \"1\"\n\nassert solution('''\n4\n1 3 5 7\n''') == \"1\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '2'\nassert solution('7') == '1 7 3 5 6 4 2'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == \"2\"\nprint(solution(input_))\n\n\n>>> "
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"7\") == \"1 7 3 5 6 4 2\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '2'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"7\") == \"1\""
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == \"1\"\n\n''''\n\nInput\n3\n2 0 0 1\n\nOutput\n1\n\nInput\n7\n0 0 0 1 0 0 2\n\nOutput\n0\n'''\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n0 5 0 2 3\n''') == '2'\nassert solution('''\n7\n1 0 0 5 0 0 2\n''') == '1 7 3 5 6 4 2'"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n0 5 0 2 3\") == \"2\"\nassert solution(\"7\\n1 0 0 5 0 0 2\") == \"1 7 3 5 6 4 2\"\nprint(solution(input()))\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n0 5 0 2 3\n''') == '2'\nassert solution('''7\n1 0 0 5 0 0 2\n''') == '1 7 3 5 6 4 2'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n') == '2\\n'\nassert solution('5\\n') == '5\\n'\nassert solution('0\\n') == '0\\n'\nassert solution('10\\n') == '1\\n'"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n') == '2'\nassert solution('5\\n') == '5'"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n4\n''') == '2'\nassert solution('''5\n''') == '5'\nassert solution('''8\n''') == '5'\nassert solution('''10\n''') == '5'\nassert solution('''15\n''') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 2\nassert solution(\"5\") == 5\nassert solution(\"20\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '5'\nassert solution('4') == '2'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n''') == '2'\n\nassert solution('''\n5\n''') == '5'\n\nassert solution('''\n0\n''') == '1'\n\nassert solution('''\n10\n''') == '11'\n\nassert solution('''\n42\n''') == '42'"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '5'\nassert solution('4') == '2'\n\n'''\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n2\n3\n1\n4\n5''') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n') == '5'\nassert solution('6\\n') == '5'\nassert solution('7\\n') == '4'\nassert solution('8\\n') == '4'\nassert solution('9\\n') == '3'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '17'\nassert solution(input()) == '1 4 3'"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n\"\"\""
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2 2\") == \"18\"\nassert solution(\"4 2 2\") == \"31\"\nassert solution(\"5 3 1\") == \"1 3 5\"\nassert solution(\"6 3 1 6 3\") == \"4\"\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2 2') == '18'\nassert solution('4 2 2') == '31'\nassert solution('5 3 1') == '1 3 5'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 2 2\n1 3 4 5 2\n5 3 2 1 4\n''') == '18'\nassert solution('''\n4 2 2\n10 8 8 3\n10 7 9 4\n''') == '31'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2 2') == '18'\nassert solution('5 3 1') == '1 3 5'\nassert solution('4 2 2') == '31'\nassert solution('6 3 1 6 3') == '4'"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2 2') == '18'\nassert solution('4 2 2') == '31'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"5 2 2\n1 3 4 5 2\n5 3 2 1 4\n\"\"\") == \"18\"\nassert solution(\n\"\"\"4 2 2\n10 8 8 3\n10 7 9 4\n\"\"\") == \"31\"\nassert solution(\n\"\"\"5 3 1\n5 2 5 1 7\n6 3 1 6 3\n\"\"\") == \"23\"\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2 2\") == \"18\"\nassert solution(\"10 8 8 3\") == \"31\"\nassert solution(\"5 3 1\") == \"1 2\"\nassert solution(\"5 2 5 1 7\") == \"3 4\""
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2 2\") == \"18\"\nassert solution(\"4 2 2\") == \"31\"\nassert solution(\"5 3 1\") == \"1 3 5\"\nassert solution(\"6 3 1 6 3\") == \"4\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == 'Yes'\nassert solution('4 2') == 'No'\nassert solution('5 2') == 'No'\nassert solution('10 2') == 'Yes'\nassert solution('20 2') == 'No'\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"Yes\", \"1\"\nassert solution(\"2 1\") == \"No\", \"2\"\nassert solution(\"3 3\") == \"Yes\", \"3\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 1\n1 2\n''') == 'Yes'\nassert solution('''\n4 3\n1 2\n1 3\n1 4\n''') == 'No'\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"2 1\n1 2\n\"\"\") == \"Yes\"\nassert solution(\"\"\"4 3\n1 2\n1 3\n1 4\n\"\"\") == \"No\"\nassert solution(\"\"\"5 3\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"Yes\"\nassert solution(\"\"\"5 4\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"Yes\"\nassert solution(\"\"\"3 5\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"Yes\""
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"Yes\"\nassert solution(\"4 3\") == \"No\""
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"Yes\"\nassert solution(\"4 3\") == \"No\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n1 2\\n\") == \"Yes\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n\") == \"No\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == 'Yes'\nassert solution('4 3') == 'No'"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) in [\"Yes\", \"No\"]\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n1 2\") == \"Yes\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\") == \"No\"\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n0 1 1\n1 0 1\n1 2 0\n3\n\"\"\") == \"7\"\nassert solution(\n\"\"\"\n0 2 1\n1 0 100\n1 2 0\n3\n\"\"\") == \"19\"\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 1 1\n1 0 1\n1 2 0\n3\n''') == '7'\nassert solution('''\n0 2 1\n1 0 100\n1 2 0\n3\n''') == '19'\nassert solution('''\n0 0 1\n1 0 100\n1 2 0\n3\n''') == '86'\nassert solution('''\n0 1 1\n1 0 1\n1 2 0\n3\n''') == '0'\nassert solution('''\n0 2 1\n1 0 100\n1 2 0\n3\n''') == '0'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 1 1') == '7'\nassert solution('1 0 1') == '9'\nassert solution('1 2 0') == '8'\nassert solution('3') == '19'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 1 1') == '7'\nassert solution('0 2 2') == '19'"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"7\""
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0 1 1\\n1 0 1\\n1 1 0\\n3\\n') == '7'\nassert solution('0 2 1\\n1 0 100\\n1 2 0\\n3\\n') == '19'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''0 1 1\n1 0 1\n1 2 0\n3''') == '7'\nassert solution('''0 2 1\n1 0 100\n1 2 0\n5''') == '87'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n0 1 1\n1 0 1\n1 2 0\n3\n''') == '7'\nassert solution('''\n0 2 1\n1 0 100\n1 2 0\n3\n''') == '87'\nassert solution('''\n0 2 1\n1 0 100\n1 2 0\n5\n''') == '113'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 1 1') == '7'\nassert solution('1 0 1') == '19'\nassert solution('1 2 0') == '87'\nassert solution('2 1 0') == '19'\nassert solution('2 2 0') == '19'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\") == \"7\"\nassert solution(\"0 1 1\") == \"7\"\nassert solution(\"1 2 1\") == \"19\"\nassert solution(\"0 2 1\") == \"19\"\nassert solution(\"0 1 2\") == \"31\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('Bulbbasaur') == '1'\nassert solution('F') == '0'\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == '2'\n\n'''\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''Bulbbasaur''') == '1'\nassert solution('''F''') == '0'\nassert solution('''aBddulbasaurrgndgbualdBdsagaurrgndbb''') == '2'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('F') == '0'\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == '2'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''Bulbbasaur\nF''') == '1'\nassert solution('''aBddulbasaurrgndgbualdBdsagaurrgndbb''') == '2'\nassert solution('''RGsadgbnrgvatrgndgdfdrgagndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndbdrgndb"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''Bulbbasaur''') == '1'\nassert solution('''F''') == '0'\nassert solution('''aBddulbasaurrgndgbualdBdsagaurrgndbb''') == '2'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('Bulbbasaur') == '1'\nassert solution('F') == '0'\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == '2'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == '1'"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\"\n\nassert solution(\n    \"Bulbbasaur\") == \"1\"\n\nassert solution(\n    \"F\") == \"0\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('bulbbasaur') == '1'\nassert solution('F') == '0'\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == '2'\nprint('Exercise 2 is correct')\n\n\"\"\"\n\nstdin = \"\"\"\nbulbbasaur\n\n\"\"\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"1\"\nassert solution(input) == \"0\"\nassert solution(input) == \"2\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3\\narc\\nrac') == 'YES'\nassert solution('3 5\\nab\\nca\\ncd') == 'NO'\n\n\"\"\""
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_string) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"2 1\") == \"NO\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\narc\nrac\n''') == 'YES'\nassert solution('''\n4 4\nabcd\nefgh\nijkl\n''') == 'NO'\n'''\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\narc\\nrac') == 'YES'\nassert solution('2 3\\narc\\nra') == 'NO'\nassert solution('2 3\\narc\\nrac') == 'YES'\nassert solution('2 4\\nabc\\ndef') == 'NO'\nassert solution('2 3\\nabc\\ndef') == 'NO'\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\narc\\nrac\") == \"YES\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('4 4') == 'YES'\nassert solution('10 3') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\nabc\n''') == 'YES'\nassert solution('''\n2\nacd\n''') == 'NO'\n'''\n\nfrom copy import deepcopy"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3\narc\nrac''') == \"YES\"\nassert solution('''1 2\naac''') == \"NO\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"1 3\"\"\") == \"4\"\nassert solution(\"\"\"1 5\"\"\") == \"4\"\nassert solution(\"\"\"2 3\"\"\") == \"4\"\nassert solution(\"\"\"1 6\"\"\") == \"3\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 111') == '4'\nassert solution('3 12') == '2'\n\"\"\""
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 111') == '4'\nassert solution('3 1') == '2'\n\n-----------------------------\n\nGiven an integer X and a binary number A,\nwhere A = 1011 means that X is written on the blackboard as 1 in the least significant bit.\n\nWrite a function:"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '5 111\\n1111\\n10111\\n10010\\n'\n) == '4'\n\nassert solution(\n    '5 111\\n1111\\n10111\\n10010\\n'\n) == '4'\n\nassert solution(\n    '3 111\\n1111\\n10111\\n10010\\n'\n) == '5'\n\nassert solution(\n    '3 111\\n1111\\n10111\\n10010\\n'\n) == '5'\n\nassert solution(\n    '3 111\\n1111\\n10111\\n10010\\n'\n) == '4'"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 10\n1\n2''') == '3'\nassert solution('''3 5\n1\n3\n1''') == '4'\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 111\") == \"4\"\nassert solution(\"10 1000\") == \"10\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 111\") == \"4\"\nassert solution(\"3 1\") == \"2\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 111\") == \"4\"\nassert solution(\"1\") == \"2\"\nassert solution(\"1\") == \"2\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('5') == '3'\n\n-----Explanation-----\nHere is the proof:\nLet X be the number that is not written on the blackboard yet.\nLet a and b be two integers written on the blackboard.\nIf X does not exceed 7, then X can be written as A1, A2, A3, A4, A5, A6, X = A1, A2, A3, A4, A5, A6.\nIn that case, A1, A2, A3, A4, A5, A6 and X can be written on the blackboard.\nHence, the answer is:\n - X = 1.\nLet the summation of all the integers written on the blackboard thus far be m.\nThen m = a + b + X\nIf m exceeds 7, then we write any of the integers written on the blackboard.\nIf m is already greater than 7, then we write all the integers written on the blackboard.\nTherefore, the answer is:\n - m = a + b + X = 1 + 3 + 8.\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 111') == '4'\nassert solution('3 999') == '3'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == 1, f\"This is not a correct answer. The solution is {solution(input)}\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('11 11 5') == '1'\nassert solution('11 2 3') == '-1'"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('11 11 5') == 1\nassert solution('11 2 3') == -1\nassert solution('1 1 1') == 1\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('11 11 5') == '1'\nassert solution('11 2 3') == '-1'\nassert solution('1 1 1') == '1'\nassert solution('1 1 2') == '2'\nassert solution('2 2 2') == '0'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''11 11 5''') == '1'\nassert solution('''11 2 3''') == '-1'\nassert solution('''2 9 7''') == '3'\nassert solution('''1 1 1''') == '1'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11 11 5') == '1'\nassert solution('11 2 3') == '-1'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"11 11 5\"\"\") == \"1\"\nassert solution(\"\"\"11 2 3\"\"\") == \"-1\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\""
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([11, 11, 5]) == 1\nassert solution([11, 2, 3]) == -1"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\""
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\""
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == 'NO'\nassert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == \"YES\", \"TEST\"\nassert solution(\"jinotega\") == \"NO\", \"TEST\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == 'YES'\n\"\"\""
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'\n\nIf your code passes all the tests, it will be removed from the list and your submission will be graded automatically.\n\n'''\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''abacaba''') == 'YES'\nassert solution('''jinotega''') == 'NO'\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('abacaba') == 'NO'\nassert solution('jinotega') == 'YES'"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''abacaba''') == 'YES'\nassert solution('''jinotega''') == 'NO'\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2 6''') == '6.5'\nassert solution('''4 2 20''') == '20.0'\nassert solution('''10 2 20''') == '20.0'\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2 6''') == '6.5'\nassert solution('''4 2 20''') == '20.0'"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2 6''') == '6.5'\nassert solution('''4 2 20''') == '20.0'"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\""
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2 6\") == '6.5'\nassert solution(\"4 2 20\") == '20.0'\n\n'''\n\nimport math\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n\n\n\n---References---\nhttps://stackoverflow.com/questions/19277420/how-do-i-determine-if-a-string-is-in-a-list-in-python\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\"\n\"\"\"\n\nk, d, t = map(int, input().split())\n\nimport math"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2 6''') == '6.5'\nassert solution('''4 2 20''') == '20.0'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2\\n..\\n..') == '2'\nassert solution('4 4\\n....\\n.##\\n....') == '1'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == '2'\nassert solution(\"4 4\") == '1'\nassert solution(\"3 4\") == '2'"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n\"\n                \".\\n\") == \"1\"\nassert solution(\"4 4\\n\"\n                \"....\\n\"\n                \"...#\\n\") == \"1\"\nassert solution(\"3 4\\n\"\n                \".#.\\n\") == \"2\"\nassert solution(\"10 10\\n\"\n                \"..#.\\n\"\n                \".##.\\n\"\n                \"......\\n\"\n                \"......\\n\"\n                \"......\\n\"\n                \"......\\n\"\n                \"......\\n\"\n                \".#..#\\n\"\n                \"..##.\\n\"\n                \"#.##.\\n\"\n                \"#.###\\n\"\n                \"#.##.\\n\"\n                \"#..##\\n\"\n                \"#.##.\\n\"\n                \"#.###\\n\"\n                \"#.##.\\n\"\n                \"#.###\\n\"\n                \"#.##.\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                \"#.###\\n\"\n                "
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\n..\n..\n\n''') == '1'\n\nassert solution('''\n3 4\n....\n.##.\n....\n\n''') == '2'\n\nassert solution('''\n3 4\n....\n.##.\n....\n\n''') == '3'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 4\n....\n.##.\n....\n\n''') == \"1\"\nassert solution('''3 4\n.##.\n...#\n##.#\n\n''') == \"2\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 4') == '1'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 4') == '1'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2 2\n..\n..\n\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4 4\n....\n.##.\n....\n\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"5 5\") == \"1\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2\n..\n..\n\n2 2\n..\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1 3') == '6'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == '6'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3\n1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n3 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1 3\n''') == '6'\nassert solution('''2\n1 1 3\n''') == '1'\nassert solution('''5\n1 1 4 4\n''') == '4'\nassert solution('''1\n1 1\n''') == '0'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == '6'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 1 3\") == \"6\"\nassert solution(\"3\\n1 1 3\") == \"1\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6'"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\n1 1 3\"\"\") == \"6\"\nassert solution(\"\"\"3\n1 2 1\"\"\") == \"6\"\nassert solution(\"\"\"3\n1 2 3\"\"\") == \"0\"\nassert solution(\"\"\"3\n1 2 3\"\"\") == \"0\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 3') == '6'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\n1 4 5 7 3 2 6 8 9 10\n''') == '25'\nassert solution('''\n6\n1 2 2 2 2 4\n''') == '1'\nassert solution('''\n10\n1 3 2 3 3 3 4 4 4 5\n''') == '4'\nassert solution('''\n7\n2 1 3 4 5 6 7\n''') == '8'\nassert solution('''\n13\n1 2 3 3 3 4 5 6 7 8 9 10 11 12 13\n''') == '18'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(1) == \"11\"\nassert solution(2) == \"3\"\nassert solution(3) == \"1\"\nassert solution(4) == \"4\"\nassert solution(5) == \"2\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n1 4 3 7 5''') == '11'\nassert solution('''5\n1 4 3 7''') == '10'\nassert solution('''5\n1 4 3''') == '10'\nassert solution('''5\n1 4''') == '11'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 4 3 7 5\\n\") == \"11\\n3\"\nassert solution(\"5\\n1 3 5 7\\n\") == \"11\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\\n\") == \"11\"\nassert solution(\"10\\n5 5 5 5 5 5 5 5 5 5\\n\") == \"11\"\nassert solution(\"10\\n4 6 2 3 5\\n\") == \"11\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"7\") == \"5\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n1 4 3 7 5\n''') == '11'\nassert solution('''\n5\n1 4 3 7 5\n''') == '7'\nassert solution('''\n5\n1 4 3 7 5\n''') == '9'\nassert solution('''\n5\n1 4 3 7 5\n''') == '6'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 4 3 7 5') == '11\\n3\\n1'\nassert solution('5\\n1 4 3 7 5\\n') == '11\\n3\\n1'\nassert solution('5\\n1 4 3 7 5\\n4') == '11\\n4'\nassert solution('5\\n1 4 3 7 5\\n4\\n') == '11\\n4\\n'\nassert solution('5\\n1 4 3 7 5\\n4\\n3') == '11\\n4\\n3'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n4 4 7 5\\n\") == \"11\"\nassert solution(\"4\\n1 4 3 7 5\\n\") == \"11\"\nassert solution(\"3\\n4 4 3 7 5\\n\") == \"5\"\nassert solution(\"3\\n4 4 3 7 5\\n\") == \"4\"\nassert solution(\"5\\n1 1 1 1 1\\n\") == \"1\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 4 3 7 5\") == \"11\"\nassert solution(\"5\\n3 3 4 3 5\") == \"3\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2') == '2.5'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"10.2\"\n\nassert solution(\"6 1\") == \"10.25\"\n\nassert solution(\"6 2\") == \"10.3\"\n\nassert solution(\"3 100\") == \"9.2\"\n\nassert solution(\"3 1 1.0\") == \"1.0\""
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6 1\n10.245\n''') == '10.25'\nassert solution('''6 2\n10.245\n''') == '10.3'\nassert solution('''3 100\n9.2\n''') == '9.3'\nassert solution('''3 100\n9.2\n''') == '9.2'\nassert solution('''3 100\n9.2\n''') == '9.2'\n\n\"\"\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == \"10\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3 0\") == \"0\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 1\") == \"5.1\"\nassert solution(\"7 100\") == \"7.1\"\nassert solution(\"4 5\") == \"4.5\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"3 1\") == \"3.1\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '1.0'\nassert solution('2 2') == '2.0'\nassert solution('4 2') == '4.0'\nassert solution('10 2') == '10.0'\nassert solution('100 2') == '100.0'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 1\") == \"10.25\"\nassert solution(\"6 2\") == \"10.3\"\nassert solution(\"3 100\") == \"9.2\""
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 1') == '10.25'\nassert solution('6 2') == '10.3'\nassert solution('3 100') == '9.2'"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n2') == '2'\nassert solution('3 1\\n1.1') == '2.0'\nassert solution('5 1\\n1.9') == '2.0'\nassert solution('6 1\\n1.2') == '2.0'\nassert solution('9 1\\n1.1') == '1.0'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1') == '5.0'\nassert solution('5 2') == '5.0'\nassert solution('6 1') == '6.0'\nassert solution('6 2') == '6.0'\n\n\"\"\""
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == \"0110\"\n\n\"\"\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == \"0110\"\nassert solution('1 2 2 1') == \"0110\"\nassert solution('1 2 2 3') == \"0110\"\nassert solution('1 2 2 4') == \"Impossible\"\nassert solution('1 2 2 4 4') == \"Impossible\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([1, 2, 2, 1]) == \"0110\"\nassert solution([1, 2, 2, 1]) == \"Impossible\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == 'Impossible'\nassert solution('1 2 2 1') == '0110'\nassert solution('1 2 2 1 1 2 3') == '0110'\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '0110'"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\", \"First\"\nassert solution(\"1 2 2 1\") == \"0110\", \"Second\"\nassert solution(\"1 1 1 1\") == \"1110101\", \"Third\"\nassert solution(\"1 0 0 0\") == \"0\", \"Fourth\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2 3 4\n''') == '0110'\n\nassert solution('''\n1 2 2 1\n''') == 'Impossible'\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"1 2 2 1\") == \"0110\""
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == \"0110\"\nassert solution('1 2 2 1') == \"0110\"\nassert solution('0 0 0 1') == \"Impossible\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == '0110'\nassert solution('1 2 2 1') == '0'\nassert solution('1 2 2 3') == '0'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10\n.**PP.*P.*\n\n''') == '3'\nassert solution('''\n7\n*..P*P*\n\n''') == '3'\n\nassert solution('''\n4\n*.*P.*P\n\n''') == '4'\nassert solution('''\n1\nP.*\n\n''') == '1'\nassert solution('''\n2\nP.*\n.**\n\n''') == '1'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7') == '3'\nassert solution('10') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '3'\nassert solution('20') == '2'"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7') == '3'\nassert solution('10') == '2'\nassert solution('.'*10) == '2'\nassert solution('.'*20) == '1'\nassert solution('*'*10) == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7\n*..P*P*\n\n''') == '3'\nassert solution('''\n10\n.**PP.*P.*\n\n''') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '7'\n    ) == '3'\n\nassert solution(\n    '10'\n    ) == '2'\n\nassert solution(\n    '1'\n    ) == '1'\n\nassert solution(\n    '11'\n    ) == '1'\n\nassert solution(\n    '2'\n    ) == '0'"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7') == '3'\nassert solution('10') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7') == '3'\nassert solution('10') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"8\"\nassert solution(\"3\") == \"16\""
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"8\"\nassert solution(\"3\") == \"16\"\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"16\""
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '16'\nassert solution('4') == '0'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"16\"\nassert solution(\"4\") == \"8\"\nassert solution(\"5\") == \"1\""
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\nassert solution('4') == '0'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"16\""
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"8\"\nassert solution(\"3\") == \"16\"\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n') == '4'\nassert solution('2\\n') == '8'\nassert solution('3\\n') == '16'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n9 9 5 5 2 1\n''') == '1 3 9 7'\nassert solution('''\n100 100 52 50 46 56\n''') == '17 8 86 92'\nassert solution('''\n9 9 5 5 2 1\n''') == '1 3 9 7'\nassert solution('''\n100 100 52 50 46 56\n''') == '17 8 86 92'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n10 10 5 5 2 1\n\"\"\") == \"1 3 9 7\"\nassert solution(\"\"\"\n100 100 52 50 46 56\n\"\"\") == \"17 8 86 92\"\nassert solution(\"\"\"\n10 10 5 5 2 1\n\"\"\") == \"1 3 9 7\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3 2 1\n1\n''') == '1 1'\n\nassert solution('''\n5 5 2 1\n1\n''') == '3 3'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('11 1 10 7') == '3 3'\nassert solution('1 1 100 100') == '1 3'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('9 9 5 5 2 1') == '1 3 9 7'\nassert solution('100 100 52 50 46 56') == '17 8 86 92'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n2\\n2\\n2\\n1\\n1') == '1 3'\nassert solution('6\\n4\\n4\\n4\\n1\\n1') == '1 4'\nassert solution('10\\n10\\n10\\n10\\n10\\n10') == '1 1'\nassert solution('5\\n5\\n5\\n5\\n5\\n5') == '1 1'\nassert solution('5\\n5\\n5\\n5\\n5\\n5') == '1 1'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([[4, 4, 4, 4],\n    [4, 4, 4, 4]]) == '1 3 4 4'\nassert solution([[8, 4, 8, 4],\n    [8, 4, 8, 4]]) == '2 5 8 8'\nassert solution([[9, 9, 9, 9],\n    [9, 9, 9, 9]]) == '1 3 9 9'\nassert solution([[9, 9, 9, 9],\n    [9, 9, 9, 9]]) == '1 3 9 9'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([\n    '9',\n    '9',\n    '5',\n    '5',\n    '2',\n    '1'\n]) == '3 3'\n\nassert solution([\n    '100',\n    '100',\n    '52',\n    '50',\n    '46',\n    '56'\n]) == '17 8 86 92'\n\nassert solution([\n    '3',\n    '3',\n    '5',\n    '5',\n    '2',\n    '1'\n]) == '1 3'\n\nassert solution([\n    '100',\n    '100',\n    '52',\n    '50',\n    '46',\n    '56'\n]) == '17 8 86 92'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n9 9 5 5 2 1\n\"\"\") == \"1 3 9 7\"\nassert solution(\"\"\"\n100 100 52 50 46 56\n\"\"\") == \"17 8 86 92\"\nassert solution(\"\"\"\n100 100 20 20 1\n\"\"\") == \"17 8 86 92\"\nassert solution(\"\"\"\n100 100 10 10 1\n\"\"\") == \"17 8 86 92\"\nassert solution(\"\"\"\n100 100 10 10 1\n\"\"\") == \"17 8 86 92\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"9 9 5 5 2 1\"\"\") == \"1 3 9 7\"\nassert solution(\"\"\"100 100 52 50 46 56\"\"\") == \"17 8 86 92\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"FTFFTFTFF\") == \"No\"\nassert solution(\"TTTTTFFF\") == \"Yes\"\nassert solution(\"TTTTFFTFF\") == \"No\""
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == 'Yes'\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('FTFFFFFF') == 'No'"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == 'Yes'"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('FFF') == 'Yes'\nassert solution('F') == 'Yes'\nassert solution('TTT') == 'Yes'\nassert solution('TTTTTTTT') == 'Yes'\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"TTFFTFFF\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nF\nF\nF\nF\nF\nF\nF\nF\nF\nT\nT\nT\nT\nT\nT\nT\nT\nF\n''') == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('FTFFTFFF') == 'Yes', 'Should be Yes'\nassert solution('FTFTF') == 'No', 'Should be No'\nassert solution('TFFF') == 'No', 'Should be No'\nassert solution('FFTT') == 'No', 'Should be No'\n\"\"\"\n\nfrom sys import stdin\nstdin = stdin.read()"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('FTTTFFTFF') == 'No'"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('FTTFFTFF') == 'No'\n\"\"\"\n\nx, y = input().split()\nx, y = int(x), int(y)\n\ndirection = {\"F\": (0, 1), \"T\": (1, 0), \"B\": (0, -1), \"L\": (-1, 0)}\ndirection_reversed = {\"F\": \"B\", \"T\": \"L\", \"B\": \"T\", \"L\": \"F\"}\n\nstep = 0\nfor i in range(len(stdin)):\n    if stdin[i] == \"T\" or stdin[i] == \"B\" or stdin[i] == \"L\" or stdin[i] == \"F\":\n        step += 1\n    else:\n        step = 0\n    if step == 2:\n        break"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\nassert solution('-1') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n''') == '2'\nassert solution('''\n2\n''') == '3'\nassert solution('''\n3\n''') == '5'\nassert solution('''\n4\n''') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\""
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n\") == '2'\nassert solution(\"2\\n\") == '3'\nassert solution(\"3\\n\") == '5'\nassert solution(\"4\\n\") == '6'\n\"\"\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\n\"\"\""
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3\\n3\\n') == '1.3333333333'\nassert solution('5\\n2 4 6 5\\n9\\n') == '1.2727272727'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2 3\n3\n\n''') == '1.3333333333'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3\\n3\\n') == '1.3333333333'\nassert solution('6\\n10 11 12 13 14\\n15\\n') == '1.6666666'\nassert solution('4\\n7 8 9 10\\n12\\n') == '1.0'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n2 3 4 5\n5''') == '0.8333333333333333'\nassert solution('''4\n2 3 4 5\n5''') == '0.66666667'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 3\n3\n''') == '1.3333333333'\nassert solution('''3\n2 2 2\n2\n''') == '2.5'\nassert solution('''3\n3 2 1\n3\n''') == '3.0'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\\n3\\n\") == \"1.3333333333\"\nassert solution(\"5\\n2 2 4 5\\n6\\n\") == \"0.6\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1.3333333333'\nassert solution('2') == '1.3333333333'\nassert solution('3') == '1.3333333333'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3\n1 2 3\n3\n\"\"\") == \"1.3333333333\"\nprint(solution(\n\"\"\"\n3\n1 2 3\n3\n\"\"\") == \"1.3333333333\")\nprint(solution(\n\"\"\"\n4\n1 2 3\n5\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n2\n2 5\n4\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n2\n5 2\n5\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n2\n1 1\n5\n\"\"\") == \"1.000000000\")\nprint(solution(\n\"\"\"\n2\n5 1\n5\n\"\"\") == \"1.000000000\")\nprint(solution(\n\"\"\"\n3\n1 2 3\n3\n\"\"\") == \"1.3333333333\")\nprint(solution(\n\"\"\"\n2\n1 1\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n1\n2 2\n2\n\"\"\") == \"1.0\")\nprint(solution(\n\"\"\"\n1\n2\n1\n\"\"\") == \"1.0\")\nprint(solution(\n\"\"\"\n5\n2 5 8 9\n5\n\"\"\") == \"2.3333333333\")\nprint(solution(\n\"\"\"\n5\n2 5 6 9\n5\n\"\"\") == \"2.3333333333\")\nprint(solution(\n\"\"\"\n5\n2 5 8 9\n5\n\"\"\") == \"2.3333333333\")\nprint(solution(\n\"\"\"\n2\n1 1\n2\n\"\"\") == \"1.0\")\nprint(solution(\n\"\"\"\n2\n1 1\n2\n\"\"\") == \"1.0\")\nprint(solution(\n\"\"\"\n5\n2 5 8 9\n5\n\"\"\") == \"2.3333333333\")\nprint(solution(\n\"\"\"\n5\n2 5 8 9\n5\n\"\"\") == \"2.3333333333\")\nprint(solution(\n\"\"\"\n4\n1 2 3\n3\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n3\n1 2 3\n3\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n4\n1 2 3\n3\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n3\n1 2 3\n3\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n3\n2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n3\n2 2 2\n3\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n3\n2 3 3\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n3\n2 3 3\n3\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n3\n1 2 3\n3\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n3\n1 2 3\n3\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 1 2 2\n2\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 1 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 1 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 1 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 1 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 1 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 1 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 1 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 1 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\"\") == \"0.5\")\nprint(solution(\n\"\"\"\n5\n1 2 2 2\n1\n\"\""
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 3 4') == '1.166666666667'\nassert solution('5\\n1 2 3 4 5') == '1.5'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3\\n3\\n') == '1.3333333333'\nassert solution('4\\n1 2 3 4\\n5\\n') == '1.3333333333'"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 5 7 9 1') == '6 9'\nassert solution('1 3 5 7 9 1') == '6 9'\nassert solution('4 3 5 7 1') == '7 8'\nassert solution('4 3 5 7 1') == '7 8'\nassert solution('2 5 7 4 1') == '2 5'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1 2') == '13 7'\nassert solution('2 100000 569') == '986 605'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"13 7\"\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2\") == \"13 7\"\nassert solution(\"2 100000 569\") == \"986 605\"\nprint(solution(input()))\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 1 2\n9 7 11 15 5\n''') == '13 7'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n2 3 9\n\"\"\") == \"13 7\"\n\nassert solution(\"\"\"\n1\n5 2\n\"\"\") == \"10 7\"\n\nassert solution(\"\"\"\n5\n3 5 7 11 15\n\"\"\") == \"11 15\"\n\nassert solution(\"\"\"\n5\n2 2 2 2 2\n\"\"\") == \"7 5\"\n\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"3 7\""
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '5 1 2'\n) == '13 7'\nassert solution(\n    '2 100000 569'\n) == '986 605'\nassert solution(\n    '5 5 1 2 3 5 5'\n) == '11 9'\nassert solution(\n    '8 1 2 5 8 4 1 5 3'\n) == '10 7'"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 1 0\n1 1 1\n1 2 1''') == '1 1'\nassert solution('''5 1 2\n9 7 11 15 5\n\n2 100000 569\n605 986\n\nOutput\n986 605''') == '986 605'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\") == \"5 6 5 4 3\"\nassert solution(\"4 1 2 3 4 5\") == \"5 4 3 2 1\"\nassert solution(\"3 1 2 3 4 5\") == \"5 3 2 1\"\nassert solution(\"4 1 2 3 4 5\") == \"5 4 3 2 1\"\nassert solution(\"7 4 3 2 1\") == \"7 4 3 2 1\"\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1 2') == '13 7'\nassert solution('5 1 2') == '9 7 11 15 5'\nassert solution('2 3 4') == '11 3 4'\nassert solution('2 3 2') == '2 3'\nassert solution('2 4') == '3 4'\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 2 4 4') == \"1\"\nassert solution('3 3 3 3 5') == \"0\"\nassert solution('5 5 1 2 3') == \"3\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 2 4 4') == '1'\nassert solution('3 3 3 3 5') == '0'\nassert solution('5 5 1 2 3') == '3'\nassert solution('3 4 1 1 3') == '-1'\nassert solution('3 3 3 3 5') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 3 2 4 4\n2 5 4 10\"\"\") == \"1\"\nassert solution(\"\"\"3 3 3 3 5\n2 3 5 4 2\"\"\") == \"0\"\nassert solution(\"\"\"5 5 1 2 3\n2 3 5 4 2\"\"\") == \"3\""
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1\"\nassert solution() == \"0\"\nassert solution() == \"3\"\nassert solution() == \"-1\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == \"1\"\n\nassert solution(s) == \"0\"\n\nassert solution(s) == \"0\"\n\"\"\""
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"1\""
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 2 4 4') == '1'\nassert solution('3 3 3 3 5') == '0'\nassert solution('5 5 1 2 3') == '0'\nassert solution('3 4 1 1 3') == '3'\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3 2 4 4\n2 5 4 10''') == '1'\nassert solution('''3 3 3 3 5\n2 3 5 4 2''') == '0'\nassert solution('''5 5 1 2 3\n2 3 2''') == '-1'\nassert solution('''3 4 1 1 3\n2 3 2''') == '3'\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3 2 4 4\n2 5 4 10''') == '1'\nassert solution('''3 3 3 3 5\n2 3 5 4 2''') == '0'\nassert solution('''5 5 1 2 3\n2 3 5 4 2''') == '3'\nassert solution('''5 5 1 1 3\n2 3 5 4 2''') == '-1'"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '0'\nassert solution('4') == '2'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\nassert solution('5') == '2'\nassert solution('4') == '1'"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\nG3 G3\n\n''') == '0'\n\nassert solution('''\n4\nG4 R4 R3 B3\n\n''') == '2'\n\nassert solution('''\n5\nB1 Y1 W1 G1 R1\n\n''') == '4'\n\n\nimport re\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\nG3 G3') == '0'\nassert solution('4\\nB4 R4 R3 B3') == '2'\nassert solution('5\\nB1 Y1 W1 G1 R1') == '4'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\nB1 Y1 W1 G1 R1\n''') == '2'\nassert solution('''5\nB1 Y1 W1 G1 R1\n''') == '4'\nassert solution('''5\nB1 Y1 W1 G1 R1\n''') == '2'\n'''\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\nG4 R4 R3 B3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\nB1 Y1 W1 G1 R1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n4\nG4 R4 R3 B3\nG4 R4 R3 B3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5\nB1 Y1 W1 G1 R1\nG1 R1\nB1 Y1 W1\nG1 R1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\nB1 Y1 W1 G1 R1\nG1 R1\nB1 Y1 W1\nG1 R1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nG4 G4\n''') == \"0\"\nassert solution('''\nG4 G3 G3\n''') == \"1\"\nassert solution('''\nG4 G4 G1\n''') == \"2\"\nassert solution('''\nG4 G3 G2 G1\n''') == \"1\"\nassert solution('''\nG4 G3 G2 G1\n''') == \"2\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '0'\nassert solution('4') == '2'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\nG3 G3\n\n''') == '0'\nassert solution('''\n4\nG4 R4 R3 B3\n\n''') == '2'\nassert solution('''\n5\nB1 Y1 W1 G1 R1\n\n''') == '4'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1 1'\nassert solution('3') == '1 1 1'\nassert solution('5') == '1 1 3'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1 1'\nassert solution('5') == '3 11'\nassert solution('5') == '3 11'\nassert solution('1') == '1 1'\nassert solution('4') == '3 11'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 3 4 3\\n4 7 6 5\\n\") == \"2 6\"\nassert solution(\"5\\n10 30 5 6 24\\n10 41 7 8 24\\n\") == \"3 11\"\nassert solution(\"3\\n1 1\\n100 100\\n\") == \"1 1\""
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2 6'\nassert solution('2') == '1 1'\nassert solution('5') == '3 11'"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"2 6\"\nassert solution(\"2\") == \"1 1\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 3 4 3\\n4 7 6 5\") == \"2 6\"\nassert solution(\"5\\n10 30 5 6 24\\n10 41 7 8 24\") == \"3 11\""
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n3 3 4 3\n4 7 6 5\n''') == '2 6'\nassert solution('''\n5\n10 30 5 6 24\n10 41 7 8 24\n''') == '3 11'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1 1'\nassert solution('2') == '2 1'\nassert solution('3') == '3 1'\nassert solution('4') == '3 2'\nassert solution('5') == '3 3'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2 6\"\nassert solution(stdin=\"4 3 4 3\") == \"2 6\"\nassert solution(stdin=\"5 10 30 5 6 24\") == \"3 11\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read().strip()"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"3B\"\nassert solution(\"1 2\") == \"Impossible\"\nassert solution(\"1 2\") == \"3B\"\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 4\") == \"3B\"\nassert solution(\"2 2\") == \"Impossible\"\nassert solution(\"3 2\") == \"1A1B\"\nassert solution(\"3 4\") == \"Impossible\"\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 4\\n\") == \"3B\"\nassert solution(\"2 2\\n\") == \"Impossible\"\nassert solution(\"3 2\\n\") == \"1A1B\"\nassert solution(\"3 2\\n\") == \"1A1B\""
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 4\\n') == '3B', \"Wrong\"\nassert solution('2 2\\n') == 'Impossible', \"Wrong\"\nassert solution('3 2\\n') == '1A1B', \"Wrong\""
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 4\\n') == '3B'\nassert solution('2 2\\n') == 'Impossible'\nassert solution('3 2\\n') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 4\\n') == '3B'\nassert solution('2 2\\n') == 'Impossible'\nassert solution('3 2\\n') == '1A1B'\nassert solution('1 1\\n') == 'Impossible'\nassert solution('2 1\\n') == '1A1B'"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"Impossible\"\nassert solution(\"2 2\") == \"3B\"\nassert solution(\"3 2\") == \"1A1B\"\nassert solution(\"10 3\") == \"10A\"\nassert solution(\"1 10\") == \"Impossible\"\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 4\n''') == '3B'\nassert solution('''\n2 2\n''') == 'Impossible'\nassert solution('''\n3 2\n''') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 4\\n\") == \"3B\"\nassert solution(\"2 2\\n\") == \"Impossible\"\nassert solution(\"3 2\\n\") == \"1A1B\"\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 4\n3B\n2 2\n''') == 'Impossible'\n\nassert solution('''3 2\n1A1B\n''') == '3B'\n\nassert solution('''1 2\n3AB\n''') == '1A1B'\n\nassert solution('''1 10\n2AB2B\n''') == 'Impossible'\n\nassert solution('''3 2\n3AB\n''') == '1A1B'"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    3 2\n    ''') == '3'\n\nassert solution('''\n    5 4\n    ''') == '25'\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\""
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == \"25\"\nassert solution(\"5 4\") == \"25\"\n\n---"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"5 5\") == \"10\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2''') == '3'\nassert solution('''5 4''') == '25'\nassert solution('''6 7''') == '29'\nassert solution('''5 13''') == '1296'\nassert solution('''5 28''') == '4104'\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == \"3\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 2''') == '3'\nassert solution('''5 4''') == '25'\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2\n''') == '3'\nassert solution('''5 4\n''') == '25'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 3') == '0'\nassert solution('4 2') == '1'\n\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom typing import List\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n') == '1'\nprint('done')"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n4 4\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2\n    \"\"\"\n) == \"1\"\nassert solution(\n    \"\"\"\n3 2\n-4 1\n-1 1\n    \"\"\"\n) == \"0\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_data) == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 1 2') == '1'\nassert solution('2 1 2 1') == '0'\nassert solution('4 4') == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4') == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\nassert solution('4 4') == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n') == '1'\nassert solution('5 5\\n5 5 2 3\\n0 1 2 3\\n1 2\\n2 3\\n3 4\\n4 2\\n') == '5'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n\") == \"1\""
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == -1\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '2'\nassert solution('3 3') == '-1'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"8 8\") == \"0\"\nassert solution(\"10 10\") == \"-1\"\nassert solution(\"10 20\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '2'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '2'\nassert solution('8 3') == '-1'\nassert solution('4 4') == '2'\nassert solution('4 5') == '-1'\nassert solution('5 5') == '0'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '3 3\\n'\n    '.o\\n'\n    '.o\\n'\n    'o.T\\n'\n) == '2'\nassert solution(\n    '4 4\\n'\n    '.o\\n'\n    '.o.S\\n'\n    '.o.o\\n'\n    'S.o\\n'\n) == '-1'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\nS.o\\no.S\") == \"2\"\nassert solution(\"3 3\\no.T\\n.o.\\no.T\") == \"2\"\nassert solution(\"5 3\\n.o\\no\\no.S\\n.T\\no\\no.S\\n.o\\n.T\\no\\no.S\\n.T\\n.o\\n.o\") == \"-1\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"0\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '2'\nassert solution('5 5') == '-1'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"3 4\") == \"2\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n\n\n\n\"\"\"\n\nn1, n2 = list(map(int, input().split()))\n\nn = n1 / n2\n\nprint(n)\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\nassert solution('3 2') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\""
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"1 1\"\n) == \"1\"\nassert solution(\n    \"3 2\"\n) == \"3\"\nassert solution(\n    \"199 200\"\n) == \"200\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n5 2\\n3 3\") == \"Aoki\"\nassert solution(\"4\\n5 1\\n1 1\") == \"Aoki\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n5 2\\n3 3\\n') == 'Aoki'\nassert solution('4\\n3 2\\n5 2\\n') == 'Aoki'\n\"\"\""
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n5 2\\n3 3\") == \"Aoki\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n5 2\\n3 3') == 'Aoki'\nassert solution('1\\n10 5') == 'Aoki'\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5 2\") == \"Aoki\"\nassert solution(\"1\\n3 3\") == \"Aoki\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"Aoki\"\nassert solution(\"5\") == \"Takahashi\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(TEST_INPUT_1) == \"Takahashi\"\nassert solution(TEST_INPUT_2) == \"Aoki\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n5 2\\n2 1\\n5 2\") == \"Aoki\"\nassert solution(\"2 2\\n1 1\\n2 2\") == \"Aoki\"\nassert solution(\"2 3\\n2 2\\n1 1\\n2 1\") == \"Aoki\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5 2\\n3 3\") == \"Aoki\"\nassert solution(\"2\\n10 2\\n1 3\") == \"Takahashi\"\nassert solution(\"2\\n5 2\\n4 5\") == \"Takahashi\"\nassert solution(\"2\\n5 2\\n10 1\") == \"Aoki\"\nassert solution(\"2\\n4 4\") == \"Takahashi\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n5 2\\n3 3\\n') == 'Aoki'\nassert solution('1\\n3 5\\n2 3') == 'Takahashi'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '8'\nassert solution('4 4') == '1'\nassert solution('5 5') == '10'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2\n''') == '0'\nassert solution('''\n3 3\n''') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '8'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('1') == '1'\n\n\n\"\"\"\nimport math\n\nn, m = map(int, input().split())\n\nprint(math.factorial(n * m) // math.factorial(n) // math.factorial(m))"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 2') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n\") == \"0\"\nassert solution(\"3 3\\n\") == \"8\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2\n''') == '0'\nassert solution('''3 3\n''') == '8'\nassert solution('''3\n3\n3\n''') == '6'\n\n'''"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\n1 1\n1 2\n2 3''') == \"8\"\nassert solution('''3 3\n1 1\n2 3\n2 2''') == \"4\"\nassert solution('''3 3\n1 1\n2 2\n2 2''') == \"3\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0'\nassert solution('''\n3 3\n\n''') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '8'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"2 3\") == \"-1\"\nprint(solution(input()))\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 2') == '0'\nassert solution('2 2') == '-1'\nassert solution('2 2') == '0'\nassert solution('2 2') == '-1'"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2\n1 2 3 4\n1 5 3 4\n''') == \"1\"\nassert solution('''2 2\n1 2 3 4\n1 5 6 4\n''') == \"0\"\nassert solution('''2 3\n1 2 4 5\n1 2 1 3 2 3\n''') == \"-1\""
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2\\n1 2 3 4\\n1 5 3 4\\n') == '1'\nassert solution('2 2\\n1 2 4 5\\n1 2 1 3 2 3\\n') == '0'\nassert solution('2 3\\n1 2 4 5\\n1 2 1 3 2 3\\n') == '-1'"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == '1'\nassert solution(input_) == '0'\nassert solution(input_) == '-1'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_1) == \"1\"\nassert solution(input_2) == \"0\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 3') == '-1'\nassert solution('2 4') == '0'\nprint(solution(input()))"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"3 2\") == \"-1\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2\n1 2 3 4\n1 5 3 4\n''') == '1'\n\nassert solution('''2 2\n1 2 3 4\n1 5 6 4\n''') == '0'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 2') == '0'\nassert solution('2 3') == '-1'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"24\") == \"09:09\"\nassert solution(\"12\") == \"07:09\"\nassert solution(\"24\") == \"09:09\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('12') == '00:00'\nassert solution('24') == '00:00'\nassert solution('99') == '12:00'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"24\") == \"17:00\"\nassert solution(\"12\") == \"17:00\"\nassert solution(\"24\") == \"17:00\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(str(24)) == '07:00'\nassert solution(str(12)) == '17:30'\nassert solution(str(24)) == '09:09'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(24, \"99:99\") == \"09:09\"\nassert solution(12, \"17:30\") == \"17:30\"\nassert solution(24, \"17:30\") == \"07:30\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"24\") == \"09:09\"\nassert solution(\"12\") == \"17:30\"\nassert solution(\"24\") == \"17:30\""
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('24') == '09:09'\nassert solution('12') == '07:09'\nassert solution('24') == '09:09'"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"09:09\""
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"17:30\"\nassert solution(input()) == \"07:30\""
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"24\") == \"07:59\"\nassert solution(\"12\") == \"00:00\"\nassert solution(\"24\") == \"09:00\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '6'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2\n1 2 1\n2 3 1\n3 1 1\n''') == '6'\nassert solution('''1 2\n1 2 2\n2 3 1\n''') == '5'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n2\n1 2 1\n2 3 1\n3 1 1\n''') == '6'\nassert solution('''\n3 3\n1 2 3\n2 3 3\n3 2 3\n''') == '3'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '6'\nassert solution('5 4') == '10'\nassert solution('6 5') == '12'\nassert solution('10 5') == '5'\nassert solution('10 6') == '5'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '7'\nassert solution('2') == '6'\nassert solution('3') == '8'\nassert solution('4') == '8'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '4'\nassert solution('2 3 4') == '6'\nassert solution('4 5 1') == '5'"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 2 1\n2 3 1\n3 1 1\n''') == '6'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"2 2\\n1 2 1\\n2 3 1\\n3 1 1\") == \"6\"\nassert solution(\n    \"3 3\\n1 2 1\\n2 3 1\\n3 1 1\") == \"5\"\nassert solution(\n    \"3 3\\n1 2 1\\n2 3 1\\n3 1 1\") == \"4\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '6'\nassert solution('8 4') == '11'\nassert solution('10 10') == '30'\nassert solution('10 1000') == '2'\nassert solution('10 10000') == '30'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"6\") == \"2\"\nassert solution(\"3 2\") == \"5\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '-1'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n0 0 0 1 1\n\n2\n0 0 0 1 1\n\n''') == '-1'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n3 2 2 2 1 1''') == '5 2 1'\nassert solution('''1\n0''') == '0'"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n2 3 2 1 1') == '-1'\n\nassert solution('6\\n3 2 2 2 1 1') == '5'\n\nassert solution('1\\n0') == '0'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"5\"\nassert solution(\"1\") == \"0\"\nassert solution(\"6\") == \"-1\"\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n2 0 3 0 1 1\n''') == '5\n\nassert solution('''\n1\n0\n''') == '0\n'''"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == '-1'\n\nInput\n3\n0 0 3\n\nOutput\n0\n\nInput\n3\n0 1 0\n\nOutput\n0\n\nInput\n3\n1 1 1\n\nOutput\n-1\n'''"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n0 0 1 1\n''') == '-1'\n\nassert solution('''\n6\n2 0 3 0 1 1\n''') == '5'\n\nassert solution('''\n1\n0\n''') == '0'"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''6\n2 0 3 0 1 1\n''') == '5 2 1'\n\nassert solution('''1\n0\n''') == '0'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '-1'\nassert solution('3 2 2 2 1 1') == '5 6'\nassert solution('6') == '5 6'\n\nprint(solution(input()))"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 8\n12 20''') == \"2\"\nassert solution('''3 10\n10 20 30''') == \"1\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"2 8\\n\"\n    \"12 20\\n\"\n) == \"2\"\nassert solution(\n    \"3 10\\n\"\n    \"10 20 30\\n\"\n) == \"1\""
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 8\") == \"2\"\nassert solution(\"3 10\") == \"1\""
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 8\") == \"2\"\nassert solution(\"3 10\") == \"1\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 10\n10 20 30''') == \"2\"\nassert solution('''3 10\n10 20 30''') == \"1\"\nassert solution('''4 10\n10 20 30''') == \"0\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 10\n10 20 30 40\n''') == '2'\nassert solution('''\n3 10\n10 20 30\n''') == '1'\nassert solution('''\n4 10\n10 20 30 40\n''') == '0'\nassert solution('''\n1 10\n10 20 30\n''') == '0'\nassert solution('''\n2 10\n10 20 30 40\n''') == '0'\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '2 8\\n'\n    '12 20\\n'\n    ) == '2\\n'\n\n    assert solution(\n    '3 10\\n'\n    '10 20 30\\n'\n    ) == '1\\n'\n\n---"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 8\n12 20''') == '2'\nassert solution('''3 10\n10 20 30''') == '1'\nassert solution('''8 10\n5 5 10''') == '5'\nassert solution('''20 20\n20 20 20 20''') == '0'\nassert solution('''8 10\n5 5 5 5''') == '5'\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([2, 8]) == \"2\"\nassert solution([3, 10]) == \"1\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 8') == '2'\nassert solution('3 10') == '1'\nassert solution('4 10') == '0'\nassert solution('5 10') == '0'\nassert solution('6 10') == '0'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '11.547005383792516398'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0 0 5 5\\n3 2\\n-1 -1\\n-1 0\\n') == '3.729935587093555327'\nassert solution('0 0 0 1000\\n100 1000\\n-50 0\\n50 0\\n') == '11.547005383792516398'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('100 1000') == '11.547005383792516398'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('3 2') == '1.4142135623730951'\nassert solution('-1 -1') == '1.4142135623730951'\nassert solution('-1 0') == '0.4142135623730951'\nassert solution('0 0 0 1000') == '11.547005383792516398'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n0 0 5 5\n3 2\n-1 -1\n-1 0\n''') == '3.729935587093555327'\nassert solution('''\n0 0 0 1000\n100 1000\n-50 0\n50 0\n''') == '11.547005383792516398'\nassert solution('''\n0 0 0 1000\n100 100\n-50 0\n50 0\n''') == '4.88981307799642393'\nassert solution('''\n0 0 5 5\n3 2\n-1 -1\n-1 0\n''') == '3.729935587093555327'\nassert solution('''\n0 0 0 1000\n100 1000\n-50 0\n50 0\n''') == '11.547005383792516398'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n0 0 5 5\n3 2\n-1 -1\n-1 0\n''') == '3.729935587093555327'\nassert solution('''\n0 0 0 1000\n100 1000\n-50 0\n50 0\n''') == '11.547005383792516398'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '3.729935587093555327'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('3 2') == '1.4142135623730951'\nassert solution('-1 -1') == '1.4142135623730951'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('1000 1000 -50 0') == '11.547005383792516398'\nassert solution('100 1000 -50 0') == '11.547005383792516398'\nassert solution('5 5 5 5') == '6.0'\nassert solution('0 0 0 0') == '0.0'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n0 0 5 5\n3 2\n-1 -1\n-1 0\n\"\"\") == \"3.729935587093555327\"\nassert solution(\"\"\"\n0 0 5 5\n3 2\n0 0\n0 0\n\"\"\") == \"3.729935587093555327\"\nassert solution(\"\"\"\n0 0 0 1000\n100 1000\n-50 0\n50 0\n\"\"\") == \"11.547005383792516398\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n''') == 'Second'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n10\n1 2''') == 'Second'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'Second'\nassert solution('2') == 'First'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'First'\nassert solution('2') == 'Second'\nassert solution('3') == 'Second'\nassert solution('4') == 'Second'\nassert solution('5') == 'Second'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == 'Second'\nassert solution('4') == 'Second'\nassert solution('5') == 'First'"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'Second\\nFirst\\nSecond'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n''') == 'Second\\nFirst\\nSecond'\nassert solution('''\n2\n1\n1\n''') == 'Second\\nSecond'\nassert solution('''\n2\n1\n11\n''') == 'First\\nSecond'\n'''\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n10\\n2\\n1 2') == 'Second\\nFirst'\nassert solution('3\\n1\\n10\\n2\\n1 2') == 'Second\\nFirst\\nSecond'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n10\n2\n1 2''') == 'Second'\nassert solution('''3\n1\n10\n2\n1 2''') == 'First'\nassert solution('''3\n3\n3\n4\n5''') == 'Second'\nassert solution('''6\n3\n8\n3\n3\n5\n2\n1''') == 'Second'\nassert solution('''6\n2\n8\n2\n3\n5\n1''') == 'Second'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'First'\nassert solution('2') == 'Second'\nassert solution('3') == 'First'\nassert solution('4') == 'Second'\nassert solution('5') == 'Second'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3 2\n4 3 1 5 2''') == '1'\n\nprint(solution('''5 3 2\n4 3 1 5 2'''))\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\nassert solution('3 3 2') == '1'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5 6') == '3'\nassert solution('1 2 3 4 5 6 7') == '1'"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 2') == '1'\nassert solution('10 10 3 2') == '8'"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"3 3 3 3\") == \"3\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2\") == \"1\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 2\") == \"1\"\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3 2') == '1'\nassert solution('10 1 5 10 2 1 9 8 3 2') == '1'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"24\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"24\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 1\n''') == '1'\nassert solution('''3 2\n''') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([1, 1]) == \"1\"\nassert solution([3, 2]) == \"24\""
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1\n''') == '1'\nassert solution('''3 2\n''') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"24\""
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"1 1\\n\"\n    ) == \"1\"\n\nassert solution(\n    \"3 2\\n\"\n    ) == \"24\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '1 1'\n) == '1'\nassert solution(\n    '3 2'\n) == '24'"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2\n2 4\n2 3\n''') == '3'\n\nassert solution('''7 3\n3 4\n2 3\n''') == '1196'\n\nassert solution('''31 8\n1 2\n3 4\n2 3\n''') == '64921457'\n\nassert solution('''31 8\n1 2\n3 4\n2 3\n''') == '4485496'\n\nassert solution('''31 8\n1 2\n3 4\n2 3\n''') == '14634089'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2\n\nOutput\n6\n\nOutput\n3\n\nOutput\n1196\n\nOutput\n64921457''') == '7'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"4 4\") == \"3\"\nassert solution(\"7 3\") == \"1196\"\nassert solution(\"31 8\") == \"64921457\"\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n\") == \"6\"\nassert solution(\"4 4\\n\") == \"3\"\nassert solution(\"7 3\\n\") == \"1196\"\nassert solution(\"31 8\\n\") == \"64921457\"\n\n\n'''\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 1\n2 3''') == '1'\n\nassert solution('''3 3\n2 1\n3 1''') == '3'\n\nassert solution('''3 3\n2 3\n3 2''') == '2'\n\n\n\n\"\"\"\n\n\nfrom itertools import product"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([3, 4]) == \"3\"\nassert solution([4, 4]) == \"3\"\nassert solution([5, 4]) == \"3\"\nassert solution([4, 5]) == \"3\"\nassert solution([5, 5]) == \"3\"\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2\n''') == '6'\nassert solution('''\n4 4\n''') == '3'\nassert solution('''\n7 3\n''') == '1196'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '6'\nassert solution('4 4') == '3'\nassert solution('7 3') == '1196'\nassert solution('31 8') == '64921457'"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n\") == \"6\"\nassert solution(\"2 4\\n\") == \"10\"\nassert solution(\"1 1\\n\") == \"3\"\nassert solution(\"31 8\\n\") == \"64921457\"\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([3, 4]) == '6'\nassert solution([7, 3]) == '1196'\n\n\"\"\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4 2\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 4 2''') == '#.X#\\nX.#.\\n#...\\n'\nassert solution('''5 4 5''') == '#XXX\\n#X#.\\nX#..\\n...#\\n#.#.'\nassert solution('''6 6 5''') == '#XXXX\\n#X#.#\\nX...\\n...#\\n###.'\nassert solution('''5 5 5''') == '#.X..\\n#...#\\n#.#.#\\n#.....\\n.X...'\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4 2') == '#.X#'\nassert solution('5 4 5') == '#X#.X'"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4 5\") == \"#XXX\"\nassert solution(\"3 4 2\") == \"#.X#\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4 2\") == \".#.X#\"\nassert solution(\"5 4 5\") == \"#X#.X\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4 2') == '#.X#\\nX.#.\\n#...\\n'\nassert solution('5 4 5') == '#.X#\\n#X.#\\nX..#\\n...#\\n#.#X'\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4 2\") == \"#.X#\"\nassert solution(\"5 4 5\") == \"#X#.X#\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4 2\") == \"X#.\\nX.#.\\n#...\\n\"\nassert solution(\"5 4 5\") == \"X#X\\n#X#.\\n#X#..\\n...#\\n#.#.#\\n\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 4 2\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 4 5\") == \"#X#.\\nX#..\\nX#..\\n...#\\n.#.#\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n1 2 2 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n18\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"3\""
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 1\n''') == '1'\nassert solution('''\n5\n1 2 2 2\n''') == '3'\nassert solution('''\n18\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n''') == '4'"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([4]) == '3'\nassert solution([5]) == '4'\nassert solution([6]) == '5'\nassert solution([5, 1, 1, 1, 1]) == '2'\nassert solution([2, 1, 1, 1]) == '1'\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '3'\nassert solution('18') == '4'\nassert solution('123456') == '5'"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 1\n''') == '1'\nassert solution('''\n5\n1 2 2 2\n''') == '3'\n\nassert solution('''\n18\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n''') == '4'"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 1\") == \"1\"\nassert solution(\"5\\n1 2 2 2 2\") == \"3\""
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_data) == \"3\"\n\n'''\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '-1'\nassert solution('5 3 2') == '4 2 1 5 3'"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 2') == '4 5 2 3'\nassert solution('12 4 2') == '12 5 2 4'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"5 3 2\") == \"2 4 1 5 3\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 2') == '2 4 1 3 5'\nassert solution('3 5 2') == '1 2 5 3 4'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3', \"Wrong Answer\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3 2\n''') == '2 4 1 5 3'\nassert solution('''5 3 2\n''') == '-1'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(1) == '-1'\nassert solution(2) == '2 4 1 5 3'\nassert solution(3) == '3 2 1 4'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n4 3 2\n\"\"\") == \"2 4 1 5 3\"\nassert solution(\n\"\"\"\n3 3 2\n\"\"\") == \"3 3 1\"\nassert solution(\n\"\"\"\n1 1 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 3 2''') == '2 4 1 5 3'\nassert solution('''5 5 1''') == '1 5 2 3 4'\nassert solution('''1''') == '-1'\nassert solution('''1 1''') == '1'\nassert solution('''3 5 2''') == '-1'\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 6 9 18 36 108') == 'Yes'\nassert solution('2') == 'No'\nassert solution('9') == 'Yes'"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n3 6 9 18 36 108\n''') == 'Yes'\nassert solution('''\n2\n7 17\n''') == 'No'\nassert solution('''\n9\n4 8 10 12 15 18 33 44 81\n''') == 'Yes'\nassert solution('''\n5\n2 3 1 4 5\n''') == 'No'"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3\\n\"\n    \"6 9 18 36 108\"\n) == \"Yes\"\n\nassert solution(\n    \"2\\n\"\n    \"7 17\"\n) == \"No\"\n\nassert solution(\n    \"9\\n\"\n    \"4 8 10 12 15 18 33 44 81\"\n) == \"Yes\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"Yes\"\nassert solution() == \"No\"\n\n\n'''"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n8 9 10 12 15 18 33 44 81\n''') == 'No'\nassert solution('''\n6\n3 6 9 18 36 108\n''') == 'Yes'\nassert solution('''\n9\n4 8 10 12 15 18 33 44 81\n''') == 'Yes'\n\n'''\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"6\\n3 6 9 18 36 108\\n\") == \"Yes\"\nassert solution(\n    \"2\\n7 17\\n\") == \"No\"\nassert solution(\n    \"9\\n4 8 10 12 15 18 33 44 81\\n\") == \"Yes\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n6 9 18 36 108\n3 6 9 18 36 108\n3 6 9 18 36 108\n3 6 9 18 36 108\n3 6 9 18 36 108\n3 6 9 18 36 108''') == 'Yes'\nassert solution('''2\n7 17\n7 17''') == 'No'\nassert solution('''9\n4 8 10 12 15 18 33 44 81\n4 8 10 12 15 18 33 44 81\n4 8 10 12 15 18 33 44 81\n4 8 10 12 15 18 33 44 81\n4 8 10 12 15 18 33 44 81\n4 8 10 12 15 18 33 44 81\n4 8 10 12 15 18 33 44 81\n4 8 10 12 15 18 33 44 81\n4 8 10 12 15 18 33 44 81''') == 'Yes'\nassert solution('''7\n6 9 18 36 108\n3 6 9 18 36 108\n3 6 9 18 36 108\n3 6 9 18 36 108\n3 6 9 18 36 108\n3 6 9 18 36 108\n3 6 9 18 36 108''') == 'No'\nassert solution('''6\n3 6 9 18 36 108\n3 6 9 18 36 108\n3 6 9 18 36 108\n3 6 9 18 36 108\n3 6 9 18 36 108\n3 6 9 18 36 108''') == 'No'\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(example_input_0) == example_output_0\nassert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2\nassert solution(example_input_3) == example_output_3\nassert solution(example_input_4) == example_output_4\n\n\n'''\n\nfrom math import gcd"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n8\n3 6 9 18 36 108\n''') == \"Yes\"\nassert solution('''\n2\n7 17\n''') == \"No\"\nassert solution('''\n9\n4 8 10 12 15 18 33 44 81\n''') == \"Yes\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n    3\n    6\n    9''') == 'Yes'\n\nassert solution('''9\n    4\n    8\n    10\n    12''') == 'No'\n\nassert solution('''7\n    7\n    17\n    18''') == 'Yes'\n\n\n\n\n\n\"\"\"\n\nn = int(input())\nv = list(map(int, input().split()))"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '5'\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\n1 2 -6 4 5 3') == '12'\nassert solution('1') == '1'\nassert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('10') == '3'\n\n'''"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(['1','2','-6','4','5','3']) == '12'\nassert solution(['3','5','2']) == '6'\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 -6 4 5 3\") == \"12\"\nassert solution(\"4\\n1 2 3 4\") == \"4\"\nassert solution(\"100\\n-1 -2 -3 -4 -5\") == \"99\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '0'\nassert solution('1') == '1'\nassert solution('12') == '12'\nassert solution('11') == '11'\n\n---------------------------------------\n\n\u6700\u5927\u516c\u7ea6\u6570\n\n\u6700\u5c0f\u516c\u500d\u6570\n\n\u516c\u56e0\u6570\n\nLeetcode 39\n\n\u8ba1\u7b97\u673a\u505a\u5b8c\u8fd9\u9053\u9898\uff0c\u9762\u8bd5\u5b98\u5e94\u8be5\u600e\u4e48\u505a\uff0c\u4ed6\u4eec\u5c31\u7b97\u601d\u8003\u4e86\u8fd9\u9053\u9898\uff0c\u4e86\u89e3\u7684\u975e\u5e38\u597d\u3002\n\n\u89e3\u9898\u601d\u8def\uff1a\n1. \u5148\u5199\u4e00\u9053\u4e00\u9053\u7684\u4e8c\u5206\u67e5\u627e\n2. \u4e8c\u5206\u67e5\u627e\u7684\u601d\u8def\uff1a\n    \u627e\u5230\u4e00\u4e2a\u5947\u6570\u7684\u503c\uff0c\u7136\u540e\u5206\u522b\u5bf9\u5176\u4e24\u4fa7\u6570\u636e\u5206\u522b\u8fdb\u884c\u4e8c\u5206\u67e5\u627e\u3002\n3. \u5c06\u8fd9\u4e2a\u7b97\u6cd5\u5199\u6210\u4e00\u4e2a\u51fd\u6570\n4. \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u6700\u7ec8\u4f1a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u6765\u5b9e\u73b0\u903b\u8f91\n\n\u7b2c\u4e00\u6b65\uff1a\u628a\u6570\u636e\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u518d\u627e\u5230\u4e00\u4e2a\u5947\u6570\n\u7b2c\u4e8c\u6b65\uff1a\u4e8c\u5206\u67e5\u627e"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n5 4 -2 -1 -4') == '12'\nprint(solution(input()))\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split()))\nans = 0\nfor i in A:\n    if i % 2 == 0:\n        ans += i\n        continue\n    if i > 0:\n        ans += i * -1\nprint(ans)\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 2 -6 4 5 3\\n\") == \"12\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '6'\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n-5\n10''') == '10'\n\nassert solution('''20\n-2\n10''') == '20'\n\nassert solution('''40\n-4\n10''') == '40'\n\nassert solution('''80\n-8\n10''') == '20'\n\nassert solution('''96\n-12\n10''') == '20'"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([3, 1, 4, 2]) == 5\nassert solution([3, 1, 4, 2, 2]) == 4\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n3 1 4 2\") == \"5\"\nassert solution(\"4 3\\n3 1 4 2\") == \"5\"\nassert solution(\"4 1\\n3 1 4 2\") == \"4\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n3 1 4 2\n''') == '5'\nassert solution('''\n6 4\n1 1 3 5 2 1\n''') == '5'\nassert solution('''\n2 3\n4 2 1\n''') == '4'\nassert solution('''\n6 4\n3 1 4 2 5 1\n''') == '5'\nassert solution('''\n6 4\n4 5 3 1 2 1\n''') == '4'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"5\"\nassert solution(\"4 3\") == \"5\"\nassert solution(\"5 2\") == \"4\"\nassert solution(\"6 3\") == \"5\"\nassert solution(\"100 2\") == \"98\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 3\n3 1 4 2\n''') == '5'\n\nassert solution('''\n4 3\n3 1 4 2\n''') == '5'\n\nassert solution('''\n5 2\n3 2 1 5 4\n''') == '5'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3') == '5'\nassert solution('4 2') == '3'\nassert solution('1') == '1'\nassert solution('5 1') == '4'\nassert solution('5 1') == '4'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([3, 1, 4, 2]) == 5\nassert solution([3, 1, 4, 2]) == 5\nassert solution([3, 1, 4, 2, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '5'\nassert solution('4 3') == '5'\nassert solution('3 1 4 2') == '5'\nassert solution('3 5 1 4 2') == '4'\nassert solution('4 2 5 1 3') == '4'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '5'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([3, 1, 4, 2]) == 5\nassert solution([3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2]) == 7\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '0 0'\nassert solution('3') == '0 1'\nassert solution('3') == '0 2'\n\nassert solution('5') == '1 2 3 4 5'\nassert solution('4') == '2 3 1 0'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '0 0'\nassert solution('3\\n3 2 1') == '0 1'\nassert solution('3\\n3 1 2') == '2 1'\n\n\"\"\""
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string) == \"0 0\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([\"1 2 3\", \"2 3 1\"]) == \"0 0\"\nassert solution([\"3 2 1\", \"1 2 3\"]) == \"0 1\"\nassert solution([\"3 2 1\", \"1 3 2\"]) == \"2 1\""
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\\n\") == \"0 0\"\nassert solution(\"3 2 1\\n\") == \"0 1\"\nassert solution(\"3\\n2 3 1\") == \"2 1\"\n\n'''\n\n\n'''\n\nd= {}\nfor i in range(len(a)):\n    d[a[i]] = i\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0 0'\nassert solution('3') == '0 1'\nassert solution('3') == '2 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"0 0\"\nassert solution(\"3\") == \"0 1\"\nassert solution(\"3\") == \"2 1\"\n\n\"\"\"\n\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndev = 0\nmax = 0\nfor i in range(1,n):\n    dev += abs(arr[i]-arr[i-1])\n    max = max if dev<max else dev\n    if i%2==0:\n        arr[i] = arr[i] - max\n    else:\n        arr[i] = arr[i] - max + 1\n\nprint(max,arr.index(max))"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 2 3\n''') == '0 0'\nassert solution('''\n3\n2 3 1\n''') == '0 1'\nassert solution('''\n3\n3 2 1\n''') == '2 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"0 0\"\nassert solution(\"3\") == \"0 1\"\nassert solution(\"3\") == \"0 1\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '0 0'\nassert solution('3 2 1') == '0 1'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '6'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 4\\n\") == \"6\"\nassert solution(\"3 3\\n\") == \"8\"\nassert solution(\"4 5\\n\") == \"8\"\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 4\naa\nbb\n''') == '6'\nassert solution('''\n3 3\naba\nbba\n''') == '8'\nassert solution('''\n4 5\nabbb\nbaaa\n''') == '8'\n\nassert solution('''\n6 5\naaba\nbaba\naba\nbba\nbba\nbba\n''') == '8'\n\nprint(solution('''\n10 10\nabbbaa\nbaabaa\nbaabaa\nababbb\nabaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(t) == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4\\naba\\nbaaa') == '6'\nassert solution('3 3\\naba\\nbaaa') == '8'\nassert solution('4 5\\naba\\nbaaa') == '8'"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 4\naa\nbb''') == '6'\nassert solution('''3 3\naba\nbba''') == '8'\nassert solution('''4 5\nabbb\nbaaa''') == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\naa\\nbb\\n\") == 6\nassert solution(\"3 3\\naba\\nbba\\n\") == 8\nassert solution(\"4 5\\nabbb\\nbaaa\\n\") == 8\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == \"6\""
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '6'"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == '6'\nassert solution(\"3 3\") == '8'\nassert solution(\"4 5\") == '8'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n') == 'YES', \"test 1 failed\"\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 1 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n') == 'NO', \"test 2 failed\"\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'YES', \"test 3 failed\"\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 1 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n') == 'NO', \"test 4 failed\"\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'NO', \"test 5 failed\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0\") == \"YES\", \"YES\"\nassert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\") == \"YES\", \"YES\"\nassert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\") == \"NO\", \"NO\"\nassert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\") == \"NO\", \"NO\"\nassert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"YES\", \"YES\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == 'YES'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'NO'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"YES\\n0 0 0\\n0 0 1\\n0 1 0\\n1 0 0\\n0 1 1\\n1 0 1\\n1 1 0\\n1 1 1\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n\") == \"YES\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 0 0') == 'YES'\nassert solution('0 0 1') == 'YES'\nassert solution('0 0 1') == 'NO'\nassert solution('0 0 1') == 'YES'\nassert solution('0 0 1') == 'YES'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"NO\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"10\") == \"NO\"\nassert solution(\"100\") == \"NO\"\nassert solution(\"10000\") == \"NO\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n2 3 6 7\n''') == 'YES'\nassert solution('''5\n6 15 35 77 22\n''') == 'YES'\nassert solution('''5\n6 10 15 1000 75\n''') == 'NO'"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n6 15 35 77 22\n''') == \"YES\"\nassert solution('''\n5\n6 10 15 1000 75\n''') == \"NO\"\nassert solution('''\n5\n7 6 5 2 5\n''') == \"NO\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == 'YES'\nassert solution('5') == 'NO'"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n2 3 6 7\n''') == 'YES'\nassert solution('''\n5\n6 15 35 77 22\n''') == 'NO'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(t) == 'YES'\nassert solution(t2) == 'NO'"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n2 3 6 7\n''') == 'YES'\nassert solution('''\n5\n6 15 35 77 22\n''') == 'NO'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"2 2 1 1 1\""
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(open(\"input.txt\", \"r\").read()) == \"YES\\n2 2 1 1 1\""
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(samples.SAMPLE_SINGLE) == \"YES\"\nassert solution(samples.SAMPLE_MULTIPLE) == \"YES\"\nassert solution(samples.SAMPLE_INCORRECT) == \"NO\"\nprint(solution(input()))\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n100\n60\n70\n''') == '40'\n\nassert solution('''\n410\n55\n70\n''') == '5'\n\nassert solution('''\n600\n60\n70\n''') == '0'\n\nassert solution('''\n7\n1\n2\n''') == '0'"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"40\""
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('100\\n60\\n70') == '40'\nassert solution('410\\n55\\n70') == '5'\nassert solution('600\\n60\\n70') == '0'"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == '40'"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''60\n60\n60\n''') == '0'\nassert solution('''40\n60\n70\n''') == '5'\nassert solution('''400\n50\n70\n''') == '10'\nassert solution('''60\n60\n60\n''') == '40'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''100\n60\n70''') == '40'\nassert solution('''410\n55\n70''') == '5'\nassert solution('''600\n60\n70''') == '0'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''100\n60\n70''') == '40'\nassert solution('''410\n55\n70''') == '5'\nassert solution('''600\n60\n70''') == '0'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n60\\n70\") == \"40\"\nassert solution(\"500\\n60\\n70\") == \"5\"\nassert solution(\"1000\\n60\\n70\") == \"0\""
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n60\\n70') == '40'\nassert solution('0\\n60\\n70') == '0'\nassert solution('600\\n60\\n70') == '5'\nassert solution('10\\n60\\n70') == '5'\nassert solution('0\\n10\\n60') == '1'"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"40\"\nassert solution() == \"5\"\nassert solution() == \"0\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"6\"\nassert solution(\"3\") == \"4\"\nassert solution(\"5\") == \"1\""
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('12') == '12'\nassert solution('5') == '5'\nprint(solution(input()))\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n12\n3 1 4 1 5 9 2 6 5 3 5 8\n''') == '12 4'\n\nassert solution('''\n5\n1 1 1 1 1\n''') == '1 1 1 1 1'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"12\\n\"\n    \"3 1 4 1 5 9 2 6 5 3 5 8\"\n) == \"12\\n\"\n\nassert solution(\n    \"5\\n\"\n    \"1 1 1 1 1\"\n) == \"1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n12\n3 1 4 1 5 9 2 6 5 3 5 8\n''') == '12 4'\nassert solution('''\n5\n1 1 1 1 1\n''') == '1 1 1 1'\n\n'''\nInput\n12\n3 1 4 1 5 9 2 6 5 3 5 8\n\nOutput\n12\n4\n1 2 3 5\n1 3 5 4\n5 6 8 9\n\nInput\n5\n1 1 1 1 1\n\nOutput\n1\n1 1\n1\n'''"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '3 3'\n\nINPUT:\n\n8\n1 1 1 1 1 1 1 1\n\nOUTPUT:\n\n8\n1 1 1 1 1 1 1 1\n\nINPUT:\n\n5\n1 2 3 5 8\n\nOUTPUT:\n\n5\n1 2 3 5 8\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n\nINPUT:\n\n4\n1 1 1 1\n\nOUTPUT:\n\n1\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n5\n1 1 1 1 1\n\nINPUT:\n\n7\n1 1 1 1 1 1 1\n\nOUTPUT:\n\n7\n1 1 1 1 1 1 1\n\nINPUT:\n\n8\n1 1 1 1 1 1 1 1\n\nOUTPUT:\n\n8\n1 1 1 1 1 1 1 1\n\nINPUT:\n\n8\n1 1 1 1 1 1 1 1\n\nOUTPUT:\n\n8\n1 1 1 1 1 1 1 1\n\nINPUT:\n\n10\n1 1 1 1 1 1 1 1 1 1\n\nOUTPUT:\n\n10\n1 1 1 1 1 1 1 1 1 1\n\nINPUT:\n\n9\n1 1 1 1 1 1 1 1 1\n\nOUTPUT:\n\n9\n1 1 1 1 1 1 1 1 1 1\n\nINPUT:\n\n2\n1 2 1 1\n\nOUTPUT:\n\n2\n1 1\n\nINPUT:\n\n3\n1 1 1\n\nOUTPUT:\n\n3\n1 1 1\n\nINPUT:\n\n4\n1 1 1 1\n\nOUTPUT:\n\n4\n1 1 1 1\n\nINPUT:\n\n5\n1 1 1 1\n\nOUTPUT:\n\n5\n1 1 1 1\n\nINPUT:\n\n6\n1 1 1 1 1 1 1 1 1\n\nOUTPUT:\n\n6\n1 1 1 1 1 1 1 1 1\n\nINPUT:\n\n4\n1 2 3 5 8\n\nOUTPUT:\n\n4\n1 2 3 5 8\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n5\n1 1 1 1 1\n\nINPUT:\n\n6\n1 1 1 1 1 1 1 1 1\n\nOUTPUT:\n\n6\n1 1 1 1 1 1 1 1 1\n\nINPUT:\n\n8\n1 1 1 1 1 1 1 1\n\nOUTPUT:\n\n8\n1 1 1 1 1 1 1 1 1\n\nINPUT:\n\n8\n1 1 1 1 1 1 1 1\n\nOUTPUT:\n\n8\n1 1 1 1 1 1 1 1\n\nINPUT:\n\n7\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1\n\nINPUT:\n\n7\n1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1 1\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1 1\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1 1\n\nINPUT:\n\n4\n1 2 3 5 8\n\nOUTPUT:\n\n4\n1 2 3 5 8\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1 1\n\nINPUT:\n\n6\n1 1 1 1 1 1 1 1 1\n\nOUTPUT:\n\n6\n1 1 1 1 1 1 1 1 1\n\nINPUT:\n\n4\n1 2 3 5 8\n\nOUTPUT:\n\n4\n1 2 3 5 8\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1 1\n\nINPUT:\n\n6\n1 1 1 1 1 1 1 1 1\n\nOUTPUT:\n\n6\n1 1 1 1 1 1 1 1 1\n\nINPUT:\n\n4\n1 2 3 5 8\n\nOUTPUT:\n\n4\n1 2 3 5 8\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1 1\n\nINPUT:\n\n6\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1 1\n\nINPUT:\n\n4\n1 2 3 5 8\n\nOUTPUT:\n\n4\n1 2 3 5 8\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1 1\n\nINPUT:\n\n6\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1 1\n\nINPUT:\n\n7\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1 1\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1 1\n\nINPUT:\n\n6\n1 1 1 1 1 1 1 1 1\n\nOUTPUT:\n\n6\n1 1 1 1 1 1 1 1 1\n\nINPUT:\n\n4\n1 2 3 5 8\n\nOUTPUT:\n\n4\n1 2 3 5 8\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1 1\n\nINPUT:\n\n6\n1 1 1 1 1 1 1 1 1\n\nOUTPUT:\n\n6\n1 1 1 1 1 1 1 1 1\n\nINPUT:\n\n4\n1 2 3 5 8\n\nOUTPUT:\n\n4\n1 2 3 5 8\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1 1\n\nINPUT:\n\n6\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1 1\n\nINPUT:\n\n7\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1 1\n\nINPUT:\n\n5\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1 1\n\nINPUT:\n\n6\n1 1 1 1 1\n\nOUTPUT:\n\n1\n1 1 1 1 1"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n3 2 1 1\\n') == '4'\nassert solution('4\\n2 3 1 1\\n') == '2'\nassert solution('4\\n1 1 1 1\\n') == '1'"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"12\") == \"12\"\nassert solution(\"3 1 4 1 5 9 2 6 5 3 5 8\") == \"3 4\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"12\\n3 1 4 1 5 9 2 6 5 3 5 8\") == \"12\\n3 4\\n1 2 3 5\\n3 1 5 4\\n5 6 8 9\\n\"\nassert solution(\"5\\n1 1 1 1 1\") == \"1\\n1 1\\n1\\n\""
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1 1 1 1\\n') == '1'\nassert solution('12\\n3 1 4 1 5 9 2 6 5 3 5 8\\n') == '4 4'\nassert solution('5\\n1 2 3 4\\n') == '4'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == '3'\nassert solution('1 5') == '6'\nassert solution('4 4') == '1'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"3 1\") == \"6\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"3 1\") == \"6\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3') == '6'\nassert solution('3 1') == '1'\nassert solution('3 4') == '4'\nassert solution('5 7') == '10'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '6'\nassert solution('3 4') == '15'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 1\n1 2 3\n''') == '6'\nassert solution('''\n3 1\n1 2 2\n''') == '2'\nassert solution('''\n3 2\n1 2 1\n''') == '4'\nassert solution('''\n4 3\n1 3 2 1\n''') == '3'\nassert solution('''\n4 4\n2 1 1 1\n''') == '1'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"3 1\") == \"6\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1\\n1 3 3\\n') == '6'\nassert solution('3 1\\n2 2 3\\n') == '5'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"4 1\") == \"7\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"3 1\") == \"6\"\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.count = 0\n    def solve(self, N: int, M: int, *args) -> str:\n        def is_valid(n, color_type, index):\n            # print(n, color_type, index)\n            if color_type == \"R\":\n                return n[index] == 0\n            if color_type == \"G\":\n                return n[index] == 2\n            if color_type == \"B\":\n                return n[index] == 1\n            return False\n\n        def dfs(index: int, color_type: str, color: int) -> None:\n            if index == N:\n                self.count += 1\n                return\n            color_count = count_color(index, color_type)\n            for i in range(N):\n                if color_count[i] == 1:\n                    # color = i\n                    if is_valid(n, color_type, i):\n                        dfs(index + 1, color_type, color)\n\n        def count_color(index: int, color_type: str) -> list:\n            count = [0 for i in range(N)]\n            if index > 0:\n                for i in range(1, N):\n                    if is_valid(n, color_type, i):\n                        count[i] = count[i - 1]\n                    else:\n                        count[i] = count[i - 1] + 1\n            return count\n\n        if N == 0:\n            return \"\"\n        if M == 0:\n            return str(self.count)\n\n        n = [0 for i in range(N)]\n        for i in range(M):\n            if is_valid(n, *args[i]):\n                n = args[i]\n        n = n[::-1]\n        dfs(0, *args[0])\n        return str(self.count)"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n1 3 3\") == \"6\"\nassert solution(\"5 1\\n1 3 2 5\\n2 1 1 2 1\") == \"12\"\nassert solution(\"5 2\\n3 1 3 1\\n2 2 1 2\\n1 1 1 1\\n2 1 1 1\\n2 2 1 2\") == \"18\"\n\"\"\"\nfrom itertools import combinations\nfrom functools import reduce"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"10\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"3\") == \"5\"\nassert solution(\"10\") == \"10\"\nassert solution(\"20\") == \"-1\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == \"10\"\n\"\"\"\n\nn, s = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"100\") == \"2\"\nassert solution(\"1000000000000000\") == \"3\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('87654') == '10'\nassert solution('30') == '-1'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '10'\nassert solution('87654') == '10'\nassert solution('5') == '-1'\nassert solution('20') == '20'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"1\n-1\"\"\") == \"10\"\nassert solution(\"\"\"1\n8\"\"\") == \"\"\nassert solution(\"\"\"1\n1\"\"\") == \"1\"\nassert solution(\"\"\"1\n99\"\"\") == \"1\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '10'\nassert solution('3') == '-1'\nassert solution('4') == '10'\nassert solution('5') == '-1'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"10\"\nassert solution(\"9\") == \"10\"\nassert solution(\"10\") == \"10\"\nassert solution(\"20\") == \"10\"\nassert solution(\"-10\") == \"10\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10\\n30\") == \"10\"\nassert solution(\"10\\n87654\") == \"10\"\nassert solution(\"5\\n20\") == \"5\"\nassert solution(\"10\\n18\") == \"-1\""
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '-1'\nassert solution('10') == '10'\nassert solution('87654') == '-1'\nassert solution('30') == '10'"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aba') == 'Second'\nassert solution('a') == 'First'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('aba') == 'Second'\nassert solution('aab') == 'First'\n\n\"\"\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"Second\"\nassert solution(\"aaa\") == \"First\"\nassert solution(\"aaab\") == \"First\"\nassert solution(\"baab\") == \"Second\""
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"Second\"\nassert solution(\"cba\") == \"First\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"Second\"\nassert solution(\"baa\") == \"First\"\nassert solution(\"aabb\") == \"First\"\nassert solution(\"aaaba\") == \"Second\"\nassert solution(\"aabaa\") == \"Second\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == 'First'\nassert solution('a') == 'Second'\nassert solution('aa') == 'Second'\nassert solution('aaa') == 'First'\nassert solution('aaaa') == 'First'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('aba') == 'Second'\nassert solution('baa') == 'First'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == 'Second'\nassert solution('aba') == 'First'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''aba''') == 'Second'\nassert solution('''aab''') == 'First'\nassert solution('''aab''') == 'Second'\nassert solution('''abb''') == 'Second'\nassert solution('''bba''') == 'First'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('aba') == 'Second'\nassert solution('ab') == 'First'\nassert solution('aba') == 'Second'\nassert solution('ab') == 'First'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"6\"\nassert solution(input()) == \"40\"\nassert solution(input()) == \"40\"\nassert solution(input()) == \"40\"\nassert solution(input()) == \"40\"\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '6'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('16') == '40'"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10') == '6'\nassert solution('16') == '40'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n5 6 7 8\n1 2 3 4 5 6 7 8 9 10''') == '40'\nassert solution('''2\n5 6 7 8\n4 5 6 7 8''') == '20'\nassert solution('''1\n2\n2 3\n2 4\n3 5\n6''') == '10'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1234') == '1'\nassert solution('12345') == '1'\nassert solution('1234567890123456789012345678901234567890') == '42'\nassert solution('12345678') == '0'\nassert solution('1234567890') == '1'"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"6\"\nassert solution(\"16\") == \"40\"\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '40'\nassert solution(input()) == '6'\nassert solution(input()) == '40'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n12345') == '6'\nassert solution('2\\n12345') == '0'\nassert solution('3\\n12345') == '0'\nassert solution('4\\n12345') == '1'\nassert solution('5\\n12345') == '0'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1'\nassert solution('1') == '5'\nassert solution('2') == '2'\nassert solution('5') == '2'\nassert solution('6') == '2'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '332748119'\nassert solution('1 2') == '165145863'\nassert solution('3 3') == '160955686'"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n''') == \"332748119\"\n\nassert solution('''\n1 2\n1\n1\n''') == \"3\"\n\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == \"160955686\"\n\nassert solution('''\n2 1\n1\n1\n''') == \"1.3333333333\""
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '332748119'\nassert solution('1 2') == '3'\nassert solution('3 3') == '160955686'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n''') == \"332748119\"\nassert solution('''\n1 2\n1\n1\n''') == \"3\"\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == \"160955686\""
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''1 2\n1\n1\n''') == '3'\nassert solution('''3 3\n0 1 1\n4 3 5\n''') == '160955686'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 1\n0 1\n2 1''') == '332748119'\nassert solution('''1 2\n1\n1\n\n3\n1 2\n2\n\n3\n1 1\n1\n\n4\n3 4\n3 5\n\n5\n0 0\n1\n\n6\n0 1 1\n4 3 5\n5 6 6\n7\n\n7\n0 1 1\n4 3 5\n5 6 6\n7\n\n8\n0 1 1\n4 3 5\n5 6 6\n7\n\n9\n0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n10\n0 1 1 1\n4 3 5\n5 6 6\n7\n\n11\n0 1 1 1 1\n4 3 5\n5 6 6\n7\n\n12\n0 0 0 0 1 1\n4 3 5\n5 6 6\n7\n\n13\n0 1 1 1 1 1\n4 3 5\n5 6 6\n7\n\n14\n0 1 1 1 1 1 1\n4 3 5\n5 6 6\n7\n\n15\n0 1 1 1 1 1 1 1\n4 3 5\n5 6 6\n7\n\n16\n0 0 0 0 0 1 1 1\n4 3 5\n5 6 6\n7\n\n17\n0 1 1 1 1 1 1 1 1\n4 3 5\n5 6 6\n7\n\n18\n0 0 0 0 0 1 1 1 1\n4 3 5\n5 6 6\n7\n\n19\n0 0 0 0 0 1 1 1 1 1\n4 3 5\n5 6 6\n7\n\n20\n0 0 0 0 0 1 1 1 1 1 1\n4 3 5\n5 6 6\n7\n\n21\n0 0 0 0 0 0 0 1 1 1 1 1\n4 3 5\n5 6 6\n7\n\n22\n0 0 0 0 0 0 0 0 0 1 1 1\n4 3 5\n5 6 6\n7\n\n23\n0 0 0 0 0 0 0 0 0 1 1 1\n4 3 5\n5 6 6\n7\n\n24\n0 0 0 0 0 0 0 0 0 1 1 1\n4 3 5\n5 6 6\n7\n\n25\n0 0 0 0 0 0 0 0 0 0 1 1\n4 3 5\n5 6 6\n7\n\n26\n0 0 0 0 0 0 0 0 0 0 1 1\n4 3 5\n5 6 6\n7\n\n27\n0 0 0 0 0 0 0 0 0 0 0 1 1\n4 3 5\n5 6 6\n7\n\n28\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n29\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n30\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n31\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n32\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n33\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n34\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n35\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n36\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n37\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n38\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n39\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n40\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n41\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n42\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n43\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n44\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n45\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n46\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n47\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n7\n\n48\n0 0 0 0 0 0 0 0 0 0 0 0 1\n4 3 5\n5 6 6\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 1\n0 1\n2 1\n\"\"\") == \"332748119\"\nassert solution(\"\"\"\n1 2\n1\n1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3 3\n0 1 1\n4 3 5\n\"\"\") == \"160955686\"\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1\\n0 1\\n2 1') == '332748119'\nassert solution('1 2\\n1\\n1') == '3'\nassert solution('3 3\\n0 1 1\\n4 3 5') == '160955686'"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 1\\n0 1\\n2 1\\n\") == \"332748119\"\nassert solution(\n    \"1 2\\n1\\n1\\n\") == \"3\"\nassert solution(\n    \"3 3\\n0 1 1\\n4 3 5\\n\") == \"160955686\"\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2\n0 1\n2 1\n''') == '332748119'\n\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '160955686'\n\nassert solution('''\n1 2\n1\n1\n''') == '3'"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"OVGURWZLWVLUXTH\") == \"0\""
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'ORZ'\nassert solution('OZ') == '0'\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ', solution('AJKEQSLOBSROFGZ')\nassert solution('AA') == '0', solution('AA')\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"ORZ\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"OVGURWZLWVLUXTH\") == \"ORZ\"\nassert solution(\"OZ\") == \"0\""
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"OVGURWZLWVLUXTH\") == \"ORZ\"\nassert solution(\"OZ\") == \"0\""
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'OZ'\nassert solution('OZ') == '0'\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'ORZ'\nassert solution('OZ') == '0'\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"ABCD\nEFGH\nIJKL\"\"\") == \"ABCD\"\nassert solution(\"\"\"ABCDEFGHIJKL\nZBCDEFGHIJKL\"\"\") == \"ABCDEFGHIJKL\"\nassert solution(\"\"\"AA\nAB\nAC\"\"\") == \"AC\"\nassert solution(\"\"\"A\nA\nA\nA\"\"\") == \"A\""
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 1') == '99'\nassert solution('1 100 1') == '0'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1') == '0'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_data) == output_data\nprint(solution(input_data))\n\"\"\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 1\\n1 100 1\\n1 100 100') == '99'\nassert solution('100 100 100\\n1 1 1\\n1 1 1') == '0'"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 1\\n1 100 1\\n1 100 100') == '99'\nassert solution('100 100 100\\n1 1 1\\n1 1 1') == '0'\nassert solution('0 0 0\\n100 100 100\\n1 1 1\\n1 1 1') == '0'\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"100 100 1\") == \"0\"\n\nprint(solution(open(\"test.txt\")))\nprint(solution(open(\"real.txt\")))\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1 2 1\n1 100 1\n1 100 100\n\"\"\") == \"99\"\nassert solution(\"\"\"\n100 100 100\n1 1 1\n1 1 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n100 100 100\n1 1 1\n1 1 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n100 100 100\n1 1 1\n1 1 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n100 100 100\n1 1 1\n1 1 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 1\\n1 100 1\\n1 100 100') == '99'\nassert solution('100 100 100\\n1 1 1\\n1 1 1') == '0'\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 1\\n1 100 1\\n1 100 100') == '99'\nassert solution('100 100 100\\n1 1 1\\n1 1 1') == '0'\nassert solution('100 100 100\\n1 1 1\\n1 1 1') == '0'\nassert solution('1 1 1\\n1 1 1\\n1 1 1') == '0'\nassert solution('1 1 1\\n1 1 1\\n1 1 1') == '0'"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2 1\n1 100 1\n1 100 100\n''') == '99'\nassert solution('''\n100 100 100\n1 1 1\n1 1 1\n''') == '0'"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\\n\") == \"99\"\nassert solution(\"100 100 100\\n1 1 1\\n1 1 1\\n\") == \"0\"\nassert solution(\"1 1 1\\n1 1 1\\n1 1 1\\n\") == \"1\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'\nassert solution('''3 1''') == '1'\nassert solution('''3 2''') == '0'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '1'\n\nassert solution(input()) == '0'\n\nassert solution(input()) == '1'"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('3 2\\n') == '1'\nassert solution('3 3\\n') == '0'\nassert solution('1000000000000 1048576\\n') == '118606527258'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '1'\nassert solution('3 3') == '0'\nassert solution('1000000000000 1048576') == '118606527258'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n\") == \"1\"\nassert solution(\"3 2\\n\") == \"1\"\nassert solution(\"3 3\\n\") == \"0\"\nassert solution(\"1000000000000 1048576\\n\") == \"118606527258\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n''') == '1'\nassert solution('''\n3 2\n''') == '1'\nassert solution('''\n3 3\n''') == '0'\nassert solution('''\n1000000000000 1048576\n''') == '118606527258'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''+-\n+-''') == 'No'\nassert solution('''+-\n-++''') == 'Yes'\nassert solution('''-++''') == 'Yes'\nassert solution('''-++-''') == 'No'\nassert solution('''-++-''') == 'No'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('+') == 'Yes'\nassert solution('-') == 'No'\nassert solution('++') == 'Yes'\nassert solution('--') == 'No'"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"Yes\"\nassert solution(\"+-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"-\") == \"No\"\nassert solution(\"+\") == \"Yes\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"+-\") == \"Yes\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"+\") == \"No\"\nassert solution(\"-\") == \"No\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'Yes'\nassert solution('+-') == 'No'\nassert solution('++') == 'Yes'\nassert solution('+-') == 'No'"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"+-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"-++\") == \"Yes\"\nassert solution(\"+-\") == \"Yes\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"+-\") == \"Yes\"\nassert solution(\"++-\") == \"No\"\nassert solution(\"+-+\") == \"No\"\nassert solution(\"-+-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''+-\n''') == 'No'\nassert solution('''+-\n+-\n''') == 'No'\nassert solution('''+-\n-++\n''') == 'Yes'\nassert solution('''+-\n--++\n''') == 'Yes'\nassert solution('''+-\n-++-\n''') == 'Yes'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('+-') == 'No'\nassert solution('++') == 'Yes'\nassert solution('+-++-') == 'Yes'\nassert solution('+-+++-') == 'Yes'\nassert solution('-++') == 'No'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''+-''') == \"No\"\nassert solution('''++''') == \"No\"\nassert solution('''-''') == \"No\"\nassert solution('''-++''') == \"Yes\"\nassert solution('''+-''') == \"No\"\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 0 0\n0 1\n-1 2''') == '12.566370614359172464'\n\nassert solution('''4 1 -1\n0 0\n1 2\n2 0\n1 1''') == '21.991148575128551812'''\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 0 0\n0 1\n-1 2\n1 2\n''') == '12.566370614359172464'\n\nassert solution('''\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n''') == '21.991148575128551812'\n'''\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 0 0\n0 1\n-1 2\n1 2\n\n''') == '12.566370614359172464'\n\nassert solution('''\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n\n''') == '21.991148575128551812'\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 0 0\n0 1\n-1 2\n1 2\n\n''') == '12.566370614359172464'\n\nassert solution('''\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n\n''') == '21.991148575128551812'\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 0 0\n0 1\n-1 2\n1 2\n\n''') == '12.566370614359172464'\n\nassert solution('''\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n\n''') == '21.991148575128551812'\n\nassert solution('''\n3 5 0\n0 1\n-1 2\n1 2\n\n''') == '13.194890117853086184'\n\nassert solution('''\n4 7 0\n0 0\n1 2\n2 0\n1 1\n\n''') == '28.70792368426111948'\n\nassert solution('''\n10 0 0\n0 0\n1 2\n2 0\n1 1\n2 1\n1 0\n2 1\n1 1\n1 0\n\n''') == '0'"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    3 0 0\n    0 1\n    -1 2\n    1 2\n''') == '12.566370614359172464'\n\nassert solution('''\n    4 1 -1\n    0 0\n    1 2\n    2 0\n    1 1\n''') == '21.991148575128551812'\n'''\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"12.566370614359172464\"\n\"\"\"\n\n\n\"\"\"\n    Let's create a class that will do the task for you.\n    In order to run the program, you will need to import the class, put input and output objects into its method, and then use the execute method to run the code.\n\"\"\"\n\n\nclass Task(object):\n    \n    def __init__(self, stdin: str, stdout: str):\n        self.stdin = stdin\n        self.stdout = stdout\n        self.input = lambda: stdin.readline()\n        self.output = lambda s: stdout.write(s + '\\n')\n\n    def execute(self):\n        \"\"\"\n            Run the task\n        \"\"\"\n        raise NotImplementedError\n\n\n\"\"\"\n    This class will be our base class for this program.\n    In our case, it will be a class that will be used to represent Snow Blower.\n\"\"\"\n\n\nclass SnowBlower(object):\n    \n    def __init__(self, input: Task, output: Task):\n        self.input = input\n        self.output = output\n        self.snow_blower = None\n        self.n = None\n\n    \"\"\"\n        To start the task, we will use the snow_blower attribute.\n    \"\"\"\n\n    def start(self):\n        self.snow_blower = self.input()\n        self.n = int(self.snow_blower.input())\n        self.move_machine()\n\n    \"\"\"\n        After that we will use the helper method that will help us to\n        determine the coordinates of the polygon.\n    \"\"\"\n\n    def move_machine(self):\n        self.snow_blower.output(self.determine_coordinates())\n\n    \"\"\"\n        After that, the method that will help us to determine the coordinates\n        of the polygon will be called.\n    \"\"\"\n\n    def determine_coordinates(self):\n        points = []\n        for i in range(self.n):\n            points.append(self.snow_blower.input())\n        self.snow_blower.output(self.find_max_points_in_polygon(points))\n\n    \"\"\"\n        The method that will help us to calculate the area of the\n        trajectory that has the same trajectory as the snow_blower.\n    \"\"\"\n\n    def find_max_points_in_polygon(self, points: list) -> float:\n        res = 0\n        current_point = None\n        for i, point in enumerate(points):\n            if not current_point:\n                current_point = point\n            if current_point == point:\n                if i + 1 == self.n:\n                    res += (current_point[0] + current_point[1]) / 2\n                continue\n            else:\n                res += (current_point[0] + current_point[1]) / 2\n                current_point = point\n        return res\n\n\n\"\"\"\n    The execution will be started. After that, the execution will be\n    stopped by an input string.\n\"\"\"\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 0 0\") == \"12.566370614359172464\"\nassert solution(\"4 1 -1\") == \"21.991148575128551812\""
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 0 0') == '12.566370614359172464'\nassert solution('4 1 -1') == '21.991148575128551812'\n\n'''"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 0 0\\n0 1\\n-1 2\\n1 2') == '12.566370614359172464'\n\n\"\"\""
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '6 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n8\n\"\"\") == \"8 8\"\nassert solution(\"\"\"\n6\n\"\"\") == \"6 6\""
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '6 6'\nassert solution('48') == '9 42'"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"48\\n\") == \"9 42\"\nassert solution(\"6\\n\") == \"6 6\"\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8') == '3 2'\nassert solution('6') == '6 6'"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1 1\"\nassert solution(\"2\") == \"2 2\"\nassert solution(\"3\") == \"3 2\"\nassert solution(\"4\") == \"3 2\"\nassert solution(\"5\") == \"4 3\"\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('48') == '9 42'\nassert solution('6') == '6 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('48') == '9 42'\nassert solution('6') == '6 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n''') == '10 6'\nassert solution('''\n7\n''') == '7 7'"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '1 1'\nassert solution('6') == '6 6'\nassert solution('48') == '9 42'\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"Yes\"\nassert solution() == \"No\""
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == 'Yes'\nassert solution() == 'No'\n\n\n\n\u0412\u0430\u043c \u0434\u0430\u0435\u0442\u0441\u044f \u0444\u0430\u0439\u043b, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 n \u0441\u0442\u0440\u043e\u043a \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435, \u043c\u043e\u0436\u0435\u0442 \u043b\u0438 \u043e\u043d\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u043a\u0430\u043a \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0441\u043a\u043e\u0431\u043a\u0430, \u0442.\u0435. \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438 \u0441\u0442\u0430\u043b\u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u0441\u043a\u043e\u0431\u043a\u043e\u0439.\n\n\u0427\u0435\u043b\u043e\u0432\u0435\u043a\u0443 \u043d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0441\u043c\u0435\u0448\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0434\u0440\u0443\u0433 \u0441 \u0434\u0440\u0443\u0433\u043e\u043c, \u0442\u0430\u043a \u0447\u0442\u043e \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e \u0441\u043a\u043e\u0431\u043a\u0443 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430, \u0430 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \"Yes\" \u0438\u043b\u0438 \"No\".\n\n\u0418\u043c\u044f \u0444\u0430\u0439\u043b\u0430 \u043d\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432 \u0432\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435:\n\nFile name;\n\n\u0421\u0442\u0440\u043e\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432 \u0432\u0438\u0434\u0435 \u043e\u0434\u043d\u043e\u0439 \u0438 \u0442\u043e\u0439 \u0436\u0435 \u0441\u0442\u0440\u043e\u043a\u0438. \u0421\u043a\u043e\u0431\u043a\u0438, \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0435 \u0441\u043a\u043e\u0431\u043a\u0430\u043c\u0438, \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e \u043a\u0440\u0430\u044f\u043c, \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438 \u043d\u0435 \u043e\u0434\u043d\u043e\u0439.\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u0442\u0438\u043b\u0435:\n\n\"Yes\" \u2014 \u0444\u0430\u0439\u043b \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043e\u0434\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u0441\u043a\u043e\u0431\u043a\u0438;\n\"No\" \u2014 \u0444\u0430\u0439\u043b \u043d\u0435 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043e\u0434\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u0441\u043a\u043e\u0431\u043a\u0438.\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0438\u043c\u0435\u0442\u044c \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u0432\u0438\u0434:\n\n\"Yes\" \u2014 \u0444\u0430\u0439\u043b \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043e\u0434\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u0441\u043a\u043e\u0431\u043a\u0438;\n\"No\" \u2014 \u0444\u0430\u0439\u043b \u043d\u0435 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043e\u0434\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u0441\u043a\u043e\u0431\u043a\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nfile_name\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nYes\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nfile_name\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nYes\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nfile_name\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nYes\n\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nfile_name\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nNo\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nfile_name\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nYes\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nfile_name\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nNo\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nfile_name\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nYes\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nfile_name\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nNo\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\nfile_name\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\ufffd"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"10\") == \"Yes\""
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input(2)) == \"No\""
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n((') == 'Yes'\nassert solution('2\\n(())') == 'Yes'\nassert solution('10\\n)))))') == 'No'\nassert solution('10\\n)))))') == 'Yes'\nassert solution('10\\n)))))') == 'Yes'"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n(())\") == \"Yes\"\nassert solution(\"3\\n(())\") == \"No\"\nassert solution(\"2\\n(()\") == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n(((''' == \"Yes\"\nassert solution('''3\n()\n\n''' == \"Yes\"\nassert solution('''10\n)))\n\n''' == \"No\")\n\n'''\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 'Yes'\nassert solution('3') == 'No'\nassert solution('10') == 'Yes'"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n((\n''') == 'Yes'\nassert solution('''3\n))\n''') == 'No'\nassert solution('''10\n))\n''') == 'No'\nassert solution('''6\n())\n''') == 'Yes'\nassert solution('''2\n((\n''') == 'No'\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_string) == \"Yes\"\nprint(solution(input_string))\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 50\n50 50\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2 50\n50 50\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3 100\n50 50 100\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 100\n50 50 50 50\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5 100\n50 50 50 50 50\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 50\\n50 50 100\") == \"1\"\nassert solution(\"2 50\\n50 50\") == \"0\"\nassert solution(\"3 100\\n50 50 100\") == \"1\""
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 50\\n50 50 100\") == \"1\"\nassert solution(\"2 50\\n50 50\") == \"2\"\nassert solution(\"3 100\\n50 50 100\") == \"5\"\nassert solution(\"4 50\\n50 50\") == \"2\"\nassert solution(\"5 100\\n50 50 100\") == \"0\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 100\n50 50 100\n\"\"\") == \"5\"\nassert solution(\"\"\"\n3 100\n50 50 100\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 50\n50 50\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 50\\n50 50\\n\") == \"1\"\nassert solution(\"2 50\\n50 50\\n\") == \"5\"\nassert solution(\"3 100\\n50 50 100\\n\") == \"5\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 50\\n50 50 100\") == \"1\"\nassert solution(\"3 100\\n50 50 100\") == \"5\"\nassert solution(\"2 50\\n50 50\") == \"-1\"\nassert solution(\"1 5\\n1 1 2 3 4\") == \"6\"\nassert solution(\"1 20\\n1 1 2 3 4\") == \"2\""
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == str((int(input()) - 1) // int(input()) + 1)\nprint(solution(input_))\n'''\n\nfrom math import *\nfrom collections import Counter\nfrom functools import reduce\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 50\") == \"1\"\nassert solution(\"3 100\") == \"5\"\nassert solution(\"2 50\") == \"-1\"\nassert solution(\"2 50\") == \"0\""
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 50\n50 50 100''') == '1'\nassert solution('''2 50\n50 50''') == '-1'\nassert solution('''3 100\n50 50 100''') == '5'\nassert solution('''2 50\n50 50''') == '2'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([5, 100]) == 2\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2 6 8') == '2'\nassert solution('5\\n2 3 4 9 12') == '4'\nassert solution('4\\n5 7 2 9') == '1'"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n2 6 8\n''') == '2'\nassert solution('''5\n2 3 4 9 12\n''') == '4'\nassert solution('''4\n5 7 2 9\n''') == '1'\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n2 6 8') == '2'\nassert solution('5\\n2 3 4 9 12') == '4'\nassert solution('4\\n5 7 2 9') == '1'"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\nassert solution('4') == '1'"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"4\") == \"1\""
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '1'\n\n'''"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '1'\nassert solution('3') == '2'\nassert solution('2') == '2'\n\n\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n6 8\n''') == '2'\n\nassert solution('''\n5\n7 2 9\n''') == '1'\n\nassert solution('''\n4\n5 7 2 9\n''') == '1'\n\nassert solution('''\n4\n6 3 8\n''') == '2'\n\nassert solution('''\n10\n7 3 2 5 8 9 1 3 2 1 5 9 7 1 2 2 1 3 3 2 7 1 3\n''') == '4'"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n2 6 8') == '2'\nassert solution('5\\n2 3 4 9 12') == '4'\nassert solution('4\\n5 7 2 9') == '1'\n\nstdin = open(\"test.txt\")\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n2 6 8\\n') == '2'\nassert solution('4\\n5 7 2 9\\n') == '1'\nassert solution('5\\n2 3 4 9 12\\n') == '4'"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '6'\nassert solution('3') == '6'"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n1\n2\n3\n4\n5''') == '5'\nassert solution('''5\n-1\n-1\n-1\n-1\n-1''') == '-1'\nassert solution('''5\n16\n25\n18\n27\n30''') == '5'\nassert solution('''5\n90\n108\n45\n105\n165\n175\n33\n30''') == '5'\nassert solution('''5\n-1\n-1\n-1\n-1\n-1''') == '-1'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '6'\nassert solution('5') == '5'\nassert solution('1') == '-1'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n17 18\\n15 24\\n12 15') == '6'\nassert solution('5\\n90 108\\n45 105\\n75 40\\n165 175\\n33 30') == '5'"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '6'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n17 18\n15 24\n12 15\n''') == '6'\nassert solution('''\n2\n10 16\n7 17\n''') == '5'\nassert solution('''\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == '5'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n17 18\n15 24\n12 15\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2\n10 16\n7 17\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n\"\"\") == \"5\""
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '6'\nassert solution('5') == '5'\nassert solution('1') == '-1'"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 16\n7 17\n''') == '5'\nassert solution('''\n5\n10 16\n7 17\n''') == '5'\nassert solution('''\n3\n17 18\n15 24\n12 15\n''') == '6'\nassert solution('''\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == '5'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '3'\n) == '6'\n\nassert solution(\n    '2'\n) == -1\n\nassert solution(\n    '5'\n) == '5'"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('bab') == '1 0'\nassert solution('bbbb') == '0'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('bab') == '1 0'\nassert solution('bbbb') == '1 3'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('bab') == '1 0'\nassert solution('bbbb') == '0'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"bab\") == \"2 0\"\nassert solution(\"bbbb\") == \"0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('bab') == '1 0'\nassert solution('bbbb') == '0'\n\nsolution(\"bbbbaaa\")"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''bab\nbb''') == '2 0 1 3'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''bab\nbb''') == \"2 0 1 3\"\n\n\n'''\n8. Write a Python program to create a new dictionary from an existing dictionary of lists.\nInput: \n{\u2018key1\u2019:[\u2018value1\u2019,\u2018value2\u2019], \n\u2018key2\u2019: [\u2018value4\u2019,\u2018value3\u2019]}\nOutput: {\u2018key1\u2019:['value1','value2'], \n\u2018key2\u2019:['value4','value3']}\n'''\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"bab\") == \"1 0\"\nassert solution(\"bbbb\") == \"0\"\nassert solution(\"aaa\") == \"1 3\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"bab\") == \"1 0\"\nassert solution(\"bbbb\") == \"0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"bbb\") == \"0\"\nassert solution(\"aaa\") == \"1 0\"\nassert solution(\"bbbb\") == \"1 3\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"POSSIBLE\"\nassert solution(\"3 3\") == \"IMPOSSIBLE\"\n\nimport collections\nimport sys"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1\\n4 3 2\\n\") == \"POSSIBLE\"\nassert solution(\"2\\n1 2\\n4 3 2\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n4 3 2') == 'POSSIBLE'\nassert solution('3\\n1 1\\n3 2 1') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'POSSIBLE'\nassert solution('3') == 'IMPOSSIBLE'\nassert solution('4') == 'POSSIBLE'\nassert solution('5') == 'IMPOSSIBLE'\n\n\"\"\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == 'POSSIBLE'\nassert solution('3') == 'POSSIBLE'\nassert solution('4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"POSSIBLE\"\nassert solution(\"1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"POSSIBLE\"\nassert solution(\"2\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == 'POSSIBLE'\nassert solution('10') == 'POSSIBLE'\nassert solution('5') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1\\n4 3 2') == 'POSSIBLE'\nassert solution('1\\n1 1\\n') == 'IMPOSSIBLE'\nassert solution('5\\n2 1 4 1\\n3 4 4 5') == 'IMPOSSIBLE'\n'''\n\nn = int(input())\nparents = list(map(int, input().split()))\nx = list(map(int, input().split()))"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == 'POSSIBLE'\nassert solution('1') == 'IMPOSSIBLE'\nassert solution('0') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1000000007') == '2'\nassert solution('2 500000010') == '3'\nassert solution('3 3') == '0'\nassert solution('5 4') == '2'\nassert solution('6 7') == '1'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1000000007') == '2'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 0\") == \"4\"\nassert solution(\"2 0\") == \"2\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1\\n') == '1'\nassert solution('2 1000000007\\n') == '2'"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 1000000007\n''') == '3'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(stdin := input()) == '2'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '4'\nassert solution('5 5') == '9'\n\nfrom collections import defaultdict\n\nn, m = list(map(int, input().split()))"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"4 5\") == \"1\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n1 3\\n1 3\\n1 3\\n2 2\\n\") == \"3\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 10000007') == '2'\nassert solution('3 1000000007') == '1'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([2, 3, 3, 2]) == 7\nassert solution([4, 1, 5, 1]) == 999999228\nassert solution([4, 1, 5, 1], '-') == -781\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2 3\n+-+\n''') == '7'\nassert solution('''\n4 1 5 1\n-\n''') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3 3\") == \"7\"\nassert solution(\"4 1 5 1\") == \"999999228\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 3 3') == '7'\nassert solution('4 1 5 1') == '999999228'"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '7'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 3 3') == '7'\nassert solution('4 1 5 1') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"2 2 3 3\n+-+\n\"\"\"\n) == \"7\"\nassert solution(\n\"\"\"4 1 5 1\n-\n\"\"\"\n) == \"999999228\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == '7'\nprint(solution(sys.stdin.read()))\n\"\"\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2 3 3''') == '7'\nassert solution('''4 1 5 1''') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2 3 3\n+-+''') == '7'\nassert solution('''4 1 5 1\n-''') == '999999228'"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"10 2 1 7\") == \"0\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1 1 2\n''') == '4'\nassert solution('''\n1 2 3 1\n''') == '2'\nassert solution('''\n10 2 1 7\n''') == '0'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1 2') == '4'\nassert solution('1 2 3 1') == '2'\nassert solution('10 2 1 7') == '0'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1 2') == '4'\nassert solution('1 2 3 1') == '2'\nassert solution('10 2 1 7') == '0'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 2') == '4'\nassert solution('1 2 3 1') == '2'\nassert solution('10 2 1 7') == '0'"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_1) == \"4\"\nassert solution(input_2) == \"0\"\n\n\"\"\",\n    [\n        (\"1 1 1 2\", \"4\"),\n        (\"1 2 3 1\", \"2\"),\n        (\"10 2 1 7\", \"0\")\n    ]\n)\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([1, 1, 1, 2]) == 4\nassert solution([1, 2, 3, 1]) == 2\nassert solution([10, 2, 1, 7]) == 0\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 2\") == '4'\nassert solution(\"1 2 3 1\") == '2'\nassert solution(\"10 2 1 7\") == '0'"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"10 2 1 7\") == \"0\"\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1 2') == '4'\nassert solution('1 2 3 1') == '2'\nassert solution('10 2 1 7') == '0'\nassert solution('100 100 100 1') == '0'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"6\"\n\nprint(solution())\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '6'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"5 1\") == \"0\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"6\"\nassert solution(\"3 2\") == \"9\""
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2\n''') == '6'\nassert solution('''\n4 4\n''') == '96'\nassert solution('''\n4 4\n''') == '0'"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '6'\nassert solution('7 3') == '20'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2\n1\n3\n4\n''') == '1'\nassert solution('''2 2\n2\n4\n5\n''') == '2'\nassert solution('''2 2\n3\n4\n5\n''') == '4'\nassert solution('''2 2\n3\n4\n5\n6\n''') == '4'\nassert solution('''5 5\n4\n0\n3\n2\n1\n''') == '1'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '6'\nassert solution('10 10') == '1879'\n\n\"\"\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '6'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 2\n1 2''') == '8'\nassert solution('''2 2\n1 2\n1 3''') == '1'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\") == \"6\"\nassert solution(\"1\\n1 2\") == \"1\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '0'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n1\\n\") == \"2\"\nassert solution(\"2\\n1\\n\") == \"0\""
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2\n''') == '2'\nassert solution('''\n3\n1 2\n''') == '2'\nassert solution('''\n4\n1 2 4\n''') == '8'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '0'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == '2'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3\") == \"3\"\n\"\"\""
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('1 2') == '1'\nassert solution('2 2') == '0'\n\n'''\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdin.read()\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n''') == '2'\n\nassert solution('''\n4\n0 2 0 0\n1 0 3\n''') == '4'\n\nassert solution('''\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == '18'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n''') == '2'\nassert solution('''\n3\n0 2 0\n1 0 3\n''') == '4'\nprint('All tests passed')\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"11\") == \"18\"\nassert solution(\"\") == \"0\"\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n''') == '2'\nassert solution('''\n3\n0 2 0\n1 0 3\n''') == '4'\nassert solution('''\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == '18'"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n\n''') == '2'\n\nassert solution('''\n3\n0 2 0\n1 0 3\n\n''') == '4'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n0 2 0\\n3 0 1\\n') == \"2\"\nassert solution('11\\n0 0 0 5 0 0 0 4 0 0 11\\n9 2 6 0 8 1 7 0 3 0 10\\n') == \"18\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('0 0 0 5 0 0 0 4 0 0 11') == '4'\nassert solution('9 2 6 0 8 1 7 0 3 0 10') == '18'"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\n\"\"\""
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n''') == '2'\n\nassert solution('''\n3\n0 2 0\n1 0 3\n''') == '4'\n\nassert solution('''\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == '18'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"7\") == \"4\"\nassert solution(\"18\") == \"9\"\nassert solution(\"11\") == \"18\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n\nn m\n\n1 1\n\nvk*cup\nvkcup\n\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n\nn m\n\n6 6\n\nvk*vk\nvkcup\n\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n\nn m\n\n4 4\n\nf\n\nvk\nvkcup\n\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n\nn m\n\n5 5\n\nc*\n\nvk\nvkcup\n\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n\nn m\n\n5 5\n\nc*\n\nvkcup\nvkcup\n\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 10\\n\" +\n                \"code*s\\n\" +\n                \"codeforces\") == \"YES\"\n\nassert solution(\"1 1\\n\" +\n                \"v\\n\" +\n                \"k\") == \"NO\""
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 5') == 'YES'\nassert solution('1 1') == 'NO'\nassert solution('9 6') == 'NO'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"YES\"\n\nfor i in range(int(input())):\n    s,t=input().split(\" \")\n    s=list(s)\n    t=list(t)\n    flag=False\n    for j in range(len(s)):\n        if s[j]!=\"*\":\n            flag=True\n            break\n    if flag:\n        for j in range(len(t)):\n            if t[j]!=\"*\":\n                flag=True\n                break\n    print(\"YES\" if flag else \"NO\")\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\nabc\nab*c\n''') == 'YES'\n\nassert solution('''\n6 5\nvkcup\nvkc*up\n''') == 'NO'\n\nprint(solution('''\n6 5\nvkcup\nvkc*up\n'''))\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 10\\ncode*s') == 'YES'\nassert solution('6 5\\nvk*cup') == 'YES'\nassert solution('1 1\\nv') == 'NO'\nassert solution('9 6\\ngfgf*gfgf') == 'NO'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_str) == 'YES'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 6\") == \"YES\", \"First example\"\nassert solution(\"4 5\") == \"YES\", \"Second example\"\nassert solution(\"6 5\") == \"YES\", \"Third example\"\nassert solution(\"1 1\") == \"NO\", \"Fourth example\""
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"2 3\") == \"NO\"\nassert solution(\"3 1\") == \"NO\"\nassert solution(\"4 1\") == \"NO\""
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\naba*aba') == 'YES', \"a*a\"\nassert solution('1\\naba') == 'NO', \"a*a\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n0.1 0.2 0.3\\n') == '0.260000000000'\nassert solution('4\\n0.1 0.2 0.3 0.8\\n') == '0.800000000000'\nassert solution('2\\n0.1 0.2\\n') == '0.260000000000'\nprint('Congratulations! Your solution passed all tests.')"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"0.260000000000\"\nprint(solution())\n\n\"\"\"\nimport math\n\nn = int(input())\np = list(map(float, input().split()))\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0.260000000000\"\nassert solution(\"2\") == \"0.260000000000\""
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0.1 0.2\") == \"0.260000000000\"\nassert solution(\"4\\n0.1 0.2 0.3 0.8\") == \"0.800000000000\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0.1 0.2 0.3\n''') == '0.260000000000'\nassert solution('''\n2\n0.1 0.2\n''') == '0.260000000000'\nassert solution('''\n4\n0.1 0.2 0.3 0.8\n''') == '0.800000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '0.260000000000'\nassert solution('1') == '0.5'\nassert solution('0.1') == '0.800000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0.260000000000'\nassert solution('4') == '0.800000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n0.1 0.2 0.3 0.8\n\n''') == '0.800000000000'\nassert solution('''\n2\n0.1 0.2\n\n''') == '0.260000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '0.260000000000'\nassert solution('4') == '0.800000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '0.800000000000'\nassert solution('2') == '0.260000000000'\nassert solution('') == '0.0'\nassert solution('1') == '0.0'\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 10 1 2 5') == '5.0'\nassert solution('3 6 1 2 1') == '4.71428571429'\nassert solution('3 7 1 2 1') == '1.81818181818'\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 6 1 2 1') == '4.7142857143'\nassert solution('10 10 3 1 1') == '11.8'\nassert solution('30 10 4 1 1') == '33.6666666667'\nassert solution('30 10 4 1 3') == '33.3333333333'\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 10 1 2 5') == '5'\nassert solution('3 6 1 2 1') == '4.7142857143'"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(5, 10, 1, 2, 5) == 5.0\nassert solution(3, 6, 1, 2, 1) == 4.7142857143\nassert solution(1, 10, 1, 2, 1) == 10.0\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\""
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\"\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\""
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\"\n\n'''\n\nimport math"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\"\nassert solution(\"10000000000000 9999999999 10000000000000 10000000000000 10000000000000 10000000000000 10000000000000 10000000000000\") == \"1000000000000000000\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\"\nassert solution(\"6 4 2 7 3\") == \"6.0000000000\"\nassert solution(\"3 1 2 3 3 4 4\") == \"3.99999999999\"\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '0.25'\nassert solution('10') == '0.25'\nassert solution('12') == '0.20'\nassert solution('100') == '0.20'\nassert solution('1000') == '0.20'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n0.000 0.500 0.750 1.000 2.000 3.000''') == '0.250'\nassert solution('''3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896''') == '0.279'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0.250'\nassert solution('3') == '0.279'\nassert solution('1') == '0'\nassert solution('5') == '0.279'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0.250'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '0.250'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.250'\nassert solution('''\n3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n''') == '0.279'\nassert solution('''\n2\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n1.000\n''') == '0.274'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0.250'\nassert solution('4') == '0.279'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n0.000 0.500 0.750 1.000 2.000 3.000') == '0.250'\nassert solution('3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896') == '0.279'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '0.250'\nassert solution('4') == '0.279'\nassert solution('5') == '0.319'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"0.25\"\nassert solution(\"3\") == \"0.279\"\nassert solution(\"4\") == \"0.307\""
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5') == \"18\"\nassert solution('0 1') == \"8\"\n\nstdin = \"\"\"\n10 1\n10 1\"\"\"\n\nassert solution(stdin) == \"11\"\n\nstdin = \"\"\"\n30 30\n30 30\"\"\"\n\nassert solution(stdin) == \"46\""
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1 2\n5 3\n\"\"\") == \"18\"\nassert solution(\"\"\"\n1 1\n0 0\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5\\n5 2') == '18'\nassert solution('0 1\\n0 0') == '8'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"4\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"8 8\") == \"13\"\nassert solution(\"100 0\") == \"100\"\n\nstdin = \"\"\"\n1 5\n5 2\n\n\"\"\""
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5\\n5 2\\n') == '18'\nassert solution('0 1\\n0 0\\n') == '8'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1') == '2'\nassert solution('0 1') == '8'\nassert solution('1 1') == '1'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5\\n5 2\\n') == '18'\nassert solution('0 1\\n0 0\\n') == '8'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    1\n    ''') == '4'\nassert solution('''\n    2\n    ''') == '10'\nassert solution('''\n    10\n    ''') == '244'"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 4\nassert solution('2') == 10\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1''') == '4'\nassert solution('''2''') == '10'\nassert solution('''10''') == '244'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"10\"\nassert solution(\"10\") == \"244\"\nassert solution(\"11\") == \"1\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n') == '4\\n'\nassert solution('2\\n') == '10\\n'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 4\nassert solution('2') == 10\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '4'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '10'\nassert solution('10') == '244'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n4''') == \"10\"\nassert solution('''10\n''') == \"244\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"10\""
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([3, 1, 2, 3]) == 0\nassert solution([4, 1, 4, 9]) == 2\nassert solution([5, 1, 4, 1, 4, 9]) == 2\nprint(solution(input()))\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '0'\nassert solution('4 1 1 4 9') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == '0'\nassert solution(\"1 2 3\") == '0'\nassert solution(\"1 1 2 2\") == '1'\nassert solution(\"4 1 1 4 9\") == '2'"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '2'\nassert solution('5') == '2'"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 3\n''') == '0'\nassert solution('''4\n1 4 1 4 9\n''') == '2'\nassert solution('''5\n1 4 1 4 9\n''') == '2'\nassert solution('''6\n1 4 1 4 9 1\n''') == '1'\nassert solution('''7\n1 4 1 4 9 1 4\n''') == '2'\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 4 1 4 9') == '2'\nassert solution('3\\n1 2 3') == '0'\nassert solution('7\\n1 1 2 2 2 2 2') == '2'\nassert solution('6\\n1 2 2 2 2') == '1'\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '0'\nassert solution('''\n4\n1 4 1 4 9\n''') == '2'\nassert solution('''\n5\n1 4 1 4 9\n''') == '2'\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\""
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == '0'\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 2 3\n\n''') == '0'\n\nassert solution('''4\n1 4 1 4 9\n\n''') == '2'"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aaabccc') == 'YES', 'First example'\nassert solution('bbacc') == 'NO', 'Second example'\nassert solution('aabc') == 'YES', 'Third example'"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'YES'\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n\n'''"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"YES\" or solution(input) == \"NO\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('aaabccc') == 'YES', solution('aaabccc')\nassert solution('bbacc') == 'NO', solution('bbacc')\nassert solution('aabc') == 'YES', solution('aabc')"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"aaaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('aaabccc') == 'YES', 'test 1'\nassert solution('bbacc') == 'NO', 'test 2'\nassert solution('aabc') == 'YES'\n\n\n\"\"\""
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\naaabccc\n''') == 'YES'\nassert solution('''\nbbacc\n''') == 'NO'\nassert solution('''\naabc\n''') == 'YES'\n\n\"\"\""
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('aaabccc') == 'YES', 'Case 1'\nassert solution('bbacc') == 'NO', 'Case 2'\nassert solution('aabc') == 'YES', 'Case 3'"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == \"4\"\nassert solution(\"4\\n1 2 3 4\") == \"2\"\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2 3\n\n''') == '1\n\nassert solution('''4\n1 2 3 4\n\n''') == '1\n\nassert solution('''5\n2 3 1 4 5\n\n''') == '3\n'''\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n4 1 2 5 3\n''') == '2'\nassert solution('''4\n4 1 3 2\n''') == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n4 1 2 5 3') == '2'\nassert solution('4\\n4 1 3 2') == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 1 2 5 3\") == '2'\nassert solution(\"4\\n4 1 3 2\") == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == '1'\nassert solution(\"5\") == '2'\nassert solution(\"4\") == '1'"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n4 1 2 5 3\n''') == '2'\nassert solution('''\n4\n4 1 3 2\n''') == '2'\nassert solution('''\n5\n4 1 2 5 3\n''') == '2'\nassert solution('''\n4\n4 1 3 2\n''') == '2'\nassert solution('''\n2\n''') == '0'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n4 1 2 5 3') == '2'\nassert solution('5\\n4 1 3 2') == '2'\nassert solution('10\\n4 1 3 2 5 7 8 6 9 10') == '4'\nassert solution('10\\n4 1 3 2 5 7 8 6 9 10 20') == '4'\nassert solution('10\\n4 1 3 2 5 7 8 6 9 10 20 30') == '4'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 1') == '3.500000000000'\nassert solution('6 3') == '4.958333333333'\nassert solution('2 2') == '1.750000000000'"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 1\n''') == '3.500000000000'\nassert solution('''\n6 3\n''') == '4.958333333333'\nassert solution('''\n2 2\n''') == '1.750000000000'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6 1\n''') == '3.500000000000'\nprint('PASSED')\n\nassert solution('''6 3\n''') == '4.958333333333'\nprint('PASSED')\n\nassert solution('''2 2\n''') == '1.750000000000'\nprint('PASSED')\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 1') == '3.500000000000'\nassert solution('6 3') == '4.958333333333'\nassert solution('2 2') == '1.750000000000'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6 1\n''') == '3.500000000000'\nassert solution('''6 3\n''') == '4.958333333333'\nassert solution('''2 2\n''') == '1.750000000000'''\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2\n''') == '1.750000000000'\nassert solution('''\n6 3\n''') == '4.958333333333'\nassert solution('''\n2 2\n''') == '1.750000000000'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 1\n1''') == '1.75'\nassert solution('''2 2\n1''') == '1.5'\nassert solution('''6 3\n2''') == '2.5'\nassert solution('''6 1\n2''') == '4.5'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '3.500000000000'\nassert solution('6 1') == '3.500000000000'\nassert solution('2 2') == '1.750000000000'\nassert solution('6 3') == '4.958333333333'\n\n\n'''"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 1\n''') == '3.500000000000'\nassert solution('''\n6 3\n''') == '4.958333333333'\nassert solution('''\n2 2\n''') == '1.750000000000'\nassert solution('''\n3 3\n''') == '0.1250000000000'"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 1\") == \"1.750000000000\"\nassert solution(\n    \"6 3\") == \"4.958333333333\"\nassert solution(\n    \"6 5\") == \"5.0\"\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n>->\n5\n<->\n3\n<->\n''') == '3'\nassert solution('''\n4\n<-<-\n5\n>-<\n3\n<->\n''') == '5'\nassert solution('''\n3\n<-\n5\n<->\n3\n<->\n''') == '2'\n'''\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n5\n-><-\n5\n>>>>\n3\n<--\n2\n<>''') == '3'\nassert solution('''4\n5\n-><-\n5\n>>>>\n3\n<--\n2\n<>''') == '0'\nassert solution('''4\n4\n<<>>\n3\n<<>>\n2\n''') == '1'\nassert solution('''4\n4\n-><-\n4\n>->\n3\n-><-\n2\n''') == '2'\nassert solution('''4\n4\n-><-\n4\n>->\n3\n-><-\n2\n''') == '1'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>''') == '3'\nassert solution('''4\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>''') == '5'\nassert solution('''4\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>''') == '0'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n-><-\n5\n>>>>\n3\n<--\n2\n<>\n''') == '3'\nassert solution('''\n4\n-><-\n5\n>>>>\n3\n<--\n2\n<>\n''') == '5'\nassert solution('''\n4\n>-\n3\n<-\n2\n<-\n''') == '0'\nassert solution('''\n4\n>->\n3\n<->\n2\n<->\n''') == '4'\nassert solution('''\n5\n>->\n3\n<->\n2\n<->\n''') == '5'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"3\"\nassert solution() == \"5\"\nassert solution() == \"3\""
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>''') == '3'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n-><-\") == \"3\"\nassert solution(\"5\\n3\\n<->\") == \"5\"\nassert solution(\"4\\n4\\n<->\") == \"0\"\nassert solution(\"4\\n5\\n<->\") == \"0\"\nassert solution(\"4\\n5\\n-><-\") == \"3\"\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n''') == '3'\n\nassert solution('''\n2\n<->\n''') == '1'\n\nassert solution('''\n5\n<->\n''') == '5'"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n<->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->\n5\n<-\n5\n>>-\n4\n->\n''') == '3'\nassert solution('''8\n<->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->\n8\n<->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->\n7\n<->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->\n6\n<->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->\n5\n<->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->\n4\n<->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->\n''') == '3'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n5\n-><-\n5\n>>>>>\n3\n<--\n2\n<>''') == '3'\n\n'''\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == \"9 9 10\"\nassert solution('3') == \"16 9 9 10\""
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == \"16\"\nassert solution('4') == \"9 9 10\""
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n4 5\n4 5\n4 10\n\n\"\"\") == \"16\"\nassert solution(\"\"\"\n4\n1 100\n100 1\n1 100\n100 1\n\n\"\"\") == \"101 101 101 101 \nassert solution(\"\"\"\n3\n2 3\n4 5\n2 3\n\n\"\"\") == \"202\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n2 5') == '16\\n9 9 10', 'Sample test'\nassert solution('4\\n2 2 3 2') == '9 9 10', 'Sample test'\nassert solution('5\\n10 10 10 10 10') == '202 101 101 101 101', 'Sample test'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_string) == '16 9 9 10', print(solution(input_string))\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_1) == \"16\"\nassert solution(input_2) == \"101 101 101 101\"\n\n'''\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"202\""
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 100\\n100 1\\n1 100\\n100 1') == '202'\nassert solution('4\\n4 5\\n4 5\\n4 10\\n') == '9 9 10'"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 100\n100 1\n1 100\n100 1\n''') == '202'\n\nassert solution('''\n4\n1 100\n100 1\n1 100\n100 1\n''') == '9 9 10'\n\nassert solution('''\n4\n1 1\n100 100\n1 1\n1 1\n''') == '101 101 101 101'\n\nassert solution('''\n5\n1 1\n100 100\n1 1\n1 1\n''') == '-1'\n\nassert solution('''\n5\n1 1\n100 100\n1 1\n1 1\n1 1\n''') == '101 101 101 101 101'"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n4 5\n4 5\n4 10\n''') == '16', 'First'\n\nassert solution('''\n4\n1 100\n100 1\n1 100\n100 1\n''') == '202', 'Second'\n\nassert solution('''\n3\n1 1\n100 100\n1 1\n''') == '-1', 'Third'\n\nassert solution('''\n4\n1 1\n100 100\n1 1\n''') == '-1', 'Fourth'"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 1 1 1 1\n''') == '1 2 2'\nassert solution('''\n5\n1 2 3 2 2\n''') == '0 2'\nassert solution('''\n5\n1 2 3 2 2\n''') == '0 1 3'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([5]) == \"0 2\"\nassert solution([3]) == \"0 1 3\"\nassert solution([1]) == \"1\"\nassert solution([1, 1, 1, 1, 1]) == \"1 2 2\"\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1 2 3'\nassert solution('5') == '1 2 3 2 2'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 2 3 2 2\n''') == '0 2'\nassert solution('''\n3\n1 2 3\n''') == '0 1 3'\nassert solution('''\n5\n1 2 3 2 2\n''') == '0 1 3'\nassert solution('''\n7\n1 1 1 1 1 1 1\n''') == '2 2'\nassert solution('''\n5\n1 2 3 2 2\n''') == '0 1 3'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 2 2\\n') == '0 2'\nassert solution('3\\n1 2 3\\n') == '0 1 3'\nassert solution('2\\n2 2\\n') == '0 1 2'\nassert solution('5\\n1 2 3 2 2\\n') == '0 1 3'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3\n''') == '1 1 2'\nassert solution('''5\n1 1 1 1 1\n''') == '1 2 3'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1 2 2 \nassert solution('3') == '0 2 "
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1 2 2 \nassert solution(\"3\") == \"0 2 \nassert solution(\"4\") == \"0 1 3 \n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1 2 2\"\nassert solution(\"3\") == \"0 2\"\nassert solution(\"5\") == \"0 2\"\nassert solution(\"5\") == \"0 2\"\nassert solution(\"5\") == \"0 2\"\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([\n    '2',\n    '5',\n    '1 1 1 1 1',\n    '1 2 3 2 2'\n]) == '2 1 2 1 2 2'\nassert solution([\n    '3',\n    '1 2 3 2 2'\n]) == '0 2'\nassert solution([\n    '6',\n    '1 2 3 2 2'\n]) == '0 1 3'\nassert solution([\n    '8',\n    '1 2 3 2 2'\n]) == '0 1 3 2'\nassert solution([\n    '9',\n    '1 2 3 2 2'\n]) == '0 1 3 2 2'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''10010110\n100011\n\n10''') == '01'\nassert solution('''10110110\n110\n\n10''') == '110110'\nassert solution('''10\n11100\n\n10''') == '01'\nprint(solution(input()))"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''101101''') == '110110'\nassert solution('''10010110''') == '01100011'\nassert solution('''10''') == '01'\nassert solution('''11100''') == '01'\n\n\n\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test_small(self):\n        pass\n\n    def test_large(self):\n        self.assertEqual(solution('''10010110'''), '01100011')\n        self."
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"110110\"\nassert solution(input()) == \"01100011\"\nassert solution(input()) == \"01\"\nassert solution(input()) == \"\""
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"10010110\"\n) == \"01\"\n\nassert solution(\n    \"100011\"\n) == \"01\"\n\nassert solution(\n    \"10\"\n) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(INPUT_S) == OUTPUT_S\n\n'''"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"101101\") == \"110110\"\nassert solution(\"110\") == \"01100011\"\nassert solution(\"10\") == \"01\"\n\"\"\""
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"101101\") == \"110110\"\nassert solution(\"10010110\") == \"01100011\"\nassert solution(\"10\") == \"01\"\n\n\n\"\"\"\n\n\ns = input()\nt = input()"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10010110') == '01'\nassert solution('11100') == '01'\nassert solution('110') == '0'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10010110\n100011\n''') == '01'\nassert solution('''10\n11100\n''') == '01'\nassert solution('''1000010\n100011\n''') == '01'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"101101\"\n) == \"110110\"\nassert solution(\n    \"10010110\"\n) == \"01100011\"\nassert solution(\n    \"10\"\n) == \"01\"\nassert solution(\n    \"11100\"\n) == \"01\""
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 5 2\") == \"1\"\nassert solution(\"3 4 1\") == \"0\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\nassert solution(\"3 4 1\") == \"0\"\nassert solution(\"5 5 2\") == \"1\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 5 2\") == \"1\"\nassert solution(\"3 4 1\") == \"0\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5 2') == '1', \"Wrong answer\"\nassert solution('3 4 1') == '0', \"Wrong answer\"\nassert solution('10 10 20 30 40 50 60 70 80 90 100') == '40', \"Wrong answer\""
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 5 2\") == \"1\"\nassert solution(\"3 4 1\") == \"0\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5 2') == '1', \"Wrong!\"\nassert solution('3 4 1') == '0', \"Wrong!\"\nassert solution('3 4 1') == '0', \"Wrong!\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == '2 2 3 1 2'\n\nassert solution('''\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\n''') == '9999 10000 9998'\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '2 2 3 1 2'\nassert solution('3') == '9999 10000 9998'"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == \"2 2 3 1 2\"\nassert solution('3') == \"9999 10000 9998\"\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0''') == '2 2 3 1 2'\nassert solution('''3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0''') == '9999 10000 9998'\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0\") == \"2 2 3 1 2\"\nassert solution(\"10\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0\") == \"2 2 3 1 2\"\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2 2 3'\nassert solution('4') == '2 2 3 1'\nassert solution('5') == '2 2 3 1 2'\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(test.input_lines) == test.output\nprint(solution(input))\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == '2 2 3 1 2'\nassert solution(\"3\") == '2 2 3 1 2'\nassert solution(\"12\") == '6 4 9 8 2'\nassert solution(\"10\") == '10 10 10 10 10'\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input.stdin) == \"2 2 3 1 2\"\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '2 2 3 1 2'\nassert solution('3') == '2 2 3 1 2'\nassert solution('4') == '2 2 3 1 2'\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(t1) == '22'\nassert solution(t2) == '0'\nassert solution(t3) == '105'\nassert solution(t4) == '0'\nassert solution(t5) == '0'\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"22\"\nassert solution(\"5\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '22'\nassert solution('5') == '0'\nassert solution('3') == '0'\n\n\n\nfrom collections import Counter"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\") == \"22\"\nassert solution(\"5\\n11 19\\n10 22\\n00 18\\n00 29\\n11 29\") == \"105\"\nassert solution(\"3\\n00 5000\\n00 5000\\n00 5000\") == \"0\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6\\n11 6') == '22'\nassert solution('5\\n11 19\\n10 22') == '105'\nassert solution('3\\n00 5000\\n00 5000\\n00 5000') == '0'\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '22'\nassert solution() == '0'\nassert solution() == '105'\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6\n11 6\n10 4\n01 3\n00 3\n00 7\n00 9''') == '22'\nassert solution('''5\n11 1\n01 1\n00 100\n10 1\n01 1\n''') == '103'\nassert solution('''6\n11 19\n10 22\n00 18\n00 29\n11 29\n10 28\n''') == '105'\nassert solution('''3\n00 5000\n00 5000\n00 5000\n''') == '0'\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\\n') == '22'\nassert solution('2\\n11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\\n') == '105'\nassert solution('3\\n00 5000\\n00 5000\\n00 5000\\n') == '0'"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\\n\") == \"22\"\n\nassert solution(\"6\\n11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\\n\") == \"105\"\n\nassert solution(\"3\\n00 5000\\n00 5000\\n00 5000\\n\") == \"0\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '22'\nassert solution('5') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 9') == 'YES'\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4 9') == \"YES\"\nassert solution('3 4 10') == \"YES\"\nassert solution('3 4 9') == \"YES\"\nassert solution('3 4 10') == \"YES\"\nassert solution('3 4 5') == \"NO\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4 9') == 'YES', 'First sample'\nassert solution('3 4 10') == 'YES', 'Second sample'\nassert solution('3 4 9') == 'YES', 'Third sample'"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4 9') == \"YES\"\nassert solution('3 4 10') == \"YES\"\nassert solution('3 4 9') == \"YES\"\nassert solution('3 4 10') == \"YES\"\nassert solution('3 4 5') == \"NO\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 9') == 'YES'\nassert solution('3 4 5') == 'NO'\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 9') == 'YES'\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 9\") == \"YES\", \"small test\"\nassert solution(\"3 4 10\") == \"YES\", \"small test\"\nassert solution(\"3 4 9\") == \"YES\", \"small test\"\nassert solution(\"3 4 10\") == \"YES\", \"small test\"\nassert solution(\"3 4 5\") == \"NO\", \"small test\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 4 9\n2 3 1 2\n2 1 3\n4 3 6\n''') == \"YES\", \"1st sample\"\n\nassert solution('''3 4 5\n1 3 1 2\n2 1 3\n5 3 6\n''') == \"NO\", \"2nd sample\""
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 1\n2 3 4 1\n1 2 3 4''') == 'YES'\nassert solution('''4 1\n4 3 1 2\n3 4 2 1''') == 'YES'\nassert solution('''4 2\n4 3 1 2\n2 1 4 3''') == 'NO'\nassert solution('''4 1\n4 3 1 2\n2 1 4 3''') == 'NO'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"NO\""
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 'YES'\nassert solution() == 'NO'\n\"\"\""
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"4 1\") == \"YES\"\nassert solution(\"4 3\") == \"YES\"\nassert solution(\"4 2\") == \"NO\"\nassert solution(\"4 1\") == \"YES\""
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 1') == 'NO'\nassert solution('4 1') == 'NO'"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 1') == 'YES'\nassert solution('4 1') == 'NO'\nassert solution('4 3') == 'YES'\nassert solution('4 3') == 'NO'\nassert solution('4 2') == 'YES'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == 'YES'\nassert solution('4 1') == 'NO'\nassert solution('4 3') == 'YES'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 1\") == \"NO\"\nassert solution(\"4 1\") == \"YES\"\nassert solution(\"4 1\") == \"YES\"\nassert solution(\"4 2\") == \"YES\"\nassert solution(\"4 2\") == \"YES\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1') == 'NO'\nassert solution('5 1') == 'NO'\nassert solution('5 1') == 'NO'\nassert solution('5 1') == 'YES'\nassert solution('5 1') == 'NO'\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n\") == \"1 1\\n3 1\\n1 5\\n4 4\\n\""
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\") == '1 1\\n3 1\\n1 5\\n4 4'\nassert solution(\"7\") == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6'\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"1 1\\n3 1\\n1 5\\n4 4\\n\"\nassert solution(\"7\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3\") == \"1 1\\n2 1\\n1 5\\n4 4\"\nassert solution(\n    \"7\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\nassert solution(\n    \"4\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == '1 1\\n3 1\\n1 5\\n4 4\\n'\nassert solution(\"7\") == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5''') == '1 1\\n3 1\\n1 5\\n4 4\\n'''\n\nassert solution('''7''') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'''\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4''') == '1 1'\nassert solution('''7''') == '2 1\\n3 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6'\nassert solution('''7''') == '2 1\\n3 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6'\nassert solution('''8''') == '2 1\\n3 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6'\nassert solution('''12''') == '4 1\\n5 2\\n6 2\\n7 1\\n8 1\\n9 1\\n10 1\\n11 1\\n12 1'\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7\n''') == '''1 1\n3 1\n1 5\n4 4\n'''\n\nassert solution('''\n7\n''') == '''2 1\n1 2\n4 1\n5 2\n2 6\n5 7\n6 6\n'''\n\nassert solution('''\n8\n''') == '''2 1\n1 2\n4 1\n5 2\n6 3\n5 7\n6 6\n7 7\n'''\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n') == '1 1\\n3 1\\n1 5\\n4 4\\n'\nassert solution('7\\n') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'\n\n\n\"\"\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\") == '1 1\\n3 1\\n1 5\\n4 4\\n'\nassert solution(\"7\") == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == '3'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '-1'\nassert solution('3') == '3'\nassert solution('1 2 3') == '4'"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n1\n\"\"\") == \"-1\"\n\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3\n2 1 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\n1 2 1\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '-1'\nassert solution('3') == '3'"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n1\n''') == '3'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3\\n') == '3'\nassert solution('5\\n1 2 3 4 5\\n') == '-1'\n\nassert solution('6\\n1 2 3 4 5 6\\n') == '4'\nassert solution('6\\n1 2 3 4 5 6\\n') == '4'\nassert solution('6\\n1 2 3 4 5 6\\n') == '4'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"3\""
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('3\\n1 2 3') == '3'\nassert solution('5\\n1 2 3 4 5') == '5'"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n') == '3'\nassert solution('3\\n1 2 3') == '3'"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 2 1 1\") == \"2\""
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3\\n92 205 1'\nassert solution('1 1') == '-1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('46 2') == '7'\nassert solution('2018 214') == '92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2') == '7'\nassert solution('2018 214') == '92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2''') == '1 2'\nassert solution('''6 2''') == '3 1 1 1 1'\nassert solution('''1 3''') == '1 0 0 0'\nassert solution('''1 4''') == '2 1 1 0'\nassert solution('''7 2''') == '0 1 0 1 1 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '-1'\nassert solution('0 4') == '7'\nassert solution('9 2') == '92 205 1'\nassert solution('1 4') == '1'\nassert solution('5 3') == '92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''46 2\n    ''') == '7'\nassert solution('''2018 214\n    ''') == '3'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n10 2\n''') == '4 0 0 2 0 1 2 4 4 8 6 2 4 4 0 2 4 1 3 0 2 0 0 2 0 2 2 0 2 0 2 3 0 2 3 3 2 0 0 1 2 1 2 0 0 0 1 2 0 0 2 3 2 1 3 1 2 0 1 3 2 1 1 3 3 2 2 2 1 1 3 3 2 1 3 3 1 2 1 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0 0 2 3 2 1 3 1 2 0 0 1 2 0"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('46 2') == '7\\n0 1 0 0 1 1 1'\nassert solution('2018 214') == '3\\n92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"16 15 7\") == \"3 1 2 1\"\nassert solution(\"15 16 7\") == \"2 1 1 1\"\nassert solution(\"16 17 7\") == \"2 2 2 1\"\nassert solution(\"16 17 7\") == \"0\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '7 0 1 0 1 1 1'"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1 1') == '0.400000000000000'\nassert solution('3 20 20') == '5.000000000000000'\n\n\"\"\"\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 20 20\") == \"5.000000000000000\"\nassert solution(\"4 1 1\") == \"0.400000000000000\"\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 20 20\") == \"5.000000000000000\"\nassert solution(\"4 1 1\") == \"0.400000000000000\"\nassert solution(\"1 1 1\") == \"0.0\"\nassert solution(\"2 5 5\") == \"1.454545454545454\"\n\n\"\"\"\n\nfrom math import ceil\nimport re\nimport sys\n\nimport numpy as np\nfrom decimal import Decimal"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 20 20') == '5.000000000000000'\nassert solution('4 1 1') == '0.400000000000000'"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '5.000000000000000'\nassert solution('4 1 1') == '0.400000000000000'\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '5.000000000000000'\nassert solution('2 2') == '0.400000000000000'"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 20 20\n6 2\n1 3\n2 6\n''') == '5.000000000000000'\n\nassert solution('''\n4 1 1\n2 3\n3 2\n2 3\n3 2\n''') == '0.400000000000000'\n\nassert solution('''\n4 1 1\n2 3\n3 2\n3 3\n2 3\n3 2\n''') == '0.0'\n'''\n\n\"\"\"\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '5.000000000000000'\nassert solution('4') == '0.400000000000000'\nassert solution('3') == '2.00000000000000'\nassert solution('2') == '1.00000000000000'\nassert solution('1') == '0.99999999999999'\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 20 20') == '5.000000000000000'\nassert solution('4 1 1') == '0.400000000000000'\n\"\"\"\n\nn, p, q = list(map(int, stdin.readline().split()))\na = []\nb = []\nfor _ in range(n):\n    a_, b_ = list(map(int, stdin.readline().split()))\n    a.append(a_)\n    b.append(b_)\n\nmax_value = 10**6\nmin_value = 10**6\n\nfor i in range(n):\n    min_value = min(min_value, b[i])\n    max_value = max(max_value, b[i])\n\nmin_value = max(min_value, max_value)\n\nsum_a = 0\nfor i in range(n):\n    sum_a += (b[i] - min_value) * a[i]\n\nres = sum_a / min_value\n\nprint(res)"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 20 20\n6 2\n1 3\n2 6\n''') == '5.000000000000000'\n\nassert solution('''\n3 1 1\n2 3\n3 2\n''') == '0.400000000000000'\n\nassert solution('''\n4 1 1\n2 3\n3 2\n2 3\n3 2\n''') == '0.400000000000000'\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"2 3\n    \"\"\") == \"4\"\nassert solution(\"\"\"8 2\n    \"\"\") == \"5\""
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2, 3]) == 4\nassert solution([8, 2]) == 5\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"4\"\nassert solution(\"2 3\") == \"4\"\nassert solution(\"8 2\") == \"5\""
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"8 2\") == \"5\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 2') == '5'\nassert solution('2 3') == '4'\nassert solution('8 1') == '1'\nassert solution('2 4') == '1'"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'\n\"\"\""
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n') == 'Conan', 'Conan'\nassert solution('2\\n') == 'Agasa', 'Agasa'\nassert solution('3\\n') == 'Conan', 'Conan'\nassert solution('4\\n') == 'Conan', 'Conan'\nassert solution('5\\n') == 'Conan', 'Conan'\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'Conan'\nassert solution('3') == 'Conan'\nassert solution('4') == 'Agasa'\nassert solution('5') == 'Agasa'\nassert solution('6') == 'Conan'\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"Conan\"\nassert solution(input()) == \"Agasa\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"Conan\"\nassert solution(\n\"\"\"\n2\n1 1\n\"\"\"\n) == \"Agasa\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n4 5 7\n''') == \"Conan\"\n\nassert solution('''2\n1 1\n''') == \"Agasa\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4 5 7\\n\") == \"Conan\"\nassert solution(\"2\\n1 1\\n\") == \"Agasa\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n4 5 7\n''') == 'Conan'\nassert solution('''2\n1 1\n''') == 'Agasa'\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 'Agasa'\nassert solution('1') == 'Conan'"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3\n4 5 7\n\"\"\") == \"Conan\"\n\nassert solution(\n\"\"\"\n2\n1 1\n\"\"\") == \"Agasa\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'Agasa'\nassert solution('3') == 'Conan'\nassert solution('4') == 'Conan'\nassert solution('5') == 'Agasa'\nassert solution('6') == 'Agasa'\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 1\n\"\"\") == \"\"\"1 1\n##\"\"\"\n\nassert solution(\"\"\"\n2 2\n\"\"\") == \"\"\"2 2\n##.#\n###\"\"\"\n\nassert solution(\"\"\"\n1 3\n\"\"\") == \"\"\"1 3\n###\"\"\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"1 1\"\nassert solution(\"2 2\") == \"2 2\"\nassert solution(\"3 3\") == \"3 3\"\nassert solution(\"4 4\") == \"3 3\"\n\"\"\"\n\nfrom collections import defaultdict\nimport re"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1 1\"\nassert solution(\"4 4\") == \"4 4\"\n\n\"\"\"\nimport math\n\nimport unittest\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '3 3'\nassert solution('1 1') == '2 1'\nassert solution('2 2') == '2 2'\n'''"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '3 3'\nassert solution('1') == '1'"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '1\\n2\\n#.\\n#.#'\nassert solution('3 4') == '3\\n4\\n#.#\\n###'\n\n'''\nfrom typing import List\n\nA, B = map(int, input().split())\n\nh = 101\nw = 101\n\ngrid = [[0] * w for _ in range(h)]\n\nfor i in range(h):\n    for j in range(w):\n        grid[i][j] = j if j < A else A\n        if j > B:\n            grid[i][j] = j - A\n\nfor row in grid:\n    print(''.join(row))\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n1 2') == '1'\nassert solution('1 3\\n1 2\\n1 3') == '1'\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '###', \"First\"\nassert solution('1 3') == '..#', \"Second\"\nassert solution('2 1') == '#.#', \"Third\"\n\"\"\""
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 3\\n\"\n    \"##.\\n\"\n    \"###\"\n) == \"3 3\"\nassert solution(\n    \"2 2\\n\"\n    \"##.\\n\"\n    \"#..\"\n) == \"2 2\"\nassert solution(\n    \"2 0\\n\"\n    \"#..\"\n) == \"2 0\"\nassert solution(\n    \"0 0\\n\"\n    \"#..\"\n) == \"0 0\"\nassert solution(\n    \"4 2\\n\"\n    \"##.\\n\"\n    \"#..\"\n) == \"4 2\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 4\n+ 1\n+ 2\n- 2\n- 1\n''') == '4 1 3 5'\nassert solution('''3 2\n+ 1\n- 2\n''') == '1 3'\nassert solution('''2 4\n+ 1\n- 2\n+ 2\n- 1\n''') == '0'\nassert solution('''5 6\n+ 1\n- 1\n- 3\n+ 3\n+ 4\n- 4\n''') == '3 2 5'\nassert solution('''3 2\n+ 1\n- 2\n+ 2\n- 1\n''') == '1 3'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"4\"\nassert solution(\"\") == \"0\"\nassert solution(\"2 3 5\") == \"2 3 5\"\nassert solution(\"4 6 7\") == \"1 3 5\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '5 4\\n'\n    '+ 1\\n'\n    '+ 2\\n'\n    '- 2\\n'\n    '- 1\\n'\n) == '4\\n1 3 4 5\\n'\n\nassert solution(\n    '3 2\\n'\n    '+ 1\\n'\n    '+ 2\\n'\n) == '0\\n'\n\nassert solution(\n    '5 6\\n'\n    '+ 1\\n'\n    '- 2\\n'\n    '+ 2\\n'\n    '- 1\\n'\n    '+ 2\\n'\n    '- 2\\n'\n) == '3\\n2 3 5\\n'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '2'"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 4\n+ 1\n+ 2\n- 2\n- 1\n\n''') == '4\\n1 3 4 5'\n\nassert solution('''2 4\n+ 1\n- 2\n+ 2\n- 1\n\n''') == '1'\n\nassert solution('''5 6\n+ 1\n- 1\n- 3\n+ 3\n+ 4\n- 4\n\n''') == '3'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4') == '4'\nassert solution('3 2') == '3'\nassert solution('2 4') == '0'\nassert solution('5 6') == '3'\nassert solution('2 5') == '2 3 5'"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"4\"\nassert solution(input) == \"3\"\nassert solution(input_raw) == \"0\"\nassert solution(input_raw2) == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4\\n+ 1\\n- 2\\n- 1\\n') == '4\\n1 3 4 5'\nassert solution('3 2\\n+ 1\\n- 2\\n+ 3\\n+ 4\\n') == '1\\n3'\nassert solution('2 4\\n+ 1\\n- 2\\n+ 3\\n+ 4\\n') == '0'\nassert solution('5 6\\n+ 1\\n- 1\\n- 3\\n+ 3\\n+ 4\\n- 4\\n') == '3'"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4') == '4'\nassert solution('3 2') == '3'\nassert solution('2 4') == '0'\nassert solution('10 3') == '10'\nassert solution('2 0') == '0'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2\\n+ 1\\n- 2\\n') == '1 3'\nassert solution('2 4\\n+ 1\\n- 2\\n+ 3\\n- 4\\n') == '3'\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 3\n1 2 3\n1 2 3\n9\n''') == '4'\nassert solution('''5 1\n5 4 2 4 5\n2\n5\n''') == '1'\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3\n1 2 3\n1 2 3\n9\n''') == '4'\n\nassert solution('''5 1\n5 4 2 4 5\n2\n5\n''') == '1'"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '4'\nassert solution('5 1') == '1'\nassert solution('5 4 2 4 5') == '1'\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1\\n5 4 2 4 5\\n2') == '4'\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3\n1 2 3\n1 2 3\n9''') == '4'\nassert solution('''5 1\n5 4 2 4 5\n2\n5\n\n''') == '1'\nassert solution('''5 1\n5 4 2 4 5\n2\n5\n\n''') == '0'"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n5 4 2 4 5\") == \"1\"\nassert solution(\"3 3\\n1 2 3\\n1 2 3\\n9\\n\") == \"4\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '4'\nassert solution('5 1') == '1'\nassert solution('5 1') == '1'"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '4'\nassert solution('5 1') == '1'\nassert solution('5 1') == '0'\n\n\n\n'''\n\n\nfrom itertools import combinations\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n1 2 3\n1 2 3\n9\n''') == '4'\nassert solution('''\n5 1\n5 4 2 4 5\n2\n5\n''') == '1'\nassert solution('''\n10 1\n10 4 2 4 5\n2\n5\n''') == '0'\n\n\n'''\n\nfrom collections import deque"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"5 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == 'NO'\nassert solution('2 3') == 'NO'\nassert solution('3 2') == 'NO'\nassert solution('3 4') == 'NO'\nassert solution('4 4') == 'NO'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == 'NO'\nassert solution('4 4') == 'NO'\nassert solution('6 7') == 'NO'\nassert solution('1 2') == 'NO'\nassert solution('3 3') == 'NO'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 3\ncba\n\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"4 4\nabcd\n\n\"\"\") == \"abda\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\ncba\") == \"cbd\"\nassert solution(\"3 4\\nabcd\") == \"abda\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"3 4\") == \"abda\""
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"3 4\") == \"abda\"\nassert solution(\"4 4\") == \"abdabd\""
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"4 4\") == \"abda\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"NO\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 3\ncba\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"4 4\nabcd\n\"\"\") == \"abda\"\n\nassert solution(\"\"\"5 5\nsdsdda\n\"\"\") == \"abda\"\n\nassert solution(\"\"\"5 6\nabcdf\n\"\"\") == \"abddf\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"3 4\") == \"abda\"\nassert solution(\"4 4\") == \"abcd\"\n\n\"\"\""
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"quailty\"\nassert solution(\"6 1\") == \"once again\"\nassert solution(\"6 5\") == \"tokitsukaze\"\nassert solution(\"4 1\") == \"once again\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n0101\\n\") == \"quailty\"\nassert solution(\"6 1\\n010101\\n\") == \"tokitsukaze\"\nassert solution(\"4 1\\n0011\\n\") == \"once again\""
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n0101\") == \"tokitsukaze\"\nassert solution(\"6 1\\n010101\") == \"quailty\"\nassert solution(\"6 5\\n010101\") == \"once again\"\n\"\"\"\nfrom math import factorial\nfrom sys import stdin\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2\n11\n0111''') == 'tokitsukaze'\nassert solution('''6 5\n11101\n01011\n00001\n11101\n01111\n01011''') == 'tokitsukaze'\nassert solution('''6 1\n110101\n010101\n00001\n110101\n010101\n010101''') == 'quailty'\nassert solution('''4 1\n0011\n0101\n0000\n0101\n''') == 'once again'\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2\\n0101') == 'quailty'\nassert solution('6 1\\n010101') == 'once again'\nassert solution('4 1\\n0011') == 'once again'\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 1\") == \"quailty\"\nassert solution(\"4 1\") == \"tokitsukaze\"\nassert solution(\"6 5\") == \"once again\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''4 2\n0101\n\nOutput\nquailty\n\nInput\n6 1\n010101\n\nOutput\nonce again\n\nInput\n6 5\n010101\n\nOutput\ntokitsukaze\n\nInput\n4 1\n0011\n\nOutput\nonce again''') == \"once again\"\n\nassert solution(\n'''4 1\n0011\n\nOutput\nonce again\n\nInput\n6 5\n010101\n\nOutput\ntokitsukaze''') == \"once again\""
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == 'quailty'\nassert solution(input()) == 'tokitsukaze'\nassert solution(input()) == 'once again'\n\n\"\"\""
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"tokitsukaze\"\nassert solution(\"\") == \"once again\"\nassert solution(\"1\") == \"once again\"\nassert solution(\"0101\") == \"quailty\"\n\n\"\"\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2') == 'quailty'\nassert solution('6 1') == 'tokitsukaze'\nassert solution('6 5') == 'once again'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4 50') == '50'\nassert solution('1 2 10') == '7'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4 50\\n20 100\\n60 10 40 80\\n') == '50'\nassert solution('1 2 10\\n11\\n15 7\\n') == '7'\nassert solution('3 2 10\\n1 3 5\\n1 4 5\\n1 5 6\\n3 4 6\\n') == '6'\nassert solution('6 2 10\\n1 3 5\\n1 4 5\\n1 5 6\\n1 6 7\\n3 4 7\\n') == '9'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2 10\n11\n15 7\n''') == '7'\nassert solution('''\n1 2 50\n40 100\n50 10 40 80\n''') == '50'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 4 50\") == \"50\"\nassert solution(\"1 2 10\") == \"7\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 4 50\n20 100\n60 10 40 80\n''') == '50'\nassert solution('''\n1 2 10\n11\n15 7\n''') == '7'\nassert solution('''\n4 5 60 10\n20 30 25 50\n''') == '0'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4 50\\n20 100\\n60 10 40 80\") == \"50\"\nassert solution(\"1 2 10\\n11\\n15 7\") == \"7\""
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4 50') == '50'\nassert solution('1 2 10') == '7'"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4 50\") == \"50\"\nassert solution(\"1 2 10\") == \"7\"\nassert solution(\"3 2 10\") == \"7\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 10') == '7'\nassert solution('1 2 10') == '7'\nassert solution('1 2 10') == '7'\nassert solution('1 2 10') == '7'"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_str) == \"50\"\n\nassert solution(input_str_2) == \"7\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '1 6'\nassert solution('3 2') == '1 3'\nassert solution('1 10') == '5 5'\nassert solution('1 100') == '5 5'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3\n1 1\n''') == '1 6'\nassert solution('''3 2\n0 0\n''') == '1 3'\nassert solution('''1 10\n5 3\n''') == '5 5'\nprint('ok')\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1 6\"\nassert solution(\"3 2\") == \"1 3\"\nassert solution(\"1 10\") == \"5 5\"\nprint(solution(input()))"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1 6'\nassert solution('3 2') == '1 3'\nassert solution('1 10') == '5 5'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"1 6\"\nassert solution(\"3 2\") == \"1 3\"\nassert solution(\"1 10\") == \"5 5\""
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 1') == '1 6'\nassert solution('3 2\\n0 0') == '1 3'\nassert solution('1 10\\n5 3') == '5 5'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\n1 1\n''') == '1 6'\n\nassert solution('''\n3 2\n0 0\n''') == '1 3'\n\nassert solution('''\n1 10\n5 3\n''') == '5 5'\n\nsolution('''\n2 2\n4 3\n''')\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"1 6\"\nassert solution(\"3 2\") == \"1 3\"\nassert solution(\"1 10\") == \"5 5\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_data) == '1 6'"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '1 6'\nassert solution('3 2') == '1 3'\nassert solution('1 10') == '5 5'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\n\n>>>\n'''\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"2\""
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5\n-2 5 -1\"\"\") == \"2 2 3\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4\n-2 4\n3 4\n-2 5\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"15\") == \"10\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('2 3') == '2 3'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n-2 5 -1\") == \"2 3\"\nassert solution(\"3\\n0 0 0\") == \"3 3\"\nassert solution(\"3\\n0 1 3\") == \"2 2 2\"\nassert solution(\"3\\n4 5 8\") == \"1 2 4\"\nassert solution(\"4\\n-2 5 -1\") == \"2 3\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n-2 5 -1\n''') == '2 2 3'"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n-2 5 -1''') == '2 3'\nprint(solution('''3\n-2 5 -1'''))\n'''\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '3'\nassert solution('1') == '1'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '3'\nassert solution('1') == '1'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n0 3\n1 5''') == '3'\nassert solution('''1\n0 4''') == '1'\n\n'''"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n1 3\n2 5\n\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1\n0 4\n\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n1 2\n2 3\n3 4\n\n\"\"\") == \"2\""
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n0 3\\n1 5\\n\") == \"3\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 3\n1 5\n\n''') == '3'\nassert solution('''\n2 1\n0 5\n\n''') == '1'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n0 3\n1 5\n''') == '3'\nassert solution('''\n1 10\n2 2\n''') == '1'\n''')\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n0 3') == '3'\nassert solution('2\\n1 10') == '1'\nassert solution('2\\n1 10') == '1'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '4'\nassert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n0 3\\n1 5\\n\") == \"3\"\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n6 18\\n5 6 1 10 12 2') == '16\\n0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18'\nassert solution('3\\n15 25 25 50') == '3\\n0 25 50'\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 50\\n') == '0 25 50'\nassert solution('6 18\\n') == '16 0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 \n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6 18\n5 6 1 10 12 2\n''') == '16 0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18'\nassert solution('''3 50\n25 25 50\n''') == '3 0 25 50'\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 10 5 10 7') == '13 14 15 16 17 18'\nassert solution('2 10 5 10 7') == '-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1'\nassert solution('100 30 50 90 90') == '91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 100\n\"\"\"\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '3\\n0 1 2 3'\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 3\n5 6 1\n\"\"\") == \"16 0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 \nassert solution(\"\"\"\n4 5\n10 15 25 20 30\n\"\"\") == \"3 10 20 30\n\"\"\")"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 18\\n5 6 1 10 12 2\\n\") == \"16 0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18\"\nassert solution(\"3 50\\n25 25 50\\n\") == \"3 0 25 50\"\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '16'"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 18\n5 6 1 10 12 2\n''') == '16'\nassert solution('''\n3 50\n25 25 50\n''') == '3'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n8\n''') == '3'\nassert solution('''\n2\n''') == '2'"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n6\n\"\"\"\n) == \"3\"\nassert solution(\n\"\"\"\n2\n\"\"\"\n) == \"2\"\n\"\"\"\n    # given $n$ coins, each of the same value of $1$\n    # distribute them into packets such that any amount $x$ ($1 \\leq x \\leq n$) can be formed using some (possibly one or all) number of these packets.\n    # any packet may only be used entirely or not used at all. no packet may be used more than once in the formation of the single $x$, however it may be reused for the formation of other $x$'s.\n    #\n    # find the minimum number of packets in such a distribution.\n    #\n    # for the first test, we have $n=6$ coins and we can form any amount $x$ ($1\\leq x\\leq 6$).\n    #\n    # for the second test, we have $n=2$ coins and we can form any amount $x$ ($1\\leq x\\leq 2$).\n    \"\"\"\n\n\n\"\"\"\n--- Expected Output ---\n\nOutput\n3\nInput\n2\n\nOutput\n2\nInput\n6\n\nOutput\n3\n\"\"\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\"\nassert solution(stdin='''\n2\n''') == \"2\"\nassert solution(stdin='''\n10\n''') == \"3\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"3\"\nassert solution(sys.stdin.read()) == \"2\"\nassert solution(sys.stdin.read()) == \"3\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n\"\"\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '1'\nassert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\nassert solution('5') == '4'\nassert solution('6') == '3'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(open('input.txt').read()) == '2'\nassert solution(open('input-test.txt').read()) == '2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n\"\"\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n3 1\\n2 2\\n3 3') == '21'\nassert solution('2\\n10 1\\n20 2\\n30 3') == '180'\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '3\\n10 1\\n20 2\\n30 3') == '180'\nassert solution(\n    '1\\n5 10') == '50'\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '180'\nassert solution('3') == '21'\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"180\""
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"180\"\nassert solution(\"3\") == \"180\"\nassert solution(\"5 10\") == \"50\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '180'\nassert solution('2') == '21'"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n10 1\n20 2\n30 3\n\"\"\") == \"180\"\nassert solution(\"\"\"\n3\n3 1\n2 2\n4 3\n\"\"\") == \"21\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '180'\nassert solution('1') == '50'\nassert solution('2') == '21'\n\nstdin = open('../input.txt')\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n    4\n    1 1\n    1 1\n    1 1\n    \n    \"\"\") == \"180\"\n\nassert solution(\"\"\"\n    2\n    1 1\n    1 1\n    \n    \"\"\") == \"21\"\n\nassert solution(\"\"\"\n    1\n    1 1\n    1 1\n    \n    \"\"\") == \"50\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2 2\\n3 3\\n4 4\\n') == '180'\nassert solution('1\\n5 2\\n3 4\\n6 6\\n') == '50'\nassert solution('1\\n2 2\\n3 4\\n4 4\\n') == '200'\nassert solution('1\\n1 1\\n1 1\\n') == '180'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n0 0 10\n\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n0 1 2 3 4\n\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4\n0 0 0 0\n\n\"\"\") == \"4\"\nassert solution(\"\"\"\n9\n0 1 2 3 4 5 6 7 8\n\n\"\"\") == \"3\""
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n0 0 10\n''') == '2'\nassert solution('''\n4\n0 1 2 3\n''') == '4'\nassert solution('''\n9\n0 1 0 2 0 1 1 2 10\n''') == '3'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n0 0 10') == '2'\nassert solution('5\\n0 1 2 3 4') == '1'\nassert solution('4\\n0 0 0 0') == '4'\nassert solution('9\\n0 1 0 2 0 1 1 2 10') == '3'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '2'\nassert solution('9') == '3'"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n0 0 10\") == \"2\"\nassert solution(\"2\\n0 1 2 3 4\") == \"1\"\nassert solution(\"4\\n0 0 0 0\") == \"4\""
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\nassert solution('9') == '3'\nassert solution('4') == '4'\nassert solution('0 0 10') == '2'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"9\") == \"3\""
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3\\n0 0 10\\n\"\n) == \"2\"\nassert solution(\n    \"5\\n0 1 2 3 4\\n\"\n) == \"1\"\nassert solution(\n    \"4\\n0 0 0 0\\n\"\n) == \"4\""
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1'\nassert solution('9') == '3'\nassert solution('2') == '1'\nprint('all test cases passed')"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n0 0 10\n''') == '2'\nassert solution('''\n4\n0 1 2 3 4\n''') == '1'\nassert solution('''\n9\n0 1 2 3 4 5 6 7 8\n''') == '3'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n0 0\n0 1\n1 0\n1 1\n\"\"\") == \"5\""
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '5'"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n10\n0 0\n0 1\n1 0\n1 1\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '5'\n\n\"\"\"\n\nimport sys\nfrom math import prod\n\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([4, 0, 0, 1, 1, 1, 1, 0, 0]) == '5'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\nassert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\\n2 0\\n2 1\\n2 1\\n2 1\") == \"8\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '5'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\nassert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '5'\nassert solution('5') == '10'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"4\"\n\"\"\"\nimport sys\nimport os\nsys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')\nfrom common import *"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"4\"\n\"\"\"\n\nn = int(stdin.readline())\nl = stdin.readline().split()\nw = int(l[0])\nb = int(l[1])\n\narr = []\nfor i in range(w, n):\n    arr.append(i)\nfor i in range(b, n):\n    arr.append(i)\n\narr.sort()\n\nfor i in range(n):\n    print(arr[i], end=' ')"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"2\"\nassert solution(\"20\") == \"21\"\nassert solution(\"32\") == \"21\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n') == '4'\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"4\""
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n\n\"\"\"\nimport sys\n\nn = int(input())\nwhite = {}\nblack = {}\n\nfor i in range(n):\n    c, a = input().split()\n    if a in white:\n        black[a] = min(white[a], c)\n        white[a] = max(white[a], c)\n    else:\n        black[a] = c\n        white[a] = c\n\nprint(len(white) + len(black) - 1)\nfor i in range(1, n + 1):\n    print(\"{} {}\".format(white[str(i)], black[str(i)]))"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '4'\nassert solution('4') == '5'\nassert solution('5') == '6'\nassert solution('6') == '7'\nassert solution('7') == '8'\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2\n''') == '4'\nassert solution('''\n2\nB 1\nW 2\n''') == '1'\nassert solution('''\n3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2\n''') == '3'\nassert solution('''\n1\nW 1\n''') == '0'\nassert solution('''\n3\nB 1\nB 2\nB 3\n''') == '1'\n'''\nTLE\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n6\n3\n''') == '4'\nassert solution('''\n5\n3\n5\n''') == '4'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n6\\n3') == '4'\nassert solution('5\\n3\\n5') == '4'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n6\n3\n\n''') == '4'\nassert solution('''\n5\n3\n5\n\n''') == '4'\n\n'''\nInput\n5\n4\n2\n\nOutput\n4\n'''\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n6\n3''') == '4'\n\nassert solution('''5\n3\n5''') == '4'\n\nprint(solution('''5\n3\n5'''))\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n6\\n3') == '4'\nassert solution('5\\n3\\n5') == '4'\nassert solution('1\\n0') == '0'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n6\\n3\") == \"4\"\nassert solution(\"5\\n3\\n5\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"4\", \"2\"\nassert solution(\"3\") == \"4\", \"3\"\nassert solution(\"5\") == \"4\", \"5\""
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n6\n3''') == '4', solution('''5\n6\n3''')\nassert solution('''5\n3\n5''') == '4', solution('''5\n3\n5''')\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n6\\n3\\n\") == \"4\"\nassert solution(\"5\\n3\\n5\\n\") == \"4\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([5, 6, 3]) == \"4\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == 2\n\n\"\"\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('8') == '32'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n4 2\n''') == '2'\nassert solution('''\n8\n1 2 4 8 16 32 64 576\n''') == '32'\n'''"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n6 7 2 3 9 4 1 5 8\n''') == \"32\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 2 4\n''') == '2'\nassert solution('''\n8\n1 2 4 8 16 32 64 576\n''') == '32'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"8 1 2 4 8 16 32 64 576\") == \"32\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '4'\nassert solution('8') == '32'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('4') == '4'\nassert solution('8') == '32'\n\n\n-------Sample test cases-------\n\nTest Case 1:\nInput\n5\n5 8 2 6 4\n\nOutput\n5\n\nTest Case 2:\nInput\n10\n4 1 0 3 1 1 0 1 1\n\nOutput\n1\n\nTest Case 3:\nInput\n6\n4 2 0 0 3 1\n\nOutput\n4\n'''"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"8\") == \"32\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"8\") == 32\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3\\n100 300 450 500') == '2'\nassert solution('1000000 1\\n100 25') == '3'\nassert solution('50 2\\n100 25') == '3'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 4\n100 300 450 500\n''') == '2'\nassert solution('''\n50 2\n100 25\n''') == '3'\nprint('OK')\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''400 4\n100 300 450 500\n''') == '2'\nassert solution('''50 2\n100 25\n''') == '3'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '2'\nassert solution('50 2') == '3'\nassert solution('100 25') == '3'\nassert solution('400 4') == '2'"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"1\"\nassert solution(\"100 2\\n50 2\\n\") == \"2\"\nassert solution(\"200 4\\n50 2\\n25 2\\n\") == \"3\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"400 4\") == \"2\"\nassert solution(\"50 2\") == \"3\""
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"400 4\\n100 300 450 500\") == \"2\"\nassert solution(\"50 2\\n100 25\") == \"3\""
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1'\nassert solution('4 3') == '2'\nassert solution('4 2') == '-1'\n\n\"\"\"\nimport math\n\nn, k = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nresult = float('inf')\n\nfor i in range(k):\n    for j in range(i, k):\n        temp = math.floor(a[i] / 1000) + math.floor(a[j] / 1000)\n        if temp <= n:\n            result = min(result, math.ceil(a[i] / 1000) + math.ceil(a[j] / 1000))"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"50 2\") == \"3\"\nassert solution(\"400 4\") == \"2\"\nassert solution(\"50 2\") == \"3\"\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"4 2\") == \"10\"\nassert solution(\"3 4\") == \"14\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '6'\nassert solution('5 4') == '12'\nassert solution('10 9') == '40'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2') == '6'\nassert solution('1 2') == '1'\nassert solution('5 2') == '5'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '4'\nassert solution('3 3') == '4'\nassert solution('4 4') == '8'\nassert solution('5 5') == '12'\nassert solution('4 5') == '10'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"10 4\") == \"723\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '6'\nassert solution('4 2') == '6'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"2 4\") == \"10\"\nassert solution(\"2 3\") == \"3\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2') == '6'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 2\n''') == '6'\n\"\"\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == \"499122178\"\nassert solution('4') == \"499122178\"\nassert solution('5') == \"499122178\"\nassert solution('6') == \"499122178\"\nassert solution('7') == \"499122178\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '499122178'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3\n3\n''') == '499122178'\nassert solution('''2\n1\n2\n''') == '499122178'\nassert solution('''2\n1\n1\n''') == '499122178'\nassert solution('''1\n1\n2\n''') == '499122178'\nassert solution('''1\n1\n2\n1\n''') == '499122178'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '499122178'\nassert solution('2') == '499122178'\nassert solution('3') == '499122178'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"499122178\"\nassert solution(\"2\") == \"499122178\"\n\n-------test_solution-------\nimport pytest\n\n@pytest.mark.parametrize(\n    \"s, expected\",\n    [\n        (\"1\", \"499122178\"),\n        (\"2\", \"499122178\"),\n        (\"3\", \"499122178\"),\n        (\"4\", \"499122178\"),\n        (\"5\", \"499122178\"),\n        (\"6\", \"499122178\"),\n        (\"7\", \"499122178\"),\n        (\"8\", \"499122178\"),\n        (\"9\", \"499122178\"),\n        (\"10\", \"499122178\"),\n    ]\n)\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n\n''') == '499122178'\nassert solution('''5\n\n''') == '1243294210'\nassert solution('''10\n\n''') == '12742473247'\nassert solution('''16\n\n''') == '47606534377'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '499122178'\nassert solution('2') == '499122178'\nassert solution('1') == '499122178'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"499122178\"\nassert solution(\"5\") == \"499122178\"\nassert solution(\"7\") == \"499122178\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n''') == '499122178'\nassert solution('''5\n''') == '499122178'\nassert solution('''5\n''') == '499122178'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '499122178'\nassert solution('5') == '499122178'\nassert solution('1000') == '5999998245'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"6669\"\nassert solution(\"10\") == \"-1\"\nassert solution(\"6\") == \"6\"\nassert solution(\"2\") == \"6\"\nassert solution(\"10\") == \"-1\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"6669\"\nassert solution(input) == \"6\"\n\"\"\"\n\nimport sys\nimport unittest\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'\nassert solution('0') == '-1'"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10') == '6669'\nassert solution('2') == '6'\nassert solution('3') == '-1'"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"6669\"\nassert solution(\"10\") == \"-1\"\nassert solution(\"100\") == \"15001\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"6669\"\nassert solution(\"10\") == \"-1\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '5'\nassert solution('10') == '-1'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n2\n''') == '6'\nassert solution('''3\n10\n''') == '6669'\nprint(solution('''5\n10'''))\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 6\nassert solution(\"3\") == 6669\n\nassert solution(\"1\") == -1"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '1 4 3 2 0'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == \"1 4 3 2 0\"\nassert solution('2') == \"-1\"\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"1 4 3 2 0\"\nassert solution(\"2\") == \"-1\"\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '1 4 3 2 0'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '-1'"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1 4 3 2 0'\nassert solution('2') == '-1'"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3') == '-1'\nassert solution('5\\n1 4 3 2 0') == '1 4 3 2 0'\nassert solution('2\\n-1 2 4 3') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1 4 3 2 0'\nassert solution('2') == '-1'"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == '1 4 3 2 0'\nassert solution(\"2\") == '-1'\n\n\"\"\"\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nres = []"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == 'Yes'\nassert solution('6\\n1 2\\n1 3\\n2 4\\n1 2 4 3') == 'No'\nassert solution('8\\n1 2\\n1 3\\n2 4\\n1 2 4 3\\n3 5\\n4 6\\n5 7\\n6 8') == 'No'"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2\\n1 3\\n2 4\\n1 2 3 4\\n\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\\n\") == \"No\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3\\n\") == \"Yes\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == \"No\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == 'Yes'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 4 3') == 'No'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 4 3') == 'Yes'\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n2 4\\n1 2 3 4\\n\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\\n\") == \"No\"\nassert solution(\"2\\n3\\n1 2\\n2 3\\n1 2 3 4\\n1 3 4\\n\") == \"Yes\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n1 5\\n3 6\") == \"No\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2\\n1 3\\n2 4') == 'Yes\\n'\nassert solution('6\\n1 2\\n1 3\\n2 4\\n5 6\\n5 4\\n3 6') == 'No\\n'\nassert solution('5\\n1 2\\n1 3\\n2 4\\n3 4') == 'Yes\\n'\nassert solution('5\\n1 2\\n1 3\\n2 4\\n3 4') == 'Yes\\n'\nassert solution('5\\n1 2\\n1 3\\n2 4\\n3 4') == 'Yes\\n'\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\n    \"3\\n1 2\\n1 3\\n2 4\\n3 4\") == \"No\"\nassert solution(\n    \"7\\n1 2\\n1 3\\n1 4\\n2 4\\n2 5\\n3 6\\n4 6\\n4 7\\n5 6\\n5 7\") == \"No\""
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n1 2\n1 3\n2 4\n1 2 3 4''') == 'Yes'\nassert solution('''4\n1 2\n1 3\n2 4\n1 2 4 3''') == 'No'\nassert solution('''3\n1 2\n1 3\n2 4''') == 'No'\nassert solution('''3\n1 2\n1 3\n2 4\n1 2 3 4''') == 'Yes'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10\n2 10 1 4 9 3 5 8 6\n3 1 5 6 2 4 7 8 9\n4 1 6 7 2 5 8 9 10\n5 1 7 8 9 2 6 4 10\n6 1 7 8 9 10 2 5 4\n7 1 8 9 10 2 5 6 4\n8 1 10 2 5 6 7 9 4\n9 1 10 5 6 7 8 2 4\n10 1 4 9 5 8 2 6 7''') == 'Yes'\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == 'Yes'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 4 3') == 'No'\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"24500\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n10 3 5\n0 1 0 5000\n2 1 0 4500\n2 1 0 3000\n8 0 1 7000\n\n\"\"\") == \"24500\"\nassert solution(\"\"\"\n10 3 5\n1 2 0 5000\n3 2 0 5500\n2 2 0 6000\n15 0 2 9000\n9 0 1 7000\n8 0 2 6500\n\n\"\"\") == \"24500\"\nassert solution(\"\"\"\n5 6 3\n0 1 0 5500\n3 2 0 6500\n1 1 0 5500\n2 2 0 5000\n3 1 0 5500\n4 2 0 5000\n\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n10 2 5\n1 1 0 5000\n3 2 0 5500\n2 2 0 6000\n8 0 1 7000\n\n\"\"\") == \"24500\""
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 6 5') == '24500'\nassert solution('2 4 5') == '-1'\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 6 5\n1 1 0 5000\n3 2 0 5500\n2 2 0 6000\n15 0 2 9000\n9 0 1 7000\n8 0 2 6500\n''') == '24500'\nassert solution('''\n2 4 5\n1 2 0 5000\n2 1 0 4500\n2 1 0 3000\n8 0 1 6000\n''') == '-1'"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 6 5') == '24500'\nassert solution('2 4 5') == '-1'"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 5 5') == '24500'\nassert solution('2 4 5') == '-1'"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 6 5') == '24500'\nassert solution('2 4 5') == '-1'\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 6 5') == '24500'\nassert solution('2 4 5') == '-1'"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4 5\") == \"24500\", solution(\"2 4 5\")\nassert solution(\"2 6 5\") == \"-1\", solution(\"2 6 5\")\nassert solution(\"2 4 5\") == \"24500\", solution(\"2 4 5\")\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 6 5\") == \"24500\"\nassert solution(\"2 4 5\") == \"-1\""
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 45\\n') == '0.828427125'\nassert solution('6 4 30\\n') == '19.668384925'"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '1 1 45\\n'\n    '6 4 30'\n    ) == '0.828427125'"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1 45\") == '0.828427125'\nassert solution(\"6 4 30\") == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'\nassert solution('20 10 0') == '14.1444970155'\nassert solution('11 10 0') == '10.2222222222'\nassert solution('1 10 0') == '10.1111111111'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1 45\n''') == '0.828427125'\nassert solution('''\n6 4 30\n''') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 45\\n') == '0.828427125'\nassert solution('6 4 30\\n') == '19.668384925'\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\\n\") == \"3000\"\nassert solution(\"2 4\\nDEF 0\\nATK 0\\n0\\n0\\n1\\n1\\n\") == \"1\"\nassert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\\n\") == \"992\""
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n''') == '3000'\nassert solution('''3 4\nATK 10\nATK 100\nATK 1000\n1\n11\n101\n1001\n\n''') == '992'\nassert solution('''2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n\n''') == '1'"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"3000\"\nassert solution('''\n3 4\nDEF 0\nATK 0\n0\n0\n1\n1\n''') == \"1\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\\n\") == \"3000\"\nassert solution(\"3 4\\nDEF 0\\nATK 0\\n0\\n0\\n1\\n1\\n\") == \"1\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '3000'\nassert solution() == '992'\nassert solution() == '1'\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\") == \"3000\"\nassert solution(\"3 4\\nDEF 0\\nATK 0\\n0\\n1\") == \"1\""
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\\n\") == \"3000\"\nassert solution(\"3 4\\nDEF 0\\nATK 0\\n0\\n1\\n1\\n\") == \"1\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n''') == '3000'\nassert solution('''2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n\n''') == '1'"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"3000\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"3 4\") == \"992\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n\n3 4\nDEF 0\nATK 0\n0\n0\n1\n1\n\n2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n''') == '3000'\nassert solution('''3 4\nDEF 0\nATK 0\n0\n0\n1\n1\n\n2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n''') == '1'"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"6\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4') == '6'\nassert solution('2 2') == '2'\nassert solution('5 4') == '62'\nassert solution('2 4') == '6'\nprint(solution(input()))"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 4\n4 3 1 2 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\n''') == '6'\nassert solution('''\n2 2\n1 2\n0 0\n2 1 -100 -100\n''') == '2'\nassert solution('''\n5 4\n4 3 2 1 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\n''') == '62'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == '6'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 4\n4 3 1 2 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\n''') == '6'\nassert solution('''5 4\n4 3 2 1 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\n''') == '62'\nprint(solution('''5 2\n1 2\n0 0\n2 1 -100 -100\n'''))"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n') == '6'\nassert solution('2 2\\n1 2\\n0 0\\n2 1 -100 -100\\n') == '2'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4') == '6'\nassert solution('2 2') == '2'\nassert solution('5 4') == '62'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"5 4\") == \"6\""
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4\\n4 3 1 2 1') == '6'\nassert solution('2 2\\n1 2\\n0 0\\n2 1 -100 -100') == '2'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 4\n4 3 1 2 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\n''') == '6'\nassert solution('''2 2\n1 2\n0 0\n2 1 -100 -100\n''') == '2'\nassert solution('''5 4\n4 3 2 1 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\n''') == '62'\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('aaba') == 'YES'\nassert solution('abaa') == 'YES'\nassert solution('aabb') == 'NO'\nassert solution('bbaa') == 'NO'\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"aaba\") == \"YES\", \"aaba\"\nassert solution(\"abaa\") == \"YES\", \"abaa\"\nassert solution(\"aabb\") == \"NO\", \"aabb\"\nassert solution(\"bbaa\") == \"NO\", \"bbaa\""
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"aaba\") == \"YES\", \"aaba\"\nassert solution(\"abaa\") == \"YES\", \"abaa\"\nassert solution(\"aabb\") == \"NO\", \"aabb\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\nassert solution(\"bbaa\") == \"NO\"\nassert solution(\"aaba\") == \"YES\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''aaba''') == 'YES'\nassert solution('''aabb''') == 'NO'\nassert solution('''aabb''') == 'NO'\n\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\naaba\nabaa\n''') == \"YES\"\nassert solution('''\naabb\nabab\n''') == \"NO\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('aaba') == 'YES'\nassert solution('abaa') == 'YES'\nassert solution('aabb') == 'NO'\nassert solution('bbaa') == 'NO'\n\"\"\""
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''aaba\nabaa''') == 'YES'\nassert solution('''aabb\nabab''') == 'NO'\nassert solution('''aaba\nabab''') == 'YES'\nassert solution('''aaba\naabb''') == 'YES'\nassert solution('''aaba\nabaa''') == 'YES'\n\n'''\n    pass"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(stdin) == 'NO'\n\n\nassert solution('''\n3\n\n3\n\n2\n\n1\n\n2\n''') == 'YES'\n\nprint('Example passed!')\n\n\nassert solution('''\n5\n\n4\n\n1\n\n2\n\n3\n\n''') == 'NO'\n\nprint('Example failed!')\n\nassert solution('''\n100\n\n100\n\n1\n\n2\n\n3\n\n''') == 'YES'\n\nprint('Example passed!')\n\nassert solution('''\n1000\n\n100\n\n100\n\n2\n\n100\n\n100\n\n''') == 'YES'\n\nprint('Example passed!')\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"YES\", solution(\"2\")\nassert solution(\"3\") == \"YES\", solution(\"3\")\nassert solution(\"4\") == \"NO\", solution(\"4\")\nassert solution(\"5\") == \"NO\", solution(\"5\")\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"YES\"\nassert solution(\"3\\n1 2\") == \"YES\"\nassert solution(\"2\\n2 2\") == \"NO\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'NO'\nassert solution('2') == 'YES'\nassert solution('3') == 'YES'"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n') == 'NO'\n\nassert solution('1\\n') == 'YES'\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'YES'\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == 'NO'\nassert solution('1') == 'YES'"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == 'NO'\nassert solution('2') == 'YES'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2\nab\nac\ncd\n1 2\n''') == 'Yes'\nassert solution('''\n5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n''') == 'Yes'\nassert solution('''\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n''') == 'No'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == 'Yes'\nassert solution(stdin='1 2') == 'a?b?'\nassert solution(stdin='a') == 'a?'\nassert solution(stdin='ab') == 'a?'\nassert solution(stdin='ab?') == 'a?'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"No\"\nassert solution(\"ab\") == \"Yes\"\nassert solution(\"a?ba?b\") == \"Yes\"\nassert solution(\"a?ba?b?c\") == \"No\"\nassert solution(\"a?ba?b?c?d\") == \"Yes\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 3\na\nb\nc\nd\n1 2 3''') == \"Yes\"\n\nassert solution('''5 3\nt\ne\ns\nt\ne''') == \"No\"\n\nassert solution('''4 3\na\nb\nc\ndd\n1 2 3\n\n''') == \"Yes\"\n\nassert solution('''6 3\n.\nsvn\n.\ngit\n....\n...\n.\n1 2 3''') == \"Yes\"\n\nassert solution('''4 4\na\nb\nc\ndd\n1 2 3 4\n\n''') == \"No\""
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == 'No'\nassert solution('5 3') == 'Yes'\nassert solution('6 3') == 'No'\nassert solution('7 3') == 'Yes'\nassert solution('8 3') == 'Yes'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"Yes\"\nassert solution(input.read()) == \"Yes\""
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(samples[0]) == \"Yes\", \"First\"\nassert solution(samples[1]) == \"a?\", \"Second\"\nassert solution(samples[2]) == \"\", \"Third\""
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2\nab\nac\ncd\n1 2\n''') == 'Yes', 'ab'\nassert solution('''\n5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n''') == 'Yes', '?es?'\nassert solution('''\n4 4\na\nb\nc\ndd\n1 2 3 4\n''') == 'No', '.???'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3 2\nab\nac\ncd\n1 2\n\"\"\") == \"Yes\"\nassert solution(\n\"\"\"\n5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n\"\"\") == \"Yes\"\nassert solution(\n\"\"\"\n4 4\na\nb\nc\ndd\n1 2 3 4\n\"\"\") == \"No\"\nassert solution(\n\"\"\"\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n\"\"\") == \"Yes\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('3 4 1 2') == '2'\nassert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '2'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5') == '2'\nassert solution('3\\n3 4 5') == '4'\nassert solution('3\\n3 3 3') == '3'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3') == '2'\nassert solution('5\\n1 2 3 4 5') == '3'\nassert solution('10\\n1 2 3 4 5 6 7 8 9') == '9'"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('1 2 3 4 5 6') == '3'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '2'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"12\") == \"2\"\nassert solution(\"1234\") == \"4\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('6') == '2'\nassert solution('4') == '1'\nassert solution('1') == '1'"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3') == '2'\nassert solution('4\\n1 2 3 4') == '2'\nassert solution('5\\n1 2 3 4 5') == '3'"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"2\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('1') == '1'\nassert solution('1 2 3') == '2'\nassert solution('6') == '5'\nassert solution('6 5 4 3 2 1') == '3'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '3'\nassert solution('6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n') == '4'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\n''') == '2'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\n''') == '2'\nassert solution('''4\n1 2\n2 3\n3 4\n''') == '3'\n'''\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2\\n2 3\\n3 4') == '2'\nassert solution('4\\n1 2\\n2 3\\n3 4') == '1'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5') == '0'\n\"\"\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '1'\n\"\"\"\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '2'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\n''') == '2'\nassert solution('''8\n2 5\n3 6\n3 7\n5 6\n5 7\n6 7\n7 8\n''') == '4'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2\n2 3\n3 4\n4 5\n5 6''') == '2'\n\n'''\n'''\nN = int(input())"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 2 5') == '4'\nassert solution('10 3 10') == '5'"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n10 2 5\n\"\"\") == \"4\"\nassert solution(\"\"\"\n10 3 10\n\"\"\") == \"5\"\n\"\"\""
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 2 5') == '4'\nassert solution('10 3 10') == '5'"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 5') == '4'\nassert solution('10 3 10') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2 5') == '4'\nassert solution('10 3 10') == '5'\nassert solution('11') == '1'"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"7 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\""
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\"\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\"\nassert solution(\"\") == \"\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n7 2 5\n''') == '4'\nassert solution('''\n10 3 10\n''') == '5'\nassert solution('''\n4\n''') == '0'\nprint('all tests passed')\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''7 2 5''') == \"4\"\nassert solution('''10 3 10''') == \"5\"\nprint(solution('''2'''))\nprint(solution('''5'''))"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6\\n1 2\\n1 3\\n2 3\\n2 5\\n3 4\\n4 5\\n') == '2'\n\nassert solution('4 4\\n1 2\\n1 3\\n1 4\\n3 4\\n') == '1'\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 6\") == \"2\"\nassert solution(\"4 4\") == \"1\"\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6') == '2'\nassert solution('4 4') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(inp) == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n''') == '2'\nassert solution('''\n4 4\n1 2\n1 3\n1 4\n3 4\n''') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5''') == '2'\nassert solution('''4 4\n1 2\n1 3\n1 4\n3 4\n\nOutput\n1\nInput\n5 6\n1 2\n1 3\n1 4\n3 4\n\nOutput\n0''') == '0'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n''') == '2'\nassert solution('''4 4\n1 2\n1 3\n1 4\n3 4\n''') == '1'\nassert solution('''5 4\n1 2\n1 3\n1 4\n3 4\n''') == '3'\nassert solution('''5 5\n1 2\n1 3\n1 4\n3 4\n5 4\n''') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 4\n1 2\n1 3\n1 4\n3 4''') == '2'\nassert solution('''5 6\n1 2\n1 3\n1 4\n2 3\n2 5\n3 4\n4 5''') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n''') == '2'\nassert solution('''\n4 4\n1 2\n1 3\n1 4\n3 4\n''') == '1'\nassert solution('''\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n''') == '1'\nassert solution('''\n4 4\n1 2\n1 3\n1 4\n3 4\n''') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6') == '2'\nassert solution('4 4') == '1'"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n75 150 75 50\\n\") == \"Yes\\n\"\nassert solution(\"3\\n100 150 250\\n\") == \"No\\n\"\nassert solution(\"10\\n0 0 5 10\\n\") == \"No\\n\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n50\n50\n50''') == 'Yes'\nassert solution('''4\n75\n150\n75\n50''') == 'No'\nassert solution('''5\n100\n150\n100\n100\n100''') == 'No'\nassert solution('''5\n100\n150\n100\n100\n100''') == 'Yes'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n100 150 250\\n\") == \"Yes\"\nassert solution(\"4\\n75 150 75 50\\n\") == \"No\"\nassert solution(\"4\\n100 150 250\\n\") == \"Yes\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n75 150 75 50\\n\") == \"Yes\"\nassert solution(\"3\\n100 150 250\\n\") == \"No\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n100 150 50 75 150''') == 'Yes'\nassert solution('''5\n100 150 50 75 150''') == 'No'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n75 150 75 50\n''') == 'Yes'\nassert solution('''\n3\n100 150 250\n''') == 'No'"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n75 150 75 50\n\n3\n100 150 250\n\n''') == 'No'\nassert solution('''\n5\n100 150 75 50 125\n\n''') == 'No'\nassert solution('''\n2\n100 150\n\n''') == 'Yes'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n75 150 75 50') == 'Yes'\nassert solution('3\\n100 150 250') == 'No'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n75 150 75 50\n''') == 'Yes'\nassert solution('''3\n100 150 250\n''') == 'No'"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n75 150 75 50\n''') == 'Yes'\nassert solution('''3\n100 150 250\n''') == 'No'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n50 50 50\n\n''') == '150'\n\nassert solution('''\n2\n-1 -100 -1\n\n''') == '100'\n\nassert solution('''\n3\n50 -50 50\n\n''') == '200'\n\nassert solution('''\n4\n100 50 -50 -50\n\n''') == '300'\n\nassert solution('''\n5\n100 50 -50 -50 -50\n\n''') == '400'"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n50 50 50\n''') == '150'\nassert solution('''2\n-1 -100 -1\n''') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '150'\nassert solution('2') == '100'\nassert solution('3') == '180'"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '100'\nassert solution('''5\n2\n1\n4\n3\n-1\n''') == '50'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n50 50 50\n\n''') == '150'\nassert solution('''2\n-1 -100 -1\n\n''') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n50 50 50''') == '150'\nassert solution('''2\n-1 -100 -1''') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n50 50 50\\n') == '150'\nassert solution('2\\n-1 -100 -1\\n') == '100'"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([5, -20, 0, -30, 50]) == 100\nassert solution([-1, -100, -1]) == -100\nassert solution([100, -100, -100]) == 100\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"150\"\nassert solution(\"2\") == \"100\"\nassert solution(\"2\") == \"100\"\nassert solution(\"2\") == \"100\"\nassert solution(\"2\") == \"100\"\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2\\n50 50 50\"\n) == \"150\"\n\nassert solution(\n    \"2\\n-1 -100 -1\"\n) == \"100\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 5\nab a\ncc c\nca a\nee c\nff d\n''') == '4'\nassert solution('''2 8\naf e\ndc d\ncc f\nbc b\nda b\neb a\nbb b\nff c\n''') == '1'\nassert solution('''6 2\nbb a\nba a\n''') == '0'\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == \"4\"\nassert solution(\"2 8\") == \"1\"\nassert solution(\"6 2\") == \"0\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\nab a\\ncc c\") == \"4\"\nassert solution(\"2 1\\naf e\\ndc d\") == \"1\"\nassert solution(\"3 1\\nbb a\") == \"0\"\nassert solution(\"4 1\\nbb a\") == \"1\"\nassert solution(\"5 1\\nbb a\") == \"1\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 5\nab a\ncc c\nca a\nee c\nff d\n\n2 8\naf e\ndc d\ncc f\nbc b\nda b\neb a\nbb b\nff c\n''') == \"4\"\nassert solution('''6 2\nbb a\nba a\n''') == \"0\""
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\nab a\\ncc c') == '4'\nassert solution('3 5\\nab a\\ncc c\\nca a\\nee c\\ndc d\\nff d') == '1'\nassert solution('6 2\\nbb a\\nba a\\n') == '0'\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 5\nab a\ncc c\nca a\nee c\nff d\n\n2 8\naf e\ndc d\ncc f\nbc b\nda b\neb a\nbb b\nff c\n''') == '4'\nassert solution('''6 2\nbb a\nba a\n''') == '0'"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 5\nab a\ncc c\nca a\nee c\nff d\n''') == \"4\"\nassert solution('''6 2\nbb a\nba a\n''') == \"0\"\nassert solution('''6 0\n''') == \"0\""
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\nab a\\ncc c\\ncb c\\nee c\\ndd d\\nab a\\n\") == \"4\"\nassert solution(\"6 2\\nbb a\\nba a\\n\") == \"0\"\nassert solution(\"6 2\\naa b\\nba a\\n\") == \"1\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '3 5'\n    ) == '4'\n\nassert solution(\n    '2 8'\n    ) == '1'\n\nassert solution(\n    '6 2'\n    ) == '0'"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\\\n3 5\nab a\ncc c\nca a\nee c\nff d\"\"\") == \"4\"\n\nassert solution(\"\"\"\\\n2 8\naf e\ndc d\ncc f\nbc b\nda b\neb a\nbb b\nff c\"\"\") == \"1\"\n\nassert solution(\"\"\"\\\n6 2\nbb a\nba a\"\"\") == \"0\"\n\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\n\"\"\"\nfrom math import factorial"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n3\n3\n3\n2\n''') == '5'\nassert solution('''2\n3\n3\n3\n2\n''') == '12'\nassert solution('''1\n1\n1\n1\n2\n''') == '13'\nassert solution('''2\n1\n1\n1\n2\n''') == '16'\nassert solution('''1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '10'\nassert solution('1') == '1'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"10\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1') == '1.000000000000'\nassert solution('1 3') == '-1'\nassert solution('4 1') == '1.250000000000'\nassert solution('0 1') == '-1'\nassert solution('1 0') == '1.000000000000'\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"1.000000000000\"\nassert solution(\"1 3\") == \"-1\"\nassert solution(\"4 1\") == \"1.250000000000\""
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 3\") == \"-1\"\nassert solution(\"4 1\") == \"1.250000000000\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1') == '1.000000000000'\nassert solution('3 1') == '-1'\nassert solution('1 3') == '1.250000000000'\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 1\n\"\"\") == \"1.000000000000\"\nassert solution(\"\"\"\n1 3\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n4 1\n\"\"\") == \"1.250000000000\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1.000000000000'\nassert solution('3 1') == '1.000000000000'\nassert solution('4 1') == '1.250000000000'\nassert solution('1 3') == '-1'"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"1.000000000000\"\nassert solution(\"1 3\") == \"-1\"\nassert solution(\"4 1\") == \"1.250000000000\"\n\n'''\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '1.000000000000'\nassert solution('1 3') == '-1'\nassert solution('4 1') == '1.250000000000'\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1') == '1.000000000000'\nassert solution('1 3') == '-1'\nassert solution('4 1') == '1.250000000000'\n\n\n'''"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n\n1 1\n\"\"\") == \"1.000000000000\"\nassert solution(\"\"\"\n\n1 3\n\"\"\") == \"1.250000000000\"\nassert solution(\"\"\"\n\n1 1\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n\n2 2\n\"\"\") == \"0.000000\"\nassert solution(\"\"\"\n\n1 1\n\"\"\") == \"0.000000\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '10.0000000000'\nassert solution('3') == '-1'\nassert solution('6') == '85.4800000000'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1 4 1\n2 5 3\n''') == \"10.0000000000\"\nassert solution('''\n2\n12\n11 8\n7 5\n''') == \"10.0000000000\"\n\nassert solution('''\n3\n1\n1 4 1\n2 5 3\n''') == \"85.4800000000\"\nassert solution('''\n6\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\n''') == \"85.4800000000\""
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1\n1 4 1\n2 5 3\n''') == '10.0000000000'\nassert solution('''\n6\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\n''') == '85.4800000000'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n11 8\n7 5\n''') == '10.0000000000'\nassert solution('''\n3\n1\n1 4 1\n2 5 3\n''') == '-1'\nassert solution('''\n6\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\n''') == '85.4800000000'\n\n'''\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"10.0000000000\"\nassert solution(\"3\") == \"-1\"\nassert solution(\"6\") == \"85.4800000000\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n12\n11 8\n''') == '10.0000000000'\n\nassert solution('''\n3\n1\n1 4 1\n2 5 3\n''') == '-1'\n\nassert solution('''\n6\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\n''') == '85.4800000000'\n\nassert solution('''\n6\n-1\n1 4 1\n2 5 3\n''') == '-1'\n\nassert solution('''\n6\n4 5 3 2 1\n-1\n1 4 1\n2 5 3\n''') == '-1'"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '10.0000000000'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1\n1 4 1\n2 5 3\n''') == \"10.0000000000\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == '10.0000000000'\n\n\"\"\""
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"10.0000000000\"\nassert solution(\"2\") == \"10.0000000000\"\nassert solution(\"3\") == \"85.4800000000\"\nassert solution(\"6\") == \"85.4800000000\""
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6\n''') == \"4\"\n\nassert solution('''\n10\n''') == \"4\"\n\nassert solution('''\n''') == \"0\""
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(1) == 0\nassert solution(2) == 4\nassert solution(10) == 4"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"10\") == 4\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0'\nassert solution('10') == '4'"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '0'\nassert solution('10') == '4'\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n\n''') == '0'\nassert solution('''\n10\n\n''') == '4'\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n2\n\n''') == \"0\"\nassert solution('''10\n''') == \"4\"\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0'\nassert solution('10') == '4'"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 0\nassert solution('10') == 4\n\n\"\"\""
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == output\n\n'''\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == 'Wh.'\nassert solution('10') == 'Areyoubusy'\nassert solution('1') == '.'\n\"\"\""
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(None) == '.', 'Solution not implemented'\nassert solution('-1') == '.', 'Solution not implemented'\nassert solution('1') == 'Wh', 'Solution not implemented'\nassert solution('2') == 'abdef', 'Solution not implemented'\nassert solution('3') == 'What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"?'\n\n\n\n=======\n\nNephren is playing a game with little leprechauns.\n\nShe gives them an infinite array of strings, f_{0... \u221e}.\n\nf_0 is \"What are you doing at the end of the world? Are you busy? Will you save us?\".\n\nShe wants to let more people know about it, so she defines f_{i} =  \"What are you doing while sending \"f_{i} - 1\"? Are you busy? Will you send \"f_{i} - 1\"?\".\n\nFor example, f_1 is\n\n\"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"?\". Note that the quotes in the very beginning and in the very end are for clarity and are not a part of f_1.\n\nIt can be seen that the characters in f_{i} are letters, question marks, (possibly) quotation marks and spaces.\n\nNephren will ask the little leprechauns q times. Each time she will let them find the k-th character of f_{n}. The characters are indexed starting from 1. If f_{n} consists of less than k characters, output '.' (without quotes).\n\nCan you answer her queries?\n\n\n-----Input-----\n\nThe first line contains one integer q (1 \u2264 q \u2264 10)\u00a0\u2014 the number of Nephren's questions.\n\nEach of the next q lines contains two integers n and k (0 \u2264 n \u2264 10^5, 1 \u2264 k \u2264 10^18).\n\n\n-----Output-----\n\nOne line containing q characters. The i-th character in it should be the answer for the i-th query.\n\n\n-----Examples-----\nInput\n3\n1 1\n1 2\n1 111111111111\n\nOutput\nWh.\nInput\n5\n0 69\n1 194\n1 139\n0 47\n1 66\n\nOutput\nabdef\nInput\n10\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n\nOutput\nAreyoubusy\n\n\n-----Note-----\n\nFor the first two examples, refer to f_0 and f_1 given in the legend.\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n    1 1\n    1 2\n    1 111111111111\n    \"\"\") == \"Wh\"\n\nassert solution(\"\"\"\n    5 0\n    0 69\n    1 194\n    1 139\n    0 47\n    1 66\n    \"\"\") == \"abdef\"\n\nassert solution(\"\"\"\n    10 4\n    4 1825\n    3 75\n    3 530\n    4 1829\n    4 1651\n    3 187\n    4 584\n    4 255\n    4 774\n    2 474\n    \"\"\") == \"Areyoubusy\""
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '?'\nassert solution('3') == '?'\nassert solution('5') == '.'\nassert solution('10') == 'abdef'\n\n\"\"\""
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"Wh\"\nassert solution(\"5 0\") == \"abdef\"\nassert solution(\"10 4\") == \"Areyoubusy\"\n\n\"\"\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"Wh\"\nassert solution(\"5 0\") == \"abdef\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == 'Wh'\nassert solution('1 2') == 'abdef'\nassert solution('1 111111111111') == 'Areyoubusy'\n\n\"\"\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n1 1') == 'Wh'\nassert solution('3\\n1 1\\n1 2') == 'abdef'\n\n\n\"\"\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == 'Wh.'\nassert solution('1 2') == 'abdef'\n\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"Wh\"\nassert solution(\"5 0\") == \"abdef\"\nassert solution(\"10 3\") == \"Areyoubusy\""
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_stdin()) == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(solution.__doc__) == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"Possible\"\nassert solution(\"? +? -? +? = 42\") == \"Possible\"\nassert solution(\"? +? -? +? +? = 42\") == \"Possible\"\nassert solution(\"? -? = 1\") == \"Impossible\"\nassert solution(\"? = 1000000\") == \"Possible\"\n\n\n'''"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('? +? -? +? = 42') == 'Possible'\nassert solution('? -? = 1') == 'Impossible'\nassert solution('? = 1000000') == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n? +? -? +? +? = 42\n''') == 'Possible'\nassert solution('''\n? +? -? +? +? = 42\n''') == 'Impossible'\nassert solution('''\n? +? = 1\n''') == 'Impossible'\nassert solution('''\n? = 1000000\n''') == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_file) == \"Possible\"\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('? +? -? +? +? = n') == 'Possible'\nassert solution('? +? -? +? +? = n') == 'Impossible'\nassert solution('? +? -? +? +? = n') == 'Possible'"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('? +? -? +? +? = 42') == 'Possible'\nassert solution('? +? -? +? +? = 42') == 'Possible'\nassert solution('? +? -? +? +? = 42') == 'Impossible'\nassert solution('? = 1') == 'Impossible'\nassert solution('? = 1000000') == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n? +? -? +? = n\n''') == \"Possible\"\nassert solution('''\n? = 1\n''') == \"Impossible\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 0 2\\n0\\n0\\n0\\n') == '7 4 5'\nassert solution('4\\n1 2 0 2\\n0\\n0\\n0\\n') == '7 4 5'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"7 4 5\""
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '7 4 5'\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import product\nimport math"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"7 4 5\""
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"7 4 5\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"7 4 5\"\nassert solution(\"1\") == \"7 4 5\"\nassert solution(\"3\") == \"7 4 5\"\nassert solution(\"4\") == \"7 4 5\"\nassert solution(\"5\") == \"7 4 5\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 0 2\\n0\\n0\\n0\\n') == '7 4 5'\nassert solution('20\\n0 1 2 0\\n0\\n0\\n0\\n') == '20 20 20 20'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"7 4 5\""
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1 1 1'\nassert solution('4') == '7 4 5'\nassert solution('5') == '7 4 5'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '7 4 5'\nassert solution('5') == '7 5 4'\nassert solution('50') == '9489487070549510917'\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"3\") == \"Yes\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\naabbc\n''') == 'Yes'\nassert solution('''3\nabc\n''') == 'No'\nassert solution('''3\naaa\n''') == 'Yes'"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == 'Yes'\nassert solution('3') == 'No'\nassert solution('3') == 'Yes'"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'Yes'\nassert solution(\"3\") == 'No'\nassert solution(\"3\") == 'Yes'"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\naabddc\n\n3\nabc\n\n3\njjj''') == 'Yes', 'First'\nassert solution('''4\nzzzzzz\n\n4\naaaaa\n\n4\ncccccc\n\n4\nbbbbbb''') == 'No', 'Second'\nassert solution('''5\nzzzzzz\n\n5\naaaaa\n\n5\naaaaaa\n\n5\nbbbbbb''') == 'No', 'Third'\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\naabbcc\") == \"Yes\"\nassert solution(\"2\\nabcd\") == \"No\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"Yes\"\nassert solution() == \"No\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"Yes\"\nassert solution(\"6\") == \"Yes\"\nassert solution(\"1\") == \"No\""
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6\naabddc\n''') == \"Yes\"\nassert solution('''\n3\nabc\n''') == \"No\"\nassert solution('''\n3\njjj\n''') == \"Yes\"\n''')\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\naabddc\n\n3\njjj\n\n3\nabc\n\n''') == \"Yes\"\nassert solution('''\n5\naabddc\n\n2\naac\n\n''') == \"Yes\"\nassert solution('''\n5\naabddc\n\n3\naac\n\n''') == \"Yes\"\nassert solution('''\n5\naabddc\n\n1\nbbbbbb\n\n''') == \"Yes\"\nassert solution('''\n4\naba\n\n2\nbaa\n\n''') == \"Yes\"\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '6'\nassert solution('5 4') == '54'\nassert solution('8 5') == '1728'"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 2\n2 5\n7 6''') == '54'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n') == '1'\nassert solution('3 4\\n') == '1'\nassert solution('5 3\\n') == '3'\nassert solution('5 2\\n') == '2'\nassert solution('7 3\\n') == '5'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1728'"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '54'"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '4'\nassert solution('5 2') == '54'\nassert solution('7 4') == '1728'"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '1'\nassert solution('5 2') == '54'\nassert solution('7 4') == '1728'\nassert solution('10 1') == '1'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"54\"\nassert solution(\"5 2\") == \"54\"\nassert solution(\"7 4\") == \"1728\"\nassert solution(\"4 5\") == \"1028\""
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '54'\nassert solution(\"1 2\") == '54'\nassert solution(\"1 5\") == '53'\nassert solution(\"1 9\") == '53'\nassert solution(\"1 13\") == '53'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2') == '54'\nassert solution('7 4') == '1728'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 6\\nWWBBBW\\nWWBBBW\\nWWBBBW\\nWWWWWW\\nWWWWWW\\n\"\n) == \"2 4\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6') == '2 4', 'Testing'\nassert solution('3 3') == '2 1', 'Testing'"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 6\") == \"2 4\"\nassert solution(\"3 3\") == \"2 1\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == '2 4'\nassert solution('3 3') == '2 1'\nassert solution('12345') == '1 2 4'\nassert solution('12345') == '1 2 4'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2 1\"\nassert solution(input) == \"2 1\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(stdin) == '2 1'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0 0\"\nassert solution(\"1\") == \"1 1\"\nassert solution(\"2 1\") == \"2 1\"\nassert solution(\"3 1\") == \"1 2\"\nassert solution(\"3 2\") == \"1 3\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\n\n''') == '2 4'\nassert solution('''3 3\nWWW\nBWW\nWWW\n\n''') == '2 1'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '5 6\\n'\n    'WWBBBW\\n'\n    'WWBBBW\\n'\n    'WWBBBW\\n'\n    'WWWWWW\\n'\n    'WWWWWW\\n') == '2 4'\n\nassert solution(\n    '3 3\\n'\n    'WWW\\n'\n    'WWW\\n'\n    'WWW\\n') == '2 1'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"5 6\\n\"\n    \"WWBBBW\\n\"\n    \"WWBBBW\\n\"\n    \"WWBBBW\\n\"\n    \"WWWWWW\\n\"\n    \"WWWWWW\\n\"\n) == \"2 4\\n\"\n\nassert solution(\n    \"3 3\\n\"\n    \"WWW\\n\"\n    \"WWW\\n\"\n) == \"2 1\\n\"\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"10 9 10 10 9\"\n\nprint(solution(input))\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n1 2\\n1 2\\n1 2') == '10 9 10 10 9'\nassert solution('2 1\\n3 4\\n1 2\\n2 3\\n2 3') == '10 9 10 10 9'"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 2\\n1 2\\n\") == \"6 6 6\"\nassert solution(\"4 1\\n1 2\\n3 4\\n3 4\\n\") == \"6 8 6\"\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 7\") == \"10 9 10 10 9\"\nassert solution(\"2 3\") == \"5 6\""
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 7') == '10 9 10 10 9'\nassert solution('2 3') == '5 6'\nassert solution('1 2') == '5 6'\nassert solution('1 2') == '5 6'\nassert solution('2 3') == '5 6'\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 7\") == \"10 9 10 10 9\"\nassert solution(\"2 3\") == \"5 6\""
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n''') == '10 9 10 10 9 '\nassert solution('''\n2 3\n1 2\n1 2\n1 2\n''') == '5 6 '\nassert solution('''\n1 2\n1 2\n1 2\n''') == '1 2 '\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n''') == '10 9 10 10 9'\nassert solution('''\n2 3\n1 2\n1 2\n1 2\n''') == '5 6'\nprint(solution('''\n3 2\n1 2\n2 1\n1 2\n'''))\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n''') == '10 9 10 10 9 \nassert solution('''\n2 3\n1 2\n1 2\n1 2\n''') == '5 6 "
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 7\") == \"10 9 10 10 9\"\nassert solution(\"2 3\") == \"5 6\"\nassert solution(\"2 4\") == \"10 8\"\nassert solution(\"2 5\") == \"10 9\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"-1 -1\") == \"2\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n-1 -1\\n2\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n3\\n0 0 0\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n3\\n1 0 0\") == \"1\"\nassert solution(\"1 1\\n-1 -1\\n3\\n0 0 0\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n3\\n1 1 0\") == \"1\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n-1 -1\\n2\") == \"2\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '2'\nassert solution('-1 -1') == '2'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1\n-1 -1\n2\n0 1 0\n1 0 0\n''') == '2'\nassert solution('''\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n''') == '2'\nassert solution('''\n0\n1\n1\n''') == '1'\nassert solution('''\n1\n-1\n1\n''') == '0'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1\n-1 -1\n2\n0 1 0\n1 0 0\n''') == '2'\nassert solution('''\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n''') == '2'\nassert solution('''\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n0 1 0\n''') == '3'\nassert solution('''\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 0 0\n''') == '3'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"-1 -1\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"0 1 0\") == \"1\"\nassert solution(\"1 0 0\") == \"2\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"-1 -1\") == \"2\"\nassert solution(\"2\") == \"2\""
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"Kevin\"\nassert solution(\"2 2\") == \"Nicky\"\nassert solution(\"3 3\") == \"Nicky\"\nassert solution(\"4 1\") == \"Nicky\"\nassert solution(\"1 2\") == \"Kevin\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"Kevin\"\nassert solution(\"1 2\") == \"Nicky\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == 'Kevin'\nassert solution('1 2') == 'Nicky'"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"Kevin\"\nassert solution(\"2 1\") == \"Nicky\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1') == 'Kevin'\nassert solution('1 2') == 'Nicky'\nassert solution('3 4') == 'Nicky'\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n3 4\\n\") == \"Kevin\"\nassert solution(\"1 2\\n3\\n\") == \"Nicky\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"Kevin\"\nassert solution(\"1 1\") == \"Nicky\"\nassert solution(\"1 3\") == \"Kevin\""
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1\\n3 4') == 'Kevin'\nassert solution('1 2\\n3') == 'Nicky'\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 1\n3\n''') == \"Kevin\"\nassert solution('''2 1\n4\n''') == \"Nicky\"\nassert solution('''3 3\n6\n''') == \"Kevin\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1\\n3 4') == 'Kevin'\nassert solution('1 2\\n3') == 'Nicky'\n\nstdin = '1 2\\n3'\n\nassert solution(stdin) == 'Nicky'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'\n\nsolution()\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '3 2 1'\nassert solution('2 2 2') == '1 1 1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 2 3\n''') == \"3\"\nassert solution('''\n3\n2 2 2\n''') == \"1\"\nassert solution('''\n2\n2 1\n''') == \"2\"\nassert solution('''\n3\n1 1 1\n''') == \"1\"\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3\"\nassert solution() == \"1 2 3\"\nassert solution() == \"1 2 2\"\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('3 1 1') == '1 2 3'\nassert solution('2 1') == '2 2 2'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1 1 1 1 1'\nassert solution('5') == '2 1 2 2 3'"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2 3\n\n''') == '3'\n\nassert solution('''\n3\n2 2 2\n\n''') == '1'\n\nassert solution('''\n5\n1 2 3 4 5\n\n''') == '-1'\n\nassert solution('''\n5\n1 1 2 2 2\n\n''') == '2'\n\nassert solution('''\n5\n1 1 1 1 1\n\n''') == '1'"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1 1 1\"\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n''') == '-1'\nassert solution('''\n2\n1 2\n''') == '1 2'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 2 2\\n\") == \"3\\n1 2 3\\n1 2 3\"\nassert solution(\"2\\n2 1\\n\") == \"1\\n1 1 1\"\nassert solution(\"3\\n1 2 3\\n\") == \"1\\n1 2 3\\n2 3\""
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\nassert solution('1') == '1'"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"11\"\n) == \"6\"\nassert solution(\n    \"01\"\n) == \"2\"\nassert solution(\n    \"1\"\n) == \"1\"\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\nassert solution('10') == '1'"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\nassert solution('1') == '1'\nprint(solution(input()))\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"11\") == \"6\"\nassert solution(\"01\") == \"2\"\nassert solution(\"0\") == \"1\"\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\nassert solution('1') == '1'"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"01\") == \"1\"\nassert solution(\"11\") == \"6\"\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0') == '1'\nassert solution('01') == '2'\nassert solution('10') == '1'\nassert solution('11') == '6'\nassert solution('11000') == '7'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"11\") == \"6\"\nassert solution(\"01\") == \"2\""
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n3\n4\n''') == '4'\n\nassert solution('''5\n4\n5\n''') == '4'\n\nassert solution('''2\n4\n4\n''') == '0'\n\nassert solution('''5\n2\n2\n''') == '1'"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '4'\nassert solution('2') == '4'\nassert solution('3') == '1'\nassert solution('5') == '3'"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n15\n''') == '1'\nassert solution('''\n3\n1 1 2\n''') == '3'\nassert solution('''\n2\n5 7\n''') == '4'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n15\") == \"1\"\nassert solution(\"2\\n5 7\") == \"4\"\nassert solution(\"3\\n1 1 2\") == \"3\"\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n15') == '1'\nassert solution('3\\n1 1 2') == '3'\nassert solution('2\\n5 7') == '4'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"4\"\nassert solution(\"2\") == \"3\"\nassert solution(\"5\") == \"6\"\nassert solution(\"6\") == \"6\"\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_1) == 1\nassert solution(input_2) == 3"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('15') == '1'\nassert solution('3') == '4'\nassert solution('2') == '3'\nassert solution('5 7') == '4'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '4'\nassert solution('2') == '3'\nassert solution('5 7') == '4'\nassert solution('2 5 7') == '4'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"8\"\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 0 2\n2 0 1\n''') == \"YES\"\nassert solution('''4\n1 2 3 0\n0 3 2 1\n''') == \"NO\"\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 0 2\\n2 0 1\\n\") == \"YES\"\nassert solution(\"2\\n1 0\\n0 1\\n\") == \"YES\"\nassert solution(\"3\\n1 0 2\\n0 3 2 1\\n\") == \"NO\""
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1 0 2\n2 0 1\n\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n4\n1 2 3 0\n0 3 2 1\n\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n5\n1 2 3 0 1\n0 3 2 1\n\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n5\n1 2 3 0 1\n0 3 2 1\n\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 0\\n0 3 2 1\") == \"YES\"\nassert solution(\"4\\n1 0 2\\n2 0 1\") == \"YES\"\nassert solution(\"2\\n1 0\\n0 1\") == \"NO\""
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 2\") == \"YES\"\nassert solution(\"4 2 0\") == \"YES\"\nassert solution(\"3 4 2\") == \"NO\""
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"4\") == \"NO\""
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 0 2\\n2 0 1\\n\") == \"YES\"\nassert solution(\"2 0\\n0 1\\n\") == \"YES\"\nassert solution(\"4 0\\n0 1\\n0 2\\n3 0\\n\") == \"NO\"\n\n\n\n'''"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n1 0 2\n0 3 2 1\n2 0 1\n1 3''') == 'YES'\nassert solution('''4\n1 0 2\n0 3 2 1\n2 0 1\n1 3''') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == 'YES'\nassert solution('2') == 'YES'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\") == \"9000\"\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\") == \"1160\"\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\") == \"1360\"\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\") == \"1560\"\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\") == \"1760\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8 10 9 9 8 10\n1 10 5 5 1 10''') == '1160'\nassert solution('''5 10 5 5 1 10\n1 10 5 5 1 10''') == '1580'\nassert solution('''3 3 4 5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '9990'\nassert solution('''5 7 4 9\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '9990'\nassert solution('''5 7 4 9\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '9990'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '9000'\nassert solution('6') == '1160'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\\n\") == \"9000\"\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n\") == \"1160\""
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n8 10 9 9 8 10\n1 1 1 1 1 1\n''') == '9000'\nassert solution('''\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160'\n\n'''\n\nimport sys\nimport os\nimport math"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\\n\") == \"9000\"\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n\") == \"1160\"\nassert solution(\"6\\n8 10 9 9 8 10\\n1 100 5 5 1 10\\n\") == \"1160\""
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160'\nassert solution('''\n6\n8 10 9 9 8 10\n1 5 5 5 5 5\n''') == '1000'\nassert solution('''\n6\n8 10 9 9 8 10\n1 10 1 1 1 1\n''') == '6000'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '9000'\nassert solution('6') == '1160'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"9000\"\n\"\"\"\n\nfrom math import ceil, sqrt\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '9000'\nassert solution('6') == '1160'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 4') == '1'\nassert solution('8 6') == '1'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 2\n2 3\n1 4\n1 4\n2 1\n''') == '6'\nassert solution('''\n8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n\n''') == '1'"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"6\"\n\"\"\"\n\nn, p = map(int, input().split())\ncoders = []\nfor _ in range(n):\n    coders.append(int(input()))\n\ncoders.sort()\ncoders = set(coders)\n\ncoders.discard(p)\ncoders.discard(1)\n\nx_coders = []\ny_coders = []\nfor i in range(1, n):\n    x_coders.append(i)\n    y_coders.append(i)\n\nx_coders.sort()\ny_coders.sort()\n\nx_coders = set(x_coders)\ny_coders = set(y_coders)\n\ncounter = 0\nfor i in range(n-1):\n    x_coders.discard(x_coders.pop())\n    y_coders.discard(y_coders.pop())\n    for x in x_coders:\n        for y in y_coders:\n            if x == y:\n                counter += 1\n\nprint(counter)\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == '6'\nassert solution(\"8 6\") == '1'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n2 3\\n1 4') == '6'\nassert solution('8 6\\n5 6\\n5 7\\n5 8\\n6 2\\n2 1\\n7 3\\n1 3\\n1 4') == '1'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n2 3\n1 4\n1 4\n2 1\n''') == \"1\"\nassert solution('''\n8\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n''') == \"1\"\nprint(solution('''\n8\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n'''))\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 2\n2 3\n1 4\n1 4\n''') == '6'\nassert solution('''5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n\n''') == '1'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 2\n2 3\n1 4\n1 4\n2 1''') == '6'\nassert solution('''8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4''') == '1'\nassert solution('''3 3\n1 1\n1 2\n2 2''') == '0'"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2\n2 1\n1 2\n1 2\n1 2\n''') == '6'\nassert solution('''10 10\n1 1\n3 5\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n''') == '9'"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"4\") == \"-1\"\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == 5\nassert solution() == -1\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n2 6 9\n''') == '-1'\nassert solution('''4\n2 4 6 8\n''') == '5'\nassert solution('''5\n2 6 9\n''') == '4'\nassert solution('''10\n1\n''') == '11'\nassert solution('''20\n1 2 4 8 16 32\n''') == '21'"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '-1'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n2 2 3 4 6\n''') == '5'\nassert solution('''4\n2 4 6 8\n''') == '-1'\nassert solution('''3\n2 6 9\n''') == '4'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '-1'\nassert solution('2 4 6 8') == '5'\nassert solution('4 2 6 8') == '4'\nassert solution('5 2 4 6 8') == '-1'\n\n\n\"\"\""
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n2 6 9\n''') == '-1'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n2 2 3 4 6') == '5'\nassert solution('4\\n2 4 6 8') == '-1'\nassert solution('3\\n2 6 9') == '4'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n2 2 3 4 6') == '5'\nassert solution('4\\n2 4 6 8') == '-1'\nassert solution('3\\n2 6 9') == '4'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"-1\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"abacabaca\") == \"3\"\nassert solution(\"abaca\") == \"0\"\nassert solution(\"abac\") == \"0\"\nassert solution(\"abacabacaca\") == \"3\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('abacabaca') == \"3\"\nassert solution('abaca') == \"0\"\nassert solution('aa') == \"0\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    'abacabaca') == '3'\nassert solution(\n    'abaca') == '0'"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abacabaca\") == \"3\"\nassert solution(\"abaca\") == \"0\""
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n4\n11..2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5') == '2'\nassert solution('1 5') == '-1'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 7\\n5.0\\n3.0\\n.0\\n3.0\\n4.0') == '2'\nassert solution('10 10\\n#1.2\\n#.2\\n.2\\n.3\\n.4\\n.5\\n.6\\n.7\\n.8\\n.9\\n.10\\n.11\\n.12\\n.13\\n.14\\n.15\\n.16\\n.17\\n.18\\n.19\\n.20\\n.21\\n.22\\n.23\\n.24\\n.25\\n.26\\n.27\\n.28\\n.29\\n.30\\n.31\\n.32\\n.33\\n.34\\n.35\\n.36\\n.37\\n.38\\n.39\\n.40\\n.41\\n.42\\n.43\\n.44\\n.45\\n.46\\n.47\\n.48\\n.49\\n.50\\n.51\\n.52\\n.53\\n.54\\n.55\\n.56\\n.57\\n.58\\n.59\\n.60\\n.61\\n.62\\n.63\\n.64\\n.65\\n.66\\n.67\\n.68\\n.69\\n.70\\n.71\\n.72\\n.73\\n.74\\n.75\\n.76\\n.77\\n.78\\n.79\\n.80\\n.81\\n.82\\n.83\\n.84\\n.85\\n.86\\n.87\\n.88\\n.89\\n.90\\n.91\\n.92\\n.93\\n.94\\n.95\\n.96\\n.97\\n.98\\n.99\\n') == '8'\nassert solution('10 10\\n#1.2\\n#.2\\n.2\\n.3\\n.4\\n.5\\n.6\\n.7\\n.8\\n.9\\n.10\\n.11\\n.12\\n.13\\n.14\\n.15\\n.16\\n.17\\n.18\\n.19\\n.20\\n.21\\n.22\\n.23\\n.24\\n.25\\n.26\\n.27\\n.28\\n.29\\n.30\\n.31\\n.32\\n.33\\n.34\\n.35\\n.36\\n.37\\n.38\\n.39\\n.40\\n.41\\n.42\\n.43\\n.44\\n.45\\n.46\\n.47\\n.48\\n.49\\n.50\\n.51\\n.52\\n.53\\n.54\\n.55\\n.56\\n.57\\n.58\\n.59\\n.60\\n.61\\n.62\\n.63\\n.64\\n.65\\n.66\\n.67\\n.68\\n.69\\n.70\\n.71\\n.72\\n.73\\n.74\\n.75\\n.76\\n.77\\n.78\\n.79\\n.80\\n.81\\n.82\\n.83\\n.84\\n.85\\n.86\\n.87\\n.88\\n.89\\n.90\\n.91\\n.92\\n.93\\n.94\\n.95\\n.96\\n.97\\n.98\\n.99\\n') == '16'\nassert solution('4 10\\n.1.2\\n.3.4\\n.5.6\\n.7.8\\n.9.10\\n.11.12\\n.13.14\\n.15.16\\n.17.18\\n.19.20\\n.21.22\\n.23.24\\n.25.26\\n.27.28\\n.29.30\\n.31.32\\n.33.34\\n.35.36\\n.37.38\\n.39.40\\n.41.42\\n.43.44\\n.45.46\\n.47.48\\n.49.50\\n.51.52\\n.53.54\\n.55.56\\n.57.58\\n.59.60\\n.61.62\\n.63.64\\n.65.66\\n.67.68\\n.69.70\\n.71.72\\n.73.74\\n.75.76\\n.77.78\\n.79.80\\n.81.82\\n.83.84\\n.85.86\\n.87.88\\n.89.90\\n.91.92\\n.93.94\\n.95.96\\n.97.98\\n.99.100\\n') == '25'\nassert solution('9 7\\n7.5\\n.5\\n3.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n."
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5') == '2'\nassert solution('4 5') == '2'\nassert solution('1 1') == '0'\nassert solution('10 1') == '1'\nassert solution('1 100') == '-1'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 5\n11..2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n11#2#3\\n\") == \"2\"\nassert solution(\"5 5\\n11#2#3\\n#..22\\n#.323\\n.#333\\n\") == \"2\"\nassert solution(\"10 10\\n1112223334443322\\n33344333333222222\\n222222222222222222\\n222222222222222222\\n222222222222222222\\n222222222222222222\\n222222222222222222\\n222222222222222222\\n222222222222222222\\n222222222222222222\\n222222222222222222\\n222222222222222222\\n\") == \"3\"\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 5\n11.2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 5\n11..2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n\n5 3\n11.2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 5\n11#2\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(8) == \"6\"\nassert solution(3) == \"-1\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '-1'\nassert solution('4') == '4'\nassert solution('8') == '6'\nassert solution('3') == '-1'\nassert solution('5') == '-1'"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"10\") == \"10\"\nassert solution(\"10\") == \"10\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n))(\n''') == \"6\"\nassert solution('''3\n((\n''') == \"7\"\n\nassert solution('''5\n)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n''') == \"36\"\n\nassert solution('''10\n))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == \"6\""
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n(())(\") == \"6\"\nassert solution(\"8\\n())((())(\") == \"6\"\nassert solution(\"8\\n((())(\") == \"-1\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8') == '6'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"8\"\n    ) == \"6\"\nassert solution(\n    \"3\"\n    ) == \"-1\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '0'\nassert solution('3') == '6'\nassert solution('4') == '6'\nassert solution('5') == '6'\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"-\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 5\\n4 4 0\\n1 3\\n3 2\\n3 1') == '1\\n3 2\\n1 4'\nassert solution('4 5 4\\n2 1 0 3\\n4 3') == '4\\n1 2 3 4'\nassert solution('4 5 4\\n2 1 0 3\\n3 2') == '4\\n1 2 3 4'\nassert solution('4 5 4\\n2 1 0 3\\n3 2\\n3 4') == '4\\n1 2 3 4'\nassert solution('4 5 4\\n2 1 0 3\\n3 2\\n4 3') == '4\\n1 2 3 4'\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 3 5\n4 4 0\n1 3\n3 2\n3 1\n''') == '1'\nassert solution('''\n5 3 5\n4 4 0\n1 3\n3 2\n3 1\n''') == '4'\n\n'''\n14\n1 3\n3 2\n3 1\n3 3\n3 4\n'''"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\nassert solution(stdin) == \"3\"\n\n\n\"\"\"\n\n\nimport itertools\nimport collections\nimport functools\nimport math\nimport operator\nfrom datetime import datetime, timedelta"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3 5\") == \"1\"\nassert solution(\"4 5 4\") == \"2\"\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3 5\n4 4 0\n1 3\n3 2\n3 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('4 5 4') == '1,2,3'"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('4 5 4') == '1'\nassert solution('5 3 4') == '4'\nassert solution('4 3 5') == '4'\nassert solution('5 3 4') == '1'\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3 5\\n4 4 0\\n1 3\\n3 2\\n3 1\") == \"1\"\nassert solution(\"4 5 4\\n2 1 0 3\\n4 3\") == \"4\"\nassert solution(\"5 5 3\\n0 0 0 3\\n4 4\") == \"5\"\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\nfrom functools import lru_cache\n\nn, m, h = map(int, input().split())\ndata = defaultdict(int)\nfor _ in range(m):\n    a, b = map(int, input().split())\n    data[a] = 1\n    data[b] = 1"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == '1'\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1\\n3 2 1 3'"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '8'\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == \"8\"\nassert solution('3 4') == \"10\"\nassert solution('5 10') == \"228\"\nassert solution('3 3') == \"4\"\nassert solution('2 2') == \"2\"\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '4'\nassert solution('5 5') == '7'\nassert solution('8 2') == '9'\nassert solution('1 1') == '2'\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == 8\n\"\"\"\nimport math\n\nimport sys"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n2 1 1\n0 0 0\n1 1 1\n''') == '18'\nassert solution('''\n3 3\n2 1 1\n0 0 0\n1 1 1\n2 2 2\n''') == '20'\nassert solution('''\n3 3\n2 1 1\n0 0 0\n1 1 1\n0 2 2\n''') == '19'\nassert solution('''\n3 3\n2 1 1\n0 0 0\n1 1 1\n0 2 2\n0 3 2\n''') == '18'\nassert solution('''\n3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '7'\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\n''') == '8'\nassert solution('''\n1 2\n''') == '1'\nassert solution('''\n3 3\n''') == '9'\nassert solution('''\n2 2\n''') == '7'\nassert solution('''\n5 3\n''') == '23'\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == 8\nassert solution('10 10') == 4\nassert solution('10 20') == 5\nassert solution('10 10 20') == 6\nassert solution('10 20 10') == 5\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 3\n''') == '8'\nassert solution('''\n1 1\n''') == '1'\n\n'''\nExpected output\n\n8\n\nDifficulty\nHard\n1\n\nSolution\nSubmissions\n3\n\nTime Limit\nMedium\n2\n\nMemory Limit\nMedium\n2\n\nLanguages\nPython\n\nSource Code\n\n'''"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([\"2 3\", \"\"]) == \"8\"\nassert solution([\"1 1\", \"\"]) == \"0\"\nassert solution([\"2 2\", \"\"]) == \"0\"\nassert solution([\"1 1\", \"\"]) == \"0\"\nassert solution([\"2 2\", \"\"]) == \"0\"\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2') == '5'\nassert solution('1 2') == '2'\nassert solution('100 3') == '100'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '5'\nassert solution('100 3') == '100'\nassert solution('1 2') == '2'"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 2\n1 2\n2 3\n''') == '5'\nassert solution('''\n100 3\n1 2\n2 1\n3 1\n''') == '100'\nassert solution('''\n1 2\n1 1\n2 100\n''') == '100'"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2\\n1 1\\n2 100') == '100'\nassert solution('5 2\\n1 2\\n2 3\\n') == '5'"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '5'\nassert solution('1 2') == '5'\nassert solution('1 2') == '5'\nassert solution('100 3') == '4'\nassert solution('1 2') == '100'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 2\n2 1\n3 1''') == '4'\nassert solution('''1 2\n2 1\n3 1''') == '100'\nassert solution('''1 2\n2 1\n3 2''') == '101'\nassert solution('''1 2\n2 1\n3 3''') == '101'\nassert solution('''1 2\n2 1\n3 3''') == '3'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"5 2\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\") == \"5\"\n\nassert solution(\n    \"100 3\\n\"\n    \"1 2\\n\"\n    \"2 1\\n\"\n    \"3 1\\n\") == \"100\"\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2\n1 2\n2 3\n''') == '5'\nassert solution('''5 2\n1 2\n2 1\n3 1\n''') == '4'\nassert solution('''1 2\n1 1\n2 100\n''') == '100'\nassert solution('''3 3\n3 1\n2 2\n1 1\n''') == '4'\nprint('All tests passed.')"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2\n1 1\n2 100''') == '100'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 2\n2 1\n3 1''') == '5'\nassert solution('''1 2\n2 3\n3 1''') == '4'\nassert solution('''1 2\n2 1\n3 1''') == '100'\nassert solution('''1 2\n2 1\n3 1''') == '100'\nassert solution('''1 2\n2 3\n3 1''') == '4'\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aaabb') == 6\nassert solution('usaco') == 1\nassert solution('lol') == 2"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('aaabb') == '6'\nassert solution('usaco') == '1'\nassert solution('lol') == '2'\n\n\n\n\n'''\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('aaa') == 'a'\nassert solution('aaab') == 'a'\nassert solution('aaabb') == 'a'\nassert solution('aaabbb') == 'a'\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''aaabb''') == '6'\nassert solution('''usaco''') == '1'\nassert solution('''lol''') == '2'"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('usaco') == '1'\n\nassert solution('lol') == '2'"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('aaabb') == 6\nassert solution('usaco') == 1\nassert solution('lol') == 2\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('aaabb') == 6\nassert solution('usaco') == 1\nassert solution('lol') == 2\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"aaabb\") == 6, \"1\"\nassert solution(\"usaco\") == 1, \"2\"\nassert solution(\"lol\") == 2, \"3\"\nassert solution(\"bbbb\") == 0, \"4\""
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('aaabb') == 6\nassert solution('usaco') == 1\nassert solution('lol') == 2\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('aaabb') == '6'\nassert solution('usaco') == '1'\nassert solution('lol') == '2'\nassert solution('aab') == '2'\nassert solution('bb') == '1'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\n\"\"\"\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\n\"\"\"\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\""
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\""
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\nassert solution('5') == '2'\nassert solution('10') == '3'\nassert solution('20') == '2'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\n\"\"\"\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\""
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n') == '1\\n'\nassert solution('4\\n') == '2\\n'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\""
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1 2\"\nassert solution(\"2\") == \"2 1\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 4\n2 5\n3 6\n''') == '1 2'\nassert solution('''4\n1 3\n2 4\n3 2\n4 1\n''') == '2 1'\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 4\n2 5\n3 6\n''') == \"1 2\"\nassert solution('''\n2\n1 5\n2 6\n''') == \"1 2\"\nassert solution('''\n5\n1 2\n3 4\n5 6\n7 8\n9 10\n''') == \"1 2\"\nassert solution('''\n4\n1 2\n3 4\n5 6\n7 8\n''') == \"1 2\"\nassert solution('''\n4\n1 2\n3 4\n5 6\n7 8\n''') == \"1 2\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"2 1\\n\"\nassert solution(\"6\") == \"1 2\\n\"\nassert solution(\"6\") == \"1 2\\n\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 4\n2 5\n3 6\n4 3\n5 3\n''') == '2 1'\nassert solution('''\n5\n1 4\n2 5\n3 6\n4 3\n5 3\n''') == '2 1'\n'''\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n1 4\n2 5\n3 6\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n3\n1 5\n1 2\n3 1\n\"\"\") == \"1 2\""
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2 1'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1 2\"\nassert solution(\"3\") == \"1 2 1\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n    3\n    1 4\n    2 5\n    3 6\n    \"\"\") == \"1 2\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2 1'\nassert solution('8') == '4'\nassert solution('5') == '5'\n\"\"\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2 1\"\nassert solution(\"4\") == \"2 1 1 2\""
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n\n''') == '1'\nassert solution('''\n2\n\n''') == '2'\nassert solution('''\n3\n\n''') == '3'\nassert solution('''\n8\n\n''') == '4'\nassert solution('''\n2 1\n\n''') == '2 1'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2 1'\nassert solution('8') == '4'"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2 1\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n1''') == '1'\nassert solution('''2\n1\n1''') == '2 1'\nassert solution('''8\n4''') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n''') == '1'\nassert solution('''2\n''') == '2'\nassert solution('''8\n''') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2 1'\nassert solution('8') == '4'"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2 1\"\nassert solution(\"3\") == \"2 1\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2 1\"\nassert solution(\"3\") == \"2 1 1\"\nassert solution(\"4\") == \"2 1 1 1\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8') == '2'\nassert solution('1') == '1'\nassert solution('a') == '1'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1 1\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0rTrT022') == '02TrrT20'\nassert solution('aA') == 'a A'\nassert solution('8') == '1'"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '5'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '3'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10\nababababab\n''') == '2'\nassert solution('''\n4\nababab\n''') == '1'\nassert solution('''\n2\nab\n''') == '1'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''aabaac''') == 'aba aca \nassert solution('''0rTrT022''') == '02TrrT20 \n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.readline()[:-1]\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\\n\"\n\n\"\"\""
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\nabcd\\n2\\nacbd\\n') == '2'\nassert solution('5\\nlo**er\\n2\\nlover\\nloser\\n') == '0'\nassert solution('3\\na*a\\n2\\naaa\\naba\\n') == '1'"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\nla*era\\nleetcode\\n') == '1'\nassert solution('2\\n*d\\n') == '0'"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\naba\\nacbd\\n\") == \"1\"\nassert solution(\"4\\na**d\\n2\\naba\\nacbd\\n\") == \"2\"\nassert solution(\"5\\nlo*er\\n2\\nlover\\nloser\\n\") == \"0\"\nassert solution(\"3\\na*a\\n2\\naaa\\naba\\n\") == \"1\""
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"0\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1', f'Expected: 1, Actual: {solution(\"2\")}'\nassert solution('3') == '0', f'Expected: 0, Actual: {solution(\"3\")}'\nassert solution('4') == '1', f'Expected: 1, Actual: {solution(\"4\")}'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\nlo*er\n2\naaa\naba\n3''') == '1'\nassert solution('''3\nabcd\nacbd\naba''') == '0'\nassert solution('''4\na**d\n2\nabcd\nacbd\n3''') == '2'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\nabcd\nacbd\n''') == '1'\nassert solution('''4\na**d\n2\nabcd\nacbd\n''') == '0'\nassert solution('''3\na*a\n2\naaa\naba\n''') == '1'\nassert solution('''5\nlo*er\n2\nlover\nloser\n''') == '0'"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 1 1\\n1 0 0 0 4\\n') == '1'\nassert solution('6 1 2\\n3 8 0 1 0 0\\n') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1 1\\n1 0 0 0 4\\n') == '1'\nassert solution('6 1 2\\n3 8 0 1 0 0\\n') == '2'\nassert solution('10 10 10 10 10 10 10 10 10 10 10\\n1 2 3 4 5 6 7 8 9 10\\n') == '9'"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 1 1\n1 0 0 0 4\n''') == '1'\n\nassert solution('''6 1 2\n3 8 0 1 0 0\n''') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 1 1\n1 0 0 0 4\n\n3 1 2\n3 8 0 1 0 0''') == '1'\nassert solution('''5 1 1\n1 0 0 0 4\n\n3 1 2\n3 8 0 1 0 0''') == '2'\nassert solution('''6 1 2\n3 8 0 1 0 0\n\n3 1 2\n3 8 0 1 0 0''') == '2'\nassert solution('''5 3 3\n5 8 3 3 1 4\n\n5 3 3\n5 8 3 3 1 4''') == '4'"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1 1\\n1 0 0 0 4') == '1'\nassert solution('6 1 2\\n3 8 0 1 0 0') == '2'\nassert solution('5 1 1\\n0 0 0 0 4') == '1'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1 1') == '1'\nassert solution('6 1 2') == '2'\nassert solution('6 2 1') == '1'"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1 1\\n1 0 0 0 4\\n') == '1'\nassert solution('6 1 2\\n3 8 0 1 0 0\\n') == '2'"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '1'"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1 1\\n1 0 0 0 4\\n') == '1'\nassert solution('6 1 2\\n3 8 0 1 0 0\\n') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 1 1\n1 0 0 0 4\n''') == '1'"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1''') == '40'\nassert solution('''1 42''') == '1'\nassert solution('''6 4''') == '172'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_data) == '40'\nprint('solution = %s' % solution)\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\nassert solution(\"6 4\") == \"172\"\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1\n1 2''') == '1'\nassert solution('''1 42\n1 2''') == '1'\nassert solution('''6 4\n1 2\n4 5\n8 9\n''') == '172'\nassert solution('''1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 22\n1 23\n1 24\n1 25\n1 26\n1 27\n1 28\n1 29\n1 30\n1 31\n1 32\n1 33\n1 34\n1 35\n1 36\n1 37\n1 38\n1 39\n1 40''') == '40'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '40'\nassert solution('1 42') == '1'\nassert solution('6 4') == '172'"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '40'\nassert solution('1 42') == '1'\nassert solution('6 4') == '172'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\nassert solution(\"6 4\") == \"172\""
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"Palindromic tree is better than splay tree\"\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 1''') == '40'\nassert solution('''1 42''') == '1'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n\") == \"40\\n\"\nassert solution(\"1 42\\n\") == \"1\\n\"\nassert solution(\"6 4\\n\") == \"172\\n\"\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1 2\n3\n4\n''') == \"5\"\nprint(solution('''\n4\n3 1 4 1\n'''))\nassert solution('''\n5\n3 1 4 1 5\n''') == \"11\"\nprint(solution('''\n5\n3 1 4 1 5 6\n'''))\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n2 1 4\n''') == '5'\nassert solution('''\n4\n3 1 4 1\n''') == '6'\nassert solution('''\n5\n3 1 4 1 5\n''') == '11'"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n2 1 4\n''') == '5'\nassert solution('''\n4\n3 1 4 1\n''') == '6'\nassert solution('''\n5\n3 1 4 1 5\n''') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"5\"\nassert solution(\"4 2 1 4\") == \"6\"\nassert solution(\"5 3 1 4 2\") == \"11\"\nassert solution(\"2 3 1 4 5\") == \"7\"\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '5'\nassert solution('4') == '6'\nassert solution('5') == '11'\nassert solution('0') == '0'\nassert solution('1 2 2') == '4'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '6'\nassert solution('5') == '11'\n\nfrom math import factorial\nfrom itertools import product\nfrom math import pi, cos"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n2 1 4\n\n4\n3 1 4 1\n\n5\n3 1 4 1 5\n\n6\n3 1 4 1 5\n''') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"11\""
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2 1 4\n''') == '5'\n\nassert solution('''\n4\n3 1 4 1\n''') == '6'\n\nassert solution('''\n5\n3 1 4 1 5\n''') == '11'"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n2 1 4\n\n2\n3 1 4 1\n\n4\n3 1 4 1 5\n\n5\n3 1 4 1 5 6\n\n''') == '11'\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 0 0 -1\n''') == '1'\nassert solution('''2 -1\n''') == '2'\nprint(\"You're all set!\")"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 0 0 -1\") == \"1\"\nassert solution(\"2 -1\") == \"2\"\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 0 0 -1\n''') == '1'\nassert solution('''\n2 -1\n''') == '2'"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\""
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 0 0 -1\n\n10\n2 2 -2 1 2\n\n''') == \"1\"\n\nassert solution('''\n4\n1 0 0 -1\n\n8\n1 -1 2 2 2 3 3\n\n''') == \"2\"\n\nassert solution('''\n6\n-1 -1 -1 -1 1 1\n\n''') == \"3\""
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n-1 0 0 -1\") == \"1\"\nassert solution(\"2\\n1 -1\") == \"2\""
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1 -1') == '2'\nassert solution('5\\n-1 -2 -3 -4') == '4'\nassert solution('5\\n-1 -2 -3 -4') == '5'\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 0 0 -1') == \"1\"\nassert solution('2 1 -2') == \"2\"\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"1\"\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 0 0') == '2'\nassert solution('2 1 0') == '1'\nassert solution('2 5 7') == '1'\nassert solution('2 1 0') == '0'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 0 0') == '2'\nassert solution('2 1 0') == '0'\nassert solution('2 5 7') == '1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 0 0') == '2'\nassert solution('2 1 0') == '0'\nassert solution('2 5 7') == '1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 0 0\") == \"2\"\nassert solution(\"2 1 0\") == \"1\"\nassert solution(\"2 5 7\") == \"1\"\n\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '1'"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 0 0\") == \"2\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"2 5 7\") == \"1\"\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 0 0\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 1 0\\n1 2\\n2 2\") == \"0\"\nassert solution(\"2 5 7\\n3 4\\n14 4\") == \"1\"\nassert solution(\"5 3\\n1 2\\n3 4\\n4 5\\n2 3\") == \"0\"\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == '1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 0 0') == '2'\nassert solution('1 2') == '0'\nassert solution('2 1 0') == '1'\nassert solution('2 5 7') == '1'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2') == '6'\nassert solution('3 4') == '7'\n\n'''\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"6 2\") == \"6\"\nassert solution(\"8 2\") == \"16\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"8 2\") == \"2\"\nassert solution(\"10 10\") == \"6\"\nassert solution(\"6 10\") == \"1\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 3\") == \"9\"\nassert solution(\"5 3\") == \"7\"\nassert solution(\"6 6\") == \"9\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n01001\\n2 4\") == \"6\"\nassert solution(\"5 2\\n00100\\n1000\\n3 5\") == \"6\"\nassert solution(\"5 2\\n00101\\n1001\\n3 5\") == \"5\"\nassert solution(\"5 2\\n00010\\n1000\\n3 5\") == \"4\"\nassert solution(\"5 2\\n00010\\n1001\\n3 5\") == \"1\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2\\n01001\\n2 4\\n3 5\\n') == '6'\n\n'''\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"6\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2\\n01001\\n2 4\\n3 5\\n') == '6'\nassert solution('5 2\\n01001\\n2 4\\n3 5\\n') == '0'\nassert solution('5 2\\n01001\\n2 4\\n3 5\\n') == '1'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2') == '6'\nassert solution('3 5') == '8'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '6'\nassert solution('3 3') == '9'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\n\nassert solution('1 2 1 2 1 2') == '13'\n\nassert solution('1 3 5 4 2 1') == '5'\n\nassert solution('3 5 1 3 2 1') == '2'\n\nassert solution('1 3 1 3 2 1') == '2'\n\n\n\"\"\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 1 1 1\\n') == '6'\nassert solution('1 2 1 2 1 2\\n') == '13'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1 1 1 1 1 1\n\"\"\") == \"6\"\nassert solution(\"\"\"\n1 2 1 2 1 2\n\"\"\") == \"13\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 1 1 1\") == \"6\"\nassert solution(\"1 2 1 2 1 2\") == \"13\"\nassert solution(\"3 4 1 3 4 2 2\") == \"3\"\nassert solution(\"1 2 3 4 5 6\") == \"1\"\nassert solution(\"3 2 1 2 1 4\") == \"4\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\n\nimport math\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1 1 1\") == \"6\"\nassert solution(\"1 2 1 2 1 2\") == \"13\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1 1 1 1 1\n''') == '6'\nassert solution('''\n1 2 1 2 1 2\n''') == '13'"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'\n'''\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n2 3 4 6 9') == 4\nassert solution('9\\n1 2 3 5 6 7 8 9 10') == 4"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"5\\n\"\n    \"2 3 4 6 9\"\n) == \"4\"\nassert solution(\n    \"9\\n\"\n    \"1 2 3 5 6 7 8 9 10\"\n) == \"4\"\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2 3 4 6 9') == '4'\nassert solution('9\\n1 2 3 5 6 7 8 9 10') == '4'"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5\\n\"\n    \"2 3 4 6 9\\n\"\n    ) == \"4\"\nassert solution(\n    \"9\\n\"\n    \"1 2 3 5 6 7 8 9 10\\n\"\n    ) == \"4\"\nassert solution(\n    \"9\\n\"\n    \"0 2 3 4 5 6 7 8 9\\n\"\n    ) == \"9\"\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 3 4 6 9\\n\") == \"4\"\nassert solution(\"9\\n1 2 3 5 6 7 8 9 10\\n\") == \"4\"\nassert solution(\"12\\n1 2 3 4 5 6 7 8 9 10 11 12\\n\") == \"5\"\nassert solution(\"5\\n2 2 3 3 4 4\\n\") == \"3\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9\\n\") == \"8\"\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n2 3 4 6 9\\n') == '4'\nassert solution('9\\n1 2 3 5 6 7 8 9 10\\n') == '4'\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 3 4 6 9\") == \"4\"\nassert solution(\"9\\n1 2 3 5 6 7 8 9 10\") == \"4\""
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n2 3 4 6 9\n''') == 4\nassert solution('''\n9\n1 2 3 5 6 7 8 9 10\n''') == 4\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"4\"\nassert solution(\"9\\n1 2 3 5 6 7 8 9 10\") == \"4\"\n\n\n\"\"\""
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\"\nassert solution(\"\") == \"0\""
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_data) == 'SURGERY FAILED'\nassert solution(input_data_2) == 'SURGERY COMPLETE'\nprint(solution(input_data))\nprint(solution(input_data_2))\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n\n6\n12\n4 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n84 85\n85 86\n86 87\n87 88\n88 89\n89 90\n90 91\n91 92\n92 93\n93 94\n94 95\n95 96\n96 97\n97 98\n98 99\n99 100\n100 101\n101 102\n102 103\n103 104\n104 105\n105 106\n106 107\n107 108\n108 109\n109 110\n110 111\n111 112\n112 113\n113 114\n114 115\n115 116\n116 117\n117 118\n118 119\n119 120\n120 121\n121 122\n122 123\n123 124\n124 125\n125 126\n126 127\n127 128\n128 129\n129 130\n130 131\n131 132\n132 133\n133 134\n134 135\n135 136\n136 137\n137 138\n138 139\n139 140\n140 141\n141 142\n142 143\n143 144\n144 145\n145 146\n146 147\n147 148\n148 149\n149 150\n150 151\n151 152\n152 153\n153 154\n154 155\n155 156\n156 157\n157 158\n158 159\n159 160\n160 161\n161 162\n162 163\n163 164\n164 165\n165 166\n166 167\n167 168\n168 169\n169 170\n170 171\n171 172\n172 173\n173 174\n174 175\n175 176\n176 177\n177 178\n178 179\n179 180\n180 181\n181 182\n182 183\n183 184\n184 185\n185 186\n186 187\n187 188\n188 189\n189 190\n190 191\n191 192\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n4\\n1 2 3\\n5 6 E 7') == 'SURGERY COMPLETE'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"SURGERY COMPLETE\"\nassert solution(\"1\") == \"SURGERY FAILED\"\nassert solution(\"2\") == \"SURGERY FAILED\"\nassert solution(\"3\") == \"SURGERY COMPLETE\"\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3') == 'SURGERY COMPLETE'\nassert solution('4\\n4 4 4 4 4 4 4 4 4 4 4 4 4\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nSURRGERY COMPLETE') == 'SURGERY FAILED'\nassert solution('4\\n4 4 4 4 4 4 4 4 4 4 4 4 4\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nE E E E E E E E E E E E E E E E\\nSURRGERY COMPLETE') == 'SURGERY FAILED'\nassert solution('2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY FAILED'\n\nassert solution('''\n2\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY COMPLETE'\n\nassert solution('''\n1\n2\n3\n4\n5\n''') == 'SURGERY FAILED'\n\nassert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY FAILED'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n') == 'SURGERY COMPLETE'\nassert solution('2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n') == 'SURGERY FAILED'\n\n\n\"\"\"\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11') == 'SURGERY COMPLETE\\nSURGERY FAILED\\nIR\\nIR\\nS rr\\nI lldll\\nDONE'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13 11\\n11') == 'IR'\nassert solution('3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13 11\\n11') == 'S rr'\nassert solution('3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13 11\\n11') == 'I lldll'"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == 'SURGERY FAILED'\nassert solution('1') == 'SURGERY COMPLETE'\nassert solution('3') == 'SURGERY FAILED'"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\") == \"1 2 3\"\nassert solution(\"9 2 5\") == \"6 5 8 3 4 1 9 2 7\"\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2 1''') == \"1 2 3\"\nassert solution('''3 2 1''') == \"1 2 3\"\nassert solution('''10 10 2''') == \"2 2 8 1 3 4 5 7 6 9\"\nprint(\"Solution = OK\")\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == \"1 2 3\"\nassert solution(\"9 2 5\") == \"6 5 8 3 4 1 9 2 7\"\nassert solution(\"3 2 1\") == \"1 2 3\""
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2 1\n''') == '1 2 3'\nassert solution('''9 2 5\n''') == '6 5 8 3 4 1 9 2 7'\nassert solution('''3 2 1\n''') == '1 2 3'\n\nprint('All test cases passed!')"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('9 2 5\\n') == '6 5 8 3 4 1 9 2 7'\nassert solution('3 2 1\\n') == '1 2 3'"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == \"1 2 3\"\n\nassert solution(\"9 2 5\") == \"6 5 8 3 4 1 9 2 7\"\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 2 5\\n') == '5 2 6 3 4 1 7'\nassert solution('3 2 1\\n') == '1 2 3'\nprint('passed')\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 2 1\n\n''') == '1 2 3'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 1') == '1 2 3'\nassert solution('10 2 5') == '1 3 5 2 6 4 7 8 9 10'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n9 2 5\n''') == '6 5 8 3 4 1 9 2 7'\nassert solution('''\n3 2 1\n''') == '1 2 3'"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 1\") == \"5\"\nassert solution(\"4 4\") == \"4\"\nassert solution(\"9 9 9 9 9\") == \"9\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 1') == '5'\nassert solution('3 2') == '2'\nassert solution('4 4') == '4'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 2\n3 2 1\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n\"\"\") == \"5000000000\"\n\nassert solution(\"\"\"\n3 2\n1 0 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4 4\n2 8 4 1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n\"\"\") == \"1000000000\""
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 2\n1 0 1\n''') == '2'\nassert solution('''\n3 2\n3 2 1\n''') == '3'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == \"4\"\nassert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 2') == '3'\nassert solution('4 4') == '4'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 1\") == \"5\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n3 2 1\n''') == \"3\"\nassert solution('''\n5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n''') == \"5000000000\"\nassert solution('''\n3 2\n1 0 1\n''') == \"2\"\nassert solution('''\n4 4\n2 8 4 1\n''') == \"4\"\nassert solution('''\n6 5\n12 23 35 45 53\n''') == \"9\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 1') == '5'\nassert solution('1000000000 1000000000 1000000000 1000000000 1000000000') == '1000000000'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '3'\nassert solution('3 2') == '3'\nassert solution('5 1') == '5'\nassert solution('1000000000 1000000000 1000000000 1000000000 1000000000') == '5000000000'\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"bwwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n\"\"\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '0'\nassert solution('bwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"bwwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\""
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"bwwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''bwwwbwwbw\n\nOutput\n5\n\nbwwwbwwbw\n\nOutput\n3\n\nbwwbwwb''') == '5'\n\nassert solution('''bwwbwwb\n\nOutput\n3\n\nbwwwbwwb''') == '3'\n\nassert solution('''bwbbw\n\nOutput\n1\n\nbwbbw\n\nOutput\n2''') == '2'\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('bwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n\n\"\"\"\nimport functools"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n\n'''\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"bbwbbwb\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\n\n\n'''"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''bwwbwwbw\n''') == '5'\nassert solution('''bwwbwwb\n''') == '3'\nassert solution('''bwwbww\n''') == '1'\nassert solution('''bwbwwwbwwbwwbwwbwwbwwbwwbwwwbwwbwwbwwbwwbwwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwbwwb"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 4\n3 2\n1 2\n.....\n.***.\n...**\n*....\n''') == '10'\nassert solution('''4 4\n2 2\n0 1\n....\n..*.\n....\n....\n''') == '7'\n\n'''"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\n4 3\n.+*\n*.*\n***\n''') == '10'\n\nassert solution('''\n10\n4 3\n.+*\n*.*\n***\n''') == '11'\n\nassert solution('''\n4\n2 2\n*+\n+*\n''') == '2'"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '''\n    3 3\n   . *\n   . *\n    *.\n    ''') == \"10\"\n\nassert solution(\n    '''\n    4 4\n   ..\n   ...\n    * *\n   ..\n    ''') == \"5\"\n\nassert solution(\n    '''\n    5 5\n   ..\n   ..\n    * *\n   ..\n    * *\n    ''') == \"8\"\n    '''\n) == \"10\""
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"10\""
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4\n2 2\n0 1\n....\n..*.\n....\n....\n\n''') == '10'\n\nassert solution('''\n4 4\n2 2\n0 1\n***\n\n***\n\n***\n\n''') == '7'\n\nassert solution('''\n1 1\n.+*\n...\n...\n''') == '1'\n\nassert solution('''\n4 4\n2 2\n0 1\n***\n\n***\n\n***\n\n''') == '4'\n\nassert solution('''\n4 4\n2 2\n0 1\n***\n\n***\n\n***\n\n''') == '4'"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 5\n3 2\n1 2\n.***.\n...**\n*....\n\nOutput\n10\n''') == '10'\n\nassert solution('''\n4 4\n2 2\n0 1\n....\n..*.\n....\n....\n\nOutput\n7\n''') == '7'\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n\n''') == '10'\n\nassert solution('''\n4 4\n2 2\n0 1\n....\n..*.\n....\n....\n\n''') == '7'\n\nprint(\"Your program ran in \" + str(time.process_time() - start) + \" seconds.\")"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sorted([\"4 5\", \"2 2\", \"1 2\", \".....\", \"......\", \"....*\", \".***.\", \".....\", \"....*\", \"....*\", \"....*\", \"....*\", \"....*\", \"....*\"])) == \"10\", \"test 1\"\nassert solution(sorted([\"4 4\", \"2 2\", \"0 1\", \".....\", \"......\", \"....*\", \".***.\", \".....\", \"....*\", \"....*\", \"....*\", \"....*\", \"....*\", \"....*\", \"....*\", \"....*\", \"....*\", \"....*\", \"....*\", \"....*\", \"....*\", \"....*\", \"....*\", \"....*\"])) == \"7\", \"test 2\""
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"10\"\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5\\n3 2\\n1 2\\n.....\\n.***.\\n...**\\n*....') == '10'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"12\") == \"2\""
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 4 2 2\") == \"2\"\nassert solution(\"6\\n1 2 4 4 4 9\") == \"2\"\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 4 2 2\n''') == '2'\n\nassert solution('''\n6\n1 2 4 4 4 9\n''') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 4 2 2\n''') == '2'\n\nassert solution('''\n6\n1 2 4 4 4 9\n''') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '2'\nassert solution('4') == '2'\nassert solution('6') == '2'"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1 4 2 2\n''') == '2'\nassert solution('''\n6\n1 2 4 4 4 9\n''') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2\"\nassert solution() == \"2\"\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 4 2') == '2'\nassert solution('6\\n1 2 4 4 4 9') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n1\n2''') == '2'\nassert solution('''4\n1 4 2 2''') == '2'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1\\naba\") == \"7\"\nassert solution(\"4 1 1\\nabcd\") == \"4\"\nassert solution(\"4 10 1\\naaaa\") == \"12\"\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3 1\naba''') == '7'\nassert solution('''4 1 1\nabcd''') == '4'\nassert solution('''4 10 1\naaaa''') == '12'\nassert solution('''4 10 0.1\naaaa''') == '12'\nassert solution('''4 10 0.00001\naaaa''') == '12'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 3 1\naba\n\n\"\"\") == \"7\"\nassert solution(\"\"\"\n4 1 1\nabcd\n\n\"\"\") == \"4\"\nassert solution(\"\"\"\n4 10 1\naaaa\n\n\"\"\") == \"12\"\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1\\naba\") == \"7\"\nassert solution(\"4 1 1\\nabcd\") == \"4\"\nassert solution(\"4 10 1\\naaaa\") == \"12\""
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"7\""
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3 1\naba\n''') == '7'\nassert solution('''4 1 1\naaaa\n''') == '4'\nassert solution('''4 10 1\naaaa\n''') == '12'"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 1') == '7'\nassert solution('4 1 1') == '4'\nassert solution('4 10 1') == '12'\nprint('\"Run\" is good. Coding is good, keep it up!')"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_lines) == \"7\"\n\n'''\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 1 1\\nabcd') == '4'\nassert solution('4 10 1\\naba') == '4'\nassert solution('3 3 1\\naba') == '7'\nassert solution('3 10 1\\naba') == '12'\nassert solution('4 10 1\\naba') == '12'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3 1') == '7'\nassert solution('4 1 1') == '4'\nassert solution('4 10 1') == '12'"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == '1'\nassert solution('10 10') == '99'"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"6 3\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"10 3\") == \"1\"\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 1\n\n''') == '1'\n\n__author__ = 'khanhx'"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1') == '1'\n\"\"\""
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"10 1\") == \"1\"\nassert solution(\"10 10\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 1\") == \"0\""
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 1') == '2'\nassert solution('3 1') == '2'\nassert solution('5 3') == '4'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 2\n2 2 2 2\n''') == '8'\nassert solution('''\n4 -3\n3 -6 -3 12\n''') == '3'\nassert solution('''\n4 -3\n3 -6 -3 12\n''') == '3'\n'''\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2') == '8'\nassert solution('4 -3') == '3'\nassert solution('6 -3 12') == '4'\n\n\n\"\"\"\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"8\"\nassert solution(\"4 -3\") == \"3\"\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 2\n2 2 2 2\n''') == '8'\nassert solution('''\n4 -3\n3 -6 -3 12\n''') == '3'\nassert solution('''\n4 -4\n3 -6 -3 12\n''') == '0'\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n2 2 2 2\") == \"8\"\nassert solution(\"4 -3\\n3 -6 -3 12\") == \"3\"\nprint('Tests passed')"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n2 2 2 2\\n\") == \"8\"\nassert solution(\"4 -3\\n3 -6 -3 12\\n\") == \"3\"\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"8\"\nassert solution(\"4 -3\") == \"3\""
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 2\\n2 2 2 2') == '8'\nassert solution('4 -3\\n3 -6 -3 12') == '3'"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 2\n2 2 2 2\n''') == '8'\nassert solution('''\n4 -3\n3 -6 -3 12\n''') == '3'"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"8\"\nassert solution(\"4 -3\") == \"3\""
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n3 5 3 1 8\nBerBank University\nUniversity BerMall\nUniversity BerBank\n\"\"\") == \"11\"\nassert solution(\n\"\"\"\n4 2 1 300 1000\na A\nA aa\naa AA\nAA a\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([3, 5, 3, 1, 8]) == '11'\nassert solution([4, 2, 1, 300, 1000]) == '5'"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 5 3 1 8\nBerBank University\nUniversity BerMall\nUniversity BerBank\n''') == '11'\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1 300 1000\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\"\nassert solution(\"3 4 1 300 1000\") == \"10\"\nassert solution(\"100 10 1 300 1000\") == \"100\"\nassert solution(\"1 1 1 300 1000\") == \"300\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\"\nassert solution(\"3 3 3 1 8\") == \"10\"\nassert solution(\"1 5 3 1 8\") == \"5\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3 3 1 8\na A\na A\naa AA\nAA a\n''') == '11'\nassert solution('''\n5 2 1 300 1000\na A\nA aa\naa AA\nAA a\n''') == '5'"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == '11'\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\""
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5 3 1 8') == '11'\nassert solution('4 2 1 300 1000') == '5'"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1 1 4\n    ''') == 'YES'\nassert solution('''5\n    ''') == 'NO'\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"4\") == \"YES\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"YES\""
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'YES'\nassert solution() == 'NO'"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 1 1 4\n''') == 'YES'\nassert solution('''\n5\n1 1 5 2 1\n''') == 'NO'\nassert solution('''\n8\n1 1 1 3 2 2 1 1\n''') == 'YES'\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"YES\""
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"5\") == \"NO\""
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"NO\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 4') == 'YES', \"error\"\nassert solution('5 1 5 2 1') == 'NO', \"error\"\nassert solution('3 3') == 'YES', \"error\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1 4') == 'YES'\nassert solution('5 1 5 2 1') == 'NO'"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '-15'\nassert solution('4') == '1'\nassert solution('3') == '-5'\nassert solution('2') == '1100'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '-15'\nassert solution('4') == '1'\nassert solution('2') == '1100'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"-5\"\nassert solution(\"4\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"-15\""
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([int(i) for i in stdin.split()]) == '-' + str(int(solution([int(i) for i in stdin.split()]) + int(solution([int(i) for i in stdin.split()]) + int(solution([int(i) for i in stdin.split()]) + int(solution([int(i) for i in stdin.split()]) + int(solution([int(i) for i in stdin.split()]) + int(solution([int(i) for i in stdin.split()])))))))\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '-15'\nassert solution('4') == '1'\nassert solution('2') == '1100'"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == output_\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '-15'\nassert solution('4') == '1'\nassert solution('2') == '1100'\n\n\n\"\"\""
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"-\"15\"\nassert solution(\"4\") == \"-5\"\nassert solution(\"3\") == \"-5\"\nassert solution(\"2\") == \"1100\""
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n10 5 0 -5 -10\n''') == '-15'\nassert solution('''\n4\n1 1 1 1\n''') == '1'\nassert solution('''\n3\n5 1 -5\n''') == '-5'\nassert solution('''\n2\n900 1000\n''') == '1100'"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"3\") == \"NO\""
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == \"YES\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2\\n\") == \"YES\"\nassert solution(\"3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n\") == \"NO\"\nassert solution(\"5\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n\") == \"YES\"\n\n\n\"\"\"\nfrom collections import defaultdict\n\nn = int(input())\nedges = defaultdict(list)\nfor i in range(n - 1):\n    u, v = map(int, input().split())\n    edges[u].append(v)\n    edges[v].append(u)\n\nm = int(input())\nfor i in range(m):\n    u, v, x = map(int, input().split())\n    u_list = edges[u]\n    v_list = edges[v]\n    if u_list!= v_list:\n        edges[u].extend(v_list)\n        edges[v].extend(u_list)\n\nans = \"YES\"\nfor v in edges.values():\n    if len(set(v))!= len(v):\n        ans = \"NO\"\n        break\nprint(ans)"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2\n1 3\n1 4\n2 5\n2 6''') == 'YES'\nassert solution('''5\n1 2\n1 3\n1 4\n2 5\n2 6''') == 'NO'\nassert solution('''6\n1 2\n1 3\n1 4\n2 5\n2 6''') == 'YES'"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"YES\"\nassert solution() == \"YES\"\nassert solution() == \"YES\"\nassert solution() == \"YES\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"NO\"\n\n'''\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(example_input_1) == \"YES\"\nassert solution(example_input_2) == \"NO\"\nassert solution(input_data) == \"YES\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 2\n\n''') == 'YES'\nassert solution('''\n3\n1 2\n1 3\n1 4\n2 5\n2 6\n\n''') == 'NO'\n\nassert solution('''\n5\n1 2\n1 3\n1 4\n2 5\n2 6\n\n''') == 'YES'\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == 'YES'\nassert solution('''\n6\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == 'NO'\nassert solution('''\n4\n1 2\n1 3\n1 4\n2 5\n''') == 'YES'\n''')"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"YES\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'\nassert solution(stdin='''2\n1 2 3''') == '0'"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('2 6') == '0'\nassert solution('3 1 2') == '0'\nassert solution('8 2 6') == '0'\nassert solution('6 6 2') == '2'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n2 3\n''') == '1'\nassert solution('''2\n2 6\n''') == '0'\nassert solution('''3\n2 6\n''') == '2'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 1 2\") == \"1\""
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"2 6\") == \"1\"\nprint(solution(input()))\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '''\n    4\n    5\n    1 2 3\n    '''\n) == '1'\n\nassert solution(\n    '''\n    4\n    5\n    0 1 2 3\n    '''\n) == '3'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2 3\n''') == '1'\nassert solution('''\n3\n1 2\n''') == '0'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('1') == '1'\nassert solution('1 2 3') == '0'\nassert solution('1 2 3 4') == '3'\nassert solution('1 1 2 2 1') == '0'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\nassert solution() == \"0\"\nassert solution() == \"2\"\nassert solution() == \"2\""
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('2') == '1'"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '6'\nassert solution('3') == '6'\n\"\"\""
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '6'\n\n\"\"\"\n\nn = int(input())\na = list(input())\nb = list(input())\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"10\"\n\"\"\""
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '6'\n'''\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"6\""
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '6'\nassert solution('4') == '12'\nassert solution('5') == '20'\nassert solution('6') == '36'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"6\"\nassert solution(\"10\") == \"8\"\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\""
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '6'\nassert solution('1') == '1'\nassert solution('2') == '0'\n\"\"\"\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == '6'"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('100 100 5\\n5 2 1 2 1') == 'YES'\nassert solution('100 8 5\\n5 2 1 2 1') == 'NO'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('100 100 5') == 'YES'\nassert solution('100 8 5') == 'NO'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"100 100 5\") == \"YES\"\nassert solution(\"100 8 5\") == \"NO\"\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"100 100 5\") == \"YES\", \"Wrong answer!\"\nassert solution(\"100 8 5\") == \"NO\", \"Wrong answer!\"\nassert solution(\"100 1000 7\") == \"NO\", \"Wrong answer!\"\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input(2)) == 'NO'"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('100 100 5') == 'YES'\nassert solution('100 8 5') == 'NO'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"100 100 5\\n5 2 1 2 1\") == \"YES\"\nassert solution(\"100 8 5\\n1 2 3 4 5 6 7\") == \"NO\""
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n100 100 5\n5 2 1 2 1\n\"\"\"\n) == \"YES\"\nassert solution(\n\"\"\"\n100 8 5\n5 2 1 2 1\n\"\"\"\n) == \"NO\"\n\"\"\"\n>>> print(solution(\"\"\"\n100 100 5\n5 2 1 2 1\n\"\"\"))\nYES\n\n\"\"\"\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"YES\"\nassert solution('''\n100 100 5\n5 2 1 2 1\n''') == \"YES\"\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'YES'\nassert solution('\\n'.join(input().split())) == 'YES'\nassert solution('\\n'.join(input().split())) == 'NO'\n'''"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == 4\nassert solution(\"7 6\") == 3\nassert solution(\"10 10\") == 0\nassert solution(\"1 2\") == 1\nassert solution(\"10 2\") == 2\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 2\n4 1 5 10\n1 4 10 5\n''') == '4'\nassert solution('''\n7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n''') == '3'\nassert solution('''\n10 3\n1 1 10 20\n1 3 3 3\n1 7 7 7\n1 4 5 5\n1 6 6 6\n1 8 8 8\n2 2 2 2\n3 3 3 3\n4 4 4 4\n''') == '18'\n'''\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 2\n4 1 5 10\n1 4 10 5\n''') == 4\nassert solution('''\n10 2\n4 1 5 10\n1 4 10 5\n''') == 4\nassert solution('''\n10 2\n1 1 1 2 2 2 3 3 3\n''') == 3\nassert solution('''\n10 2\n1 1 1 2 2 2 3 3\n''') == 3\nassert solution('''\n10 2\n2 1 2 1 3 3 3\n''') == 3\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 2') == '4'\nassert solution('7 6') == '3'\n\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4'\nassert solution('''\n10 2\n4 1 5 10\n1 4 10 5\n''') == '4'\nassert solution('''\n7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n''') == '3'\n''')\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"7 6\") == 3\nassert solution(\"10 2\") == 4\nassert solution(\"11\") == 11\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\"\nassert solution([10, 2]) == \"4\"\nassert solution([10, 7]) == \"2\"\nassert solution([5, 5]) == \"5\"\nassert solution([7, 7]) == \"5\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == '4'\nassert solution('9 3') == '8'\nassert solution('15 2') == '17'\nassert solution('20 2') == '18'\nassert solution('25 2') == '28'\n\n'''\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '3'\nassert solution('10 2') == '4'\nassert solution('10 2') == '4'\nassert solution('2 4 2 4') == '3'\nassert solution('2 2 2 2') == '3'\n\"\"\"\n\nn, m = map(int, input().split())\nblack_cells = set()\nfor i in range(m):\n    black_cells.update(set(map(int, input().split())))\n    \n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'no'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'no'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'yes'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'yes'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'yes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\nassert solution('''\n5 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\nassert solution('''\n1 1\n2 2\n1 1\n''') == 'no'\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\n\n'''"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\n\n'''"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'no'\nassert solution('1\\n3\\n1 2\\n6\\n1 2 3\\n4 3') == 'yes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\nassert solution('''5 1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n''') == 'yes'\nassert solution('''5 1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n''') == 'no'\nassert solution('''4 1\n1\n1\n1\n1\n1\n1\n1\n1\n''') == 'yes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"yes\"\nassert solution(\"5 3\") == \"yes\"\nassert solution(\"5 3 4\") == \"no\"\nassert solution(\"10 3\") == \"yes\"\nassert solution(\"10 3\") == \"no\"\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'no'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'no'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no\\nyes\\nyes\\nno\\nyes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"no\"\nassert solution(\"5 3\") == \"yes\"\nassert solution(\"5 3\") == \"yes\"\nassert solution(\"5 3\") == \"no\"\nassert solution(\"5 3\") == \"yes\"\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 2\n1 4\n2 4\n''') == '3'\nassert solution('''5 3\n1 3\n2 5\n4 5\n''') == '2'\nassert solution('''4 2\n1 4\n2 4\n''') == '2'\nassert solution('''4 2\n1 4\n2 4\n''') == '4'\nassert solution('''4 2\n1 4\n2 4\n''') == '4'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3') == '2'\nassert solution('2 5') == '3'\nassert solution('4 5') == '3'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 3\\n2 5\\n4 5\") == \"2\"\nassert solution(\"4 2\\n1 4\\n2 4\\n\") == \"3\"\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'\n\"\"\""
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 2 1\") == \"YES\"\nassert solution(\"3 1 3 2 1\") == \"YES\"\nassert solution(\"2 1 2 2\") == \"NO\""
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 3\n1 0 1\n2 1 3\n2 1 2\n2 2 3\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n\"\"\") == \"NO\""
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == 'YES'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n2 1 3\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n2 1 3\n\"\"\") == \"YES\"\n\"\"\"\n  O(n^3)\n  \n  n - number of rooms\n  n - number of switches\n  n - number of doors\n  \n  n\n  n\n  n\n  n\n  \n\"\"\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3\n1 0 1\n2 1 3\n2 1 2\n2 2 3\n''') == 'NO'\nassert solution('''3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n''') == 'YES'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 3') == 'YES'\nassert solution('2 1 2') == 'YES'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\n1 0 1\n3 1 2 3\n2 1 2\n2 1 3\n2 2 3\n''') == 'NO'\nassert solution('''3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n''') == 'YES'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3\n1 0 1\n2 1 3\n2 1 2\n2 2 3\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == 'YES'\nassert solution('3 3') == 'NO'\nassert solution('10 2') == 'YES'\nassert solution('10 2') == 'NO'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\nassert solution(\"2 3\") == \"NO\""
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('(((#)((#)') == '1'\nassert solution('()((#((#(#()') == '2'\nassert solution('#') == '-1'\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"(((#)((#)\") == \"1\"\nassert solution(\"())\") == \"1\"\nassert solution(\"((#)()\") == \"0\"\nassert solution(\"((#)()\") == \"1\"\nassert solution(\"())(\") == \"0\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('(((#)((#)') == '1'\nassert solution('()((#((#(#()') == '2'\nassert solution('((#)') == '-1'\nassert solution('(#') == '-1'\nassert solution('#') == '-1'\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('(((#)((#)') == '1'\nassert solution('()((#((#(#()') == '2'\nassert solution('(#)') == '-1'\nassert solution('(((#((#(#((#(((#((#((#' == '4'\nassert solution('(#(#((#((#((#((#((#((#((#((#((#((#((#(#((#((#' == '5'\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''(((#)((#)\n''') == '1')\nassert solution('''()((#((#(#)\n''') == '2')\nassert solution('''((((#)((#)\n''') == '2')\nassert solution('''()((#((#(#)\n''') == '1')"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"(((#)((#)\") == \"1\"\nassert solution(\"()((#((#(#)\") == \"2\"\nassert solution(\"#\") == \"1\"\nassert solution(\"(#)\") == \"1\"\nassert solution(\"(#)\") == \"1\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"(((#)((#)\") == \"1\"\nassert solution(\"())\") == \"0\"\nassert solution(\"((#))\") == \"1\"\nassert solution(\"((()))\") == \"2\"\nassert solution(\"((((((#)))))\") == \"3\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n(((#)((#)\n\"\"\") == \"1\"\nassert solution(\"()((#(#(#)\") == \"2\"\nassert solution(\"#)#(#)\") == \"-1\"\nassert solution(\"#)#(#\") == \"1\"\nassert solution(\"((((#)((#)\") == \"2\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"(((#)((#)\") == \"1\"\nassert solution(\"()((#((#(#()\") == \"2\"\nassert solution(\"(((#))\") == \"1\"\nassert solution(\"(()((#((#(#()\") == \"2\"\nassert solution(\"#\") == \"-1\"\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '-16', solution()\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'\nassert solution('0 4') == '-16'"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3\nxoxox''') == 'xoxox'\nassert solution('''0 4\noooo''') == '-16'\nassert solution('''1 1\nx''') == 'x'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '0'\nassert solution('4 0') == '-16'"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\n\n''') == '-1'\nassert solution('''4 0\n\n''') == '16'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\n\n''') == '-1'\nassert solution('''\n4 0\n\n''') == '16'\nassert solution('''\n2 2\n\n''') == '-1'\nassert solution('''\n2 1\n\n''') == '1'\nassert solution('''\n-3 3\n\n''') == '-9'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"-\"\nassert solution(\"4 0\") == \"-16\"\nassert solution(\"0 4\") == \"-16\""
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'\nassert solution('0 4') == '-16'\nassert solution('0') == '-1'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == '-1'\nassert solution('2 3') == 'xoxox'\nassert solution('4 0') == '-16'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1\") == '17'\nassert solution(\"1 1 2\") == '2'\nassert solution(\"1 2 1\") == '2'\nassert solution(\"2 1 1\") == '1'\nassert solution(\"2 1 2\") == '0'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('1 1 2') == '4'\nassert solution('1 1 3') == '9'\nassert solution('1 2 1') == '0'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('3 3 1') == '17'\nassert solution('5 2 5') == '17'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('1 1 2') == '1'\nassert solution('2 2 2') == '1'\nassert solution('3 3 3') == '1'\nassert solution('1 2 3') == '0'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('1 2 1') == '16'\nassert solution('1 3 2') == '17'\nassert solution('1 4 2') == '17'\nassert solution('2 3 4') == '10'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == '17'\nassert solution(\"1 1 2\") == '16'\nassert solution(\"1 2 1\") == '16'\nassert solution(\"2 1 1\") == '15'\nassert solution(\"1 2 2\") == '14'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\") == \"17\"\nassert solution(\"1 1 1\") == \"17\"\nassert solution(\"1 1 1\") == \"17\"\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == \"17\"\nassert solution(\"4 1 2\") == \"6\"\nassert solution(\"6 6 2\") == \"10\"\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\") == \"17\"\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 1 1\n''') == '17'\nassert solution('''1 2 1\n''') == '17'\nassert solution('''1 3 1\n''') == '17'\nassert solution('''1 4 1\n''') == '17'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1\n1 2\n2 1\n''') == '1 1\\n1 2\\n2 1\\n'\n\nassert solution('''\n1 2\n1 2\n2 1\n''') == '1 2\\n2 1\\n1 2\\n'\n\nassert solution('''\n2 2\n1 2\n3 4\n''') == '2 3\\n2 2\\n3 2\\n3 2\\n4 2\\n4 2\\n2 2\\n2 2\\n'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '2 2 2'\nassert solution('2 2') == '2 2 2'\nassert solution('3 5') == '3 4 4'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3\n1 2 1\n2 1 2\n''') == '2 2 2'\nassert solution('''\n2 2\n1 2\n3 4\n''') == '3 2 2'\nassert solution('''\n3 3\n1 2\n2 2\n2 1\n''') == '3 3 3'\nassert solution('''\n2 2\n1 2\n2 1\n''') == '2 3 2'\nassert solution('''\n2 2\n1 2\n3 4\n''') == '2 3 2'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '2 2 2'\nassert solution('2 2') == '2 2 2'\nassert solution('3 3') == '3 3 3'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\n1 2 1\n2 1 2\n''') == '2 2 2'\nassert solution('''2 2\n1 2\n3 4\n''') == '3 2'"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2\n1 2\n3 4\n\n''') == '2 3 \n3 2 \n'''\n)\n\nassert solution('''\n2 2\n1 2\n3 4\n\n''') == '2 3 \n3 2 \n'''\n)"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3\n1 2 1\n2 1 2\n''') == '2 2 2 \nassert solution('''2 2\n1 2\n3 4\n''') == '2 3'\n\n'''\n    n, m = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n    \n    for i in range(1, n):\n        for j in range(m):\n            A[i][j] = min(A[i-1][j], A[i][j], A[i][j-1]) + 1\n\n    for i in range(n):\n        for j in range(m):\n            print(A[i][j], end=\" \")\n        print()\n    \n'''\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 3\n1 2 1\n2 1 2\n''') == '2 2 2'\n\nassert solution('''\n2 2\n1 2\n3 4\n''') == '3 2'\n\nassert solution('''\n2 2\n1 2\n3 4\n''') == '3 2'\n\nassert solution('''\n1 2\n1 2\n''') == '2 2'\n\nassert solution('''\n2 1\n1 2\n''') == '1 2'"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2 2 2\\n2 2 2\\n'\nassert solution() == '2 3\\n3 2\\n'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1 2\") == \"2 3\\n2 2 2\"\nassert solution(\"2 2\") == \"2 2\\n2 2\\n2 2\""
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n0 1\\n2 1\") == \"332748119\\n\"\nassert solution(\"1 2\\n1\") == \"3\\n\"\nassert solution(\"3 3\\n0 1 1\\n4 3 5\\n\") == \"160955686\\n\"\nassert solution(\"3 3\\n0 1 1\\n6 7 8\\n\") == \"974061117\\n\"\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''3 3\n0 1 1\n4 3 5\n''') == '160955686'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '332748119'\nassert solution('1 2') == '332748119'\nassert solution('1 2') == '332748119'\nassert solution('1 2') == '332748119'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''\n1 2\n1\n1\n''') == '332748119'\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '160955686'\n'''\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 1\n0 1\n2 1\n\n''') == '332748119'\nassert solution('''3 3\n0 1 1\n4 3 5\n\n''') == '160955686'\nprint(\"You're a smart guy, Robbie!\") if __name__ == \"__main__\" else None\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"332748119\"\nassert solution(\"1 2\") == \"332748119\"\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '332748119'\nassert solution('1 2') == '3'\nassert solution('1') == '1'\nassert solution('1 1') == '2'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n\n''') == '332748119'\nassert solution('''\n1 2\n1\n1\n\n''') == '3'\nassert solution('''\n3 3\n0 1 1\n4 3 5\n\n''') == '160955686'"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 1\n0 1\n2 1\n''') == '332748119'\n\nassert solution('''1 2\n1\n1\n''') == '3'\n\nassert solution('''2 2\n0 1\n2 1\n''') == '160955686'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == \"332748119\"\n\"\"\"\n\nfrom math import gcd\nfrom fractions import Fraction"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '6'\nassert solution('''\n5\n1 2 3 4 5\n''') == '11'\nassert solution('''\n5\n1 100 101 100 1\n''') == '102'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"11\"\nprint(solution(__import__(\"sys\").stdin.read()))\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n3 1 5 2 6''') == '11'\nassert solution('''5\n1 2 3 4 5''') == '6'\nassert solution('''5\n1 100 101 100 1''') == '102'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n3 1 5 2 6\n\"\"\") == \"11\"\nassert solution(\"\"\"\n5\n1 100 101 100 1\n\"\"\") == \"102\""
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n3 1 5 2 6\n''') == '11'\nassert solution('''\n5\n1 100 101 100 1\n''') == '102'\nprint(solution('''\n5\n1\n'''))\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '5'\nassert solution('10') == '10'\nassert solution('1 2 3 4 5') == '11'\nassert solution('1 100 101 100 1') == '102'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"6\""
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n3 1 5 2 6\n''') == '11'\nassert solution('''5\n1 2 3 4 5\n''') == '6'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '11'\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 1\") == \"Yes\"\nassert solution(\"10 1\") == \"No\"\nassert solution(\"7 6\") == \"Yes\"\n\n\"\"\"\n\nn, k = map(int, input().split())\nv = []\nfor _ in range(n - 1):\n    u, v = map(int, input().split())\n    v.append(u)\n    v.sort()\n    if v[1] - v[0] <= 2:\n        if v[0] not in v[1:] and v[-1] not in v[1:-1]:\n            v[0] = v[-1]\n\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if set(v) - set(v[i:j + 1]) <= 2 and len(v) == n - 1:\n            if set(v) - set(v[i:j + 1]) <= 2:\n                print(\"Yes\")\n                return\nprint(\"No\")"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"14 2\\n1 4\\n2 4\\n3 4\\n4 13\\n10 5\\n11 5\\n12 5\\n14 5\\n5 13\\n6 7\\n8 6\\n13 6\\n9 6\\n\") == \"Yes\"\nassert solution(\"3 1\\n1 3\\n2 3\\n\") == \"No\""
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == 'Yes'\nassert solution('3 1') == 'No'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"Yes\"\nassert solution(\"3 1\") == \"No\"\n\n\"\"\"\n\nimport collections\nimport heapq\nimport sys\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, k = map(int, stdin.split())\n        edges = collections.defaultdict(list)\n        for _ in range(n-1):\n            u, v = map(int, input().split())\n            u -= 1\n            v -= 1\n            edges[u].append(v)\n            edges[v].append(u)\n        \n        heap = [1]\n        result = 0\n        visited = set()\n        while heap and (len(visited)!= n or result!= 0):\n            current_node = heapq.heappop(heap)\n            visited.add(current_node)\n            current_node += 1\n            if current_node > n:\n                return \"No\"\n            result += 1\n            for node in edges[current_node-1]:\n                if node in visited:\n                    continue\n                visited.add(node)\n                heapq.heappush(heap, node)\n        if result == k:\n            return \"Yes\"\n        return \"No\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"Yes\"\nassert solution(\"3 1\") == \"No\"\nassert solution(\"2 2\") == \"Yes\"\nassert solution(\"3 3\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"No\"\nassert solution(\"3 1\") == \"Yes\""
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == 'No'\nassert solution('3 1') == 'Yes'"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    3 1\n    1 3\n    2 3\n    ''') == \"No\"\n\nassert solution('''\n    3 2\n    1 4\n    2 4\n    3 4\n    4 13\n    10 5\n    11 5\n    12 5\n    14 5\n    5 13\n    6 7\n    8 6\n    13 6\n    9 6\n    ''') == \"Yes\"\n''')"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"12 1\") == \"Yes\"\nassert solution(\"3 1\") == \"No\""
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == 'Yes'\nassert solution('3 1') == 'No'\n\n\"\"\"\n\nimport sys\nsys.path.append(\"..\")\n\nfrom a_graph import Graph\nfrom collections import deque"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"2 1\") == \"-1\"\nassert solution(\"3 5\") == \"0\""
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n.#.\n###\n##.\n\n''') == '1'\n\nassert solution('''\n4 2\n##\n.#\n##\n\n''') == '-1'\n\nassert solution('''\n4 5\n....#\n####.\n.###.\n.#...\n\n''') == '2'\n\nassert solution('''\n3 5\n.....\n.....\n.....\n\n''') == '0'\n\nassert solution('''\n3 5\n.####\n.####\n.####\n\n''') == '-1'"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n.#.\n###\n##.\n''') == '1'\n\nassert solution('''4 2\n##\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 1\") == \"1\""
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1'\n\nprint(solution())\n\n-----Links-----\nhttps://www.hackerrank.com/challenges/magnetic-force-between-two-gas-stations/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=greedy-algorithms\nhttps://stackoverflow.com/questions/24361927/python-3-string-formatting\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 3\n.#.\n###\n##.\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 2\n##.\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n.\\n.#\") == \"1\"\nassert solution(\"4 2\\n#.\\n.#\") == \"-1\"\nassert solution(\"3 5\\n.....\\n.....\\n.....\\n\") == \"0\"\nassert solution(\"3 5\\n.###.\\n.#..#\\n...##\\n\") == \"0\"\nassert solution(\"3 5\\n.###.\\n.#..#\\n##.##\\n\") == \"0\"\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 2') == '0'\nassert solution('4 5') == '0'\nassert solution('3 5') == '1'\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"2 1\") == \"-1\"\nassert solution(\"3 5\") == \"0\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 3\n1 0 2 3\n''') == \"YES\"\nassert solution('''\n3 10\n10 10 10\n''') == \"YES\"\nassert solution('''\n5 6\n6 5 6 2 2\n''') == \"NO\"\nassert solution('''\n3 5\n0 0 0\n''') == \"YES\"\nassert solution('''\n3 5\n0 0 0\n''') == \"YES\"\n'''"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 6\n6 5 6 2 2\n''') == 'NO'\nassert solution('''\n3 5\n0 0 0\n''') == 'YES'\nassert solution('''\n3 5\n1 1 1\n''') == 'YES'"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3\\n1 0 2 3') == 'YES\\n1 2 2 3'\nassert solution('3 5\\n10 10 10\\n') == 'YES\\n10 10 10 \nassert solution('3 5\\n0 0 0\\n') == 'NO'\nassert solution('3 5\\n10 10 10\\n') == 'YES\\n5 4 2'\n\nassert solution('5 5\\n1 2 4\\n') == 'NO'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 6\") == \"YES\"\nassert solution(\"3 5\") == \"YES\"\nassert solution(\"4 3\") == \"YES\"\nassert solution(\"5 1 2 3\") == \"NO\"\nassert solution(\"4 4 4 2\") == \"YES\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 3\n1 0 2 3\n''') == 'YES'\n\nassert solution('''\n3 10\n10 10 10\n''') == 'YES'\n\nassert solution('''\n5 6\n6 5 6 2 2\n''') == 'NO'\n\nassert solution('''\n3 5\n0 0 0\n''') == 'YES'\n\nassert solution('''\n3 5\n0 0 0\n''') == 'YES'"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3 5\",\n    \"0 0 0\"\n) == \"YES\"\n\nassert solution(\n    \"5 6\",\n    \"10 10 10\"\n) == \"YES\"\n\nassert solution(\n    \"5 5\",\n    \"0 0 0\"\n) == \"YES\"\n\nassert solution(\n    \"10 10 10\",\n    \"0 0 0\"\n) == \"NO\"\n\nassert solution(\n    \"4 3\",\n    \"1 0 2 3\"\n) == \"YES\""
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'YES\\n4 3\\n1 0 2 3\\nYES\\n5 4 2'\nassert solution() == 'YES\\n5 4 2\\n1 2 2 3\\nYES\\n10 10 10\\n5 4 2'\n\nassert solution() == 'YES\\n5 4 2\\n1 2 2 3\\nYES\\n10 10 10\\n5 4 2'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('3 10') == 'YES'\nassert solution('5 6') == 'NO'"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'YES'\nassert solution('''5 3\n2 2 1 0 2''') == 'NO'\nassert solution('''5 6\n6 5 6 2 2''') == 'YES'\nassert solution('''3 5\n0 0 0\n''') == 'YES'\nassert solution('''3 5\n0 0 0\n''') == 'NO'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5') == 'YES\\n5 4 2'\nassert solution('4 3') == 'YES\\n1 2 2 3'\nassert solution('5 6') == 'NO'\n\n\n\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '4 3 6 2'\nassert solution(input()) == '42'"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n1''') == '1'\nassert solution('''2\n1\n2''') == '2'\nassert solution('''3\n2 2 2\n3''') == '2'\nassert solution('''4\n2 4 4 2 1 2 3\n2\n3\n2\n1''') == '2 4 4'\nassert solution('''5\n1\n2\n1\n3\n1\n3\n2\n1\n1\n1''') == '1 2 3 4'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n2 1 2 3\n''') == '2 1 2 3'\nassert solution('''\n3\n2 3 2 2\n''') == '2 3 2 2'\n\nassert solution('''\n1\n1\n''') == '1'\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '1'\nassert solution('''\n4\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\n''') == '2 3 6 2'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2''') == '4 3 6 2'\nassert solution('''4\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2''') == '4 3 6 2'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2\nassert solution(stdin) == stdout\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '3'\nassert solution('4') == '2 3'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nprint(solution(stdin))\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\\n') == '4 3 6 2'\nassert solution('3\\n1 1 1\\n') == '1'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1 1'"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\n''') == '4 3 6 2'\nassert solution('''10\n
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"6\"\nassert solution() == \"7\"\nassert solution() == \"9\"\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '6'"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 1\n1 2\n1 3\n\n3\n2 1\n2 2\n3 1\n3 2\n\n4\n2 1\n2 2\n3 1\n3 2\n\n''') == '6'\n\nassert solution('''\n2\n1 1\n1 2\n\n2\n2 1\n\n''') == '3'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 1\n1 2\n1 3\n\n''') == '3'\n\nassert solution('''\n4\n2 1\n2 2\n3 1\n3 2\n\n''') == '6'\n\nassert solution('''\n4\n3 1\n3 2\n2 1\n2 2\n\n''') == '6'"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1\n1 2\n1 3''') == '3'\n\nassert solution('''4\n2 1\n2 2\n3 1\n3 2''') == '6'\n\nassert solution('''5\n1 1\n2 1\n3 1\n4 1\n5 1''') == '6'"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n4 1\n4 2\n4 3\n5 1\n5 2\n5 3''') == '6'\nassert solution('''5\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n4 1\n4 2\n4 3\n5 1\n5 2\n5 3''') == '10'\nassert solution('''4\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n4 1\n4 2\n4 3\n5 1\n5 2\n5 3''') == '5'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '6'\nassert solution('5') == '10'\nassert solution('6') == '15'\nassert solution('7') == '11'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"6\"\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '6'\nassert solution(\"4\\n2 1\\n2 2\\n3 1\\n3 2\") == '6'\nassert solution(\"3\\n1 1\\n1 2\\n1 3\") == '3'"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n1\n1\n''') == '3'\n\nassert solution('''4\n1 1\n1 2\n1 3\n''') == '6'\n\nassert solution('''5\n1 1\n1 2\n1 3\n1 4\n''') == '5'\n\nassert solution('''6\n2 1\n2 2\n3 1\n3 2\n4 1\n4 2\n5 1\n5 2\n6 1\n6 2\n''') == '6'\n\nassert solution('''7\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n''') == '7'"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1 1'\nassert solution('5') == '3 3'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1 1'\nassert solution('3') == '2 2'\nassert solution('5') == '3 3'"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n.E.\\nE.E\\n.E.\\n') == '1 1'\n\n'''\n\n\nimport sys\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\n\nn = int(input())\n\ngrid = defaultdict(lambda : 'E')\n\nfor i in range(1, n+1):\n    grid[i,i] = 'E'\n\ngrid = dict(grid)"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n.E.\nE..\nE.E''') == '-1'\nassert solution('''3\nEEE\nE..\nE.E''') == '3 3'\nassert solution('''5\nEE.EE\nE.EE.\nE...E\n.EE.E\nEE.EE''') == '4 4'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == \"1 3\\n2 2\\n3 2\\n4 4\\n5 3\"\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1 1'\nassert solution('5') == '3 3'\nassert solution('3') == '-1'\n\"\"\""
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1 1\\n2 2\\n3 3'\n\"\"\"\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n.E.\nE.E\n.E.\n\n''') == '1 1'\nassert solution('''\n5\nEE.EE\nE.EE.\nE...E\n.EE.E\nEE.EE\n\n''') == '3 3'"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n.E.E\nEE.EE\nE..E\nE.EE\nEE.EE\n''') == '1 1'\nassert solution('''\n.EE.E\nEE.EE\nEE.EE\nEE.EE\nEE.EE\n''') == '1 3'\nassert solution('''\n.E.E.E.E.E\nE..E.E.E.E.E\nEE.E.E.E.E.E\nE.E.E.E.E.E.E\nEE.E.E.E.E.E.E\n''') == '4 4'"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1 1\"\n\nassert solution(\"\") == \"-1\""
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"32\""
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"2 5\") == \"5\"\nassert solution(\"5 5\") == \"5\"\nassert solution(\"2 10\") == \"10\"\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"32\"\nassert solution(\"\") == \"\"\nassert solution(\"4\\n\") == \"\"\nassert solution(\"3\\n1\\n2\\n3\\n4\\n\") == \"32\"\nassert solution(\"4\\n100000\\n1\\n2\\n3\\n4\\n\") == \"32\"\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"32\"\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 10\\n-1 -1 -1 -1 -1\") == \"32\"\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 2\") == \"32\"\nassert solution(\"5 10\") == \"-1\"\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '32'\nassert solution('1') == '-1'"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 10\n-1 -1 -1 -1 -1\n''') == '32'\nassert solution('''\n10 10\n1 2 3 4 5 6 7 8 9 10\n''') == '45'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 10') == '32'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10\\n-1 -1 -1 -1 -1') == '32'"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 1 2\n1 1 1\n''') == '3'\nassert solution('''\n4 2 3\n1 2 4 8\n''') == '79'\nassert solution('''\n3 1 2\n1 1 1\n''') == '3'"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 2') == '3'\nassert solution('4 2 3') == '79'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"4 2 3\") == \"79\""
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"4 2 3\") == \"79\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 2') == '3'\nassert solution('4 2 3') == '79'\nassert solution('5 2 3') == '13'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 1 2\n1 1 1\n''') == '3'\nassert solution('''\n3 1 2\n1 1 1\n''') == '3'\nassert solution('''\n4 2 3\n1 2 4 8\n''') == '79'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 1 2\n1 1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4 2 3\n1 2 4 8\n\"\"\") == \"79\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1 2') == '3'\nassert solution('4 2 3') == '79'"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"3\""
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 1 2\n1 1 1\n''') == '3'\nassert solution('''4 2 3\n1 2 4 8\n''') == '79'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"7\"\nassert solution(\"2 2\") == \"7\"\nassert solution(\"2 3\") == \"7\"\nassert solution(\"3 2\") == \"4\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '7'\nassert solution('1 1') == '7'\nassert solution('2 1') == '7'\nassert solution('2 2') == '7'\nassert solution('3 1') == '7'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n    2 3\n\"\"\") == \"7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"7 7 7\"\nassert solution(\"4 3\") == \"7 7 7 7\"\nassert solution(\"5 5\") == \"7 7 7 7 7\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"7 7 7\"\nassert solution(\"3 2\") == \"7 7\"\nassert solution(\"10 3\") == \"4 4 4 4 4 4 4 4 4 4 4 4 4\""
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '7'\nassert solution('4 3') == '4'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"7 7 7\"\nassert solution(\"4 1\") == \"7 7 7 7\"\nassert solution(\"5 1\") == \"7 7 7 7 7\"\n\n---Input---\n3 4\n\n---Output---\n7 7 7 7 7 7\n\n---Input---\n1 2\n\n---Output---\n7 7 7 7 7 7\n\n---Input---\n2 3\n\n---Output---\n7 7 7 7 7 7\n\n---Input---\n3 2\n\n---Output---\n7 7 7 7 7 7\n\n---Input---\n4 1\n\n---Output---\n7 7 7 7 7 7\n\n---Input---\n5 1\n\n---Output---\n7 7 7 7 7 7\n\n---Input---\n2 1\n\n---Output---\n7 7 7 7 7 7\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"7\"\nassert solution(\"3 1\") == \"7\"\nassert solution(\"1\") == \"7\"\nassert solution(\"2\") == \"7\"\nassert solution(\"3\") == \"7\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"7\"\nassert solution(\"3 3\") == \"7\"\nassert solution(\"4 3\") == \"4\"\nassert solution(\"4 4\") == \"7\""
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\n2 1\n1 3\n3 3\n2 2\n3 3\n2 2\n2 3\n3 3\n3 3\n2 1\n2 1\n2 1\n3 3\n2 1\n1 3\n3 3\n3 3\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n3 3\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n3 3\n2 2\n2 2\n2 2\n3 3\n2 1\n1 3\n2 1\n3 3\n3 3\n2 2\n2 2\n2 2\n2 2\n2 2\n3 3\n2 2\n2 2\n2 2\n2 2\n2 2\n3 3\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n3 3\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n3 3\n2 1\n1 3\n3 3\n3 3\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n3 3\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 2\\n3 2\\n4 5') == '6'\nassert solution('9 3\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8') == '9'\n\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 2') == '6'\nassert solution('9 3') == '9'\nassert solution('8 9') == '6'"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\n\"\"\") == \"6\"\nassert solution(\"\"\"\n9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8\n\"\"\") == \"9\""
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 2') == '6'\nassert solution('9 3') == '9'"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\n''') == '6'\nassert solution('''9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8\n''') == '9'\nassert solution('''4 3\n1 3\n2 2\n3 2\n2 6\n3 5\n3 4\n''') == '6'\n\n'''\n---===Result===---\nRuntime: 788 ms, faster than 16.56% of Python3 online submissions for Maximum Sum of All Paths.\nMemory Usage: 14.2 MB, less than 8.19% of Python3 online submissions for Maximum Sum of All Paths.\n\nI was able to come up with a much simpler solution in the second attempt, which is my own code, but not my most efficient solution. The code is not mine, so I didn't bother to explain.\n\n\n---===My Solution===---\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\n\ndp = [[0] * (n + 1) for _ in range(k + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        dp[j][i] = dp[j][i - 1] + dp[j - 1][i - 1]\n        for k in range(2, j + 1):\n            dp[j][i] = max(dp[j][i], dp[j][i] + dp[k - 1][i - k])\n\nprint(dp[k][n])\n\n'''"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n1 5 6 2\\n1 3\\n3 2\\n4 5\\n3 7\\n4 3\\n4 6\\n\") == '6'\n\nassert solution(\"9 3\\n3 2 1 6 5 9\\n8 9\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8\\n\") == '9'"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 2') == '6'\nassert solution('9 3') == '9'\n\n\n\"\"\""
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''7 2\n1 5 6 2\n1 3\n3 2''') == '6'\nassert solution('''9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8''') == '9'\nassert solution('''10 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8''') == '8'\n\n\n\"\"\"\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 2\\n') == '6'\nassert solution('9 3\\n') == '9'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\n''') == '6'\nassert solution('''9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8\n''') == '9'"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('111') == '-1'\nassert solution('0010100') == '3 1 3 4'\nassert solution('01010001') == '3 1 2 5'"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0010100\") == \"3 1 3 4\"\nassert solution(\"111\") == \"-1\""
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0010100') == '3 1 3 4'\nassert solution('111') == '-1'\nassert solution('1111') == '-1'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0010100\") == \"3 1 3 4\"\nassert solution(\"111\") == \"-1\""
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n011\n111\n''') == '3'\nassert solution('''\n0011\n111\n''') == '-1'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''011000001''') == '''3 1 3 4'''\nassert solution('''011000001''') == '''3 2 5 6'''\nassert solution('''100100''') == '''-1'''\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10010000') == '2'\nassert solution('01010101') == '-1'\nassert solution('01010101010') == '2'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0010100') == '3 1 3 4'\nassert solution('111') == '-1'\nassert solution('11111') == '4 3 2 1'\nassert solution('11') == '1'\nassert solution('111') == '-1'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0010100') == '3 1 3 4'\nassert solution('1111111') == '-1'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0010100\") == \"3 1 3 4\"\nassert solution(\"111\") == \"-1\"\nassert solution(\"101010\") == \"-1\""
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"1 3\") == \"6\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == '1'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(samples[0]) == '1'\nassert solution(samples[1]) == '2'\nassert solution(samples[2]) == '4'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 3') == '1'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n2 1 2\\n2 2 3\\n') == '1'\nassert solution('1 3\\n3 1 2 3\\n') == '6'\nassert solution('2 4\\n2 1 2\\n3 2 3 4\\n') == '2'\nassert solution('3 7\\n2 1 2\\n2 3 4\\n3 5 6 7\\n') == '24'"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '1', \"a\"\nassert solution('2 2') == '1', \"b\"\nassert solution('3 2') == '2', \"c\"\nassert solution('2 2') == '0', \"d\""
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3\n2 1 2\n2 2 3\n''') == '1'\nassert solution('''2 4\n2 1 2\n3 2 3 4\n''') == '2'\nassert solution('''3 7\n2 1 2\n2 3 4\n3 5 6 7\n''') == '24'"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3') == '1'\nassert solution('2 3') == '1'\nassert solution('1 2') == '1'\n\nimport unittest\n\nclass Test_solution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('1 3'), '1')\n        self.assertEqual(solution('2 3'), '1')\n        self."
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3') == '1'\nassert solution('1 4') == '1'\n\nassert solution('2 3') == '1'\nassert solution('2 2') == '1'\n\nassert solution('3 7') == '24'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n1\n3\n2\n5\n1\n4\n2\n5\n''') == '6'\nassert solution('''\n4\n5\n5\n4\n3\n3\n4\n2\n3\n''') == '4'\nassert solution('''\n4\n2\n4\n5\n1\n1\n5\n1\n''') == '8'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4\n1 4 2 3 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n1 4 2 3 1\n\"\"\") == \"6\"\nassert solution(\"\"\"\n4\n1 5 4 7\n\"\"\") == \"8\"\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 4 2 3 1\n''') == '3'\nassert solution('''\n5\n1 4 2 3 1\n''') == '6'\nprint(solution('''\n3\n1 4 2 3 1\n'''))"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 4\\n') == '6'\nassert solution('5\\n1 2 3 4 5\\n') == '6'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 4 2 3 1') == '3'\nassert solution('4\\n1 5 4 7') == '6'"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 4 2 3 1') == '3'\nassert solution('4\\n1 5 4 7') == '6'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\") == \"3\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n4\\n2 3 1\") == \"3\"\nassert solution(\"2\\n3 5 4 7\") == \"7\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '3'\nassert solution([int(x) for x in stdin.split()]) == '6'\n\n\nsolution([1, 4, 2, 3, 1])\nsolution([1, 5, 4, 7])\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 4 2 3 1\\n') == '3\\n'\nassert solution('4\\n1 5 4 7\\n') == '6\\n'"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '62'\nassert solution('8') == '64'\nassert solution('10') == '86'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1 1 1 1 1\n\"\"\") == \"64\"\nassert solution(\"\"\"\n2\n3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\n0 1 1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n0 0 0 1 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"62\""
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == ''\nassert solution(\"1\") == '4'\nassert solution(\"2\") == '1'\nassert solution(\"3\") == '1'\nassert solution(\"4\") == '2'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '4'\nassert solution('3') == '6'\nassert solution('4') == '20'\nassert solution('5') == '62'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '4'\nassert solution('4') == '20'\nassert solution('5') == '62'"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1 1 2 3\n''') == '4'\nassert solution('''4\n1 1 1 1\n''') == '6'\nassert solution('''6\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '25'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n1 2\n2 1''') == '6'\nassert solution('''3\n1 2\n2 1\n3 5''') == '15'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 1\n1 1\n1 1''') == '6'\nassert solution('''4\n1 2\n2 1\n3 5\n5 3''') == '15'\nassert solution('''5\n1 2\n2 1\n3 5\n5 3''') == '7'"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2\\n2 1\\n3 5\\n5 3') == '15'\nassert solution('3\\n1 1\\n1 1\\n1 1') == '6'\nassert solution('1') == '7'\nassert solution('1\\n5 6') == '7'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 1\n1 1\n1 1\n''') == '6'\nassert solution('''\n4\n1 2\n2 1\n3 5\n5 3\n''') == '15'\nassert solution('''\n1\n5 6\n''') == '7'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n2 1\\n2 1\\n3 5\\n5 3') == '7'\nassert solution('1\\n5 6') == '7'\nassert solution('1') == '1'\nprint(\"solution() is ok\")\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([3, 1, 1, 1]) == \"6\"\nassert solution([4, 1, 2, 3, 5, 3]) == \"15\"\nassert solution([1, 5, 6]) == \"7\"\nassert solution([1, 5, 6, 1, 5, 6, 1, 5, 6, 1]) == \"9\"\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n1 2\n2 1\n3 5\n5 3\n''') == '15'\n\nassert solution('''\n3\n1 1\n1 1\n1 1\n''') == '6'\n\nassert solution('''\n4\n1 2\n2 1\n3 5\n5 3\n''') == '15'"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 1\n1 1\n1 1\n\n''') == '6'\nassert solution('''\n4\n1 2\n2 1\n3 5\n5 3\n\n''') == '15'\nassert solution('''\n1\n5 6\n\n''') == '7'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"6\"\nassert solution(input_2) == \"7\""
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1\\n1 1\\n1 1') == '6'\nassert solution('4\\n1 2 3 4') == '15'\nassert solution('2\\n1 2') == '7'"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '6'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n\n4\n2\n\n''') == '1'\nassert solution('''2\n1\n4 4\n2\n\n''') == '3'\nassert solution('''3\n3 3\n10 10 10\n17\n\n''') == '6'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 1\nassert solution('2') == 3\nassert solution('3') == 6\n\n\"\"\""
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '3'\nassert solution(input()) == '6'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n2\n\n''') == \"3\"\nassert solution('''\n3\n1\n4\n2\n\n''') == \"3\"\nassert solution('''\n3\n4\n4\n3\n\n''') == \"6\"\nassert solution('''\n3\n3\n4\n1\n\n''') == \"3\"\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n4 4\n2\n''') == '3'\n\nassert solution('''\n3\n3 3\n10 10 10\n17\n''') == '6'\n\n'''\n10. The problem statement can be expressed as the following: Given a coin set of n types and a number of m tugricks to be paid, the task is to count the number of ways to pay exactly m tugricks using the coin set.\n\nThere are n coins, with denominations of a_1, a_2,..., a_n and b_1, b_2,..., b_n. The number of ways to pay m tugricks is defined as follows:\n\n    How many ways to pay exactly m tugricks is 1 if all the coins of the set are used.\n    How many ways to pay exactly m tugricks is 2 if some of the coins of the set are used.\n    The number of ways to pay m tugricks can be written as the sum of the number of ways to pay exactly m \u2212 1 tugricks using the first n - 1 coins and the number of ways to pay exactly m \u2212 1 tugricks using the last m \u2212 n coins.\n\n    For example, if n = 3 and m = 2, then the number of ways to pay 2 tugricks is as follows:\n\n    1, 1, 1\n    1, 2, 1\n    2, 1, 1\n    2, 2, 1\n    1, 1, 2\n    2, 1, 2\n    2, 2, 2\n\nYour task is to complete the function numWays(n, m) that takes the number of coins and the number of tugricks and returns the number of ways to pay m tugricks using the first n - 1 coins.\n\nNote: You can assume that n and m are non-negative integers and that the sum of all of the coin denominations of the set is not greater than 3\u00b710^5.\n\nNote: For this problem, the judge will always choose the smallest number of coins for the number of tugricks.\n\n\n'''"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n1\n2\n''') == '1'\nassert solution('''3\n3\n3\n''') == '0'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 4 3 1000000007\n1 2 1\n2 3 2\n3 4 2\n4 5 1\n5 6 1''') == '0'\nassert solution('''5 4 5 1000000007\n1 2 3\n1 2 4\n2 2 4\n1 3 2\n2 4 3''') == '10'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3 3 100\n1 1 1\n''') == '10'\nassert solution('''\n3 6 5 1000000007\n1 2 1\n''') == '0'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 5 6 11') == '0'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3 3 1\") == \"2\"\nassert solution(\"3 5 6 11\") == \"0\"\nassert solution(\"2 3 4 5\") == \"1\"\nassert solution(\"2 3 6 5\") == \"2\"\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3 3 3 100\") == \"10\"\nassert solution(\"3 5 6 11\") == \"0\"\nassert solution(\"5 8 3 15\") == \"16\"\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 6 5 1000000007') == '0'"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 6 5 1000000007') == '0'"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3 3 100\n1 1 1\n\n''') == '10'\nassert solution('''\n3 5 6 11\n1 2 1\n\n''') == '0'\nassert solution('''\n10 10 10 100\n1 1 1\n\n''') == '10'\nassert solution('''\n10 100 100\n1 1 1\n\n''') == '10'\nassert solution('''\n100 100 100\n1 1 1\n\n''') == '0'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 6 5 1000000007') == '0'\nassert solution('3 5 6 11') == '0'\nassert solution('10001000','10000') == '1'\nassert solution('10000','10001000') == '0'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 5 6 11') == '0'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 3\na\nbcdefghi\njklmnopqrstu\nvwxyz\n''') == 'YES'\nassert solution('''\n4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n''') == 'NO'\n\nstdin = '''\n1 2 3\na\nbcdefghi\njklmnopqrstu\nvwxyz\n'''\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2 3\\nintel\\ncode\\nch allenge\\n\") == \"YES\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"YES\", \"Sample\"\nassert solution(\"4 1 2 3\") == \"NO\", \"Sample\""
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"YES\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n1\n2\n1\n''') == 'YES'\nassert solution('''\n3\n1\n1\n1\n''') == 'NO'\nassert solution('''\n4\n1\n2\n1\n''') == 'YES'\nassert solution('''\n4\n1\n3\n1\n''') == 'NO'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n2 2 3\\nintel\\ncode\\nch allenge') == 'YES'\nassert solution('4\\n1 2 3 1\\na\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\no\\np\\qr\\st\\u\\vw\\xy\\za') == 'NO'\nprint(solution(input()))\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n2 2 3\\nintel\\ncode\\nch allenge') == 'YES'\nassert solution('4\\n1 2 3 1\\na\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj\\nk\\nl\\nm\\no\\np\\q\\r\\s\\t\\v\\n\\n') == 'NO'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == 'YES'\nassert solution('2 2 3') == 'NO'\nassert solution('3 2 3') == 'YES'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n3 1 3\na\nb\nc\n\n''') == 'YES'\n\nassert solution('''\n3\n1 1 3\na\nb\nc\n\n''') == 'NO'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n3 1 5''') == '26'\nassert solution('''1\n10''') == '10'\n\nprint(solution('''1\n10'''))\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '10'\nassert solution('3') == '26'\nassert solution('2') == '12'\nassert solution('4') == '32'\nassert solution('5') == '101'"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '26'\nassert solution('1') == '10'\nassert solution('2') == '10'"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"10\"\nassert solution(\"2\") == \"22\"\nassert solution(\"3\") == \"26\"\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '21'\nassert solution('3') == '26'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '26'\nassert solution('1') == '10'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"26\"\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n3 1 5') == '26'\nassert solution('1\\n10') == '10'\n\n'''\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"10\"\nassert solution(\"2\") == \"20\"\nassert solution(\"3\") == \"26\"\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '26'"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"3 40\") == \"32\"\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"3 40\") == \"32\"\nassert solution(\"4 1\") == \"4\"\n\n\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndays = 0\ni = 0\n\nwhile i < len(a):\n    if a[i] > k:\n        break\n    days += 1\n    if i < len(a) - 1 and a[i] > a[i + 1]:\n        days += 1\n        i += 1\n    else:\n        days = 0\n    i += 1\n\nprint(days)\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4') == '3'\nassert solution('3 40') == '32'\nassert solution('4 1') == '1'"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 4\n1 3 5\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3 40\n10 30 50\n\"\"\") == \"32\"\n\nassert solution(\"\"\"\n5 7\n1 1 2 3 4 5\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n5 100\n1 1 2 3 4 5\n\"\"\") == \"100\"\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3 4\n1 3 5\n\"\"\") == \"3\"\nassert solution(\"\"\"3 40\n10 30 50\n\"\"\") == \"32\"\n\n\"\"\"\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 4\n1 3 5\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3 40\n10 30 50\n\"\"\") == \"32\"\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"3 40\") == \"32\""
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4\\n1 3 5') == '3'\nassert solution('3 40\\n10 30 50') == '32'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n1 3 5\\n\") == \"3\"\nassert solution(\"3 40\\n10 30 50\\n\") == \"32\""
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([3, 4]) == 3\nassert solution([3, 40]) == 32\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 1\\n1 1\\n3 3\\n3 3\\n4 4\\n4 4\\n5 5\\n') == '1 2 4'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5''') == '1 2 4'\nassert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5''') == '1 2 4'\nassert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5''') == '1 2 4'\nassert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5''') == '1 2 4'\nassert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5''') == '1 2 4'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1 4 5 6 7 8 9\"\nassert solution() == \"1 2 4\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1 4 5 6 7 8 9'\nassert solution('5 1') == '1 2 4'\nassert solution('3 1') == '1 2 3 4'"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n9 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\n''') == '1 4 5 6 7 8 9'\n\nassert solution('''\n5 1\n1 1\n3 3\n2 3\n1 2\n3 4\n4 5\n''') == '1 2 4'\n\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2'\n\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2'\n\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1 4 5 6 7 8 9\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 1\n1 1\n3 3\n2 3\n1 2\n3 4\n4 5\n\"\"\") == \"1 2 4\"\nassert solution(\"\"\"\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n\"\"\") == \"\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n9 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\n''') == '1 4 5 6 7 8 9'\nprint('Solution: %s' % solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n'''))\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2 4'\nprint('Solution: %s' % solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n'''))\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2 4'\nprint('Solution: %s' % solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n'''))\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1 4'\nassert solution('5 1') == '1 2 4'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1 4'\nassert solution('5 1') == '1 4'\nassert solution('10 1') == '1 4'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '0'\nassert solution('6 3') == '2'"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2\n1 5.0\n2 5.5\n3 6.0''') == '1'\nassert solution('''3 3\n1 5.0\n2 5.5\n3 6.0''') == '0'\nassert solution('''6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125''') == '2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2\n2 1\n1 2.0\n1 3.100''') == '1'\n\nassert solution('''6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125''') == '2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"6 3\") == \"2\""
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '0'"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '0'\nassert solution('6 3') == '2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"6 3\") == \"2\""
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\""
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2\n1 2.0\n1 3.100''') == '1'\nassert solution('''3 3\n1 5.0\n2 5.5\n3 6.0''') == '0'\nassert solution('''6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125''') == '2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 1\\n1 2.0\\n1 3.100\\n\") == \"1\"\nassert solution(\"3 3\\n1 5.0\\n2 5.5\\n3 6.0\\n\") == \"0\"\nassert solution(\"6 3\\n1 14.284235\\n2 17.921382\\n1 20.328172\\n3 20.842331\\n1 25.790145\\n1 27.204125\\n\") == \"2\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 2\n1 2 3 6 5\n\n''') == '3'\nassert solution('''\n8 10\n2 3 8 10 10 9 7 5 8 4 6 7\n\n''') == '4'\nassert solution('''\n1 10\n2 3 4 5 6 7 8 9 10\n\n''') == '9'\nassert solution('''\n2 3\n1 2 3 4 5\n\n''') == '1'\nassert solution('''\n5 2\n2 3 6 5 4 10\n\n''') == '4'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2\n2 3 6 5 4\n''') == '3'\n\nassert solution('''\n4 5\n5 2 3 6 4 7 8 10\n''') == '2'\n\nassert solution('''\n4 6\n3 4 5 6 7 8 9 10\n''') == '3'\n\nassert solution('''\n4 7\n4 5 6 7 8 9 10\n''') == '2'\n\nassert solution('''\n5 5\n4 6 5 8 9 10\n''') == '3'"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"3\"\nassert solution(\"10 2\") == \"2\"\nassert solution(\"10 2\") == \"2\"\nassert solution(\"10 2\") == \"2\"\nassert solution(\"10 2\") == \"2\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n\") == \"3\""
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '3'\n\n'''\n\nn, k = map(int, input().split())\n_arr = list(map(int, input().split()))\n\n_set = set(_arr)\n_max = 0\n\nfor i in range(len(_arr)):\n    for j in range(i+1, len(_arr)):\n        _tmp = _arr[i] * k + _arr[j]\n        if _tmp in _set:\n            _set.remove(_tmp)\n    if len(_set) > _max:\n        _max = len(_set)\n\nprint(_max)"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2\\n2 3 6 5 4 10') == '3'\nassert solution('5 3\\n2 3 6 5 4 10') == '2'\nassert solution('5 4\\n2 3 6 5 4 10') == '4'"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"3\"\n\n--------------------------------------------------"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 2\n2 3 6 5 4 10''') == '3'\nassert solution('''6 1\n10 9 8 7 6 5''') == '6'\nassert solution('''6 3\n2 3 6 5 4 10''') == '4'\nassert solution('''6 3\n2 3 6 5 4 10''') == '4'\nassert solution('''6 2\n1 2 3 4 5 6''') == '5'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 6 5 4 10\") == \"3\"\nassert solution(\"10 3 2 6 5 4 7 8 9 1 2\") == \"9\"\nassert solution(\"5 3 1 2 4 7 10\") == \"3\"\nassert solution(\"2 3 4 5 6 1 7 8\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 2\\n2 3 6 5 4 10\\n\") == \"3\"\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('9') == '10'\n\n\n\"\"\"\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n2\n''') == '2'\nassert solution('''\n2\n1 2\n''') == '3'\nassert solution('''\n3\n1 2 1\n''') == '4'\nassert solution('''\n9\n1 2 1 2 2 2 2 2 3\n''') == '10'\nassert solution('''\n10\n1 2 1 2 2 2 2 2 3\n''') == '10'\n\nimport sys\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"9\") == \"10\"\nassert solution(\"8\") == \"8\""
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 1\n''') == '2'\nassert solution('''9\n1 2 1 2 2 2 2 2 3\n''') == '10'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"9\") == \"10\"\nassert solution(\"1 2 1 3 2 2 2 2 3\") == \"10\"\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '4'\nassert solution('9') == '10'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"9\") == \"10\""
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2\n''') == '2'\nassert solution('''\n3\n1 2 1 3 2 2 2 2 3\n''') == '4'\nassert solution('''\n9\n1 2 1 3 2 2 2 2 3\n''') == '10'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 1 3 2 2 2 2 3') == \"4\"\nassert solution('9 1 2 1 2 2 2 2 2 3') == \"10\""
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"4\"\n\nprint(solution(input()))"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n\n''') == '4'\nassert solution('''1\n\n''') == '1'\nassert solution('''2\n\n''') == '2'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(3) == '4'\nassert solution(5) == '10'\nassert solution(10) == '2857'\n\"\"\""
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '4'\nassert solution('4') == '6'\nassert solution('5') == '8'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"4\""
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '6'\nassert solution('4') == '8'\nassert solution('5') == '10'"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(['1\\n', '2\\n', '3\\n', '4\\n']) == '4'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n') == '4'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '1'\nassert solution('4\\n') == '0'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n6\n\"\"\"\n) == \"4\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 4\n1 5 1 4\n\"\"\") == \"5\"\nassert solution(\"\"\"2 2\n3 2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"5 2\n1 5 1 4\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 6\") == \"5\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 6\\n\"\n    \"1 5 1 4\\n\"\n    ) == \"5\"\n\nassert solution(\n    \"3 7\\n\"\n    \"1 2 3\\n\"\n    ) == \"0\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 3\\n1 5 1 4\\n\") == \"5\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 6\n1 5 1 4\n''') == '5'\n\nassert solution('''4 6\n1 5 1 4\n''') == '6'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"5\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4') == '5'\nassert solution('5 5') == '4'\n\"\"\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 6\") == \"5\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 6\\n1 5 1 4\") == \"5\"\nassert solution(\"6 6\\n1 5 1 4\") == \"6\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"+-+-+\") == \"1\"\nassert solution(\"+-+-++\") == \"2\"\nassert solution(\"+-+-+++\") == \"3\"\nassert solution(\"-+-+-++\") == \"1\"\nassert solution(\"-++-+-++\") == \"2\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('+-+-+') == '1'\nassert solution('+-+-+-') == '2'\nassert solution('+-+-+-++') == '3'"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('++++') == '3'\nassert solution('++--') == '2'\nassert solution('+--+') == '1'\n\nsolution(\"---+++--+\")\n\nsolution(\"+++++---+++--+\")\n\nsolution(\"++--+++--+\")\n\nsolution(\"++---+++--+\")\n\nsolution(\"++++++++--+\")\n\nsolution(\"+++++++---+--+\")\n\nsolution(\"+++++++--+-+++\")\n\nsolution(\"+++++++---+--+-+++\")\n\nsolution(\"+++++++--+-+++--+\")\n\nsolution(\"+++++++--+-+++--+\")\n\nsolution(\"+++++++--+-+++--+-+++\")\n\nsolution(\"+++++++--+-+++--+-+++--+\")\n\n\nfor stdin in test_cases:\n    print(solution(stdin))\n    print(stdin)\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(solution.__doc__) == '1'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"+-+-+\") == \"1\"\nassert solution(\"+--+\") == \"2\"\nassert solution(\"+--+-\") == \"3\"\nassert solution(\"+-+++-+-\") == \"4\"\nassert solution(\"+-+++-+-++-+-\") == \"5\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('+-+-+') == \"1\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n\") == \"10110\"\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\nclass Node(object):\n    def __init__(self, name, val):\n        self.name = name\n        self.val = val\n        self.edges = []\n        self.visited = False\n        self.came_from = None"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"10\\n\"\n    \"AND 9 4\\n\"\n    \"IN 1\\n\"\n    \"IN 1\\n\"\n    \"XOR 6 5\\n\"\n    \"AND 3 7\\n\"\n    \"IN 0\\n\"\n    \"NOT 10\\n\"\n    \"IN 1\\n\"\n    \"IN 1\\n\"\n    \"AND 2 8\\n\"\n) == \"10110\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_data) == \"10110\"\nprint(solution(input_data))\n\n\"\"\""
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(example) == \"10110\"\nassert solution(other) == \"11100\"\nassert solution(extreme) == \"10010\"\n\nn, q = map(int, stdin.split())\n\nG = nx.Graph()\n\nfor i in range(n):\n    x, y = stdin.split()\n    G.add_node(i, type=x, val=i)\n\nfor i in range(n - 1):\n    x, y = stdin.split()\n    if x == 'AND':\n        G.add_edges_from([(i, j) for j in range(i + 1, n)])\n    elif x == 'OR':\n        G.add_edges_from([(i, j) for j in range(i + 1, n)])\n    elif x == 'XOR':\n        G.add_edges_from([(i, j) for j in range(i + 1, n)])\n    elif x == 'NOT':\n        G.add_edges_from([(i, j) for j in range(i + 1, n)])"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '10110'\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '10110'\nassert solution('''\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '111011'\nassert solution('''\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '001011'\nassert solution('''\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '101011'\nassert solution('''\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '1010'\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\nAND 4 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n\") == \"10110\"\nassert solution(\"1\\nAND 1 2\\nIN 0\\nNOT 4\\nIN 2\\nOR 5 6\\nIN 1\\nAND 7 8\\nIN 0\\nAND 2 8\\nIN 1\\nOR 3 4\\nIN 2\\nOR 5 6\\nIN 1\\nNOT 9\\nIN 1\\nXOR 2 8\\nIN 2\\nOR 7 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nNOT 9\\nIN 1\\nAND 2 8\\nIN 2\\nOR 7 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nNOT 9\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nXOR 2 8\\nIN 2\\nNOT 7 6\\nIN 1\\nNOT 5 4\\nIN 2\\nNOT 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nNOT 9\\nIN 1\\nAND 2 8\\nIN 2\\nOR 7 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nXOR 2 8\\nIN 2\\nNOT 7 6\\nIN 1\\nNOT 5 4\\nIN 2\\nNOT 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nNOT 9\\nIN 1\\nAND 2 8\\nIN 2\\nOR 7 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nNOT 9\\nIN 1\\nAND 2 8\\nIN 2\\nOR 7 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nXOR 2 8\\nIN 2\\nNOT 7 6\\nIN 1\\nNOT 5 4\\nIN 2\\nNOT 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nNOT 9\\nIN 1\\nAND 2 8\\nIN 2\\nOR 7 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nXOR 2 8\\nIN 2\\nNOT 7 6\\nIN 1\\nNOT 5 4\\nIN 2\\nNOT 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\nOR 3 6\\nIN 1\\nOR 5 4\\nIN 2\\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '10110'\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n') == '10110'\nassert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n') == '10110'\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"10110\"\nassert solution(\"1\") == \"1\"\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 3 1\\n\"\n    \"1 2 3 2 1\\n\"\n    \"1 2 3\"\n) == \"2\\n\"\n\nassert solution(\n    \"5 3 2\\n\"\n    \"1 2 3 2 1\\n\"\n    \"1 2 3\"\n) == \"2\\n\"\n\nassert solution(\n    \"8 3 3\\n\"\n    \"3 3 3 2 2\\n\"\n    \"3 2 2 3 3 1\\n\"\n    \"3 1 1 3 2 2\\n\"\n    \"2 1 3 3 2 1\\n\"\n    \"1 1 3 2 1 1 2\\n\"\n    \"1 1 3 2 1 1 1\"\n) == \"9\\n\"\n\nassert solution(\n    \"2 3 4\\n\"\n    \"1 2 2 1\\n\"\n    \"1 2 2\"\n) == \"2\\n\"\n\nassert solution(\n    \"8 7 2\\n\"\n    \"1 2 3 2 2 1\\n\"\n    \"1 2 2 2 3 1\\n\"\n    \"1 1 3 2 2 1\\n\"\n    \"2 2 2 1 1 1 1\\n\"\n    \"1 2 2 1 2 2 1\\n\"\n    \"1 2 2 2 1 1 1\"\n) == \"6\\n\""
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 3 1\n1 2 3 2 1\n1 2 3\n\n''') == '2'\n\nassert solution('''\n5 3 2\n1 2 3 2 1\n1 2 3\n\n''') == '2'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 1') == '2'\nassert solution('6 3 2') == '1 2'"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3 1\") == \"2\"\nassert solution(\"6 3 2\") == \"2\"\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3 1') == '2'\nassert solution('6 3 2') == '2'"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 1\\n1 2 3 2 1\\n1 2 3\\n') == '2'\nassert solution('6 3 2\\n1 3 2 2 3 1\\n1 2 3\\n') == '2'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 1\\n1 2 3 2 1\\n1 2 3') == '2\\n1 3'\nassert solution('6 3 2\\n1 2 3\\n1 3') == '2\\n1 2'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '1 2'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n5 3 1\n1 2 3 2 1\n1 2 3\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n5 3 1\n1 2 3 2 1\n1 2 3\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n10 4 5\n1 9 2 5 8 3 4 6 7 6 5 4 3 2 1\n1 2 3\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n10 4 5\n1 9 2 5 8 3 4 6 7 6 5 4 3 2 1\n1 2 3\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n6 3 2\n1 3 2 2 3 1\n1 2 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3 1') == '2'\nassert solution('6 3 2') == '2'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 1 2\n1 3\n1 2\n''') == '2'\nassert solution('''3 3 1\n2\n1 2\n1 3\n2 3\n''') == '0'"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2\\n1 3\\n1 2\") == \"2\"\nassert solution(\"3 3 1\\n2\\n1 2\\n1 3\\n2 3\") == \"0\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 1 2') == '2'\nassert solution('3 3 1') == '0'"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2\") == \"2\"\nassert solution(\"3 3 1\") == \"0\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 1 2\n1 3\n1 2\n\n''') == '2'\nassert solution('''3 3 1\n2\n1 2\n1 3\n2 3\n\n''') == '0'\nassert solution('''3 3 1\n2\n1 2\n1 3\n2 3\n\n''') == '0'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 1 2\n1 3\n1 2\n\n''') == '2'\nassert solution('''3 3 1\n2\n1 2\n1 3\n2 3\n\n''') == '0'\nassert solution('''3 3 1\n2\n1 2\n1 3\n2 3\n\n''') == '0'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 1\\n2\\n1 2\\n1 3\\n') == '0'\nassert solution('2 1\\n2\\n1 2\\n') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3 2') == '2'\nassert solution('4 1 2') == '0'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([4, 1, 2]) == '2'\nassert solution([3, 1, 2]) == '0'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 1 2\n1 3\n1 2\n''') == '2'\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"6\"\n    \"10 2 3 5 4 2\"\n    ) == \"3\"\n\nassert solution(\n    \"4\"\n    \"100 100 100 100\"\n    ) == \"1\"\n\nassert solution(\n    \"8\"\n    \"7 6 5 4 3 2 2 3\"\n    ) == \"4\""
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"6\") == \"1\""
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '3'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"6\") == \"3\"\nassert solution(\"8\") == \"4\""
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '3'\nassert solution('4') == '1'\nassert solution('8') == '4'"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '3'\nassert solution('4') == '1'\nassert solution('8') == '4'\n\n\n\"\"\""
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n6\n10 2 3 5 4 2\n''') == '3'\n\nassert solution(\n'''\n4\n100 100 100 100\n''') == '1'\n\nassert solution(\n'''\n8\n7 6 5 4 3 2 2 3\n''') == '4'\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '3'\nassert solution('8') == '4'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"4\") == \"1\""
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3\n10 2 3 5 4 2\n\"\"\") == \"3\"\n\nassert solution(\n\"\"\"\n4\n100 100 100 100\n\"\"\") == \"1\"\n\nassert solution(\n\"\"\"\n8\n7 6 5 4 3 2 2 3\n\"\"\") == \"4\""
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"4 5\") == \"No\"\nassert solution(\"4 5\") == \"0\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3') == 'Yes'\nassert solution('6 5') == 'No'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"4 3\") == \"No\"\nassert solution(\"6 5\") == \"No\"\nassert solution(\"4 3\") == \"Yes\"\nassert solution(\"3 3\") == \"Yes\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 3\n1 2\n1 1\n3 1 3 2\n2 1 5\n2 4 4\n2 4 4\n''') == 'Yes\\n0\\n'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('4 3') == 'No'\nassert solution('6 5') == 'Yes'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 3\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n''') == 'Yes'\nassert solution('''\n6 5\n4 3 2 2 1\n3 1 1 3\n3 2 3 3\n2 3 1\n''') == 'No'"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 3\n1 2\n1 1\n3 1 3 2\n2 1 5\n2 4 4\n2 4 4''') == 'Yes'\nassert solution('''4 3\n4 3 2 2 1\n3 1 1 3\n3 2 3 3\n2 3 1''') == 'No'\nassert solution('''4 3\n1 2\n1 1\n3 1 3 2\n2 1 5\n2 4 4\n2 4 4''') == 'Yes'"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3') == 'Yes'\nassert solution('6 5') == 'No'\nassert solution('4 3') == 'Yes'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == 'Yes'\nassert solution('6 5') == 'No'"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"Yes\"\nassert solution(\"6 5\") == \"No\"\nassert solution(\"4 3\") == \"Yes\""
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"0 1\"\nassert solution(\"4\") == \"0 2 1 3\"\nassert solution(\"8\") == \"0 2 4 1 5 7 6 3\"\nassert solution(\"16\") == \"0 2 4 1 6 7 8 3 5\"\nassert solution(\"32\") == \"0 2 4 1 6 7 8 5 3\"\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0 2 1 4 3\""
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0 2 1'\nassert solution('4') == '0 2 1 3 4'\nassert solution('3') == '0 1 2'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '0 2 1 4 3'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 20\nassert solution(\"1\") == 0\nassert solution(\"0\") == 0\nassert solution(\"1 0 1 0 1\") == 0\nassert solution(\"1\") == 0\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"0 2 1 4 3\"\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0 2 1 4 3'\nassert solution('2') == '0 2 1 4 3'\nassert solution('3') == '0 2 1 4 3'\nassert solution('4') == '0 2 1 4 3'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n3\\n5') == '0 2 1 4 3'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1 2 3 4 5'\nassert solution('6') == '2 3 4 5 6 1'\nassert solution('1000') == '2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0 2 1 4 3'\nassert solution('2') == '0 2 1 4 3'\nassert solution('3') == '0 2 1 4 3'\nassert solution('4') == '0 2 1 4 3'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n\"\"\") == \"YES\"\nassert solution(\"\"\"3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n\"\"\") == \"NO\"\nassert solution(\"\"\"3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n0 0\n\"\"\") == \"NO\""
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == 'YES'\nassert solution('''\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == 'NO'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3, 4]) == \"YES\"\nassert solution([3, 4]) == \"NO\"\n\nstdin = read_input()\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == 'YES'\nassert solution('''\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == 'NO'"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('3 3') == 'NO'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == 'NO'\nassert solution('3 4') == 'YES'\nassert solution('3 5') == 'NO'\nassert solution('4 6') == 'YES'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\\n1 1') == 'YES'\nassert solution('3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\\n1 1') == 'NO'\nassert solution('3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\\n1 1') == 'YES'\n\n\"\"\""
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0') == 'YES'\nassert solution('3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0') == 'NO'\nassert solution('2 3\\n1 0\\n1 -2\\n0 2\\n0 2\\n0 -2\\n-1 0') == 'NO'"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"11\") == \"11\"\nassert solution(\"111\") == \"111\"\nassert solution(\"11111\") == \"11111\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '3'\nassert solution(input()) == '10'\n\n\"\"\""
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '1'\nassert solution('9') == '1'\n\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n1\n1''') == '1'\nassert solution('''5\n1\n0\n1\n0\n1''') == '3'\nassert solution('''9\n1\n1\n0\n0\n1''') == '4'\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '11'\nassert solution('11') == '11'\nassert solution('111') == '11'\nassert solution('11111') == '11'\nassert solution('111111') == '11'\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"111\"\nassert solution(\"11\") == \"111\"\nassert solution(\"111\") == \"111\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"11\"\nassert solution(\"111\") == \"111\"\nassert solution(\"1211\") == \"1211\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"1, 3, 10, 22, 43, 109, 213, 421, 833\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 3\n1 2\n2 3\n''') == 'First'\nassert solution('''\n3\n0 3\n1 2\n2 3\n''') == 'Second'\nassert solution('''\n3\n4 5\n1 2\n2 3\n''') == 'First'\nassert solution('''\n3\n4 5\n1 2\n2 3\n''') == 'Second'\nassert solution('''\n3\n0 2\n1 2\n2 3\n''') == 'Second'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n''') == 'First'\nassert solution('''\n3\n3 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n''') == 'Second'\n'''\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 0') == 'First'\nassert solution('6 2') == 'Second'\nassert solution('1 2') == 'First'\nassert solution('2 3') == 'Second'\nassert solution('15 10') == 'Second'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 0\\n6 2\\n1 2\\n2 3\") == \"First\"\nassert solution(\"3 0\\n15 10\\n12 14\\n8 3\\n10 1\\n14 6\\n12 6\") == \"Second\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 0\") == \"First\"\nassert solution(\"3 1\") == \"Second\"\nassert solution(\"10 10\") == \"First\"\nassert solution(\"15 10\") == \"Second\"\nassert solution(\"12 14\") == \"First\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n3\n0 2\n1 2\n2 3\n''') == 'First'\nassert solution('''\n2\n4\n1 2\n2 3\n''') == 'Second'\nassert solution('''\n3\n6\n1 2\n2 3\n''') == 'First'\nassert solution('''\n4\n12\n1 2\n2 3\n1 6\n''') == 'Second'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3\\n0\\n6 2') == 'First'\nassert solution('1\\n3\\n1 2') == 'Second'\nassert solution('1\\n3\\n2 3') == 'First'\nassert solution('1\\n3\\n1 5') == 'Second'\nassert solution('1\\n3\\n1 6') == 'First'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 0\") == \"First\"\nassert solution(\"3 1\") == \"Second\"\nassert solution(\"3 2\") == \"First\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n3 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n\n\"\"\") == \"First\"\nassert solution(\"\"\"\n3\n3 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n\n\"\"\") == \"Second\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"First\"\nassert solution(\"1\\n2\\n3\") == \"Second\"\nassert solution(\"5\\n6\\n9\") == \"First\"\n\n=======\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq T \\leq 10^5\n - 2 \\leq N \\leq 10^{5}\n - 0 \\leq M \\leq \\min(N(N-1)/2,10^{5})\n - 1 \\leq a_i,b_i \\leq N\n - The given graph is a good graph.\n - In one input file, the sum of N and that of M do not exceed 2 \\times 10^5.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nT\n\\mathrm{case}_1\n\\vdots\n\\mathrm{case}_T\n\nEach case is in the following format:\nN M\na_1 b_1\n\\vdots\na_M b_M\n\n-----Output-----\nPrint T lines. The i-th line should contain First if Taro the first wins in the i-th test case, and Second if Jiro the second wins in the test case.\n\n-----Sample Input-----\n3\n3 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n\n-----Sample Output-----\nFirst\nSecond\nFirst\n\n - In test case 1, Taro the first wins. Below is one sequence of moves that results in Taro's win:\n - In Taro the first's turn, he adds an edge connecting Vertex 1 and 2, after which the graph is still good.\n - Then, whichever two vertices Jiro the second would choose to connect with an edge, the graph would no longer be good.\n - Thus, Taro wins.\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'\n\"\"\""
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'\nprint(solution(input()))\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\"\nprint(solution(input()))\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'\n\n\n'''"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"abba\") == \"Mike\"\nassert solution(\n    \"cba\") == \"Mike\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''abc\n    bac\n    bca\n    cab\n    cba''') == 'Mike'\nassert solution('''aa\n    aab\n    aaa\n    aaaa\n    aaaaa''') == 'Ann'\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\""
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(solution.__doc__) == \"Mike\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\""
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2\n8 3 8\n1 2\n2 3\n''') == '0'\nassert solution('''\n3 2\n8 3 8\n1 2\n2 3\n''') == '2'\nassert solution('''\n3 2\n8 1 8\n1 2\n2 3\n''') == '1'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2') == '1'\nassert solution('3 2') == '1'\nassert solution('10 9') == '2'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == \"2\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"0\"\nassert solution(\"1 2 3\") == \"2\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 1') == '0'\nassert solution('10 2') == '1'\nassert solution('10 2') == '2'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3 2\\n8 3 8\\n1 2\\n2 3\"\n    ) == \"0\"\nassert solution(\n    \"3 2\\n8 12 8\\n1 2\\n2 3\"\n    ) == \"2\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n6 4\n1 2 5 3 4 7\n1 2\n2 3\n3 4\n4 5\n5 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 4\n6 3 8\n1 2\n1 3\n4 5\n5 6\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 4\n6 3 8\n1 2\n1 3\n4 5\n5 6\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 5\n1 2\n1 3\n2 4\n4 5\n5 6\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 4\n1 2\n2 3\n3 4\n4 5\n5 6\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '0'\nassert solution('3 2') == '2'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2\n8 3 8\n1 2\n2 3\n''') == '0'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n8 3 8\n1 2\n2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\n8 3 8\n1 2\n2 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"-1\""
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"7 4\") == \"ababacd\"\nassert solution(\"4 7\") == \"-1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"5 3\") == \"5\"\nassert solution(\"3 5\") == \"-1\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '-1'\nassert solution('ababacd') == 'ababacd'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"ababacd\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n\") == \"ababacd\"\nassert solution(\"8 9\\n\") == \"abcdefghij\"\nassert solution(\"5 6\\n\") == \"aabbccdd\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 7\") == \"ababacd\", \"Your function doesn't pass all tests\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"-1\"\nassert solution(\"a\") == \"a\"\nassert solution(\"aac\") == \"a\"\nassert solution(\"aacb\") == \"a\"\nassert solution(\"aabc\") == \"a\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 4') == 'ababacd'\nassert solution('5 7') == '-1'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 4') == 'ababacd'\nassert solution('4 7') == '-1'\nassert solution('6 6') == 'aaababcd'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '-1'\nassert solution('4 7') == 'ababacd'\nassert solution('5 9') == 'ababacd'\nassert solution('100 3') == 'abacd'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 1 2\\n') == '4'\nassert solution('10\\n1 1 2 2 2 1 1 2 2 1\\n') == '9'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 2\") == \"4\"\nassert solution(\"10\") == \"9\""
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 1 2') == '4'\nassert solution('10') == '9'"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 2 1 2\n''') == '4'\n\nassert solution('''\n10\n1 1 2 2 2 1 1 2 2 1\n''') == '9'\n\nassert solution('''\n5\n1 2 1 2 3\n''') == '3'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1 2') == '4'\nassert solution('10') == '9'"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 1 2\\n\") == \"4\"\nassert solution(\"10\\n1 1 2 2 2 1 1 2 2 1\\n\") == \"9\"\nassert solution(\"10\\n1 1 2 2 2 1 1 2 2 1 2 1 2 2 1 2 1 1 1 2 2 2 2 1 1 2 1 2 2 1 2 1 1 2 2 2 1 1 2 1 2 2 1 2 1 2 2 1 1 1 1 2 2 2 1 1 1 1 2 2 1 2 1 2 2 1 1 1 1 1 2 1 2 2 1 1 1 2 2 1 1 1 1 1 1 2 2 1 2 1 1 1 1 1 2 1 2 1 1 1 1 1 1 1 2 2 1 2 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 1 2\\n\") == \"4\"\nassert solution(\"10\\n1 1 2 2 2 1 1 2 2 1\\n\") == \"9\"\nprint(solution(input()))\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 1 2\\n') == '4'\nassert solution('10\\n1 1 2 2 2 1 1 2 2 1\\n') == '9'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '10'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 1 2') == '4'\nassert solution('10') == '9'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 1\") == \"2\"\nassert solution(\"1 4 3\") == \"2\"\nassert solution(\"2 2 1\") == \"2\"\nassert solution(\"6 6 3\") == \"6\"\nassert solution(\"1 4 5\") == \"++-2\"\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2 1\n1 1 2\n2 2 1\n''') == '2'\n\nassert solution('''\n6 6 3\n2 2 6\n1 4 5\n2 3 4\n1 4 1\n1 3 1\n2 2 3\n''') == '6'\n\nassert solution('''\n2 4 5\n1 1 4\n1 2 3\n2 3 1\n''') == '4'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2 1\n1 1 2\n2 2 1\n''') == '2'\nassert solution('''\n6 6 3\n2 2 6\n1 4 5\n2 3 4\n1 4 1\n1 3 1\n2 2 3\n''') == '6'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'\nassert solution(\"1\\n1 2\\n2 1\\n\") == '+'\nassert solution(\"6\\n3 1 4\\n2 3 4\\n1 4 1\\n1 3 1\\n2 2 3\") == '6'\nassert solution(\"6\\n3 1 4\\n2 3 4\\n1 4 1\\n1 3 1\\n2 2 3\") == '++-'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\nassert solution('2 2 1') == '2'\nassert solution('6 6 3') == '6'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3 2\n1 1 1\n2 2 2\n1 3 3\n2 3 3\n1 4 4\n''') == '''\n2\n-\n'''\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1\") == \"2\"\nassert solution(\"1 4 5\") == \"++\"\nassert solution(\"2 3 4\") == \"-+\"\nassert solution(\"1 4 1\") == \"-+\"\nassert solution(\"1 3 1\") == \"--\"\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 1\\n1 1 2\\n2 2 1') == '2'\nassert solution('6 6 3\\n2 2 6\\n1 4 5\\n2 3 4\\n1 4 1\\n1 3 1\\n2 2 3\\n') == '6'\nprint('solution()')"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 1\\n1 1 2\\n2 2 1\") == \"2\"\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3 2\n1 1 2\n2 2 1\n''') == '2'\nassert solution('''\n3 3 1\n2 2 1\n1 1 3\n''') == '2'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1,6,8,9\") == \"1869\"\nassert solution(\"1,2,3,4\") == \"1,34\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1689\") == \"1869\"\nassert solution(\"18906\") == \"18690\""
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '18690'\nassert solution(input('89')) == '1869'\nassert solution(input('189')) == '18690'\nassert solution(input('18690')) == '189'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1689') == '1869', solution('1689')\nassert solution('18906') == '18690', solution('18906')\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('17') == '1,7,8,6,9'\nassert solution('12') == '12,3,6,9'\nassert solution('13') == '13,3,6'\nassert solution('24') == '2,4,6'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('123456789') == '123456789'\nassert solution('10') == '10'\nassert solution('4') == '4'\nassert solution('45') == '500'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('123456789') == '123456789'\nassert solution
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"1010\"\nassert solution(\"11\") == \"1\"\nassert solution(\"12\") == \"2\"\nassert solution(\"13\") == \"3\"\nassert solution(\"14\") == \"4\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"1869\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1689\") == \"1869\"\nassert solution(\"18906\") == \"18690\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 2\n1 3\n3 4\n\n''') == \"2\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2') == '2'\nassert solution('4 6') == '-1'\nassert solution('5 5') == '3'\nprint('Everything is ok!')\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\"\nassert solution(\"4 2\\n1 3\\n3 4\\n\") == \"2\"\nassert solution(\"5 5\\n4 2\\n3 5\\n4 5\\n5 1\\n1 2\\n\") == \"3\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 5') == '3'"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 2\n1 3\n3 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4 2\n1 3\n3 4\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n5 5\n4 2\n3 5\n4 5\n5 1\n1 2\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 3\\n3 4') == '2'\nassert solution('4 6\\n4 5\\n5 1\\n1 2') == '-1'\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == 2\nassert solution(\"4 6\") == -1"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"4 6\") == \"3\"\nassert solution(\"5 5\") == \"4\"\nassert solution(\"10 5\") == \"9\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5\\n4 2\\n3 5\\n4 5\\n5 1\\n') == '3'\nassert solution('4 5\\n3 4\\n1 2\\n3 4\\n2 4\\n') == '2'\n\n'''"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 3\\n3 4\\n') == '2'\nassert solution('5 5\\n4 2\\n3 5\\n4 5\\n5 1\\n1 2\\n') == '3'\nassert solution('100 10\\n1 2\\n2 5\\n2 3\\n3 4\\n3 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 8\\n6 9\\n7 9\\n7 10\\n8 9\\n8 10\\n9 10\\n9 11\\n10 11\\n10 12\\n11 12\\n11 13\\n12 13\\n12 14\\n13 14\\n13 15\\n14 15\\n14 16\\n15 16\\n15 17\\n16 17\\n16 18\\n17 18\\n17 19\\n18 19\\n18 20\\n19 20\\n19 21\\n20 21\\n20 22\\n21 22\\n21 23\\n22 23\\n22 24\\n23 24\\n23 25\\n24 25\\n24 26\\n25 26\\n25 27\\n26 27\\n26 28\\n27 28\\n27 29\\n28 29\\n28 30\\n29 30\\n29 31\\n30 31\\n30 32\\n31 32\\n31 33\\n32 33\\n32 34\\n33 34\\n33 35\\n34 35\\n34 36\\n35 36\\n35 37\\n36 37\\n36 38\\n37 38\\n37 39\\n38 39\\n38 40\\n39 40\\n39 41\\n40 41\\n40 42\\n41 42\\n41 43\\n42 43\\n42 44\\n43 44\\n43 45\\n44 45\\n44 46\\n45 46\\n45 47\\n46 47\\n46 48\\n47 48\\n47 49\\n48 49\\n48 50\\n49 50\\n49 51\\n50 51\\n50 52\\n51 52\\n51 53\\n52 53\\n52 54\\n53 54\\n53 55\\n54 55\\n54 56\\n55 56\\n55 57\\n56 57\\n56 58\\n57 58\\n57 59\\n58 59\\n58 60\\n59 60\\n59 61\\n60 61\\n60 62\\n61 62\\n61 63\\n62 63\\n62 64\\n63 64\\n63 65\\n64 65\\n64 66\\n65 66\\n65 67\\n66 67\\n66 68\\n67 68\\n67 69\\n68 69\\n68 70\\n69 70\\n69 71\\n70 71\\n70 72\\n71 72\\n71 73\\n72 73\\n72 74\\n73 74\\n73 75\\n74 75\\n74 76\\n75 76\\n75 77\\n76 77\\n76 78\\n77 78\\n77 79\\n78 79\\n78 80\\n79 80\\n79 81\\n80 81\\n80 82\\n81 82\\n81 83\\n82 83\\n82 84\\n83 84\\n83 85\\n84 85\\n84 86\\n85 86\\n85 87\\n86 87\\n86 88\\n87 88\\n87 89\\n88 89\\n88 90\\n89 90\\n89 91\\n90 91\\n90 92\\n91 92\\n91 93\\n92 93\\n92 94\\n93 94\\n93 95\\n94 95\\n94 96\\n95 96\\n95 97\\n96 97\\n96 98\\n97 98\\n97 99\\n98 99\\n98 100\\n99 100\\n99 101\\n100 101\\n100 102\\n101 102\\n101 103\\n102 103\\n102 104\\n103 104\\n103 105\\n104 105\\n104 106\\n105 106\\n105 107\\n106 107\\n106 108\\n107 108\\n107 109\\n108 109\\n108 110\\n109 110\\n109 111\\n110 111\\n110 112\\n111 112\\n111 113\\n112 113\\n112 114\\n113 114\\n113 115\\n114 115\\n114 116\\n115 116\\n115 117\\n116 117\\n116 118\\n117 118\\n117 119\\n118 119\\n118 120\\n119 120\\n119 121\\n120 121\\n120 122\\n121 122\\n121 123\\n122 123\\n122 124\\n123 124\\n123 125\\n124 125\\n124 126\\n125 126\\n125 127\\n126 127\\n126 128\\n127 128\\n127 129\\n128 129\\n128 130\\n129 130\\n129 131\\n130 131\\n130 132\\n131 132\\n131 133\\n132 133\\n132 134\\n133 134\\n133 135\\n134 135\\n134 136\\n135 136\\n135 137\\n136 137\\n136 138\\n137 138\\n137 139\\n138 139\\n138 140\\n139 140\\n139 141\\n140 141\\n140 142\\n141 142\\n141 143\\n142 143\\n142 144\\n143 144\\n143 145\\n144 145\\n144 146\\n145 146\\n145 147\\n146 147\\n146 148\\n147 148\\n147 149\\n148 149\\n148 150\\n149 150\\n149 151\\n150 151\\n150 152\\n151 152\\n151 153\\n152 153\\n152 154\\n153 154\\n153 155\\n154 155\\n154 156\\n155 156\\n155 157\\n156 157\\n156 158\\n157 158\\n157 159\\n158 159\\n158 160\\n159 160\\n159 161\\n160 161\\n160 162\\n161 162\\n161 163\\n162 163\\n162 164\\n163 164\\n163 165\\n164 165\\n164 166\\n165 166\\n165 167\\n166 167\\n166 168\\n167 168\\n167 169\\n168 169\\n168 170\\n169 170\\n169 171\\n170 171\\n170 172\\n171 172\\"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n4 7\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n4 3 1\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n7\\n') == '3'\nassert solution('3\\n4 3 1\\n') == '9'"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n5 1\n''') == '2'\nassert solution('''\n3\n5 2 1\n''') == '6'\nassert solution('''\n4\n3 7\n''') == '3'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '9'\nassert solution('2') == '3'"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '9'\nprint(solution(input()))"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n7\n''') == '3'\nassert solution('''\n3\n4 3 1\n''') == '9'"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"3\"\nassert solution(\"2 3 1\") == \"9\"\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '6'"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n7\n''') == '3'\nassert solution('''\n5\n2\n''') == '4'\nassert solution('''\n6\n2\n3\n4\n5\n''') == '8'\nassert solution('''\n3\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n''') == '918'\nassert solution('''\n7\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n''') == '153'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '9'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n4 8 5\n\n''') == '9'\n\nassert solution('''\n4\n0 5 15 10\n\n''') == '0'\n\nassert solution('''\n1\n1\n\n''') == '-1'\n\n'''\nhttps://app.codesignal.com/interview-practice/task/mpg9WuhgXKrMDKwg\n'''"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"3\\n4 8 5\\n\"\n) == \"9\\n\"\nassert solution(\n    \"5\\n3 10 2 1 5\\n\"\n) == \"2\\n\"\nassert solution(\n    \"4\\n0 5 15 10\\n\"\n) == \"0\\n\"\nassert solution(\n    \"1\\n1\\n\"\n) == \"-1\\n\""
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '9'\nassert solution() == '0'\nassert solution() == '-1'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n4 8 5\n\n''') == '9'\nassert solution('''5\n3 10 2 1 5\n\n''') == '2'\nassert solution('''4\n0 5 15 10\n\n''') == '0'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n4 8 5\n''') == '9'\n\nassert solution('''\n1\n1\n''') == '-1'\n\nassert solution('''\n4\n0 5 15 10\n''') == '0'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"9\""
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == '9'\n'''\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"2\"\nassert solution(\"1\") == \"-\"\nassert solution(\"5\") == \"0\"\nassert solution(\"2\") == \"-1\"\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n4 8 5\n''') == '9'\nassert solution('''5\n0 5 15 10\n''') == '0'\nassert solution('''4\n0 5 15 10\n''') == '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(INP1) == '9'\nassert solution(INP2) == '2'\nassert solution(INP3) == '-1'\nassert solution(INP4) == '0'"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''10 4 5\n    3 5 7 10\n    ''') == '3'\nassert solution('''13 4 5\n    7 8 9 10\n    ''') == '1'\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(example_input_1) == \"3\"\nassert solution(example_input_2) == \"1\""
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''10 4 5\n3 5 7 10''') == \"3\"\nassert solution('''13 4 5\n7 8 9 10''') == \"1\"\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 3\") == \"1\"\nassert solution(\"13 4 5\") == \"1\"\nassert solution(\"10 4 5\") == \"3\"\nassert solution(\"10 10 10\") == \"2\"\nassert solution(\"10 3 5\") == \"1\"\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 4 5\\n3 5 7 10\\n') == '3'"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 4 5\n3 5 7 10\n''') == '3'\nassert solution('''\n13 4 5\n7 8 9 10\n''') == '1'\nassert solution('''\n13 4 5\n1 2 3 4 5\n''') == '2'\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 4 5\") == \"3\"\nassert solution(\"13 4 5\") == \"1\"\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 4 5\") == \"3\"\nassert solution(\"13 4 5\") == \"1\"\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 4 5\n3 5 7 10\n''') == '3'\nassert solution('''\n13 4 5\n7 8 9 10\n''') == '1'"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 4 5\") == \"3\"\nassert solution(\"13 4 5\") == \"1\"\nassert solution(\"10 5 3\") == \"1\""
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n101\n3 3\n3 2\n3 1\n\n''') == '2'\nassert solution('''\n4\n1111\n3 4\n5 2\n3 1\n3 2\n\n''') == '4'\nassert solution('''\n6\n011100\n5 3\n5 5\n2 4\n3 5\n4 2\n1 5\n\n''') == '6'\nassert solution('''\n10\n100001\n1 3\n2 4\n3 2\n4 2\n5 2\n6 2\n7 2\n8 2\n9 2\n10 2\n11 2\n12 2\n13 2\n14 2\n15 2\n16 2\n17 2\n18 2\n19 2\n20 2\n21 2\n22 2\n23 2\n24 2\n25 2\n26 2\n27 2\n28 2\n29 2\n30 2\n31 2\n32 2\n33 2\n34 2\n35 2\n36 2\n37 2\n38 2\n39 2\n40 2\n41 2\n42 2\n43 2\n44 2\n45 2\n46 2\n47 2\n48 2\n49 2\n50 2\n51 2\n52 2\n53 2\n54 2\n55 2\n56 2\n57 2\n58 2\n59 2\n60 2\n61 2\n62 2\n63 2\n64 2\n65 2\n66 2\n67 2\n68 2\n69 2\n70 2\n71 2\n72 2\n73 2\n74 2\n75 2\n76 2\n77 2\n78 2\n79 2\n80 2\n81 2\n82 2\n83 2\n84 2\n85 2\n86 2\n87 2\n88 2\n89 2\n90 2\n91 2\n92 2\n93 2\n94 2\n95 2\n96 2\n97 2\n98 2\n99 2\n100 2\n\n''') == '10'\nprint('OK')\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1111\n3 4\n5 2\n3 1\n3 2\n''') == '4'\nassert solution('''\n4\n101\n3 4\n5 2\n3 1\n3 2\n''') == '2'\nassert solution('''\n6\n011100\n5 3\n5 5\n2 4\n3 5\n4 2\n1 5\n''') == '6'"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '4'\nassert solution('5') == '4'\nassert solution('6') == '6'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '4'\nassert solution('6') == '6'"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n101\n3 3\n3 2''') == '2'\nassert solution('''4\n1111\n3 4\n5 2\n3 1\n3 2''') == '4'\nassert solution('''6\n011100\n5 3\n5 5\n2 4\n3 5\n4 2\n1 5''') == '6'"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3\n101\n3 3\n3 2\n3 1\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n4\n1111\n3 4\n5 2\n3 1\n3 2\n\"\"\"\n) == \"4\"\n\nassert solution(\n\"\"\"\n6\n011100\n5 3\n5 5\n2 4\n3 5\n4 2\n1 5\n\"\"\"\n) == \"6\"\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(example_input_1) == '2'\nassert solution(example_input_2) == '4'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"6\") == \"6\"\nprint(solution(input()))\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '4'\nassert solution('5') == '4'\nassert solution('6') == '6'\nassert solution('7') == '7'"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"1111\"\nassert solution(input()) == \"01010\"\nassert solution(input()) == \"1011011\"\nprint(solution(input()))\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 4''') == '1111'\nassert solution('''5 3''') == '01010'\nassert solution('''7 3''') == '1011011'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1111'\nassert solution() == '01010'\nassert solution() == '1011011'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1111'\nassert solution() == '01010'\nassert solution() == '1011011'"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"1111\"\nassert solution(\"5 3\") == \"01010\"\nassert solution(\"7 3\") == \"1011011\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4') == '1111'\nassert solution('5 3') == '01010'\nassert solution('7 3') == '1011011'"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read().strip()\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"1111\"\nassert solution(\"5 3\") == \"01010\"\nassert solution(\"7 3\") == \"1011011\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"1111\"\nassert solution(\"5 3\") == \"01010\"\nassert solution(\"7 3\") == \"1011011\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 4\n''') == '1111'\nassert solution('''5 3\n''') == '01010'\nassert solution('''7 3\n''') == '1011011'"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 1\") == \"0/1\"\nassert solution(\"4\\n2 1 1 1\") == \"1/2\"\nassert solution(\"5\\n3 1 1 1 1\") == \"0/3\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"1/2\"\nassert solution(\"7\\n2 1 1 1 1 1 1\") == \"1/3\"\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0/1'\nassert solution() == '1/1'\nassert solution() == '0/0'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n2 1 1') == '0/1'\nassert solution('1\\n1 1') == '1/1'\nassert solution('2\\n1 1') == '1/1'\nassert solution('1\\n2 1') == '2/1'\nassert solution('2\\n2 1') == '1/1'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n1 1 1''') == '0/1'\nassert solution('''3\n1 1 1''') == '1/2'\nassert solution('''4\n1 1 1 1''') == '1/2'\nassert solution('''5\n1 1 1 1 1''') == '1/2'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1/2\"\nassert solution(\"3\") == \"0/1\""
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n1\n''') == '1/1'\nassert solution('''5\n2 2 2 2 2\n''') == '3/1'\nassert solution('''15\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n2\n''') == '1/2'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1/2'\nassert solution('3') == '0/1'\nassert solution('2') == '1/2'\nassert solution('3') == '0/1'"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"0/1\"\nassert solution(r\"\"\"\n3\n1 1 1\n\"\"\") == \"0/1\"\nassert solution(r\"\"\"\n4\n1 1 1 1\n\"\"\") == \"0/1\"\nassert solution(r\"\"\"\n5\n1 1 1 1 1\n\"\"\") == \"0/1\"\nassert solution(r\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0/1'\nassert solution('2') == '1/1'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6\") == \"1 0 1 0 0\"\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '1 0 1 0 0'"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '1 0 1 0 0'\n\nassert solution('''5\n9 7 8 6 5\n1 1\n2 1\n3 1\n4 1\n''') == '4 3 2 1 0'"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6') == '1 0 1 0 0'\nassert solution('6\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1\\n') == '4 3 2 1 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6') == '1 0 1 0 0'"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6\\n') == '1 0 1 0 0'\nassert solution('5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1\\n') == '4 3 2 1 0'"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1 0 1 0 0'\nassert solution('9') == '4 3 2 1 0'\nassert solution('123456789') == '14 738 535 2742 876 744 583 984 770 626 990 754 970 772 874 786 888 792 796 798 798 898'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '1 0 1 0 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '1 0 1 0 0'\nassert solution('''5\n9 7 8 6 5\n1 1\n2 1\n3 1\n4 1\n''') == '4 3 2 1 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1 0 1 0 0'\nassert solution('10') == '4 3 2 1 0'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '0'\nassert solution('5\\n4 5 1 7 4\\n') == '8'\nassert solution('3\\n1 1\\n') == '11'\nassert solution('4\\n1 1 1 1\\n') == '1'\nprint(\"OK\")"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 3 4\\n\") == \"3\"\nassert solution(\"2\\n3 5 4\\n\") == \"4\"\nassert solution(\"10\\n10 10 10 10 10 10 10 10 10 10 10\\n\") == \"10\"\nassert solution(\"5\\n4 4 5 4 4\\n\") == \"4\"\nassert solution(\"100\\n1 1 1 1 1\\n\") == \"1\"\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 1 1''') == '1'\nassert solution('''2\n1 1''') == '0'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n4 5 1 7 4\n''') == '1'\nassert solution('''2\n1 2\n''') == '0'\nassert solution('''3\n1 1 1\n''') == '1'\nassert solution('''4\n1 1 1 1\n''') == '0'\nassert solution('''5\n1 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"2\") == \"0\""
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '2'\nassert solution('4') == '0'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '0'\nassert solution('2') == '2'\nassert solution('3') == '11'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n4 5 1 7 4\\n') == '1'\nassert solution('2\\n1 2\\n') == '0'\nassert solution('3\\n1 1 1\\n') == '1'\n\n\n\"\"\""
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\"\nassert solution() == \"0\"\nassert solution() == \"11\"\nassert solution() == \"11\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5\\n') == '1'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"0 1 2 3\") == \"1\"\nassert solution(\"0 4 6 1\") == \"2\"\nassert solution(\"1 6 7 2\") == \"3\"\nassert solution(\"2 7 5 3\") == \"4\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\n0 1 2 3\n0 4 6 1\n1 6 7 2\n2 7 5 3\n6 4 5 7\n4 0 3 5\n''') == '1'\nassert solution('''\n3\n0 1\n0 2\n2 3\n''') == '2'\nassert solution('''\n6\n0 1 2 3\n0 4 6 1\n1 6 7 2\n2 7 5 3\n6 4 5 7\n4 0 3 5\n''') == '1'\nassert solution('''\n6\n0 1 2 3\n0 4 6 1\n1 6 7 2\n2 7 5 3\n6 4 5 7\n4 0 3 5\n''') == '0'\n''')"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '1'\nassert solution('4') == '2'\nassert solution('15') == '3'\nassert solution('6') == '1'\n\n---Time Limit Exceeded\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '1', 'Should be 1'\nassert solution('6 0 1 2 3') == '1', 'Should be 1'\nassert solution('6 4 6 1') == '2', 'Should be 2'\nassert solution('6 0 4 6 1') == '2', 'Should be 2'\nassert solution('6 4 0 6 1') == '2', 'Should be 2'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5') == '1'\n\"\"\"\n\n\n\"\"\"\nclass Solution:\n    def solve(self, N):\n        def get_color(x, y, N):\n            if N % 2 == 0:\n                return x + y\n            else:\n                return x - y\n        def get_colors(tile):\n            return get_color(tile[0], tile[1], N), get_color(tile[2], tile[3], N), get_color(tile[4], tile[5], N), get_color(tile[6], tile[7], N)\n        \n        color_to_tiles = {}\n        for x in range(1, N + 1):\n            for y in range(1, N + 1):\n                if (x, y) not in color_to_tiles:\n                    color_to_tiles[(x, y)] = set()\n                color_to_tiles[(x, y)].add(get_colors((x, y)))\n        \n        def test_tile(tile, N):\n            #print(tile)\n            if len(tile)!= 8:\n                return False\n            #print(tile)\n            if (tile[0], tile[1])!= (1, 1):\n                return False\n            if (tile[2], tile[3])!= (1, 2):\n                return False\n            if (tile[4], tile[5])!= (1, 3):\n                return False\n            if (tile[6], tile[7])!= (1, 4):\n                return False\n            if (tile[0], tile[3])!= (2, 1):\n                return False\n            if (tile[1], tile[4])!= (2, 2):\n                return False\n            if (tile[2], tile[5])!= (2, 3):\n                return False\n            if (tile[6], tile[7])!= (2, 4):\n                return False\n            if (tile[0], tile[4])!= (3, 1):\n                return False\n            if (tile[1], tile[5])!= (3, 2):\n                return False\n            if (tile[2], tile[6])!= (3, 3):\n                return False\n            if (tile[3], tile[7])!= (3, 4):\n                return False\n            if (tile[0], tile[2])!= (4, 1):\n                return False\n            if (tile[1], tile[3])!= (4, 2):\n                return False\n            if (tile[2], tile[4])!= (4, 3):\n                return False\n            if (tile[6], tile[7])!= (4, 4):\n                return False\n            if (tile[0], tile[6])!= (5, 1):\n                return False\n            if (tile[1], tile[7])!= (5, 2):\n                return False\n            if (tile[2], tile[5])!= (5, 3):\n                return False\n            if (tile[3], tile[4])!= (5, 4):\n                return False\n            return True\n        \n        for x in range(1, N + 1):\n            for y in range(1, N + 1):\n                if (x, y) not in color_to_tiles:\n                    continue\n                for color in color_to_tiles[(x, y)]:\n                    if test_tile(color, N):\n                        return N\n        return -1\n\"\"\"\n\n\nclass Solution:\n    def solve(self, N):\n        tiles = set()\n        for i in range(1, N + 1):\n            for j in range(1, N + 1):\n                tiles.add((i, j))\n        \n        def get_color(x, y, N):\n            if N % 2 == 0:\n                return x + y\n            else:\n                return x - y\n        \n        def get_colors(tile):\n            return get_color(tile[0], tile[1], N), get_color(tile[2], tile[3], N), get_color(tile[4], tile[5], N), get_color(tile[6], tile[7], N)\n        \n        def test_tile(tile, N):\n            if len(tile)!= 8:\n                return False\n            if (tile[0], tile[1])!= (1, 1):\n                return False\n            if (tile[2], tile[3])!= (1, 2):\n                return False\n            if (tile[4], tile[5])!= (1, 3):\n                return False\n            if (tile[6], tile[7])!= (1, 4):\n                return False\n            if (tile[0], tile[3])!= (2, 1):\n                return False\n            if (tile[1], tile[4])!= (2, 2):\n                return False\n            if (tile[2], tile[5])!= (2, 3):\n                return False\n            if (tile[6], tile[7])!= (2, 4):\n                return False\n            if (tile[0], tile[4])!= (3, 1):\n                return False\n            if (tile[1], tile[5])!= (3, 2):\n                return False\n            if (tile[2], tile[6])!= (3, 3):\n                return False\n            if (tile[3], tile[7])!= (3, 4):\n                return False\n            if (tile[0], tile[2])!= (4, 1):\n                return False\n            if (tile[1], tile[3])!= (4, 2):\n                return False\n            if (tile[2], tile[4])!= (4, 3):\n                return False\n            if (tile[6], tile[7])!= (4, 4):\n                return False\n            if (tile[0], tile[6])!= (5, 1):\n                return False\n            if (tile[1], tile[7])!= (5, 2):\n                return False\n            if (tile[2], tile[5])!= (5, 3):\n                return False\n            if (tile[3],"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5') == '1'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6\n0 1 2 3\n0 4 6 1\n1 6 7 2\n2 7 5 3\n6 4 5 7\n4 0 3 5\n''') == '1', 'First Test'\nassert solution('''\n6\n0 1 2 3\n0 4 6 1\n1 6 7 2\n2 7 5 3\n6 4 5 7\n4 0 3 5\n''') == '0', 'Second Test'\nassert solution('''\n1\n0 1 2\n0 4 6\n1 6 7\n2 7 5\n''') == '0', 'Third Test'\nassert solution('''\n1\n0 1 2\n0 4 6\n1 6 7\n2 7 5\n''') == '0', 'Fourth Test'\nassert solution('''\n6\n0 1 2 3\n0 4 6 1\n1 6 7 2\n2 7 5 3\n6 4 5 7\n4 0 3 5\n''') == '1', 'Fifth Test'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"2\"\nassert solution(\"2\") == \"0\""
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\") == '1', \"Wrong\"\nassert solution(\"5\") == '0', \"Wrong\"\nassert solution(\"4\") == '2', \"Wrong\"\nassert solution(\"3\") == '0', \"Wrong\"\nassert solution(\"2\") == '1', \"Wrong\"\n"
    }
]