[
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"8 ( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"8 ( ( 2 3 ) )\") == \"5\"\nassert solution(\"6 ( ( 2 3 ) )\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 12 3 )\") == \"36\"\nassert solution(\"( 2 ) ( 3 )\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"5\"\n\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\n\nassert solution(\"( 12 3 )\") == \"36\"\n\nassert solution(\"( ( 2 3 ) )\") == \"5\"\n\nassert solution(\"( ( 2 3 ) )\") == \"5\"\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == '5'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( 12 3 )') == '36'\nassert solution('( 2 ) ( 3 )') == '5'\nassert solution('( ( 2 3 ) )') == '5'\n\"\"\"\nfrom __future__ import annotations\n\nfrom typing import List\n\nimport re\n\n\nclass Bracket:\n    def __init__(self, bracket: str) -> None:\n        self.bracket = bracket\n\n    def is_bracket(self) -> bool:\n        return re.match(r\"^(\\()|(\\))$\", self.bracket)\n\n    def is_parentheses(self) -> bool:\n        return self.bracket == \"()\"\n\n    def is_multiplication(self) -> bool:\n        return self.bracket == \"*\"\n\n    def is_addition(self) -> bool:\n        return self.bracket == \"+\"\n\n    def is_power(self) -> bool:\n        return self.bracket == \"^\"\n\n    def is_bracket_sequence(self) -> bool:\n        return self.is_parentheses() or self.is_multiplication() or self.is_addition() or self.is_power()\n\n    def is_parentheses_bracket_sequence(self) -> bool:\n        return self.is_parentheses() and not self.is_power()\n\n    def is_bracket_power(self) -> bool:\n        return self.is_bracket() and self.is_power()\n\n    def is_bracket_addition(self) -> bool:\n        return self.is_bracket() and self.is_addition()\n\n    def is_bracket_multiplication(self) -> bool:\n        return self.is_bracket() and self.is_multiplication()\n\n    def is_bracket_sequence(self) -> bool:\n        return self.is_bracket() and not self.is_bracket_power()\n\n    def get_bracket_power_value(self) -> int:\n        if self.is_bracket_power():\n            return int(self.bracket[1:])\n        else:\n            return 1\n\n    def is_bracket_power_of(self, number: int) -> bool:\n        return self.is_bracket_power() and self.get_bracket_power_value() == number\n\n    def __str__(self):\n        return self.bracket\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 12 3 )\") == \"36\"\nassert solution(\"( 2 ) ( 3 )\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( ( 2 3 ) )\") == \"5\"\nassert solution(\"( ( 12 3 ) )\") == \"36\"\nassert solution(\"( ( 2 ( 2 1 ) ) ) 3\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == '5'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( 12 3 )') == '36'\nassert solution('( 2 ) ( 3 )') == '5'\nassert solution('( ( 2 3 ) )') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"5\"\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.data = []\n\n    def push(self, item):\n        self.data.append(item)\n\n    def pop(self):\n        return self.data.pop()\n\n    def top(self):\n        return self.data[-1]\n\n    def is_empty(self):\n        return len(self.data) == 0\n\nclass Bracket:\n    def __init__(self, token: str):\n        self.token = token\n\n    def __repr__(self):\n        return self.token\n\n    def __eq__(self, other):\n        return self.token == other.token\n\nclass ExpressionTree:\n    def __init__(self, root: Bracket):\n        self.root = root\n        self.left = None\n        self.right = None\n\n    def __repr__(self):\n        if self.left is None and self.right is None:\n            return repr(self.root)\n        elif self.left is None:\n            return f\"{repr(self.root)} ({repr(self.right)})\"\n        elif self.right is None:\n            return f\"({repr(self.left)} {repr(self.root)})\"\n        else:\n            return f\"({repr(self.left)} {repr(self.root)} {repr(self.right)})\"\n\n    def __eq__(self, other):\n        return self.root == other.root"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == '5'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( 12 3 )') == '36'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( ( 2 3 ) )') == '5'\n\nsolution('8 ( 2 ( 2 1 ) )')\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 12 3 )\") == \"36\"\nassert solution(\"( 2 ) ( 3 )\") == \"5\"\nassert solution(\"( 12 3 )\") == \"36\"\n\n\"\"\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"610\") == \"4\"\n\"\"\"\nimport math"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"009990001\") == 3\nassert solution(\"29998\") == 5\nassert solution(\"610\") == 4\nassert solution(\"981\") == 2\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"610\") == \"4\"\nassert solution(\"981\") == \"2\"\n\nprint('The code ran Correctly')"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"009990001\") == 3\nassert solution(\"29998\") == 5\nassert solution(\"981\") == 2\nassert solution(\"610\") == 4\n\nprint('Success')\n\n*************\n\nInput\n    11111100\nOutput\n    2\nExplanation\n    The counter initially shows 11.\n    We advance the wheel right one step to make it show 11.\n    The counter shows 11, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 11, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 11, which is not a palindrome.\n    We advance the wheel to the right one step, then advance the wheel right one step.\n    The counter shows 11, which is not a palindrome.\n    We advance the wheel to the right one step, then advance the wheel right one step.\n    The counter shows 11, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 11, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 11, which is a palindrome.\n\n*************\n\nInput\n    101010\nOutput\n    2\nExplanation\n    The counter initially shows 10.\n    We advance the wheel right one step to make it show 10.\n    The counter shows 10, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 10, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 10, which is not a palindrome.\n    We advance the wheel to the right one step, then advance the wheel right one step.\n    The counter shows 10, which is not a palindrome.\n    We advance the wheel to the right one step, then advance the wheel right one step.\n    The counter shows 10, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 10, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 10, which is a palindrome.\n\n*************\n\nInput\n    10111110\nOutput\n    2\nExplanation\n    The counter initially shows 110.\n    We advance the wheel right one step to make it show 110.\n    The counter shows 110, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 110, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 110, which is not a palindrome.\n    We advance the wheel to the right one step, then advance the wheel right one step.\n    The counter shows 110, which is not a palindrome.\n    We advance the wheel to the right one step, then advance the wheel right one step.\n    The counter shows 110, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 110, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 110, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 110, which is a palindrome.\n\n*************\n\nInput\n    11111110\nOutput\n    3\nExplanation\n    The counter initially shows 110.\n    We advance the wheel right one step to make it show 110.\n    The counter shows 110, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 110, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 110, which is not a palindrome.\n    We advance the wheel to the right one step, then advance the wheel right one step.\n    The counter shows 110, which is not a palindrome.\n    We advance the wheel to the right one step, then advance the wheel right one step.\n    The counter shows 110, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 110, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 110, which is not a palindrome.\n    We advance the wheel to theleft one step, then advance the wheel left one step.\n    The counter shows 110, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 110, which is a palindrome.\n\n*************\n\nInput\n    111011011\nOutput\n    3\nExplanation\n    The counter initially shows 111.\n    We advance the wheel right one step to make it show 111.\n    The counter shows 111, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 111, which is not a palindrome.\n    We advance the wheel to the left one step, then advance the wheel left one step.\n    The counter shows 111, which is not a palindrome.\n    We advance the wheel to theright one step, then advance the wheel right one step.\n    The counter shows 111, which is not a palindrome.\n    We advance the wheel to the right one step, then advance the wheel right"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n\"\"\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"610\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('610') == '4'\nassert solution('99009901') == '3'\nassert solution('29998') == '5'\nassert solution('981') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"010\") == \"0\"\nassert solution(\"110\") == \"1\"\nassert solution(\"0111\") == \"2\"\nassert solution(\"10000\") == \"4\"\nassert solution(\"10111\") == \"3\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"009990001\") == 3\n\"\"\"\n\n\nimport numpy as np"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"00\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n2017 4 0\n2017 8 12000\n2018 8 42000\"\"\") =='seems legit'\nassert solution(\"\"\"3\n2013 1 0\n2013 2 0\"\"\") == 'tampered odometer'\nassert solution(\"\"\"2\n2013 1 0\n2013 2 0\"\"\") == 'insufficient service'\n\n\"\"\"\nA small frog wants to get to the other side of the road. The frog is currently located at position X and wants to get to a position greater than or equal to Y. The small frog always jumps a fixed distance, D.\n\nCount the minimal number of jumps that the small frog must perform to reach its target.\n\nWrite a function:"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n2017 4 0\n2017 8 12000\n2018 8 42000''') =='seems legit'\nassert solution('''2\n2013 1 0\n2013 2 0''') == 'tampered odometer'\nassert solution('''3\n2017 11 0\n2018 1 1000''') == 'insufficient service'\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2017 11 0\\n2017 12 0') =='seems legit'\nassert solution('2017 11 0\\n2017 12 0') =='seems legit'\nassert solution('2017 11 0\\n2017 12 0') =='seems legit'\nassert solution('2017 11 0\\n2017 12 0') =='seems legit'\nassert solution('2017 11 0\\n2017 12 0') =='seems legit'\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2017 4 0\") == \"seems legit\"\nassert solution(\"2017 8 12000\") == \"tampered odometer\"\nassert solution(\"2018 8 42000\") == \"tampered odometer\"\nassert solution(\"2013 1 0\") == \"seems legit\"\nassert solution(\"2013 2 0\") == \"insufficient service\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2017 4 0\\n2017 8 12000\\n2018 8 42000') =='seems legit'\nassert solution('2017 11 0\\n2018 1 1000') == 'tampered odometer'\nassert solution('2013 1 0\\n2013 2 0') == 'insufficient service'\n\"\"\"\n\nfrom datetime import datetime\nimport math\nimport calendar\nfrom typing import NamedTuple\n\n\nclass Record(NamedTuple):\n    year: int\n    month: int\n    km: int\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2017 4 0\\n2017 8 12000\\n2018 8 42000\") == \"seems legit\"\nassert solution(\"2017 11 0\\n2018 1 1000\") == \"tampered odometer\"\nassert solution(\"2017 2 0\\n2018 2 0\") == \"insufficient service\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n\") == \"seems legit\"\nassert solution(\"3\\n2017 11 0\\n2018 1 1000\\n\") == \"tampered odometer\"\nassert solution(\"2\\n2013 1 0\\n2013 2 0\\n\") == \"seems legit\"\n\"\"\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"seems legit\"\n\nassert solution(\"\"\"\n2\n2013 1 0\n2013 2 0\n\"\"\") == \"tampered odometer\"\n\nassert solution(\"\"\"\n2\n2013 1 0\n2013 2 0\n\"\"\") == \"tampered odometer\"\n\nassert solution(\"\"\"\n3\n2017 11 0\n2017 12 0\n2018 1 1000\n\"\"\") == \"tampered odometer\"\n\nassert solution(\"\"\"\n3\n2017 1 0\n2018 1 0\n2018 1 0\n\"\"\") == \"tampered odometer\""
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2017 4 0\\n2017 8 12000\\n2018 8 42000\") == \"seems legit\"\nassert solution(\"2017 11 0\\n2018 1 1000\") == \"tampered odometer\"\nassert solution(\"2017 11 0\\n2018 1 2000\") == \"tampered odometer\"\nassert solution(\"2017 11 0\\n2017 12 0\") == \"tampered odometer\"\nassert solution(\"2017 11 0\\n2017 12 0\\n2017 12 0\") == \"tampered odometer\"\n\n\"\"\""
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"seems legit\"\nassert solution(\"\"\"\n2\n2013 1 0\n2013 2 0\n\"\"\") == \"tampered odometer\"\nassert solution(\"\"\"\n2\n2013 1 0\n2013 2 0\n\"\"\") == \"tampered odometer\"\n\"\"\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2\\n0 2 3\\n0 1\\n1\\n') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n') == '2'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5\n1 2\n0 2 3\n0 1 3\n1\n1\"\"\") == \"2\"\nassert solution(\"\"\"4\n1 2\n0 2 3\n1\n0\"\"\") == \"3\"\nassert solution(\"\"\"4\n1 2\n0 2 3\n1\n1\"\"\") == \"2\"\nassert solution(\"\"\"8\n1 2 3\n0 2 3 4 5\n1 6\n0 1 7\n0 7\n0 1 7\n0 2 7\n0 3 7\n0 4 7\n0 5 7\n0 6 7\n\"\"\") == \"3\"\n\"\"\"\n\nSample Input 1:\n4\n1 2\n0 2 3\n0 1\n1\nSample Output 1:\n3\n\nSample Input 2:\n5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\nSample Output 2:\n2\n\nSample Input 3:\n6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\nSample Output 3:\n2\n\nSample Input 4:\n4\n1 2 3\n0 2 3\n0 1 3\n0 1 2\nSample Output 4:\n4\n\"\"\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\") == '3'\nassert solution(\"3\\n1 2 3\\n0 2 3\\n0 1 3\\n1 2\\n2\") == '2'\nassert solution(\"3\\n1 2 3\\n0 2 3\\n0 1 3\\n1 2\\n2\") == '2'\nassert solution(\"3\\n1 2 3\\n0 2 3\\n0 1 3\\n1 2\\n2\") == '4'\n\"\"\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2\\n0 2 3\\n0 1\\n1') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1') == '2'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4') == '2'\nassert solution('4\\n1 2\\n0 2 3\\n0 1\\n1') == '2'\n\n\"\"\"\nimport networkx as nx\nfrom itertools import combinations"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2\\n0 2 3\\n0 1\\n1') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1') == '2'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4') == '2'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n0 2 3\\n0 1\\n1\\n') == '3'\nassert solution('4\\n1 2 3\\n0 2 3\\n0 1 3\\n0 1 2\\n') == '2'\nassert solution('5\\n1 2 3 4\\n2 3 4\\n0 1 3 5\\n0 1 2 5\\n0 1 4\\n0 1 3 4\\n0 1 2 4\\n2 4\\n') == '2'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n') == '2'\nassert solution('4\\n1 2 3\\n0 2 3\\n0 1 3\\n0 1 2\\n') == '2'\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\") == \"2\"\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\") == \"3\"\nassert solution(\"7\\n2 3 4 5\\n2 3 4 5\\n0 1 5\\n1 2 3 4 5\\n0 1 2 3 4 5\") == \"3\"\n\nimport sys\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n0 2 3\\n0 1\\n1\\n\") == '3'\nassert solution(\"1 2\\n0 2 3\\n0 1\\n1\\n\") == '2'\nassert solution(\"1 2\\n0 2 3\\n0 1\\n1\\n\") == '2'\nassert solution(\"1 2\\n0 2 3\\n0 1\\n1\\n\") == '2'\nassert solution(\"1 2\\n0 2 3\\n0 1\\n1\\n\") == '2'"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n3\") == \"2\"\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"2\"\nassert solution(\"4\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\") == \"2\"\nassert solution(\"5\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\") == \"2\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1 2\n0 2 3\n1 4\n0 4\n1 3 5\n2 4''') == '2'\nassert solution('''6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4''') == '2'\nassert solution('''4\n1 2\n0 2 3\n0 1\n1''') == '3'\nassert solution('''7\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\n0 6''') == '3'\nassert solution('''10\n0 1\n0 2 3\n0 4 5\n0 6 7\n0 8 9\n0 10\n1 2 5\n1 3 6\n1 7 8\n1 9 10\n2 4 6\n2 5 7\n3 4 7\n3 6 9\n3 7 10\n4 8\n4 9\n4 10\n5 6\n5 7\n6 10\n6 9''') == '5'\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\nBLUE 1 5000\nRED 5001 10000\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n\"\"\") == \"IMPOSSIBLE\"\n\n\"\"\"\nimport sys\nimport io\n\ntest_str = \"\"\"\n2\nBLUE 1 5000\nRED 5001 10000\n\"\"\"\nsys.stdin = io.StringIO(test_str)\nprint(solution(\"\"))\n\"\"\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '2\\n'\n    'BLUE 1 5000\\n'\n    'RED 5001 10000\\n') == '2'\n\nassert solution(\n    '3\\n'\n    'BLUE 1 6000\\n'\n    'RED 2000 8000\\n'\n    'WHITE 7000 10000\\n') == '3'\n\nassert solution(\n    '4\\n'\n    'BLUE 1 3000\\n'\n    'RED 2000 5000\\n'\n    'ORANGE 4000 8000\\n'\n    'GREEN 7000 10000\\n') == 'IMPOSSIBLE'\n\nassert solution(\n    '2\\n'\n    'BLUE 1 4000\\n'\n    'RED 4002 10000\\n') == 'IMPOSSIBLE'\n\nassert solution(\n    '2\\n'\n    'BLUE 1 3000\\n'\n    'RED 2000 5000\\n') == 'IMPOSSIBLE'"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\nBLUE 1 5000\\nRED 5001 10000') == '2'\nassert solution('3\\nBLUE 1 6000\\nRED 2000 8000') == '3'\nassert solution('4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\\nGREEN 7000 10000') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"2\nBLUE 1 5000\nRED 5001 10000\"\"\") == \"2\"\n\nassert solution(\"\"\"3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\"\"\") == \"3\"\n\nassert solution(\"\"\"4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\"\"\") == \"IMPOSSIBLE\"\n\n\"\"\"\n100% DONE\n\n\nDONE\n\n\"\"\""
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\") == \"3\\n\"\n\"\"\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\nBLUE 1 5000\nRED 5001 10000\n\"\"\") == \"2\"\nassert solution(\"\"\"\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n\"\"\") == \"3\"\nassert solution(\"\"\"\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n\"\"\") == \"IMPOSSIBLE\"\n\n\"\"\"\n\"\"\""
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\") == \"IMPOSSIBLE\"\nassert solution(\"2\\nBLUE 1 4000\\nRED 4002 10000\") == \"IMPOSSIBLE\"\n\n\"\"\"\n\n\"\"\"\nSolution Approach:\n\n1. Think of a helper function (or function-generator) that takes an array of strings and outputs a function that works on a string array.\n\n2. Implement a helper function that validates the conditions.\n\n3. Use the helper function to iterate through all the offers and check the condition.\n\nNote:\nThe helper function takes in an array of strings and outputs a function that takes a string and validates it.\n\n\"\"\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'IMPOSSIBLE'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\\nWHITE 7000 10000\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\\nGREEN 7000 10000\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\nBLUE 1 5000\\nRED 5001 10000') == '2'\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\nassert solution('AAABBAAABBAAABBAAABBAAABB') == '13'\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AAAABBBBCCCCCCCDDEEEEEE\") == 'A8^5E3'\nassert solution(\"AB\") == \"AB\"\nassert solution(\"BA\") == \"BA\"\nassert solution(\"CCCCCCC\") == \"C6^5\"\nassert solution(\"EEEEEEEEEEE\") == \"E6^5\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"DOODOO\") == \"(DOO)^2\"\nassert solution(\"POPPOP\") == \"(POP)^2\"\nassert solution(\"ABABAB\") == \"(ABA)^2\"\nassert solution(\"ABAAAB\") == \"(AB)A^2A\"\nassert solution(\"AAAAA\") == \"(A)^5\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('POPPOP') == '2(POP)^2'\nassert solution('ABABAB') == '(ABA)^2'\nassert solution('AAAA') == '^2AAAA'\nassert solution('POPPOP') == '(POP)^2'\nassert solution('BABABAB') == '^2BABBAB'\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('PRATTATTATTIC') == 6\nassert solution('GGGGGGGGG') == 1\nassert solution('PRIME') == 5\nassert solution('BABBABABBABBA') == 6\n\nprint(solution(input()))\n\"\"\"\n\nimport re"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert solution(\"ABAB\") == \"A(B)A\"\nassert solution(\"BABA\") == \"BABA\"\nassert solution(\"POPPOP\") == \"POP(POP)\"\nassert solution(\"ABABBABBA\") == \"A(B(B)A)\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AABAAABBBABBA\") == 7\nassert solution(\"ABCABCABC\") == 6\nassert solution(\"\") == 0\nassert solution(\"BAABBABAA\") == 3\nassert solution(\"BBBBB\") == 0\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"PRATTATTATTIC\") == 6\n\"\"\"\n\n\"\"\"\nSome very interesting ideas about a possible solution:\n\"\"\""
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('PRATTATTATTIC') == 6\nassert solution('GGGGGGGGG') == 1\nassert solution('PRIME') == 5\nassert solution('BABBABABBABBA') == 6\nassert solution('BABABABABABABA') == 5\n\"\"\"\n\nimport re"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"PRATTATTATTIC\") == 6\n\"\"\""
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"D 1 D 2 E D 3 D 1 E\") == \"0\"\nassert solution(\"D 2 D 1 E D 1 D 2 E\") == \"1\"\nassert solution(\"I 1 X D 1 E\") == \"0\"\nassert solution(\"I 14 B I 14 A E I 14 A I 15 B E\") == \"0\"\n\"\"\""
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\\n\") == \"0\"\nassert solution(\"D 1\\nE\\nD 2\\nD 1\\nD 2\\nE\\n\") == \"1\"\nassert solution(\"D 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\\n\") == \"0\"\nassert solution(\"D 14 A\\nI 15 B\\nE\\nI 14 A\\nI 15 B\\nE\\n\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('D 1\\nD 2\\nE') == '0'\nassert solution('D 1\\nD 2\\nD 1\\nE') == '1'\nassert solution('D 1\\nD 1\\nE') == '0'\nassert solution('I 1 X\\nD 1\\nE') == '0'\nassert solution('I 14 B\\nI 14 A\\nE') == '0'\n\n\"\"\"\n\n\nclass DNA_Sequence:\n    def __init__(self, name):\n        self.name = name\n\n\nclass Operation:\n    def __init__(self, operation_type, data):\n        self.operation_type = operation_type\n        self.data = data\n\n    def __repr__(self):\n        return f'{self.operation_type} {self.data}'\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"D 1\\nD 2\\nE\") == \"0\"\nassert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\") == \"1\"\nassert solution(\"I 1 X\\nD 1\\nE\") == \"0\"\nassert solution(\"I 14 B\\nI 14 A\\nE\") == \"0\"\nassert solution(\"I 14 A\\nI 15 B\\nE\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"D 1\\nD 2\\nE\") == \"0\"\nassert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\") == \"1\"\nassert solution(\"I 1 X\\nD 1\\nE\\nE\") == \"0\"\nassert solution(\"I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\") == \"0\"\nassert solution(\"I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\\nD 1\\nD 2\\nE\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"D 1\") == \"0\"\nassert solution(\"D 2\") == \"1\"\nassert solution(\"E\") == \"0\"\nassert solution(\"D 3\") == \"1\"\nassert solution(\"D 1\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\nI 1 X\nD 1\nE\nE\n''') == '0'\nassert solution('''\nD 1\nD 2\nE\nD 3\nD 1\nE\n''') == '1'\nassert solution('''\nI 1 X\nD 1\nE\nE\n''') == '0'\nassert solution('''\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n''') == '0'\nassert solution('''\nD 1\nD 2\nE\nD 3\nD 1\nE\n''') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '0'\nassert solution('D 1\\nD 2\\nE') == '0'\nassert solution('D 1\\nD 2\\nE') == '1'\nassert solution('I 1 X\\nD 1\\nE') == '0'\nassert solution('I 14 B\\nI 14 A\\nE') == '0'\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"D 1\\nD 2\\nE\") == \"0\"\nassert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\") == \"0\"\nassert solution(\"I 1 X\\nD 1\\nE\") == \"0\"\nassert solution(\"I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\") == \"0\""
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\nassert solution(\"1 1 1 1 1 1\") == \"400\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 0 1 0 0 0\") == '300'\nassert solution(\"5 0 1 0 1 0\") == '1900'\nassert solution(\"6 0 1 1 0 0\") == '2300'\nassert solution(\"10 399 0 0 0 0\") == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 0 1 0 0 0''') == '300'\nassert solution('''5 0 1 0 1 0''') == '1900'\nassert solution('''6 0 1 1 0 0''') == '2300'\nassert solution('''10 399 0 0 0 0''') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"4 0 1 0 0 0\"\"\") == \"300\"\nassert solution(\"\"\"5 0 1 0 1 0\"\"\") == \"1900\"\nassert solution(\"\"\"6 0 1 1 0 0\"\"\") == \"2300\"\nassert solution(\"\"\"10 399 0 0 0 0\"\"\") == \"399\"\nassert solution(\"\"\"40 0 1 1 0 0\"\"\") == \"7490\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 0 1 0 0 0''') == '300'\nassert solution('''5 0 1 0 1 0''') == '1900'\nassert solution('''6 0 1 1 0 0''') == '2300'\nassert solution('''10 399 0 0 0 0''') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n\"\"\"\n\nfrom typing import List\n\nclass CritterJunction:\n\n    def __init__(self, days: int, Bling: int, fruits: int, trees: List[int]):\n        self.days = days\n        self.Bling = Bling\n        self.fruits = fruits\n        self.trees = trees\n\n    def max_Bling(self):\n        self.Bling += min(self.Bling, self.days * 100)\n\n        for i in range(0, len(self.trees)):\n            if self.trees[i] > 0:\n                self.Bling += min(self.Bling, self.trees[i] * 100)\n                self.trees[i] -= 1\n                self.fruits += 3\n        \n        for i in range(0, len(self.trees)):\n            if self.trees[i] > 0:\n                self.Bling += min(self.Bling, self.trees[i] * 500)\n                self.trees[i] -= 1\n                self.fruits += 3\n\n        self.days -= 1"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin):\n        d, b, f, t0, t1, t2 = [int(x) for x in stdin.split()]\n        f1, f2 = 0, 0\n        if t0!= 0:\n            f1 = 100 * t0\n        if t1!= 0:\n            f1 += t1 * 3\n        if t2!= 0:\n            f1 += t2 * 3\n        f1 = min(f1, 400 * d)\n        if t0!= 0 and t1 == 0:\n            f1 = min(f1, 400 * d)\n            b1 = b\n            for i in range(3):\n                b1 += f\n                f1 = min(f1, 400 * d)\n                b1 = min(b1, 500)\n            b1 += f\n            b1 = min(b1, 500)\n            f1 = min(f1, b1 * d)\n        b2 = b\n        for i in range(3):\n            b2 += f\n            f2 = min(f2, 500 * d)\n            b2 = min(b2, 500)\n        b2 += f\n        b2 = min(b2, 500)\n        f2 = min(f2, b2 * d)\n        return f1 + f2"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n\n\"\"\""
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n\"\"\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10\\n1 5\\n1 4\") == 2\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 10\\n1 5\\n1 4') == '2'\nassert solution('2 10\\n1 5\\n1 12') == '2'\nassert solution('2 10\\n1 5\\n1 4') == '2'\nassert solution('2 10\\n1 5\\n1 12') == '2'\nassert solution('2 10\\n1 5\\n1 4') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10\\n1 5\\n1 4') == '2'\nassert solution('2 10\\n1 12\\n1 13') == '2'\nassert solution('2 10\\n1 12\\n1 5') == '2'\nassert solution('2 10\\n1 5\\n1 12') == '2'\nassert solution('2 10\\n1 5\\n4 1') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('4 10\\n1 5\\n1 4') == '2'\nassert solution('3 10\\n2 1\\n1 2') == '2'\nassert solution('3 10\\n1 3\\n1 2') == '2'\nassert solution('3 10\\n1 3\\n1 2\\n1 3') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10\\n1 5\\n1 4\") == 2\nassert solution(\"2 10\\n1 12\\n1 13\") == 2\nassert solution(\"2 10\\n1 5\\n4 1\") == 2\nassert solution(\"2 10\\n1 5\\n4 1\") == 2"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 10\\n1 5\\n1 4\") == \"2\"\nassert solution(\"2 10\\n1 12\\n1 13\") == \"2\"\nassert solution(\"2 10\\n1 5\\n4 1\") == \"2\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2 10\n1 5\n1 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 10\n1 12\n1 13\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 10\n1 12\n1 13\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 10\n1 5\n4 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 10\n1 5\n4 1\n\"\"\") == \"2\""
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 10\\n1 5\\n1 4') == 2\nassert solution('2 10\\n1 12\\n1 13') == 2\nassert solution('2 10\\n1 12\\n1 5') == 2\nassert solution('2 10\\n4 1\\n1 5') == 2\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 10\\n1 5\\n1 4') == 2\nassert solution('2 10\\n1 5\\n1 12') == 2\nassert solution('2 10\\n1 5\\n1 13') == 2\n\"\"\"\n\n\"\"\"\nSolution:\n\n1. We need to keep track of the number of distinct ranks in a list.\n2. We need to keep track of the number of distinct ranks at each index in a list.\n3. Each index of the list stores the total number of distinct ranks at that index.\n4. For each pair of indices, we compare the number of distinct ranks at the two indices to check for invalid rankings.\n\"\"\"\n\nN, K = map(int, input().split(' '))\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\\n5\") == \"Impossible\"\nassert solution(\"2\\n1 1 1\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == \"28.970562748\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\") == \"28.970562748\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\") == \"28\"\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == \"28.970562748\"\nassert solution(\"8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\") == \"32\"\n\"\"\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8\"\n) == \"28.970562748\"\n\nassert solution(\n\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\"\n) == \"28.970562748\"\n\nassert solution(\n\"8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\"\n) == \"32\"\n\n\"\"\""
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n10 10 5\n10 20 5\n20 10 5\n20 20 5''') == '28'\n\nassert solution('''6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3''') == '28.970562748'\n\nassert solution('''8\n4 4 1\n4 6 1\n4 8 1\n6 6 14\n8 4 1\n8 6 1\n8 8 1\n99 6 -8''') == '32'\n\nassert solution('''8\n4 4 1\n4 6 1\n4 8 1\n6 6 14\n8 4 1\n8 6 1\n8 8 1\n99 6 -8''') == '32'\n\nassert solution('''6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3''') == '28.970562748'"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8\\n') == '28.970562748'\nassert solution('6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\\n') == '28.970562748'\nassert solution('8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\\n') == '32'\n\"\"\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\") == \"28\"\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == \"28.970562748\"\n\n\"\"\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5') == '28'\nassert solution('4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8') == '36.2842712475'\nassert solution('6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3') == '28.970562748'\nassert solution('8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8') == '32'\n\n\"\"\""
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(open(r'../input/input_day_05.txt').read()) == 'POSSIBLE'\n\"\"\""
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2\n2 2\n1 1\n''') == '3'\nassert solution('''\n8\n4 4 1\n4 6 1\n4 8 1\n6 6 14\n8 4 1\n8 6 1\n8 8 1\n99 6 -8\n''') == '32'"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '3\\n'\n    '1 3 9 5\\n'\n    '2 2 6 8\\n'\n    '4 8 9 3\\n'\n) == '3'\n\nassert solution(\n    '3\\n'\n    '5 2 7 10\\n'\n    '7 4 4 10\\n'\n    '2 4 10 8\\n'\n) == '1'\n\nassert solution(\n    '3\\n'\n    '2 1 6 5\\n'\n    '2 5 5 4\\n'\n    '5 1 7 7\\n'\n) == '1'\n\nassert solution(\n    '2\\n'\n    '-1 -2 -1 -1\\n'\n    '-1 2 -1 -1\\n'\n) == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\") == \"3\"\nassert solution(\"3\\n5 2 7 10\\n7 4 4 10\") == \"1\"\nassert solution(\"3\\n2 1 6 5\\n2 5 5 4\\n5 1 7 7\") == \"1\"\nassert solution(\"2\\n-1 -2 -1 -1\\n-1 2 -1 -1\") == \"1\"\n\"\"\""
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\\n\") == \"3\"\nassert solution(\"3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\\n\") == \"1\"\nassert solution(\"3\\n-1 -2 -1 -1\\n-1 2 -1 -1\\n5 1 7 7\\n\") == \"1\"\nassert solution(\"2\\n-1 -2 -1 -1\\n-1 2 -1 -1\\n5 1 7 7\\n\") == \"1\"\nassert solution(\"2\\n-1 2 -1 -1\\n-1 2 -1 -1\\n5 1 7 7\\n\") == \"1\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''\n3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n''') == '3'\nassert solution(\n'''\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\nassert solution(\n'''\n3\n2 1 6 5\n2 5 5 4\n5 1 7 7\n''') == '1'\nassert solution(\n'''\n2\n-1 -2 -1 -1\n-1 2 -1 -1\n''') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n\"\"\") == 3\n\nassert solution(\"\"\"\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n\"\"\") == 1\n\nassert solution(\"\"\"\n3\n2 1 6 5\n2 5 5 4\n5 1 7 7\n\"\"\") == 1\n\nassert solution(\"\"\"\n2\n-1 -2 -1 -1\n-1 2 -1 -1\n\"\"\") == 1\n\n\"\"\"\nIn the first test case, the three points are [1,3,5], [2,2,6], and [4,8,3]; they are all distinct.\n\nIn the second test case, the three points are [5,2,7], [7,4,4], and [2,4,10]; they all intersect at the point [5,4,7].\n\nIn the third test case, the two lines touch each other at the point [10,4,7].\n\"\"\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\") == \"3\"\nassert solution(\"3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\") == \"1\"\nassert solution(\"3\\n-1 -2 -1 -1\\n-1 2 -1 -1\") == \"1\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n''') == '3'\nassert solution('''3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\nassert solution('''3\n-1 -2 -1 -1\n-1 2 -1 -1\n''') == '1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\\n\") == \"3\"\nassert solution(\"3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\\n\") == \"1\"\nassert solution(\"3\\n-1 -2 -1 -1\\n-1 2 -1 -1\\n5 1 7 7\\n\") == \"1\"\n\nimport sys"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\") == 3\nassert solution(\"3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\") == 1\nassert solution(\"3\\n-1 -2 -1 -1\\n-1 2 -1 -1\") == 1\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"55\") == \"55\"\nassert solution(\"101\") == \"101\"\nassert solution(\"1234321\") == \"94708\"\n\nassert solution(10) == \"10\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101\") == -1\nassert solution(\"1234321\") == 94708\n\"\"\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"55\") == \"55\"\nassert solution(\"101\") == \"-1\"\nassert solution(\"1234321\") == \"94708\"\n\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101') == '-1'\nassert solution('1234321') == '94708'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == 10\nassert solution(\"55\") == 55\nassert solution(\"101\") == -1\nassert solution(\"1234321\") == 94708\n\nprint('Test Successful')\n\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"55\") == \"55\"\nassert solution(\"101\") == \"-1\"\nassert solution(\"1234321\") == \"94708\"\nprint('All tests passed.')\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12321') == 1\nassert solution('12223') == 2\nassert solution('33322111') == 6\nassert solution('1234321') == 94708"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123\") == 3\nassert solution(\"1010\") == 2\nassert solution(\"1011\") == 3\nassert solution(\"101101010\") == 10\nassert solution(\"101101011\") == 11\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"55\") == \"55\"\nassert solution(\"101\") == \"-1\"\nassert solution(\"1234321\") == \"94708\"\n\"\"\""
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3, 0, 0, 0, 3) == 6\nassert solution(1, 2, 0, 0, 5) == 2\nassert solution(1, 2, 0, 0, 4) == 4\nassert solution(1, 2, 0, 0, 6) == 0\n\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 0 0 0 3\\n') == '6'\nassert solution('1 2 0 0 5\\n') == '2'\nassert solution('1 2 0 0 4\\n') == '4'\nassert solution('1 2 0 0 6\\n') == '0'\n\"\"\"\n\n\n\nimport numpy as np\n\nN, a11, a12, a21, a22 = map(int, stdin.readline().strip().split())\n\nres = np.sum((a11 + a12 + a21 + a22) >= N)\nprint(res)"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 0 0 5\\n\") == \"2\"\nassert solution(\"2 1 0 0 5\\n\") == \"2\"\nassert solution(\"2 1 0 0 6\\n\") == \"0\"\nassert solution(\"1 2 0 0 6\\n\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 0, 0, 0, 3) == 6\nassert solution(1, 2, 0, 0, 5) == 2\nassert solution(1, 2, 0, 0, 4) == 4\n\nassert solution(1, 2, 0, 0, 6) == 0\nassert solution(3, 1, 2, 0, 0) == 0\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 0 0 0 3\") == 6\nassert solution(\"1 2 0 0 5\") == 2\nassert solution(\"1 2 0 0 4\") == 4\nassert solution(\"1 2 0 0 6\") == 0\n\n\"\"\"\n\nfrom typing import List\n\nMOD = 1000000007"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 0 0 0 3\") == 6\nassert solution(\"1 2 0 0 5\") == 2\nassert solution(\"1 2 0 0 4\") == 4\nassert solution(\"1 2 0 0 6\") == 0\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 0 0 5\") == \"6\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\"\n\nprint(solution(input()))"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 0 0 5') == '6'\nassert solution('1 2 0 0 6') == '0'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\nassert solution('1 2 0 0 4') == '4'\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 0 0 5\") == \"6\"\nassert solution(\"1 2 0 0 6\") == \"0\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\nassert solution(\"0.5 -8 8\") == \"-4.36385220 9.46891588\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\nassert solution('0.5 -8 8') == '-4.36385220 9.46891588'\nprint('The local tests are done. Click on \"Check\" for more problems')\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"2.5 -5.301\"\nassert solution(\"0.5 8 8\") == \"9.2 8.8\"\nassert solution(\"1 8 8\") == \"6.2 -0.3\"\nassert solution(\"0.5 -8 8\") == \"-4.36 38.52\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\n\"\"\"\n\n\nimport math\nimport sys\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\nassert solution('0.5 -8 8') == '-4.36385220 9.46891588'\n\"\"\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\n\"\"\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n\"\"\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == '-1.26167861 3.88425357'\nassert solution(\"0.5 8 8\") == '9.21068947 2.56226688'\nassert solution(\"1 8 8\") == '6.22375968 -0.31921472'\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\n\n\"\"\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('2 3') == '1\\n2'\nassert solution('2 2') == '0'\nassert solution('3 3\\n1 2\\n2 3\\n3 1') == '2\\n4\\n5'\nassert solution('4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1') == '2\\n4\\n5'"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\\n') == '2\\n4\\n5\\n'\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n1 2\\n2 1\\n') == '1\\n2\\n'\nassert solution('3 3\\n1 2\\n2 3\\n3 1\\n') == '1\\n1\\n'\nassert solution('4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\\n') == '2\\n2\\n4\\n'\n\"\"\"\n\nimport sys\nimport heapq\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 2\\n2 1\\n') == '1\\n2'\nassert solution('4 5\\n1 2\\n1 3\\n3 2\\n2 4\\n3 4\\n') == '0\\n1\\n1'\nassert solution('4 5\\n1 2\\n1 3\\n3 2\\n2 4\\n3 4\\n') == '2\\n4'\nassert solution('4 5\\n1 2\\n1 3\\n3 2\\n2 4\\n3 4\\n') == '1\\n1'\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 2\\n2 1') == '1\\n2'\nassert solution('3 3\\n1 2\\n2 3\\n3 1') == '0\\n1'\nassert solution('4 5\\n1 2\\n1 3\\n3 2\\n2 4\\n3 4') == '2\\n1\\n1\\n1'"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n1 2\\n2 1') == '1'\nassert solution('3 3\\n1 2\\n2 3\\n3 1') == '0'\nassert solution('4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 2\\n2 1') == '1'\nassert solution('3 3\\n1 2\\n2 3\\n3 1') == '0'\nassert solution('4 5\\n1 2\\n1 3\\n3 2\\n2 4\\n3 4') == '2'"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\\n\") == '1\\n2\\n'\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\\n\") == '0\\n2\\n1\\n'\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\\n\") == '2\\n4\\n5\\n'\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n1 2\\n2 1\\n') == '1'\nassert solution('3 3\\n1 2\\n2 3\\n3 1\\n') == '1'\nassert solution('4 5\\n1 2\\n1 3\\n3 2\\n2 4\\n3 4\\n') == '0'"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1 2\\n2 1\\n') == '1'\nassert solution('3 3\\n1 2\\n2 3\\n3 1\\n') == '1'\nassert solution('4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\\n') == '2'\nassert solution('4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\\n') == '2'\n"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3') == '11'\nassert solution('5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1') == 'infinity'\nassert solution('3 3 1 2\\n0 1 1\\n1 0 1') == '2'\nassert solution('5 2 0 2\\n0 1 1\\n1 0 1\\n0 2 1\\n0 2 1') == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\nassert solution(\"2 1 0 1\\n0 1 2\") == \"2\"\n\"\"\"\nfrom collections import deque, defaultdict\nimport numpy as np"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\"\n) == \"11\"\nassert solution(\n    \"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\"\n) == \"infinity\"\nassert solution(\n    \"3 3 1 2\\n0 1 1\\n1 0 1\"\n) == \"2\"\n\nassert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\") == \"2\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3') == '11'\nassert solution('5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1') == 'infinity'\nassert solution('3 3 1 2\\n0 1 1\\n1 0 1') == '2'\nassert solution('2 1 0 1\\n0 1 2') == '2'\n\"\"\""
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\\n\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\\n\") == \"infinity\"\nassert solution(\"2 1 0 1\\n0 1 2\\n\") == \"2\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\\n1 2 1\\n\") == \"infinity\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\") == \"2\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\\n1 2 1\") == \"infinity\"\n\n\"\"\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\") == \"2\"\nassert solution(\"2 1 0 1\\n0 1 2\") == \"2\"\n\"\"\"\n\nfrom enum import Enum\nfrom typing import List\n\nfrom icontract import require, ensure\n\n\nclass Direction(Enum):\n    OUTGOING = 0\n    INCOMING = 1\n\n\nclass Node:\n    def __init__(self, direction: Direction, distance: int):\n        self.direction = direction\n        self.distance = distance\n\n\nclass Edge:\n    def __init__(self, start: Node, end: Node):\n        self.start = start\n        self.end = end\n\n\nclass Graph:\n    def __init__(self):\n        self.edges: List[Edge] = []\n\n    def add_edge(self, start: Node, end: Node):\n        self.edges.append(Edge(start, end))\n\n\nclass BreadthFirstSearch:\n    @require(lambda graph: len(graph.edges) > 0)\n    @require(lambda graph: len(graph.edges) == len(set(edge.start.direction for edge in graph.edges)))\n    def __init__(self, graph: Graph):\n        self.graph = graph\n        self.queue = []\n        self.distances = {}\n        self.visited = set()\n\n    def distance(self, node: Node) -> int:\n        return self.distances.setdefault(node, -1)\n\n    @require(lambda start: start.direction == Direction.OUTGOING)\n    def search(self, start: Node) -> int:\n        self.queue.append(start)\n        while self.queue:\n            current = self.queue.pop(0)\n            self.visited.add(current)\n            self.distances[current] = self.distance(current)\n\n            for edge in self.graph.edges:\n                if edge.start == current:\n                    continue\n\n                if edge.end == current:\n                    self.queue.append(edge.end)\n                    continue\n\n                if edge.start in self.visited:\n                    continue\n\n                if edge.end in self.visited:\n                    continue\n\n                self.queue.append(edge.end)\n        return self.distances[start]\n"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\nassert solution(\"2 1 0 1\\n0 1 2\") == \"2\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\") == \"infinity\"\n\n\"\"\""
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 0 3\\n0 1 1\\n1 2 1\\n2 0 4\\n2 3 1\\n2 3 3') == '11'\nassert solution('5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1') == 'infinity'\nassert solution('3 3 1 2\\n0 1 1\\n1 0 1') == '2'\nassert solution('2 1 0 1\\n0 1 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 1 1\\n2 1 2\\n2 3 4') == 6\nassert solution('3 3 1 1\\n2 1 2\\n0') == 12\nassert solution('2 2 3\\n1 1\\n2 2 3') == 0\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\") == 6\n\"\"\"\n\nfrom collections import Counter\nfrom fractions import Fraction\nfrom functools import reduce\nfrom operator import mul\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 1 2 1\\n2 1 2\\n2 3 4') == 6\nassert solution('3 3 1 1\\n1 1\\n2 2 3') == 0\nassert solution('3 2 2 3\\n1 1\\n2 2 3') == 18\nassert solution('3 1 2 3\\n2 1 2') == 12\n\"\"\""
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 1 1\\n1 2 2 3\\n2 1 2') == '0'\nassert solution('4 2 1 2 1\\n2 1 2\\n2 3 4') == '6'\nassert solution('3 3 1 1\\n1 1\\n2 2 3') == '18'\n\n\"\"\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\") == 6\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\") == 0\nassert solution(\"3 2 2 3\\n1 1\\n2 2 3\") == 18\n\n\"\"\"\n\nimport sys\nimport itertools\n\nsys.stdin = open('test_files/Y11R5P1/A.in')\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 1 2 1') == '6'\nassert solution('3 3 1 1') == '0'\nassert solution('3 2 2 3') == '18'\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\") == 6\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\") == 0\nassert solution(\"3 2 2 3\\n1 1\\n2 2 3\") == 18\n\n\"\"\"\nimport itertools\n\nfrom collections import Counter, deque\nfrom functools import partial\n\nfrom typing import List, Deque, Iterator, Callable"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 1 2 1\\n2 1 2\\n2 3 4') == '6'\nassert solution('3 3 1 1\\n1 1\\n2 2 3') == '0'\nassert solution('3 3 1 1\\n1 1\\n2 2 3') == '18'\n\"\"\"\n\nfrom collections import Counter\nfrom functools import lru_cache\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 2 3\\n1 1\\n2 2 3\") == \"18\"\nassert solution(\"4 2 1 2 1\\n2 1 2\") == \"6\"\nassert solution(\"3 2 1 1\\n1 1\") == \"0\"\nassert solution(\"3 2 3 3\\n2 3 1\") == \"0\"\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\nassert solution('2 1 2') == '2'\nassert solution('3 1 2 3') == '0'\nassert solution('2 3 1 1') == '18'\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('1000000 1'), '468559')\n        self."
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\nprint('The solution is correct!')\n\n----"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\nprint(solution(a))\n\n\"\"\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n\"\"\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 10\\n0 8') == '1'\nassert solution('5 1000000000 1000000000\\n5 8') == '49401'\n\"\"\"\n\nn, e = list(map(int, input().split()))\n\nres = 0\nfor i in range(n+1):\n    if len(str(i)) > e:\n        res += 1\n\nprint(res)\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\""
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\n\"\"\""
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(\"sample_input.txt\").read()) == \"14\""
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import chain\nfrom typing import List\n\nimport sys\n\nsys.setrecursionlimit(10 ** 9)\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\""
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\nimport sys\n\nassert sys.version_info >= (3, 7)"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 9\\n5 4 1') == '1'\nassert solution('4 13\\n2 2 2 2') == '3'\nassert solution('18 90\\n1 2 3 4 5 6 1 2 3 4 5 6') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\n\"\"\"\n\n\n\nimport math\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 9\\n5 4 1\\n\") == \"1\"\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4 7 8\") == '3'\n\"\"\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('3\\n4 7 8') == '3'\nassert solution('5\\n2 3 4 5 8') == '5'\nassert solution('3\\n10 20 30') == '6'\nassert solution('5\\n10 50 100') == '6'\n\n\"\"\"\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n4 7 8\") == \"5\"\n\nprint(solution(stdin.rstrip()))\n\"\"\"\n\nimport math"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1\") == \"0\"\nassert solution(\"3\\n2 3 4 5\") == \"5\"\nassert solution(\"5\\n2 3 4 5 8\") == \"5\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4 7 8\") == \"3\"\nassert solution(\"5\\n2 3 4 5 8\") == \"5\"\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 8\\n2 3 4 5 8\") == \"5\"\nassert solution(\"2 3 4 5 8\\n4 7 8\") == \"3\"\nassert solution(\"5\\n2 3 4 5 8\") == \"5\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1\n1''') == '0'\nassert solution('''3\n4 7 8''') == '3'\nassert solution('''5\n2 3 4 5 8''') == '5'\n\n\"\"\""
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 4 5 8') == '5'\nassert solution('1') == '0'\nassert solution('3 4 7 8') == '3'\n\n'''\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4 7 8\") == \"5\"\nassert solution(\"1\\n1\") == \"0\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n1\\n') == '0'\n\"\"\"\n\nfrom math import sqrt\nfrom sys import stdin"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('15') == '5'\nassert solution('25') == '-1'\nassert solution('9') == '5'\nassert solution('1234') == '1234'\nassert solution('1234765') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('17') == '11112'\nassert solution('149') == '17'\nassert solution('56789') == '-1'\nassert solution('9') == '4'\nassert solution('12345') == '15'\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('153') == '5'\nassert solution('21') == '3'\nassert solution('7') == '3'\nassert solution('1234') == '8'\nassert solution('123456789') == '1'\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\") == 4\nassert solution(\"149\") == 17\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n\"\"\""
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234') == '1112'\n\"\"\"\n\nfrom timeit import default_timer as timer"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9') == 9\nassert solution('10') == -1\nassert solution('938') == -1\nassert solution('938121234') == 1027121234\nassert solution('938121234765') == -1\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\nprint('Success')\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('15') == '3'\nassert solution('99') == '-1'\nassert solution('1234') == '23'\nassert solution('1234765') == '11112'\nassert solution('123456789') == '123456789'\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\nassert solution('9') == '3'\nassert solution('8') == '3'"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('d 4\\ncab\\ncda\\nccc\\nbadca') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\ncab\\naca') == 'AMBIGUOUS'\nassert solution('f 2\\ndea\\ncfb') == 'IMPOSSIBLE'"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('d 4') == 'adcb'\nassert solution('c 4') == 'AMBIGUOUS'\nassert solution('f 2') == 'IMPOSSIBLE'\nassert solution('c 2') == 'AMBIGUOUS'\n\n------Test Case Link------\nhttps://dmoj.ca/problem/ccc07j4\n'''\n\nimport sys"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('d 4\\ncab\\ncda\\nccc\\nbadca') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\ncab\\naca') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb') == 'AMBIGUOUS'\n\n\"\"\""
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('d 4\\ncab\\ncda\\nccc\\nbadca') == 'adcb'\nassert solution('c 4\\ncab\\ncca\\ncda\\nccc') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('d 4\\ncab\\ncda\\nccc\\nbadca\\n') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\ncab\\naca\\n') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb\\n') == 'AMBIGUOUS'\nassert solution('a 4\\nab\\nab\\nac\\nbc\\n') == 'AMBIGUOUS'\nassert solution('c 2\\nac\\nca\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('d 4\\ncab\\ncda\\nccc\\nbadca') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\nccc\\naca') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb') == 'AMBIGUOUS'\nprint(\"Passed all test cases!\")"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('d 4\\ncab\\ncda\\nccc\\nbadca\\n') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\nccc\\naca\\n') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb\\n') == 'AMBIGUOUS'\nprint('All test cases passed.')"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abc') == 'acb'\nassert solution('bca') == 'abc'\nassert solution('cab') == 'acb'\nassert solution('aca') == 'abc'\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"c 4\\ncab\\ncda\\nccc\\nbadca\") == \"adcb\"\nassert solution(\"f 2\\ndea\\ncfb\") == \"IMPOSSIBLE\"\nassert solution(\"d 4\\ncab\\nca\\ncbc\\n\") == \"AMBIGUOUS\"\n\n------Hint------\nRead the alphabet $\\mathcal{A}$ from A to Z and count how many distinct characters it contains. If there are $k$ distinct characters in $\\mathcal{A}$, then your order is guaranteed to be unique if you choose letters from $\\mathcal{A}$ in lexicographical order.\n\nIf there is more than one way to order $\\mathcal{A}$, you have to check if the order is consistent.\n\nWrite your own tests and find the order of the alphabet using the following procedure:\n\nCreate an empty list of strings.\nFor each string of length $n$, append it to the list.\nFind the unique characters in the list.\nFor each character $c$ in the list, find the shortest string that starts with $c$ and has the same number of unique characters as the list.\nIf such a string does not exist, or exists but is not unique, then the order is not unique.\nIf the order is unique, then sort the list in lexicographical order.\nIf the order is unique but is not an order of $\\mathcal{A}$, output IMPOSSIBLE.\nOtherwise, output the ordered alphabet.\n\n\"\"\""
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"d 4\\ncab\\ncda\\nccc\\nbadca\") == 'adcb'\nassert solution(\"c 4\\nabc\\nbca\\nccc\\naca\") == 'IMPOSSIBLE'\nassert solution(\"f 2\\ndea\\ncfb\") == 'AMBIGUOUS'"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 3 3\") == 9\n\"\"\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 3 3') == '9', f'Answer is 9'\n\"\"\"\n\nN, A, B, C = list(map(int, input().split()))"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 3 3') == 9\n\n\"\"\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 3 3') == '9'\n\"\"\""
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\""
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n\n\"\"\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n\"\"\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 3 3') == 9\nassert solution('10 20 0 0') == 10\nassert solution('100 20 543 12') == 164\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 3 3\") == 9\nassert solution(\"10 20 0 0\") == 10\nassert solution(\"100 20 543 12\") == 164\n\"\"\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'yes'\n\"\"\""
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"yes\"\nassert solution(\"4 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"no\"\nassert solution(\"4 3 3\\n1 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"no\"\nassert solution(\"4 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"yes\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\\n') == 'yes'\nassert solution('4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n') == 'no'\n\"\"\""
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0') == 'yes'\nassert solution('4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12') == 'no'"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'no'\nassert solution('2 1') == 'yes'\nassert solution('4 3 3') == 'yes'\nassert solution('3 2 3') == 'no'"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"no\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"yes\"\nassert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\") == \"yes\"\n\n\"\"\""
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'yes'\nassert solution('0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0') == 'yes'\nassert solution('3 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2') == 'no'\nassert solution('3 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12') == 'yes'\n\n\"\"\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"no\"\n\"\"\""
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"yes\""
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 3') == 'yes'\nassert solution('4 3 3') == 'no'\nassert solution('3 2 3') == 'yes'\nassert solution('3 2 3') == 'yes'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12121131221\") == \"7\"\nassert solution(\"652526\") == \"4\"\n\"\"\"\n\nfrom itertools import groupby\n"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\n\nprint(solution('652526'))\nprint(solution('12121131221'))\nprint(solution('123456789'))"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"652526\") == 4\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"123456789\") == \"1\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n\"\"\""
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('652526') == 4\n\"\"\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12121131221\") == 7\n\"\"\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\\n\") == \"0\"\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n\") == \"24\"\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n\") == \"800\"\n\n\"\"\""
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\") == \"0\"\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\") == \"24\"\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\") == \"800\"\n\n\"\"\""
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\") == \"0\"\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\") == \"24\"\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\") == \"800\"\n\"\"\"\n\nclass Dijkstra:\n    def __init__(self, n: int, roads: list[tuple[int, int, int]]):\n        self.n = n\n        self.roads = roads\n        self.src = 1\n        self.dest = n\n        self.cache = {key: float('inf') for key in range(1, n+1)}\n        self.cache[self.src] = 0\n\n    def do(self) -> int:\n        for _ in range(self.n-2):\n            min_key = None\n            min_val = float('inf')\n            for key, val in self.cache.items():\n                if val < min_val:\n                    min_val = val\n                    min_key = key\n            for key, _, val in self.roads:\n                if self.cache[key] > min_val + val:\n                    self.cache[key] = min_val + val\n        return self.cache[self.dest]"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\") == 0\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\") == 24\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\") == 800"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5 5') == ''\nassert solution('5 6') == ''\nassert solution('1 1') == ''\nassert solution('1 2') == ''\n"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n1 3\\n2 3\\n2 4\\n1 4\") == \"800\"\n\"\"\"\n\nfrom collections import defaultdict, deque\n\nn, m = map(int, input().split())\ngraph = defaultdict(set)\n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a].add(b)\n    graph[b].add(a)\n"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1\\n1 2\\n2 3\\n1 3') == '0'\nassert solution('4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4') == '24'\nassert solution('6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6') == '800'\n\"\"\""
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1\\n1 2\\n2 3\\n1 3\\n') == 0\nassert solution('4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n') == 24\nassert solution('6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n') == 800\n\"\"\""
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\\n\") == \"0\"\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n\") == \"24\"\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n\") == \"800\"\n\nprint(solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\\n\"))\nprint(solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n\"))\nprint(solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n\"))\n"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\") == \"0\"\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\") == \"24\"\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\") == \"800\"\nprint('Success')"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 2 4\\n') == '1 4'\nassert solution('5\\n1 2 3 4 5\\n') == '1 2 3 4 5'\nassert solution('5\\n2 1 4 3 5\\n') == '-1'\nassert solution('5\\n2 3 4 1 5\\n') == '-1'\n"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 2 4\\n') == '1 4'\n\"\"\""
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3 2 4\\n') == '1 4'\nassert solution('5\\n1 2 3 4 5\\n') == '1 2 3 4 5'\nassert solution('4\\n1 2 3 4\\n') == '-1'"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 2 4') == '1 4'\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5'\nassert solution('4\\n2 1 4 3') == '-1'\nprint('Test passed')\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 2 4\\n\") == \"1 4\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\\n\") == \"1 2 3 4\"\n\nSample Case #1\n\nSample Input 1:\n4\n1 3 2 4\nSample Output 1:\n1 4\nSample Output Explanation 1:\nIn the sample case, the critical elements are 1 and 4. Removing one element will decrease the LIS length.\n\nSample Input 2:\n5\n1 2 3 4 5\nSample Output 2:\n1 2 3 4 5\nSample Output Explanation 2:\nIn the sample case, the critical elements are 1, 2, 3, 4 and 5. Removing one element will decrease the LIS length.\n\nSample Input 3:\n4\n2 1 4 3\nSample Output 3:\n-1\nSample Output Explanation 3:\nIn the sample case, there is no critical element.\n\nSample Case #2\n\nSample Input 1:\n3\n1 2 3\nSample Output 1:\n-1\nSample Output Explanation 1:\nIn the sample case, there is no critical element.\n\nSample Input 2:\n4\n2 1 4 3\nSample Output 2:\n-1\nSample Output Explanation 2:\nIn the sample case, there is no critical element.\n\nSample Input 3:\n5\n1 2 3 4 5\nSample Output 3:\n1 2 3 4 5\nSample Output Explanation 3:\nIn the sample case, the critical elements are 1, 2, 3, 4 and 5. Removing one element will decrease the LIS length.\n\nSample Case #3\n\nSample Input 1:\n3\n2 1 3\nSample Output 1:\n1 2 3\nSample Output Explanation 1:\nIn the sample case, the critical elements are 1 and 2. Removing one element will decrease the LIS length.\n\nSample Input 2:\n5\n1 2 3 4 5\nSample Output 2:\n1 2 3 4 5\nSample Output Explanation 2:\nIn the sample case, the critical elements are 1, 2, 3, 4 and 5. Removing one element will decrease the LIS length.\n\nSample Input 3:\n4\n4 3 2 1\nSample Output 3:\n1 2 3 4\nSample Output Explanation 3:\nIn the sample case, the critical elements are 1, 2, 3 and 4. Removing one element will decrease the LIS length.\n\nSample Input 4:\n4\n1 2 3 4\nSample Output 4:\n-1\nSample Output Explanation 4:\nIn the sample case, there is no critical element.\n\nSample Input 5:\n5\n1 2 3 4 5\nSample Output 5:\n1 2 3 4 5\nSample Output Explanation 5:\nIn the sample case, the critical elements are 1, 2, 3, 4 and 5. Removing one element will decrease the LIS length.\n\nSample Case #4\n\nSample Input 1:\n4\n1 3 2 4\nSample Output 1:\n1 4\nSample Output Explanation 1:\nIn the sample case, the critical elements are 1 and 4. Removing one element will decrease the LIS length.\n\nSample Input 2:\n5\n1 2 3 4 5\nSample Output 2:\n1 2 3 4 5\nSample Output Explanation 2:\nIn the sample case, the critical elements are 1, 2, 3, 4 and 5. Removing one element will decrease the LIS length.\n\nSample Input 3:\n4\n2 1 4 3\nSample Output 3:\n-1\nSample Output Explanation 3:\nIn the sample case, there is no critical element.\n\nSample Input 4:\n5\n1 2 3 4 5\nSample Output 4:\n1 2 3 4 5\nSample Output Explanation 4:\nIn the sample case, the critical elements are 1, 2, 3, 4 and 5. Removing one element will decrease the LIS length.\n\nSample Input 5:\n4\n4 3 2 1\nSample Output 5:\n1 2 3 4\nSample Output Explanation 5:\nIn the sample case, the critical elements are 1, 2, 3 and 4. Removing one element will decrease the LIS length.\n\nSample Input 6:\n5\n2 1 3 4 5\nSample Output 6:\n1 2 3 4 5\nSample Output Explanation 6:\nIn the sample case, the critical elements are 1, 2, 3, 4 and 5. Removing one element will decrease the LIS length.\n\nSample Input 7:\n5\n4 1 2 3 5\nSample Output 7:\n1 2 3 4 5\nSample Output Explanation 7:\nIn the sample case, the critical elements are 1, 2, 3, 4 and 5. Removing one element will decrease the LIS length.\n\nSample Input 8:\n5\n1 2 3 4 5\nSample Output 8:\n1 2 3 4 5\nSample Output Explanation 8:\nIn the sample case, the critical elements are 1, 2, 3, 4 and 5. Removing one element will decrease the LIS length.\n\nSample Input 9:\n3\n1 2 3\nSample Output 9:\n-1\nSample Output Explanation 9:\nIn the sample case, there is no critical element.\n\nSample Input 10:\n4\n1 2 3 4\nSample Output 10:\n1 2 3 4\nSample Output Explanation 10:\nIn the sample case, the critical elements are 1, 2, 3, and 4. Removing one element will decrease the LIS length.\n\nSample Input 11:\n5\n1 2 3 4 5\nSample Output 11:\n1 2 3 4 5\nSample Output Explanation 11:\nIn the sample case, the critical elements are 1, 2, 3, 4 and 5. Removing one element will decrease the LIS length.\n\nSample Input 12:\n5\n5 1 2 3 4\nSample Output 12:\n1 2 3 4 5\nSample Output Explanation 12:\nIn the sample case, the critical elements are 1, 2, 3, 4 and 5. Removing one element will decrease the LIS length.\n\nSample Input 13:\n5\n4 3 2 1\nSample Output 13:\n1 2 3 4\nSample Output Explanation 13:\nIn the sample case, the critical elements are 1, 2, 3 and 4. Removing one element will decrease the LIS length.\n\nSample Input 14:\n5\n2 1 4 3 5\nSample Output 14:\n1 2 3 4 5\nSample Output Explanation 14:\nIn the sample case, the critical elements are 1, 2, 3, 4 and 5. Removing one element will decrease the LIS length.\n\nSample Input 15:\n5\n3 2 4 1 5\nSample Output 15:\n1 2 3 4 5\nSample Output Explanation 15:\nIn the sample case, the critical elements are 1, 2, 3, 4 and 5. Removing one element will decrease the LIS length.\n\nSample Input 16:\n5\n3 2 5 1 4\nSample Output 16:\n1 2 3 4 5\nSample Output Explanation 16:\nIn the sample case, the critical elements are 1, 2, 3, 4 and 5. Removing one element will decrease the LIS length.\n\nSample Input 17:\n5\n5 4 3 2 1\nSample Output 17:\n1 2 3 4 5\nSample Output Explanation 17:\nIn the sample case, the critical elements are 1, 2, 3, 4 and 5. Removing one element will decrease the LIS length.\n\nSample Input 18:\n5\n1 2 3 4 5\nSample Output 18:\n1 2 3 4 5\nSample Output Explanation 18:\nIn the sample case, the critical elements are 1, 2, 3, 4 and 5. Removing one element"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n1 3 2 4\n''') == '1 4'\nassert solution('''5\n1 2 3 4 5\n''') == '1 2 3 4 5'\nassert solution('''4\n2 1 4 3\n''') == '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 2 4\\n\") == \"1 4\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\\n\") == \"1 2 3 4\"\nassert solution(\"5\\n2 1 4 3 5\\n\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\\n\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 2 4') == '1 4'\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5'\nassert solution('4\\n2 1 4 3') == '-1'\n\nassert solution('4\\n2 1 4 3') == '-1'"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5') == '-1'\nassert solution('4') == '1 2 3 4'\nassert solution('3') == '1 2 3'\nassert solution('2') == '1 2'\n"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 2 4\\n\") == \"1 4\"\n\n\"\"\"\nimport itertools"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..') == 8\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..') == 8\nassert solution('3 3\\n...\\n.#.\\n...') == 1\nassert solution('2 6\\n.#####\\n#####.\\n') == 5\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..\") == 8\n\"\"\"\n\nn, m = list(map(int, stdin.readline().split()))\npaper = [stdin.readline() for _ in range(n)]\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..\") == 8\nassert solution(\"3 3\\n...\\n.#.\\n...\") == 1\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"4 8\\n\"\n\".#..#..\\n\"\n\".######.\\n\"\n\"..#..#..\\n\"\n) == 8\n\nassert solution(\n\"3 3\\n\"\n\"...\\n\"\n\"#.#.\\n\"\n\"#.#.\\n\"\n) == 1\n\nassert solution(\n\"2 6\\n\"\n\"#.#.\\n\"\n\"##.#\\n\"\n) == 5\nprint('Success')\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..') == '8'\nassert solution('3 3\\n...\\n.#.\\n...') == '1'\nassert solution('2 6\\n.#####\\n#####.\\n') == '5'\n\"\"\"\n\nimport sys\nimport pprint"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4\\n') == '3'\n\n-------------\n'''\nimport re"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n4 8\n..#..#..\n.######.\n.######.\n..#..#..\n''') == '8'\nassert solution('''\n3 3\n...\n.#.\n...\n''') == '1'\nassert solution('''\n2 6\n.#####\n#####.\n''') == '5'\n\n-----Notes-----\nThis problem is a more difficult version of problem 11, where you are required to answer the \u201cpuzzle\u201d.\n\nHint: See the introduction of this problem for a hint.\n\nYou can assume the input will always be valid, i.e. that it is a square matrix, and the number of nubs will always be valid.\n'''"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n#') == '0'\nassert solution('3 3\\n....\\n...#\\n...#') == '4'\nassert solution('2 3\\n#.\\n##') == '2'\nassert solution('3 3\\n##\\n#.') == '0'\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..') == '8'\nassert solution('3 3\\n...\\n.#.\\n...') == '1'\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \"\"\"\n        Finds the number of #'s on the paper, where it is a double\n        of #'s on the original paper\n        \"\"\"\n        pass\n        "
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\\n19 12 2 18 5 5\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\") == \"-1\"\n\n\"\"\"\n\nimport collections\nimport itertools\nimport math\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 2\\n1 2\\n2 1\\n1 2\\n') == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\n\n\"\"\""
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\\n19 12 2 18 5 5\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\") == \"-1\"\nprint('Success')"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1') == '6\\n19 12 2 18 5 5'\nassert solution('3 3 3\\n3 1 1\\n1 3 2\\n3 2 3') == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('3 2 2\\n1 2\\n2 1\\n1 2') == '-1'\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\\n') == '6\\n19 12 2 18 5 5'\nassert solution('3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\\n') == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('3 2 2\\n1 2\\n2 1\\n1 2\\n') == '-1'\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\"\nassert solution(\"4 5 5\\n3 1 1\\n1 3 2\\n3 2 3\\n3 1 3\") == \"13\"\nassert solution(\"4 3 2\\n3 1 1\\n1 3 2\\n3 2 3\") == \"-1\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1''') == '6\n\nassert solution('''3 3 3\n3 1 1\n1 3 2\n3 2 3''') == '13\n\nassert solution('''3 2 2\n1 2\n2 1\n1 2\n''') == '-1'''"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == '6\\n19 12 2 18 5 5\\n'\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\\n'\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\") == '-1\\n4 2 6 1 9 7 5 5 7 1 2 3 3\\n'\n\"\"\"\n\nimport sys\nimport math\nfrom typing import Tuple"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == '6'\n\nassert solution('''\n3 3 3\n3 1 1\n1 3 2\n3 2 3\n''') == '13'\n\nassert solution('''\n3 2 2\n1 2\n2 1\n1 2\n''') == '-1'\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\"\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\") == \"4 2 6 1 9 7 5 5 7 1 2 3 3\"\n\"\"\"\n\nimport numpy as np\nfrom collections import deque"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5\n3\n3\n3\n3\n3\n1\n2\n3\n4\n\"\"\") == \"5 1\"\nassert solution(\"\"\"5\n4\n3\n2\n1\n0\n1\n2\n3\n4\n\"\"\") == \"1 5\"\nassert solution(\"\"\"5\n4\n3\n2\n1\n0\n1\n2\n3\n4\n\"\"\") == \"3 2\"\n\nprint('Passed!')\n\n\"\"\"\npython3 find_jumping_paths.py\n10\n5\n3\n3\n3\n3\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\") == \"5 1\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\") == \"1 5\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\") == \"1 5\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\") == \"5 1\"\nassert solution(\"4\\n1\\n5\\n3\\n6\\n1\\n2\\n3\") == \"1 5\"\nassert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\") == \"5 1\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n\") == \"5 1\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\\n\") == \"1 5\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\\n\") == \"3 2\"\n\"\"\"\nimport math\nimport sys\nimport unittest\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4') == '5 1'\nassert solution('5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4') == '1 5'\nassert solution('4\\n1\\n5\\n3\\n6\\n1\\n2\\n3') == '3 2'\n\"\"\""
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n\") == \"5 1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n3\n3\n3\n3\n3\n1\n2\n3\n4''') == '5 1'\nassert solution('''5\n4\n3\n2\n1\n0\n1\n2\n3\n4''') == '1 5'\nassert solution('''4\n1\n5\n3\n6\n1\n2\n3''') == '3 2'\n\n-----Problem-----\nhttps://www.hackerrank.com/challenges/treemakers-bonus/problem\n\"\"\""
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\\n') == '3 2'\nassert solution('5\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\\n') == '5 1'\nassert solution('5\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\\n') == '5 1'\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\") == \"5 1\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\") == \"1 5\"\nassert solution(\"4\\n1\\n5\\n3\\n6\\n1\\n2\\n3\\n4\") == \"3 2\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n\") == \"5 1\", \"The number of jumps is wrong!\"\nassert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n\") == \"5 1\", \"The number of jumps is wrong!\"\nassert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n\") == \"5 1\", \"The number of jumps is wrong!\"\nassert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n\") == \"5 1\", \"The number of jumps is wrong!\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\\n\") == \"3 2\", \"The number of jumps is wrong!\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == '1'\n\nprint(solution(\"5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4\"))\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4') == '1'\nassert solution('5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4') == '5'\nassert solution('6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1') == '5'"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4') == '1'\n\"\"\""
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4') == 1\nassert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\\n3 5\\n3 6\\n3 7\\n3 8\\n3 9\\n3 10') == 3\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 0\\n3 1\\n3 2\\n3 3\\n3 4') == '1'\n\"\"\""
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\n\nassert solution(\"\") == \"\"\n\nassert solution(\"\") == \"\"\n\nassert solution(\"\") == \"\"\n\nassert solution(\"\") == \"\""
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4') == '1'\nassert solution('6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1') == '5'\n\"\"\"\nfrom sys import stdin\n\nn = int(stdin.readline())\n\nparent = [0 for _ in range(n + 1)]\n\nfor _ in range(n - 1):\n    line = stdin.readline().split()\n    parent[int(line[2])] = int(line[1])"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == \"1\"\nassert solution(\"6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == \"5\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"4\\n3\\n4\\n5\\n6\\n7\\n\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == \"5\\n1\\n2\\n3\\n6\\n7\\n\"\nassert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"0\\n\"\nassert solution(\"8\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n3 6 2\\n4 7 1\\n4 8 1\") == \"5\\n1\\n2\\n3\\n6\\n7\\n\""
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2') == '4\\n3\\n4\\n5\\n6\\n7'\nassert solution('9\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1\\n') == '0\\n1\\n2\\n3\\n6\\n7'"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1\") == \"0\\n1\\n2\\n3\\n6\\n7\"\n\n\"\"\""
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"4\\n3\\n4\\n5\\n6\\n7\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == \"5\\n1\\n2\\n3\\n6\\n7\"\nassert solution(\"6\\n1 2 2\\n1 3 1\\n2 4 3\\n2 5 1\\n3 6 2\\n4 6 2\") == \"2\\n3\"\nassert solution(\"6\\n1 2 2\\n1 3 1\\n2 4 3\\n2 5 1\\n3 6 2\\n4 6 2\") == \"2\\n3\"\n\nprint(\"all tests passed.\")"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == '4\\n3\\n4\\n5\\n6\\n7'\n\n\"\"\"\nimport sys\nfrom itertools import combinations\nfrom collections import defaultdict, deque"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\\n7 8 1') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8'\nassert solution('7\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n3 6 2\\n4 6 1\\n4 7 2\\n5 7 1\\n5 8 2\\n6 8 1') == '5\\n1\\n2\\n3\\n4\\n6\\n7\\n8'\nassert solution('8\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 8 1') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8'\n\n--------------------------------------------------------------\n--- MY SOLUTION: "
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('6\\n1 2 1\\n2 3 1\\n3 4 5\\n4 5 5\\n5 6 3\\n6 7 2\\n7 8 1') == '5'\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 3\\n2 3 1\\n2 4 3') == '4\\n3\\n4\\n'\nassert solution('4\\n1 3 1\\n2 3 1\\n2 4 3') == '0\\n'\nassert solution('4\\n1 3 3\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2') == '5\\n1\\n2\\n3\\n6\\n7\\n'\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2') == '4\\n3\\n4\\n5\\n6\\n7\\n'\nassert solution('8\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1\\n') == '0\\n1\\n2\\n3\\n6\\n7\\n'\nassert solution('9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\\n') == '5\\n1\\n2\\n3\\n6\\n7\\n'\n\nprint(solution('8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2'))\nprint(solution('8\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1\\n'))\nprint(solution('9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\\n'))\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1\\n') == '5\\n1\\n2\\n3\\n6\\n7'\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\nV1 V2 V1 V1 V2') == '5'\nassert solution('1 2\\nR10 V1 V2 V1 E') == '30'\n\"\"\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"2 1\\nV1 V2 V1 V1 V2\") == \"6\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"1 2\\nR10 V1 V2 V1 E\") == \"30\"\n\"\"\"\n\nimport math\n\nINPUT_1 = \"\"\"1 2\nV1 V2 V1 V1 V2\n\"\"\"\n\nINPUT_2 = \"\"\"1 2\nR10 V1 V2 V1 E\n\"\"\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"6\"\nassert solution(\"1 2\\nR10 V1 V2 V1 E\") == \"30\"\nassert solution(\"1 2\\nR10 V1 V2 V1 E R10 V2 V1 E R10 V1 V2 E\") == \"40\"\n\nprint(\"Success\")\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"1 2\nV1 V2 V1 V1 V2\"\"\") == \"5\"\nassert solution(\"\"\"1 2\nR10 V1 V2 V1 E\"\"\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"1 2\nV1 V2 V1 V1 V2\"\"\") == \"5\"\nassert solution(\"\"\"1 2\nR10 V1 V2 V1 E\"\"\") == \"30\"\nassert solution(\"\"\"1 2\nR10 V1 V1 E\"\"\") == \"4\"\nassert solution(\"\"\"1 2\nR10 V1 V1 V2 E\"\"\") == \"9\"\nassert solution(\"\"\"1 2\nV1 V1 E\"\"\") == \"2\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\nV1 V2 V1 V1 V2') == '5'\nassert solution('1 2\\nR10 V1 V2 V1 E') == '30'\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"2 1\\nV1 V2 V1 V1 V2\") == \"6\"\n\"\"\""
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"6\"\nassert solution(\"1 2\\nR10 V1 V2 V1 E\") == \"30\"\n\"\"\""
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"1 2\\nR10 V1 V2 V1 E\") == \"30\"\n\"\"\"\n\nclass Vars:\n    def __init__(self, banks: int, size: int):\n        self.banks = banks\n        self.size = size\n        self.var_map = [set() for _ in range(self.banks)]\n\n    def get_var_banks(self, var: str):\n        return [bank for bank, bank_set in enumerate(self.var_map) if var in bank_set]\n\n    def add_var(self, var: str, bank: int):\n        self.var_map[bank].add(var)\n\n    def add_vars(self, vars: str, bank: int):\n        self.var_map[bank].update(vars.split())\n\n    def add_var_set(self, var_set: str, bank: int):\n        self.var_map[bank].update(var_set.split())\n\n    def add_vars_set(self, var_sets: list, bank: int):\n        for var_set in var_sets:\n            self.var_map[bank].update(var_set.split())\n\nclass Solution:\n    def __init__(self, banks: int, size: int):\n        self.banks = banks\n        self.size = size\n        self.var_map = Vars(self.banks, self.size)\n\n    def solution(self, program: str):\n        program = program.split('\\n')\n        self.program = program\n        self.run_program(program)\n\n    def run_program(self, program: list):\n        for instruction in program:\n            self.handle_instruction(instruction)\n\n    def handle_instruction(self, instruction: str):\n        if instruction.startswith('R'):\n            self.handle_repetition(instruction)\n        elif instruction.startswith('V'):\n            self.handle_var(instruction)\n        elif instruction.startswith('E'):\n            self.handle_loop(instruction)\n        else:\n            raise Exception('Unknown instruction')\n\n    def handle_repetition(self, instruction: str):\n        n = int(instruction[1:])\n        self.run_program(self.program * n)\n\n    def handle_var(self, instruction: str):\n        banks = self.var_map.get_var_banks(instruction)\n        if banks:\n            self.var_map.add_vars(instruction, banks[0])\n        else:\n            self.var_map.add_var(instruction, self.banks)\n\n    def handle_loop(self, instruction: str):\n        bank = self.var_map.get_var_banks(instruction[1:])\n        if bank:\n            self.var_map.add_vars_set(instruction[1:], bank[0])\n        else:\n            self.var_map.add_var_set(instruction[1:], self.banks)"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\""
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"9 216\") == \"546\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 24\\n') == '38'\nassert solution('9 216\\n') == 'impossible'\nassert solution('10 11\\n') == 'impossible'\n\"\"\"\n\nB, N = [int(x) for x in stdin.split()]\n\nm = 1\nwhile True:\n    m = m * B\n    if m >= N:\n        break\n\nprint(m) if m < 2 ** 63 else print('impossible')\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n\n\"\"\""
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 11\") == \"impossible\"\nassert solution(\"10 24\") == \"38\"\n\"\"\""
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"9 216\") == \"546\"\nassert solution(\"10 11\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 22\") == \"22\"\nassert solution(\"10 23\") == \"impossible\"\nassert solution(\"10 24\") == \"24\"\nassert solution(\"9 216\") == \"546\"\n\n\"\"\"\n\nimport re\nimport math\n\nregex = r'([0-9]+)'"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 1 0\\n0 2 0.25 8\\n\") == \"2.0\"\n\"\"\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 1 0\\n0 2 0.25 8\\n\") == \"2.0\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\\n\") == \"466.662\"\n\"\"\"\nimport math"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\") == \"466.662\"\nassert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\") == \"10.00005\"\n\"\"\"\n\nimport math\n\nimport sys"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\") == '466.662'\n\n\"\"\"\n\nfrom sys import stdin\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f'{self.x, self.y}'\n\n\nclass RoofSegment:\n    def __init__(self, start: Point, end: Point, rain: float):\n        self.start = start\n        self.end = end\n        self.rain = rain\n\n\nclass Cloud:\n    def __init__(self, start, end, prob, rain):\n        self.start = start\n        self.end = end\n        self.prob = prob\n        self.rain = rain\n"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\") == \"466.662\"\nassert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\") == \"10.00005\"\n\"\"\""
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\") == \"466.662\"\nprint(solution(input()))\n"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10''') == '466.662'\nassert solution('''3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2''') == '10.00005'\n\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\") == \"466.662\"\nassert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\") == \"10.00005\"\n\"\"\""
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\") == \"466.662\"\nassert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\") == \"10.00005\"\n\n\"\"\"\n\nd, t, c, r = map(int, input().split())\nclouds = [list(map(int, input().split())) for i in range(c)]\nroofs = [list(map(int, input().split())) for i in range(r)]\n\nclouds = sorted(clouds, key=lambda x: x[0])\nroofs = sorted(roofs, key=lambda x: x[0])"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nblue red 1.0\\nred pink 1.5') == '0.000000000000000'\nassert solution('2\\nblue red 1.0\\nred pink 1.5') == '0.000000000000000'\nassert solution('3\\nblue red 1.0\\nred pink 1.5') == '1.500000000000000'\n\"\"\"\nimport sys"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0\\n\") == \"1.500000000000000\"\nassert solution(\"2\\nblue red 1.0\\nred pink 1.5\\n\") == \"0.000000000000000\"\nassert solution(\"4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9\\n\") == \"10.000000000000000\"\n\"\"\""
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    3\n    blue pink 1.0\n    red pink 1.5\n    blue red 1.0\n    \"\"\"\n    ) == \"\"\"\n    1.500000000000000\n    \"\"\"\n\nassert solution(\n    \"\"\"\n    4\n    orange pink 1.9\n    yellow orange 1.9\n    green yellow 1.9\n    blue green 1.9\n    \"\"\"\n    ) == \"\"\"\n    10.000000000000000\n    \"\"\"\n\n\"\"\"\nThis question is easy, however it has a solution!\n\nWe can use a greedy approach and keep track of the exchange rate between the lemonades.\nWe can also use a heap of the exchange rate and trade the lemonades with the smallest ratio.\nThen the top of the heap is the smallest ratio and the worst ratio will be the biggest ratio.\n\nWe can use a heap because we will always trade with the smallest rate.\nWe can also use a heap because it is impossible that a rate is smaller than another rate,\nunless there is no lemonade left.\n\nUsing a heap is O(n) time and O(n) space, where n is the number of children.\nUsing a list is O(n * log(n)) time and O(n) space.\n\nUsing a heap will have smaller space than using a list, however it will be slightly slower.\n\"\"\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0\") == \"1.500000000000000\"\nassert solution(\"2\\nblue red 1.0\\nred pink 1.5\") == \"0.000000000000000\"\nassert solution(\"4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9\") == \"10.000000000000000\"\n\"\"\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0\\n') == '1.500000000000000'\nassert solution('2\\nblue red 1.0\\nred pink 1.5\\n') == '0.000000000000000'\nassert solution('4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9\\n') == '10.000000000000000'"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1.0\\n2 1.5\\n3 1.0') == '1.5'\nassert solution('1 1.0\\n2 1.5\\n3 1.0\\n2 2.0\\n3 2.5') == '2.5'\n\n-----Problem-----\nN: the number of children excluding yourself.\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1, w1, r1: the name of the lemonade that is offered, the name of the lemonade that is wanted, and the exchange rate.\n\no1"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0\") == \"1.500000000000000\"\nassert solution(\"2\\nblue red 1.0\\nred pink 1.5\") == \"0.000000000000000\"\nassert solution(\"4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9\") == \"10.000000000000000\"\n\"\"\""
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0\\n\") == \"1.500000000000000\"\nassert solution(\"2\\nblue red 1.0\\nred pink 1.5\\n\") == \"0.000000000000000\"\nassert solution(\"4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9\\n\") == \"10.000000000000000\"\n\"\"\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0\") == '1.500000000000000'\nassert solution(\"2\\nblue red 1.0\\nred pink 1.5\") == '0.000000000000000'\nassert solution(\"4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9\") == '10.000000000000000'\n\"\"\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3\nblue pink 1.0\nred pink 1.5\nblue red 1.0\n''') == '1.500000000000000'\nprint('The solution is correct!')"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\") == '180'\nassert solution(\"3 2 2 1 1\\n2 3 2\\n1 1\\n1 2\\n1 2\\n1 3\") == '22'\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\") == '0'\n\n\"\"\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n') == '180'\nassert solution('3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n') == '22'\nassert solution('3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n') == '0'\n\n\"\"\"\nimport re"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\") == '180'\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\") == '22'\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n') == '0'\nassert solution('6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n') == 'too many'\nassert solution('6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n') == '180'"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n') == '180'\nassert solution('3 2 2 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n') == '22'\n\"\"\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'too many'\n\nassert solution('2 2 1 1 1\\n') == '22'\n\nassert solution('3 2 2\\n1 1\\n1 2\\n1 2\\n1 3\\n') == '0'\n\nassert solution('''6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\n\nassert solution('''3 2 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n''') == '0'"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6') == '180'\nassert solution('3 2 2 1 1\\n2 3 2\\n1 1\\n1 2\\n1 2\\n1 3') == '22'\nassert solution('3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1') == '0'\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == ''\nassert solution('2 2\\n') == ''\nassert solution('3 2\\n') == '0'\nassert solution('6 2\\n') == '22'\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6') == '180'\nassert solution('3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1') == '0'\nassert solution('3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1') == '22'\nassert solution('3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1') == 'too many'\n\n\"\"\""
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\") == \"180\"\nassert solution(\"3 2 2 1 1\\n2 3 2\\n1 1\\n1 2\\n1 2\\n1 3\") == \"0\"\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\") == \"too many\"\n\"\"\"\n\nfrom itertools import chain, combinations"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 2\n...\n.#.\n...\nup 2\nright 2\n''') == '17 17'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".#..\") == \"0 1\"\nassert solution(\"###\") == \"1 1\"\n\"\"\"\n\nh, w, n = map(int, stdin.readline().split())\nx = [[0] * w for _ in range(h)]\nfor _ in range(n):\n    a, b = map(int, stdin.readline().split())\n    if a == 1:\n        for i in range(h):\n            x[i][b - 1] = 1\n    elif a == 2:\n        for i in range(h):\n            x[i][b - 1] = 0\n    elif a == 3:\n        for i in range(b - 1):\n            x[0][i] = 1\n    else:\n        for i in range(b - 1):\n            x[0][i] = 0\n\nans1 = 0\nans2 = 0\nfor i in range(h):\n    for j in range(w):\n        if x[i][j] == 1:\n            ans1 = max(ans1, j + 1)\n\nfor i in range(h):\n    for j in range(w):\n        if x[i][j] == 1:\n            x[i][j] = 0\n        else:\n            x[i][j] = 1\n\nfor i in range(h):\n    for j in range(w):\n        if x[i][j] == 1:\n            ans2 = max(ans2, j + 1)\n\nprint(ans1, ans2)\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 2\\n...\\n.#.\\n...\\nup 2\\nr 2') == '17 17'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\\n\") == \"20 20\"\nassert solution(\"6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\\n\") == \"17 17\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\\n\") == \"-1 -1\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(sample_input_str_1) == '20 20'\nassert solution(sample_input_str_2) == '17 17'\nassert solution(sample_input_str_3) == '-1 -1'\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2\\n...\") == \"17 17\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"20 20\"\nassert solution(\"6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nup 2\\nright 2\") == \"17 17\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\") == \"-1 -1\""
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nr 7\\nd 2\\nl 4\\nu 3\") == \"20 20\"\nassert solution(\"6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nu 3\\nr 7\\nd 2\\nl 4\\nu 3\") == \"17 17\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nr 2\") == \"-1 -1\"\nassert solution(\"1 1 1\\n#\") == \"0 0\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 8 5\\n........\\n........\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"20 20\"\nassert solution(\"6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"17 17\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\") == \"-1 -1\"\n\nprint(solution(stdin.read()))\n\n\"\"\"\n\nimport os\nimport sys\nimport math\nimport collections\nfrom enum import Enum"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('371\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == 'impossible'\nassert solution('310\\n2\\n2 40 65\\n2 100 150\\n2 300 320') == '300'\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\nassert solution(\"90\\n2\\n2 20 35\\n2 88 200\") == \"88\"\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\\n') == 'impossible'\nassert solution('310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\\n') == '300'\nassert solution('90\\n2\\n2 20 35\\n2 88 200\\n') == '88'\n\"\"\"\n\nn = int(input())\n\nk = int(input())\n\nd = dict()\n\nfor _ in range(k):\n    l, *n = list(map(int, input().split()))\n\n    for i in n:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n\nd_values = d.values()\n\nm = min(d_values)\n\nimpossible = False"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'impossible'\nassert solution('5\\n3\\n20 50 100') == '20'\nassert solution('5\\n3\\n20 200 300') == '20'\nassert solution('5\\n2\\n20 100\\n5 200') == 'impossible'\nassert solution('5\\n3\\n20 50 100\\n2 200 300') == '100'\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\n\n-----Problem-----\nGiven the sizes of different packages of a single producer, what is the smallest size of a package that the producer can create that contains at least the required amount of bolts?\n\n-----Solution-----\n\n\"\"\"\n\n\nfrom itertools import product, accumulate\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"391\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('371\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == 'impossible'\n\nassert solution('310\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == '300'\n\"\"\""
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\n\"\"\""
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"271\\n2\\n2 20 35\\n2 88 200\") == \"88\"\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('......') == 'cannot fold'\nassert solution('#.....') == 'can fold'\nassert solution('..##..') == 'cannot fold'\nassert solution('...#..') == 'can fold'\nassert solution('......') == 'cannot fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"......\\n\" +\n                \"..#..\\n\" +\n                \"..#..\\n\" +\n                \"#...\\n\" +\n                \"......\") == \"cannot fold\"\n\nassert solution(\"....#\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"....#\\n\" +\n                \"....#\") == \"can fold\"\n\nassert solution(\"..##.\\n\" +\n                \"##..#\\n\" +\n                \"##..#\\n\" +\n                \"##..#\\n\" +\n                \"..##.\") == \"can fold\"\n\nassert solution(\"......\\n\" +\n                \"......\\n\" +\n                \"......\\n\" +\n                \"......\\n\" +\n                \"......\") == \"cannot fold\"\n\nassert solution(\"##...\\n\" +\n                \"#...#\\n\" +\n                \"###..\\n\" +\n                \"#...#\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \"##...\\n\" +\n                \""
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"......\") == \"cannot fold\"\nassert solution(\"#.....\") == \"can fold\"\nassert solution(\"..##..\") == \"cannot fold\"\nassert solution(\"...#..\") == \"can fold\"\nassert solution(\"......\") == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"......\") == \"cannot fold\"\nassert solution(\"......\") == \"cannot fold\"\nassert solution(\"#.....\") == \"can fold\"\nassert solution(\"##..#\") == \"cannot fold\"\nassert solution(\"#..#.\") == \"can fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\"\"\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('......\\n..##..\\n...#..\\n......\\n......') == 'can fold'\nassert solution('......\\n..##..\\n...#..\\n......\\n#....#\\n......\\n#....#') == 'cannot fold'\nassert solution('#...#\\n#....\\n#.#..\\n#...#\\n#....\\n#...#\\n#....') == 'cannot fold'\nassert solution('...#.\\n#..#.\\n#.##\\n#...#\\n#...#\\n#...#') == 'cannot fold'\nassert solution('#..#.\\n#...#\\n#..##\\n#...#\\n#...#\\n#...#') == 'cannot fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(sample_input_1) == \"cannot fold\"\nassert solution(sample_input_2) == \"can fold\"\nassert solution(sample_input_3) == \"cannot fold\"\n\nprint(\"All test cases passed.\")\n\n-----Notes-----\nSince the input consists of $6$ lines of $6$ characters each, you may want to convert each line to a list of $6$ characters first.\n\n-----Hints-----\nYou may find it helpful to solve this problem using Python\u2019s built-in library.\n\n\"\"\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'cannot fold'\nassert solution('..#..') == 'cannot fold'\nassert solution('......') == 'can fold'\nassert solution('......\\n#..##\\n..#..\\n...#.') == 'cannot fold'\nassert solution('......\\n#..##\\n#..#.') == 'can fold'\n'''\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"......\") == \"cannot fold\"\nassert solution(\"#.....\") == \"can fold\"\nassert solution(\"..##..\") == \"cannot fold\"\nassert solution(\"...#..\") == \"can fold\"\n\n\"\"\""
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"....#..#..#..##......#..#..#.\\n\"\n                 \"..##.#....#....#.#......#....\\n\"\n                 \"......#.#....#..#.#......#..#\\n\"\n                 \".##.....###...#.##.#....###.\\n\"\n                 \"##...#....#....#....#......#\\n\"\n                 \"...#......#.#..#.#..#.##.#..\\n\"\n                 \"..#...#....#......#....#....\\n\"\n                 \".....###...#..#...#.#.#....#\\n\"\n                 \"......#.#..#...##..#.#....#..\\n\"\n                 \".#......#..#....#...#......#.\\n\"\n                 \"#..#....#..#.#....#..#..#....\\n\"\n                 \"#.##.###..#.#.###...#..#.#.##\\n\"\n                 \"#..##.#....#...#.....##.#..#.\\n\"\n                 \"..#.#.##...#....#...#.##....#\\n\"\n                 \".#..#.#.#.#......#...#.....#.\\n\"\n                 \"###.#...###...#.#......#....#\\n\"\n                 \".##.#...#......#..#.#.#..##..\\n\"\n                 \"#..#.#......#.#......##.#...#\\n\"\n                 \"#.#...#.#####..#...#..#.#...#\\n\"\n                 \".#.#..#.##.#......#.#..#.#.#.#\\n\"\n                 \"..#...###.#......#.#..#...#.#\\n\"\n                 \"##.#.#.#.#...###..#.#......#.#\\n\"\n                 \"..#.#...#.#..###...##.#.#.#.#.\\n\"\n                 \".##..#..##.#.#..#.###...#...#\\n\"\n                 \"#...#.##...##...#...#.#...#.#\\n\"\n                 \".###..#.##....#..#......#.#.#\\n\"\n                 \"#.#...#..#..#.#.#.#.....#.#..#\\n\"\n                 \".####..#.#.#.##.#..##.#.#.###\\n\"\n                 \"###...#....##....###.#....##.\\n\"\n                 \"..#.#.#.#..#....#...##...#.#.#\\n\"\n                 \".#.##.....#.##.....##..##....\\n\"\n                 \"##..##.##.#...#.#...#..##....#\\n\"\n                 \"...#..#.##...##.....##.##....\\n\"\n                 \"###....##...##.#...#...#....##\\n\"\n                 \".###.#..#...#.##..##..#.#...#\\n\"\n                 \"##.#...#....##...##...#..#..#.\\n\"\n                 \"##....#.#...#..#......#.##...#\\n\"\n                 \".#.#..#.#...#.##.#.#.##..##.#\\n\"\n                 \".####..#.###.#..##.#.#.##.#..#\\n\"\n                 \".##..#...#...#.##.#.##..#..##\\n\"\n                 \"...#.##.#####.##....##...#.##\\n\"\n                 \"#...##.#.##...#...#....#...#.#\\n\"\n                 \"###.#..#..#...##...##.#.#..###\\n\"\n                 \".#...#.##....##.#.##.....#...#\\n\"\n                 \"...#..##.##...#.##.#..#...#.#\\n\"\n                 \"#.#...#....#.##..##...##...#.\\n\"\n                 \".##...#...##.##....#...#.#..#\\n\"\n                 \".#..#....#..##.#...#.#...#...#\\n\"\n                 \"#.#.#....#...#.##.##...#.#...#\\n\"\n                 \"..#..#.#.#.#.#..#.##..#....##.\\n\"\n                 \"..#.##.#..#..#.#....##..#....#\\n\"\n                 \".#..##.##.##.##.##...#....##.#\\n\"\n                 \"#...##.#.#.######.#....#..##.#\\n\"\n                 \".#.....#.##..#.######...#....#\\n\"\n                 \"#.#....#.#..#.##.#.##..#.#..#.\\n\"\n                 \".####.#.#.#.#.#..#.#.#..#.###.\\n\"\n                 \".#....##.#.#...##..#.#...#....\\n\"\n                 \".#.....#.#.#......##...#..###.\\n\"\n                 \".##.....###..#.#......#..#....\\n\"\n                 \"...##.####.##.##..###..#.#...#\\n\"\n                 \"......#.##.#...#.#.#.##..#.#.#\\n\"\n                 \"##...#...#...#...#.##.#.#...#.\\n\"\n                 \"..###.#####.#.####.###.#.#...#\\n\"\n                 \"#...#...#...#...##.#...#..#.##\\n\"\n                 \"#.#.#.##.#####.#....#.#.#.#.##\\n\"\n                 \"#..#..#.#.#..##.###...#...#.#.\\n\"\n                 \"....#.....#..#.####.#####....#\\n\"\n                 \".###.#....#.#.##.....###....##\\n\"\n                 \"##...#..##.#.#.###..##..#.#.#.\\n\"\n                 \"##...#....#...#.##....#....##.\\n\"\n                 \"####.##.#.##.#.##.##..#.##....\\n\"\n                 \"##.##.#.##.#..#.#..#...#.#...#\\n\"\n                 \"##.#..##.#.#.#.###.#..#.##....\\n\"\n                 \"..#..#.##..#..#.######.#....#.\\n\"\n                 \"##...#.#.#.##.....#...##..#...#\\n\"\n                 \"#....#.#.#...#.##.#.##..#.#...#\\n\"\n                 \"..#.#.#.##.#.#.#...#..#..#....#\\n\"\n                 \"....##...##.#..#...##..###..#.#\\n\"\n                 \"##.#..##..#.#.##.####...#.##.#.\\n\"\n                 \"##...#.####.#####.##...#....#..\\n\"\n                 \".##..#...#...#.####...#...#..#\\n\"\n                 \".##..#####.#.##.####.####...#.\\n\"\n                 \".#..#..#..#.#...#.#...##.#...#\\n\"\n                 \"##.#...###.#..#.#.#...#..#....#\\n\"\n                 \"."
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\""
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcd') == 'abcd'\nassert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\nassert solution('abc') == 'abc'\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n\n\"\"\"\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n\n    def test_1(self):\n        self.assertEqual(solution('abcefgabc'), 'abc')\n\n    def test_2(self):\n        self.assertEqual(solution('abcbabcba'), 'abcba')\n\n    def test_3(self):\n        self."
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\nassert solution('aaaab') == 'a'\n\"\"\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('aaa') == 'aaa'\nassert solution('abc') == 'a'\nassert solution('abcdabcefgh') == 'abcef'\nassert solution('abcabcabc') == 'abc'\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcabcb\") == \"cb\"\nprint(\"OK\")\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcefgabc') == 'abc'\n\nassert solution('abcbabcba') == 'abcba'\n\nassert solution('aaaa') == 'aaa'\n\nprint(solution(input()))\n\n\"\"\"\n\n\n\"\"\"\nDynamic Programming\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 4\\n2 5\\n') == '4'\nassert solution('2\\n1 4\\n2 10005\\n') == '6'"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0\\n2 10\\n0 15\") == \"4\"\nassert solution(\"2\\n1 4\\n2 5\") == \"4\"\nassert solution(\"2\\n1 4\\n2 10005\") == \"6\"\n\n\"\"\"\n\nfrom operator import itemgetter"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2\n1 4\n2 5\n''') == '4'\nassert solution('''\n3\n1 4\n2 10\n0 15\n''') == '6'\nassert solution('''\n4\n1 4\n2 10005\n0 15\n''') == '5'\nassert solution('''\n2\n1 4\n2 5\n''') == '4'\nassert solution('''\n1\n1 4\n''') == '2'"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"2\n1 4\n2 5\"\"\") == \"4\"\nassert solution(\"\"\"3\n1 4\n2 10\n0 15\"\"\") == \"6\"\n\nprint('Success')"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 4\\n2 5\\n0 15\\n') == '4'\nassert solution('1 4\\n2 10\\n0 15\\n') == '6'\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 4\\n2 5\\n0 15') == 4\n\"\"\"\n\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2\n1 4\n2 5''') == '4'\nassert solution('''3\n1 4\n2 10\n0 15''') == '6'\nassert solution('''2\n2 2\n1 3''') == '0'\nassert solution('''2\n1 10\n0 20''') == '1'\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 4\n2 5\n''') == '4'\nassert solution('''\n3\n1 4\n2 10\n0 15\n''') == '6'\n\nassert solution('''\n1\n1 10005\n''') == '6'\nassert solution('''\n1\n2 10\n''') == '2'\nassert solution('''\n2\n1 4\n2 10005\n''') == '4'\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n1 4\n2 5\n\"\"\") == \"4\"\n\n\"\"\"\n\nSample Input 1:\n2\n1 4\n2 5\nSample Output 1:\n4\n\nSample Input 2:\n3\n1 4\n2 10\n0 15\nSample Output 2:\n6\n\nSample Input 3:\n3\n1 4\n2 10\n0 15\nSample Output 3:\n4\n\n\"\"\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 4\\n2 10005\") == 4\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 4 4 8 12 24') == '2'\nassert solution('7 7 7') == '3'\nassert solution('1 2 3 2 1') == '0'\n\n\"\"\""
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"3\\n7 7 7\") == \"3\"\nassert solution(\"5\\n1 2 3 2 1\") == \"0\"\n\"\"\"\nfrom collections import deque, defaultdict\n\nclass Solution:\n    def count_paths(self, n, cur_node, cur_sum, cur_path, visited):\n        if cur_node == n:\n            return 1\n        if cur_sum + 1 <= self.ans_sum:\n            if cur_sum + 1 in self.sum_to_nodes:\n                self.sum_to_nodes[cur_sum + 1].append(cur_path)\n            else:\n                self.sum_to_nodes[cur_sum + 1] = [cur_path]\n        if cur_node + 1 in self.sum_to_nodes:\n            for path in self.sum_to_nodes[cur_node + 1]:\n                if (cur_sum + path[-1], path) not in visited:\n                    visited.add((cur_sum + path[-1], path))\n                    self.count_paths(n, cur_node + 1, cur_sum + path[-1], path + [cur_node], visited)\n        if (cur_sum, [cur_node]) not in visited:\n            visited.add((cur_sum, [cur_node]))\n            self.count_paths(n, cur_node + 1, cur_sum, [cur_node], visited)\n\n    def solve(self, n, arr):\n        self.ans_sum = 0\n        self.sum_to_nodes = defaultdict(list)\n        self.sum_to_nodes[0] = [[]]\n        for cur_sum in arr:\n            self.ans_sum += cur_sum\n        self.count_paths(n, 0, 0, [], set())\n        return len(self.sum_to_nodes[self.ans_sum])"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"3\\n7 7 7\") == \"3\"\nassert solution(\"5\\n1 2 3 2 1\") == \"0\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n7\n2 3 4 4 8 12 24\n''') == '2'\nassert solution('''\n5\n1 2 3 2 1\n''') == '0'\nassert solution('''\n3\n7 7 7\n''') == '3'\nassert solution('''\n7\n1 7 2 2 1 7 7\n''') == '1'\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7\n2 3 4 4 8 12 24''') == '2'\nassert solution('''3\n7 7 7''') == '3'\nassert solution('''5\n1 2 3 2 1''') == '0''')\nprint('Success')"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 4 4 8 12 24\\n7 7 7\") == \"2\"\nassert solution(\"1 2 3 2 1\\n7 7 7\") == \"3\"\nassert solution(\"5 1 2 3 2 1\\n7 7 7\") == \"0\""
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n2 3 4 4 8 12 24') == '2'\nassert solution('3\\n7 7 7') == '3'\nassert solution('5\\n1 2 3 2 1') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 4 4 8 12 24\") == 2\nassert solution(\"7 7 7\") == 3\nassert solution(\"1 2 3 2 1\") == 0\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''7\n2 3 4 4 8 12 24\n''') == '2'\nassert solution('''5\n1 2 3 2 1\n''') == '3'\n\nprint('Success')"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\".M.G\") == 3\nassert solution(\"S.#F\") == -1\nassert solution(\"M.F.F\") == 3\nassert solution(\"#.#G\") == -1\nassert solution(\"M...G\") == 3\n\nprint(\"Successfully passed all sample test cases!\")\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == \"-1\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5 4\\nS#.F.\\n.MFMG\\n') == '3'\n\nassert solution('1 2 1\\nGS\\n') == '1'\n\nassert solution('2 2 10\\nS#\\n#G\\n') == '-1'\n\nprint(solution('2 2 10\\nS#\\n#G\\n'))"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"1 2 1\\nGS\\n\") == \"1\"\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == \"-1\"\n\"\"\""
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == '3'\nassert solution(\"1 2 1\\nGS\\n\") == '1'\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == '-1'\nprint(\"All tests passed.\")\n\n\"\"\""
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5 4\", \"S#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"1 2 1\", \"GS\\n\") == \"1\"\nassert solution(\"2 2 10\", \"S#\\n#G\\n\") == \"-1\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == \"1\"\nassert solution(\"1 2 1\\nGS\\n\") == \"1\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"1 2 1\\nGS\\n\") == \"1\"\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5 4\\nS#.F.\\n.MFMG\\n') == '3'\nassert solution('1 2 1\\nGS\\n') == '1'\nassert solution('2 2 10\\nS#\\n#G\\n') == '-1'\n\"\"\"\n\nn, m, k = [int(el) for el in input().split(' ')]\nmapp = []\nfor _ in range(n):\n    mapp.append([el for el in input().split(' ')])\n\nq = []\nfor i in range(n):\n    for j in range(m):\n        if mapp[i][j] == 'S':\n            q.append([i, j])\n\nfound = False\nstep = 0\nwhile k and q and not found:\n    new_q = []\n    for q_i in q:\n        if q_i[0] == 0:\n            found = True\n            break\n        for direction in [[-1, 0], [1, 0], [0, -1], [0, 1]]:\n            n_q_i = q_i[0] + direction[0], q_i[1] + direction[1]\n            if 0 <= n_q_i[0] < n and 0 <= n_q_i[1] < m:\n                if mapp[n_q_i[0]][n_q_i[1]] == 'G':\n                    found = True\n                    break\n                if mapp[n_q_i[0]][n_q_i[1]] == '.':\n                    new_q.append(n_q_i)\n                    mapp[n_q_i[0]][n_q_i[1]] = 'S'\n                elif mapp[n_q_i[0]][n_q_i[1]] == 'M':\n                    k -= 1\n                    mapp[n_q_i[0]][n_q_i[1]] = 'S'\n                elif mapp[n_q_i[0]][n_q_i[1]] == 'F':\n                    k -= 1\n                    mapp[n_q_i[0]][n_q_i[1]] = 'S'\n    q = new_q\n    step += 1"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5 4\",\n                \"S#.F.\",\n                \".MFMG\",\n                \"\") == \"3\"\n\nassert solution(\"1 2 1\",\n                \"GS\",\n                \"\",\n                \"\") == \"1\"\n\nassert solution(\"2 2 10\",\n                \"S#\",\n                \"#G\",\n                \"\") == \"1\"\n\nassert solution(\"3 3 3\",\n                \"....\",\n                \"....\",\n                \"....\") == \"2\"\n\nassert solution(\"1 1 100\",\n                \"S\",\n                \"\",\n                \"\") == \"100\""
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"DRRDD\") == 1\nassert solution(\"LDLDLLDR\") == 2\nassert solution(\"RRDDDDDRR\") == 0\nassert solution(\"DRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDR"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\nS..\\n.#.\\n..G\\nDRRDD') == '1'\nassert solution('3 7\\n...\\n.G.#S.\\n.......\\nLDLDLLDR') == '1'\nassert solution('3 7\\n.G.#S.\\n.......\\nLDLDLLDR') == '2'"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == 0\nassert solution(\"S.\") == 0\nassert solution(\".S.\") == 1\nassert solution(\"S..\") == 1\nassert solution(\"G..\") == 0\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\nS..\\n.#.\\n..G\\nDRRDD\") == 1\nassert solution(\"3 7\\n.......\\n.G.#.S.\\n.......\\nLDLDLLDR\") == 1\nassert solution(\"3 7\\n.#.....\\n.G.##S.\\n.......\\nLDLDLLDR\") == 2\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"S.##.G.\") == \"0\"\nassert solution(\"S..#G.\") == \"1\"\nassert solution(\"S...G.\") == \"2\"\nassert solution(\"G..#S.\") == \"2\"\nassert solution(\"G.#S.\") == \"2\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\nS.\\n#.\\n.G\\nDRRDD') == '1'\nassert solution('3 7\\n.G\\n.S.\\n.......\\nLDLDLDR') == '1'\n\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\nS..\\n.#.\\n..G\\nDRRDD\") == \"1\"\nassert solution(\"3 7\\n.......\\n.G.#.S.\\n.......\\nLDLDLLDR\") == \"1\"\nassert solution(\"3 7\\n.#.....\\n.G.##S.\\n.......\\nLDLDLLDR\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"SRR..RRDDR.\") == \"DR\"\nassert solution(\"SR.DRRRDD.\") == \"DD\"\nassert solution(\"DR.DR.RR.DR.DR.DR.DR\") == \"DRRRRR\"\n\"\"\""
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('.#..G.G') == 'DDDD'\nassert solution('.#...S') == 'DDDD'\n\"\"\"\n\n\"\"\"\nIntuition\n\nThe character 'L' moves the robot to the position of the robot's left.\nThe character 'R' moves the robot to the position of the robot's right.\nThe character 'U' moves the robot up.\nThe character 'D' moves the robot down.\n\nAlgorithm\n\nFor each character in the string, if it's a 'L' or 'R', the robot will move left or right respectively, and if it's a 'U' or 'D', the robot will move up or down respectively.\n\nTo check if the robot can move to the next position, we'll need to check whether all of the obstacles are to the left, to the right, above, or below.\n\nSo, for each character in the string, we'll compute its left, right, up, and down neighbors. Then we'll check if the next character is an obstacle to the robot's right, or to the left, or above, or below. If the next character isn't an obstacle, we'll just go to the next character.\n\nclass Solution:\n    def is_valid_location(self, grid, r, c):\n        return 0 <= r < len(grid) and 0 <= c < len(grid[0])\n    \n    def is_valid_location(self, grid, r, c):\n        return 0 <= r < len(grid) and 0 <= c < len(grid[0])\n\n    def shortest_path(self, grid, r, c):\n        if grid[r][c] == 'G':\n            return 0\n        elif grid[r][c] == '#':\n            return None\n        \n        left = right = up = down = None\n        if self.is_valid_location(grid, r, c - 1):\n            left = self.shortest_path(grid, r, c - 1)\n        if self.is_valid_location(grid, r, c + 1):\n            right = self.shortest_path(grid, r, c + 1)\n        if self.is_valid_location(grid, r - 1, c):\n            up = self.shortest_path(grid, r - 1, c)\n        if self.is_valid_location(grid, r + 1, c):\n            down = self.shortest_path(grid, r + 1, c)\n        \n        if left == None:\n            left = self.INF\n        if right == None:\n            right = self.INF\n        if up == None:\n            up = self.INF\n        if down == None:\n            down = self.INF\n        \n        return 1 + min(left, right, up, down)\n        \n    def update_location(self, grid, r, c, new_r, new_c):\n        if not self.is_valid_location(grid, new_r, new_c):\n            return\n        grid[r][c] = '.'\n        grid[new_r][new_c] = 'S'\n        \n    def robot_move(self, grid, r, c, command):\n        if command == 'L':\n            self.update_location(grid, r, c, r, c - 1)\n            return (r, c - 1)\n        elif command == 'R':\n            self.update_location(grid, r, c, r, c + 1)\n            return (r, c + 1)\n        elif command == 'U':\n            self.update_location(grid, r, c, r - 1, c)\n            return (r - 1, c)\n        elif command == 'D':\n            self.update_location(grid, r, c, r + 1, c)\n            return (r + 1, c)\n            \n    def solution(self, stdin: str) -> str:\n        grid = list()\n        for i, line in enumerate(stdin.split('\\n')):\n            if i == 0:\n                height, width = [int(d) for d in line.split(' ')]\n            else:\n                grid.append(list(line))\n        \n        shortest_path = self.shortest_path(grid, 0, 0)\n        if shortest_path == None:\n            return '-1'\n        return shortest_path\n\"\"\"\n\nclass Solution:\n    def shortest_path(self, grid, r, c):\n        if grid[r][c] == 'G':\n            return 0\n        elif grid[r][c] == '#':\n            return None\n        \n        left = right = up = down = None\n        if self.is_valid_location(grid, r, c - 1):\n            left = self.shortest_path(grid, r, c - 1)\n        if self.is_valid_location(grid, r, c + 1):\n            right = self.shortest_path(grid, r, c + 1)\n        if self.is_valid_location(grid, r - 1, c):\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\nS..\\n.#.\\n..G\\nDRRDD\") == '1'\nassert solution(\"3 7\\n.......\\n.G.#.S.\\n.......\\nLDLDLLDR\") == '1'\nassert solution(\"3 7\\n.......\\n.G.##S.\\n.......\\nLDLDLLDR\") == '2'\n\"\"\""
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n100 0 100\\n0 200 199') == 'uncertain'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\") == \"1000200 799\"\nassert solution(\"2\\n100 0 101\\n0 200 199\") == \"uncertain\"\nassert solution(\"2\\n100 0 100\\n0 200 199\") == \"impossible\"\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nlst = []\nfor _ in range(N):\n    a, b, c = list(map(int, sys.stdin.readline().rstrip().split()))\n    lst.append([a, b, c])\n\nlst.sort(key=lambda x: x[0])"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n100 0 101\\n0 200 199') == 'uncertain'\nassert solution('3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222') == '1000200 799'\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2 1 1\\n3 4 5') == 'uncertain'\nassert solution('1\\n2 3 1\\n3 4 5') == 'impossible'\nassert solution('1\\n1 2 1\\n3 4 5') == '1000 200'\nassert solution('1\\n2 1 1\\n3 4 1') == '100 200'\nassert solution('1\\n2 3 1\\n3 4 1') == '100 200'\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\") == \"1000200 799\"\nassert solution(\"2\\n100 0 101\\n0 200 199\") == \"uncertain\"\nassert solution(\"2\\n100 0 100\\n0 200 199\") == \"impossible\"\n\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Tuple, Dict, Set\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'impossible'\nassert solution('1') == 'uncertain'\nassert solution('4\\n100 0 100\\n0 200 199') == '1000200 799'\nassert solution('4\\n100 0 100\\n0 200 101') == 'uncertain'\nassert solution('4\\n100 0 100\\n0 200 100') == 'impossible'\n\nprint('Success')\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\n-----Test Data-----"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222') == '1000200 799'\n\"\"\"\n\nimport re\nfrom typing import List\n\nimport sys\n\nINPUT_REGEX = re.compile(r'^(?P<X>\\d+) (?P<Y>\\d+) (?P<D>\\d+)$')\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\") == \"1000200 799\"\nassert solution(\"2\\n100 0 101\\n0 200 199\") == \"uncertain\"\nassert solution(\"2\\n100 0 100\\n0 200 199\") == \"impossible\"\n\nprint(solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\"))\nprint(solution(\"2\\n100 0 101\\n0 200 199\"))\nprint(solution(\"2\\n100 0 100\\n0 200 199\"))"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222') == '1000200 799'\nassert solution('2\\n100 0 101\\n0 200 199') == 'uncertain'\nassert solution('2\\n100 0 100\\n0 200 199') == 'impossible'\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\") == \"1000200 799\"\nassert solution(\"2\\n100 0 101\\n0 200 199\") == \"uncertain\"\nassert solution(\"2\\n100 0 100\\n0 200 199\") == \"impossible\""
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\\n\") == \"2\\n1\\n\"\nassert solution(\"2\\n4 7\\n14 17\\n9 8\\n19 18\\n\") == \"1\\n2\\n\"\n\"\"\"\n\nimport sys\nimport itertools\nfrom typing import Set\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\") == \"1\\n2\"\nassert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\") == \"1\\n2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1 1') == '1'\n\"\"\""
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n4 7\\n14 17\\n9 8\\n19 18') == '1\\n2'\n\nassert solution('2\\n4 8\\n9 7\\n14 18\\n19 17') =='syntax error'\n\nassert solution('2\\n4 8\\n9 7\\n14 18\\n19 17') =='syntax error'\n\nassert solution('2\\n4 8\\n9 7\\n14 18\\n19 17') =='syntax error'\n\nassert solution('2\\n4 8\\n9 7\\n14 18\\n19 17') =='syntax error'"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n4 7\n9 8\n14 17\n19 18''') == '2\\n1'\nassert solution('''2\n4 8\n9 7\n14 18\n19 17''') == '1\\n2'\nassert solution('''2\n4 7\n14 17\n9 8\n19 18''') =='syntax error'\nassert solution('''3\n4 7\n14 17\n9 8\n19 18''') =='syntax error'\nassert solution('''1\n4 7\n14 17\n9 8\n19 18''') =='syntax error'\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\") == \"1\\n2\"\nassert solution(\"2\\n4 7\\n14 17\\n9 8\\n19 18\") == \"syntax error\"\nassert solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\") == \"syntax error\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n4 7\\n9 8\\n14 17\\n19 18') == '2\\n1'\nassert solution('2\\n4 8\\n9 7\\n14 18\\n19 17') == '1\\n2'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\\n\") == \"1\\n2\"\nassert solution(\"2\\n4 7\\n14 17\\n9 8\\n19 18\\n\") == \"syntax error\"\nassert solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\\n\") == \"2\\n1\"\nassert solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\\n\") == \"2\\n1\"\nassert solution(\"2\\n4 8\\n14 18\\n9 7\\n19 17\\n\") == \"2\\n1\""
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7\\n9 8\\n14 17\\n19 18') == '2\\n1'\nassert solution('2 4\\n9 7\\n14 18\\n19 17') == '1\\n2'\nassert solution('2 4\\n9 7\\n14 18\\n19 17\\n4 8') =='syntax error'\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\"\n\"\"\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == '1'\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == '1'\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == '8640'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\nassert solution('85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n') == '1'\nassert solution('160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n') == '8640'\nassert solution('_ 1 _ _ _ _ _ 1\\n_ _ 1 _ _ _ 1 _\\n') =='many'\nassert solution('0 1 _ 1 1 1 _ 1\\n0 1 _ 0 0 1 _ 1\\n') =='many'\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\"\n\"\"\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\"\n\"\"\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 10\\n10 1\") == \"1\"\nassert solution(\"0 10\\n10 0\") == \"1\"\nassert solution(\"0 10\\n1 0\") == \"many\"\nassert solution(\"0 10\\n1 9\\n10 0\") == \"1\"\nassert solution(\"0 10\\n1 9\\n10 9\\n10 0\") == \"0\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"90 22 _ 6 _ _ _ 81\\n\" + \n                \"40 _ _ _ _ 12 60 _ 90 _\\n\") == '1'\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n\" + \n                \"_ _ _ _ _ _ _ 85 63 153\\n\") == '8640'\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n\" + \n                \"_ _ _ _ 120 _ _ 144 _ _\\n\") == '8640'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n_ 90 22 _ 6 _ _ _ _ 81\n_ 40 _ _ _ 12 60 _ 90 _\n''') == '1'\n\nassert solution('''\n85 55 _ 99 51 _ _ _ _ _\n_ _ _ _ _ _ _ 85 63 153\n''') == '8640'\n\nassert solution('''\n160 _ _ 136 _ _ _ _ _ 170\n_ _ _ _ 120 _ _ 144 _ _\n''') == '8640'\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n\" +\n    \"_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n\" +\n    \"_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n\" +\n    \"_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"160_ _ 136_ _ _ _ _ _ 170\\n_ _ _ _ 120_ _ 144_ _\") == \"8640\"\nassert solution(\"85 55_ 99 51_ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\") == \"1\"\nassert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\") == \"1\"\n\n\"\"\"\n\nimport functools\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == '2'\nassert solution(\"5\\n2 1\\n1 5\\n3 1\\n4 3\") == '8'\nassert solution(\"10\\n1 2\\n2 3\\n2 4\\n1 5\\n3 6\\n2 7\\n7 8\\n5 9\\n5 10\") == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2\\n1 3') == '2'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == 2\nassert solution(\"5\\n2 1\\n1 5\\n3 1\\n4 3\") == 8\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n\") == \"2\"\nassert solution(\"5\\n2 1\\n1 5\\n3 1\\n4 3\\n\") == \"8\"\nassert solution(\"10\\n1 2\\n2 3\\n2 4\\n1 5\\n3 6\\n2 7\\n7 8\\n5 9\\n5 10\\n\") == \"24\"\n\"\"\"\n\nfrom __future__ import print_function\nfrom collections import defaultdict\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2\n1 3''') == '2'\nassert solution('''5\n2 1\n1 5\n3 1\n4 3''') == '8'\nassert solution('''10\n1 2\n2 3\n2 4\n1 5\n3 6\n2 7\n7 8\n5 9\n5 10''') == '24'\nprint(solution(input()))\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == 2\nassert solution(\"5\\n2 1\\n1 5\\n3 1\\n4 3\") == 8\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\") == \"2\"\nassert solution(\"2\\n1\\n3\") == \"2\"\nassert solution(\"3\\n1\\n2\") == \"0\"\nassert solution(\"4\\n1\\n2\\n3\") == \"6\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n1 5\\n3 1\\n4 3\\n') == '8'\nassert solution('3 1\\n1 5\\n3 1\\n4 3\\n') == '8'\nassert solution('5 1\\n1 5\\n3 1\\n4 3\\n') == '24'\nassert solution('10 1\\n1 5\\n3 1\\n4 3\\n') == '24'\n\"\"\"\n\nfrom collections import defaultdict\n\nn = int(input())\ngraph = defaultdict(list)\nfor _ in range(n - 1):\n    u, v = map(int, input().split())\n    graph[u].append(v)\n    graph[v].append(u)\n\ncnt = 0\n\nfor i in range(1, n + 1):\n    for j in graph[i]:\n        if len(graph[j]) == 2:\n            cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n2\\n1\\n3\\n1\\n3\\n\") == 2\n\nassert solution(\"1\\n2\\n2\\n1\\n3\\n1\\n3\\n\") == 2\n\nassert solution(\"1\\n2\\n2\\n1\\n3\\n1\\n3\\n\") == 2\n\nassert solution(\"1\\n2\\n2\\n1\\n3\\n1\\n3\\n\") == 2\n\nassert solution(\"1\\n2\\n2\\n1\\n3\\n1\\n3\\n\") == 2"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2\\n1 3\\n') == 2\nassert solution('5\\n2 1\\n1 5\\n3 1\\n4 3\\n') == 8\nassert solution('5\\n2 1\\n1 5\\n3 1\\n4 3\\n') == 8\nassert solution('10\\n1 2\\n2 3\\n2 4\\n1 5\\n3 6\\n2 7\\n7 8\\n5 9\\n5 10\\n') == 24\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('treetreetreetree') == '3'\nassert solution('oranges') == '0'\nassert solution('boot') == 'boot'"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"treetreetreetree\") == \"3\"\n\"\"\"\n\n\"\"\"\nThe Swedish Military Intelligence and Security Service (Milit\u00e4ra underr\u00e4ttelse- och s\u00e4kerhetstj\u00e4nsten, MUST) has intercepted a message that appears to contain a fragment of the encrypted message. They suspect that the message is being decrypted with a simple substitution cipher. In other words, every letter is replaced with another letter from the alphabet (a letter could also remain unchanged). So for instance, it could be that every \u2018a\u2019 gets turned into a \u2018k\u2019, every \u2018b\u2019 remains a \u2018b\u2019, every \u2018c\u2019 becomes an \u2018a\u2019, and so on. Obviously, different letters in the original message become different letters in the encrypted one, otherwise decryption would not be unique.\n\nAlas it is not known which letters are substituted for which other letters. However, a suspicious person in scuba gear has been caught and was found carrying a note with what appears to be a fragment of a decrypted message. If this fragment could be matched to an encrypted message, the code can be broken!\n\nCan you help MUST find out if the message fragment could be part of a given encrypted message, and if so, in how many positions?\n\n-----Input-----\nThe input consists of:\n - one line with a string consisting of at least $1$ and at most $250000$ lowercase letters, the encrypted message;\n - one line with a string consisting of at least $1$ and at most $250000$ lowercase letters, the decrypted fragment.\n\n-----Output-----\nIf there is a unique position in the encrypted message where the message fragment could occur, output the substring of the encrypted message that could correspond to the fragment. Otherwise, output the number of positions in the encrypted message where the fragment could occur.\n\n-----Examples-----\nSample Input 1:\nsecretmessage\nboot\nSample Output 1:\nessa\n\nSample Input 2:\ntreetreetreetree\nwood\nSample Output 2:\n3\n\nSample Input 3:\noranges\napples\nSample Output 3:\n0\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"treetreetreetree\") == \"3\"\nassert solution(\"oranges\") == \"0\"\nassert solution(\"apples\") == \"0\"\nprint(\"Passed\")\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == 'otto'\nassert solution('treetreetreetree') == '3'\nassert solution('oranges') == '0'\nassert solution('apples') == '0'\n\"\"\""
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('secretmessage') == 'essa'\nassert solution('treetreetreetree') == '3'\nassert solution('oranges') == '0'\nassert solution('wood') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"boot\") == \"boot\"\nassert solution(\"treetreetreetree\") == \"3\"\nassert solution(\"oranges\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == 'o'\nassert solution('treetreetreetree') == '3'\nassert solution('oranges') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == 'boa'\nassert solution('treetreetreetree') == '3'\n\"\"\"\n\nfrom string import ascii_lowercase\nfrom collections import Counter"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"boot\") == \"boot\"\nassert solution(\"treetreetreetree\") == \"3\"\nassert solution(\"oranges\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"treetreetreetree\") == \"3\"\nassert solution(\"oranges\") == \"0\"\n\"\"\""
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\">^<^\") == 2\nassert solution(\"v<^>\") == 4\nassert solution(\"<<<\") == 1\nassert solution(\">^<^v<^v^v\") == 4\n\"\"\""
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n6\n>^<^\n######\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"^>v<\") == \"2\"\nassert solution(\"^v^v^v^v\") == \"1\"\nassert solution(\"^v^v^v^v^v\") == \"1\"\nassert solution(\"^v^v^v^v^v^v\") == \"2\"\nassert solution(\"^v^v^v^v^v^v^v\") == \"2\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n>>>v<<<\") == \"1\"\nassert solution(\"3\\n>>>v<<<\\n>v<<<\\n>v<<<\\n>v<<<\\n>v<<<\\n>>><<\\n>>><<\\n>>><<\\n>>><<\") == \"8\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"v\") == \"v\"\nassert solution(\">\") == \">\"\nassert solution(\"^>\") == \"^>v\"\nassert solution(\"^<\") == \"^<^v\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\">^<^\") == \"2\"\nassert solution(\"v<^>\") == \"4\"\nassert solution(\"<<<\") == \"1\"\nassert solution(\"><^<><^\") == \"3\"\nassert solution(\"><^<><^v^v^v\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n6\n>^<^\n######\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n6\n>^<^\n######\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('>^<^') == 2\nassert solution('v<^>') == 4\nassert solution('<<<') == 1\nassert solution('>^<^>v^v^v^v^v') == 5\nassert solution('>^<^>v^v^v^v^v^v^v^v') == 6\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n>^<^\\n######\\n#.#..#\\n#....#\\n#..R.#\\n#....#\\n######\") == \"2\"\nassert solution(\"4\\nv<^>\\n####\\n#.R#\\n#..#\\n####\") == \"4\"\nassert solution(\"4\\n<<<\\n####\\n#.R#\\n#..#\\n####\") == \"1\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2 3 0 2 9 2 3 0\") == \"3\"\n\"\"\"\nimport math"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1') == '11'\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2\\n2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2') == '3'\n\n'''\n\nimport numpy as np\n\nn = int(stdin.readline())\narray = np.array([list(map(int, stdin.readline().split())) for _ in range(n)], dtype=np.int)\n\nfog_array = np.array(array[:, 1:], dtype=np.int)"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"2\\n2 3 0 2 9 2 3 0\"\n) == 3\nassert solution(\n\"3\\n4 0 0 10 10 1 15 0\"\n) == 6\nassert solution(\n\"2\\n7 0 0 20 10 3 0 10\"\n) == 11"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == \"3\"\nassert solution(\"3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1\") == \"6\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2') == '3'"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3 0\\n2 9\\n2 3\\n0 2\\n1 6\\n1 4\\n6 3\\n-1 -2\") == 3\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == \"3\"\nassert solution(\"3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1\") == \"6\"\nassert solution(\"2\\n7 0 0 20 10 3 0 10\\n10 1 0 2 5 2 2 7\") == \"11\"\n\"\"\""
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2') == 3\nassert solution('3 10 7 10 4 1 8 -1\\n3 5 50 55 8 1 -16 2') == 6\nassert solution('2 10 0 0 20 10 3 0 10') == 11\n\n------Solution------\n\"\"\"\n\nn = int(stdin.readline())\nfog_array = [stdin.readline().split() for i in range(n)]\nfor i in range(len(fog_array)):\n    fog_array[i] = list(map(int, fog_array[i]))\n\nx = []\ny = []\nfor i in range(n):\n    x.append([])\n    y.append([])\n    for j in range(fog_array[i][0]):\n        x[i].append(fog_array[i][j + 1])\n        y[i].append(0)\n\nfor i in range(n):\n    for j in range(fog_array[i][0]):\n        y[i][j] = fog_array[i][j + 1]"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == \"3\"\n\"\"\""
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0''') == '168.7916512460'\n\nassert solution('''0.0 1.0 4.0 1.0\n1\n0.0 0.0 4.0 0.0''') == '3.7320508076'\n\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0''') == '163.5274740179'\n\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0''') == '163.5274740179'\n\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0''') == '163.5274740179'"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0\") == \"163.5274740179\"\n\"\"\""
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0') == '168.7916512460'\n\"\"\"\nimport math\n\nA = (float(stdin.readline().split()[0]), float(stdin.readline().split()[1]))\nB = (float(stdin.readline().split()[0]), float(stdin.readline().split()[1]))\nconveyors = int(stdin.readline())\nconveyor_points = []\nfor i in range(conveyors):\n    conveyor_points.append(list(map(float, stdin.readline().split())))\nconveyor_points.sort()\n\nmin_time = math.sqrt((B[0]-A[0])**2+(B[1]-A[1])**2)\n\nfor i in range(conveyors):\n    point1 = conveyor_points[i][0]\n    point2 = conveyor_points[i][1]\n    if point1 > point2:\n        point1, point2 = point2, point1\n    if point1 > A[0] and point2 < B[0]:\n        min_time += math.sqrt((A[0]-point1)**2+(point2-A[1])**2)\n    elif point1 > B[0] and point2 < A[0]:\n        min_time += math.sqrt((A[0]-point1)**2+(point2-A[1])**2)\n    elif point1 < A[0] and point2 > B[0]:\n        min_time += math.sqrt((B[0]-point1)**2+(point2-A[1])**2)\n    elif point1 < B[0] and point2 > A[0]:\n        min_time += math.sqrt((B[0]-point1)**2+(point2-A[1])**2)\n    if point1 == point2:\n        min_time += math.sqrt((B[0]-point1)**2+(point2-A[1])**2)\n\nprint(f'{min_time:.6f}')\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0') == '168.7916512460'\nassert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0') == '163.5274740179'\nassert solution('0.0 1.0 4.0 1.0\\n1\\n0.0 0.0 4.0 0.0') == '3.7320508076'\n\n\"\"\""
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0\") == \"168.7916512460\"\n\"\"\"\n\n\"\"\"\nSolution 1:\n\nTraverse through the list of points. Calculate the distance between the current location and the next point. If the distance is greater than the speed of the current point, add the speed to the total distance travelled. If the distance is less than the speed of the current point, subtract the speed from the total distance travelled. Repeat this process until the last point is reached.\n\nO(n) time | O(1) space, where n is the number of points.\n\"\"\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"0.0 1.0 4.0 1.0\") == \"3.7320508076\"\n\"\"\""
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\n\"\"\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0') == '168.7916512460'\n\n\"\"\"\n\nA, B = map(float, input().split())\nH = int(input())\nA, B = A / 1000, B / 1000\nM = []\nfor _ in range(H):\n    x1, y1, x2, y2 = map(float, input().split())\n    M.append(((x1, y1), (x2, y2)))\nd = 1000000000\nfor i in range(len(M)):\n    for j in range(len(M)):\n        if i!= j:\n            for k in range(len(M)):\n                if k!= i and k!= j:\n                    a1, a2 = M[i]\n                    b1, b2 = M[j]\n                    a3, a4 = M[k]\n                    x = max(abs(a1[0] - a2[0]), abs(a3[0] - a4[0]))\n                    y = max(abs(a1[1] - a2[1]), abs(a3[1] - a4[1]))\n                    s = abs(a1[0] - a2[0]) + abs(a1[1] - a2[1]) + abs(a3[0] - a4[0]) + abs(a3[1] - a4[1])\n                    s -= max(abs(a1[0] - a3[0]), abs(a2[0] - a4[0])) + max(abs(a1[1] - a3[1]), abs(a2[1] - a4[1]))\n                    s /= 2\n                    s += max(abs(a1[0] - a3[0]), abs(a2[0] - a4[0])) + max(abs(a1[1] - a3[1]), abs(a2[1] - a4[1]))\n                    if x <= A and y <= B:\n                        s += abs(A - x) + abs(B - y)\n                    if s < d:\n                        d = s\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0''') == '168.7916512460'\n\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0''') == '163.5274740179'\n\nassert solution('''0.0 1.0 4.0 1.0\n1\n0.0 0.0 4.0 0.0''') == '3.7320508076'\n\nassert solution('''0.0 1.0 4.0 1.0\n1\n0.0 0.0 4.0 0.0\n0.0 0.0 0.0 0.0''') == '3.7320508076'\n\nassert solution('''0.0 1.0 4.0 1.0\n1\n0.0 0.0 4.0 0.0\n0.0 0.0 0.0 0.0\n0.0 0.0 0.0 0.0''') == '3.7320508076'"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0') == '168.7916512460'\n\"\"\"\n\nfrom collections import deque\nimport math\nimport sys\nfrom typing import Deque, List, Tuple, Union\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5 3\") == 'rarity'\nassert solution(\"9 8 1\") == 'canterlot'\nassert solution(\"5 3 5\") =='madam'\nassert solution(\"9 8 2\") == 'IMPOSSIBLE'\nassert solution(\"6 1 3\") == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\nassert solution('3 2 1') == IMPOSSIBLE\nassert solution('5 3 2') == IMPOSSIBLE\n\nimport math\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 5') =='madam'\nassert solution('9 8 1') == 'canterlot'\n\"\"\""
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\nassert solution(\"9 8 1\") == \"canterlot\"\nassert solution(\"5 3 5\") == \"madam\"\nassert solution(\"8 4 4\") == \"impossible\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n\"\"\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\nassert solution('3 3 3') == 'impossible'\nassert solution('7 7 7') == 'impossible'\n\"\"\""
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n\"\"\""
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\nassert solution('4 5 4') == IMPOSSIBLE\nassert solution('1 1 1') == IMPOSSIBLE\n\n\"\"\""
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\nassert solution('3 2 3') == IMPOSSIBLE\n\"\"\"\n\nimport sys\nimport string\n\nN, K, P = map(int, sys.stdin.readline().split())\n\npossible_strings = []\n\nfor length in range(1, N + 1):\n    # only consider strings of length N\n    for chars in set(string.ascii_lowercase[:K]):\n        if not chars * (P - length + 1) in possible_strings:\n            possible_strings.append(chars * (P - length + 1))"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5 3\") == 'rarity'\nassert solution(\"9 8 1\") == 'canterlot'\nassert solution(\"5 3 5\") =='madam'\n\"\"\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\nprint(\"Successfully tested.\")\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International\\ncontest- motivation high\\nProgrammers have fun!\"\nassert solution(\"\u00bfC\u00f3mo se dice la ropa de roma?\") == \"\u00bfC\u00f3mo se dice la ropa de roma?\"\nassert solution(\"\u201cMama, I\u2019m falling in love with you.\u201d\\nI\u2019m eating my bowl of rice.\\nI\u2019m so happy that I can\u2019t stop thinking about you.\\n\u201cYou are so cute, mama.\u201d\\nI\u2019m falling in love with you.\\n\u201cYou are so cute, mama.\u201d\") == '\u201cMama, I\u2019m falling in love with you.\\nI\u2019m eating my bowl of rice.\\nI\u2019m so happy that I can\u2019t stop thinking about you.\\n\u201cYou are so cute, mama.\u201d\\nI\u2019m falling in love with you.\\n\u201cYou are so cute, mama.\u201d'"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\"\n) == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\n\nassert solution(\n\"Who would know if we had too few syllables?\"\n) == \"Who would know if we had too few syllables?\"\n\nassert solution(\n\"International contest- motivation high Programmers have fun!\"\n) == \"International contest-\\nmotivation high Programmers have fun!\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International\\ncontest- motivation high\\nProgrammers have fun!\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International\\ncontest-\\nmotivation high\\nProgrammers have fun!\"\n\n\"\"\""
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\\n\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International contest-\\nmotivation high\\nProgrammers have fun!\\n\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge\\nmountain\\nroad.\\nLeaves, glowing in\\naturn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few\\nsyllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International\\ncontest-\\nmotivation high\\nProgrammers have fun!\"\n\n---\n### Code\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('blue ridge mountain road') == 'blue ridge mountain road'\nassert solution('blue ridge mountain road. leaves, glowing in autumn sun, fall in Virginia.') == 'blue ridge mountain road.\\nleaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('who would know if we had too few syllables?') == 'who would know if we had too few syllables?'\nassert solution('international contest- motivation high Programmers have fun!') == 'international contest-\\nmotivation high Programmers have fun!'\n\"\"\""
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\"\n) == \"\"\"Blue Ridge mountain road.\nLeaves, glowing in autumn sun,\nfall in Virginia.\n\"\"\"\n\nassert solution(\n    \"Who would know if we had too few syllables?\"\n) == \"\"\"Who would know if we had too few syllables?\n\"\"\"\n\nassert solution(\n    \"International contest- motivation high Programmers have fun!\"\n) == \"\"\"International\ncontest- motivation high\nProgrammers have fun!\n\"\"\"\n\nprint('Success')"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables.\") == \"Who would know if we had too few syllables.\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International contest-\\nmotivation high\\nProgrammers have fun!\"\n\n\"\"\""
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ThoreHusfeldt\\nThoreHusfeldt\") == 'ThoreH'\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\") == 'Thore is awesome'\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\\nThoreHusfeldt\") == 'ThoreH'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\nThoreHusfeldt\\nThoreTiemann') == 'ThoreH'\nassert solution('2\\nThoreHusfeldt\\nJohanSannemo') == 'Thore is awesome'\nassert solution('2\\nThoreHusfeldt\\nThoreHusfeldt') == 'Thore sucks'"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ThoreHusfeldt\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\") == \"Thore sucks\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreHusfeldt\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\\nJohanSannemo\") == \"Thore\"\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreTiemann\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\") == \"ThoreH\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nfrom collections import deque\nfrom collections import defaultdict\nfrom typing import Dict, Deque, List, Tuple\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\nThoreTiemann\\nThoreHusfeldt') == 'ThoreH'\nassert solution('2\\nThoreHusfeldt\\nJohanSannemo') == 'Thore is awesome'\nassert solution('2\\nJohanSannemo\\nThoreHusfeldt') == 'Thore sucks'\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ThoreHusfeldt\\nJohanSannemo\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldtr\") == \"Thore is awesome\"\n\"\"\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('ThoreHusfeldt') == 'Thore is awesome'\nassert solution('ThoreHusfeldt\\nJohanSannemo') == 'Thore is awesome'\nassert solution('ThoreHusfeldt\\nThoreHusfeldt') == 'Thore is awesome'\nassert solution('ThoreHusfeldt\\nJohanSannemo\\nThoreHusfeldt') == 'Thore sucks'\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\nThoreHusfeldt\\nJohanSannemo\") == \"Thore is awesome\"\nassert solution(\"2\\nThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"2\\nThoreHusfeldt\\nThoreHusfeldtt\") == \"ThoreT\"\n\"\"\""
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\nThoreHusfeldt\\nJohanSannemo\") == \"ThoreH\"\nassert solution(\"1\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"1\\nThoreHusfeldt\\nThoreHusfeldter\\nJohanSannemo\") == \"Thore\"\nassert solution(\"1\\nThoreHusfeldt\\nThoreHusfeldt\\nJohanSannemo\") == \"ThoreHusfeldt\"\n\"\"\"\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.score = 0\n\nclass Solution:\n    def __init__(self):\n        self.best = 0\n        self.root = TrieNode()\n\n    def solve(self, n: int, lines: list[str]) -> str:\n        prefixes = {}\n        for i in range(n):\n            line = lines[i]\n            if line == 'ThoreHusfeldt':\n                prefixes[line] = i\n                self.root = TrieNode()\n            else:\n                if line in prefixes:\n                    self.root.score += 1\n                self.insert(line, prefixes[line], line)\n        if self.root.score == n - 1:\n            return ''\n        self.dfs(self.root, '', '')\n        return min(self.best, n)\n\n    def insert(self, word: str, prefix_idx: int, prefix: str) -> None:\n        node = self.root\n        for i, c in enumerate(word):\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n            if i == prefix_idx:\n                node.score += 1\n            if i > 0 and self.root.children[prefix[0]].score > 0:\n                self.best = prefix\n                return\n            if self.root.score > 0 and self.best == 0:\n                self.best = prefix\n        if self.root.score == 0:\n            self.best = prefix\n\n    def dfs(self, node: TrieNode, prefix: str, word: str) -> None:\n        for key, child in node.children.items():\n            if child.score > 0:\n                self.best = word\n            if child.score > 0 and self.best == 0:\n                self.best = word\n            if child.score == 0:\n                self.dfs(child, prefix + key, word + key)\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('LP*R') == '13'\nassert solution('L*P') == '33'\nassert solution('L*R') == '25'\nassert solution('L*P') == '13'\nassert solution('R*R') == '33'\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"L*R\") == \"25\"\nassert solution(\"P*P\") == \"6\"\nassert solution(\"**\") == \"33\"\n\"\"\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"LP*R\") == \"3\"\nassert solution(\"L*RR\") == \"12\"\nassert solution(\"LR*RR\") == \"11\"\nassert solution(\"LLR*RR\") == \"16\"\nassert solution(\"LLRRRRRR\") == \"40\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('P*P') == 6\nassert solution('L*R') == 25\nassert solution('**') == 33"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"P*P\") == 6\nassert solution(\"L*R\") == 25\nassert solution(\"**\") == 33\n\"\"\"\n\n\nfrom typing import Dict, List, Tuple\n\nclass Tree:\n    def __init__(self, data: Dict[int, Tuple[int, int]]):\n        self.data = data\n        self.nodes = []\n        for item in self.data.items():\n            self.nodes.append(item[0])\n        self.nodes.sort()\n        \n    def label(self, node: int) -> int:\n        for key, value in self.data.items():\n            if node == value[0]:\n                return key\n        return 0\n        \n    def left(self, node: int) -> int:\n        return self.data[node][1][0]\n        \n    def right(self, node: int) -> int:\n        return self.data[node][1][1]\n        \n    def parents(self) -> List[int]:\n        parents = []\n        for node in self.nodes:\n            if self.left(node)!= 0 and self.right(node)!= 0:\n                parents.append(node)\n        return parents\n        \n    def nodes(self) -> List[int]:\n        return self.nodes\n        \n    def depth(self, node: int) -> int:\n        parents = self.parents()\n        if node in parents:\n            return 1\n        else:\n            return 1 + self.depth(self.left(node))\n        \n    def distance(self, node: int, target: int) -> int:\n        if target == node:\n            return 0\n        elif target in self.nodes:\n            return 1 + self.distance(self.left(node), target)\n        elif target in self.parents():\n            return 1 + self.distance(self.right(node), target)\n        else:\n            return 9999999999\n        \n    def diameter(self, node: int) -> int:\n        if self.distance(node, self.left(node)) > self.distance(node, self.right(node)):\n            return self.distance(node, self.left(node))\n        else:\n            return self.distance(node, self.right(node))\n            \n    def level(self, node: int, distance: int) -> List[int]:\n        level = [node]\n        i = 0\n        while i < distance:\n            if self.left(node)!= 0:\n                node = self.left(node)\n                level.append(node)\n            elif self.right(node)!= 0:\n                node = self.right(node)\n                level.append(node)\n            i += 1\n        return level\n        \n    def maximum_distance(self) -> int:\n        dist = 0\n        for node in self.nodes:\n            if dist < self.diameter(node):\n                dist = self.diameter(node)\n        return dist\n        \n    def minimum_distance(self) -> int:\n        dist = 9999999999\n        for node in self.nodes:\n            if dist > self.diameter(node):\n                dist = self.diameter(node)\n        return dist\n        \n    def num_of_nodes_at_distance(self, distance: int) -> int:\n        nodes = 0\n        for node in self.nodes:\n            if self.distance(node, node) == distance:\n                nodes += 1\n        return nodes\n        \n    def num_of_nodes_at_level(self, distance: int) -> int:\n        nodes = 0\n        for node in self.nodes:\n            if self.depth(node) == distance:\n                nodes += 1\n        return nodes\n        \n    def num_of_nodes_at_distance_for_each_level(self, distance: int) -> List[int]:\n        nodes = [0] * (distance + 1)\n        for node in self.nodes:\n            nodes[self.depth(node)] += 1\n        return nodes\n        \n    def num_of_nodes_at_level_for_each_distance(self, distance: int) -> List[int]:\n        nodes = [0] * distance\n        for node in self.nodes:\n            nodes[self.distance(node, node)] += 1\n        return nodes\n        \n    def num_of_nodes_at_level_for_each_distance_and_level(self, distance: int) -> List[List[int]]:\n        nodes = [[0] * (distance + 1) for _ in range(distance + 1)]\n        for node in self.nodes:\n            nodes[self.distance(node, node)][self.depth(node)] += 1\n        return nodes\n        \n    def total_num_of_nodes_at_level(self, distance: int) -> int:\n        total = 0\n        for node in self.nodes:\n            if self.depth(node) == distance:\n                total += 1\n        return total\n        \n    def num_of_nodes_at_depth(self, distance: int) -> int:\n        nodes = 0\n        for node in self.nodes:\n            if self.depth(node) == distance:\n                nodes += 1\n        return nodes\n        \n    def num_of_nodes_at_distance_for_each_level(self, distance: int) -> List[int]:\n        nodes = [0] * (distance + 1)\n        for node in self.nodes:\n            nodes[self.depth(node)] += 1\n        return nodes\n        \n    def num_of_nodes_at_distance_for_each_level_at_the_beginning(self, distance: int) -> List[int]:\n        nodes = [0] * (distance + 1)\n        for node in self.nodes:\n            if self.left(node)!= 0:\n                nodes[self.depth(node)] += 1\n        return nodes\n        \n    def num_of_nodes_at_distance_for_each_level_at_the_end(self, distance: int) -> List[int]:\n        nodes = [0] * (distance + 1)\n        for node in self.nodes:\n            if self.right(node)!= 0:\n                nodes[self.depth(node)] += 1\n        return nodes\n        \n    def num_of_nodes_at_distance_for_each_"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"L*R\") == 25\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"L*R\") == \"25\"\nassert solution(\"P*P\") == \"6\"\nassert solution(\"L*R*P\") == \"33\"\n\"\"\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\""
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"*L\") == \"1\"\nassert solution(\"*L*R\") == \"3\"\nassert solution(\"LL\") == \"3\"\nassert solution(\"L*R\") == \"6\"\nassert solution(\"LL*\") == \"9\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'\nprint('Success')\n\n\"\"\"\n\nimport sys\nsys.path.append('../')\n\nfrom utils import time_me\n\n@time_me\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"yes\"\nassert solution(\"herp is derp\\nderp is derp\") == \"yes\"\nassert solution(\"herp is derp\\nderp not derp\") == \"wait what?\"\nassert solution(\"herp is derp\\nderp is derp\\nderp is derp\") == \"yes\"\nassert solution(\"herp is derp\\nderp is derp\\nderp is derp\\nderp is derp\\nderp is derp\\nderp is derp\\nderp is derp\") == \"yes\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"4\nherp is derp\nderp is herp\nherp is herp\nderp is derp\n\"\"\") == \"yes\"\nassert solution(\"\"\"3\noskar not lukas\noskar is poptart\nlukas is smart\n\"\"\") == \"wait what?\"\nassert solution(\"\"\"1\nmoo not foo\n\"\"\") == \"yes\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"4\nherp is derp\nderp is herp\nherp is herp\nderp is derp\"\"\") == \"yes\"\nassert solution(\"\"\"3\noskar not lukas\noskar is poptart\nlukas is smart\"\"\") == \"wait what?\"\nassert solution(\"\"\"1\nmoo not foo\"\"\") == \"yes\"\n\"\"\"\n\n\"\"\"\n\nn = int(stdin.readline())\nlines = stdin.readlines()\n\ncounter = 0\nfor _ in range(n):\n    line = lines[counter].split()\n\n    if line[0].endswith('not') and line[1] == line[0][:-3]:\n        print(\"no\")\n    elif line[0] == line[1]:\n        print(\"yes\")\n    elif line[0] in line[1] or line[1] in line[0]:\n        print(\"yes\")\n    else:\n        print(\"wait what?\")\n    counter += 1\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\nherp is derp\nderp is herp\nherp is herp\nderp is derp\n\"\"\") == \"yes\"\n\nassert solution(\"\"\"\n3\noskar not lukas\noskar is poptart\nlukas is smart\n\"\"\") == \"wait what?\"\n\nassert solution(\"\"\"\n1\nmoo not foo\n\"\"\") == \"yes\"\n\nassert solution(\"\"\"\n10\nrhythm is rhythm\nrhythm is a rhythm\nrhythm is rhythm\nrhythm is a rhythm\nrhythm is a rhythm\nrhythm is a rhythm\nrhythm is a rhythm\nrhythm is rhythm\nrhythm is a rhythm\nrhythm is rhythm\nrhythm is a rhythm\n\"\"\") == \"yes\"\n\nassert solution(\"\"\"\n2\nderp is derp\nderp is derp\n\"\"\") == \"yes\""
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\nherp is derp\\nderp is derp\\nherp is herp') == 'yes'\nassert solution('4\\nherp is derp\\nderp is derp\\nherp is herp\\nderp is derp') == 'yes'\nassert solution('4\\nherp is derp\\nderp is derp\\nherp is herp\\nderp is derp') == 'yes'\nassert solution('2\\nherp is derp\\nderp is derp') == 'wait what?'\nassert solution('1\\nlukas is smart') == 'yes'\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp\") == \"yes\"\nassert solution(\"3\\noskar not lukas\\noskar is poptart\\nlukas is smart\") == \"wait what?\"\nassert solution(\"1\\nmoo not foo\") == \"yes\"\n\"\"\""
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\nlukas is lukas\\nlukas is poptart\\nlukas not lukas\\nlukas is smart\") == \"wait what?\"\nassert solution(\"4\\nlukas is lukas\\nlukas is poptart\\nlukas not lukas\\nlukas is smart\") == \"yes\"\n\"\"\"\n\nstdin = input()"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\nherp is derp\nderp is herp\nherp is herp\nderp is derp''') == 'yes'\nassert solution('''3\noskar not lukas\noskar is poptart\nlukas is smart''') == 'wait what?'\nassert solution('''1\nmoo not foo''') == 'yes'\n\"\"\""
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\nherp is derp\nderp is herp\nherp is herp\nderp is derp\n\"\"\") == \"yes\"\nassert solution(\"\"\"\noskar not lukas\noskar is poptart\nlukas is smart\n\"\"\") == \"wait what?\"\nassert solution(\"\"\"\nmoo not foo\n\"\"\") == \"yes\"\n\"\"\""
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n\") == \"1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\"\nassert solution(\"3\\nACMA\\nACM\\nACA\\nAMA\\n\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n') == '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nAACC\\nAAC\\nAC\\nA\\nC\") == \"1 4\\nAAC\\nA\\nA\\nAC\\nA\"\nassert solution(\"3\\nACA\\nAC\\nA\") == \"impossible\"\nassert solution(\"1\\nA\\nM\") == \"impossible\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n\") == '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\\n'\nassert solution(\"3\\nACMA\\nACM\\nACA\\nAMA\\n\") == 'impossible\\n'\nassert solution(\"1\\nAM\\nMA\\n\") == 'impossible\\n'\nassert solution(\"1\\nAM\\nMA\\n\") == 'impossible\\n'\nassert solution(\"1\\nAM\\nMA\\n\") == 'impossible\\n'\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA') == '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA'\nassert solution('3\\nACMA\\nACM\\nACA\\nAMA\\n') == 'impossible'\nassert solution('1\\nAM\\nMA\\n') == 'impossible'"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\") == \"1 4\\nMM\\nA\\nAA\\nACA\\nAACCMMAA\"\nassert solution(\"3\\nACMA\\nACM\\nACA\\nAMA\") == \"impossible\"\nassert solution(\"1\\nAM\\nMA\") == \"impossible\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n\") == \"1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\\n\"\n\"\"\""
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n\") == \"1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\"\nassert solution(\"3\\nACMA\\nACM\\nACA\\nAMA\\n\") == \"impossible\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n\") == '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\\n'\nassert solution(\"3\\nACMA\\nACM\\nACA\\nAMA\\n\") == 'impossible\\n'\nassert solution(\"1\\nAM\\nMA\\n\") == 'impossible\\n'\nprint('The local tests are done. Try Solution Online - https://onlinejudge.org/'\n\n)\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n') == '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA'\nassert solution('3\\nACMA\\nACM\\nACA\\nAMA\\n') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input_str) == output_str\n\n\"\"\"\n\nimport sys\nimport math\nimport unittest\nfrom itertools import combinations\nfrom collections import defaultdict, Counter\nfrom typing import Dict, List, Tuple, Set, DefaultDict, Optional, Tuple\n\nfrom icontract import require, ensure, DBC\n\n\nclass Game(DBC):\n    \"\"\"The game, with record and tricks.\"\"\"\n\n    @require(lambda n, r: 2 <= n < r <= 5000)\n    @require(lambda n, r: 2 <= r <= 5000)\n    @require(lambda m: 1 <= m <= 50)\n    @require(lambda m: all(1 <= x <= n for x in m))\n    @require(lambda m: all(1 <= x[0] < x[1] for x in m))\n    @require(lambda m: all(1 <= x[2] <= 1000 for x in m))\n    def __init__(\n        self, n: int, r: int, m: List[Tuple[int, float, int]]\n    ) -> None:\n        self.n = n\n        self.r = r\n        self.m = m\n\n    def score(self) -> int:\n        \"\"\"\n        Score is $r$ seconds.\n        \"\"\"\n        return self.r\n\n    def time_limit(self) -> int:\n        \"\"\"\n        Time limit is $n < r$.\n        \"\"\"\n        return self.n\n\n    def tricks(self) -> Set[int]:\n        \"\"\"\n        Tricks are $m$, each with a probability of $p$ and duration $d$: $m = {(t, p, d)}$.\n        \"\"\"\n        return set(x[0] for x in self.m)\n\n    def trick_prob(self, trick: int) -> Optional[float]:\n        \"\"\"\n        Time spent on the trick if it is successful, or if it fails, the duration of the recovery.\n        \"\"\"\n        for x in self.m:\n            if x[0] == trick:\n                return x[1]\n        return None\n\n    def probability_to_succeed(self, trick: int) -> Optional[float]:\n        \"\"\"\n        If the trick succeeds, return the probability of success.\n        \"\"\"\n        for x in self.m:\n            if x[0] == trick:\n                return x[1]\n        return None\n\n    def tricks_left_to_try(self, time: int) -> int:\n        \"\"\"\n        If time < the current time, return the number of tricks left to try.\n        \"\"\"\n        count = 0\n        for x in self.m:\n            if x[0] <= time:\n                count += 1\n        return count\n\n    @ensure(lambda result, time, expected_result: result == expected_result)\n    def probability_to_finish(self, time: int) -> Optional[float]:\n        \"\"\"\n        If time < the current time, return the probability that you will finish the game.\n        \"\"\"\n        count = self.tricks_left_to_try(time)\n        if count == 0:\n            return None\n        return 1.0 / count\n\n\nclass GameTest(unittest.TestCase):\n    def test_all(self) -> None:\n        all_combinations = [\n            (2, 3, [(2, 0.5, 10), (3, 0.5, 2), (3, 0.5, 2)]),\n            (2, 4, [(1, 0.5, 5), (2, 0.5, 8), (2, 0.5, 8)]),\n            (10, 20, [(5, 0.3, 8), (6, 0.8, 3), (8, 0.9, 3)]),\n        ]\n        for n, r, m in all_combinations:\n            with self.subTest(n=n, r=r, m=m):\n                game = Game(n=n, r=r, m=m)\n                self.assertEqual(game.score(), r)\n                self.assertEqual(game.time_limit(), n)\n                self.assertEqual(len(game.tricks()), len(m))\n                for t in game.tricks():\n                    p = game.trick_prob(t)\n                    self.assertIsNotNone(p)\n                    self."
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 111 5\") == \"124\"\n\"\"\"\n\nn, r, m = [int(x) for x in stdin.split()]\n\nt = [int(x) for x in stdin.split(\"\\n\") if int(x) <= n and int(x) >= 1][1:m + 1]\np = [float(x) for x in stdin.split(\"\\n\") if float(x) >= 0 and float(x) <= 1 and len(x.split(\".\")[1]) <= 6][1:m + 1]\nd = [int(x) for x in stdin.split(\"\\n\") if int(x) >= 1][1:m + 1]"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == '124'\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\") == \"3\"\nassert solution(\"10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3\") == \"18.9029850746\"\n\n\"\"\"\n\nfrom numpy.random import geometric\nimport numpy as np\n\nr, n, m = map(int, input().split())\na = []\n\nfor _ in range(m):\n    a.append(list(map(int, input().split())))\na = np.array(a)\n\nd = []\nfor i in range(1, n + 1):\n    t, p, d0 = a[a[:, 0] == i]\n    p = p / (10 ** 6)\n    d.append((d0, t, p))\n\nd = sorted(d, key=lambda x: x[0])\n\nt, p, d0 = d[0]\n\ns = t\nans = 0\n\nfor i in range(m):\n    if geometric(p) == 1:\n        ans += d0\n    d[i][0] -= 1\n    if d[i][0] == 0:\n        t, p, d0 = d[i]\n        s += t\n\nans += r - s\n\nprint(ans)\n\n\"\"\"\nassert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\") == \"3\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\\n\") == \"3\"\nassert solution(\"10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3\") == \"18.9029850746\"\nprint(\"test passed\")\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\") == \"3\"\nassert solution(\"10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3\") == \"18.9029850746\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\\n\") == \"3\"\nassert solution(\"10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3\\n\") == \"18.9029850746\"\nprint('Test pass.')\n\n-----Solution-----"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2''') == '124'\n\nassert solution('''2 4 1\n1 0.5 5\n''') == '3'\n\nassert solution('''10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n''') == '18.9029850746'\n\nprint('Success')"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n2 1 2') == '2 1 2'\nassert solution('2 1\\n1') == '1'\nassert solution('5 22\\n4 3 4 2') == '4 3 4 2'\n\"\"\"\n\nimport math\nimport sys\n\nassert len(sys.argv) == 3\nhated, index = (int(n) for n in sys.argv[1:])"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n') == '2 1 2'\nassert solution('2 1\\n') == '1'\nassert solution('5 22\\n') == '4 3 4 2'\n\n\"\"\""
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n\") == \"2 1 2\"\n\"\"\""
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n\") == \"2 1 2\"\nassert solution(\"2 1\\n\") == \"1\"\nassert solution(\"5 22\\n\") == \"4 3 4 2\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n2 1 2\") == \"2 1 2\"\nassert solution(\"2 1\\n1\") == \"1\"\nassert solution(\"5 22\\n4 3 4 2\") == \"4 3 4 2\"\n\"\"\"\n\nimport sys\n\nhated, index = tuple(map(int, sys.stdin.readline().split()))\n\nfor i in range(1, 1000000000):\n    if hated % i == 0 and index > i * (hated - i + 1) / i:\n        print(index - ((hated - i + 1) // i) * i + i)\n        break\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n2 1 2\") == \"2 1 2\"\nassert solution(\"2 1\\n1\") == \"1\"\nassert solution(\"5 22\\n4 3 4 2\") == \"4 3 4 2\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n2 1 2') == '2 1 2'\nassert solution('2 1\\n1') == '1'\nassert solution('5 22\\n4 3 4 2') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(expected)\nprint(solution(str(input())))\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n2 1 2\") == \"2 1 2\"\nassert solution(\"2 1\\n1\") == \"1\"\nassert solution(\"5 22\\n4 3 4 2\") == \"4 3 4 2\"\n\"\"\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n2 1 2\") == \"2 1 2\"\nassert solution(\"2 1\\n1\") == \"1\"\nassert solution(\"5 22\\n4 3 4 2\") == \"4 3 4 2\"\n\nprint(\"All tests passed.\")\n\n-----\nYou are given the length of the sequence n and the values of the sequence (as a string separated by a space). You should return a string containing the value of the kth element of this sequence.\n\nExample\nFor n = 3 and k = 3, the result should be\nsequence(n, k) = \"2 1 2\".\n\nThe first element of the sequence is 2, the second element is 1, and the third element is 2.\n\nInput Format\nIn a single line, you are given the length of the sequence n and k separated by a space.\n\nConstraints\n1 <= n <= 10^3\n1 <= k <= 2 * 10^n\n\nOutput Format\nIn a single line, print the kth element of the sequence n.\n\nSample Input 0\n3 2\nSample Output 0\n2\nExplanation 0\nThe first line contains 2 space-separated integers describing the respective values of n and k.\nThe second line contains the sequence n, and the third line contains the value of the kth element of the sequence n.\n\nSample Input 1\n5 3\nSample Output 1\n2"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == \"2\"\n\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"0\"\n\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n7 2\\n3 4\") == \"2\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n7 2\\n3 4\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\") == \"0\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n3 4\\n2 4') == '2'\nassert solution('7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4') == '2'\nassert solution('7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\") == \"0\""
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n3 4\\n2 4') == '2'\nassert solution('7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4') == '2'\nassert solution('7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n7 2\\n3 4') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n2 3') == '0'\nassert solution('1 2\\n2 3') == '2'\nassert solution('1 2\\n2 4') == '2'\nassert solution('1 2\\n3 4') == '3'\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n7 2\\n3 4\") == \"0\"\n\n'''\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\\\n1 2\\\\n1 3\\\\n3 4\\\\n2 4\") == \"2\"\nassert solution(\"7 6\\\\n1 2\\\\n2 3\\\\n2 5\\\\n6 3\\\\n7 2\\\\n3 4\") == \"2\"\nassert solution(\"7 5\\\\n1 2\\\\n2 3\\\\n3 4\\\\n5 6\\\\n6 7\") == \"0\"\n\n\"\"\"\n\n\nclass UnionFind:\n    def __init__(self, n: int):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.n = n\n\n    def union(self, x: int, y: int) -> bool:\n        x, y = self.find(x), self.find(y)\n        if x == y:\n            return False\n        if self.size[x] < self.size[y]:\n            x, y = y, x\n        self.parent[y] = x\n        self.size[x] += self.size[y]\n        return True\n\n    def find(self, x: int) -> int:\n        if self.parent[x] == x:\n            return x\n        self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def connected(self, x: int, y: int) -> bool:\n        return self.find(x) == self.find(y)\n\n    def count(self, x: int) -> int:\n        return self.size[self.find(x)]\n\n    def members(self, x: int) -> list:\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self) -> list:\n        return [i for i, x in enumerate(self.parent) if i == x]\n\n    def all_group_members(self) -> list:\n        d = defaultdict(list)\n        for member in range(self.n):\n            group = self.find(member)\n            d[group].append(member)\n        return d.values()\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n3 4\\n2 4') == '2'\nassert solution('7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4') == '2'\nassert solution('7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n') == '0'\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20 0\\n1.00 0.10') == '20.0'\nassert solution('-10 10\\n10.0 1.0') == '3.14159265'\n\"\"\"\n\nfrom math import sqrt\nfrom typing import List, Tuple, Union\n\nGrid = List[List[float]]\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == \"20.00000000\"\nassert solution(\"-10 10\\n10.00 1.00\") == \"3.14159265\"\nassert solution(\"0 20\\n1.00 0.10\") == \"28.26445910\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == '20.0'\nassert solution(\"-10 10\\n10.00 1.00\") == '3.14159265'\nassert solution(\"0 20\\n1.00 0.10\") == '28.264489'\nprint('The local tests are done. Click on \"Check\" for more details.')\n\n-----\n\"\"\"\n\nimport math\n\n\"\"\"\n\uc544\ub798 \ucf54\ub4dc\ub294 \uc785\ub825\ubc1b\uc740 \ub450 \uc22b\uc790\ub97c \ubc14\ud0d5\uc73c\ub85c \ucd9c\ub825\ud558\ub294 \ucf54\ub4dc\uc774\ub2e4.\n\ntest_input = \"20 0\\n1.00 0.10\"\ntest_output = \"20.0\"\n\"\"\"\n\ntest_input = \"20 0\\n1.00 0.10\"\ntest_output = \"20.0\""
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''20 0\n1.00 0.10''') == '20.0'\nassert solution('''-10 10\n10.00 1.00''') == '3.14159265'\nassert solution('''0 20\n1.00 0.10''') == '28.26445910'\nassert solution('''20 0\n0.10 1.00''') == '16.666666667'\nassert solution('''0 0\n0.10 1.00''') == '0.0'\n\nimport sys; from itertools import count"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''20 0\n1.00 0.10'''\n) == '20.00000000'\n\nassert solution(\n'''-10 10\n10.00 1.00'''\n) == '3.14159265'\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20 0') == '20.0'\nassert solution('-10 10') == '3.14159265'\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '5'\n\"\"\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == \"20.0\"\nassert solution(\"-10 10\\n10.00 1.00\") == \"3.14159265\"\nassert solution(\"0 20\\n1.00 0.10\") == \"28.264460\"\nassert solution(\"-3.14159265 3.14159265\\n0.1 0.1\") == \"24.264460\"\n\"\"\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20 0') == '20.0'\n\"\"\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\") == \"170\"\nassert solution(\"3\\n2 120\\n3 50\\n2 80\") == \"150\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\") == \"170\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 100\\\\n1 100\\\\n4 70\\\\n3 70\") == \"170\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\") == '170'\nassert solution(\"3\\n2 120\\n3 50\\n2 80\") == '150'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 100\\n1 100\\n4 70\\n3 70') == '170'\nassert solution('3\\n2 120\\n3 50\\n2 80') == '150'\n\"\"\"\nimport sys\nfrom typing import List\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_DATA = [line.split() for line in INPUT_LINES]\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\") == \"170\"\nassert solution(\"3\\n2 120\\n3 50\\n2 80\") == \"150\"\n\"\"\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 100\\n1 100\\n4 70\\n3 70') == '170'\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n2 100\n1 100\n4 70\n3 70''') == '170'\n\nassert solution('''3\n2 120\n3 50\n2 80''') == '150'\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 100\\n1 100\\n4 70\\n3 70\") == 170"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 100\\n1 100\\n4 70\\n3 70') == '170'\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aaa') == 'aa'\nassert solution('abb') == 'ab'\nassert solution('abab') == 'aba'\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == \"2\"\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(\"input.txt\").read()) == \"26\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n2 4') == '2'\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"4 3\n1 2\n1 3\n2 4\n\"\"\") == \"2\"\nassert solution(\"\"\"6 6\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == 2\n\"\"\"\n\nfrom math import inf\nfrom unittest import TestCase\n\n\nclass Solution:\n    def longest_path(self, roads: dict) -> int:\n        n_cities = len(roads)\n        all_paths = [[inf] * n_cities for _ in range(n_cities)]\n        all_paths[0][1] = 0\n        for city in range(n_cities):\n            for road in roads[city]:\n                all_paths[city][road] = 1\n                all_paths[road][city] = 1\n\n        for city in range(n_cities):\n            for city_another in range(n_cities):\n                if all_paths[city][city_another] == inf:\n                    continue\n                for road in roads[city_another]:\n                    all_paths[city][city_another] = min(\n                        all_paths[city][city_another],\n                        all_paths[city][road] + all_paths[road][city_another]\n                    )\n\n        return max(all_paths[city][1] for city in range(n_cities))\n\n\nclass TestSolution(TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    def test_solution(self) -> None:\n        assert self.solution.longest_path(\n            {\n                0: {1, 2, 3},\n                1: {0, 2},\n                2: {0, 1, 3},\n                3: {0, 2},\n            }\n        ) == 2\n        assert self.solution.longest_path(\n            {\n                0: {1, 2},\n                1: {0, 2, 3},\n                2: {0, 1, 3, 4},\n                3: {1, 2},\n                4: {2, 3},\n            }\n        ) == 3\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n\n\nfrom collections import defaultdict\n\nnum_of_cities, num_of_roads = [int(x) for x in input().split()]\nroads = defaultdict(list)\n\nfor road_num in range(num_of_roads):\n    city_from, city_to = [int(x) for x in input().split()]\n    roads[city_from].append(city_to)\n    roads[city_to].append(city_from)\n\nvisited_cities = {1}\nvisited_roads = set()\n\nvisited_paths = []\nlongest_path_length = 1"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == \"2\"\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\") == \"5\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n2 4') == '2'\nassert solution('6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6') == '5'\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == \"2\"\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\") == \"5\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0') == '0.5'\nassert solution('8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0') == '0.0446429'"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0') == '0.5'\nassert solution('8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0') == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1\\n0\\n2 1 2\\n1 0\\n1 0') == '0.5'\nassert solution('8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0') == '0.0446429'\n\n\"\"\"\n\nimport math\nfrom collections import Counter"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\") == '0.5'\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\") == \"0.5\"\nassert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\") == \"0.0446429\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\") == \"0.5\"\nassert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\") == \"0.5\"\nassert solution(\"8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0\") == \"0.0446429\"\nassert solution(\"8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0\") == \"0.0446429\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\") == '0.5'\nassert solution(\"8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0\") == '0.0446429'\n\n\"\"\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\\n1 0\\n1 0\") == '0.5'\nassert solution(\"8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\") == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\\n1 0\") == \"0.5\"\n\"\"\"\n\nfrom typing import Set, List, Dict, Tuple\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(expected_output)"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 2 3 3 2 1\") == \"3\\n1 6 1\"\nassert solution(\"4\\n1 2 1 2\") == \"IMPOSSIBLE\"\n\nfrom unittest.mock import patch\nfrom io import StringIO\n\nclass TestClass(TestCase):\n    def assertIO(self, input, output):\n        stdin, stdout = StringIO(input), StringIO()\n        with patch(\"sys.stdin\", stdin):\n            with patch(\"sys.stdout\", stdout):\n                solution()\n                self.assertEqual(stdout.getvalue(), output)\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"6\n1 2 3 3 2 1\"\"\"\n        output = \"\"\"3\n1 6 1\"\"\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"4\n1 2 1 2\"\"\"\n        output = \"IMPOSSIBLE\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"6\n1 3 2 3 2 1\"\"\"\n        output = \"\"\"3\n1 4 1\n2 5 2\n3 6 3\"\"\"\n        self."
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 2 3 3 2 1\") == \"3\\n1 6 1\"\n\nassert solution(\"4\\n1 2 1 2\") == \"IMPOSSIBLE\"\n\nassert solution(\"4\\n1 2 1 1\") == \"IMPOSSIBLE\"\n\nprint('Hooray!')\n\nExplanation:\nSample input 1\n\nFrom the input we can see there are 6 inches of plank, 1 through 6.\n\nFrom the input we can see there are 4 colors of tape, 1 through 4.\n\nFrom the input we can see there are 2 forgery of each color.\n\nFor each color, if you want to know the first and last index of the color, you need to check if the number of tapes of that color is one. For example, the first and last index of color 1 is [1, 6] because there are 2 forgeries of color 1 and the length of the plank is 6. You should output the first and last index of each color in sequence.\n\nSample output 1\n\nFor each color, if you want to know the first and last index of the color, you need to check if the number of tapes of that color is one.\n\nFor color 1, the number of tapes of that color is 1.\n\nTherefore, you should output the first index of color 1 and the last index of color 1, which is [1, 6].\n\nYou should output all the instructions in the format \"3 1 6 1\".\n\nSample input 2\n\nThere are 4 inches of plank, 1 through 4.\n\nThere are 2 forgery of each color.\n\nSample output 2\n\nIMPOSSIBLE\n\nFrom the input we can see there are 4 colors of tape, 1 through 4.\n\nThere is a forgery of each color.\n\nTherefore, the output should be IMPOSSIBLE.\n\nFrom the input we can see there are 4 inches of plank, 1 through 4.\n\nThere are 2 forgery of each color.\n\nFor each color, if you want to know the first and last index of the color, you need to check if the number of tapes of that color is one.\n\nFor color 1, the number of tapes of that color is 1.\n\nTherefore, you should output the first index of color 1 and the last index of color 1, which is [1, 4].\n\nYou should output all the instructions in the format \"3 1 4 1\".\n\nFor color 2, the number of tapes of that color is 0.\n\nTherefore, you should output IMPOSSIBLE.\n\nFor color 3, the number of tapes of that color is 1.\n\nTherefore, you should output the first index of color 3 and the last index of color 3, which is [1, 4].\n\nYou should output all the instructions in the format \"1 3 4 1\".\n\nFor color 4, the number of tapes of that color is 1.\n\nTherefore, you should output the first index of color 4 and the last index of color 4, which is [1, 4].\n\nYou should output all the instructions in the format \"1 4 4 1\".\n\nSample input 3\n\nThere are 4 inches of plank, 1 through 4.\n\nThere are 2 forgery of each color.\n\nSample output 3\n\nIMPOSSIBLE\n\nFrom the input we can see there are 4 inches of plank, 1 through 4.\n\nThere are 2 forgery of each color.\n\nFor each color, if you want to know the first and last index of the color, you need to check if the number of tapes of that color is one.\n\nFor color 1, the number of tapes of that color is 0.\n\nTherefore, you should output IMPOSSIBLE.\n\nFor color 2, the number of tapes of that color is 0.\n\nTherefore, you should output IMPOSSIBLE.\n\nFor color 3, the number of tapes of that color is 1.\n\nTherefore, you should output the first index of color 3 and the last index of color 3, which is [1, 4].\n\nYou should output all the instructions in the format \"3 1 4 1\".\n\nFor color 4, the number of tapes of that color is 1.\n\nTherefore, you should output the first index of color 4 and the last index of color 4, which is [1, 4].\n\nYou should output all the instructions in the format \"1 4 4 1\".\n\nSample input 4\n\nThere are 6 inches of plank, 1 through 6.\n\nThere are 4 forgery of each color.\n\nSample output 4\n\nIMPOSSIBLE\n\nFrom the input we can see there are 6 inches of plank, 1 through 6.\n\nThere are 4 forgery of each color.\n\nFor each color, if you want to know the first and last index of the color, you need to check if the number of tapes of that color is one.\n\nFor color 1, the number of tapes of that color is 0.\n\nTherefore, you should output IMPOSSIBLE.\n\nFor color 2, the number of tapes of that color is 0.\n\nTherefore, you should output IMPOSSIBLE.\n\nFor color 3, the number of tapes of that color is 0.\n\nTherefore, you should output IMPOSSIBLE.\n\nFor color 4, the number of tapes of that color is 1.\n\nTherefore, you should output the first index of color 4 and the last index of color 4, which is [1, 6].\n\nYou should output all the instructions in the format \"3 1 6 1\".\n\nFor color 5, the number of tapes of that color is 1.\n\nTherefore, you should output the first index of color 5 and the last index of color 5, which is [1, 6].\n\nYou should output all the instructions in the format \"1 5 6 1\".\n\nFor color 6, the number of tapes of that color is 1.\n\nTherefore, you should output the first index of color 6 and the last index of color 6, which is [1, 6].\n\nYou should output all the instructions in the format \"1 6 6 1\".\n\nSample input 5\n\nThere are 6 inches of plank, 1 through 6.\n\nThere are 2 forgery of each color.\n\nSample output 5\n\nIMPOSSIBLE\n\nFrom the input we can see there are 6 inches of plank, 1 through 6.\n\nThere are 2 forgery of each color.\n\nFor each color, if you want to know the first and last index of the color, you need to check if the number of tapes of that color is one.\n\nFor color 1, the number of tapes of that color is 1.\n\nTherefore, you should output the first index of color 1 and the last index of color 1, which is [1, 6]."
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n2 2') == '1 5 1'\nassert solution('3\\n1 2 3') == '1 4 2'\nassert solution('3\\n2 1 3') == '2 4 2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 2 1 2\\n3\\n\") == \"3\\n1 6 1\\n2 5 2\"\nprint(solution(\"2\\n1 2 1 2\\n3\\n\"))\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"IMPOSSIBLE\"\nassert solution(\"4\\n1 1 1 1\") == \"1 1 1 2 2\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n1 2 3 3 2 1') == '3\\n1 6 1'\nassert solution('4\\n1 2 1 2') == 'IMPOSSIBLE'\nassert solution('3\\n1 2 1') == 'IMPOSSIBLE'\n\nprint(solution(stdin))\n\n\"\"\"\n\nimport math\n\nclass Solution:\n    def solution(self, stdin):\n        n = int(stdin)\n        tape = {1 : 0, 2 : 0, 3 : 0}\n        for i in range(n):\n            tape[int(stdin)] += 1\n        ans = 0\n        print(len(tape))\n        if len(tape) == 1:\n            print('IMPOSSIBLE')\n            return\n        tape = {k : v for k, v in sorted(tape.items(), key=lambda item: item[1])}\n        if tape[1] == 1 and tape[3] == 1:\n            print('IMPOSSIBLE')\n            return\n        if tape[1] == 1:\n            ans += 1\n            tape[1] -= 1\n            tape[3] -= 1\n        if tape[3] == 1:\n            ans += 1\n            tape[3] -= 1\n            tape[1] -= 1\n        print(ans)\n        print(tape)"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"./sample.in\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(sample_input) == sample_output\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 2 3 3 2 1\") == \"3\\n1 6 1\\n2 5 2\\n3 4 3\"\nassert solution(\"4\\n1 2 1 2\") == \"IMPOSSIBLE\"\nassert solution(\"2\\n1 2 1\") == \"IMPOSSIBLE\"\n\n\"\"\"\n\nimport sys\n\nn = int(input())\n\nlines = sys.stdin.readlines()\nlines = [l.strip() for l in lines]\n\nl, r, c = [], [], []\nfor i in range(len(lines)):\n    lines[i] = lines[i].split()\n    l.append(int(lines[i][0]))\n    r.append(int(lines[i][1]))\n    c.append(int(lines[i][2]))\n\nl = sorted(l)\nr = sorted(r)"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2 3 3 2 1\") == \"3\\n1 6 1\"\nassert solution(\"4\\n1 2 1 2\") == \"IMPOSSIBLE\"\n\"\"\"\nimport sys\n\nsys.stdin = open(\"./input.txt\")\n\nn = int(input())\ntape = list(map(int, input().split()))"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n5 10 20 30 40 50') == '10 20 28 27 30 40 50'\n\nSample Case:\n\nSample Output:\n10 20 28 27 30 40 50\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2\n1 100\n1 1\n''') == '1 2 100'\n\nassert solution('''2\n5 10 20 30 40 50\n2 28 27\n''') == '10 20 28 27 30 40 50'\n\nassert solution('''1\n1 2\n1 100\n''') == '1 2 100'\n\nassert solution('''1\n1 1\n1 1\n''') == '1 1 1'\n\nassert solution('''3\n100 100\n1 1\n1 2\n''') == '1 2 100'"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n1 100\\n1 1\\n\") == \"1 2 100\"\nassert solution(\"4\\n5 10 20 30 40\\n2 28 27\\n\") == \"10 20 28 27\"\nassert solution(\"2\\n5 10 20 30 40\\n2 28 27\\n\") == \"10 20 28 27\"\nassert solution(\"1\\n5 10 20 30 40\\n2 28 27\\n\") == \"10 20 28 27\"\nassert solution(\"1\\n5 10 20 30 40\\n2 28 27\\n\") == \"10 20 28 27\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2\\n1 100\\n1 1\\n') == '1 2 100\\n'\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2\\n1 100\\n1 1\\n') == '1 2 100'\nassert solution('2\\n5 10 20 30 40 50\\n2 28 27\\n') == '10 20 28 27 30 40 50'\n\n------Solution------\n\"\"\"\n\nN = int(input())\nl = []\nfor _ in range(N):\n    l.append([int(x) for x in input().split()])\nprint(\" \".join(str(x) for x in range(max([x[0] for x in l]), 0, -1)))\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2\\n1 100\\n1 1\\n') == '1 2 100\\n'\nassert solution('2\\n5 10 20 30 40 50\\n2 28 27\\n') == '10 20 28 27 30 40 50\\n'"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n1 100\") == \"1 2 100\"\nassert solution(\"5 10 20 30 40 50\") == \"10 20 28 27 30 40 50\"\n\"\"\"\n\nimport sys\nimport heapq"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 2\n1 100\n1 1\n''') == '1 2 100'\n\nassert solution('''\n2\n5 10 20 30 40 50\n2 28 27\n''') == '10 20 28 27 30 40 50'\n\nassert solution('''\n2\n5 10 20 30 40 50\n2 28 27\n''') == '10 20 28 27 30 40 50'\n\nassert solution('''\n2\n5 10 20 30 40 50\n2 28 27\n''') == '10 20 28 27 30 40 50'\n\nassert solution('''\n1\n5\n10 20 30 40 50\n''') == '10 20 30 40 50'"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2\n1 100\n1 1\n''') == '1 2 100'\nassert solution('''2\n5 10 20 30 40 50\n2 28 27\n''') == '10 20 28 27 30 40 50'"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2\\n1 100\\n1 1\\n') == '1 2 100\\n'\n\"\"\"\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n\") == \"506\"\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1') == '506'\n\"\"\""
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n1') == '1'\nassert solution('1\\n1\\n2') == '1'\nassert solution('1\\n1\\n2\\n2') == '1'\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1 2 3\") == 0\nassert solution(\"1 1 2\") == 0\nassert solution(\"1 2 1\") == 0\nassert solution(\"1 2 2\") == 0\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nAB 1 1\\nAC 2 1\\nBC 2 1\") == \"506\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0\\nAB 1 1\\nAC 2 1\\nBC 2 1\") == \"506\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0\\nA\\n0\\n\") == \"2600\"\nassert solution(\"3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n\") == \"506\"\n\"\"\"\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n\\n') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '0'\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''0\nAB 1 1\nAC 2 1\nBC 2 1''') == \"2600\"\nassert solution('''0\nAB 1 1\nAC 2 1\nBC 2 1''') == \"506\""
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 2\") == \"0\"\nassert solution(\"1 2 2 1 1 2\") == \"3\"\nassert solution(\"1 2 2 1 1 2 3 3\") == \"12\"\nassert solution(\"1 2 2 1 1 2 3 3 2\") == \"1\"\nassert solution(\"1 2 2 1 1 2 3 3 2 1\") == \"3\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"()))\") == \"impossible\"\nassert solution(\"())\") == \"possible\"\n\"\"\""
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\n\n\"\"\""
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"()))\") == \"impossible\"\nassert solution(\")))(\") == \"impossible\"\nassert solution(\")))))(\") == \"impossible\"\nassert solution(\"(((\") == \"possible\"\nassert solution(\"))(\") == \"possible\"\n\n\"\"\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\""
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"()))\") == \"impossible\"\nassert solution(\"(())())\") == \"possible\"\nassert solution(\"(()())()\") == \"possible\"\nassert solution(\"()())(\") == \"possible\"\nassert solution(\"((())())\") == \"possible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('()))') == 'possible'\nassert solution(')))(') == 'impossible'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()))\") == \"impossible\"\nassert solution(\")))(\") == \"impossible\"\nassert solution(\"()()))(\") == \"possible\"\nassert solution(\"((((()(\") == \"possible\"\n\"\"\""
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('()))') == 'possible'\nassert solution(')))(') == 'impossible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('()))') == 'possible'\nassert solution(')))(') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('()))') == 'possible'\nassert solution(')))(') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\") == \"1800\"\nassert solution(\"2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\") == \"impossible\"\n\nprint(solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\"))\nprint(solution(\"2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\"))\n\n-----Notes-----\nTime Complexity: O(N*M*(L+T+S)\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n') == '1800'\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Train:\n    def __init__(self, depart, arrive, delay):\n        self.depart = depart\n        self.arrive = arrive\n        self.delay = delay"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(expected_output)\nprint(str(output))\n\n\"\"\"\n\nfrom dataclasses import dataclass\nimport math\nfrom typing import List, Optional\n\nfrom icontract import require, ensure\n\n\n@dataclass(frozen=True)\nclass Times:\n    departure: int\n    arrival: int\n    duration: int\n\n\n@require(lambda station_count: station_count > 1)\n@require(lambda scheduled_trips: scheduled_trips > 0)\n@require(lambda scheduled_trips: scheduled_trips <= 10_000)\n@require(lambda scheduled_trips: sum(trip.duration for trip in scheduled_trips) <= 86400)\n@ensure(lambda result, times: result < times.departure)\n"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400') == '1800\\n'\nassert solution('2 2\\n1 1800 3600 1800\\n1 1900 3600 1600') == 'impossible'\n\"\"\"\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nfor _ in range(M):\n    s, t, d = map(int, sys.stdin.readline().split())\n    if s + d <= t:\n        print(t - (s + d))\n    else:\n        print('impossible')\n"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n') == '1800'\nassert solution('2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\\n') == 'impossible'\nassert solution('3 10\\n1 1200 14400 3600\\n1 1400 18000 3600\\n1 1900 9100 3600\\n1 2200 8100 3600\\n1 2300 9200 3600\\n1 3100 9300 3600\\n1 3200 8100 3600\\n1 3400 9300 3600\\n') == 'impossible'\n\n\"\"\"\n\nimport sys\n\nn, m = list(map(int, sys.stdin.readline().split()))\nschedules = [[] for _ in range(n)]\nfor _ in range(m):\n    x, s, t, l = list(map(int, sys.stdin.readline().split()))\n    schedules[x-1].append((s, t, l))\n\nbanned_schedule = set()\nbanned_schedule.add((0, 0))\n\ntime = 0\nreach_time = 0\ntargets = set()\nfor i in range(1, n):\n    for s, t, l in schedules[i-1]:\n        if (s, t, l) not in banned_schedule and (s, t, l) not in targets:\n            targets.add((s, t, l))\n            time = max(time, s)\n    for s, t, l in schedules[i]:\n        banned_schedule.add((s, t, l))\n        if (s, t, l) not in targets:\n            time = max(time, t)\n        else:\n            reach_time = max(reach_time, s)"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2 2\n1 1800 3600 1800\n1 1900 3600 1600\n\"\"\") == \"1800\"\n\nassert solution(\"\"\"2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n\"\"\") == \"1800\"\n\nassert solution(\"\"\"2 3\n1 1800 9000 1800\n1 1900 9200 1600\n1 2200 9400 1400\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"2 3\n1 1800 9010 1800\n1 1900 9200 1600\n1 2200 9400 1400\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"2 3\n1 1800 3600 1800\n1 1900 3600 1600\n1 2200 9400 1400\n\"\"\") == \"impossible\""
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\") == \"1800\"\nassert solution(\"2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\") == \"impossible\"\n\"\"\"\n\n\"\"\"\nTrain fares are $7$ for 2 stations, $7.5$ for 3 stations, $8$ for 4 stations, and $9$ for 5 stations.\n\"\"\"\n\nfrom typing import List\nfrom collections import namedtuple\nimport itertools\n\nStation = namedtuple(\"Station\", \"departure, arrival, delay\")"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400''') == '1800'\nassert solution('''2 2\n1 1800 3600 1800\n1 1900 3600 1600''') == 'impossible'\nassert solution('''2 2\n1 1800 3600 1800\n1 1900 3600 1600''') == 'impossible'\n\n'''\nYou are an entrepreneur who has built a company called MyMicroTrain. You are looking to increase your profits by selling electronic tickets for trains. To do this, you have a system of tickets that you sell to customers.\n\nYour business has a few different options for tickets:\n\na $5$ ticket which costs $15$\nb $25$ ticket which costs $45$\nc $60$ ticket which costs $75$\n\nYour tickets also have a $10$ discount for senior citizens.\n\nThe revenue for a single ticket of type a is $5$, and the revenue for a single ticket of type b is $25$, and for type c is $60$.\n\nThe revenue for senior citizens is 10% of the revenue for a single ticket of type a, and 12% of the revenue for a single ticket of type b, and 14% of the revenue for a single ticket of type c.\n\nYour company currently has $N$ (integer) people in the train and is selling $M$ (integer) tickets.\n\nHow much money will you make in the year if you are able to sell all tickets and receive no refunds?\n\n-----Input-----\n\nTwo integers N and M on a line.\n\n-----Output-----\n\nThe revenue you will earn.\n\n-----Examples-----\nSample input:\n\n3 3\nSample output:\n\n90\n\nSample input:\n\n3 5\nSample output:\n\n170\n\nSample input:\n\n3 5\na 25 45 60\nb 60 75 90\nc\nSample output:\n\n152\n\nSample input:\n\n1 3\na\nSample output:\n\n0\n\nSample input:\n\n1 2\nb\nSample output:\n\nimpossible\n\nSample input:\n\n2 4\na b\nSample output:\n\nimpossible\n\nSample input:\n\n3 5\na 25 45 60\nb 60 75 90\nc\nSample output:\n\n176\n'''\n"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\\n') == 'impossible'\nassert solution('2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n') == '1800'\n\"\"\"\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Station:\n    station_number: int\n    departure: int\n    arrival: int"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\") == \"1800\\n\"\nassert solution(\"2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\") == \"impossible\\n\"\nprint(solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\"))\nprint(solution(\"2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\"))\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2') == 'A1-B2 B1-A2 A3-B3'\nassert solution('2 3') == 'A1-B1 A2-C2 B2-C1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\\nA2-B3 B2-A3 A1-B1\\nA3-B1 B3-A1 A2-B2\\n\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1\\n\"\nprint(\"Teste passado com sucesso!\")"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n') == 'A1-B2 B1-A2 A3-B3\\nA2-B3 B2-A3 A1-B1\\nA3-B1 B3-A1 A2-B2'\nassert solution('2 3\\n') == 'A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1'\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\nassert solution(\"2 2\") == \"A1-B1 A2-B2 A3-A4 B3-B4 B4-A5 B5-A6\"\nassert solution(\"1 1\") == \"A1-A1\"\n\"\"\""
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n') == 'A1-B2 B1-A2 A3-B3\\nA2-B3 B2-A3 A1-B1\\nA3-B1 B3-A1 A2-B2\\n'\nassert solution('2 3\\n') == 'A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1\\n'\n\n\"\"\""
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\nassert solution(\"2 4\") == \"A1-C2 A2-B2 B1-C1\"\nassert solution(\"3 5\") == \"A1-B3 A2-C2 B1-A3 B2-C1 A3-B1\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\"\n\nsolution(input())\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\n\n\"\"\"\nimport unittest"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\n\"\"\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n..\\n..\") == \"7\"\nassert solution(\"4 4\\nX.XX\\nX..X\\n..X.\\n..XX\") == \"9\"\n\n\"\"\"\n\nr, c = map(int, stdin.readline().split())"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n..\\n..\\n\") == \"7\"\nassert solution(\"4 4\\nX.XX\\nX..X\\n..X.\\n..XX\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"2 2\\n\"\n    \".XX\\n\"\n    \"..X\\n\"\n    \"..X\\n\"\n    \"..XX\"\n) == \"7\"\nassert solution(\n    \"4 4\\n\"\n    \"X.XX\\n\"\n    \"X..X\\n\"\n    \"..X.\\n\"\n    \"..XX\"\n) == \"9\"\nassert solution(\n    \"4 4\\n\"\n    \"X.XX\\n\"\n    \"X..X\\n\"\n    \"..X.\\n\"\n    \"..XX\"\n) == \"9\"\nassert solution(\n    \"3 3\\n\"\n    \".X.\\n\"\n    \".XX\\n\"\n    \"X..\"\n) == \"4\"\nassert solution(\n    \"3 3\\n\"\n    \"X.X\\n\"\n    \"X..\"\n) == \"6\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\".XX\") == 1\nassert solution(\"X.XX\") == 3\nassert solution(\"X..X\") == 2\nassert solution(\"..X.\") == 1\n\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n..\\n..\\n') == '7'\n\"\"\""
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n..\\n..\") == \"7\"\nassert solution(\"4 4\\nX.XX\\nX..X\\n..X.\\n..XX\") == \"9\"\n\"\"\"\n\nfrom math import sqrt, floor\nfrom collections import deque"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n..\\n..') == '7'\nassert solution('4 4\\nX.XX\\nX..X\\n..X.\\n..XX') == '9'\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n..\\n..') == 7\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".X....XX...X\") == 4\nassert solution(\"..XX...X.X.\") == 5\n\"\"\""
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n..\\n..\") == 7\nassert solution(\"4 4\\nX.XX\\nX..X\\n..X.\\n..XX\") == 9\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 3 2 2 100\\n1 1 1 1 500\\n\") == '600'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n8 4 6 1 5 1\\n3 3 2 2 100\\n1 1 1 1 500\") == 100\nassert solution(\"8\\n1 1 1 1 500\\n1 1 1 1 100\\n6 0 8 1 1\\n3 3 2 2 100\") == -1\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2\n3 3 2 2 100\n1 1 1 1 500''') == '600'\n\nassert solution('''2\n2 0 2 1 100\n6 0 8 1 1''') == '100'\n\n\"\"\""
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 3 2 2 100\\n1 1 1 1 500\") == \"600\"\n\"\"\""
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 3 2 2 100\\n1 1 1 1 500\\n\") == 600"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n3 3 2 2 100\n1 1 1 1 500''') == '600'\n\"\"\""
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2\n3 3 2 2 100\n1 1 1 1 500''') == '600'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1') == '6'\nassert solution('2\\n3 3 2 2 100\\n1 1 1 1 500') == '600'\nassert solution('2\\n2 0 2 1 100\\n6 0 8 1 1') == '100'\nassert solution('2\\n2 0 2 1 100\\n6 0 8 1 1\\n1 1 1 1 500') == '100'\n'''\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 3 2 2 100\") == '600'\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 3 2 2 100\\n1 1 1 1 500\\n\") == \"600\"\nprint(\"Passed!\")\n\n\"\"\"\nimport math\nimport sys\nfrom collections import deque\nfrom collections import Counter\nimport itertools\nimport functools\nimport heapq\nfrom itertools import permutations, combinations, product, combinations_with_replacement, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, bisect_right\nfrom fractions import gcd\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('361') == 3\n\"\"\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(361) == 3\nassert solution(11) == 0\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('361') == '3'\nassert solution('11') == '0'\nassert solution('3814') == '0'\nassert solution('11') == '0'\nassert solution('11') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('123') == 3\n'''\n\nimport sys\n\nfrom collections import deque"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"361\") == \"3\"\nassert solution(\"11\") == \"0\"\nprint(solution(\"361\"))\nprint(solution(\"11\"))\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"361\") == 3\nassert solution(\"11\") == 0\n\"\"\"\n\nN = int(stdin.readline().rstrip())\nS = stdin.readline().rstrip()\n\ncount = 0\n\nfor i in range(0, len(S)-2):\n    if int(S[i:i+3]) % 3 == 0:\n        count += 1\nprint(count % (10**9 + 7))\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"361\") == 3\nassert solution(\"11\") == 0\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"361\") == 3\n\"\"\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('361') == 3\n\"\"\""
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('361') == 3\n\"\"\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\\n2 100\\n1 10\\n13 5\") == \"10\"\nassert solution(\"3 10\\n2 100\\n1 10\\n15 5\") == \"cancel road trip\"\nassert solution(\"3 10\\n2 100\\n1 10\\n16 5\") == \"cancel road trip\"\nassert solution(\"3 10\\n2 100\\n1 10\\n11 5\") == \"cancel road trip\"\nassert solution(\"3 10\\n2 100\\n1 10\\n16 5\") == \"cancel road trip\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 10') == '10'\nassert solution('2 100') == 'cancel road trip'"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 10\n2 100\n1 10\n11 5''') == '10'\n\n\"\"\"\n\n\n\"\"\"\n\"\"\"\n\u53ef\u4ee5\u7528greedy\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4fdd\u8bc1gas[i]\u7684\u7ef4\u62a4\n\"\"\"\n\"\"\"\n\"\"\"\nimport collections\nimport heapq"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n11 5') == '10'\nassert solution('3 10\\n2 100\\n1 10\\n13 5') == 'cancel road trip'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\\n2 100\\n1 10\\n11 5\") == \"10\"\nassert solution(\"3 10\\n2 100\\n1 10\\n13 5\") == \"cancel road trip\"\n\n-----Explanation-----\nTony has an unlimited tank of gas, and the cost to refill it is 0.\n\nHe can choose to refuels at the following gas stations:\n\nThe gas station at distance 1, which is the leftmost gas station, is the cheapest. He can fill his tank in this station, and his gas tank has reached 10 gallons. He can drive to the right and refill it at the next station, which is the cheapest too. The total tank capacity is 10 + 10 = 20.\n\nThe gas station at distance 2, which is the second gas station, is the cheapest. He can fill his tank in this station, and his gas tank has reached 110 gallons. He can drive to the right and refill it at the next station, which is the cheapest too. The total tank capacity is 110 + 10 = 120.\n\nThe gas station at distance 3, which is the third gas station, is the cheapest. He can fill his tank in this station, and his gas tank has reached 120 gallons. He can drive to the right and refill it at the next station, which is the cheapest too. The total tank capacity is 120 + 10 = 130.\n\nHe cannot fill his tank at the fourth gas station, where the cost to refill it is 100.\n\nThe minimum cost to travel to the rightmost gas station is 10 + 10 + 10 + 120 = 310.\n\n----Solution----\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\\n2 100\\n1 10\\n11 5\") == \"10\"\nassert solution(\"3 10\\n2 100\\n1 10\\n13 5\") == \"cancel road trip\"\nassert solution(\"2 10\\n1 10\\n11 5\") == \"cancel road trip\"\nassert solution(\"2 10\\n1 10\\n11 6\") == \"cancel road trip\"\nassert solution(\"1 10\\n11 6\") == \"cancel road trip\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n13 5') == '10'\nassert solution('3 10\\n2 100\\n1 10\\n12 5') == 'cancel road trip'\n\"\"\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 10\n2 100\n1 10\n11 5''') == '10'\nassert solution('''3 10\n2 100\n1 10\n13 5''') == 'cancel road trip'''\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'cancel road trip'\nassert solution('3 10\\n2 100\\n1 10\\n13 5') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 9\\n2 8\\n1 1\\n3 4\\n5 100') == '1 8 9 9 100 101 108 109 109'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 9\\n2 8\\n1 1\\n3 4\\n5 100\") == '1 8 9 9 100 101 108 109 109'\nassert solution(\"5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8\") == '0 7 8 11 15 16 19'\n\n----Problem----\nYou are the creator and head of a detective agency tasked with finding out if any criminals were involved in the crime, and all the information you have is the combined reports from all the surrounding towns. You also have access to a network of towns and the crimes they commit, which are stored in the form of an adjacency list. Each node in this list contains the ID of the town and the crimes committed by the town during the last 24 hours (the IDs of the towns are the indices of the adjacency list, therefore they are in the range of $[0, n-1]$).\n\nYou suspect that the most likely culprit is the town with ID 0, and you want to narrow the search down to the most likely group of towns by performing a breadth-first search of the graph. You have access to an API which can find the number of shortest paths between two towns.\n\nThe API can find the number of shortest paths between two towns in a graph, and it returns an integer $p$ which is the number of shortest paths connecting the two towns.\n\nGiven $G$, a graph represented as an adjacency list, and $x$, $y$ and $p$, return the maximum number of towns that can be visited if the starting point is the town with ID 0 and the destination is the town with ID $y$.\n\n-----Solution-----\nclass Solution:\n    def solve(self, G, x, y, p):\n        pass\n\nassert Solution().solve(\"4 9\\n2 8\\n1 1\\n3 4\\n5 100\", 2, 8, 8) == 3\nassert Solution().solve(\"5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8\", 2, 8, 8) == 4\n"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 9\\n2 8\\n1 1\\n3 4\\n5 100\") == '1 8 9 9 100 101 108 109 109'\n\"\"\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 9\\n2 8\\n1 1\\n3 4\\n5 100') == '1 8 9 9 100 101 108 109 109'\nassert solution('5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8') == '0 7 8 11 15 16 19'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 9\\n2 8\\n1 1\\n3 4\\n5 100') == '1 8 9 9 100 101 108 109 109'\nassert solution('5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8') == '0 7 8 11 15 16 19'\nassert solution('4 9\\n2 8\\n1 1\\n3 4\\n5 100') == '1 8 9 9 100 101 108 109 109'\nassert solution('5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8') == '0 7 8 11 15 16 19'\n\n\"\"\"\nfrom __future__ import annotations\n\nimport math\nfrom functools import lru_cache\nfrom itertools import accumulate\nfrom math import log\nfrom typing import Callable, Dict, List, Tuple\n\nimport numpy\nfrom scipy.special import comb\n"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 9\n2 8\n1 1\n3 4\n5 100''') == '1 8 9 9 100 101 108 109 109'\n\n-----Problem-----\nYou are a thief who has been chosen to steal jewels from the Grand Museum of the Universe. \nThe museum has numerous jewel vaults all around the globe. There are also many thieves in the world. \nEach vault has a different combination of jewels, and the combination is random for each vault. \nHowever, there is a rule that if you steal jewels from a vault, you cannot steal from the same vault again for the rest of the day. \nYou must wait until the end of the day to steal from the same vault again.\n\nYour plan is to steal jewels from every vault of the museum, but you know that you cannot steal from the same vault for the rest of the day. \nAlso, you know you cannot steal from a vault that contains less than 4 jewels. \nThus, your goal is to steal the most valuable combination of jewels. \nThus, given the number of available knapsacks and the maximum size of knapsack for each, \ndetermine the maximum value of jewels you can steal.\n\n-----Solution-----\nImplement a function solution(stdin) which, given two input parameters:\n\nk - the number of knapsacks available to you, and\nn - the maximum size of knapsacks,\nreturns a string containing n space-separated integers, \neach representing the maximum value of jewels that can be stolen from a knapsack of size k.\n\nEach line of stdin corresponds to a single test case. \nThe first line of the input contains two space-separated integers k and n, \nrepresenting the number of knapsacks and the maximum size of knapsacks available to you. \nThe following lines each contain two space-separated integers s and v, \nrepresenting the size and value of a jewel, respectively. \nNote that each line represents a jewel, and all jewels are unique, so there are no repeated jewels.\n\n-----Tests-----\nsolution.test('input', 'output')\n\n-----Input-----\n4 9\n2 8\n1 1\n3 4\n5 100\n\n-----Output-----\n1 8 9 9 100 101 108 109 109\n\n-----Input-----\n5 7\n2 2\n3 8\n2 7\n2 4\n3 8\n\n-----Output-----\n0 7 8 11 15 16 19\n\"\"\""
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 9\\n1 1\\n3 4\\n5 100\") == '1 8 9 9 100 101 108 109 109'\n\nprint(solution(stdin))"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n') == '2'\nassert solution('2\\n1') == '1'\n"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 9\\n2 8\\n1 1\\n3 4\\n5 100\\n') == '1 8 9 9 100 101 108 109 109'\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 9\\n2 8\\n1 1\\n3 4\\n5 100') == '1 8 9 9 100 101 108 109 109'\n\"\"\"\n\n\"\"\"\n\u6c92\u52a0\u8a3b\u89e3\u7684\u7b54\u6848:\nn, k = input().split()\nn, k = int(n), int(k)\njewels = []\nfor _ in range(n):\n    jewels.append(list(map(int, input().split())))\njewels.sort(key = lambda x: x[0])\n\nweight = [0 for _ in range(k + 1)]\nvalue = [0 for _ in range(k + 1)]\n\nfor i in range(n):\n    for j in range(1, k + 1):\n        if jewels[i][0] <= j:\n            weight[j] = max(jewels[i][0], weight[j - jewels[i][0]] + jewels[i][1])\n            value[j] = max(jewels[i][1], value[j - jewels[i][0]] + jewels[i][1])\n        else:\n            weight[j] = weight[j]\n            value[j] = value[j]\n\nprint(*value[-1:], sep ='')\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"1\"\nprint(solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\"))"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3''') == '1'\nassert solution('''1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n2 2 1''') == '3'\nassert solution('''1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n2 2 1''') == '3'\nassert solution('''1 2 2\n0 0 1\n2 2\n-2 2\n2 -2\n0 -2\n1 0\n1 1\n0 0 1\n0 -1\n1 0\n0 1\n1 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n-1 1\n2 -1\n0 1\n-1 1\n0 0 1\n0 0 1\n-1 1\n-1 1\n0 1\n-1 1\n0 1\n-1 1\n0 1\n-1 1\n0 0 1\n0 0 1\n-1 1\n-1 1\n0 1\n-1 1\n0 0 1\n0 0 1\n-1 1\n0 1\n-1 1\n0 0 1\n0 0 1\n0 1\n-1 1\n-1 1\n0 0 1\n0 0 1\n-1 1\n-1 1\n2 -1\n0 1\n-1 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n-1 1\n-1 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n-1 1\n0 0 1\n0 0 1\n-1 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n-1 1\n-1 1\n0 0 1\n-1 1\n-1 1\n0 0 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n-1 1\n0 0 1\n0 0 1\n-1 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n-1 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n-1 1\n0 0 1\n0 0 1\n-1 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n-1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"1\""
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"1\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"3\"\n\"\"\""
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"1\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"3\"\nassert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"3\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\\n3 3\\n-3 3\") == \"6\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\\n3 3\\n-3 3\") == \"6\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3') == '3'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"1\"\n\"\"\""
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == '3'\nassert solution('''\n3 10 2\n0 0 1\n5 6\n-10 -10\n0 0 1\n5 7\n-5 -5\n0 0 1\n2 5\n-1 5\n''') == '3'\n\nprint('Success')\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"1\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10000\\n1\\n1\\n1\\n1\\n1\") == \"4\\n4\\n2\\n2\\n0\"\n\n\"\"\"\n\nimport sys\n\nN, S = list(map(int, sys.stdin.readline().split()))\nA = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 10000\\n1\\n1\\n1\\n1\\n1\") == \"4\\n4\\n2\\n2\\n0\"\n\n-----Test Data-----\nSample Test Data 1\n\nSample Input 1\n5 10000\n1\n1\n1\n1\n1\n\nSample Output 1\n4\n4\n2\n2\n0\n\nSample Test Data 2\n\nSample Input 2\n5 9\n1\n1\n10\n1\n9\n\nSample Output 2\n2\n0\n0\n2\n0\n\n-----Solution-----\n\"\"\"\n\n\"\"\"\nFor the first sample, the longest subsequence which starts with 1 has the following elements:\n1, 1, 1, 1, 1\nSo the longest subsequence starting with 1 is of length 4, which is the answer for the first line of the output.\n\nFor the second sample, no subsequence starting with 1 exists. The subsequences starting with 10 have the following elements:\n10, 10, 10, 10\nThe longest subsequence starting with 10 is of length 4, which is the answer for the second line of the output.\n\"\"\"\n\n\"\"\"\nFor the first sample, the longest subsequence which starts with 1 has the following elements:\n1, 1, 1, 1, 1\nSo the longest subsequence starting with 1 is of length 4, which is the answer for the first line of the output.\n\nFor the second sample, no subsequence starting with 1 exists. The subsequences starting with 10 have the following elements:\n10, 10, 10, 10\nThe longest subsequence starting with 10 is of length 4, which is the answer for the second line of the output.\n\"\"\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10000\\n1\\n1\\n1\\n1\\n1\") == \"4\\n4\\n2\\n2\\n0\"\nassert solution(\"5 9\\n1\\n1\\n10\\n1\\n9\") == \"2\\n0\\n0\\n2\\n0\"\n\"\"\""
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5 10000\n1\n1\n1\n1\n1\"\"\") == \"\"\"4\n4\n2\n2\n0\"\"\"\n\nassert solution(\"\"\"5 9\n1\n1\n10\n1\n9\"\"\") == \"\"\"2\n0\n0\n2\n0\"\"\"\n\nassert solution(\"\"\"5 11\n1\n1\n10\n1\n9\"\"\") == \"\"\"2\n0\n0\n2\n0\"\"\"\n\nassert solution(\"\"\"3 1\n1\n1\n1\"\"\") == \"\"\"2\n0\n0\n0\"\"\"\n\nassert solution(\"\"\"5 10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\"\"\") == \"\"\"3\n1\n1\n0\n2\n0\"\"\""
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5 10000\n1\n1\n1\n1\n1\"\"\") == \"\"\"4\n4\n2\n2\n0\"\"\"\n\nassert solution(\"\"\"5 9\n1\n1\n10\n1\n9\"\"\") == \"\"\"2\n0\n0\n2\n0\"\"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n4 5 6\\n7 8 9') == '3\\n0\\n0\\n2\\n0'\n\nimport sys\ninput = sys.stdin.readline\n\nfor line in sys.stdin:\n    print(line.split()[0])\n\nsys.stdout.flush()\n\nimport sys"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1') == '4\\n4\\n2\\n2\\n0\\n'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9') == '2\\n0\\n0\\n2\\n0\\n0\\n'\nassert solution('6 10000\\n1\\n1\\n1\\n1\\n1\\n1') == '4\\n4\\n2\\n2\\n0\\n0\\n0\\n'\nassert solution('1 1\\n1') == '0\\n0\\n'\nassert solution('5 10000\\n1\\n1\\n10\\n1\\n9') == '2\\n0\\n0\\n2\\n0\\n0\\n'\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10000\\n1\\n1\\n1\\n1\\n1\") == \"4\\n4\\n2\\n2\\n0\"\nassert solution(\"5 9\\n1\\n1\\n10\\n1\\n9\") == \"2\\n0\\n0\\n2\\n0\"\nassert solution(\"5 10000\\n10000\\n10000\\n10000\\n10000\") == \"4\\n4\\n4\\n4\\n4\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5 10000\n1\n1\n1\n1\n1\"\"\") == \"4\\n4\\n2\\n2\\n0\\n\"\nassert solution(\"\"\"5 9\n1\n1\n10\n1\n9\"\"\") == \"2\\n0\\n0\\n2\\n0\\n\"\n\nprint(\"Success\")"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"kava\") == \"DA\"\nassert solution(\"ne\") == \"NE\"\n\nassert solution(\"ne\") == \"DA\"\nassert solution(\"ak\") == \"DA\"\nassert solution(\"n\") == \"DA\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ne') == 'NE'\nassert solution('kava') == 'DA'\n\"\"\"\n\nn = int(stdin.readline().strip())\ns = stdin.readline().strip()"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ne') == 'NE'\nassert solution('kava') == 'DA'\n\nprint(solution(stdin.readlines()[1]))\n\"\"\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ne') == 'NE'\nassert solution('kava') == 'DA'\nassert solution('akav') == 'DA'\nassert solution('aan') == 'DA'\nassert solution('n') == 'NE'"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'DA'\nassert solution('ne') == 'NE'\nassert solution('kava') == 'DA'\nassert solution('n') == 'n'\n\nassert solution('ne') == 'NE'\n"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ne') == 'NE'\nassert solution('kava') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ne') == 'NE'\nassert solution('kava') == 'DA'\nassert solution('n') == 'n'\nassert solution('a') == 'a'\n\"\"\""
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\nimport sys\nn = int(sys.stdin.readline())\ns = sys.stdin.readline().strip()\ns = list(s)\n\nprint(\"DA\" if s.count(\"n\") >= len(s)//2 else \"NE\")"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1) == \"DA\"\nassert solution(2) == \"NE\"\n\"\"\"\n\nfrom operator import itemgetter"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"kava\") == \"DA\""
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\") == \"2\\n0\\n2\\n1\"\nassert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\") == \"0\\n0\\n3\\n2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\") == \"2\\n0\\n2\\n1\"\nassert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\") == \"0\\n0\\n3\\n2\"\n\"\"\"\n\nimport sys\nimport time\nfrom typing import Dict, List, Set, Tuple\n\nsys.stdin = open(\"SWEA/inputs/5200_input.txt\", \"r\")\nstart = time.time()"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n\") == \"2\\n0\\n2\\n1\\n\"\nassert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n\") == \"0\\n0\\n3\\n2\\n\"\nassert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n\") == \"0\\n0\\n3\\n2\\n\"\n\n\"\"\"\n\n\nfrom typing import List, Tuple\nimport math\n\nn, m, q = [int(s) for s in stdin.split()]\np = [[int(s) for s in stdin.split()] for _ in range(m)]\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n\") == \"2\\n0\\n2\\n1\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n\"\"\""
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n') == '2\\n0\\n2\\n1\\n'\n\n\"\"\"\n\n\"\"\"\n\u8fd9\u9053\u9898\u505a\u4e86\u597d\u51e0\u904d\u4e86\uff0c\u6ca1\u60f3\u5230\u80af\u5b9a\u8981\u628a\u8fd9\u4e2a\u4e8b\u60c5\u5168\u90fd\u63a5\u8d77\u6765\u770b\uff0c\u5982\u679c\u78b0\u5230\u4e86\u4e0d\u662f\u90a3\u4e2a\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u4e14\u6709\u4e24\u4e2a\u8282\u70b9\u7684\u60c5\u51b5\u90a3\u5c31\u5f88\u725b\u903c\u3002\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u56e0\u4e3a\u4f60\u628a1\u632a\u52302\uff0c\u7b2c\u4e00\u4e2a1\u53ea\u80fd\u632a\u52303\uff0c\u7b2c\u4e8c\u4e2a1\u53ea\u80fd\u632a\u52304\uff0c\u6700\u540e\u76842\u53ea\u80fd\u632a\u52304\uff0c\u90a3\u4e48\u5c31\u662f\u8bf4\u67092\u79cd\u65b9\u6cd5\u3002\n\u5177\u4f53\u5c31\u662f\uff0c\u4f60\u628a2\u632a\u52301\uff0c\u7b2c\u4e00\u4e2a2\u53ea\u80fd\u632a\u52303\uff0c\u7b2c\u4e8c\u4e2a2\u53ea\u80fd\u632a\u52304\uff0c\u6700\u540e\u76841\u53ea\u80fd\u632a\u52304\uff0c\u90a3\u4e48\u5c31\u662f\u8bf4\u67092\u79cd\u65b9\u6cd5\u3002\n\n\u5982\u679c\u4f60\u60f3\u628a3\u632a\u52302\uff0c\u7b2c\u4e00\u4e2a3\u53ea\u80fd\u632a\u52301\uff0c\u7b2c\u4e8c\u4e2a3\u53ea\u80fd\u632a\u52304\uff0c\u6700\u540e\u76842\u53ea\u80fd\u632a\u52304\uff0c\u90a3\u4e48\u5c31\u662f\u8bf4\u67092\u79cd\u65b9\u6cd5\u3002\n\n\u5982\u679c\u4f60\u60f3\u628a4\u632a\u52303\uff0c\u7b2c\u4e00\u4e2a4\u53ea\u80fd\u632a\u52301\uff0c\u7b2c\u4e8c\u4e2a4\u53ea\u80fd\u632a\u52302\uff0c\u6700\u540e\u76843\u53ea\u80fd\u632a\u52302\uff0c\u90a3\u4e48\u5c31\u662f\u8bf4\u67092\u79cd\u65b9\u6cd5\u3002\n\n\"\"\"\n\nimport math\n\nstdin = open('./in.txt')\nn, m, q = [int(i) for i in stdin.readline().split()]\nmemo = [[0] * (n + 1) for _ in range(n + 1)]"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1 1') == '2'\nassert solution('1 1\\n1 2') == '0'\nassert solution('2 1\\n1 1') == '0'\nassert solution('2 2\\n1 1') == '1'\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n\") == '2\\n0\\n2\\n1\\n'\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n\") == \"2\\n0\\n2\\n1\\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n\"\"\") == '1'\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\\n') == '2'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\") == 2\n\"\"\"\nfrom collections import defaultdict\n\nn, m = [int(x) for x in input().split()]\nd = defaultdict(list)\nfor _ in range(n):\n    a, b, c = [int(x) for x in input().split()]\n    d[a].append((b, c))\nans = 0\nfor _ in range(m):\n    s, f, t = [int(x) for x in input().split()]\n    if s == f:\n        continue\n    ans += 1\n    if t < d[s][0][1]:\n        ans -= 1\n    for i in range(len(d[s])):\n        if d[s][i][0] == f:\n            if t < d[s][i][1]:\n                ans += 1\n            d[s].pop(i)\n            break\n    else:\n        ans -= 1\nprint(ans)\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(['2 2', '1 1', '0 1', '1 0', '1 2 1', '2 1 3']) == '1'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 1\\n') == '2'\nassert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 1\\n') == '1'\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 1\\n2 2 3\") == '1'\nassert solution(\"4 4\\n1 3\\n1 1 2\\n1 2 1\\n1 1 3\\n2 3 1\\n2 2 1\") == '3'\nassert solution(\"4 4\\n1 3\\n1 1 2\\n1 2 1\\n1 1 3\\n2 3 1\\n2 2 1\\n1 2 1\") == '2'\nassert solution(\"4 4\\n1 2 3\\n1 1 2\\n1 2 1\\n1 1 3\\n2 3 1\\n2 2 1\\n1 2 1\") == '2'\nassert solution(\"4 4\\n1 2 3\\n1 1 2\\n1 2 1\\n1 1 3\\n2 3 1\\n2 2 1\\n1 2 1\") == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\\n\") == \"2\"\nassert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\\n\") == \"1\""
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 1') == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\") == \"2\"\n\n\"\"\"\n\nimport os\nimport sys\nimport json\nfrom datetime import datetime"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\") == 2\n\"\"\"\n\nfrom collections import defaultdict\n\nn, m = map(int, input().split())\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1') == '40.500000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\n\"\"\"\n\nimport sys\nimport math\nimport re\nfrom typing import Match\n\nsys.setrecursionlimit(10 ** 6)"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 15\\n4 10 1\\nC 6 1\") == \"40.5\""
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 15\\n4 10 1\\n6 1') == '40.500000000'\nassert solution('3 15\\n4 10 1\\n6 1\\n9 3') == '49.000000000'\n\"\"\"\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 15\\nD 4 10 1\\nC 6 1\\nC 9 3\") == \"49.0\"\nprint(\"PASSED\")\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 15\nD 4 10 1\nC 6 1''') == '40.500000000'\nassert solution('''3 15\nD 4 10 1\nC 6 1\nC 9 3''') == '49.000000000'\n\n'''\n4 5\nC 5 1\nD 6 1\nC 7 3\nD 8 1\n'''\n\nassert solution('''2 10000\nC 2 1\nD 3 1\n''') == '9999.5'\nassert solution('''2 10000\nC 2 1\nD 3 1\nC 4 2\n''') == '1043.5'\nassert solution('''2 10000\nD 3 1\nC 4 2\nD 5 1\n''') == '9945.5'\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 15\\n4 10 1\\n6 1') == '40.5'\nassert solution('3 15\\n4 10 1\\n6 1\\n9 3') == '49.0'\nassert solution('1 5\\n1 2\\n1 3') == 'Impossible'"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 15\nD 4 10 1\nC 6 1\n\"\"\") == \"40.5\"\nassert solution(\"\"\"\n3 15\nD 4 10 1\nC 6 1\nC 9 3\n\"\"\") == \"49\"\n\"\"\"\n\nimport sys\n\ndishes = {(0, 0, 0): 0}\n\nfor line in sys.stdin.readlines():\n    line = line.split()\n    if line[0] == \"D\":\n        weight = int(line[1])\n        tastiness = int(line[2])\n        decay = int(line[3])\n        dishes[weight, tastiness, decay] = sum(dishes.get((weight, tastiness, decay), 0)\n                                              for weight, tastiness, decay in dishes.keys()\n                                              if weight < weight) + tastiness\n    elif line[0] == \"C\":\n        tastiness = int(line[1])\n        decay = int(line[2])\n        dishes[0, tastiness, decay] = sum(dishes.get((weight, tastiness, decay), 0)\n                                          for weight, tastiness, decay in dishes.keys()\n                                          if weight == 0) + tastiness\n\nprint(sum(dishes.get((weight, tastiness, decay), 0)\n        for weight, tastiness, decay in dishes.keys()))\n\n\"\"\"\n\nimport sys\n\ndishes = {(0, 0, 0): 0}\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2 15\nD 4 10 1\nC 6 1\nC 9 3\"\"\") == \"49.0\"\n\nassert solution(\"\"\"3 15\nD 4 10 1\nC 6 1\nC 9 3\"\"\") == \"impossible\"\n\n\"\"\"\ninput:\n3 15\nD 4 10 1\nC 6 1\nC 9 3\n\noutput:\n49.0\n\ninput:\n3 15\nD 4 10 1\nC 6 1\nC 9 3\n\noutput:\nimpossible\n\"\"\"\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 15\nD 4 10 1\nC 6 1\nC 9 3''') == '49.0'\n\nassert solution('''2 15\nD 4 10 1\nC 6 1\nC 9 3''') == 'impossible'\n\nassert solution('''2 15\nD 4 10 1\nC 6 1\nC 9 3''') == 'impossible'\n\nassert solution('''2 15\nD 4 10 1\nC 6 1\nD 4 8 1\nD 6 10 1\nC 9 3''') == '41.83333333'\n\nassert solution('''2 15\nD 4 10 1\nD 6 8 1\nC 9 3''') == '41.83333333'"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 15\\nD 4 10 1\\nC 6 1\\nC 9 3\") == \"49.0\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'fail'\nassert solution('4\\na 1 2 4\\na 1 3\\na 1 4\\na 1 5\\na 1 6\\na 1 7\\na 1 8\\na 1 9\\na 1 10\\na 1 11\\na 1 12\\na 1 13\\na 1 14\\na 1 15\\na 1 16\\na 1 17\\na 1 18\\na 1 19\\na 1 20\\na 1 21\\na 1 22\\na 1 23\\na 1 24\\na 1 25\\na 1 26\\na 1 27\\na 1 28\\na 1 29\\na 1 30\\na 1 31\\na 1 32\\na 1 33\\na 1 34\\na 1 35\\na 1 36\\na 1 37\\na 1 38\\na 1 39\\na 1 40\\na 1 41\\na 1 42\\na 1 43\\na 1 44\\na 1 45\\na 1 46\\na 1 47\\na 1 48\\na 1 49\\na 1 50\\na 1 51\\na 1 52\\na 1 53\\na 1 54\\na 1 55\\na 1 56\\na 1 57\\na 1 58\\na 1 59\\na 1 60\\na 1 61\\na 1 62\\na 1 63\\na 1 64\\na 1 65\\na 1 66\\na 1 67\\na 1 68\\na 1 69\\na 1 70\\na 1 71\\na 1 72\\na 1 73\\na 1 74\\na 1 75\\na 1 76\\na 1 77\\na 1 78\\na 1 79\\na 1 80\\na 1 81\\na 1 82\\na 1 83\\na 1 84\\na 1 85\\na 1 86\\na 1 87\\na 1 88\\na 1 89\\na 1 90\\na 1 91\\na 1 92\\na 1 93\\na 1 94\\na 1 95\\na 1 96\\na 1 97\\na 1 98\\na 1 99\\na 1 100\\na 1 101\\na 1 102\\na 1 103\\na 1 104\\na 1 105\\na 1 106\\na 1 107\\na 1 108\\na 1 109\\na 1 110\\na 1 111\\na 1 112\\na 1 113\\na 1 114\\na 1 115\\na 1 116\\na 1 117\\na 1 118\\na 1 119\\na 1 120\\na 1 121\\na 1 122\\na 1 123\\na 1 124\\na 1 125\\na 1 126\\na 1 127\\na 1 128\\na 1 129\\na 1 130\\na 1 131\\na 1 132\\na 1 133\\na 1 134\\na 1 135\\na 1 136\\na 1 137\\na 1 138\\na 1 139\\na 1 140\\na 1 141\\na 1 142\\na 1 143\\na 1 144\\na 1 145\\na 1 146\\na 1 147\\na 1 148\\na 1 149\\na 1 150\\na 1 151\\na 1 152\\na 1 153\\na 1 154\\na 1 155\\na 1 156\\na 1 157\\na 1 158\\na 1 159\\na 1 160\\na 1 161\\na 1 162\\na 1 163\\na 1 164\\na 1 165\\na 1 166\\na 1 167\\na 1 168\\na 1 169\\na 1 170\\na 1 171\\na 1 172\\na 1 173\\na 1 174\\na 1 175\\na 1 176\\na 1 177\\na 1 178\\na 1 179\\na 1 180\\na 1 181\\na 1 182\\na 1 183\\na 1 184\\na 1 185\\na 1 186\\na 1 187\\na 1 188\\na 1 189\\na 1 190\\na 1 191\\na 1 192\\na 1 193\\na 1 194\\na 1 195\\na 1 196\\na 1 197\\na 1 198\\na 1 199\\na 1 200\\na 1 201\\na 1 202\\na 1 203\\na 1 204\\na 1 205\\na 1 206\\na 1 207\\na 1 208\\na 1 209\\na 1 210\\na 1 211\\na 1 212\\na 1 213\\na 1 214\\na 1 215\\na 1 216\\na 1 217\\na 1 218\\na 1 219\\na 1 220\\na 1 221\\na 1 222\\na 1 223\\na 1 224\\na 1 225\\na 1 226\\na 1 227\\na 1 228\\na 1 229\\na 1 230\\na 1 231\\na 1 232\\na 1 233\\na 1 234\\na 1 235\\na 1 236\\na 1 237\\na 1 238\\na 1 239\\na 1 240\\na 1 241\\na 1 242\\na 1 243\\na 1 244\\na 1 245\\na 1 246\\na 1 247\\na 1 248\\na 1 249\\na 1 250\\na 1 251\\na 1 252\\na 1 253\\na 1 254\\na 1 255\\na 1 256\\na 1 257\\na 1 258\\na 1 259\\na 1 260\\na 1 261\\na 1 262\\na 1 263\\na 1 264\\na 1 265\\na 1 266\\na 1 267\\na 1 268\\na 1 269\\na 1 270\\na 1 271\\na 1 272\\na 1 273\\na 1 274\\na 1 275\\na 1 276\\na 1 277\\na 1 278\\na 1 279\\na 1 280\\na 1 281\\na 1 282\\na 1 283\\na 1 284\\na 1 285\\na 1 286\\na 1 287\\na 1 288\\na 1 289\\na 1 290\\na 1 291\\na 1 292\\na 1 293\\na 1 294\\na 1 295\\na 1 296\\na 1 297\\na 1 298\\na 1 299\\na 1 300\\na 1 301\\na 1 302\\na 1 303\\na 1 304\\na 1 305\\na 1 306\\na 1 307\\na 1 308\\na 1 309\\na 1 310\\na 1 311\\na 1 312\\na 1 313\\na 1 314\\na 1 315\\na 1 316\\na 1 317\\na 1 318\\na 1 319\\na 1 320"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7''') == '5 4 9 3 1 10 7 6 2'\nassert solution('''10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7''') == 'fail'\n\nprint('Successfully solved!')\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == '5 4 9 3 1 10 7 6 2'\nassert solution('10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == 'fail'\n\n'''\n'''\nimport numpy\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"fail\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10\\n\\na 2 10 3\\n\\nb 1 6\\n\\nc 2 1 5\\n\\nd 1 9\\n\\ne 1 4\\n\\nf 1 2\\n\\ng 2 6 8\\n\\nh 0\\n\\ni 1 3\\n\\nj 1 7\\n\") == \"fail\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a\\n1') == '1'\nassert solution('a\\n1\\nb\\n2') == '1 2'\nassert solution('a\\n1\\nb\\n2\\nc\\n3') == '1 2 3'\n\nassert solution('a\\n1\\nb\\n2\\nc\\n3\\n') == '1 2 3'\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\n\\ni 1 3\\nj 1 7\\nSample Input 2:\") == \"fail\"\n\n-----Problem-----\n\n\"\"\"\n\nnumber_of_songs = int(stdin.readline())\nsong_dictionary = {}\nfor i in range(number_of_songs):\n    artist_name, number_of_songs_after = stdin.readline().strip().split()\n    number_of_songs_after = int(number_of_songs_after)\n    song_dictionary[artist_name] = number_of_songs_after"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == '5 4 9 3 1 10 7 6 2'\nassert solution('a 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == 'fail'"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\na\\n2\\n10\\n3\\nb\\n1\\n6\\nc\\n2\\n1\\n5\\nd\\n1\\n9\\ne\\n1\\n4\\nf\\n1\\n2\\ng\\n2\\n6\\n8\\nh\\n0\\ni\\n1\\n3\\nj\\n1') == '5 4 9 3 1 10 7 6 2'\n\n\"\"\""
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(    '10\\n'\n                    'a 2 10 3\\n'\n                    'b 1 6\\n'\n                    'c 2 1 5\\n'\n                    'd 1 9\\n'\n                    'e 1 4\\n'\n                    'f 1 2\\n'\n                    'g 2 6 8\\n'\n                    'h 0\\n'\n                    'i 1 3\\n'\n                    'j 1 7') == '5 4 9 3 1 10 7 6 2'\nassert solution(    '6\\n'\n                    'a 3 2\\n'\n                    'a 2 2\\n'\n                    'a 1 3\\n'\n                    'a 1 2\\n'\n                    'b 3 1\\n'\n                    'b 2 3\\n'\n                    'c 1 1\\n'\n                    'c 1 2') == 'fail'\n\"\"\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a\\n1') == 'a'\nassert solution('a\\n2') == 'a'\nassert solution('a\\n3') == 'a'\nassert solution('a\\n10') == 'a'\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('00:00\\n01:01') == '3\\n00:00\\n01:01\\n01:01'\nassert solution('00:08\\n00:00') == '3\\n00:08\\n00:09\\n00:00'\nprint(solution('00:00\\n01:01'))\nprint(solution('00:08\\n00:00'))\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"00:08\") == \"3\"\nassert solution(\"00:08\") == \"3\"\nassert solution(\"00:08\") == \"3\"\nassert solution(\"00:08\") == \"3\"\nassert solution(\"00:08\") == \"3\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"00:00\") == \"1\"\nassert solution(\"01:00\") == \"0\"\nassert solution(\"01:01\") == \"1\""
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"00:00\\n01:01\") == \"3\\n00:00\\n01:00\\n01:01\"\n\"\"\"\n\nstdin = open(0).read().splitlines()\n\norig_time = stdin[0]\ncurr_time = stdin[1]\n\nclocks = {}\nfor i in range(24):\n    for j in range(60):\n        clock = str(i) + \":\" + str(j)\n        clocks[clock] = False"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"00:08\") == \"3\"\nassert solution(\"00:00\") == \"3\"\nassert solution(\"00:08\") == \"3\"\n\"\"\""
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__\n    ) == '''3\n00:00\n01:00\n01:01\n'''\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('00:00') == '0'\nassert solution('00:00') == '9'\nassert solution('01:01') == '0'\nassert solution('01:01') == '9'\nassert solution('00:08') == '8'\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"00:08\") == \"3\"\n\"\"\""
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"00:08\"\n) == \"3\"\nassert solution(\n\"00:00\"\n) == \"3\"\nassert solution(\n\"01:01\"\n) == \"3\"\n\nSample Input 3:\n00:0\n01:1\nSample Output 3:\n2\n00:00\n01:01\n\nSample Input 4:\n01:1\n01:0\nSample Output 4:\n3\n01:01\n01:00\n01:02\n\"\"\""
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(()\") == \"4,8:8,8:\", \"Pair 1\"\nassert solution(\")()())\") == \"4,8:8,8:8:4,4:4,4:\", \"Pair 2\"\nassert solution(\"()))((()\") == \"4,4:4,4:8:8,8:\", \"Pair 3\"\nassert solution(\"(((())\") == \"4,8:8,8:8:8,8:8,4,4:4,4:4,4:\", \"Pair 4\"\n\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Set, Optional\nfrom collections import deque\n"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"(())\") == \"4,8:8,8:\", \"Test 1\"\nassert solution(\"(())\") == \"4,4:\", \"Test 2\"\nassert solution(\"(()(()))\") == \"2,9:9,7:9:\", \"Test 3\"\n\"\"\""
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"(())\") == \"4,8:8,8:\", \"First\"\nassert solution(\"()\") == \"4,4:\", \"Second\"\nassert solution(\"(())()\") == \"4,8:8,8:4,4:\", \"Third\"\nprint('The local tests are done. Click on \"Check\" for more details.')\n\"\"\"\n\nfrom collections import namedtuple\n\nBracket = namedtuple('Bracket', ['start', 'end'])\n"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()\") == \"4,4:\"\nassert solution(\"(()))\") == \"4,5:5,5:5\"\nassert solution(\"(()))(())\") == \"4,5:5,5:5,6,6:6,6:6,6:6\"\nassert solution(\"()(()(()))\") == \"4,4:4,4:4,4,8:8,8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(()\") == \"4,8:8,8:\", \"First\"\nassert solution(\"(())\") == \"4,4:\", \"Second\"\nassert solution(\"()()\") == \"4,4:\", \"Third\"\n\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[len(self.items) - 1]\n\n    def size(self):\n        return len(self.items)"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('()') == '4,4:', 'WRONG STRING'\nassert solution('(())') == '4,8:8,8:', 'WRONG STRING'\n\n-----Solution-----\nFor each opening bracket, find its corresponding closing bracket. The header of the longest closing bracket will be the header of the innermost opening bracket.\n\nEx: '(()())'\n        ^\n        |\n        1\n        ^\n        |\n        1\n\n    [(())())]\n       ^\n       |\n       1\n       ^\n       |\n       1\n\nEx: '(())()'\n        ^\n        |\n        1\n        ^\n        |\n        1\n\nWe want to take the longest closing bracket, because that is the one that is most 'inner' in the parenthesis.\n\nO(n) time, O(n) space\n\n'''\nimport unittest\n\nclass Solution:\n    def solve(self, stdin):\n        stack = []\n        string = ''\n        for i, char in enumerate(stdin):\n            if char == '(':\n                stack.append(i)\n            if char == ')':\n                start = stack.pop()\n                if not stack:\n                    string += '{},{}:'.format(start, i)\n                else:\n                    string += '{},{}:'.format(start, stack[-1])\n\n        return string\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_single(self):\n        stdin = '()'\n        expected = '4,4:4,8:4,8:4,8:4,8:'\n        actual = self.solution.solve(stdin)\n        self.assertEqual(actual, expected)\n\n    def test_multiple(self):\n        stdin = '()()'\n        expected = '4,4:4,8:4,8:4,8:4,8:'\n        actual = self.solution.solve(stdin)\n        self.assertEqual(actual, expected)\n\n    def test_balance(self):\n        stdin = '(()()()((()))'\n        expected = '4,4:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,8:4,"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('(()') == '4,4:', 'error1'\nassert solution('()') == '4,4:', 'error2'\nassert solution('())') == '4,8:8,8:', 'error3'\nassert solution('()()') == '4,8:8,8:', 'error4'\nassert solution('())(())') == '4,8:8,8:', 'error5'\n"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('((()))') == '4,8:8,8:8,8:4,4:4,4:4,4:4'\nassert solution('())') == '4,4:4,4:4,4:4,4:4'\nassert solution('(()') == '4,4:4,4:4,4:4,4:4'\nassert solution('())') == '4,4:4,4:4,4:4,4:4'\nassert solution(')(') == '4,4:4,4:4,4:4,4:4'\n"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"()\") == \"4,4:\", \"Check failed\"\nassert solution(\"(()(()))\") == \"4,11:11,11:\", \"Check failed\"\nassert solution(\"((()(()))(()))\") == \"4,7:7,7:\", \"Check failed\"\n\nprint(\"All tests passed.\")\n\n'''"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"(())(())(())\") == \"4,4:4,8:8:8,8:4,8:4,8:8,8:8,8:8\"\n\nassert solution(\"())\") == \"4,4:4,4:4,4:4,4:4,4:4\"\n\nassert solution(\")(\") == \"4,4:4,4:4,4:4,4:4,4:4\"\n\nassert solution(\")()())\") == \"4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n26 02 03 03 1') == '5'\nassert solution('1 1\\n26 02 03 03 2') == '185'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1\\n26 02 03 03 1') == '5'\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(100_000)"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\"\nprint(solution(\"1 1\\n26 02 03 03 2\"))\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n26 02 03 03 1') == '5'\n\"\"\"\n\nimport sys\nimport os\nfrom io import StringIO\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n\n    def setUp(self):\n        self.capturedOutput = StringIO()\n        sys.stdout = self.capturedOutput\n\n    def tearDown(self):\n        sys.stdout = sys.__stdout__\n\n    def test_solution(self):\n        with open(\"test_input.txt\", 'r') as sys.stdin:\n            sys.stdin = StringIO(\"1 1\\n26 02 03 03 1\")\n            solution()\n            capturedOutput = self.capturedOutput.getvalue().splitlines()\n            self.assertEqual(capturedOutput[0], '5')"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\"\nassert solution(\"1 1\\n26 02 03 03 2\") == \"185\"\n\"\"\"\nimport os\nimport typing\nimport math"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\"\nassert solution(\"1 1\\n26 02 03 03 2\") == \"185\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n26 02 03 03 1\\n\") == \"5\"\nassert solution(\"1 1\\n26 02 03 03 2\\n\") == \"185\"\n\"\"\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n3 4 1 2') == '2 3 4 1'\nassert solution('3 2\\n1 3 2') == 'Impossible'\nassert solution('4 2\\n3 1 3 1') == '2 3 1 4'\n\"\"\""
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n3 4 1 2\") == \"2 3 4 1\"\nassert solution(\"6 2\\n5 6 1 2 3 4\") == \"5 6 1 2 3 4\"\nassert solution(\"8 2\\n6 8 1 2 3 4 5 6 7\") == \"6 8 1 2 3 4 5\"\nassert solution(\"8 2\\n7 8 1 2 3 4 5 6\") == \"Impossible\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n3 4 1 2') == '2 3 4 1'\nassert solution('5 3\\n2 3 4 5 1') == 'Impossible'\nassert solution('4 2\\n3 5 1 2') == 'Impossible'\nassert solution('3 3\\n2 3 5 1') == 'Impossible'\nassert solution('5 2\\n4 5 3 1 2') == '3 4 5 2 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n3 4 1 2\") == '5 6 1 2 3 4'\nassert solution(\"4 2\\n3 4 1 2\") == '2 3 4 1'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n3 4 1 2\") == \"2 3 4 1\"\n\"\"\""
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n3 4 1 2') == '2 3 4 1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == '5 6 1 2 3 4'\nassert solution(\"4 2\\n3 4 1 2\") == '2 3 4 1'\nassert solution(\"6 2\\n3 4 5 6 1 2\\n3 4 5 6 1 2\\n3 4 5 6 1 2\") == 'Impossible'\nassert solution(\"6 2\\n3 4 5 6 1 2\\n3 4 5 6 1 2\\n3 4 5 6 1 2\\n3 4 5 6 1 2\") == 'Impossible'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\n\"\"\""
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n\"\"\""
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1374, 2) == 7413\nassert solution(210, 1) == 201"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\n\"\"\"\n\nimport math\n\nn, k = map(int, input().split())\n\nm = n\ns = 1\n\nwhile k > 0:\n    if n % 2 == 1:\n        m -= 1\n        k -= 1\n    n = n // 2\n    s *= 2\n\nprint(m)\n"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100''') == '1'\nassert solution('''1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\""
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1374 2') == '7413'\n\"\"\"\n\n\"\"\"\ninput:\n1374 2\n\noutput:\n7413\n\"\"\""
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n\"\"\"\n\nn, k = input().split()\nn, k = int(n), int(k)\n\ns = str(n)\nprint(''.join(sorted(s, reverse=True)[:k]))\n"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\") == \"0.666666666666667\"\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == \"0.733333333333333\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\") == \"0.666666666666667\"\n\nSample Input 3:\n4\n0 0\n0 1\n1 1\n1 0\nSample Output 3:\n0.714285714285714\n\"\"\"\n\nimport math"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\\n\") == \"0.666666666666667\"\nassert solution(\"4\\n0 0\\n1 1\\n1 0\\n\") == \"0.733333333333333\"\n\"\"\"\n\nimport math\nimport random\nimport timeit"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\n\"\"\""
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\") == '0.666666666666667'\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == '0.733333333333333'\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\\n\") == \"0.666666666666667\"\nassert solution(\"3\\n0 0\\n1 1\\n2 0\\n\") == \"0.733333333333333\""
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\") == '0.666666666666667'\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == '0.733333333333333'\nprint('The local tests are done. Click on \"Check\" for more details.')\n\"\"\"\nimport math\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n0 1\\n0 0\\n1 1\\n0 1\\n1 1\\n0 0\\n1 0\\n0 1\\n1 1\\n0 1\") == \"0.733333333333333\"\nassert solution(\"1\\n0 0\\n1 1\\n0 1\\n1 1\\n0 0\\n1 0\\n0 1\\n1 1\\n0 1\") == \"0.5\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\") == '0.6666666666666666'\n\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == '0.733333333333333'"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 1\\n1 0') == '0.666666666666667'\nassert solution('3\\n0 0\\n1 1\\n2 0') == '0.733333333333333'\nassert solution('10\\n0.0000000001 0.0000000001\\n0.8 0.5\\n1 0\\n1 0.0000000001\\n0.8 0.5\\n0 1.0000000001\\n0 0\\n0.5 0.8\\n1 0.0000000001\\n0 1.0000000001\\n0 0.8 0.5\\n1 0\\n0.5 0.8\\n0 0.0000000001\\n0 1.0000000001\\n0 0\\n0 0.0000000001') == '0.733333333333333'\n\n\"\"\"\n\nimport unittest\nfrom math import sqrt"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20') == '9'\nassert solution('2 3 100\\n10 1 10\\n10 1 10') == '21'\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20') == '9'\nassert solution('2 3 100\\n10 1 10\\n10 1 10') == '21'"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"2 3 4\n10 1 3\n0 1 20\n\"\"\") == \"9\"\n\nprint(solution(input()))\n\"\"\"\n\n\"\"\"\nGiven a grid of size n x m, and a set of points, find the minimum distance between two points such that the two points are visible from each other.\n\nThe visibility of two points x and y is defined as:\n\nIf x is in the same row as y, the distance is |x.y|,\nIf x is in the same column as y, the distance is |x.y|,\nIf x is diagonally adjacent to y, the distance is |x.y|,\nIf x is diagonally opposite to y, the distance is |x.y|,\nIf x is above y in the same row, the distance is |x-y|,\nIf x is below y in the same row, the distance is |x-y|,\nIf x is to the left of y, the distance is |x-y|,\nIf x is to the right of y, the distance is |x-y|.\n\nNote: For the purpose of this problem, we define the distance between two points to be the number of grid squares in between them. For example, the distance between (1, 1) and (2, 2) is 2.\n\nInput Format:\n\nThe first line of the input contains two space-separated integers, n and m, the number of rows and columns of the grid.\nThe next n lines contain m space-separated integers describing the grid.\nThe last line of the input contains two space-separated integers, n and m, the number of rows and columns of the grid.\nThe next n lines contain m space-separated integers describing the grid.\nThe last line of the input contains two space-separated integers, n and m, the number of rows and columns of the grid.\nThe next n lines contain m space-separated integers describing the grid.\nThe last line of the input contains two space-separated integers, n and m, the number of rows and columns of the grid.\nThe next n lines contain m space-separated integers describing the grid.\n\nOutput Format:\n\nPrint a single integer denoting the minimum distance between two points such that the two points are visible from each other.\n\nSample Input 0:\n5 5\n0 0 1 1 1\n1 0 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n4 4\n0 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\nSample Output 0:\n3\nSample Input 1:\n5 5\n0 0 1 1 1\n1 0 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n4 4\n0 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\nSample Output 1:\n5\n\nSample Input 2:\n5 5\n0 0 1 1 1\n1 0 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n4 4\n0 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\nSample Output 2:\n4\n\"\"\"\n\nimport sys\nimport numpy as np\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __eq__(self, other):\n        return (self.x == other.x) and (self.y == other.y)\n    def __lt__(self, other):\n        return (self.x < other.x) and (self.y < other.y)\n    def __repr__(self):\n        return \"(%s, %s)\" % (self.x, self.y)\n\nclass Line:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n    def __str__(self):\n        return \"y = %.2fx + %.2f\" % (self.a, self.b)\n    def intersect(self, line):\n        x = (self.b * line.c - self.c * line.b) / (self.a * line.b - self.b * line.a)\n        y = (self.a * line.c - self.c * line.a) / (self.b * line.a - self.a * line.b)\n        return Point(x, y)"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 4\\n10 1 3\\n0 1 20\") == \"9\"\nassert solution(\"2 3 100\\n10 1 10\\n10 1 10\") == \"21\"\n\"\"\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20\\n') == '9'\nassert solution('2 3 100\\n10 1 10\\n10 1 10\\n') == '21'"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 4\\n10 1 3\\n0 1 20\") == \"9\"\nassert solution(\"2 3 100\\n10 1 10\\n10 1 10\") == \"21\"\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20') == '9'\nassert solution('2 3 100\\n10 1 10\\n10 1 10') == '21'\nassert solution('2 3 100\\n10 1 10\\n10 1 10\\n0 1 10') == '15'\nassert solution('1 1 1\\n2 2 2') == '0'\nassert solution('5 2 100\\n100 1 100\\n100 1 100\\n100 1 100\\n100 1 100') == '100'\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20') == '9'\nassert solution('2 3 100\\n10 1 10\\n10 1 10') == '21'\n\n-------------\nThis is the code of the first solution I came up with. The above is the second solution."
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 100\\n10 1 10\\n10 1 10\") == \"21\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20\\n') == '9'\nassert solution('2 3 100\\n10 1 10\\n10 1 10\\n') == '21'\n\n'''\n\nimport sys"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2 8 *\n1 1 1 2\n''') == '4'\nassert solution('''3 2 8 +\n1 1 1 2\n''') == '2'\nassert solution('''5 5 7 +\n1 1 1 2\n''') == '0'\nassert solution('''5 5 7 *\n1 1 1 2\n''') == '0'\nassert solution('''3 4 7 *\n2 3 2 3\n''') == '1'\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 2 7 -\\n1 1 1 2\\n') == '2'\nassert solution('9 2 7 -\\n1 1 1 2\\n') == '4'\nassert solution('9 2 7 -\\n3 3 1 2\\n') == '0'\nassert solution('9 2 7 -\\n3 3 3 2\\n') == '0'\n\"\"\""
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''8 2 7 -\n1 1 1 2\n''') == '2'\nassert solution('''9 2 7 -\n1 1 1 2\n''') == '4'\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\nassert solution(\"9 2 7 -\\n1 1 1 2\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''8 2 7 -\n1 1 1 2\n''') == '2'\nassert solution('''9 2 7 -\n1 1 1 2\n''') == '4'\n\n'''\n7 3 4 +\n2 2 3 4\n5 4 6 8\n1 2 3 4\n5 6 7 8\n1 3 4 5\n2 3 4 5\n2 4 5 6\n'''\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\nassert solution(\"9 2 7 -\\n1 1 1 2\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(solution.test_cases[0]) == solution(solution.test_cases[0])\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 2 7 -\\n1 1 1 2\\n') == '2'\nassert solution('9 2 7 -\\n1 1 1 2\\n') == '4'\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == \"3\\n4\\n3\"\nassert solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == \"2\\n3\\n2\\n1\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == \"3\\n4\\n3\"\nassert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n4 1 8\") == \"2\\n3\\n2\\n1\"\n\"\"\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == \"2\\n3\\n2\\n1\"\nassert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 2\") == \"3\\n2\\n1\"\n\nassert solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 2\") == \"2\\n3\\n2\\n1\"\nassert solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == \"3\\n2\\n1\"\n\nprint('Success')\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import inf"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8') == '3\\n4\\n3'\n\"\"\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == \"2\\n3\\n2\\n1\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(input())\nprint(solution(str(input())))\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\"\"\") == \"\"\"3\n4\n3\"\"\"\n\n\"\"\"\nIf you want to know why the following code works, try to implement it on paper.\n\nThe code tries all paths from city A to city B. And for each of them, it checks how many roads in the path are long enough to be continued from previous road to the current one.\n\nIf the number of paths is zero, it means that the path is not a shortest path. If the number of paths is 1, it means that there is only one path, which is a shortest path. The code tries all paths from city A to city B, and for each of them counts how many roads are long enough to be continued.\n\nThe result of this code is the number of shortest paths that contain a certain road.\n\n\"\"\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n''') == '''3\n4\n3\n2\n1'''\n\nassert solution('''2 2\n1 2 3\n2 3 3\n''') == '''0\n1\n1'''\n\nassert solution('''4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n''') == '''3\n4\n3\n2\n1\n'''\n\nassert solution('''3 2\n1 2 3\n2 3 3\n1 3 1\n''') == '''0\n1\n1\n'''\n\nassert solution('''1 1\n1 1 1\n''') == '''1\n'''"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == \"2\\n3\\n2\\n1\"\n\n\"\"\""
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n') == '2\\n3\\n2\\n1'\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n2 1\") == 6\nassert solution(\"3 4\\n2 3 1\") == 24\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 3\n2 1''') == '6'\nassert solution('''3 4\n2 3 1''') == '24'\nassert solution('''1 1\n1 1''') == '1'\n\n---Solution---\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n2 1\") == \"6\"\nassert solution(\"3 4\\n2 3 1\") == \"24\"\n\n\"\"\"\nimport itertools"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n2 1\") == \"6\"\nassert solution(\"3 4\\n2 3 1\") == \"24\"\nassert solution(\"3 5\\n3 3 1\\n1 1 2\") == \"20\"\n\n\"\"\""
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"8\"\nassert solution(\"3 3\") == \"6\"\n\nimport sys\n\nassert solution(sys.stdin.read()) == sys.stdout.read()\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n2 1\") == \"6\"\nassert solution(\"3 4\\n2 3 1\") == \"24\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2 3\n2 1\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n3 4\n2 3 1\n\"\"\") == \"24\"\n\nassert solution(\"\"\"\n2 2\n1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 1\n1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2 3\n1 1\n\"\"\") == \"1\""
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 4\n2 3 1\n\"\"\") == 24\nassert solution(\"\"\"3 4\n2 3 1\n\"\"\") == 24\nassert solution(\"\"\"2 3\n2 1\n\"\"\") == 6\nassert solution(\"\"\"3 4\n2 3 1\n\"\"\") == 24\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n2 1') == '6'\n\"\"\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3 4') == '4'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('5\\n3 4 5 1 2') == '1'\n\nprint(solution(stdin.strip()))\n\"\"\"\n\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"5\\n3 4 5 1 2\") == \"1\"\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('5\\n3 4 5 1 2') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"5\\n3 4 5 1 2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n1 2\n''') == '2'\nassert solution('''5\n3 4 5 1 2\n''') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"5\\n3 4 5 1 2\") == \"1\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"3628800\"\nassert solution(\"7\\n4 5 6 7 8 9 10 11 12\") == \"5040\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2\") == 2\nassert solution(\"5\\n3 4 5 1 2\") == 1\n\"\"\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('5\\n3 4 5 1 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('5\\n3 4 5 1 2') == '1'\nprint('The local tests are done. Click on \"Check\" for more details.')\n\n-----\n\"\"\"\nfrom collections import Counter\nimport numpy as np\nimport pandas as pd"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 3 1\\n2 1 2\\n1 1 1\\n3 3 3\\n1 1 1\\n2 1 2\\n3 3 3\\n\") == \"4\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n') == '9'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n\") == 9\n\"\"\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 3 1\\n2 1 2\\n1 1 1\") == \"4\"\n\"\"\"\n\nfrom collections import Counter\n\nr, s = map(int, input().split())\narray = []\nfor i in range(r):\n    array.append(list(map(int, input().split())))"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\") == 9\nassert solution(\"3 3\\n1 3 1\\n2 1 2\\n1 1 1\") == 4\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 3 1\\n2 1 2\\n1 1 1') == '4'\nassert solution('2 3\\n1 3 1\\n2 1 2\\n1 1 1') == '0'\n\nassert solution('2 2\\n1 1\\n1 1') == '1'\nassert solution('3 2\\n1 1 1\\n1 1 1') == '0'\n\nassert solution('5 5\\n1 2 3 4 5\\n5 1 2 3 4\\n5 1 2 3 4\\n5 1 2 3 4\\n5 1 2 3 4') == '10'\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\\n4 2\\n3 1\\n\") == \"9\"\n\nassert solution(\"7 1\\n5 4\\n3 8\\n8 7\\n2 3\\n\") == \"8\"\n\nassert solution(\"5 2\\n4 3\\n4 2\\n5 1\\n\") == \"0\"\n\nassert solution(\"3 2\\n1 2\\n1 1\\n\") == \"0\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a\\n') == '0'\n\nfrom collections import namedtuple\n\nassert solution('1\\n1\\n1\\n1\\n1') == '0'\nassert solution('2\\n2\\n2\\n2\\n2') == '0'\nassert solution('3\\n3\\n3\\n3\\n3') == '0'\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n\") == \"9\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4') == '6'\n\"\"\"\n\nfrom collections import Counter\nfrom math import prod"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4') == '6'\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\") == \"6\"\nassert solution(\"4\\n1 2 3 4\\n1 2\\n1 3\\n2 4\") == \"6\"\nassert solution(\"4\\n3 4 5 6\\n1 2\\n1 3\\n2 4\") == \"3\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 3 4\\n1 2\\n1 3\\n3 4\\n\") == \"6\"\nassert solution(\"4 5 6 7\\n1 2\\n1 3\\n2 4\\n\") == \"3\"\n\"\"\"\n\nN = int(input())\njokes = list(map(int, input().split(\" \")))"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\") == \"6\"\nassert solution(\"4\\n3 4 5 6\\n1 2\\n1 3\\n2 4\") == \"3\"\nprint(solution(stdin))"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n3 4\") == \"6\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nsets = set()\n\nfor _ in range(n-1):\n    a, b = map(int, sys.stdin.readline().split())\n    tmp = set()\n    for s in sets:\n        if len(s) == 0:\n            continue\n        if a not in s:\n            continue\n        if b not in s:\n            continue\n        tmp.add(s.union(set([a, b])))\n    sets = tmp\n\nprint(len(sets))\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\") == \"6\"\nassert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\\n2 3\") == \"3\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\") == '6'\n\n\"\"\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\") == \"6\"\n\"\"\"\n\nfrom collections import Counter, defaultdict\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n') == '1\\n2\\n'\nassert solution('2\\n2\\n') == '0\\n0\\n'\nassert solution('2\\n5\\n') == '2\\n0\\n'\nassert solution('2\\n1\\n') == '0\\n1\\n'\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '2\\n1 10\\n5 8'\n) == '18\\n8'\n\nassert solution(\n    '3\\n17 144\\n121 121\\n89 98'\n) == '265\\n25\\n10'\n\nassert solution(\n    '4\\n2 4\\n1 6\\n9 4\\n4 2'\n) == '15\\n8'\n\nassert solution(\n    '4\\n2 4\\n1 6\\n9 4\\n4 2'\n) == '15\\n8'\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 10') == '18'\nassert solution('3\\n17 144\\n121 121\\n89 98') == '265'\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 10\\n5 8\") == \"18\\n8\"\nassert solution(\"3\\n17 144\\n121 121\\n89 98\") == \"265\\n25\\n10\"\n\"\"\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 1 2') == '2'\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 10\\n5 8\") == \"18\\n8\"\nassert solution(\"3\\n17 144\\n121 121\\n89 98\") == \"265\\n25\\n10\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2\n1 10\n5 8\n\"\"\") == '18'\n\nassert solution(\"\"\"3\n17 144\n121 121\n89 98\n\"\"\") == '265'\n\nassert solution(\"\"\"4\n7 264\n255 251\n132 123\n495 414\n1 125\n136 360\n\"\"\") == '10'\n\nassert solution(\"\"\"4\n1 1000\n999 999\n999 999\n999 999\n\"\"\") == '4'\n\nassert solution(\"\"\"5\n9 1000\n999 999\n999 999\n999 999\n999 999\n\"\"\") == '9'"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2\n1 10\n5 8\n''') == '''18\n8'''\n\nassert solution('''3\n17 144\n121 121\n89 98\n''') == '''265\n25\n10'''\n\nassert solution('''1\n11\n3\n''') == '''5\n0\n1'''\n\nassert solution('''3\n17 144\n121 121\n89 98\n''') == '''265\n25\n10'''\n\nassert solution('''2\n6 12\n6 12\n6 12\n''') == '''12\n3\n2'''"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n2\n1 10\n5 8\n\"\"\"\n) == \"\"\"\n18\n8\n\"\"\"\n\nassert solution(\n\"\"\"\n3\n17 144\n121 121\n89 98\n\"\"\"\n) == \"\"\"\n265\n25\n10\n\"\"\"\n\nassert solution(\n\"\"\"\n1\n1 10\n\"\"\"\n) == \"\"\"\n9\n\"\"\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6\") == \"8\"\nassert solution(\"4 10\") == \"28\"\nassert solution(\"5 10\") == \"25\"\n\"\"\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\\n\") == \"0.50000000\"\nassert solution(\"5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\\n\") == \"12.50000000\"\n\"\"\""
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0') == '0.50000000'\nassert solution('5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4') == '12.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\\n\") == \"0.5\"\nassert solution(\"5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\\n\") == \"12.5\"\n\"\"\""
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0') == '0.50000000'\n\"\"\""
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\") == \"0.50000000\"\nassert solution(\"5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\") == \"12.50000000\""
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0\\n') == '0.50000000'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\") == \"0.5\"\nassert solution(\"5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\") == \"12.5\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\n\"\"\""
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0') == '0.50000000'\nassert solution('5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4') == '12.50000000'\n\n\"\"\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0\\n') == '0.50000000'\nassert solution('5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\\n') == '12.50000000'\nprint('Passed!')\n\n\"\"\"\n\nimport sys\nimport random"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict, deque\nimport sys"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\nassert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n0 4\\n4 1\\n2 3\\n2 4\\n3 4\\n4\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == 2\n\"\"\""
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\nassert solution('''4 1 3\n0 1\n1 2\n2 3\n1\n''') == '1'\n\n-----Notes-----\n\n'''\n\n[\n    S = num of spies;\n    E = num of enemies\n    C = num of connections\n]\n\n[\n    connections = connections[spy] # 1\n]\n\nwhile connections[spy]\n    connections = connections[spy] # 1\n\n1. Get all of the connections for each spy.\n2. Iterate through each connections and tell the connection if it is not a self connection (spy = spy)\n3. Update the list of connections for each spy by removing the already passed connections.\n4. Keep iterating until there are no more connections\n5. For each spy, get the number of connections (excluding self connections) and add it to a variable.\n\n[\n    num_connections = sum(len(connections) - 1 for connections in spy_connections)\n]\n\n[\n    num_connections = sum(len(connections) - 1 for connections in spy_connections)\n]\n\nnum_connections = sum(len(connections) - 1 for connections in spy_connections)\n\n'''\n\n'''"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\nassert solution(\"4 0 4\\n0 2\\n0 1\\n2 1\\n2 3\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\n\"\"\"\n\nfrom collections import deque, defaultdict"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n') == '2'\n\"\"\"\nimport sys\nfrom collections import deque\n\nstdin = sys.stdin"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == '2'\n\"\"\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 1') == 6\nassert solution('2 2 2') == 30\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1\\n\") == 6\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"1 2 2\") == \"30\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\") == 6\nassert solution(\"2 2 2\") == 30\n\"\"\"\n\nA, C, M = [int(i) for i in stdin.split()]\nprint((pow(C, A) * pow(M, A)) % (10 ** 9 + 7))"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 1') == '6'\n\"\"\"\n\nA, C, M = [int(x) for x in stdin.split()]\n\nC_to_F = C * (C - 1) // 2\nM_to_F = M * (M - 1) // 2\n\nprint((M_to_F * C_to_F) % (10**9 + 7))\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1\") == 6\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 1') == 6\n\"\"\"\n\nfrom math import gcd\nfrom typing import List\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 1\\n2 2 2') == 30\n\"\"\"\n\nA = list(map(int, input().split()))\nC, M = A[0], A[1]\nA = [i for i in range(C + 1)]\nM = [i for i in range(M + 1)]\nres = 1\n\nfor i in A:\n    for j in M:\n        if i + j > C:\n            break\n        res = (res * (i + j)) % (1000000007)\n\nprint(res)\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 1\\n') == 6\nassert solution('2 2 2\\n') == 30\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 1') == 6\nassert solution('2 2 2') == 30\n\"\"\"\n\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\n\na, c, m = map(int, stdin.split())\n"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2020 2020 2020') == '2021 2020 2020'\nassert solution('2 9999999') == 'impossible'\n"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2020 2020 2020') == '2021 2020 2020'\nassert solution('2\\n999999 1') == 'impossible'"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"3\\n2020 2020 2020\"\n) == \"2021 2020 2020\"\nassert solution(\n\"2\\n1 9999999\"\n) == \"impossible\""
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2020 2020 2020\") == \"2021 2020 2020\"\nassert solution(\"2\\n1 9999999\") == \"impossible\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2020 2020 2020\") == \"2021 2020 2020\"\nassert solution(\"2\\n1 9999999\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2020 2020 2020\") == \"2021 2020 2020\"\n\"\"\""
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2020 2020 2020\") == \"2021 2020 2020\"\nassert solution(\"2 9999999\") == \"impossible\""
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2020 2020 2020') == '2021 2020 2020'\nassert solution('2 9999999') == 'impossible'\n\"\"\""
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2020 2020 2020\") == \"2021 2020 2020\"\nassert solution(\"2\\n1 9999999\") == \"impossible\"\nprint(solution(\"3\\n2020 2020 2020\"))\nprint(solution(\"2\\n1 9999999\"))\n\"\"\""
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2020 2020 2020\") == \"2021 2020 2020\"\nassert solution(\"2\\n1 9999999\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"30 70\") == \"11\"\nassert solution(\n\"66 69\") == \"2\"\n\"\"\"\n\nL, R = map(int, input().split())\n\ncnt = 0\n\nfor i in range(L, R + 1):\n    if \"4\" in str(i) or \"6\" in str(i) or \"8\" in str(i):\n        continue\n    if len(set(str(i))) == len(str(i)) - str(i).count(\"6\") - str(i).count(\"8\"):\n        cnt += 1\nprint(cnt % (10 ** 9 + 7))\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 10') == 0\nassert solution('6 9') == 2\nassert solution('8 11') == 1\nassert solution('14 15') == 1\n\n'''\n\nL, R = map(int, input().split())\nnum = 0\nfor i in range(L, R + 1):\n    digits = set()\n    count = 0\n    while i > 0:\n        if i % 10 == 4:\n            count += 1\n        elif i % 10 == 6 or i % 10 == 8:\n            count += 1\n            digits.add(i % 10)\n        i = i // 10\n    if digits.issubset([6, 8]) and count == len(digits):\n        num += 1\nprint(num // (10**9 + 7))\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"30 70\") == \"11\"\nassert solution(\"66 69\") == \"2\"\n\"\"\""
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 3\") == 2\n\"\"\"\n\n\nL, R = map(int, stdin.split())"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"30 70\") == 11\nassert solution(\"66 69\") == 2\n\"\"\""
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n5\n7\n9\n10\n11\n12\n15\n18\n20\n22\n25\n30\n34\n38\n42\n46\n50\n54\n58\n62\n66\n70\n75\n\"\"\"\n) == \"11\"\n\nassert solution(\n\"\"\"\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('30 70') == 11\nassert solution('66 69') == 2\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'\nprint('The local tests are done. Click on \"Check\" for more details.')"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2 0\\n>>@<<\\n>~#~<') == '2'\nassert solution('3 5 1\\n>>@<<\\n>~#~<') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n4 5 6') == ''\nassert solution('2 2 0\\n>@\\n>~') == '2'\nassert solution('2 2 0\\n>>@<<\\n>~#~<\\n>>>>~') == '4'\nassert solution('2 2 0\\n>@\\n>~\\n>~#~<\\n>>>>~') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 0\") == \"2\"\nassert solution(\"3 5 1\") == \"4\"\n\"\"\"\n\nfrom sys import stdin\n\nm, n, k, x_init = [int(i) for i in stdin.readline().strip().split(\" \")]\n\nmap = [[j for j in stdin.readline().strip()] for i in range(m)]\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 0\") == \"2\"\nassert solution(\"3 5 1\") == \"4\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\") == \"2\"\nassert solution(\"3 5 1\\n>>@<<\\n>~#~<\") == \"4\"\n\n\"\"\"\n\n\nclass Matrix:\n    def __init__(self, matrix: list):\n        self.matrix = matrix\n        self.height = len(matrix)\n        self.width = len(matrix[0])\n\n    def is_valid(self, row, col) -> bool:\n        return row >= 0 and col >= 0 and row < self.height and col < self.width\n\n    def __str__(self) -> str:\n        res = \"\"\n        for line in self.matrix:\n            for cell in line:\n                res += str(cell)\n            res += \"\\n\"\n        return res\n\n    def is_cell_occupied(self, row, col) -> bool:\n        return self.matrix[row][col]!= 0\n\n    def __setitem__(self, row, col, value):\n        if not self.is_valid(row, col):\n            raise Exception(\"Invalid matrix coordinates\")\n        self.matrix[row][col] = value\n\n    def get_cell_value(self, row, col) -> int:\n        if not self.is_valid(row, col):\n            raise Exception(\"Invalid matrix coordinates\")\n        return self.matrix[row][col]\n\n    def get_north_value(self, row, col) -> int:\n        return self.get_cell_value(row - 1, col)\n\n    def get_south_value(self, row, col) -> int:\n        return self.get_cell_value(row + 1, col)\n\n    def get_east_value(self, row, col) -> int:\n        return self.get_cell_value(row, col + 1)\n\n    def get_west_value(self, row, col) -> int:\n        return self.get_cell_value(row, col - 1)\n\n    def set_north_value(self, row, col, value):\n        self.__setitem__(row - 1, col, value)\n\n    def set_south_value(self, row, col, value):\n        self.__setitem__(row + 1, col, value)\n\n    def set_east_value(self, row, col, value):\n        self.__setitem__(row, col + 1, value)\n\n    def set_west_value(self, row, col, value):\n        self.__setitem__(row, col - 1, value)\n\n    def to_string_matrix(self):\n        return self.matrix\n\n\nclass Boat:\n    def __init__(self, matrix: Matrix, row: int, col: int):\n        self.matrix = matrix\n        self.row = row\n        self.col = col\n\n    def get_north_value(self) -> int:\n        return self.matrix.get_north_value(self.row, self.col)\n\n    def get_south_value(self) -> int:\n        return self.matrix.get_south_value(self.row, self.col)\n\n    def get_east_value(self) -> int:\n        return self.matrix.get_east_value(self.row, self.col)\n\n    def get_west_value(self) -> int:\n        return self.matrix.get_west_value(self.row, self.col)\n\n    def set_north_value(self, value: int):\n        self.matrix.set_north_value(self.row, self.col, value)\n\n    def set_south_value(self, value: int):\n        self.matrix.set_south_value(self.row, self.col, value)\n\n    def set_east_value(self, value: int):\n        self.matrix.set_east_value(self.row, self.col, value)\n\n    def set_west_value(self, value: int):\n        self.matrix.set_west_value(self.row, self.col, value)\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'begin repairs'\nassert solution('1\\n') == '0'\nassert solution('2\\n1\\n') == '2'\nassert solution('2\\n2\\n1\\n1\\n') == '4'\nassert solution('3\\n5\\n2\\n1\\n1\\n') == '9'\n\"\"\"\n\nimport re\nfrom functools import lru_cache\n\nREGEX = r'^(\\d+)\\n((?:(?:\\d+)(?:\\s+)(?:#|\\>|\\<)|(?:\\s+)(?:\\d+)(?:\\s+)(?:#|\\>|\\<)))+$'"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\") == 2\n\"\"\""
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 0\\n>@\\n>~') == 2\n\nassert solution('3 5 1\\n>>@<<\\n>~#~<') == 4\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'\n\"\"\""
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n\n\"\"\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('143175=120') == '1431+75=120'\nassert solution('5025=30') == '5+025=30'\nprint('Success')\n\n------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\nassert solution(\"30=50\") == \"3+0=3\"\n\"\"\""
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"143175=120\"\n) == \"14+31+75=120\"\nassert solution(\n\"5025=30\"\n) == \"5+025=30\"\nassert solution(\n\"275942=3600\"\n) == \"27+5942=3600\"\nassert solution(\n\"5050=90\"\n) == \"5+050=90\"\nassert solution(\n\"13324=137\"\n) == \"13+3+324=137\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\nassert solution(\"1234567891011=1234\") == \"1+2+3+4+5+6+7+8+9+0+1+1=1234\"\nassert solution(\"112357=3\") == \"1+1+2+3+5+7=3\"\nassert solution(\"1157=5\") == \"1+1+5=5\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\nprint(\"Success\")\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\nassert solution(\"1239=30\") == \"12+39=30\"\nassert solution(\"1023=30\") == \"10+23=30\"\nassert solution(\"1030=30\") == \"10+30=30\"\n\"\"\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n\"\"\""
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\nassert solution(\"20=11\") == \"2+010=11\"\n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1') == '1 2'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1') == '1 2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '-1\\n'\nassert solution('1\\n') == '1 1\\n'\nassert solution('2\\n1\\n2\\n1\\n') == '1 1\\n2 2\\n'\nassert solution('3\\n1\\n2\\n3\\n1\\n2\\n') == '1 1\\n2 2\\n'\nassert solution('4\\n1\\n2\\n3\\n4\\n1\\n2\\n') == '1 1\\n2 2\\n'\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n8\n1\n2\n3\n4\n5\n6\n7\n1\n''') == '1 2\\n'\nassert solution('''\n8\n1\n2\n3\n4\n5\n6\n7\n1\n''') == '-1\\n'\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"8\n1\n2\n3\n4\n5\n6\n7\n1\"\"\"\n) == '1 2'\nassert solution(\n\"\"\"8\n1\n2\n3\n4\n5\n6\n7\n1\"\"\"\n) == '-1'\n\nprint('Success')"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n1\") == \"1 3\"\nassert solution(\"8\\n2\\n5\\n3\\n5\\n4\\n1\\n1\\n1\\n5\") == \"1 5\"\nassert solution(\"8\\n8\\n8\\n1\\n1\\n3\\n3\\n3\\n4\") == \"1 4\"\nassert solution(\"8\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n3\") == \"1 3\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"1 2\"\n\"\"\""
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"1 2\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"1 2\"\n\"\"\"\n\n\"\"\"\n\u7b2c\u4e8c\u984c\uff1a\n5.\nWe are given a matrix $A \\in \\mathbb{R}^{n\\times m}$, where $n$ and $m$ are integers greater than or equal to 1. We will call $A$ as an \u201cadmissible matrix\u201d if $A$ has no rows or columns that contain all zero entries.\n\nWe will denote the number of rows and columns of $A$ by $n$ and $m$, respectively.\n\nFind whether $A$ is an admissible matrix.\n\n-----Input-----\nThe first line contains two space-separated integers $n$ and $m$, denoting the number of rows and columns of $A$. The next $n \\times m$ lines contain space-separated integers $A_{ij}$ for all $0\\leq i \\leq n$ and $0\\leq j \\leq m$.\n\n-----Output-----\nPrint \"YES\", if $A$ is an admissible matrix, and \"NO\" if it is not.\n\n-----Examples-----\nSample Input 1:\n4 4\n0 4 1 3\n2 0 5 6\n3 0 1 0\n1 0 0 3\nSample Output 1:\nYES\n\nSample Input 2:\n4 4\n0 4 1 3\n2 0 5 6\n3 0 1 0\n1 0 0 3\nSample Output 2:\nNO\n\"\"\"\n\n\"\"\"\n\u7b2c\u4e09\u984c\uff1a\n6.\nWe are given a list of $m$ elements $A = [A_1, A_2, \\ldots, A_m]$. We will call $A$ as an \u201cunfair array\u201d if it is not a permutation of the sorted version of $A$ (i.e., $A$ is sorted, and $A$ is a permutation of $A$).\n\nWe will denote the number of elements in $A$ by $m$, and the elements of $A$ by $A_1, A_2, \\ldots, A_m$.\n\nFind whether $A$ is an unfair array.\n\n-----Input-----\nThe first line contains $m$, denoting the number of elements of $A$. The next line contains $m$ space-separated integers, denoting the elements of $A$.\n\n-----Output-----\nPrint \"YES\", if $A$ is an unfair array, and \"NO\" if it is not.\n\n-----Examples-----\nSample Input 1:\n5\n2 3 1 4 5\nSample Output 1:\nYES\n\nSample Input 2:\n5\n2 3 1 4 5\nSample Output 2:\nNO\n\nSample Input 3:\n6\n2 1 3 4 5 6\nSample Output 3:\nNO\n\"\"\"\n\n\"\"\"\n\u7b2c\u56db\u984c\uff1a\n7.\nWe are given a list of $m$ elements $A = [A_1, A_2, \\ldots, A_m]$. We will call $A$ as an \u201cunfair array\u201d if it is not a permutation of the sorted version of $A$ (i.e., $A$ is sorted, and $A$ is a permutation of $A$).\n\nWe will denote the number of elements in $A$ by $m$, and the elements of $A$ by $A_1, A_2, \\ldots, A_m$.\n\nFind whether $A$ is an unfair array.\n\n-----Input-----\nThe first line contains $m$, denoting the number of elements of $A$. The next line contains $m$ space-separated integers, denoting the elements of $A$.\n\n-----Output-----\nPrint \"YES\", if $A$ is an unfair array, and \"NO\" if it is not.\n\n-----Examples-----\nSample Input 1:\n5\n2 3 1 4 5\nSample Output 1:\nYES\n\nSample Input 2:\n5\n2 3 1 4 5\nSample Output 2:\nNO\n\"\"\"\n\n\"\"\"\n\u7b2c\u4e94\u984c\uff1a\n8.\nGiven the first and last element of a sequence, find the minimum number of elements to be deleted from the sequence to make the sum of remaining elements equal to the sum of the original sequence.\n\n-----Input-----\nThe first line contains an integer $N \\leq 10000$, denoting the total number of elements of the sequence. Next line contains two integers $A_1$ and $A_2$, denoting the first and last element of the sequence, respectively.\n\n-----Output-----\nPrint the minimum number of elements that must be deleted from the sequence to make its sum equal to the sum of original sequence.\n\n-----Examples-----\nSample Input 1:\n5\n2 6\nSample Output 1:\n1\n\nSample Input 2:\n7\n1 1\nSample Output 2:\n0\n\"\"\"\n\n\"\"\"\n\u7b2c\u516d\u984c\uff1a\n9.\nGiven a sequence $S = [S_1, S_2, \\ldots, S_n]$, we will denote by $S_i$ the i-th element of $S$.\n\nThere are $n$ steps, and on each step, one of the three operations is performed:\n\n1. If $S_i$ is even, then it becomes $S_i = S_i / 2$.\n2. If $S_i$ is odd, then it becomes $S_i = 3 * S_i + 1$.\n3. If $S_i$ is odd and greater than $3$, then it becomes $S_i = 3 * S_i - 2$.\n\nAfter the $n$ steps, the sequence $S$ is called a wiggle sequence.\n\nFind the length of the shortest wiggle sequence.\n\n-----Input-----\nThe first line contains an integer $n \\leq 20000$, denoting the number of elements in the sequence. Next line contains $n$ space-separated integers, denoting the elements of the sequence.\n\n-----Output-----\nPrint the length of the shortest wiggle sequence.\n\n-----Examples"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n') == '1 2\\n'\nassert solution('8\\n5\\n1\\n6\\n2\\n7\\n3\\n8\\n') == '-1\\n'\nassert solution('9\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n') == '-1\\n'\nassert solution('10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '1 10\\n'\nassert solution('8\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '1 10\\n'\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\") == \"1 2\"\nassert solution(\"8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\") == \"1 2\"\nassert solution(\"8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\") == \"1 2\"\nassert solution(\"8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\") == \"1 2\"\nassert solution(\"8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\") == \"1 2\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1101') == 1\nassert solution('1111') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1101') == '1'\n\"\"\""
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"1110\") == \"1\"\nassert solution(\"1111\") == \"1\"\nassert solution(\"1010\") == \"2\"\nassert solution(\"1011\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1101\") == 1\n\"\"\"\n\n\nimport numpy as np"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1101') == '1'\nassert solution('10011') == '0'\nassert solution('11100') == '1'\nassert solution('11101') == '1'\n\"\"\""
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1101') == 1\nassert solution('11110') == 2\nassert solution('111111') == 4\nassert solution('11111') == 5\nassert solution('1111111') == 5\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11101') == 0\nassert solution('11110') == 1\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)\n\nOPEN = '1'\nCLOSED = '0'\n\nTOTAL_TIMESTEPS = int(1e7)\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1101\") == '1'\nassert solution(\"1111\") == '1'\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1101') == '1'\nassert solution('11010') == '0'\nassert solution('11111111') == '9'\nassert solution('10101010') == '6'\nassert solution('111111010') == '5'\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1101\") == \"1\"\n\nassert solution(\"1110\") == \"2\"\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 1\\n2 3\") == \"0\\n1\\n0\"\nassert solution(\"3 3\\n1 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\") == \"0\\n1\\n2\"\nassert solution(\"6 6\\n1 2 3 4 5 6 5 3 4 6\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1\") == \"0\\n2\\n2\\n0\\n2\\n0\"\n\nprint(solution(stdin))\n\n-----Solution-----\n\nn, m = [int(x) for x in stdin.split(\"\\n\")[0].split()]\ntruck = [[int(x) for x in stdin.split(\"\\n\")[i].split()] for i in range(1, n + 1)]\ntruck_s = [x[1:] for x in truck]\npairs = [[int(x) for x in stdin.split(\"\\n\")[i].split()] for i in range(n + 1, n + m + 1)]\ntruck_pairs = [x[1:] for x in pairs]\n\ntruck_p = truck_pairs.copy()\ntruck_p.sort()\n\ntruck_i = [0] * n\nfor i in range(n):\n    for j in range(n):\n        if truck_s[i] == truck_s[j] and truck_i[j] == 0:\n            truck_i[j] = i + 1\n            break\n\nfor i in range(len(truck_pairs)):\n    print(truck_i.index(i + 1) + 1)\n\n\"\"\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\") == \"1\\n0\\n2\"\nassert solution(\"2 3\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\\n1 2\\n2 3\\n3 1\") == \"1\\n0\\n2\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 6 3 6\\n7 3 4 2 6 5 6 1\\n1 2\\n2 3\") == \"3\"\n\n\"\"\"\n\nfrom typing import List\nimport sys\n\ntest_str = \"\"\"4 1 6 3 6\n7 3 4 2 6 5 6 1\n1 2\n2 3\n3 1\"\"\"\n\nsys.stdin = open(__file__.replace('.py','- Test.txt'))\n\nN, M = list(map(int, input().split()))\ntrucks = []\nfor i in range(N):\n    trucks.append(list(map(int, input().split())))\npairs = []\nfor i in range(M):\n    pairs.append(list(map(int, input().split())))"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\\n\") == '1\\n0\\n2\\n3\\n'\n\nassert solution(\"5 3\\n1 3 5 7 9\\n2 4 6 8 10\\n3 1\\n4 2\\n\") == '3\\n0\\n1\\n3\\n2\\n'\n\nassert solution(\"8 3\\n2 6 4 8 10 11\\n1 5 7 9 12\\n3 1\\n4 2\\n5 3\\n6 1\\n7 2\\n\") == '5\\n2\\n1\\n2\\n1\\n'\n\nassert solution(\"8 3\\n2 7 4 8 10 11\\n1 5 6 9 12\\n3 1\\n4 2\\n5 3\\n6 1\\n7 2\\n\") == '5\\n2\\n1\\n2\\n1\\n'\n\nassert solution(\"5 3\\n1 3 5 7 9\\n2 4 6 8 10\\n3 1\\n4 2\\n5 3\\n6 1\\n7 2\\n\") == '5\\n1\\n0\\n1\\n1\\n'"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1') == '1\\n0\\n2'\nassert solution('2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\\n1 2\\n') == '3\\n0'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\\n') == '1\\n0\\n2\\n'\n\n\"\"\""
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\\n\") == \"1\\n0\\n2\\n\"\nassert solution(\"4 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\\n1 2\\n\") == \"3\\n0\\n2\\n\"\nassert solution(\"5 1\\n5 1 6 3 6 5 6 1\\n7 3 4 2 6 5 6 1\\n1 2\\n\") == \"6\\n0\\n2\\n\""
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\") == '3'\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1') == '1\\n0\\n2'\n\"\"\"\n\nN, M = map(int, input().split())\n\nroutes = [[] for _ in range(N)]\n\nfor _ in range(N):\n    route = list(map(int, input().split()))[1:]\n    routes.append(route)\n\npairs = [list(map(int, input().split())) for _ in range(M)]\n\nencounters = [0] * (M + 1)\n\nfor i in range(M):\n    a, b = pairs[i]\n    encounters[a] += 1\n    encounters[b] += 1\n    for j in routes[a]:\n        encounters[j] += 1\n    for j in routes[b]:\n        encounters[j] += 1\n\nfor i in range(1, N + 1):\n    print(encounters[i])\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1') == '1\\n0\\n2\\n'\nassert solution('2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\\n1 2\\n') == '3\\n0\\n2\\n'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0', 'Wrong output'\nassert solution('4 2\\n2 4 3 4') == '3.666666', 'Wrong output'\n\"\"\""
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '4'\nassert solution('1 2 3 4 5') == '4.5'\nassert solution('1 2 3 4 5 6') == '3.5'\nassert solution('1 2 3 4 5 6 7') == '4.0'\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == \"4.0\"\nassert solution(\"4 2\\n2 4 3 4\") == \"3.666666\"\n\nimport sys\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == \"4.0\"\nassert solution(\"4 2\\n2 4 3 4\") == \"3.666666\"\n\"\"\""
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"4 1\\n1 2 3 4\") == '4.0'\nassert solution(\n    \"4 2\\n2 4 3 4\") == '3.666666'\n\nSample Input 1:\n4 1\n5 10 3 4\nSample Output 1:\n10.0\n\nSample Input 2:\n4 1\n5 10 5 10\nSample Output 2:\n5.0\n\nSample Input 3:\n3 1\n4 3 1\nSample Output 3:\n3.0\n\nSample Input 4:\n3 1\n4 3 2\nSample Output 4:\n3.0\n\"\"\""
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(0) == 0\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\n\nfrom typing import List\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == \"4.0\"\nassert solution(\"4 2\\n2 4 3 4\") == \"3.666666\""
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0'\nassert solution('4 2\\n2 4 3 4') == '3.666666'\n\"\"\""
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == '4.0'\nassert solution(\"4 2\\n2 4 3 4\") == '3.666666'\n\"\"\"\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\nbest_sum = 0\nbest_len = 0\nbest_sum_ind = []\nbest_len_ind = []"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == '4.0'\nassert solution(\"4 2\\n2 4 3 4\") == '3.666666'\n\nimport sys\nfrom functools import reduce"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0') == '0.750'\n\"\"\""
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == \"0.750\"\n\n\"\"\""
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == \"0.750\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0') == '0.750'\nassert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0') == '0.625'\n\"\"\"\n\nimport itertools\nimport math\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        num_sections, num_colors, box_width, box_height = [int(v) for v in stdin.split(' ')]\n        sand_volume = [float(v) for v in stdin.split('\\n')[1].split(' ')]\n        min_sand_per_section = []\n        max_sand_per_section = []\n\n        sand_volume_per_section = [0] * num_sections\n        for i in range(num_sections):\n            min_sand_per_section.append(float(stdin.split('\\n')[i * num_colors + 2]))\n            max_sand_per_section.append(float(stdin.split('\\n')[i * num_colors + 3]))\n            sand_volume_per_section[i] = sum(sand_volume[j] for j in range(i * num_colors, (i + 1) * num_colors))\n\n        distribution = {\n            (i, j): math.inf\n            for i in range(num_sections)\n            for j in range(num_colors)\n        }\n        for i, j, k in itertools.product(range(num_sections), range(num_colors), range(num_sections)):\n            if i == k:\n                distribution[i, j] = -math.inf\n            else:\n                distribution[i, j] = min_sand_per_section[i] - max_sand_per_section[i]\n\n        distribution[num_sections - 1, :] = math.inf\n\n        for i, j in itertools.product(range(num_sections - 1), range(num_colors)):\n            distribution[num_sections - 1, j] = max(\n                distribution[num_sections - 1, j],\n                distribution[i, j],\n            )\n\n        for i in range(num_sections - 2, -1, -1):\n            for j in range(num_colors):\n                distribution[i, j] = min(\n                    distribution[i, j],\n                    distribution[i + 1, j] + max_sand_per_section[i] - min_sand_per_section[i],\n                )\n\n        distribution[0, :] = math.inf\n\n        for j in range(num_colors):\n            distribution[0, j] = max(\n                distribution[0, j],\n                sand_volume_per_section[0] - distribution[0 + 1, j] + min_sand_per_section[0],\n            )\n\n        for i in range(1, num_sections):\n            for j in range(num_colors):\n                distribution[i, j] = min(\n                    distribution[i, j],\n                    distribution[i - 1, j] + distribution[i, j - 1] - distribution[i - 1, j - 1] + max_sand_per_section[i] - min_sand_per_section[i],\n                )\n\n        return str(round(max(distribution[0, j], -distribution[num_sections - 1, j]), 3))\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == '0.750'\n\"\"\""
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == \"0.750\"\nassert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0\") == \"0.625\"\n\"\"\"\nimport math\n\nn, m, w, h = [int(i) for i in stdin.split()]\n\nsand = [float(i) for i in stdin.split(\"\\n\")[1].split(\"\\n\")[:-1]]\n\nx = [float(i) for i in stdin.split(\"\\n\")[3].split(\"\\n\")[:-1]]\n\nmin_heights = [float(i) for i in stdin.split(\"\\n\")[4:]]\n\nmax_heights = [float(i) for i in stdin.split(\"\\n\")[5:]]\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == \"0.750\"\nassert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0\") == \"0.625\"\n\n\"\"\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0') == '0.750'\nassert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0') == '0.625'"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == \"0.750\"\n\"\"\"\n\nimport os\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0') == '0.750'\nassert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0') == '0.625'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3\\n') == '2'\n\"\"\"\nimport itertools\nimport functools"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\ntry:\n    assert solution('4 2') == '37'\n    assert solution('1 3') == '2'\nexcept AssertionError:\n    print('Input:')\n    print(stdin)\n    print('Exception:')\n    print('2')\nelse:\n    print('No exceptions')\nfinally:\n    print('Finished')\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n3 4\") == \"2\"\nassert solution(\"3 3\\n1 2 4\\n0 3 6\\n4 0 3\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 4\\n0 3 6\\n4 0 3\") == 2\n\"\"\""
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 3\n1 2 4\n0 3 6\n4 0 3''') == '2'\n\nassert solution('''3 4\n2 3 0 7\n0 0 2 1\n0 0 3 0''') == '37'\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 3\n1 2 4\n0 3 6\n4 0 3''') == 2\n\nassert solution('''3 4\n2 3 0 7\n0 0 2 1\n0 0 3 0''') == 37\n\nprint(solution(stdin.strip()))\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3\\n') == 2\n\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 2 4\\n0 3 6\\n4 0 3\") == \"2\"\nassert solution(\"3 4\\n2 3 0 7\\n0 0 2 1\\n0 0 3 0\") == \"37\""
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2 4\\n0 3 6\\n4 0 3\") == \"2\"\nassert solution(\"4 4\\n2 3 0 7\\n0 0 2 1\\n0 0 3 0\\n0 0 1 0\") == \"37\"\n\n\"\"\""
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"10\\n14\\n18\"\nassert solution(\"4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"1\\n4\\n9\\n16\"\n\"\"\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234\\n1 1\\n1 2\\n1 3\\n1 4\\n\") == \"1\\n4\\n9\\n16\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\nl = list(map(int, stdin.readline().split()))\na, b = [int(x) for x in stdin.readline().split()]\n\nres = 0\nfor i in range(b - a + 1):\n    res += l[i]\n\nprint(res)\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\\n\") == \"10\\n14\\n18\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1234\\n1 4\\n1 4\\n1 4\\n') == '10\\n14\\n18\\n16'\n\n\"\"\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4') == '10\\n14\\n18'\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1234\\n1 4\\n1 4\\n1 4\") == \"10\\n14\\n18\"\nassert solution(\"4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"1\\n4\\n9\\n16\"\nassert solution(\"8 25\\n123487654321\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\") == \"1\\n4\\n9\\n16\\n25\"\nassert solution(\"8 25\\n123456789\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\") == \"1\\n4\\n9\\n16\\n25\"\nassert solution(\"5 25\\n123456789\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\") == \"1\\n4\\n9\\n16\\n25\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4') == '10\\n14\\n18\\n16'\nassert solution('4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4') == '1\\n4\\n9\\n16'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"10\\n14\\n18\"\n\n\"\"\"\n\nimport unittest\n\nimport fileinput\n\nfrom collections import namedtuple\n\nclass FixtureTestCase(unittest.TestCase):\n    def setUp(self):\n        self.test_cases = []\n        for line in fileinput.input():\n            line = line.rstrip()\n            if line:\n                self.test_cases.append(line)\n\n\nclass Test(FixtureTestCase):\n    def test_solution(self):\n        for test_case in self.test_cases:\n            self.assertEqual(solution(test_case), \"10\\n14\\n18\")\n\n\nTestCase = namedtuple('TestCase', ['name', 'input_file','result_file'])\n\ntest_cases = [\n    TestCase(name='0', input_file='0.in', result_file='0.out',\n    ),\n    TestCase(name='1', input_file='1.in', result_file='1.out',\n    ),\n    TestCase(name='2', input_file='2.in', result_file='2.out',\n    ),\n    TestCase(name='3', input_file='3.in', result_file='3.out',\n    ),\n    TestCase(name='4', input_file='4.in', result_file='4.out',\n    ),\n    TestCase(name='5', input_file='5.in', result_file='5.out',\n    ),\n]\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"10\\n14\\n18\"\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"10\\n14\\n18\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\") == \"2\"\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\") == \"1\"\n\"\"\"\nimport math"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\\n\") == \"2\"\n\n\"\"\"\n\nfrom sys import stdin\nfrom typing import Set, Dict"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\\n\") == \"2\"\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n\") == \"1\""
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\\n\") == \"2\"\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n\") == \"1\"\n\n-------------"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\\n\") == \"2\"\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n\") == \"1\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 2 3\n1 3\n2 3\n3 4''') == '2'\nassert solution('''5 2 4\n1 3\n3 4\n2 4\n4 5''') == '1'\n\n\"\"\"\nhttps://www.codewars.com/kata/5a0784b3c831ebd5e50013b2\n\"\"\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\") == \"2\"\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\\n\") == \"2\"\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n\") == \"1\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 2 3\n1 3\n2 3\n3 4\n''') == '2'\n\nassert solution('''5 2 4\n1 3\n3 4\n2 4\n4 5\n''') == '1'\n\nassert solution('''5 2 4\n1 3\n3 4\n2 4\n4 5\n''') == '1'\n\nassert solution('''5 2 4\n1 3\n3 4\n2 4\n3 5\n''') == '0'\n\nassert solution('''5 2 4\n1 3\n3 4\n2 4\n4 5\n''') == '0'\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 2 3\n1 3\n2 3\n3 4\n''') == '2'\n\nassert solution('''5 2 4\n1 3\n3 4\n2 4\n4 5\n''') == '1'\n\nassert solution('''5 3 2\n1 3\n2 4\n3 5\n4 5\n''') == '0'\n\nassert solution('''5 2 5\n1 2\n1 3\n1 4\n2 4\n3 4\n3 5\n4 5\n''') == '2'\n\nassert solution('''5 3 2\n1 2\n1 3\n1 4\n2 4\n3 4\n3 5\n4 5\n''') == '0'"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"no\"\nassert solution(\"2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\") == \"no\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1\n10000 0 10000 10000 0 10000''') == 'no'\nassert solution('''2\n9996 0 9997 0 0 1\n9999 0 10000 0 0 1''') == 'no'\nassert solution('''1\n10000 0 10000 10000 0 10000''') == 'yes'\nassert solution('''2\n9996 0 9997 0 0 1\n9997 0 9998 0 0 1''') == 'yes'\n\nprint('Successfully passed!')\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"no\"\nassert solution(\"10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"no\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"no\"\nassert solution(\"2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\") == \"no\"\n\"\"\""
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\\n\") == 'no'\nassert solution(\"10000 0 10000 10000 0 10000\\n2\\n9999 0 10000 0 0 1\\n9999 0 10000 0 0 1\\n\") == 'no'\nassert solution(\"10000 0 10000 10000 0 10000\\n1\\n9999 0 10000 0 0 1\\n\") == 'yes'\nassert solution(\"10000 0 10000 10000 0 10000\\n0\\n9999 0 10000 0 0 1\\n\") == 'yes'\n\n\"\"\""
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\") == \"no\"\nassert solution(\"1\\n10000 0 10000 10000 0 10000\") == \"yes\"\nassert solution(\"1\\n9999 0 10000 0 0 1\") == \"yes\"\nassert solution(\"1\\n10000 0 10000 0 0 10000\") == \"no\""
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"no\"\n\n\"\"\""
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == 'no'\nassert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == 'yes'\nassert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == 'no'\n\n\"\"\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"no\"\nassert solution(\"2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\") == \"no\"\n\"\"\"\n\n\n\"\"\"\nn, m = map(int, stdin.readline().strip().split())\ns1 = set()\nfor _ in range(n):\n    s1.add(tuple(map(int, stdin.readline().strip().split())))\ns2 = set()\nfor _ in range(m):\n    s2.add(tuple(map(int, stdin.readline().strip().split())))\nprint('yes' if s1 == s2 else 'no')\n\"\"\"\n\n\"\"\"\nSolution Explanation:\nThe triangles are represented as sets because it is an efficient way to record a finite set of points. If we represent them as lists, they will take up too much memory.\n\nThe algorithm is as follows:\n\nIterate through the first set and collect its set of points.\n\nIterate through the second set and collect its set of points.\n\nFor each point in the first set:\n\nCheck whether the point is in the second set. If it is, check which triangles share the point.\n\nIf the point is not in the second set, it means the point is in the intersection of the triangles.\n\nOtherwise, the point is in the union of the triangles.\n\nIterate through the second set and check if the point is in the first set. If it is not, then the point is in the union of the triangles.\n\nIterate through the second set and check if the point is in the first set. If it is, check which triangles share the point.\n\nIf the point is not in the first set, it means the point is in the intersection of the triangles.\n\nOtherwise, the point is in the union of the triangles.\n\nIterate through the first set and check if the point is in the second set. If it is not, then the point is in the union of the triangles.\n\nIterate through the first set and check if the point is in the second set. If it is, check which triangles share the point.\n\nIf the point is not in the second set, it means the point is in the intersection of the triangles.\n\nOtherwise, the point is in the union of the triangles.\n\nIterate through the second set and check if the point is in the first set. If it is not, then the point is in the union of the triangles.\n\nIterate through the second set and check if the point is in the first set. If it is, check which triangles share the point.\n\nIf the point is not in the first set, it means the point is in the intersection of the triangles.\n\nOtherwise, the point is in the union of the triangles.\n\nIterate through the first set and check if the point is in the second set. If it is not, then the point is in the union of the triangles.\n\nIterate through the first set and check if the point is in the second set. If it is, check which triangles share the point.\n\nIf the point is not in the second set, it means the point is in the intersection of the triangles.\n\nOtherwise, the point is in the union of the triangles.\n\nIterate through the second set and check if the point is in the first set. If it is not, then the point is in the union of the triangles.\n\nIterate through the second set and check if the point is in the first set. If it is, check which triangles share the point.\n\nIf the point is not in the first set, it means the point is in the intersection of the triangles.\n\nOtherwise, the point is in the union of the triangles.\n\nIterate through the first set and check if the point is in the second set. If it is not, then the point is in the union of the triangles.\n\nIterate through the first set and check if the point is in the second set. If it is, check which triangles share the point.\n\nIf the point is not in the second set, it means the point is in the intersection of the triangles.\n\nOtherwise, the point is in the union of the triangles.\n\nIterate through the second set and check if the point is in the first set. If it is not, then the point is in the union of the triangles.\n\nIterate through the second set and check if the point is in the first set. If it is, check which triangles share the point.\n\nIf the point is not in the first set, it means the point is in the intersection of the triangles.\n\nOtherwise, the point is in the union of the triangles.\n\nIterate through the first set and check if the point is in the second set. If it is not, then the point is in the union of the triangles.\n\nIterate through the first set and check if the point is in the second set. If it is, check which triangles share the point.\n\nIf the point is not in the second set, it means the point is in the intersection of the triangles.\n\nOtherwise, the point is in the union of the triangles.\n\nIterate through the second set and check if the point is in the first set. If it is not, then the point is in the union of the triangles.\n\nIterate through the second set and check if the point is in the first set. If it is, check which triangles share the point.\n\nIf the point is not in the first set, it means the point is in the intersection of the triangles.\n\nOtherwise, the point is in the union of the triangles.\n\nIterate through the first set and check if the point is in the second set. If it is not, then the point is in the union of the triangles.\n\nIterate through the first set and check if the point is in the second set. If it is, check which triangles share the point.\n\nIf the point is not in the second set, it means the point is in the intersection of the triangles.\n\nOtherwise, the point is in the union of the triangles.\n\nIterate through the second set and check if the point is in the first set. If it is not, then the point is in the union of the triangles.\n\nIterate through the second set and check if the point is in the first set"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\\n\") == \"no\"\nassert solution(\"2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n\") == \"no\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 3\\n') == 'YES\\n1 3\\n2 1\\n3 2\\n'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2\\n2 3\\n1 3\\n\") == \"YES\\n1 3\\n2 1\\n3 2\\n\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n\") == \"NO\\n\"\nprint('Success')"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 3') == 'YES\\n1 3\\n2 1\\n3 2'\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2\\n2 3\\n1 3\\n\") == 'YES\\n1 3\\n2 1\\n3 2'\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n\") == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 3\\n') == 'YES\\n1 3\\n2 1\\n3 2'\nassert solution('4 3\\n1 2\\n1 3\\n1 4\\n') == 'NO'"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 3\\n') == 'YES\\n1 3\\n2 1\\n3 2'\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 3\n1 2\n2 3\n1 3\n1 4''') == 'YES\\n1 4\\n2 1\\n3 2'\n\nassert solution('''4 3\n1 2\n1 3\n1 4\n1 5''') == 'NO'\n\nassert solution('''5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n1 5\n2 4\n2 3\n3 4\n3 5\n3 1\n2 2\n5 5\n5 3\n3 3\n1 2\n3 4\n1 3\n3 1\n2 1\n4 4\n1 5\n4 3\n2 4\n4 5\n4 1\n4 2\n3 2\n2 2\n5 2\n5 3\n2 5\n1 4''') == 'YES\\n1 2\\n1 3\\n1 4\\n1 5\\n2 1\\n2 3\\n2 4\\n2 5\\n3 1\\n3 2\\n3 4\\n3 5\\n4 1\\n4 2\\n4 3\\n4 5\\n5 1\\n5 2\\n5 3\\n5 4\\n5 5'\n\nassert solution('''7 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1\n1 7\n2 5\n5 1\n6 1\n5 4\n5 5\n4 6\n2 4\n5 6\n3 4\n4 2\n2 6\n3 6\n6 4\n1 6\n3 5\n4 4\n6 7\n6 1\n2 7\n3 6\n2 3\n2 6\n1 2\n6 5\n3 1\n5 4\n5 3\n3 5\n6 7\n2 2\n4 7\n4 4\n1 4\n1 5\n2 3\n3 7''') == 'YES\\n1 2\\n1 3\\n1 4\\n1 5\\n2 1\\n2 3\\n2 4\\n2 5\\n3 1\\n3 2\\n3 3\\n3 4\\n3 5\\n4 1\\n4 2\\n4 3\\n4 4\\n4 5\\n5 1\\n5 2\\n5 3\\n5 4\\n5 5\\n6 1\\n6 2\\n6 3\\n6 4\\n6 5\\n7 1\\n7 2\\n7 3\\n7 4\\n7 5\\n7 6'\n\nassert solution('''4 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n4 1\n4 2\n4 3\n4 6\n1 2\n4 5\n4 6\n1 4\n3 2\n2 3\n2 4\n1 1\n3 3\n2 2\n3 1\n2 3\n3 4\n3 5\n5 3\n3 4\n5 2\n5 6\n3 1\n2 5\n1 3\n5 3\n1 6\n3 2\n1 5\n4 6\n3 5\n6 4\n1 2\n2 3\n2 5\n2 6\n5 4\n6 1\n4 3\n5 4\n6 2\n3 1\n3 5\n5 6\n4 2\n2 6\n5 1\n6 3\n5 5\n6 5\n2 4\n4 6\n2 3\n5 1\n1 2\n3 1\n2 6\n5 3\n4 1\n2 3\n1 6\n3 2\n5 2\n5 4\n6 1\n3 4\n6 5\n3 6\n5 4\n3 1\n5 5\n1 5\n4 3\n5 6\n6 1\n2 4\n1 1\n3 3\n3 5\n3 4\n6 5\n6 4\n3 1\n2 1\n3 2\n2 4\n3 1\n5 6\n5 5\n1 4\n4 6\n4 3\n2 1\n1 4\n3 2\n5 2\n4 3\n6 3\n3 1\n4 1\n6 1\n3 6\n5 2\n2 4\n5 6\n4 1\n1 2\n4 1\n3 3\n5 4\n2 5\n3 1\n2 1\n3 4\n1 4\n2 5\n5 6\n5 4\n5 4\n5 1\n5 5\n3 5\n5 1\n5 1\n6 6\n5 4\n4 1\n1 6\n6 5\n1 6\n5 6\n5 1\n1 5\n6 1\n3 5\n5 3\n5 4\n1 2\n3 1\n4 2\n6 3\n3 5\n3 6\n5 3\n3 2\n4 6\n3 6\n4 3\n5 1\n5 6\n6 6\n5 4\n1 1\n2 1\n3 1\n2 2\n6 5\n2 5\n1 6\n4 1\n5 3\n5 2\n1 4\n4 6\n1 3\n6 3\n4 3\n5 3\n2 3\n3 5\n6 2\n1 3\n3 6\n1 2\n3 1\n1 5\n3 2\n5 3\n3 6\n6 6\n4 5\n2 6\n2 6\n4 3\n2 3\n3 5\n2 3\n5 1\n3 5\n3 4\n1 3\n5 6\n5 5\n3 2\n6 1\n6 4\n1 5\n5 5\n4 5\n3 1\n3 2\n4 5\n3 1\n1 3\n2 5\n1 6\n2 5\n5 6\n5 6\n2 1\n3 4\n3 4\n3 5\n5 6\n6 4\n5 6\n4 5\n4 2\n6 1\n5 6\n5 1\n1 5\n5 1\n3 6\n6 2\n4 5\n4 6\n6 5\n5 5\n4 1\n3 6\n4 6\n4 1\n5 6\n4 6\n6 4\n5 4\n5 6\n3 1\n4 4\n4 6\n3 5\n2 1\n5 1\n3 3\n2 5\n5 4\n2 5\n1 4\n4 1\n5 6\n6 1\n1 3\n2 6\n2 5\n1 3\n5 1\n1 4\n2 4\n3 6\n3 4\n6 4\n6 1\n4 1\n1 3\n1 4\n2 5\n5 5\n4 5\n2 1\n5 5\n2 3\n3 1\n3 6\n5 1\n1 4\n3 1\n2 2\n4 4\n3 4\n1 4\n3 3\n4 4\n2 5\n5 1\n2 3\n1 5\n5 2\n1 6\n6 2\n5 5\n2 3\n4 2\n2 1\n3 1\n4 6\n5 5\n4 2\n3 6\n5 5\n3 2\n1 3\n5 3\n1 2\n5 4\n3 6\n5 5\n2 6\n2 3\n3 6\n6 4\n5 1\n4 6\n6 1\n4 6\n4 6\n2 2\n5 4\n4 1\n5 3\n6 1\n1 2\n2 4\n4 6\n5 5\n1 2\n5 3\n1 5\n6 4\n3 6\n5 2\n5 6\n3 6\n1 4\n4 3\n2 4\n3 3\n5 5\n1 6\n4 5\n2 6\n3 6\n2 3\n4 4\n3 6\n5 6\n6 5\n3 4\n6 4\n1 2\n4 2\n3 6\n3 2\n6 3\n3 4"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 2\\n2 3\\n1 3\\n\") == \"YES\\n1 3\\n2 1\\n3 2\\n\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'NO'\nassert solution('1\\n2') == 'YES\\n1 2\\n2 1'\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2\\n2 3\\n1 3\\n\") == \"YES\\n1 3\\n2 1\\n3 2\\n\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\ninput = open(sys.argv[1], 'r').readlines()"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n0 > 1\\n1 = 2\\n0 = 2\") == \"inconsistent\"\n\"\"\""
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n0 > 1\\n1 = 2\\n0 = 2\") == \"inconsistent\"\nassert solution(\"5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4\") == \"consistent\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n0 > 1\\n1 = 2\\n0 = 2') == \"inconsistent\"\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4') == \"consistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('3 2') == 'inconsistent'\nassert solution('3 1') == 'inconsistent'\nassert solution('3 3') == 'consistent'\nassert solution('5 5') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n0 > 1\\n1 = 2\\n0 = 2\") == \"inconsistent\"\nassert solution(\"5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4\") == \"consistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n0 > 1\\n1 = 2\\n0 = 2\") == \"inconsistent\"\n\"\"\""
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2''') == 'inconsistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4''') == 'consistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 = 5\n1 > 2''') == 'inconsistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 = 5\n1 = 2''') == 'consistent'\n\n'''\nGiven n, m = stdin.readline().split()\nassert len(m) == 2\n"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n0 > 1\\n1 = 2\\n0 = 2\") == \"inconsistent\"\nassert solution(\"5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4\") == \"consistent\""
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n0 > 1\\n1 = 2\\n0 = 2\") == \"inconsistent\"\nassert solution(\"5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4\") == \"consistent\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\nassert solution('4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0') == '41938.65135885'\nassert solution('5\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n0 0 1') == '41938.65135885'\n\nprint(solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1'))\nprint(solution('5\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n0 0 1'))\nprint(solution('5\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n0 0 1'))\n\nprint(solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1'))\nprint(solution('5\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n0 0 1'))\nprint(solution('5\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n0 0 1'))\n\"\"\"\n\nimport math"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\n\"\"\""
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == '1.57079633'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == \"1.57079633\"\n\n\"\"\"\n\n\nimport math\nimport sys\nimport os\nimport time\nfrom collections import Counter\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == \"1.57079633\"\n\n\"\"\""
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == \"1.57079633\"\nassert solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\") == \"41938.65135885\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('foo') == 'foo'\n\nimport sys\nfrom typing import Any, Dict"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n\") == \"1.57079633\"\nassert solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n\") == \"41938.65135885\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == \"1.57079633\"\n\"\"\"\n\nimport math\n\nnum_stars = int(input())\n\ncoordinates = []\nfor _ in range(num_stars):\n    x, y, z = [int(n) for n in input().split()]\n    coordinates.append((x, y, z))"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == \"1.57079633\"\nassert solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\") == \"41938.65135885\"\n\"\"\"\nimport math\nfrom itertools import combinations"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\") == 3\nassert solution(\"trutrutiktiktappop\") == 4\n\"\"\"\n\nimport re\n\ns = input()\n\nwords = re.findall(r'(\\w+)', s)"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11\\nsabcabcfabc') == '3'\nassert solution('18\\ntrutrutiktiktappop') == '4'\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('a') == 1\nassert solution('ab') == 1\nassert solution('aba') == 2\nassert solution('abab') == 2\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11\\nsabcabcfabc\") == \"3\"\nassert solution(\"18\\ntrutrutiktiktappop\") == \"4\""
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcd') == 'abcd'\nassert solution('abab') == 'ab'\nassert solution('abababab') == 'abab'\nassert solution('abc') == 'abc'\nassert solution('abcdab') == 'ab'\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\") == 3\nassert solution(\"sabcabcfabc\") == 3\n\n\"\"\""
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\", \"sabcabcfabc\") == 3\nassert solution(\"18\", \"trutrutiktiktappop\") == 4\n\n\"\"\""
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"3\"\nassert solution(\"sabcabcfabc\") == \"3\"\nassert solution(\"trutrutiktiktappop\") == \"4\"\n\nimport sys"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\\nsabcabcfabc\") == 3\n\"\"\""
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == \"3\"\nassert solution(\"18\") == \"4\"\nassert solution(\"22\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 1\\n3 1 2\") == \"2\"\nassert solution(\"6\\n5 1 6 3 2 4\") == \"5\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 3 1\\n3 1 2') == '2'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 3 1\\n3 1 2\") == \"2\"\nassert solution(\"6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\") == \"5\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\\n3 1 2\") == 2\n\"\"\"\n\nimport sys\nimport math\nfrom collections import defaultdict\nimport bisect\n\nsys.setrecursionlimit(10 ** 6)\n\nINF = float('inf')\nmod = 10 ** 9 + 7\nMOD = 998244353\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n2 3 1\n3 1 2\n    \"\"\") == 2\n\nassert solution(\"\"\"\n6\n5 1 6 3 2 4\n4 6 5 1 3 2\n    \"\"\") == 5\n\nassert solution(\"\"\"\n9\n9 2 6 3 7 1 8 5 4\n6 7 2 3 8 1 9 4 5\n\"\"\") == 13\n\nassert solution(\"\"\"\n12\n10 11 12 1 2 3 4 5 6 7 8 9 10\n10 1 12 11 3 2 4 5 6 7 8 9 10\n\"\"\") == 20\n\nassert solution(\"\"\"\n20\n2 14 12 13 19 1 21 20 10 6 16 15 19\n19 20 10 21 13 14 1 16 9 7 5 12 2 13 14 10 15\n\"\"\") == 20"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3 1\\n3 1 2\") == \"2\"\nassert solution(\"6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 3 1\\n3 1 2\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3 1\\n3 1 2\") == \"2\"\nassert solution(\"6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\") == \"5\"\n\"\"\""
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3 1\\n3 1 2\") == 2\nassert solution(\"6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\") == 5\n\"\"\"\n\n\"\"\"\nn = input()\ncards = input().split()\ncards = [int(x) for x in cards]\n\nshuffle = [None for _ in range(len(cards))]\nfor i in range(len(cards)):\n    shuffle[cards[i] - 1] = i\n\na = cards[:]\nb = cards[:]\nfor _ in range(1, 1000001):\n    for i in range(len(cards)):\n        cards[i] = shuffle[cards[i]]\n    if a == cards:\n        break\n    if b == cards:\n        break\n    a = cards[:]\n    b = cards[:]\n\nprint(_ if _ < 1000000 else \"huge\")\n\"\"\"\n\nn = int(input())\ncards = [int(x) for x in input().split()]\n\nshuffle = [None for _ in range(n)]\nfor i in range(n):\n    shuffle[cards[i] - 1] = i\n\na = cards[:]\nb = cards[:]\nfor _ in range(1, 1000001):\n    for i in range(n):\n        cards[i] = shuffle[cards[i]]\n    if a == cards:\n        break\n    if b == cards:\n        break\n    a = cards[:]\n    b = cards[:]\n\nprint(_ if _ < 1000000 else \"huge\")\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3 1\\n3 1 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\\n\") == \"4\"\nassert solution(\"6 1\\n0 10 20 26 40 50\\n0 40\\n\") == \"9\"\nprint('Success')\n\"\"\""
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\") == \"4\"\nassert solution(\"6 1\\n0 10 20 26 40 50\\n0 40\") == \"9\"\nassert solution(\"10 5\\n0 4\\n0 8\\n0 12\\n0 16\\n0 20\\n0 24\\n0 28\\n0 32\\n0 36\\n0 40\\n0 44\\n0 48\\n0 52\\n0 56\\n0 60\\n0 64\\n0 68\\n0 72\\n0 76\\n0 80\\n0 84\\n0 88\\n0 92\\n0 96\\n0 100\\n0 104\\n0 108\\n0 112\\n0 116\\n0 120\\n0 124\\n0 128\\n0 132\\n0 136\\n0 140\\n0 144\\n0 148\\n0 152\\n0 156\\n0 160\\n0 164\\n0 168\\n0 172\\n0 176\\n0 180\\n0 184\\n0 188\\n0 192\\n0 196\\n0 200\\n0 204\\n0 208\\n0 212\\n0 216\\n0 220\\n0 224\\n0 228\\n0 232\\n0 236\\n0 240\\n0 244\\n0 248\\n0 252\\n0 256\\n0 260\\n0 264\\n0 268\\n0 272\\n0 276\\n0 280\\n0 284\\n0 288\\n0 292\\n0 296\\n0 300\\n0 304\\n0 308\\n0 312\\n0 316\\n0 320\\n0 324\\n0 328\\n0 332\\n0 336\\n0 340\\n0 344\\n0 348\\n0 352\\n0 356\\n0 360\\n0 364\\n0 368\\n0 372\\n0 376\\n0 380\\n0 384\\n0 388\\n0 392\\n0 396\\n0 400\") == \"9\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\\n\") == '4'\nassert solution(\"6 1\\n0 10 20 26 40 50\\n0 40\\n\") == '9'"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 1\n0 10 20\n0 10''') == '4'\nprint('Test 1: PASS')\n\nassert solution('''6 1\n0 10 20 26 40 50\n0 40''') == '9'\nprint('Test 2: PASS')\n\nassert solution('''6 1\n0 10 20 26 40 50\n0 40\n''') == '9'\nprint('Test 3: PASS')\n\nassert solution('''1 1\n0 10''') == '10'\nprint('Test 4: PASS')\n\nassert solution('''6 1\n0 10 20 26 40 50\n0 40\n0 80\n0 100\n0 150\n0 200\n0 250\n0 300\n0 400\n0 500\n0 600\n0 700\n0 800\n0 900\n0 1000\n0 1100\n0 1200\n0 1300\n0 1400\n0 1600\n0 1700\n0 1800\n0 1900\n0 2000\n0 2100\n0 2200\n0 2300\n0 2400\n0 2500\n0 2600\n0 2700\n0 2800\n0 2900\n0 3000\n0 3100\n0 3200\n0 3300\n0 3400\n0 3500\n0 3600\n0 3700\n0 3800\n0 3900\n0 4000\n0 4100\n0 4200\n0 4300\n0 4400\n0 4500\n0 4600\n0 4700\n0 4800\n0 4900\n0 5000\n0 5100\n0 5200\n0 5300\n0 5400\n0 5500\n0 5600\n0 5700\n0 5800\n0 5900\n0 6000\n0 6100\n0 6200\n0 6300\n0 6400\n0 6500\n0 6600\n0 6700\n0 6800\n0 6900\n0 7000\n0 7100\n0 7200\n0 7300\n0 7400\n0 7500\n0 7600\n0 7700\n0 7800\n0 7900\n0 8000\n0 8100\n0 8200\n0 8300\n0 8400\n0 8500\n0 8600\n0 8700\n0 8800\n0 8900\n0 9000\n0 9100\n0 9200\n0 9300\n0 9400\n0 9500\n0 9600\n0 9700\n0 9800\n0 9900\n0 10000\n0 11000\n0 12000\n0 13000\n0 14000\n0 15000\n0 16000\n0 17000\n0 18000\n0 19000\n0 20000\n0 21000\n0 22000\n0 23000\n0 24000\n0 25000\n0 26000\n0 27000\n0 28000\n0 29000\n0 30000\n0 31000\n0 32000\n0 33000\n0 34000\n0 35000\n0 36000\n0 37000\n0 38000\n0 39000\n0 40000\n0 41000\n0 42000\n0 43000\n0 44000\n0 45000\n0 46000\n0 47000\n0 48000\n0 49000\n0 50000\n0 51000\n0 52000\n0 53000\n0 54000\n0 55000\n0 56000\n0 57000\n0 58000\n0 59000\n0 60000\n0 61000\n0 62000\n0 63000\n0 64000\n0 65000\n0 66000\n0 67000\n0 68000\n0 69000\n0 70000\n0 71000\n0 72000\n0 73000\n0 74000\n0 75000\n0 76000\n0 77000\n0 78000\n0 79000\n0 80000\n0 81000\n0 82000\n0 83000\n0 84000\n0 85000\n0 86000\n0 87000\n0 88000\n0 89000\n0 90000\n0 91000\n0 92000\n0 93000\n0 94000\n0 95000\n0 96000\n0 97000\n0 98000\n0 99000\n0 100000\n0 110000\n0 120000\n0 130000\n0 140000\n0 150000\n0 160000\n0 170000\n0 180000\n0 190000\n0 200000\n0 210000\n0 220000\n0 230000\n0 240000\n0 250000\n0 260000\n0 270000\n0 280000\n0 290000\n0 300000\n0 310000\n0 320000\n0 330000\n0 340000\n0 350000\n0 360000\n0 370000\n0 380000\n0 390000\n0 400000\n0 410000\n0 420000\n0 430000\n0 440000\n0 450000\n0 460000\n0 470000\n0 480000\n0 490000\n0 500000\n0 510000\n0 520000\n0 530000\n0 540000\n0 550000\n0 560000\n0 570000\n0 580000\n0 590000\n0 600000\n0 610000\n0 620000\n0 630000\n0 640000\n0 650000\n0 660000\n0 670000\n0 680000\n0 690000\n0 700000\n0 710000\n0 720000\n0 730000\n0 740000\n0 750000\n0 760000\n0 770000\n0 780000\n0 790000\n0 800000\n0 810000\n0 820000"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\") == \"4\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\") == \"4\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n0 10 20\\n0 10') == '4'\n\"\"\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\") == \"4\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\") == \"4\"\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 1\n0 10 20\n0 10''') == '4'\nassert solution('''6 1\n0 10 20 26 40 50\n0 40''') == '9'\n\"\"\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(concat(shuffle([1,2]),shuffle([1,2]))) == 'not equal'\nassert solution(sorted(concat([3,2,1],[4,5,6]))) == 'equal'\n\"\"\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]\") == \"equal\"\n\"\"\"\n\n\nimport math\nimport random\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n\nprint(solution(input))\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == output\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))''') == 'not equal'\nassert solution('''sorted(concat([3,2,1],[4,5,6]))''') == 'equal'\n\n\"\"\"\n\nimport operator\n\n\nclass Plox:\n    def __init__(self, s):\n        self.s = s\n        self.i = 0\n\n    def take_until(self, s):\n        l = len(s)\n        if self.s[self.i:self.i + l] == s:\n            self.i += l\n            return s\n        return ''\n\n    def take_until_ignore(self, s):\n        l = len(s)\n        if self.s[self.i:self.i + l] == s:\n            self.i += l\n            return s\n        return ''\n\n    def take_int(self):\n        s = self.take_until(']')\n        if len(s) == 0:\n            return None\n        i = int(s)\n        self.i += len(s) + 1\n        return i\n\n    def take_str(self):\n        s = self.take_until('\"')\n        if len(s) == 0:\n            return None\n        return s\n\n    def skip(self, n):\n        self.i += n\n\n    def peek(self):\n        return self.s[self.i]\n\n    def error(self):\n        self.error(self.i)\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))') == 'equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))') == 'equal'\n\n\"\"\"\n\n\nfrom collections import defaultdict, Counter, OrderedDict, deque\nfrom itertools import permutations\nfrom math import ceil, log2, floor, gcd, sqrt\nfrom random import randint\nfrom decimal import *\nfrom sys import stdin,stdout\nfrom bisect import bisect_left, bisect_right\nfrom copy import deepcopy\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])''') == 'not equal'\nassert solution('''sorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]''') == 'equal'\nassert solution('''sorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]''') == 'equal'\nassert solution('''sorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]''') == 'equal'\nassert solution('''sorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]''') == 'equal'\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str1) == str2\nprint(str1)\n\n----\n\nfrom collections import deque, defaultdict\nfrom random import random\nfrom typing import Deque, Dict, List, Optional, Tuple\n\n\nclass Node(object):\n    def __init__(self, value: Optional[int] = None) -> None:\n        self.value = value\n        self.children: Dict[str, \"Node\"] = {}\n        self.parent: Optional[\"Node\"] = None\n        self.length: int = 0\n\n    def add_child(self, child: str, node: \"Node\") -> None:\n        self.children[child] = node\n        node.parent = self\n        node.length = self.length + 1\n\n    def remove_child(self, child: str) -> None:\n        del self.children[child]\n\n    def __str__(self) -> str:\n        return f\"{self.value}\"\n\n    def __repr__(self) -> str:\n        return f\"{self.value}\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])''') == 'not equal'\n\nassert solution('''sorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]''') == 'equal'"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n3 2\\n1 2 1 2\\n2 3 1 2') == 'Oh no'\nassert solution('1 3\\n3 2\\n1 2 1 2\\n2 3 1 2') == '1'\n\nimport os\nimport sys"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\n\"\"\""
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n3 2\\n1 2 1 2\\n2 3 1 2') == 'Oh no'\nassert solution('1 3\\n3 2\\n1 2 1 2\\n2 3 1 2') == '1'\n\"\"\""
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\nassert solution(\"1 2\\n1 1 1 2\\n2 3 1 2\") == \"Oh no\"\nassert solution(\"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\"\nassert solution(\"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\n\n\"\"\""
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\"\nassert solution(\"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\n\"\"\""
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\nassert solution(\"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\"\n\nprint(solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\"))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'Oh no'\nassert solution('1 2') == 'Oh no'\nassert solution('1 3') == 'Oh no'\nassert solution('1 3\\n1 3\\n1 2 1 2') == 'Oh no'\nassert solution('1 3\\n1 3\\n1 2 1 2\\n2 3 1 2') == '1'\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'Oh no'\nassert solution('2 3\\n1 2 1 2\\n2 3 1 2') == '1'\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1 2\n3 2\n1 2 1 2\n2 3 1 2''') == 'Oh no'\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2') == '3'\nassert solution('5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"3\"\nassert solution(\"4 4\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"impossible\"\nassert solution(\"4 4\\n1 2 2\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"2\"\nassert solution(\"4 4\\n1 2 1\\n2 3 2\\n2 4 1\\n2 5 1\\n4 5 1\") == \"impossible\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a b') == 'a'\nassert solution('a b c') == 'a'\nassert solution('a b c d') == 'a'\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2') == '3'\nassert solution('5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1') == 'impossible'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2') == '3'\n\nassert solution('5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1') == 'impossible'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == ans"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2\\n') == '3'\nassert solution('5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\\n') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2') == 'impossible'\nassert solution('1 2 2') == 'impossible'\nassert solution('1 2 2\\n2 3 1') == '3'\nassert solution('1 2 2\\n2 3 1\\n2 4 1') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2') == '3'\nassert solution('5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1') == 'impossible'\n\n-------------\n\nfor _ in range(int(stdin.readline())):\n    _, a, b, c, d = [int(i) for i in stdin.readline().strip().split()]\n    if a == b and c == 0 and d == 0:\n        print(0)\n    elif a == b and c == 1 and d == 1:\n        print(1)\n    elif a == b and c == 2 and d == 2:\n        print(2)\n    elif a == b and c == 1 and d == 2:\n        print(1)\n    elif a == b and c == 2 and d == 1:\n        print(1)\n    elif a == b and c == 0 and d == 2:\n        print(0)\n    elif a == b and c == 1 and d == 0:\n        print(1)\n    elif a == b and c == 2 and d == 0:\n        print(0)\n    elif a == b and c == 0 and d == 2:\n        print(0)\n    elif a == b and c == 0 and d == 2:\n        print(0)\n    elif a == b and c == 2 and d == 2:\n        print(2)\n    elif a == b and c == 0 and d == 1:\n        print(0)\n    elif a == b and c == 0 and d == 1:\n        print(0)\n    elif a == b and c == 1 and d == 0:\n        print(1)\n    elif a == b and c == 0 and d == 1:\n        print(1)\n    elif a == b and c == 1 and d == 2:\n        print(1)\n    elif a == b and c == 2 and d == 1:\n        print(1)\n    elif a == b and c == 1 and d == 2:\n        print(1)\n    elif a == b and c == 2 and d == 2:\n        print(2)\n    elif a == b and c == 1 and d == 1:\n        print(1)\n    elif a == b and c == 0 and d == 0:\n        print(2)\n    elif a == b and c == 1 and d == 1:\n        print(2)\n    elif a == b and c == 1 and d == 2:\n        print(2)\n    elif a == b and c == 2 and d == 1:\n        print(2)\n    elif a == b and c == 2 and d == 2:\n        print(2)\n    elif a == b and c == 0 and d == 2:\n        print(1)\n    elif a == b and c == 1 and d == 2:\n        print(1)\n    elif a == b and c == 2 and d == 0:\n        print(1)\n    elif a == b and c == 0 and d == 2:\n        print(1)\n    elif a == b and c == 2 and d == 0:\n        print(1)\n    elif a == b and c == 0 and d == 0:\n        print(0)\n    elif a == b and c == 2 and d == 0:\n        print(0)\n    elif a == b and c == 1 and d == 0:\n        print(1)\n    elif a == b and c == 0 and d == 1:\n        print(1)\n    elif a == b and c == 2 and d == 1:\n        print(1)\n    elif a == b and c == 1 and d == 2:\n        print(1)\n    elif a == b and c == 1 and d == 1:\n        print(1)\n    elif a == b and c == 0 and d == 1:\n        print(0)\n    elif a == b and c == 0 and d == 1:\n        print(0)\n    elif a == b and c == 2 and d == 1:\n        print(1)\n    elif a == b and c == 2 and d == 2:\n        print(2)\n    elif a == b and c == 1 and d == 2:\n        print(1)\n    elif a == b and c == 1 and d == 1:\n        print(2)\n    elif a == b and c == 1 and d == 0:\n        print(1)\n    elif a == b and c == 2 and d == 0:\n        print(2)\n    elif a == b and c == 1 and d == 0:\n        print(0)\n    elif a == b and c == 0 and d == 0:\n        print(2)\n    elif a == b and c == 0 and d == 1:\n        print(1)\n    elif a == b and c == 0 and d == 2:\n        print(0)\n    elif a == b and c == 1 and d == 0:\n        print(0)\n    elif a == b and c == 0 and d == 0:\n        print(0)\n    elif a == b and c == 0 and d == 2:\n        print(0)\n    elif a == b and c == 2 and d == 2:\n        print(2)\n    elif a == b and c == 1 and d == 0:\n        print(0)\n    elif a == b and c == 2 and d == 0:\n        print(0)\n    elif a == b and c == 0 and d == 2:\n        print(0)\n    elif a == b and c == 0 and d == 1:\n        print(0)\n    elif a == b and c == 1 and d == 2:\n        print(0)\n    elif a == b and c == 2 and d == 1:\n        print(0)\n    elif a == b and c == 1 and d == 0:\n        print(0)\n    elif a == b and c == 1 and d == 1:\n        print(1)\n    elif a == b and c == 2 and d == 1:\n        print(0)\n    elif a == b and c == 0 and d == 1:\n        print(1)\n    elif a == b and c == 0"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 1 1 3') == '2'\nassert solution('22') == '4'\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 1 3\") == \"2\"\nassert solution(\"22\") == \"4\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 1 1 3') == '2'\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\nstring = sys.stdin.readline().split()\n\nmax_depth = 1\n\nfor i in string:\n    if i.count('\"') == 0:\n        max_depth += 1"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 1 1 3') == '2'\nassert solution('1\\n22') == '4'\nassert solution('5\\n2 1 1 1 3') == '2'\nassert solution('5\\n2 3 3 5 5') == '4'\n\"\"\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1 1 3\") == 2\nassert solution(\"22\") == 4\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 1 1 3\") == \"2\"\nassert solution(\"1\\n22\") == \"4\"\n\"\"\""
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 1 1 3') == '2'\nassert solution('1\\n22') == '4'\n\nSolution 1:\ns = stdin.split('\\n')[1:]\n\ns = [i.split(' ') for i in s]\ns = [[int(i[0]),''.join(i[1:])] for i in s]\n\nimport re\nr = ''\nfor i in s:\n    m = re.match('^(\\d+)', i[1])\n    r += m.groups()[0] + '\\n'\n\nprint(r[:-1])\n\nSolution 2:\ns = stdin.split('\\n')[1:]\n\ns = [i.split(' ') for i in s]\ns = [[int(i[0]),''.join(i[1:])] for i in s]\n\ns = sorted(s, key=lambda x: x[0])\n\nprint(s[-1][0])\n\n---"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 1 1 3') == '2'\nassert solution('22') == '4'\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(expected_output(input())).replace('\"', '')"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2 1 1 1 3\n''') == 2\n\nassert solution('''\n1\n22\n''') == 4\n\nassert solution('''\n3\n5 1 1 1\n''') == 5\n\nassert solution('''\n3\n5 1 1 1\n''') == 5\n\nassert solution('''\n3\n5 2 2 2\n''') == 1"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3\n3 1 5\n''') == '''\n3\n'''\n\nassert solution('''\n4\n1 2 3 4\n''') == '''\n2\n'''\n\nassert solution('''\n5\n1 3 1 6 4\n''') == '''\n4\n'''\n\nassert solution('''\n7\n7 4 1 4 2 3 1\n''') == '''\n3\n'''\n\nassert solution('''\n5\n5 3 6 1 2\n''') == '''\n1\n'''"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 5\") == \"3\"\nassert solution(\"4\\n1 2 3 4\") == \"2\""
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 5\") == \"3\"\nassert solution(\"4 1 2 3\") == \"2\""
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n1 5 3\n\"\"\") == \"3\"\nassert solution(\"\"\"4\n1 2 3 4\n\"\"\") == \"2\"\nassert solution(\"\"\"2\n2 1\n\"\"\") == \"1\"\nassert solution(\"\"\"1\n2\n\"\"\") == \"1\"\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 5\") == \"3\"\nassert solution(\"4 1 5 6\") == \"2\""
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3 1 5\") == '3'\nassert solution(\"4\\n1 2 3 4\") == '2'\nassert solution(\"8\\n2 4 8 16 32 64 128\") == '8'\nassert solution(\"11\\n1 2 3 4 5 6 7 8 9 10 11\") == '9'\nassert solution(\"5\\n4 3 2 1\") == '4'\n"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 5') == '3'\nassert solution('4 1 2 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n3 1 5\\n') == '3'\nassert solution('4\\n1 2 3 4\\n') == '2'\nassert solution('5\\n1 2 3 4 5\\n') == '2'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2\") == \"1\"\nassert solution(\"2\\n1 5\") == \"1\"\nassert solution(\"3\\n1 5\") == \"2\"\nassert solution(\"3\\n3 3 3\") == \"1\"\n\nassert solution(\"5\\n3 6 10 7 14 1\") == \"4\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 5\") == \"3\"\nassert solution(\"4 1 2 3\") == \"2\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a+b-c\") == \"-\" + \"d-\"\nassert solution(\"a-b+d-c\") == \"<any>\"\nassert solution(\"\") == \"<empty>\"\nassert solution(\"a+b-c-d-e-f+g-h-i-j+k-l-m+n-o-p+q-r-s+t-u-v+w-x-y-z\") == \"<any>\"\nassert solution(\"a+b-c-d-e-f+g-h-i-j+k-l-m+n-o-p+q-r-s+t-u-v+w-x-y-z-a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z\") == \"<any>\"\n\n\"\"\""
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a+b-c\") == \"b-\"\nassert solution(\"a-b+d-c\") == \"b+d-\"\nassert solution(\"a+b-c\") == \"b-\"\nassert solution(\"a-b+d-c\") == \"b+d-\"\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('a+b-c') == '- +d-'\nassert solution('a-b+d-c') == '- +d-'\nassert solution('a+b-c-d') == '<any>'\nassert solution('a+b-c+d') == '<any>'\nassert solution('a+b-c-d-e') == '<any>'"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a+b-c') == '- +d-'\nassert solution('a-b+d-c') == '- +d-'\nassert solution('a+b-c') == '- +d-'\nassert solution('a-b+d-c') == '- +d-'\nassert solution('a+b-c') == '- +d-'\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\", \"a+b-c should decode to -+d-\"\nassert solution(\"a-b+c\") == \"a+b-c\", \"a-b+c should decode to a+b-c\"\n\"\"\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a+b-c') == '- +d-'\nassert solution('a-b+d-c') == '- +d-'\nassert solution('knuth-morris-pratt') == '<any> <empty>'\nassert solution('a-b+d+e') == '<any> <empty>'\nassert solution('a+b-c+d-e') == '- +d- <empty>'\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a+b-c\") == \"-\" + \"d\" + \"-\"\nassert solution(\"a-b+d-c\") == \"-\" + \"d\" + \"-\"\nassert solution(\"a-b-c-d\") == \"<any>\"\nassert solution(\"a-b+c-d\") == \"<any>\"\nassert solution(\"a+b-c-d\") == \"<any>\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\"\nassert solution(\"a-b+d-c\") == \"<empty>\"\nassert solution(\"knuth-morris-pratt\") == \"<any>\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a+b-c') == '- +d-'\n\"\"\"\n\n\nfrom typing import List, Dict\n\n\nclass Solution:\n    def __init__(self, *args, **kwargs):\n        self.twos = {\n            '+': '+',\n            '-': '-',\n        }\n        self.ones = {\n            '+': '-',\n            '-': '+',\n        }\n        self.pairs = {\n            '+': '+',\n            '-': '-',\n        }\n        self.result = dict()\n        self.solution = dict()\n\n    def find_combinations(self, s: str) -> None:\n        if not s:\n            return\n\n        current_pair = self.pairs[s[0]]\n\n        self.solution[s[0]] = [current_pair]\n\n        for i in range(1, len(s)):\n            if self.solution.get(s[i-1]):\n                if len(self.solution[s[i-1]]) == 2:\n                    current_pair = self.twos[self.solution[s[i-1]][0]]\n                else:\n                    current_pair = self.ones[self.solution[s[i-1]][0]]\n            else:\n                current_pair = self.pairs[s[i]]\n\n            if self.solution.get(s[i]):\n                if len(self.solution[s[i]]) == 2:\n                    self.solution[s[i]].append(current_pair)\n                else:\n                    self.solution[s[i]].append(current_pair)\n                    self.solution[s[i]].pop(0)\n            else:\n                self.solution[s[i]] = [current_pair]\n\n        if not self.solution[s[-1]]:\n            self.solution[s[-1]] = ['any']\n\n    def solution(self, s: str) -> List[str]:\n        self.find_combinations(s)\n        return self.solution.values()\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a+b-c) == '- +d-'\nassert solution(a-b+d-c) == '+ d-'\nassert solution(knuth-morris-pratt) == '<any> <empty>'\nassert solution(knuthmorrispratt) == '<any> <empty>'\n\n\"\"\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\") == \"0\\n1\\n3\\n2\\n3\\n5\\n3\\n\"\nassert solution(\"3 0\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10\") == \"11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\\n\"\n\nprint(\"Teste unit\u00e1rio passado\")\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\") == \"0\\n1\\n3\\n2\\n3\\n5\\n3\"\nassert solution(\"1 1\\n0\\n7\\nt 10\\nt 11\\n\") == \"10\\n6\"\nassert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\") == \"7\\n6\"\nassert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\") == \"7\\n6\"\n\n\"\"\""
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\") == \"0\\n1\\n3\\n2\\n3\\n5\\n3\"\nassert solution(\"3 0\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10\") == \"11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\"\n\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n7\\nt0\\nt1\\nt2\\nt3\\nt4\\nt5\\nt6\") == \"0\"\nassert solution(\"1 1\\n7\\n+0\\n-1\\n-2\\n-3\\n-4\\n-5\\n-6\") == \"1\"\nassert solution(\"3 0\\n6 6\\n10\\nt1\\nt2\\nt3\\nt4\\nt5\\nt6\\nt7\\nt8\\nt9\\nt10\") == \"11\"\n\"\"\"\n\nimport collections\nimport typing\nimport itertools\nimport functools\n\nimport sys\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\") == \"0\\n1\\n3\\n2\\n3\\n5\\n3\"\nassert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\") == \"0\\n1\\n3\\n2\\n3\\n5\\n3\"\nassert solution(\"1 1\\n0\\n7\\nt 10\\nt 11\\nt 12\\nt 13\\nt 14\\nt 15\\nt 16\\nt 17\\nt 18\\nt 19\\nt 20\\nt 21\\nt 22\\nt 23\\nt 24\\nt 25\\nt 26\\nt 27\\nt 28\\nt 29\\nt 30\\nt 31\\nt 32\\nt 33\\nt 34\\nt 35\\nt 36\\nt 37\\nt 38\\nt 39\\nt 40\\nt 41\\nt 42\\nt 43\\nt 44\\nt 45\\nt 46\\nt 47\\nt 48\\nt 49\\nt 50\\nt 51\\nt 52\\nt 53\\nt 54\\nt 55\\nt 56\\nt 57\\nt 58\\nt 59\\nt 60\\nt 61\\nt 62\\nt 63\\nt 64\\nt 65\\nt 66\\nt 67\\nt 68\\nt 69\\nt 70\\nt 71\\nt 72\\nt 73\\nt 74\\nt 75\\nt 76\\nt 77\\nt 78\\nt 79\\nt 80\\nt 81\\nt 82\\nt 83\\nt 84\\nt 85\\nt 86\\nt 87\\nt 88\\nt 89\\nt 90\\nt 91\\nt 92\\nt 93\\nt 94\\nt 95\\nt 96\\nt 97\\nt 98\\nt 99\\nt 100\") == \"100\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n2\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6') == '0\\n1\\n3\\n2\\n3\\n5\\n3\\n'\nassert solution('1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6') == '0\\n1\\n3\\n2\\n3\\n5\\n3\\n'\nassert solution('1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6') == '0\\n1\\n3\\n2\\n3\\n5\\n3\\n'\n\nassert solution('3 0\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10') == '11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\\n'\nassert solution('3 0\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10') == '11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\\n'\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n0\") == \"0\"\nassert solution(\"3 0\\n2 6 6\") == \"11\"\n\nprint(solution(\"1 1\\n0\"))\nprint(solution(\"3 0\\n2 6 6\"))\n\n\"\"\"\nimport math"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 0') == '1'\nassert solution('5 1') == '1'\nassert solution('2 2') == '0'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\n\\n10') == '0\\n1\\n3\\n2\\n3\\n5\\n3\\n7\\n9\\n9\\n10'\n\nassert solution('3 0\\n2 6 6\\n10\\nt 1\\n\\nt 2\\n\\nt 3\\n\\nt 4\\n\\nt 5\\n\\nt 6\\n\\nt 7\\n\\nt 8\\n\\nt 9\\n\\nt 10') == '11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10'\n\nassert solution('1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\n\\n10') == '0\\n1\\n3\\n2\\n3\\n5\\n3\\n7\\n9\\n9\\n10'\n\nassert solution('3 0\\n2 6 6\\n10\\n+ 1\\n+ 2\\n+ 3\\n+ 4\\n+ 5\\n+ 6\\n\\n+ 7\\n+ 8\\n+ 9\\n+ 10') == '11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10'\n\nassert solution('1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\n\\n10') == '0\\n1\\n3\\n2\\n3\\n5\\n3\\n7\\n9\\n9\\n10'"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\nassert solution(\"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n\") == \"2\\n4 6\"\nassert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n\") == \"0\\n4 6\"\nassert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n\") == \"0\\n4 6\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n') == '2\\n4 6'\nassert solution('5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n') == '0\\n'\n\"\"\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\nassert solution(\"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\"\nassert solution(\"7 8\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n4 6 1\\n5 7 1\\n6 7 1\") == \"0\"\nassert solution(\"7 8\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n4 6 1\\n5 7 1\\n6 7 1\") == \"0\"\n\nSample Input 1:\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\nSample Output 1:\n2\n4 6\n\nSample Input 2:\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\nSample Output 2:\n0\n\nSample Input 3:\n7 8\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n4 6 1\n5 7 1\n6 7 1\nSample Output 3:\n0\n\nSample Input 4:\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 4:\n0\n\nSample Input 5:\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 5:\n0\n\nSample Input 6:\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 6:\n0\n\nSample Input 7:\n7 8\n1 2 1\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 7:\n0\n\nSample Input 8:\n7 8\n1 2 1\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 8:\n0\n\nSample Input 9:\n7 8\n1 2 1\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 9:\n0\n\nSample Input 10:\n7 8\n1 2 1\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 10:\n0\n\nSample Input 11:\n7 8\n1 2 1\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 11:\n0\n\nSample Input 12:\n7 8\n1 2 1\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 12:\n0\n\nSample Input 13:\n7 8\n1 2 1\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 13:\n0\n\nSample Input 14:\n7 8\n1 2 1\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 14:\n0\n\nSample Input 15:\n7 8\n1 2 1\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 15:\n0\n\nSample Input 16:\n7 8\n1 2 1\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 16:\n0\n\nSample Input 17:\n7 8\n1 2 1\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 17:\n0\n\nSample Input 18:\n7 8\n1 2 1\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 18:\n0\n\nSample Input 19:\n7 8\n1 2 1\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 19:\n0\n\nSample Input 20:\n7 8\n1 2 1\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 20:\n0\n\nSample Input 21:\n7 8\n1 2 1\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 21:\n0\n\nSample Input 22:\n7 8\n1 2 1\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 7 1\nSample Output 22:\n0\n\nSample Input 23:\n7 8\n1 2 1\n1 3"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n\") == \"2\\n4 6\"\nassert solution(\n    \"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n\") == \"0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n\") == \"0\\n1 4 6\"\n\n\"\"\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(r\"D:\\Coding\\ProjectEuler\\projectEuler003\\data\\problem018.1.txt\").read()) == \"2\"\nassert solution(open(r\"D:\\Coding\\ProjectEuler\\projectEuler003\\data\\problem018.2.txt\").read()) == \"0\""
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\nassert solution(\"7 8\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\"\n\"\"\""
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1') == '2\\n4 6'\nassert solution('7 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6') == '0'\nassert solution('5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6') == '0'\nassert solution('5 5\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6') == '0'"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1') == '2\\n4 6'\nassert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1') == '0'\nassert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1') == '0'\n\n\"\"\"\nimport sys\nsys.setrecursionlimit(100000)\n\nsys.stdin = open('test_files/Y11R5P1/A.in')"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\") == '4\\n5\\n6\\n1\\n2\\n3'\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\") == '1\\n2\\n3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 6\") == \"4 5 6\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"2 1\") == \"2 1\"\nassert solution(\"2 2\") == \"2 2\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n') == '4\\n5\\n6\\n1\\n2\\n3'\nassert solution('12\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n4 1\\n4 2\\n4 3\\n5 1\\n5 2\\n5 3\\n6 1\\n6 2\\n6 3\\n') == '1\\n2\\n3\\n1\\n2\\n3'\nassert solution('12\\n1 1\\n2 1\\n2 1\\n3 1\\n3 2\\n3 3\\n4 1\\n4 2\\n4 3\\n5 1\\n5 2\\n5 3\\n6 1\\n6 2\\n6 3\\n') == '1\\n2\\n3\\n1\\n2\\n3'\nassert solution('12\\n1 1\\n2 1\\n2 1\\n3 1\\n3 2\\n3 3\\n4 1\\n4 2\\n4 3\\n5 1\\n5 2\\n5 3\\n6 1\\n6 2\\n6 3\\n') == '1\\n2\\n3\\n1\\n2\\n3'\nassert solution('12\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n4 1\\n4 2\\n4 3\\n5 1\\n5 2\\n5 3\\n6 1\\n6 2\\n6 3\\n') == '1\\n2\\n3\\n1\\n2\\n3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n\") == \"4\\n5\\n6\\n1\\n2\\n3\"\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n\") == \"1\\n2\\n3\"\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n\") == \"1\\n2\\n3\"\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n\") == \"1\\n2\\n3\"\n\nassert solution(\"12\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n\") == \"1\\n2\\n3\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6') == '4\\n5\\n6\\n1\\n2\\n3'\nassert solution('6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3') == '1\\n2\\n3'\nassert solution('6\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3') == '1\\n2\\n3'\n\n---\n\nSample Input:\n6\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\nSample Output:\n1\n2\n3\n\nSample Input 2:\n6\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\nSample Output 2:\n1\n2\n3\n\nSample Input 3:\n6\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\nSample Output 3:\n1\n2\n3\n\nSample Input 4:\n6\n2 3\n2 4\n3 1\n3 2\n3 3\n3 4\nSample Output 4:\n1\n2\n3\n\nSample Input 5:\n6\n3 3\n3 4\n4 1\n4 2\n4 3\nSample Output 5:\n1\n2\n3\n\nSample Input 6:\n6\n3 3\n3 4\n4 1\n4 2\n4 3\nSample Output 6:\n1\n2\n3\n\"\"\"\nimport math"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 1\\n1 2\\n1 3\\n1 4\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n3 1\\n3 2\\n3 3\\n3 4\\n4 1\\n4 2\\n4 3\\n4 4\\n4 5\\n5 1\\n5 2\\n5 3\\n5 4\\n5 5') == '4\\n5\\n6\\n1\\n2\\n3\\n'\n\n\"\"\""
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n4 2\\n4 3\\n5 2\\n5 3\\n6 2\\n6 3\\n\") == \"1\\n2\\n3\\n1\\n2\\n3\"\nassert solution(\"6\\n4\\n5\\n6\\n1 2\\n1 3\\n2 1\\n3 1\\n2 2\\n3 2\\n1 3\\n2 3\\n4\\n5\\n6\\n\") == \"2\\n3\\n4\\n5\\n6\\n1\"\nassert solution(\"6\\n1 3\\n1 2\\n2 1\\n2 3\\n3 1\\n3 2\\n4 1\\n4 2\\n5 1\\n5 2\\n6 1\\n6 2\\n\") == \"2\\n3\\n4\\n5\\n6\\n1\"\nassert solution(\"6\\n2 4\\n3 4\\n1 2\\n3 4\\n2 1\\n3 4\\n1 3\\n2 3\\n1 3\\n3 2\\n1 1\\n3 2\\n2 1\\n4 1\\n1 4\\n2 4\\n4 1\\n1 2\\n\") == \"1\\n3\\n2\\n4\"\nassert solution(\"6\\n1 2\\n2 3\\n1 3\\n2 1\\n3 2\\n1 1\\n2 1\\n1 1\\n1 3\\n2 1\\n2 2\\n3 1\\n3 2\\n\") == \"3\\n1\\n2\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n') == '4\\n5\\n6\\n1\\n2\\n3'"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"12\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"\"\"4\n5\n6\n1\n2\n3\n\"\"\"\n\nassert solution(\"\"\"6\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n\"\"\") == \"\"\"1\n2\n3\n1\n2\n3\n\"\"\"\n\nassert solution(\"\"\"12\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n4 1\n4 2\n4 3\n5 1\n5 2\n5 3\n6 1\n6 2\n6 3\n\"\"\") == \"\"\"4\n5\n6\n1\n2\n3\n\"\"\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\") == \"4\\n5\\n6\\n1\\n2\\n3\"\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\") == \"1\\n2\\n3\"\n\"\"\""
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('C') == ''\nassert solution('CC') == ''\nassert solution('PP') == ''\nassert solution('CPC') == ''\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"PPP\") == 1\nassert solution(\"PPCCCCCCPP\") == 8\n\"\"\""
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"PPPPCCCC\") == 8\n\"\"\"\n\ns = input()\n\ncnt = 0\nfor i in range(len(s)-1):\n    if s[i]!= s[i+1]:\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('C') == 0\nassert solution('CC') == 0\nassert solution('CP') == 1\nassert solution('CPP') == 2\nassert solution('PPP') == 3\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('PPPPCCCC') == 8\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('CPCC') == 1\nassert solution('PPPPCCCC') == 8\n\"\"\""
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CPCC\") == 1\nassert solution(\"PPPPCCCC\") == 8\n\"\"\"\n\nimport re\nimport sys\n\ns = sys.stdin.read()\ncount = 0\n\nfor i in range(len(s)):\n    if s[i] == \"P\":\n        count += 1\n\nprint(count)"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CPCC\") == 1\nassert solution(\"PPCCCC\") == 8\nassert solution(\"PPPPCCCC\") == 16\nassert solution(\"PPPC\") == 5\n\"\"\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\nprint('all tests passed.')\n\nSample Input 1:\nCJCDC\nSample Output 1:\n2\n\nSample Input 2:\nCPCCPC\nSample Output 2:\n3\n\nSample Input 3:\nCCCC\nSample Output 3:\n0\n\nSample Input 4:\nPPPPPP\nSample Output 4:\n1\n\"\"\""
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"C\") == 1\nassert solution(\"CPP\") == 2\nassert solution(\"CCP\") == 1\nassert solution(\"CCCP\") == 2\nassert solution(\"CPCC\") == 1\n\"\"\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 3') == '3'\nassert solution('3 2 1\\n1 3\\n2 3') == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\\n1 2\\n2 3\\n2\\n\") == \"1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 2 1\n1 2\n2 3\n2\n3''') == '1 2 3'\n\nassert solution('''3 2 1\n1 3\n2 3\n3\n1''') == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 1\\n1 2\\n2 3\\n2\\n') == '1 2 3'\nassert solution('3 2 1\\n1 3\\n2 3\\n2\\n') == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 2 1\n1 2\n2 3\n2\n3''') == '3'\nassert solution('''3 2 1\n1 3\n2 3\n3\n3''') == '3'\n\n'''\nThis problem is similar to the Problem 020. In this problem we want to find out all the possible answers to the given question.\n\nExample\n\nFor\n\nD = 3\nM = 2\nN = 1\nand\n\nS =\n\n[\n1 3\n2 3\n2\n3\n],\nthe output should be\n\nsolution(S) = 3.\n\nIf we assume that:\n\nEvents 1, 2 and 3 occurred;\nEvents 2 and 3 are known to have occurred;\nEvent 1 is known to have occurred;\nEvent 3 is known to have occurred;\nEvent 2 is known to have occurred;\nthen, we can conclude that event 3 is the only one that occurred.\n\nFor\n\nD = 3\nM = 2\nN = 1\nand\n\nS =\n\n[\n2 3\n2\n3\n],\nthe output should be\n\nsolution(S) = 3.\n\nIf we assume that:\n\nEvents 2 and 3 occurred;\nEvents 2 and 3 are known to have occurred;\nEvent 2 is known to have occurred;\nEvent 3 is known to have occurred;\nEvent 2 is known to have occurred;\nthen, we can conclude that event 2 is the only one that occurred.\n\nInput/Output\n\n[input] array.string S\n\nAn array of strings, containing indications for the events that have occurred.\n\nConstraints:\n\n1 \u2264 D \u2264 1000\n1 \u2264 M \u2264 100000\n1 \u2264 N \u2264 D\n1 \u2264 |S| \u2264 D\n\n[input] integer D\n\nAn integer, indicating the number of different types of events.\n\nConstraints:\n\n1 \u2264 D \u2264 1000\n\n[input] integer M\n\nAn integer, indicating the number of implications.\n\nConstraints:\n\n1 \u2264 M \u2264 100000\n\n[input] array.string S\n\nAn array of strings, containing indications for the events that have occurred.\n\nConstraints:\n\n|S| = D\n\n[input] integer N\n\nAn integer, indicating the number of events known to have occurred.\n\nConstraints:\n\n1 \u2264 N \u2264 D\n\n[output] array.integer\n\nAn array of integers, containing the integers, indicating the events that have certainly occurred.\n\nExample\n\nFor\n\nS =\n\n[\"1 3\",\n\"2 3\",\n\"2\",\n\"3\"],\nD = 3,\nM = 2,\nN = 1,\nthe output should be\n\nsolution(S, D, M, N) = [3].\n\nHere is the knowledge base:\n\n1 3\n2 3\n2\n3\n\nWith the following evidence:\n\n2\n3\n\nthe only event that can be inferred is event 3.\n\nFor\n\nS =\n\n[\"2 3\",\n\"2\",\n\"3\"],\nD = 3,\nM = 2,\nN = 1,\nthe output should be\n\nsolution(S, D, M, N) = [2, 3].\n\nHere is the knowledge base:\n\n2 3\n2\n3\n\nWith the following evidence:\n\n3\n\nthe only event that can be inferred is event 3.\n\nFor\n\nS =\n\n[\"2 3\",\n\"2\",\n\"3\"],\nD = 3,\nM = 2,\nN = 1,\nthe output should be\n\nsolution(S, D, M, N) = [3].\n\nHere is the knowledge base:\n\n2 3\n2\n3\n\nWith the following evidence:\n\n3\n\nthe only event that can be inferred is event 3.\n\nFor\n\nS =\n\n[\"1 3\",\n\"2 3\",\n\"3\"],\nD = 3,\nM = 2,\nN = 1,\nthe output should be\n\nsolution(S, D, M, N) = [1, 2, 3].\n\nHere is the knowledge base:\n\n1 3\n2 3\n3\n\nWith the following evidence:\n\n3\n\nthe only event that can be inferred is event 3.\n\nFor\n\nS =\n\n[\"1 3\",\n\"2 3\",\n\"2\",\n\"3\"],\nD = 3,\nM = 2,\nN = 1,\nthe output should be\n\nsolution(S, D, M, N) = [3].\n\nHere is the knowledge base:\n\n1 3\n2 3\n2\n3\n\nWith the following evidence:\n\n2\n3\n\nthe only event that can be inferred is event 3.\n\nFor\n\nS =\n\n[\"2 3\",\n\"2\",\n\"3\"],\nD = 3,\nM = 2,\nN = 1,\nthe output should be\n\nsolution(S, D, M, N) = [2, 3].\n\nHere"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\\n1 2\\n2 3\\n2\\n3\") == \"1 2 3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n2\\n3\") == \"3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\\n3\") == \"3\"\n\"\"\""
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 2 1\n1 2\n2 3\n2\n3''') == '1 2 3'\nassert solution('''3 2 1\n1 3\n2 3\n3''') == '3'\nassert solution('''3 2 1\n1 3\n2 3\n1''') == '3'\nassert solution('''3 2 1\n1 3\n2 3\n3''') == '3'\n\n--------------------------------------------------------------------------------\n\n2. \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0432 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435\n\n\u0414\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0435\u0433\u043e \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u043d\u0435\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f.\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0447\u0438\u0441\u043b\u043e n, \u0430 \u0437\u0430\u0442\u0435\u043c n \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u044d\u0442\u0438 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u043d\u0435\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f.\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 sort.\n\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430: \u044d\u0442\u0443 \u0437\u0430\u0434\u0430\u0447\u0443 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0448\u0438\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0432 \u043c\u0435\u0442\u043e\u0434 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u0432\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 [5, 3, 2, 4] \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432\u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 [5, 3, 2, 4], \u0433\u0434\u0435 \u0438\u043d\u0434\u0435\u043a\u0441 0 \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 5, \u0438\u043d\u0434\u0435\u043a\u0441 1 \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 3, \u0438\u043d\u0434\u0435\u043a\u0441 2 \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 2, \u0438\u043d\u0434\u0435\u043a\u0441 3 \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 4.\n\nSample Input 1:\n4\n2\n1\n3\nSample Output 1:\n1 2 3 4\n\nSample Input 2:\n4\n10\n5\n2\n1\nSample Output 2:\n1 2 3 4 10\n\nSample Input 3:\n5\n1\n10\n5\n2\n3\nSample Output 3:\n1 2 3 4 5 10\n\nSample Input 4:\n5\n9\n3\n8\n6\n7\nSample Output 4:\n3 4 6 7 8 9\n\nSample Input 5:\n1\n1\nSample Output 5:\n1"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\\n1 3\\n2 3\\n3\") == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 1\\n1 3\\n2 3\\n3\\n') == '3'\nassert solution('3 2 1\\n1 3\\n2 3\\n4\\n') == '3 1'"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\\n1 3\\n2 3\\n3\\n\") == \"3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\\n1\\n2\\n3\\n\") == \"1 2 3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n\") == \"1 2 3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n\") == \"1 2 3\"\n\nprint(\"Well done, that's correct!\")\n\n\"\"\"\n\n\nfrom typing import List\nimport collections\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n2 4 2 3 4\") == \"39\"\nprint('Test pass.')\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\nassert solution('5 1\\n1 0 1 1 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 1') == '1'\nassert solution('1 2 3 4 5') == '3'\nassert solution('2 1 3 4 5') == '3'\nassert solution('2 2 3 4 5') == '3'\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n2 4 2 3 4\") == '39'\nassert solution(\"5 1\\n1 0 1 1 1\") == '4'\nassert solution(\"5 2\\n2 4 2 3 4\") == '1'\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ns = sum(a[:k])\n\nfor i in range(k, n):\n    s += a[i] - a[i - k]\n    s %= 1000000007\n\nprint(s)\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 2 3 4\") == \"39\"\n\"\"\"\n\n\"\"\"\n\u4ee5\u4e0a\u7684\u89e3\u7b54\u6539\u7248\u4e26\u7c21\u5316\n\nN, K = input().split()\nN, K = int(N), int(K)\nA = list(map(int, input().split()))\n\nans = 0\nfor i in range(1, N + 1):\n    for j in range(i + 1, N + 1):\n        if A[i - 1] < A[j - 1]:\n            ans += A[i - 1] * A[j - 1]\n\nprint(ans % 1000000007)\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 0 1 1 1') == '4'\nassert solution('2 4 2 3 4') == '39'\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"5 3\"\n\"2 4 2 3 4\"\n) == \"39\"\n\nassert solution(\n\"5 1\"\n\"1 0 1 1 1\"\n) == \"4\"\n\nprint('All tests passed.')"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 3\n2 4 2 3 4''') == '39'\nassert solution('''5 1\n1 0 1 1 1''') == '4'\n\"\"\""
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n2 4 2 3 4\") == \"39\"\n\"\"\"\n\nN, K = map(int, input().split())\n\nl = list(map(int, input().split()))\n\ns = set()\n\nfor i in range(K):\n    s.add(l.index(max(l)))\n    l[l.index(max(l))] = -1\n\nprint(sum(s))\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\nxx\\nxxx\\n...\") == \"1 1 2\"\nassert solution(\"4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx\") == \"1 1 2\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n...\\nxxx\\n...\\nxxx\") == \"1 1 2\"\nassert solution(\"4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx\") == \"2 4 3\"\n\"\"\""
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\nxx.\\nxxx\\n...\") == \"1 1 2\"\nassert solution(\"4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx\") == \"1 1 2\"\n\n\"\"\"\nimport sys\n\nimport numpy as np"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\nxxx\\n...\\nxxxx\") == \"1 1 2\\n2 3 1\"\nassert solution(\"4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx\") == \"1 1 2\\n2 4 3\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '3 3\\n'\n    'xx\\n'\n    'xxx\\n'\n    '...\\n'\n    ) == '1 1 2'\n\nassert solution(\n    '4 6\\n'\n    'xxxx\\n'\n    'xxxx\\n'\n    'xxxx\\n'\n    'xxxx\\n'\n    ) == '1 1 2'\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"3 3\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\nxx\\nxxx\\n...\") == \"1 1 2\\n2 3 1\"\nassert solution(\"4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx\") == \"1 1 2\\n2 4 3\"\n\nprint(solution(stdin))"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\nxx.\\nxxx\\n...') == '1 1 2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n...\\nxx\\n...\\n') == '1 1 2\\n2 3 1'\nassert solution('4 6\\nxx....\\nxxx.xxx\\n...xxx\\n...xxx') == '1 1 2\\n2 4 3'\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('.xx.\\nxx.x\\nxxxx') == '1 1 2\\n2 3 1'\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'indistinguishable'\nassert solution('1 1 1') == '0'\nassert solution('2 1 1') == '1'\n\n\"\"\"\n\n\"\"\"\nclass Point(object):\n    def __init__(self, x, y, t):\n        self.x = x\n        self.y = y\n        self.t = t\n\"\"\""
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"3 1 2\"\n\"1 2 1\"\n\"0 2 0\"\n\"0 1 0\") == \"0\"\nassert solution(\n\"3 1 2\"\n\"1 2 1\"\n\"0 2 0\"\n\"0 1 0\") == \"indistinguishable\"\nassert solution(\n\"2 0 1\"\n\"1 1 1\"\n\"0 0 0\"\n\"0 1 0\") == \"indistinguishable\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'indistinguishable'\nassert solution('1') == 'indistinguishable'\nassert solution('2 2 2') == 'indistinguishable'\nassert solution('1 2 1') == '1'\nassert solution('2 1 1') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 2\\n1 2 1\\n0 0 0\\n0 1 0') == '0'\nassert solution('3 1 2\\n1 2 1\\n0 2 0\\n0 1 0') == 'indistinguishable'\nassert solution('3 1 2\\n1 2 1\\n0 2 0\\n1 1 0') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == \"indistinguishable\"\nassert solution(\"2 0 1\\n1 1 1\\n0 0 0\") == \"0\"\nassert solution(\"2 1 1\\n1 1 1\\n0 0 0\") == \"indistinguishable\"\n\"\"\"\n\nimport collections\n\n\nclass Node(object):\n    def __init__(self, i: int):\n        self.i = i\n        self.left = None\n        self.right = None\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 2\\n1 2 1\\n0 2 0\\n0 1 0') == 'indistinguishable'\n\nimport sys\nfrom typing import TextIO\nfrom io import StringIO\n\nclass Solution:\n    _input: TextIO\n    _output: TextIO\n\n    def __init__(self, input: TextIO, output: TextIO):\n        self._input = input\n        self._output = output\n\n    def execute(self) -> None:\n        intersections = int(self._input.readline())\n        alice, bob = map(int, self._input.readline().split(' '))\n\n        self._output.write(self.execute_internal(intersections, alice, bob))\n\n    def execute_internal(self, intersections: int, alice: int, bob: int) -> str:\n        pass"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == \"indistinguishable\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1\\n0 0 0\\n0 1 0\") == \"indistinguishable\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 1 2\n1 2 1\n0 2 0\n0 1 0''') == 'indistinguishable'\n\nassert solution('''2 0 1\n1 1 1\n0 0 0''') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == \"indistinguishable\"\nassert solution(\"2 0 1\\n1 1 1\\n0 0 0\") == \"0\"\nassert solution(\"6 6 6\\n0 1 1\\n0 2 1\\n0 3 1\\n0 4 1\\n0 5 1\\n0 1 2\\n0 1 3\\n0 1 4\\n0 1 5\") == \"indistinguishable\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\nassert solution('0110')!= '1111'\nassert solution('1001')!= '0111'\nassert solution('0110') == '1111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\nassert solution('011010') == '1110'\nassert solution('011011') == '1111'\n\nprint(solution('0110'))\nprint(solution('1001'))\nprint(solution('011010'))\nprint(solution('011011'))\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0110') == '1111'\n\"\"\"\n\nimport numpy as np\nfrom collections import defaultdict"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '1110'\nassert solution('1010') == '1101'\nassert solution('1011') == '1110'\nassert solution('1100') == '1100'\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"1110\"\nassert solution(\"101010\") == \"111111\"\n\"\"\""
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0110\\n1001\\n') == '1111\\n0111\\n1110\\n1111'\nassert solution('0\\n1\\n') == '-1'\n\"\"\""
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''0110\n1001''') == '1111\n0111\n1110\n1111'\nassert solution('''0110\n1001\n1110''') == '1111\n0111\n1110\n1111'\nassert solution('''1110\n1110\n1111\n1111\n1110''') == '1111\n1110\n1110\n1111\n1111\n1110'\nassert solution('''1110\n1110\n1110\n1111\n1111\n1111\n1111\n1111\n1111\n1110\n1110\n1111\n1111\n1110\n1110\n1110\n1111\n1111\n1111\n1111\n1111\n1110\n1110\n1111\n1111\n1110\n1110\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1110\n1110\n1111\n1111\n1110\n1110\n1111\n1111\n1110\n1110\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1110\n1110\n1111\n1111\n1110\n1110\n1110\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1110\n1110\n1111\n1111\n1110\n1110\n1111\n1111\n1110\n1110\n1110\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1110\n1110\n1111\n1111\n1110\n1110\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1110\n1110\n1111\n1111\n1110\n1110\n1110\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1110\n1110\n1111\n1111\n1110\n1110\n1110\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1110\n1110\n1111\n1111\n1110\n1110\n1110\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1110\n1110\n1111\n1111\n1110\n1110\n1110\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1110\n1110\n1111\n1111\n1110\n1110\n1110\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1110\n1110\n1111\n1111\n1110\n1110\n1110\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '1110'\nassert solution('1010') == '1110'\nassert solution('1011') == '1111'\nassert solution('1100') == '1110'"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"1110\"\nassert solution(\"110110\") == \"1111111110110\"\nassert solution(\"10111\") == \"1110111111\"\nassert solution(\"0110101\") == \"1111111110110\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '1110'\nassert solution('1010') == '1110'\nassert solution('1011') == '1101'\nassert solution('1100') == '1110'\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1101') == '11010'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10000\") == \"+0-0\"\nassert solution(\"1111\") == \"+0-0\"\n\"\"\"\n\nimport sys\nimport unittest\n\nimport sys\nimport unittest\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10000\") == \"+0000\"\nassert solution(\"1111\") == \"+000-\"\n\"\"\"\n\nfrom typing import List\nimport string"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"10000\"\n) == \"+0000\"\nassert solution(\n\"1111\"\n) == \"+000-\"\n\n---\n\nApproach:\n\n(1) Create a binary representation of all numbers from 0 to 2^n\n(2) Find all possible arrangements of that binary representation\n(3) Find the minimal representation\n\n---"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == expected_output_1"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10000') == '+0000'\n\nassert solution('1111') == '+000-'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1111') == '+0-0'\nassert solution('10000') == '+0-0'\n\"\"\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10010') == '0-0-0+0-0'\nassert solution('11101') == '+0-0-0-0-1-0'\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10111') == '0-1-1-1'\nassert solution('1111') == '0-0-0-0'\nassert solution('10011') == '0-1+1-1'\nassert solution('0') == '0-0'\n\nprint('Success')\n\n---"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4') == '9'\nassert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4') == '9'\n\n-----Problem-----\nYou are working at a shipping company in a new city, and your company\u2019s warehouses are located at intersections. Customers, who are located at intersections as well, are required to make two-way trips from warehouses to intersections. You have $s$ employees, and each employee can be assigned to make at most $1$ delivery.\n\nThe shipping company has two warehouses and $s$ employees. The warehouses and employees are currently located at some of the intersections in the city. Greg needs to make $t$ deliveries to his clients who are also located at some of the intersections in the city. For each delivery, one of his employees will travel to either warehouse to pick up the item to deliver, then travel to the corresponding client. Each warehouse always contains an infinite amount of each item. Greg would like to minimize the total distance travelled by his employees (he does not care about the return trip). Each employee may make at most one delivery.\n\n-----Solution-----\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '2'\n\"\"\""
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n1\\n') == '1'\nassert solution('4\\n2\\n1\\n1\\n1\\n1\\n') == '2'\nassert solution('2\\n1\\n1\\n2\\n1\\n') == '1'\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n') == '9'\n\nassert solution('2 1 1 1\\n2 2\\n1\\n1\\n1 2 1\\n') == '2'\n\nassert solution('2 3 1 2\\n1 2\\n2 1 1\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n1 7 7\\n1 8 8\\n2 3 9\\n2 4 2\\n2 6 4\\n2 7 4\\n2 8 4\\n3 4 9\\n3 5 9\\n3 6 9\\n3 7 9\\n4 5 9\\n4 6 9\\n4 7 9\\n4 8 9\\n5 6 9\\n5 7 9\\n5 8 9\\n6 7 9\\n6 8 9\\n7 8 9\\n') == '9'\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4') == '9'\n\nassert solution('6 5 3 2\\n1 2\\n1 3 1\\n1 4 2\\n1 5 3\\n1 6 1\\n2 5 2\\n3 4 2\\n3 6 4\\n4 6 5') == '8'\n\nassert solution('7 6 5 2\\n1 2\\n1 3 1\\n1 4 2\\n1 5 3\\n1 6 1\\n2 5 2\\n3 4 2\\n3 6 4\\n4 6 5') == '7'\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom heapq import heappop, heappush\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5') == '9'\nassert solution('2 1 1 1\\n2 2\\n1\\n1\\n1 2 1') == '2'\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\") == \"9\"\n\"\"\"\nimport collections\n\nN, M, S, T = list(map(int, stdin.readline().split()))\nw, v = list(map(int, stdin.readline().split()))\n\nEMPLOYEES = [list(map(int, stdin.readline().split())) for _ in range(S)]\nDELIVERIES = [list(map(int, stdin.readline().split())) for _ in range(T)]\n\nroads = collections.defaultdict(list)\n\nfor road in stdin:\n    u, v, w = list(map(int, road.split()))\n    roads[u].append((v, w))\n    roads[v].append((u, w))"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\") == \"9\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import inf\nimport heapq\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\") == \"9\"\nprint(\"tests 1 passed\")\nassert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\") == \"9\"\nprint(\"tests 2 passed\")\n\n\"\"\""
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\") == \"9\"\n\nassert solution(\"4 4 4 4\\n2 2\\n1 2 1\\n1 3 1\\n1 4 1\\n1 5 1\\n1 6 1\\n2 2 2\\n2 3 2\\n2 4 2\\n2 5 2\\n2 6 2\\n3 4 3\\n3 5 3\\n3 6 3\\n4 5 4\\n4 6 4\\n5 6 5\\n\") == \"11\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\n\"\"\"\n\nfrom collections import deque\nimport unittest\n\n\nclass Cell:\n    def __init__(self, x, y, direction, number):\n        self.x = x\n        self.y = y\n        self.direction = direction\n        self.number = number\n\n\nclass CellDeque(deque):\n    def __init__(self, cell):\n        super().__init__()\n        self.cell = cell\n\n    def find_cell(self, cell):\n        return self.cell == cell\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\"\"\""
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\"\"\""
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000') == '2'\n\nassert solution('3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301') == '7'\n\nassert solution('3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301') == '7'\n\nassert solution('3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301') == '7'\n\nassert solution('3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301') == '7'"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000') == '2'\nassert solution('3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301') == '7'\nprint('Success')"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\n\"\"\"\n\nn, m, k = [int(i) for i in input().split()]\n\nx, y = [int(i) for i in input().split()]\n\np1 = [[int(j) for j in input().split()] for i in range(k)]\n\ncount = 0\n\nfor i in range(k):\n    p1[i][0] -= x\n    p1[i][1] -= y\n    count += abs(p1[i][0]) + abs(p1[i][1])\n\ncount = 0\nwhile count!= k:\n    for i in range(k):\n        p1[i][0] += p1[i][2]\n        p1[i][1] += p1[i][3]\n        count += 1\n        if count >= k:\n            break\n\ncount = 0\nfor i in range(k):\n    if p1[i][0] < 1 or p1[i][0] > n or p1[i][1] < 1 or p1[i][1] > m:\n        count += 1"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\nprint(solution(input()))\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\\n') == '2'\n\nassert solution('3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\\n') == '7'\n\nprint(solution('3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\\n'))\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == \"2\"\nassert solution(\"8\\n1 2 4 1 1 2 5 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == 2\n\"\"\"\n\n\"\"\"\nThis problem has been solved in O(n) time and O(1) space, so that means it has O(n) time complexity and O(1) space complexity, where n is the input number.\n\"\"\""
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == \"2\"\nassert solution(\"8\\n1 2 4 1 1 2 5 1\") == \"4\""
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 2 1 2 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 1 2 3\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 2 1 2 3') == '2'\nassert solution('8\\n1 2 4 1 1 2 5 1') == '4'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == \"2\"\nassert solution(\"8\\n1 2 4 1 1 2 5 1\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == 2\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 2 3 4 5 6 1\") == \"2\"\nassert solution(\"5\\n2 2 1 2 3\") == \"2\"\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\nm = 1\nfor i in range(n - 1):\n    if l[i + 1] - l[i] > 1:\n        m += 1\nprint(m)\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n\"\"\") == \"NE\"\nassert solution(\"\"\"\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n6\nD 1 1\nD 1 1\nD 1 1\nP 1\nP 1\nP 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n6\nD 1 1\nD 1 1\nD 1 1\nD 1 1\nD 1 1\nP 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n6\nD 1 1\nD 2 2\nD 1 3\nD 2 1\nD 1 1\nP 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nD 3 1\\nD 2 2\\nP 1\\nD 1 3\\nD 1 1\\nP 3\\n\") == \"NE\"\nassert solution(\"3\\nD 3 1\\nD 2 2\\nP 1\\nD 1 3\\nD 1 1\\nP 3\\n\") == \"3\"\nassert solution(\"3\\nD 3 1\\nD 2 2\\nP 1\\nD 1 3\\nD 1 1\\nP 3\\n\") == \"1\""
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n''') == '''\nNE\nNE\nNE\n'''\n\nassert solution('''\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n''') == '''\n3\n1\n'''\n\nassert solution('''\n6\nD 2 1\nD 5 3\nD 8 8\nP 1\nP 2\nP 3\n''') == '''\n1\n2\n'''\n\nassert solution('''\n6\nD 1 3\nD 2 2\nD 5 6\nP 1\nP 3\nP 2\n''') == '''\nNE\n1\n'''\n\nassert solution('''\n6\nD 2 2\nD 3 1\nD 1 3\nP 1\nP 3\nP 2\n''') == '''\nNE\n2\n'''"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nD 1 2\\nD 2 3\\nP 2\\nD 2 1\\nP 3\\nD 3 1\\nP 1\\nP 2\\nD 3 2\\nD 1 3\\nP 3\") == \"2\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n\"\n\"4 5\\n\"\n\"8 8\\n\"\n\"2 4\\n\"\n\"1 3\\n\"\n\"2 3\\n\"\n\"P 1\\n\"\n\"D 3 1\\n\"\n\"P 2\\n\"\n\"P 3\\n\") == \"1\\n2\\n3\\n\"\nassert solution(\"1 1\\n\"\n\"2 2\\n\"\n\"1 3\\n\"\n\"P 1\\n\"\n\"P 2\\n\") == \"NE\\nNE\\n\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\") == \"NE\"\nassert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\") == \"3\"\nassert solution(\"6\\nD 3 1\\nD 1 3\\nP 1\\nP 2\\nP 3\") == \"2\"\n\nprint(solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\"))"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\") == \"3\\n1\"\n\"\"\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"D 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\") == 'NE'\nassert solution(\"D 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\") == '3'\n\nprint(solution(\"D 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\"))\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"D 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\") == \"NE\"\nassert solution(\"D 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\") == \"3\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nD 1 2\\nP 1\\nP 2\\nP 3\\n\") == \"3\"\nassert solution(\"3\\nD 1 2\\nP 1\\nP 2\\nP 3\\n\") == \"NE\"\nassert solution(\"3\\nD 3 4\\nD 2 1\\nP 2\\nP 3\\n\") == \"1\"\n\nprint(solution(\"3\\nD 3 4\\nD 2 1\\nP 2\\nP 3\\n\"))\nprint(solution(\"3\\nD 3 4\\nD 2 1\\nP 2\\nP 3\\n\"))\nprint(solution(\"3\\nD 3 4\\nD 2 1\\nP 2\\nP 3\\n\"))\nprint(solution(\"3\\nD 3 4\\nD 2 1\\nP 2\\nP 3\\n\"))\n\n3\nNE\nNE\n1\n\nSample Input 3:\n3\nD 3 1\nD 2 2\nP 1\nP 2\nP 3\nD 3 2\nP 1\nP 3\nSample Output 3:\nNE\n1\n\nSample Input 4:\n4\nD 2 2\nD 3 4\nD 1 3\nD 3 4\nP 1\nP 3\nP 2\nP 4\nD 1 3\nP 1\nP 2\nD 2 2\nP 1\nP 3\nP 4\nD 1 3\nP 1\nP 2\nD 2 2\nP 1\nP 3\nP 4\nD 1 3\nP 1\nP 2\nD 2 2\nP 1\nP 3\nP 4\nD 1 3\nP 1\nP 2\nD 2 2\nP 1\nP 3\nP 4\nD 1 3\nP 1\nP 2\nD 2 2\nP 1\nP 3\nP 4\nSample Output 4:\n3\n1\nNE\n1\n\nSample Input 5:\n6\nD 4 1\nD 3 2\nD 3 3\nD 4 3\nD 2 1\nP 1\nD 1 2\nP 2\nD 2 2\nP 1\nP 3\nD 1 3\nP 1\nP 2\nD 2 2\nP 1\nP 3\nD 1 3\nP 1\nP 2\nD 2 2\nP 1\nP 3\nP 4\nD 1 3\nP 1\nP 2\nD 2 2\nP 1\nP 3\nP 4\nD 1 3\nP 1\nP 2\nD 2 2\nP 1\nP 3\nP 4\nD 1 3\nP 1\nP 2\nD 2 2\nP 1\nP 3\nP 4\nD 1 3\nP 1\nP 2\nD 2 2\nP 1\nP 3\nP 4\nSample Output 5:\n1\n1\n1\n1\n1\n\nSample Input 6:\n5\nD 2 1\nD 3 2\nD 1 3\nD 2 3\nP 1\nD 1 2\nP 1\nD 2 2\nP 1\nD 2 2\nP 1\nP 2\nD 2 2\nP 1\nP 2\nD 2 2\nP 1\nP 2\nD 2 2\nP 1\nP 2\nD 2 2\nP 1\nP 2\nSample Output 6:\n2\n3\n2\n3\n\nSample Input 7:\n9\nD 1 3\nD 2 3\nD 1 1\nD 2 4\nD 1 5\nD 2 7\nP 2\nD 2 5\nD 3 3\nD 3 4\nP 1\nD 2 3\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2 4\nP 2\nD 2 7\nP 1\nP 2\nD 2 5\nP 1\nP 2\nD 2 3\nP 1\nP 2\nD 2"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 5 6\\n1 1\\n1 1 6\\n1 2 2\") == \"5\"\nprint(\"Test 1 OK\")\n\nassert solution(\"2 3 5 6\\n1 1\\n1 1 6\\n1 2 2\") == \"5\"\nprint(\"Test 2 OK\")"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\") == \"2\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2') == '2'\nassert solution('2 3 5 6\\n1 1\\n1 1 6\\n1 2 2') == '5'\n\nprint(solution(stdin))\n\n----Problem----\nWe consider the following problem:\n\nThere is a lake represented as a $2^r \\times 2^c$ grid of characters, where\n\n- the \"*\" character represents a fish\n- the \" \" character represents an empty spot\n- the \"O\" character represents a hole\n\nWe have $r = r$ rows of length $c = c$ and $k = k$ seconds.\n\nThe goal is to visit all points in the lake and get all the fishes as fast as possible.\n\nYou can only move up, down, left, and right, and you cannot jump over a fish.\n\nHowever, you can assume that the hole is placed at the top right corner, and that the fish starts at position $(0, 0)$.\n\nGiven the lake, the goal is to find the number of points you can reach, and thus catch all the fishes in $O(k)$ seconds.\n\n-----Solution-----\nThe problem is similar to the fish problem, but it is much harder.\n\nThe problem can be solved recursively. Let $d$ denote the distance from the hole to the current position. If we have previously visited some point $(x, y)$ with $d = d$, then the fish can be caught. \n\nFor the current position $(x, y)$, let $z$ denote the distance from the hole to $(x, y)$. The problem is then reduced to finding the number of points you can reach from $(x, y)$ in $O(k)$ seconds, which is the number of points you can reach from $(0, 0)$ in $O(d)$ seconds (since you cannot move out of the grid).\n\nIn other words, if we have already found $C(x, y, d)$ points you can reach from $(x, y)$ in $O(d)$ seconds, then the number of points you can reach in $O(k)$ seconds is $C(x, y, d) + 1$.\n\nTo get the number of points you can reach from $(0, 0)$ in $O(d)$ seconds, we can first do the same recursion as the fish problem. Then, if we have already visited some point, we know that we can catch all the fishes in $O(d)$ seconds. Thus, we can compute $C(0, 0, d) = C(0, 0, d - 1) + C(0, 1, d - 1) + C(0, 2, d - 1) + \\dots + C(0, r - 1, d - 1) + 1$.\n\nThen, we can simply return $C(0, 0, k)$.\n\nThe implementation is in `lake_problem.py`.\n\n----References----\nhttps://www.geeksforgeeks.org/fishing-in-a-lake/\n\nhttps://en.wikipedia.org/wiki/Topological_sorting#Pseudocode\n\nhttps://www.geeksforgeeks.org/minimum-number-of-moves-required-to-reach-destination/\n\nhttps://www.geeksforgeeks.org/bfs-vs-dfs-for-depth-first-search/\n\nhttps://www.geeksforgeeks.org/minimum-number-of-moves-required-to-reach-destination-in-2d-array/\n\nhttps://en.wikipedia.org/wiki/DAG_shortest_path_problem#Kahn\u2019s_algorithm_for_topological_sorting\n\nhttps://en.wikipedia.org/wiki/Breadth-first_search\n\nhttps://en.wikipedia.org/wiki/Travelling_salesman_problem\n\nhttps://en.wikipedia.org/wiki/Topological_sorting#Shortest_Paths\n\nhttps://en.wikipedia.org/wiki/Depth-first_search\n\nhttps://en.wikipedia.org/wiki/Depth-first_search#Pseudocode\n\nhttps://www.geeksforgeeks.org/print-paths-given-source-destination/\n\nhttps://en.wikipedia.org/wiki/Union_find\n\nhttps://en.wikipedia.org/wiki/Disjoint-set_data_structure\n\nhttps://en.wikipedia.org/wiki/Disjoint-set_data_structure#Union-by-rank_and_path_compression\n\nhttps://www.geeksforgeeks.org/union-find/\n\nhttps://www.geeksforgeeks.org/union-find-algorithm-set-2-union-by-rank-and-path-compression/\n\nhttps://www.geeksforgeeks.org/union-find-algorithm-set-2-union-by-rank-and-path-compression/\n\n\"\"\""
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2') == '2'\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(SAMPLE_INPUT_1) == \"2\"\nassert solution(SAMPLE_INPUT_2) == \"5\"\n\nprint('Hooray!')\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2') == '2'\n\"\"\""
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\") == '2'\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2\\n') == '2'\nassert solution('2 3 5 6\\n1 1\\n1 1 6\\n1 2 2\\n') == '5'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2\\n') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2\\n') == '2'\n\nassert solution('2 3 5 6\\n1 1\\n1 1 6\\n1 2 2\\n') == '5'"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\nassert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\") == \"2.0000000000\"\nassert solution(\"5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5\") == \"2.0000000000\"\n\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\") == \"2.0000000000\"\nassert solution(\"5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5\") == \"2.0000000000\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\") == \"2.0000000000\"\n\"\"\""
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n''') == '2.0000000000'\n\nassert solution('''5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5\n''') == '2.0000000000'\n\n\"\"\"\nfrom math import *"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\") == \"2.0000000000\"\nassert solution(\"5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5\") == \"2.0000000000\"\n\n------BRIEF DESCRIPTION-----\nWe are given the coordinates of the flaws, and want to find the smallest drill bit size so that the resulting cube is clean. We assume that all the flaws are equally small, so that they are of negligible size.\n\nThe first line contains the number of flaws, between 3 and 5000\n\nThe next N lines contain the coordinates of each flaw, the coordinates being between -1000 and 1000\n\nThe result is the diameter of the smallest drill bit that would be able to remove all the flaws\n\n\"\"\"\nimport math"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    3\n    1.0 0.0 1.4\n    -1.0 0.0 -1.4\n    0.0 1.0 -0.2\n    \"\"\"\n) == \"\"\"\n2.0000000000\n\"\"\"\n\n\"\"\"\nSolution:\n\n1. Given the exact coordinates of the flaws, we can know that we have a cube with the following dimensions:\n  - width = sqrt(3) * (sqrt(6) * (max(x1, x2, x3) + min(x1, x2, x3)) / 3)\n  - length = sqrt(3) * (sqrt(6) * (max(y1, y2, y3) + min(y1, y2, y3)) / 3)\n  - height = sqrt(3) * (sqrt(6) * (max(z1, z2, z3) + min(z1, z2, z3)) / 3)\n\n2. We can compute the diameter of the drill bit, rounded to the nearest integer, using the formula:\n    diameter = (length + width + height) / 2\n\n3. We can compute the surface of the cube, rounded to the nearest integer, using the formula:\n    surface = (6 * length * width * height) / 3\n\n4. The diameter of the drill bit must be less than the surface of the cube, otherwise the cube would not have enough space to fit the drill bit.\n\n5. If the diameter is an integer, we can print it out.\n\"\"\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\") == \"2.0000000000\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 9 5\") == \"1\\n5\"\nassert solution(\"1 100 10\") == \"9\\n19\"\n\"\"\"\n\nimport sys\n\nA, B, S = [int(x) for x in sys.stdin.readline().split()]\n\ncount = 0\n\nfor i in range(A, B + 1):\n    if sum(int(c) for c in str(i)) == S:\n        count += 1\n\nprint(count)\nprint(min(i for i in range(A, B + 1) if sum(int(c) for c in str(i)) == S))\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 9 5') == '1\\n5'\nassert solution('1 100 10') == '9\\n19'\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 9 5\") == \"1\\n5\"\nassert solution(\"1 100 10\") == \"9\\n19\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\nassert solution(\"1 2 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n\"\"\"\n\nA, B, S = map(int, input().split())\ncount = 0\nfor i in range(A, B + 1):\n    sum = 0\n    for j in str(i):\n        sum += int(j)\n    if sum == S:\n        count += 1\nprint(count)\nprint(min([i for i in range(A, B + 1) if sum(list(map(int, str(i)))) == S]))\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\nassert solution(\"1 2 10\") == \"1\"\n\n\"\"\"\n\na, b, s = map(int, stdin.split())\n\ncount = 0\n\nfor x in range(a, b+1):\n    if sum([int(i) for i in list(str(x))]) == s:\n        count += 1\n\nprint(count)\nprint(min([i for i in range(a, b+1) if sum([int(j) for j in list(str(i))]) == s]))\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1, 9, 5) == \"1\"\nassert solution(1, 100, 10) == \"9\"\nassert solution(1, 100, 15) == \"19\"\n\"\"\""
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '1 9 5'\n) == '1'\nassert solution(\n    '1 100 10'\n) == '9'\n\"\"\"\n\nA, B, S = map(int, input().split())\n\ns = 0\nfor i in range(A, B + 1):\n    s += sum(int(c) for c in str(i))\n    if s == S:\n        break\n\nprint(i)\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 9 5\\n\") == \"1\"\nassert solution(\"1 100 10\\n\") == \"9\"\nassert solution(\"1 100 9\\n\") == \"9\"\nassert solution(\"1 100 10\\n\") == \"9\"\nassert solution(\"1 100 11\\n\") == \"10\""
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 5\n4 1 2 4 4''') == '7'\nassert solution('''1 1\n1''') == '1'\nassert solution('''1 1\n1\n2\n1\n2\n''') == '3'\nassert solution('''4 5\n4 1 2 4 4\n4 3 2 1\n''') == '1'\nassert solution('''6 3\n4 1 2 4 5 5\n4 1 3 2 5\n''') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n1\\n1\") == \"1\\n1\"\nassert solution(\"4 5\\n4 1 2 4 4\\n4 3 2 1\") == \"7\\n4 4 2 4 4 1 4\"\nprint('Success')\n\n\"\"\"\nimport sys\nfrom functools import reduce"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n1\\n1\") == \"1\"\nassert solution(\"4 5\\n4 1 2 4 4\\n4 3 2 1\") == \"7\\n4 4 2 4 4 1 4\"\n\"\"\"\n\nimport sys\nimport math\n\nN, M = map(int, sys.stdin.readline().split())\norder = list(map(int, sys.stdin.readline().split()))\nname = list(map(int, sys.stdin.readline().split()))\n\n_name = {}\n\nfor i, num in enumerate(name):\n    _name[num] = i\n\nqueue = []\nfor i in range(N):\n    queue.append((order[i], name[i]))\n\nres = 0\nwhile len(queue) > 1:\n    queue.sort()\n    _, n = queue.pop(0)\n    res += n\n    if queue:\n        _, n = queue.pop()\n        n += res\n        res = n\n    queue.sort()\n\nprint(res)\n\n_order = {}\nfor i, num in enumerate(order):\n    _order[num] = i\n\nfor i in range(N):\n    print(_order[_name[i]])\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"1 1\\n1\"\n) == \"1\\n1\"\nassert solution(\n    \"4 5\\n4 1 2 4 4\\n4 3 2 1\"\n) == \"7\\n4 4 2 4 4 1 4\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n1\\n1\") == \"1\"\nassert solution(\"4 5\\n4 1 2 4 4\\n4 3 2 1\") == \"7\\n4 4 2 4 4 1 4\""
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == '1'\nassert solution(\"4 5\\n4 1 2 4 4\\n4 3 2 1\") == '7\\n4 4 2 4 4 1 4'\n\"\"\""
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n1\\n1\") == '1\\n1'\nassert solution(\"4 5\\n4 1 2 4 4\\n4 3 2 1\") == '7\\n4 4 2 4 4 1 4'\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 4 4\") == \"7\"\nassert solution(\"1 2 4 4\") == \"4 4 1 1 2 4\"\n\"\"\"\n\nn, m = map(int, stdin.readline().strip().split())\na = list(map(int, stdin.readline().strip().split()))\nb = list(map(int, stdin.readline().strip().split()))"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n1') == '1'\n\"\"\"\n\nN, M = map(int, input().split())\nstdin = input()\n\nstdin = stdin.split()\nstdin = [int(i) for i in stdin]\n\nM = [0]*M\n\nsolution = [0]*N\nsolution[0] = stdin[0]\n\nfor i in range(1, N):\n    if solution[i-1] < stdin[i]:\n        M[stdin[i]] += 1\n    solution[i] = solution[i-1] + M[stdin[i]]\n    \n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 2\\n3 4\\n1 2\\n3 4\\n1 2\\n3 4\\n1 2\\n3 4') == '3'\nassert solution('4 10\\n1 3 5 4\\n2 3 5 4 1\\n3 4 6 2 1\\n4 2 5 1 3\\n5 1 4 2 3') == '7'\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nN, M = map(int, sys.stdin.readline().split())\n\nnames = deque(map(int, sys.stdin.readline().split()))\n\nassert len(names) == N\nassert 1 <= N <= 3 * 10 ** 5\nassert 1 <= M <= 3 * 10 ** 5\n\nans = []\n\nqueue = deque()\n\nfor i in range(M):\n    queue.append(names.popleft())\n\ni = 1\nwhile queue:\n    name = queue.popleft()\n\n    if name == i:\n        ans.append(i)\n    else:\n        queue.append(name)\n\n    i += 1\n\nprint(len(ans))\nprint(*ans)\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n\"\"\""
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\nassert solution(\"10 10 5 3\") == \"10\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n\"\"\"\n\nd, g, n, k = map(int, input().split())\n\npot = 0\nfor i in range(n):\n    if i % k == 0:\n        pot += g\n    else:\n        pot += d\n\nprint(pot)\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n\"\"\"\n\nimport re\nimport sys\n\nsys.setrecursionlimit(1500)"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 3 2\") == 4\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\n\"\"\"\n\nfrom typing import Dict, List, Union\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n\"\"\""
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10 3 2\") == 4\nassert solution(\"10 10 5 0\") == 10\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 20\\n23689') == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\nassert solution(\"9 12 29\") == \"8\"\nassert solution(\"11 12 31\") == \"7\"\n\nprint(\"Well done, you've passed the challenge!\")\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 100 9294\", \"23689\") == \"111\""
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 20\\n0123456789') == '10'\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n\"\"\"\n\nimport math\n\nx, a, b = [int(i) for i in input().split()]\ndigits = input().split()\n\nn = math.ceil(b / x)\n\nk = 0\n\nfor i in range(1, n + 1):\n    s = x * i\n    if (s >= a) and (s <= b):\n        for c in str(s):\n            if c not in digits:\n                break\n        else:\n            k += 1\n\nprint(k)\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 20\\n0123456789') == '10'\nassert solution('6 100 9294\\n23689') == '111'\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u041d\u043e \u0432\u0441\u0435 \u043e\u0442\u0432\u0435\u0442\u044b \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u043c\u0438.\n\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0432\u043e\u0434\u0430: \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0432\u0432\u043e\u0434 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 1 \u0434\u043e 10000\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0432\u0432\u043e\u0434\n\u0412 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0435\u0441\u0442\u044c \u043e\u0434\u043d\u043e \u0438\u0437 \u0441\u043b\u043e\u0432:\n\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043e \u043d\u0430 \u0432\u0441\u0435 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f\n\u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u0438 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\u0414\u0430\u043b\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043f\u0438\u0441\u043a\u043e\u0432.\n\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0446\u0438\u0444\u0440 \u0432 \u0447\u0438\u0441\u043b\u0435 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0446\u0438\u0444\u0440\u043e\u0439.\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0446\u0438\u0444\u0440 \u0432 \u0447\u0438\u0441\u043b\u0435 \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0439 \u0446\u0438\u0444\u0440\u043e\u0439.\n\u0415\u0441\u043b\u0438 \u043e\u0434\u0438\u043d \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0431\u0443\u0434\u0435\u0442 \u043f\u0443\u0441\u0442\u043e\u0439, \u0442\u043e \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0432\u043d\u044b.\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0434\u0430\u043b\u0435\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u043c.\n\u0415\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u0441\u0435 \u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0435, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0442\u0432\u0435\u0442, \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435.\n\"\"\"\n\nimport sys\n\n\"\"\"\n\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0432\u043e\u0434\u0430: \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0432\u0432\u043e\u0434 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 1 \u0434\u043e 10000\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0432\u0432\u043e\u0434\n\u0412 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0435\u0441\u0442\u044c \u043e\u0434\u043d\u043e \u0438\u0437 \u0441\u043b\u043e\u0432:\n\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043e \u043d\u0430 \u0432\u0441\u0435 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f\n\u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u0438 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\u0414\u0430\u043b\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043f\u0438\u0441\u043a\u043e\u0432.\n\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0446\u0438\u0444\u0440 \u0432 \u0447\u0438\u0441\u043b\u0435 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0446\u0438\u0444\u0440\u043e\u0439.\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c "
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 20\\n0123456789') == '10'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 20', '0123456789') == '10'\nassert solution('6 100 9294', '23689') == '111'\nassert solution('5 10 12', '12') == '6'\nassert solution('6 100 9294', '23689') == '111'\n\n\"\"\"\n\nimport re\nimport collections"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 20\\n23689\") == \"111\"\n\"\"\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1''') == '1.500000 2.666667'\n\nassert solution('''5 2\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1''') == '1.500000 3.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 2\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1''') == '1.500000 3.666667'"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\\n') == '1.500000 2.666667'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 3.666667'"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(sample_input) == sample_output\n\n'''\n\nimport numpy as np\n\nn, t = map(int, stdin.readline().strip().split())\n\nin_store, remotes = {}, {}\n\nfor _ in range(n):\n    t, r, k = map(int, stdin.readline().strip().split())\n    if t == 1:\n        if r == 1:\n            in_store[k] = t + k\n        else:\n            remotes[k] = t + k\n    else:\n        if r == 1:\n            remotes[k] = t + k\n        else:\n            in_store[k] = t + k\n\nin_store_times = np.array(list(in_store.values()))\nremotes_times = np.array(list(remotes.values()))"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5 2\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\"\"\") == '1.500000 3.666667'\nassert solution(\"\"\"1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\"\"\") == '1.500000 3.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 2.666667'\n\nassert solution('5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 3.666667'\n\n\"\"\"\n\nfrom collections import deque\nimport math"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 2.666667\"\nassert solution(\"5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 3.666667\"\nassert solution(\"2 2\\n1 R 1\\n2 R 2\") == \"1.500000 2.666667\"\nassert solution(\"1 1\\n1 R 1\") == \"0.500000 2.666667\"\nassert solution(\"0 2\\n1 R 1\") == \"0.500000 2.666667\"\n\"\"\""
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == '1.500000 3.666667'\nassert solution(\"5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == '1.500000 3.666667'\n\n\"\"\"\n\n\n\"\"\""
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 3.666667'\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == \"3\"\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == \"3\"\nassert solution(\"5 3\\n100110\\n01010\\n101010\\n101010\\n11110\\n11110\\n01110\\n11110\") == \"5\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == \"3\"\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\\n\") == \"3\"\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\\n\") == \"3\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '-1'\nassert solution('1\\n') == '1'\nassert solution('11\\n') == '1'\nassert solution('101\\n') == '1'\nassert solution('1010\\n') == '2'\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == 3\n\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == 3\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('ab') == 'b'\nassert solution('aa') == 'a'\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n101010\\n111001\\n101001\") == 3\nassert solution(\"3 6\\n101010\\n111001\\n101001\") == 3\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == 3\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 5\n10010\n01010\n10101\n01001''') == '3'\n\nassert solution('''4 5\n101010\n111001\n101001\n01010''') == '3'\n\nassert solution('''3 6\n101010\n111001\n101001\n101010''') == '2'\n\nassert solution('''3 6\n101010\n111001\n101001\n101010''') == '2'\n\nassert solution('''3 6\n101010\n111001\n101001\n101010''') == '2'"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 6\\n101010\\n111001\\n101001') == '3'\n\"\"\"\n\nfrom typing import List, Union, Dict\n\nfrom collections import defaultdict\n\nRow = List[Union[int, str]]\n\nMEMORY_MATRIX = defaultdict(lambda: defaultdict(int))\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == \"3\"\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == \"3\"\n\"\"\""
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0') == '-3 -1'\nassert solution('4\\n2 4\\n6 -1\\n3 5\\n-1 -1') == '3 4'\n\"\"\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n\") == '-3 -1\\n3 1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\") == \"-3 -1\\n3 1\"\nassert solution(\"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\") == \"3 4\\n3 -1\"\nprint('Passed all tests')\n\n\"\"\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n\") == \"3 -1\"\nassert solution(\"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\\n\") == \"3 4\"\n\"\"\"\nimport math\n\nfrom typing import List, Dict, Set\n\nMAX_INT = 10 ** 9\nMIN_INT = -10 ** 9\n\n\nclass Solution:\n    \"\"\"https://www.codewars.com/kata/5430f9b0f4fbb83c20002db/train/python\"\"\"\n\n    def shared_answer(self, swimmer_count: int, swimmer_positions: List[List[int]]) -> List[int]:\n        \"\"\"\n        :param swimmer_count: number of people in the pool\n        :param swimmer_positions: list of the position of all people in the pool\n        :return: list of two position numbers, where the number of people in between them is equal\n        \"\"\"\n        distance_count = swimmer_count + 1\n        possible_points = [set() for _ in range(distance_count)]\n        for i, swimmer_position in enumerate(swimmer_positions):\n            possible_points[0].add(swimmer_position[0])\n            possible_points[-1].add(swimmer_position[1])\n            for distance_index, point in enumerate(swimmer_position[1:-1]):\n                possible_points[distance_index + 1].add(point)\n        result = []\n        for index in range(1, distance_count - 1):\n            current_distance = distance_count - index\n            left_pos = possible_points[index - 1]\n            right_pos = possible_points[index + 1]\n            left_count = len(left_pos)\n            right_count = len(right_pos)\n            if left_count == right_count:\n                for left_point in left_pos:\n                    right_point = right_pos.difference(left_pos).pop()\n                    if left_point == right_point:\n                        result.append(left_point)\n        return result\n\n    def shared_answer_alt(self, swimmer_count: int, swimmer_positions: List[List[int]]) -> List[int]:\n        \"\"\"\n        :param swimmer_count: number of people in the pool\n        :param swimmer_positions: list of the position of all people in the pool\n        :return: list of two position numbers, where the number of people in between them is equal\n        \"\"\"\n        distance_count = swimmer_count + 1\n        possible_points = [[] for _ in range(distance_count)]\n        for i, swimmer_position in enumerate(swimmer_positions):\n            possible_points[0].append(swimmer_position[0])\n            possible_points[-1].append(swimmer_position[1])\n            for distance_index, point in enumerate(swimmer_position[1:-1]):\n                possible_points[distance_index + 1].append(point)\n        result = []\n        for index in range(1, distance_count - 1):\n            current_distance = distance_count - index\n            left_pos = possible_points[index - 1]\n            right_pos = possible_points[index + 1]\n            left_count = len(left_pos)\n            right_count = len(right_pos)\n            if left_count == right_count:\n                for left_point in left_pos:\n                    right_point = right_pos.difference(left_pos).pop()\n                    if left_point == right_point:\n                        result.append(left_point)\n        return result\n\n    def swimmer_count(self, swimmer_positions: List[List[int]]) -> int:\n        \"\"\"\n        :param swimmer_positions: list of the position of all people in the pool\n        :return: number of people in the pool\n        \"\"\"\n        return len(swimmer_positions)\n\n    def swimmer_positions(self, swimmer_count: int, swimmer_positions: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        :param swimmer_count: number of people in the pool\n        :param swimmer_positions: list of the position of all people in the pool\n        :return: list of the position of all people in the pool\n        \"\"\"\n        return swimmer_positions\n\n    def solution(self, input_data: str) -> List[str]:\n        \"\"\"\n        :param input_data: input data in format described in the task\n        :return: solution to the task\n        \"\"\"\n        swimmer_count, *swimmer_positions = [int(number) for number in input_data.split('\\n')]\n        if self.swimmer_count(swimmer_positions)!= swimmer_count:\n            return []\n        return self.shared_answer(swimmer_count, swimmer_positions)\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\") == '-3 -1'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\") == \"3 -1\\n-3 1\""
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\") == \"3 -1\"\nassert solution(\"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\") == \"3 4\"\nassert solution(\"4\\n-10^9 -10^9\\n0 0\\n0 1\\n1 0\\n0 -10^9\") == \"0 -10^9\"\nassert solution(\"10\\n0 10^9\\n10 10^9\\n0 -10^9\\n-10^9 0\\n0 10^9\\n10 10^9\") == \"0 10^9\"\nassert solution(\"6\\n0 10^9\\n10 10^9\\n0 -10^9\\n-10^9 0\\n0 10^9\\n10 10^9\\n0 10^9\") == \"0 10^9\"\n\n\"\"\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0') == '-3 -1\\n3 1'\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin):\n        n, *points = map(int, stdin.splitlines())\n        points.sort(key=lambda x: x * x)\n        print(points[-1] - points[0], points[0] + points[-1])\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n\") == \"3 -1\"\nassert solution(\"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\\n\") == \"3 4\"\n\n\"\"\"\nimport sys\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n0 0\n0 1\n1 0\n0 -1\n-1 0''') == '-3 -1'\nassert solution('''4\n2 4\n6 -1\n3 5\n-1 -1''') == '3 4'\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n1') == '1\\n1'\nassert solution('2\\n1\\n1') == '2\\n1\\n1'\nassert solution('3\\n1\\n1\\n1') == '3\\n1\\n1\\n1'\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6 5 45 20 0 0 2 0 1 1.5\") == \"2 5.086781\"\n\nassert solution(\"3 0.25 2 45 20 0 0 2 0 1 1.5\") == \"1 12.715255\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '3 6 5 45 20 0 0 2 0 1 1.5'\n) == '2 5.086781'\nassert solution(\n    '3 0.25 2 45 20 0 0 2 0 1 1.5'\n) == '1 12.715255'\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3 6 5 45 20\n0 0\n2 0\n1 1.5\n\"\"\") == '2 5.086781'\nassert solution(\"\"\"3 6 5 45 20\n0 0\n2 0\n1 1.5\n\"\"\") == '1 12.715255'\nassert solution(\"\"\"5 5 2 25 0\n0 0\n3 0\n1 0\n2 0\n4 0\n\"\"\") == '3 0.000020'\nassert solution(\"\"\"10 5 6 35 0\n0 0\n2 0\n1 1.5\n\"\"\") == '2 3.499997'\nassert solution(\"\"\"10 5 6 35 0\n0 0\n2 0\n1 1.5\n\"\"\") == '2 3.499997'\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\") == '2 5.086781'\n\n\"\"\"\n\nimport sys\nimport math\n\nfrom typing import Tuple, List"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\") == \"2 5.086781\"\nassert solution(\"3 0.25 2 45 20\\n0 0\\n2 0\\n1 1.5\") == \"1 12.715255\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 6 5 45 20') == '2 5.086781'\nprint(solution(input()))\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\") == '2 5.086781'\nassert solution(\"3 0.25 2 45 20\\n0 0\\n2 0\\n1 1.5\") == '1 12.715255'\nassert solution(\"3 0.25 2 45 20\\n0 0\\n2 0\\n1 1.5\\n3 1.5 1 1.5\") == '1 12.715255'\nassert solution(\"3 0.25 2 45 20\\n0 0\\n2 0\\n1 1.5\\n3 1.5 1 1.5\\n4 1.5 2 1.5\\n5 1.5 3 1.5\") == '1 12.715255'\nassert solution(\"3 0.25 2 45 20\\n0 0\\n2 0\\n1 1.5\\n3 1.5 1 1.5\\n4 1.5 2 1.5\\n5 1.5 3 1.5\\n6 1.5 4 1.5\") == '1 12.715255'\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\") == \"2 5.086781\"\n\"\"\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2 2 1\\n3 2 1\\n4 2 1\\n') == '3'\n\"\"\""
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\\n1\\n1\\n1\\n\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n0\\n1\\n1\\n0\\n1\\n1\\n\") == \"8\"\nassert solution(\"1\\n1\\n1\\n1\\n0\\n1\\n1\\n0\\n1\\n1\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\\n\") == 8\nassert solution(\"4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\\n\") == 1\n\"\"\"\n\nimport math"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1') == '8'\nassert solution('4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4') == '1'\n\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\") == \"1\"\nassert solution(\"4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\") == \"1\"\nassert solution(\"6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\") == \"8\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 0 4 4\") == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1\") == 1\nassert solution(\"1 1 1 1\") == 1\nassert solution(\"1 1 1 1\") == 1\nassert solution(\"1 1 1 1\") == 1\nassert solution(\"1 1 1 1\") == 1\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\") == \"8\"\nassert solution(\"4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''7''') == '''4 3'''\nassert solution('''10''') == '''impossible'''\n\nassert solution('''5''') == '''4 1'''\nassert solution('''7''') == '''4 3'''\n\nassert solution('''9''') == '''3 2'''\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7') == '4 3'\n\"\"\"\n\nn = int(stdin.read())\nm = 0\nwhile n >= m**2:\n    m += 1\nm += 1\nk = m**2 - n\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'\nassert solution('1') == 'impossible'\n\nassert solution('8') == '4 3'\nassert solution('16') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\") == \"4 3\"\n\nprint(solution(\"10\"))\n\nimport math"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\") == \"4 3\"\nassert solution(\"10\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"4 3\"\n\nassert solution(\"10\") == \"impossible\"\nassert solution(\"11\") == \"impossible\"\nassert solution(\"12\") == \"impossible\"\nassert solution(\"13\") == \"impossible\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"4 3\"\n\"\"\""
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1\\n3\") == \"16\"\nassert solution(\"4\\n2\\n4\\n1\\n4\") == \"109\"\n\"\"\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1\\n3\") == \"16\"\nprint(\"Test 1 Passed\")\nassert solution(\"4\\n2\\n4\\n1\\n4\") == \"109\"\nprint(\"Test 2 Passed\")\nprint(\"All tests passed\")\n\n\"\"\"\n\n\"\"\"\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0440\u0430\u0432\u043d\u043e 10\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u0445 \u0441\u0443\u043c\u043c\u0443\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 9 \u0446\u0438\u0444\u0440 \u0442\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430, \u0441\u0443\u043c\u043c\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\n\nSample Input 1:\n5\n10\n10\n8\n9\n1\nSample Output 1:\n835\n\"\"\"\n\n\"\"\"\nN = int(input())\narr = []\ns = 0\n\nfor _ in range(N):\n    n = int(input())\n    s += n\n    arr.append(n)\n\nfor i in range(N - 9, N):\n    s += arr[i]\n\nprint(s % 1000000000)\n\"\"\"\n\n\"\"\"\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0440\u0430\u0432\u043d\u043e 10\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u0445 \u0441\u0443\u043c\u043c\u0443\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 9 \u0446\u0438\u0444\u0440 \u0442\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430, \u0441\u0443\u043c\u043c\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\n\nSample Input 1:\n5\n10\n10\n8\n9\n1\nSample Output 1:\n835\n\"\"\"\n\n\"\"\"\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0440\u0430\u0432\u043d\u043e 10\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u0445 \u0441\u0443\u043c\u043c\u0443\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 9 \u0446\u0438\u0444\u0440 \u0442\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430, \u0441\u0443\u043c\u043c\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\n\nSample Input 1:\n5\n10\n10\n8\n9\n1\nSample Output 1:\n835\n\"\"\"\n\n\"\"\"\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0440\u0430\u0432\u043d\u043e 10\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u0445 \u0441\u0443\u043c\u043c\u0443\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 9 \u0446\u0438\u0444\u0440 \u0442\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430, \u0441\u0443\u043c\u043c\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\n\nSample Input 1:\n5\n10\n10\n8\n9\n1\nSample Output 1:\n835\n\"\"\"\n\n\"\"\"\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0440\u0430\u0432\u043d\u043e 10\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u0445 \u0441\u0443\u043c\u043c\u0443\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 9 \u0446\u0438\u0444\u0440 \u0442\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430, \u0441\u0443\u043c\u043c\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\n\nSample Input 1:\n5\n10\n10\n8\n9\n1\nSample Output 1:\n835\n\"\"\"\n\n\"\"\"\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0440\u0430\u0432\u043d\u043e 10\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u0445 \u0441\u0443\u043c\u043c\u0443\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 9 \u0446\u0438\u0444\u0440 \u0442\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430, \u0441\u0443\u043c\u043c\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\n\nSample Input 1:\n5\n10\n10\n8\n9\n1\nSample Output 1:\n835\n\"\"\"\n\n\"\"\"\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0440\u0430\u0432\u043d\u043e 10\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u0445 \u0441\u0443\u043c\u043c\u0443\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 9 \u0446\u0438\u0444\u0440 \u0442\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430, \u0441\u0443\u043c\u043c\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\n\nSample Input 1:\n5\n10\n10\n8\n9\n1\nSample Output 1:\n835\n\"\"\"\n\n\"\"\"\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0440\u0430\u0432\u043d\u043e 10\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u0445 \u0441\u0443\u043c\u043c\u0443\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 9 \u0446\u0438\u0444\u0440 \u0442\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430, \u0441\u0443\u043c\u043c\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\n\nSample Input 1:\n5\n10\n10\n8\n9\n1\nSample Output 1:\n835\n\"\"\"\n\n\"\"\"\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0440\u0430\u0432\u043d\u043e 10\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u0445 \u0441\u0443\u043c\u043c\u0443\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 9 \u0446\u0438\u0444\u0440 \u0442\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430, \u0441\u0443\u043c\u043c\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\n\nSample Input 1:\n5\n10\n10\n8\n9\n1\nSample Output 1:\n835\n\"\"\"\n\n\"\"\"\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0440\u0430\u0432\u043d\u043e 10\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u0445 \u0441\u0443\u043c\u043c\u0443\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 9 \u0446\u0438\u0444\u0440 \u0442\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430, \u0441\u0443\u043c\u043c\u0430"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1\\n3\") == \"16\"\nassert solution(\"4\\n2\\n4\\n1\\n4\") == \"109\"\nassert solution(\"5\\n2\\n4\\n1\\n4\\n5\\n5\\n5\\n5\") == \"1010\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = []\nfor _ in range(n):\n    a.append(int(sys.stdin.readline()))\n\nsum_ = sum([min(a) * max(a) for a in zip(*([iter(sorted(a))] * 2))])\nprint(sum_ % 1_000_000_000)\n"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1\\n3') == '16'\nassert solution('4\\n2\\n4\\n1\\n4') == '109'\n\"\"\"\n\nn = int(input())\nprices = [int(x) for x in input().split()]"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1\\n3\") == \"16\"\nprint(solution(\"4\\n2\\n4\\n1\\n4\"))\n\nimport json"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '0'\nassert solution('1\\n') == '0'\nassert solution('2\\n1\\n') == '1'\nassert solution('2\\n1\\n2\\n') == '5'\n\n-------\n\nIn the previous problem, you had to calculate the sum of the elements in the array in O(n) time. \n\nThis time, you have to implement a function that calculates the sum of the elements in the array in O(n log n) time, without using additional memory.\n\nImplement a function that calculates the sum of the array in O(n log n) time. \n\nThe result should be returned as a string, not as an integer.\n\n-----Examples-----\nSample Input 1:\n2\n1\n3\nSample Output 1:\n4\n\nSample Input 2:\n4\n2\n4\n1\n4\nSample Output 2:\n10\n\nSample Input 3:\n5\n1\n2\n3\n4\n5\nSample Output 3:\n11\n\n-----Notes-----\nYou can assume that all the array elements are numbers.\n\nYou can use any language.\n\nYou can use standard libraries.\n\nYou can use any third-party libraries.\n\nYou can write Unit Tests or integration tests.\n\nIt's recommended to be very strict with input and output data.\n\n------\n\"\"\"\n\n\"\"\"\nTHE BEST SOLUTION THAT I FOUND SO FAR:\n\nThis is the second best solution I came up with.\nIt's basically the same as the first one, but it\nsaves more space by not using the extra O(n) space\nfor the results array. Instead, the main array is\nhalved at each step. At each step, the elements\nare sorted in ascending order, and the element\nthat is the middle is subtracted from the biggest\nelement in the subarray. This makes the algorithm\nO(nlogn) in the worst case, which is better than\nthe O(n^2) that is needed for the solution without\nthe extra array.\n\nIn my opinion this solution is the most intuitive\nand straightforward, which makes sense since the\nproblem demands that the elements are sorted\nin ascending order, so it should be easy to find\nthe middle element.\n\n\"\"\""
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1\\n3') == '16'\nprint(solution(input()))\n"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1\\n3\\n\") == \"16\"\nassert solution(\"4\\n2\\n4\\n1\\n4\\n\") == \"109\"\n\"\"\"\n\n\"\"\"\n\u0421\u0443\u043c\u043c\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nnn, \u0430 \u0437\u0430\u0442\u0435\u043c nnn \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043a\u0440\u0430\u0442\u043d\u044b\u0445 3 \u0438\u043b\u0438 5.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nnn, \u0430 \u0437\u0430\u0442\u0435\u043c nnn \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043a\u0440\u0430\u0442\u043d\u044b\u0445 3, \u0437\u0430\u0442\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043a\u0440\u0430\u0442\u043d\u044b\u0445 5.\n\nSample Input 1:\n5\n1\n2\n3\n4\n5\nSample Output 1:\n1\n1\nSample Input 2:\n4\n7\n8\n9\n10\nSample Output 2:\n0\n1\nSample Input 3:\n6\n3\n5\n6\n7\n8\nSample Output 3:\n1\n3\nSample Input 4:\n1\n8\nSample Output 4:\n0\n0\n\"\"\"\n\nn = int(input())\nm = []\nfor i in range(n):\n    m.append(int(input()))\n\nc_3, c_5 = 0, 0\n\nfor i in m:\n    if i % 3 == 0:\n        c_3 += 1\n    if i % 5 == 0:\n        c_5 += 1\n\nprint(c_3, c_5, sep='\\n')\n"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1\\n3\") == \"16\"\nprint(solution(\"4\\n2\\n4\\n1\\n4\"))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1\\n3') == '16'\n\"\"\"\n\nN = int(input())\n\nresult = 0\n\nfor _ in range(N):\n    n = int(input())\n    result += n * min(n, max(n, 1))\n\nprint(int(str(result)[-9:]))\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 1 1\\n1 3\\n2 3\\n4 1\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 1 1\\n1 3\\n2 3\\n4 1') == '5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1'\nassert solution('4 3 1 1\\n1 3\\n2 3\\n4 1') == '4\\n1 3 1\\n2 3 2\\n4 1 0'\nassert solution('4 2 1 1\\n1 2\\n2 2\\n4 1') == '4\\n1 2 1\\n2 2 2\\n4 1 0'\nassert solution('4 2 1 1\\n1 2\\n2 1\\n4 1') == '4\\n1 2 1\\n2 1 0\\n4 1 0'\nassert solution('4 1 1 1\\n1 1\\n2 1\\n4 1') == '4\\n1 1 1\\n2 1 0\\n4 1 0'\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 3\n5 3 1 1''') == '''5\n1 3 1\n2 3 2\n4 1 0\n2 4 1\n3 1 0'''\nassert solution('''3 2\n5 1\n1 2\n1 2\n1 2\n''') == '''5\n1 2 1\n1 2 2\n1 2 2'''\nassert solution('''3 1\n1 2\n1 2\n1 2\n''') == '''3\n1 2 1\n1 2 2\n1 2 2'''\nassert solution('''5 1\n5 5\n1 3\n1 4\n1 5\n1 5\n''') == '''3\n4 1 0\n4 1 0\n5 1 1\n5 5 0\n3 0 0\n2 4 1\n2 5 1\n4 3 1\n5 5 0\n3 0 0'''\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n') == '3\\n1 2 1\\n1 2 2\\n1 2 2'\nassert solution('4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n') == '5\\n1 3 1\\n2 3 2\\n4 1 0'\n\n---------------------\n\nimport sys"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n1 2\\n2 3\\n4 1\\n\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1\\n3 1 0\"\nassert solution(\"5 3 1 1\\n1 3\\n2 3\\n4 1\\n\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n1 2\") == '3\\n1 2 1'\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n2 4 1\\n3 1 0\") == '5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1\\n3 1 0'\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n2 4 1\\n3 1 0\") == '5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1\\n3 1 0'\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n2 4 1\\n3 1 0\") == '5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1\\n3 1 0'\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n2 4 1\\n3 1 0\") == '5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1\\n3 1 0'\n\n----"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == test_output_1\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n') == '3\\n1 2 1\\n1 2 2\\n1 2 2'\n\nassert solution('4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n') == '5\\n1 3 1\\n2 3 2\\n4 1 0'\n\nassert solution('4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n') == '5\\n1 3 1\\n2 3 2\\n4 1 0'\n\nassert solution('2 2\\n1 2\\n1 2\\n') == '0'\n\nassert solution('4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n') == '5\\n1 3 1\\n2 3 2\\n4 1 0'"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('\\n1 2 3\\n4 2') == '1 4 2\\n2 1 0'\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n\") == \"3\\n1 2 1\\n1 2 2\\n1 2 2\"\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\"\n\"\"\""
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1\\n') == 'impossible'\nassert solution('2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1\\n') == '1 2'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nn, m = map(int, input().split())\ntoy_history = []\nfor i in range(0, n):\n    toy_history.append([])\n\nfor i in range(0, n):\n    d, e = map(int, input().split())\n    for j in range(0, e):\n        s, k, t = map(int, input().split())\n        toy_history[i].append([s, k, t])\n\ntoy_history.sort()\n\ncount = 0\nlast_playing = 0\nfor i in range(0, n):\n    toy_history[i].sort()\n    for j in range(0, len(toy_history[i])):\n        if toy_history[i][j][0] > last_playing:\n            count += 1\n            last_playing = toy_history[i][j][0]"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n6 7\\n0 1 1\\n0 2 2\\n1 1 3\\n2 1 2\\n2 2 1\\n3 2 3\\n4 2 1\") == \"1 2\"\n\"\"\""
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n6 7\\n0 1 1\\n0 2 2\\n1 1 3\\n2 1 2\\n2 2 1\\n3 2 3\\n4 2 1') == '1 2'\n"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1''') == '1 2'\n\nassert solution('''2 1\n20 3\n0 1 1\n10 1 0\n10 2 1''') == 'impossible'\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n6 7\\n0 1 1\\n0 2 2\\n1 1 3\\n2 1 2\\n2 2 1\\n3 2 3\\n4 2 1') == '1 2'\nassert solution('2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1') == 'impossible'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n6 7\\n0 1 1\\n0 2 2\\n1 1 3\\n2 1 2\\n2 2 1\\n3 2 3\\n4 2 1\") == \"1 2\"\n\n\"\"\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(expected)\nprint(solution(str(input())))\n\n-----Hint-----\nTry to make use of the game theory of the problem. First, think about what the children really are: are they independent and are they following any particular strategy?\n\nSecond, think about who is playing who today. Which player should play with which player?\n\nThird, try to form a solution that does not require breaking up the action into elementary steps. For example, suppose a possible solution is to divide the playtime into two independent chunks, each of which contains only toys for one kid. Then in the first chunk, the first kid plays with the first toy, then the second kid plays with the second toy. Then in the second chunk, the first kid plays with the first toy again, and so on. Then in the second chunk, the second kid plays with the second toy, and so on. Then in the last chunk, the first kid plays with the last toy, and so on. Then in the last chunk, the second kid plays with the last toy, and so on. This is a valid solution.\n\nNow, suppose there is another strategy which is to assign all toys to all kids. Then the first kid plays with the first toy, then the second kid plays with the second toy, and so on. Then in the second chunk, the first kid plays with the second toy, then the second kid plays with the first toy, and so on. Then in the last chunk, the first kid plays with the last toy, then the second kid plays with the first toy, and so on. This is an equally valid solution.\n\nThe solution proposed above is the most obvious one, but there might be others.\n\nPython\nlst = list(map(int, stdin.readline().split()))\nn = lst[0]\nm = lst[1]\nd = lst[2]\ne = list(map(int, stdin.readlines()))\n\nlst = [0] * (n + 1)\ndic = {}\nfor i in range(len(e)):\n    s = e[i][0]\n    k = e[i][1]\n    t = e[i][2]\n    lst[k] = t\n    if s in dic:\n        dic[s].append(k)\n    else:\n        dic[s] = [k]\n\nlst = sorted(lst)\n\nprint('impossible' if len(lst) > d * n else lst[:d * n])"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(expected_output)"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n6 7\\n0 1 1\\n0 2 2\\n1 1 3\\n2 1 2\\n2 2 1\\n3 2 3\\n4 2 1\") == \"1 2\"\n\nSample Case:\n\n3\n4 4\n0 1 3\n0 2 4\n0 3 5\n0 1 4\n0 2 5\n0 3 6\n0 4 6\n0 1 5\n0 2 5\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6\n0 3 6\n0 4 6\n0 1 6\n0 2 6"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n\"\"\"\n\nimport sys\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"5 2\"\n\"\"\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n\"\"\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n\"\"\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"5 2\"\nassert solution(\"2020\") == \"2020 1\""
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"5 2\"\n\"\"\"\n\n\"\"\"\nThis problem is also called binomial coefficients, and can be solved by the solution that we provided in Problem 4.\n\nLet's see the detailed proof in the following recurrence relation. \n\nNote that if $X$ is a non-negative integer, then the binomial coefficient $n$ choose $k$ is a non-negative integer, and so the binomial coefficient can be obtained from the relations (this is the base case of the recursion relation), and it can also be obtained from the relation of the previous step. \n\nSuppose that $X$ is not a non-negative integer. \n\nWe can deduce that the binomial coefficient must be non-negative.\n\nLet's write down the recurrence relation for the binomial coefficients. \n\nThe binomial coefficient of $n$ choose $k$ can be obtained from the recurrence relation of the binomial coefficient of $n-1$ choose $k-1$ and $n-1$ choose $k$, since the recurrence relation of binomial coefficients relates them.\n\nLet's consider the base case of the recurrence relation of the binomial coefficient. \n\nLet's consider that $n$ and $k$ are non-negative integers. \n\nThe base case of the recurrence relation is $n$ choose $k$ = 1. \n\nLet's write down the recurrence relation of binomial coefficients for $n$ choose $k$. \n\nNote that for any non-negative integers $n$ and $k$ the binomial coefficient of $n$ choose $k$ is non-negative. \n\nThus for any non-negative integers $n$ and $k$ we have $n \\ge k$.\n\nThe recurrence relation is $n \\choose k = n \\choose (k-1) + n \\choose (k-2) + \\cdots + n \\choose 0$.\n\nIn the base case it is only possible to have $k = 0$, and therefore we obtain $n \\choose k = 1$. \n\nWhen $k = 0$, and so the base case is $n$ choose $k = 1$, we return $n$ and $k$ to indicate that the binomial coefficient is one, which is the base case of the recurrence relation. \n\nWe can deduce that the binomial coefficient of $n$ choose $k$ is non-negative. \n\nThus for any non-negative integers $n$ and $k$ we have $n \\ge k$.\n\nWe can deduce that the binomial coefficient of $n$ choose $k$ is non-negative.\n\nWe will obtain the solution by solving the recurrence relation for $n$ choose $k$. \n\nWe will need a way of iterating over the sequence of the non-negative integers in ascending order. \n\nLet's consider the sequence of all non-negative integers in ascending order. \n\nWe will see that for every non-negative integer $n$, we have $n \\ge n - 1$. \n\nFor every non-negative integer $n$, we have $n \\ge n - 2$. \n\nFor every non-negative integer $n$, we have $n \\ge n - 3$. \n\nFor every non-negative integer $n$, we have $n \\ge n - 4$. \n\nAnd so on. \n\nThus we have all the non-negative integers in ascending order, except for $n = 0$.\n\nFor every non-negative integer $n$, we have $n \\ge n - 5$. \n\nFor every non-negative integer $n$, we have $n \\ge n - 6$. \n\nFor every non-negative integer $n$, we have $n \\ge n - 7$. \n\nAnd so on. \n\nThus we have all the non-negative integers in ascending order, except for $n = 0$, $n = 1$, $n = 2$, and so on. \n\nWe will create a function to iterate over all non-negative integers in ascending order. \n\nFor every non-negative integer $n$, we will have $n \\ge n - 8$. \n\nFor every non-negative integer $n$, we will have $n \\ge n - 9$. \n\nFor every non-negative integer $n$, we will have $n \\ge n - 10$. \n\nFor every non-negative integer $n$, we will have $n \\ge n - 11$. \n\nFor every non-negative integer $n$, we will have $n \\ge n - 12$. \n\nAnd so on. \n\nThus we will have all the non-negative integers in ascending order, except for $n = 0$, $n = 1$, $n = 2$, and so on. \n\nWe can deduce that for every non-negative integer $n$, we have $n \\ge n - 13$. \n\nFor every non-negative integer $n$, we have $n \\ge n - 14$. \n\nFor every non-negative integer $n$, we have $n \\ge n - 15$. \n\nFor every non-negative integer $n$, we have $n \\ge n - 16$. \n\nAnd so on. \n\nThus we have all the non-negative integers in ascending order, except for $n = 0$, $n = 1$, $n = 2$, and so on. \n\nWe can easily solve the recurrence relation for $n$ choose $k$ by iterating over the sequence of non-negative integers in ascending order. \n\nThe index $i$ in the sequence will be the non-negative integer $n$. \n\nThe element $n$ in the sequence will be the binomial coefficient $n$ choose $k$ of the non-negative integer $n$. \n\nGiven a non-negative integer $X$, we can write down the recurrence relation for $n$ choose $k$ as follows. \n\nWe can write down the recurrence relation for $n$ choose $k$ as follows.\n\nWe can write down the recurrence relation for $n$ choose $k$ as follows.\n\nWe can write down the recurrence relation for $n$ choose $k$ as follows.\n\nWe can write down the recurrence relation for $n$ choose $k$ as follows.\n\nWe can write down the recurrence relation for $n$ choose $k$ as follows.\n\nWe can write down the recurrence relation for $n$ choose $k$ as follows.\n\nWe can write down the recurrence relation for $n$ choose $k$ as follows.\n\nWe can write down the recurrence relation for $n$ choose $k$ as follows.\n\nWe can write down the recurrence relation for $n$ choose $k$ as follows.\n\nWe can write down the recurrence relation for $n$ choose $k$ as follows.\n\nWe can write down the recurrence relation for $n$ choose $k$ as follows.\n\nWe can write down the recurrence relation for $n$ choose $k$ as follows.\n\nWe can write down the recurrence relation for $n$ choose $k$ as follows.\n\nWe can write down the recurrence relation for $n$ choose $k$ as"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n\"\"\"\n\nX = int(input())\n\nprint(X // 2020, 2020 // X, sep='\\n')\n"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\nassert solution('22222') == '22222 0'\nassert solution('123456789') == '1234567 89 0'\nassert solution('100') == '10 10'\n"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"5 2\"\nassert solution(\"2020\") == \"2020 1\"\n\n\"\"\"\nimport random\n"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n3\\nchocolate\\ncookies\\nicecream\\n') == 'unique'\nassert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\\n') == 'ambiguous'\nassert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\\n') == 'impossible'\n\"\"\""
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies') == 'impossible'\nassert solution('3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies') == 'unique'\nassert solution('3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate') == 'ambiguous'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\nk = int(input())\nstore_info = [{} for _ in range(n)]\nfor i in range(k):\n    j, s = input().split()\n    j = int(j)\n    store_info[j][s] = True\npurchased_list = [input().strip() for _ in range(int(input()))]\n\nstore_info_list = [{} for _ in range(n)]\nfor s, v in store_info:\n    store_info_list[int(s)][s] = True"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n3\\nchocolate\\ncookies\\nicecream') == 'unique'\nassert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies') == 'ambiguous'\nassert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies') == 'impossible'\n\n-----Notes-----\nIf your solution runs correctly, it will print \"unique\" on line 8.\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nstore_list = []\nfor i in range(N):\n    s = sys.stdin.readline().strip().split(' ')\n    store_list.append(s)\n\nfor i in range(N):\n    item_name = sys.stdin.readline().strip()\n    store_list[i][1] = item_name\n\nM = int(sys.stdin.readline())\n\norder_list = []\nfor i in range(M):\n    order_list.append(sys.stdin.readline().strip())"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n3\\nchocolate\\ncookies\\nicecream\") == \"unique\"\nassert solution(\"3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\") == \"ambiguous\"\nassert solution(\"3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input) == expected_result\n\n\"\"\"\nimport sys\n\nfrom collections import deque\n"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n3\\nchocolate\\ncookies\\nicecream') == 'impossible'\nassert solution('3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies') == 'unique'\n\n'''\n\nN = int(input())\n\nstores = {}\n\nfor _ in range(N):\n    count = int(input())\n    for _ in range(count):\n        item, store = input().split()\n        if store not in stores:\n            stores[store] = []\n        stores[store].append(item)\n\nK = int(input())\nfor _ in range(K):\n    item = input()\n    if item in stores:\n        stores[item].sort()\n        print('unique')\n    else:\n        print('impossible')\n"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == output()\nprint(solution(input()))\n"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies') == 'impossible'\nassert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3') == 'unique'\nassert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies') == 'ambiguous'\n\n----Notes----\nIt can be assumed that the supermarket has enough space for each item to be bought at least once, so there is always a way to retrace her steps.\n\nDue to the nature of the problem, your solution must be optimized in terms of space. For example, using a Trie or a lookup table may help you to solve the problem in O(N + M) time, where N and M are the numbers of stores and items respectively.\n\nYou can also use a hashmap, but it must be O(M) in time.\n\nDo not use any additional data structures for this problem.\n\n----Hints----\nTry to formulate the problem as a graph problem.\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nclass Graph:\n    def __init__(self):\n        self.v = set()\n        self.edges = dict()\n    \n    def add_vertex(self, vertex):\n        self.v.add(vertex)\n    \n    def add_edge(self, from_vertex, to_vertex):\n        if from_vertex not in self.edges:\n            self.edges[from_vertex] = set()\n        self.edges[from_vertex].add(to_vertex)"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\") == 'unique'\nassert solution(\"3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n3\\nchocolate\\nicecream\\ncookies\") == 'ambiguous'\nassert solution(\"3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n3\\nchocolate\\nicecream\\ncookies\") == 'impossible'\n\"\"\""
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies') == 'impossible'\nassert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies') == 'unique'\nassert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies') == 'ambiguous'\n\n:param stdin:\n    stdin string\n:return:\n    \"unique\", \"ambiguous\", or \"impossible\"\n\"\"\"\n\nimport sys\n\ninput = stdin.readline\n\nn = int(input())\n\nstores = {int(i): set() for i in input().split()}\n\nbought = [input().strip() for i in range(int(input()))]\n\nfor item in bought:\n    stores[int(input())].add(item)\n\nunique = []\n\nfor store in stores.values():\n    unique.append(store)\n\nunique = sorted(unique)\n\nfor store in unique:\n    if len(store) == 0:\n        print('impossible')\n        sys.exit()"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 10') == '1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 0 10\") == '0'\nassert solution(\"1 2 10\") == '1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\nassert solution(\"1 3 10\") == \"3\"\nassert solution(\"1 4 10\") == \"3\"\nassert solution(\"1 5 10\") == \"3\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\n\"\"\"\n\nn, k, m = [int(x) for x in stdin.split()]\ns = 0\n\nwhile n:\n    n //= 2\n    s += n * (2 ** m)\n\nprint(s - k)"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n\"\"\"\n\nimport string\n\nn, k, m = [int(x) for x in input().split()]\n\nletters = string.ascii_lowercase\n\nall_words = {''.join(letters[i:] + letters[:i]) for i in range(len(letters))}\n\nwith open('words.txt', 'r') as f:\n    word_list = {w.strip() for w in f.readlines()}"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n1 0 10\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n1 2 10\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n1 2 10\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n1 2 10\n\"\"\"\n) == \"1\"\n\nprint(\"Earn cool rewards by using the 'Check' button!\")\n\"\"\"\nThe provided code stub will read in a dictionary containing key/value pairs of name:[marks] for a list of students. Print the average of the marks array for the student name provided, showing 2 places after the decimal.\n\nExample\n\n\nThe query_name is 'beta'. beta's average score is.\n\nInput Format\n\nThe first line contains the integer, the number of students' records. The next  lines contain the names and marks obtained by a student, each value separated by a space. The final line contains query_name, the name of a student to query.\n\nConstraints\n\nOutput Format\n\nPrint one line: The average of the marks obtained by the particular student correct to 2 decimal places.\n\nSample Input 0\n\n3\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\nSample Output 0\n\n56.00\nExplanation 0\n\nMarks for Malika are  whose average is\n\nSample Input 1\n\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\nHarsh\nSample Output 1\n\n26.50\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\nassert solution('1 3 10') == '0'\nassert solution('1 4 10') == '1'\n\"\"\""
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s1) == ans1\nassert solution(s2) == ans2\nassert solution(s3) == ans3\nassert solution(s4) == ans4\nassert solution(s5) == ans5\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('...\\n......\\n........\\n') == '2 zoom out'\n\nassert solution('...\\n......\\n........\\n....\\n........\\n') == '3 zoom out'\n\nassert solution('...\\n........\\n......\\n....\\n...\\n') == '2 pan'\n\nassert solution('...\\n......\\n........\\n....\\n...\\n........\\n') == '3 zoom in'\n\nassert solution('........\\n......\\n....\\n...\\n........\\n........\\n') == '3 rotate'"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"............................................................\\\n............................................................\\n\\\n............................................................\\n\\\n....XXXX....................................................\\n\\\n....XXXX..................................XXXX..............\\n\\\n....XXXX...................................XXX..............\\n\\\n............................................................\") == \"3 zoom out\\n\"\n\nassert solution(\"............................................................\\n\\\n............................................................\\n\\\n...............................................XX...........\\n\\\n.....................................XXX......XXXX..........\\n\\\n....................................XXXX........X...........\\n\\\n........XXX....XXX....................X.....................\\n\\\n.........XXX...XX...........................................\\n\\\n............................................................\\n\\\n............................................XX..............\\n\\\n...........................................XXXX.............\\n\\\n.............................................XX.............\\n\\\n............................................................\") == \"2 zoom in\\n\"\n\nassert solution(\"............................................................\\n\\\n............................................................\\n\\\n...............................................XX...........\\n\\\n.....................................XXX......XXXX..........\\n\\\n....................................XXXX........X...........\\n\\\n......................................X.....................\\n\\\n............................................................\") == \"1 rotate right\\n\"\n\nassert solution(\"............................................................\\n\\\n............................................................\\n\\\n...............................................XX...........\\n\\\n.....................................XXX......XXXX..........\\n\\\n....................................XXXX........X...........\\n\\\n......................................X.....................\\n\\\n............................................................\") == \"1 rotate left\\n\"\n\nassert solution(\"............................................................\\n\\\n............................................................\\n\\\n...............................................XX...........\\n\\\n.....................................XXX......XXXX..........\\n\\\n....................................XXXX........X...........\\n\\\n......................................X.....................\\n\\\n............................................................\") == \"0 pan\\n\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"............................................................\\\n............................................................\\n\\\n....XXXX....................................................\\n\\\n....XXXX..................................XXXX..............\\n\\\n....XXXX...................................XXX..............\\n\\\n............................................................\\n\\\n............................................................\\n\\\n............................................................\\n\\\n............................................................\\n\\\n............................................................\\n\\\n............................................................\\n\\\n............................................................\\n\\\n............................................................\") == \"2 zoom out\\n3 pan\"\n\"\"\"\n\nimport sys\nimport re\nimport math"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n-----Notes-----\n\n-----Source-----\n\n'''\n\nfrom collections import Counter\nfrom copy import copy\nfrom math import floor, ceil\n\n'''\nSample Input\n\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n\nSample Output\n\n1 pan\n\n'''"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................''') == '3 zoom out\\n'\nprint('Test 1:', solution('''............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\nSample Output 2:\n3 zoom out\n\nSample Input 3:\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\nSample Output 3:\n1 pan\n\nSample Input 4:\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n......................................X.....................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\nSample Output 4:\n4 rotate\n''') == '4 rotate\\n'\nassert solution('''............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\nSample Output 4:\n4 rotate\n''') == '4 rotate\\n'\nassert solution('''............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n......................................X.....................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\nSample Output 4:\n4 rotate\n''') == '4 rotate\\n'\nassert solution('''............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n......................................X.....................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\nSample Output 4:\n4 rotate\n''') == '4 rotate\\n'\nassert solution('''............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n......................................X.....................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\nSample Output 4:\n4 rotate\n''') == '4 rotate\\n'\n"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n\"\"\") == \"3 zoom out\"\n\nassert solution(\"\"\"\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............................................XX..............\n...........................................XXXX.............\n.............................................XX.............\n............................................................\n\"\"\") == \"3 zoom out\"\nassert solution(\"\"\"\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............................................XX..............\n...........................................XXXX.............\n.............................................XX.............\n............................................................\n\"\"\") == \"3 zoom out\"\nassert solution(\"\"\"\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............................................XX..............\n...........................................XXXX.............\n.............................................XX.............\n............................................................\n\"\"\") == \"3 zoom out\"\nassert solution(\"\"\"\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............................................XX..............\n...........................................XXXX.............\n.............................................XX.............\n............................................................\n\"\"\") == \"3 zoom out\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"......................................................................\\n............................................................\\n...............................................XX.........................................\\n.....................................XXX......XXXX........................................\\n....................................XXXX........X.........................................\\n........XXX....XXX....................X...................................................\\n.........XXX...XX...........................................\\n...........................................XXXX...........................................\\n.............................................XX.............\\n............................................................\\n............................................................\\n\") == \"3 zoom out\"\nassert solution(\"............................................................\\n............................................................\\n...............................................XX.........................................\\n.....................................XXX......XXXX........................................\\n....................................XXXX........X.........................................\\n.............................. X........X...................................................\\n...........................................XXXX...........................................\\n.............................................XX.............\\n............................................................\\n............................................................\\n\") == \"3 zoom out\"\nassert solution(\"............................................................\\n............................................................\\n...............................................XX.........................................\\n.....................................XXX......XXXX........................................\\n....................................XXXX........X.........................................\\n.............................. X........X...................................................\\n...........................................XXXX...........................................\\n.............................................XX.............\\n............................................................\\n............................................................\\n\") == \"1 pan\"\nassert solution(\"............................................................\\n............................................................\\n...............................................XX.........................................\\n.....................................XXX......XXXX........................................\\n....................................XXXX........X.........................................\\n.............................. X........X...................................................\\n...........................................XXXX...........................................\\n.............................................XX.............\\n............................................................\\n............................................................\\n\") == \"1 pan\"\nassert solution(\"............................................................\\n............................................................\\n...............................................XX.........................................\\n.....................................XXX......XXXX........................................\\n....................................XXXX........X.........................................\\n.............................. X........X...................................................\\n...........................................XXXX...........................................\\n.............................................XX.............\\n............................................................\\n............................................................\\n\") == \"1 pan\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................'\n    '............................................................"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('...') == 'pan'\nassert solution('... XXXX.......') == 'pan'\nassert solution('.... XXXX.......') == 'zoom out'\nassert solution('......... XXXX......') == 'zoom out'\n"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"............................................................\\n\" +\n                \"............................................................\\n\" +\n                \"....XXXX....................................................\\n\" +\n                \"....XXXX..................................XXXX..............\\n\" +\n                \"....XXXX...................................XXX..............\\n\" +\n                \"............................................................\\n\" +\n                \"............................................................\\n\" +\n                \"............................................................\\n\" +\n                \"............................................................\\n\" +\n                \"............................................................\") == \"1 pan\"\nassert solution(\"............................................................\\n\" +\n                \"............................................................\\n\" +\n                \"............................................................\\n\" +\n                \"............................................................\\n\" +\n                \"..........................................XXXX..............\\n\" +\n                \"...........................................XXX..............\\n\" +\n                \"....................................XXXX........X...........\\n\" +\n                \"............................................................\\n\" +\n                \"............................................................\\n\" +\n                \"............................................XX..............\\n\" +\n                \"...........................................XXXX.............\\n\" +\n                \".............................................XX.............\\n\" +\n                \"............................................................\") == \"3 zoom out\"\nassert solution(\"............................................................\\n\" +\n                \"............................................................\\n\" +\n                \"............................................................\\n\" +\n                \"............................................................\\n\" +\n                \"..........................................XXXX..............\\n\" +\n                \"...........................................XXX..............\\n\" +\n                \"....................................XXXX........X...........\\n\" +\n                \"............................................................\\n\" +\n                \"............................................................\\n\" +\n                \"............................................XX..............\\n\" +\n                \"...........................................XXXX.............\\n\" +\n                \".............................................XX.............\\n\" +\n                \"............................................................\") == \"1 pan\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 20', 'apples are great!\\n' +\n        '++++++++++++++++++++\\n' +\n        '+ oranges are      +\\n' +\n        '+ way better!      +\\n' +\n        '+ #oranges>apples  +\\n' +\n        '++++++++++++++++++++\\n' +\n        ' check out our      \\n' +\n        ' fresh apples!      ') == 'apples are great!\\n' +\n        '++++++++++++++++++++\\n' +\n        '+ oranges are      +\\n' +\n        '+ way better!      +\\n' +\n        '+ #oranges>apples  +\\n' +\n        '++++++++++++++++++++\\n' +\n        ' check out our      \\n' +\n        ' fresh apples!      '\n\nassert solution('7 7', '+++++++\\n' +\n        '+  =  +\\n' +\n        '+ +++ +\\n' +\n        '+ + + +\\n' +\n        '+ +++ +\\n' +\n        '+     +\\n' +\n        '+++++++') == '       \\n' +\n        '       \\n' +\n        '       \\n' +\n        '       \\n' +\n        '       '\n\nassert solution('7 7', '+++++++\\n' +\n        '+  =  +\\n' +\n        '+ +++ +\\n' +\n        '+ + + +\\n' +\n        '+ +++ +\\n' +\n        '+     +\\n' +\n        '+++++++') == '       \\n' +\n        '       \\n' +\n        '       \\n' +\n        '       \\n' +\n        '       '\n\nassert solution('8 10', 'apples are great!\\n' +\n        '++++++++++++++++++++\\n' +\n        '+ oranges are      +\\n' +\n        '+ way better!      +\\n' +\n        '+ #oranges>apples  +\\n' +\n        '++++++++++++++++++++\\n' +\n        ' check out our      \\n' +\n        ' fresh apples!      ') == 'apples are great!\\n' +\n        '++++++++++++++++++++\\n' +\n        '+ oranges are      +\\n' +\n        '+ way better!      +\\n' +\n        '+ #oranges>apples  +\\n' +\n        '++++++++++++++++++++\\n' +\n        ' check out our      \\n' +\n        ' fresh apples!      '\n\nassert solution('8 10', 'apples are great!\\n' +\n        '++++++++++++++++++++\\n' +\n        '+ oranges are      +\\n' +\n        '+ way better!      +\\n' +\n        '+ #oranges>apples  +\\n' +\n        '++++++++++++++++++++\\n' +\n        ' check out our      \\n' +\n        ' fresh apples!      ') == 'apples are great!\\n' +\n        '++++++++++++++++++++\\n' +\n        '+ oranges are      +\\n' +\n        '+ way better!      +\\n' +\n        '+ #oranges>apples  +\\n' +\n        '++++++++++++++++++++\\n' +\n        ' check out our      \\n' +\n        ' fresh apples!      '"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 20\", \"apples are great!  \" +\n\"++++++++++++++++++++\" +\n\"+ oranges are      +\" +\n\"+ way better!      \" +\n\"+ #oranges>apples  \" +\n\"++++++++++++++++++++\" +\n\" check out our      \" +\n\" fresh apples!      \") == \"apples are great!  \" +\n\"                    \" +\n\"                    \" +\n\"                    \" +\n\" check out our      \" +\n\" fresh apples!      \"\n"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"8 20\\napples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our\\n fresh apples!\\n\"\n) == \"\"\"apples are great!  \n                    \n                    \n                    \n                    \n                    \n check out our\n fresh apples!\n\"\"\"\n\nassert solution(\n    \"7 7\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\\n\"\n) == \"\"\"       \n       \n       \n       \n       \n       \n\"\"\"\n\nassert solution(\n    \"8 20\\napples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our\\n fresh apples!\\n\"\n) == \"\"\"apples are great!  \n                    \n                    \n                    \n                    \n                    \n check out our\n fresh apples!\n\"\"\""
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 20\\napples are great!\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\n check out our\\n fresh apples!') == 'apples are great!\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\n check out our\\n fresh apples!'\nassert solution('7 7\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++') == '\\n++++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n++++++++'\nassert solution('4 6\\n########\\n#  #  #\\n# #   #\\n# #   #\\n# #   #\\n########') == '########\\n#  #  #\\n# #   #\\n# #   #\\n# #   #\\n########'"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 20\\napples are great!\\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our\\n fresh apples!\\n') == 'apples are great!\\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our\\n fresh apples!'\n\nprint(solution(stdin))"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 20\\napples are great!\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\n check out our\\n fresh apples!\") == \\\n    \"apples are great!\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\n check out our\\n fresh apples!\"\n\nassert solution(\"7 7\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\") == \\\n    \"\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 20\\napples are great!\\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our\\n fresh apples!\\n\") == \"apples are great!\\n check out our\\n fresh apples!\\n\""
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 20\\napples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!\\n\") == \"apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!\\n\"\nprint(solution(\"8 20\\napples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!\\n\"))\nassert solution(\"7 7\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\\nSample Output 2:\") == \"       \\n       \\n       \\n       \\n       \\n       \\n\"\nprint(solution(\"7 7\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\\nSample Output 2:\"))\n"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 20\\napples are great!\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\n check out our\\n fresh apples!\\n\") == \"apples are great!\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\n check out our\\n fresh apples!\\n\"\n\nimport sys"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 20\\n' +'app\\ne are'+ '\\ngreat! '+ '\\n' + '++++++++++++++++++++' + '\\n' + '+ oranges are      +\\n' + '+ way better!      +\\n' + '+ #oranges>apples  +\\n' + '++++++++++++++++++++' + '\\n' +'check out our     '+ '\\n' +'fresh apples!      ') == 'apples are great!  \\n' +'check out our fresh apples!      '\n\nassert solution('7 7\\n' + '+++++++\\n' + '+  =  +\\n' + '+ +++ +\\n' + '+ + + +\\n' + '+ +++ +\\n' + '+     +\\n' + '+++++++') == '       \\n' + '       \\n' + '       \\n' + '       \\n' + '       '\n\n\"\"\""
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"HH\") == \"2.0\"\nassert solution(\"H??\") == \"1.5\"\nassert solution(\"?H\") == \"1.5\"\nassert solution(\"??\") == \"1.5\"\n\n------Solution-----\nn = len(stdin)\n\nfor c in range(n):\n    if stdin[c] == \"?\":\n        stdin = stdin[:c] + \"H\" + stdin[c + 1:]\n        n -= 1\n\nreturn str(n / len(stdin))\n"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"HH\") == \"2\"\nassert solution(\"H?H\") == \"1\"\nassert solution(\"H?HT\") == \"2\"\n\n\"\"\"\nimport re\nfrom typing import Optional\nfrom functools import reduce\n\nimport numpy as np\nimport math\n\nstdin = [line.strip() for line in open('./input.txt', 'r')]"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('HH') == 2\nassert solution('H?') == 1.5\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\nassert solution('????') == '2.0'\n\nimport math"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"HH\") == \"2.0\"\nassert solution(\"H?\") == \"1.5\"\nassert solution(\"HTH\") == \"3.0\"\nassert solution(\"THH\") == \"2.5\"\nassert solution(\"THTT\") == \"2.0\"\n\"\"\""
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"HH\") == \"2.0\"\nassert solution(\"H?\") == \"1.5\"\nassert solution(\"TTHH\") == \"4.0\"\nassert solution(\"TTHT\") == \"2.0\"\n\n\"\"\""
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\nassert solution('??') == '2.0'\nassert solution('?H') == '1.5'\nassert solution('??') == '1.0'\n"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('H') == 'T'\nassert solution('H?H') == 'H?'\nassert solution('H?H?H') == 'H?'\n\nassert solution('H?H?H?H') == 'H?'\nassert solution('H?H?H?H?H?H?') == 'H?'\n"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"HH\") == 2\nassert solution(\"H?HTHTHTH\") == 1.5\n\"\"\"\n\nimport math"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"HH\") == 2\nassert solution(\"H?HTHTHTHTHTHTHTH\") == 5\nassert solution(\"??\") == 0.5\nassert solution(\"H?HTHTTTHTHTTTHTHTH\") == 5\n\n\"\"\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\n0001\n0001\n0011\n1110\n\") == \"1\n0001\n0001\n0011\n1111\n\"\nassert solution(\"4\n1111\n1111\n1111\n1111\n\") == \"6\n0011\n0011\n0111\n1101\n\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0001\\n0001\\n0011\\n1110\\n') == '1\\n0001\\n0001\\n0011\\n1111\\n'\nassert solution('4\\n1110\\n1111\\n1111\\n1111\\n') == '6\\n0011\\n0011\\n0111\\n1101\\n'\nassert solution('4\\n1110\\n1110\\n1111\\n1111\\n') == '1\\n1110\\n1110\\n1111\\n1111\\n'\nassert solution('4\\n1110\\n1111\\n1111\\n1111\\n') == '1\\n1110\\n1110\\n1111\\n1111\\n'\nassert solution('4\\n1110\\n1111\\n1111\\n1111\\n') == '1\\n1110\\n1110\\n1111\\n1111\\n'\n\nSample Output:\n3\n0011\n0111\n1101\n0111\n1111\n1110\n1111\n1110\n1110\n1111\n1110\n1110\n1111\n1111\n1110\n1110\n1111\n1111\n1110\n1110\n1111\n1111\n1110\n1110\n1111\n1110\n1110\n1111\n1110\n1111\n1111\n1110\n1110\n1111\n1111\n1111\n1111\n1110\n1110\n1111\n1110\n1111\n1111\n1111\n1111\n1111\n1110\n1110\n1111\n1110\n1111\n1111\n1111\n1111\n1110\n1110\n1111\n1110\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1111\\n1111\\n1111\\n1111') == '6\\n0011\\n0011\\n0111\\n1101'\nassert solution('4\\n0111\\n1110\\n1110\\n1111') == '1\\n1111\\n1110\\n1110\\n1111'\nassert solution('4\\n0111\\n1111\\n1111\\n1111') == '1\\n1111\\n1111\\n1111\\n1111'\nassert solution('4\\n1110\\n1110\\n1110\\n1111') == '0\\n1111\\n1110\\n1110\\n1111'\nassert solution('4\\n1110\\n1110\\n1110\\n1111') == '0\\n1111\\n1110\\n1110\\n1111'\n\n\"\"\"\n\nimport sys\nfrom typing import Callable\n\nfrom _collections import deque\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1111\\n1111\\n1111\\n1111\") == \"6\\n0011\\n0011\\n0111\\n1101\"\nassert solution(\"4\\n1111\\n1111\\n1111\\n1111\") == \"6\\n0011\\n0011\\n0111\\n1101\"\nassert solution(\"4\\n1111\\n1111\\n1111\\n1111\") == \"6\\n0011\\n0011\\n0111\\n1101\"\nassert solution(\"4\\n1111\\n1111\\n1111\\n1111\") == \"6\\n0011\\n0011\\n0111\\n1101\"\nassert solution(\"4\\n1111\\n1111\\n1111\\n1111\") == \"6\\n0011\\n0011\\n0111\\n1101\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"4\\n\"\n\"1111\\n\"\n\"1111\\n\"\n\"1111\\n\"\n\"1111\\n\") == \"6\\n\" \\\n\n\"0011\\n\" \\\n\"0011\\n\" \\\n\"0111\\n\" \\\n\"1101\\n\" \\\n\nassert solution(\n\"4\\n\"\n\"1111\\n\"\n\"1111\\n\"\n\"1111\\n\"\n\"1111\\n\") == \"1\\n\" \\\n\n\"1111\\n\" \\\n\"1111\\n\" \\\n\"1111\\n\" \\\n\"1111\\n\" \\\n\nassert solution(\n\"4\\n\"\n\"1111\\n\"\n\"1111\\n\"\n\"1111\\n\"\n\"1111\\n\") == \"0\\n\" \\\n\n\"1111\\n\" \\\n\"1111\\n\" \\\n\"1111\\n\" \\\n\"1111\\n\" \\\n\nassert solution(\n\"4\\n\"\n\"1111\\n\"\n\"1111\\n\"\n\"1111\\n\"\n\"1111\\n\") == \"3\\n\" \\\n\n\"1111\\n\" \\\n\"1111\\n\" \\\n\"1111\\n\" \\\n\"1111\\n\" \\\n\nassert solution(\n\"4\\n\"\n\"1111\\n\"\n\"1111\\n\"\n\"1111\\n\"\n\"1111\\n\") == \"0\\n\" \\\n\n\"1111\\n\" \\\n\"1111\\n\" \\\n\"1111\\n\" \\\n\"1111\\n\" \\"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0001\\n0001\\n0011\\n1110\") == \"1\\n0001\\n0001\\n0011\\n1111\"\nassert solution(\"4\\n1110\\n1110\\n1110\\n1110\") == \"6\\n1110\\n1110\\n1110\\n1110\"\n\nprint(solution(\"4\\n1110\\n1110\\n1110\\n1110\"))\n\n\"\"\""
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\") == \"1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\"\nassert solution(\"4\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\") == \"1\\n1 1 1 1\\n1 1 1 1\\n11 1 1 1\"\nassert solution(\"4\\n0 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\") == \"1\\n1 1 1 1\\n1 1 1 1\\n11 1 1 1\"\nassert solution(\"4\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\") == \"1\\n1111\\n1111\\n1111\"\nassert solution(\"4\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\") == \"1\\n1 1 1 1\\n1111\\n1111\\n1111\""
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1111\\n1111\\n1111\\n1111') == '6\\n0011\\n0011\\n0111\\n1101'\nprint(solution(stdin))\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1111\\n1111\\n1111\\n1111\") == \"6\\n0011\\n0011\\n0111\\n1101\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0001\\n0001\\n0011\\n1110\") == \"1\\n0001\\n0001\\n0011\\n1111\"\nassert solution(\"4\\n1111\\n1111\\n1111\\n1111\") == \"6\\n0011\\n0011\\n0111\\n1101\"\nassert solution(\"4\\n1110\\n1110\\n1111\\n1111\") == \"6\\n1111\\n1111\\n1110\\n1110\"\nassert solution(\"4\\n1111\\n1111\\n1110\\n1110\") == \"6\\n1111\\n1111\\n1110\\n1110\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\nh 1 2 1\\nv 1 2 2\") == \"1\"\nassert solution(\"4\\nh 1 4 1\\nh 2 4 2\\nh 10 2 2\\nv 1 10 1\\nv 2 10 3\") == \"2\"\n\n-----Problem-----\nConsider a grid of $n$ by $m$ pixels. Each pixel is either inactive (white) or active (black). The grid is initially inactive (all white pixels).\n\nThe grid can be activated by sending a pulse of current of length $t$ along the horizontal wire numbered $a$. This moves the leading edge of the pulse along the horizontal wire to the intersection with the vertical wire number $b$. Then, if the current has not already exited the grid, the pulse moves down to the $b$th row, $t$ pixels along the vertical wire, and so on.\n\nA pixel is activated by the current if and only if the current enters the pixel on the horizontal wire (number $a$) and the current leaves the pixel on the vertical wire (number $b$). Pulses of current never go down the vertical wire.\n\nAfter activating the grid, the active pixels are painted black.\n\nHow many pixels will be painted black by the time the grid is fully activated?\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def __init__(self, n, m, a):\n        self.n = n\n        self.m = m\n        self.a = a\n\n        self.intersection_table = [set() for i in range(n+1)]\n\n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                self.intersection_table[i].add((i, j))\n\n    def activate(self, starting_time):\n        visited = set()\n        stack = [(starting_time, starting_time+1)]\n        while stack:\n            next_intersection = stack.pop()\n            for intersection in next_intersection:\n                visited.add(intersection)\n                for next_intersection in self.intersection_table[intersection[0]]:\n                    if next_intersection not in visited:\n                        stack.append(next_intersection)\n\n        return visited\n\n    def solve(self):\n        pass"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == 2\nassert solution(\"4\\nh 1 4 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == 4\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3') == '2'\n\n'''\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == 2\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == 4\n\"\"\""
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == \"2\"\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == \"4\"\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == \"2\"\nassert solution(\"4\\nh 1 4 1\\nh 10 2 2\\nv 1 10 1\\nv 5 10 3\") == \"4\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3''') == '2'\n\nassert solution('''4\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3''') == '4'\n\nassert solution('''4\nv 1 10 1\nv 5 10 3\nh 1 10 1\nh 5 10 2''') == '4'\n\nassert solution('''4\nv 1 10 1\nv 5 10 3\nh 1 10 1\nh 5 10 2\n''') == '4'\n\nassert solution('''4\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\n''') == '4'"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3''') == '2'\nassert solution('''4\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3''') == '4'\n\n\"\"\"\nimport collections\n\nclass Panel:\n    def __init__(self):\n        self.intersections = set()\n\n    def add_intersection(self, px, py):\n        self.intersections.add((px, py))\n        self.intersections.add((px, py + 1))\n        self.intersections.add((px + 1, py))\n        self.intersections.add((px + 1, py + 1))\n\n    def is_intersection(self, px, py):\n        return (px, py) in self.intersections\n\nclass Wire:\n    def __init__(self, grid, direction, index):\n        self.grid = grid\n        self.direction = direction\n        self.index = index\n\n    def step(self):\n        if self.direction == 'h':\n            self.move_horizontal_from_left_to_right()\n        elif self.direction == 'v':\n            self.move_vertical_from_bottom_to_top()\n        else:\n            raise ValueError('unknown direction')\n\n    def move_horizontal_from_left_to_right(self):\n        (prev_px, prev_py) = self.grid.pos\n        (px, py) = (prev_px, prev_py)\n\n        while not self.grid.is_intersection(px, py):\n            self.grid.add_intersection(px, py)\n            px += 1\n\n        self.grid.add_intersection(px, py)\n\n    def move_vertical_from_bottom_to_top(self):\n        (prev_px, prev_py) = self.grid.pos\n        (px, py) = (prev_px, prev_py)\n\n        while not self.grid.is_intersection(px, py):\n            self.grid.add_intersection(px, py)\n            py += 1\n\n        self.grid.add_intersection(px, py)"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5''') == '2'\n\nassert solution('''2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5''') == '-1'\n\nassert solution('''3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8''') == '4'\n\nassert solution('''3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8''') == '-1'\n"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n2 1 0 0\\n3 0 4 5\") == \"2\"\n\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n4 2 3\") == \"4\"\n\nassert solution(\"3 4\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\") == \"3\"\n\nassert solution(\"3 5\\n1 2 3 4 5\\n6 0 0 0 0\\n7 0 0 0 0\\n8 0 0 0 0\\n4 2 3 5\\n6 0 0 0 0\\n7 0 0 0 0\\n8 0 0 0 0\\n4 2 3 5\") == \"2\"\n\nassert solution(\"5 6\\n1 2 3 4 5 6\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\") == \"6\""
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5') == '2'\nassert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8') == '4'"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n\") == \"2\"\n\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n\") == \"4\"\n\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n\") == \"4\"\n\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n\") == \"4\"\n\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n\") == \"4\""
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 0 2 0') == '2'\nassert solution('1 2 3 4 5') == '2'\nassert solution('3 5 4 0') == '2'\n\n-----\n2 3 4 5 6 7 8 9 10 11 12\n1 2 0 0 0 0 0 0 0 0 0\n2 3 0 0 0 0 0 0 0 0 0\n3 4 0 0 0 0 0 0 0 0 0\n4 5 0 0 0 0 0 0 0 0 0\n5 6 0 0 0 0 0 0 0 0 0\n6 7 0 0 0 0 0 0 0 0 0\n7 8 0 0 0 0 0 0 0 0 0\n8 9 0 0 0 0 0 0 0 0 0\n9 10 0 0 0 0 0 0 0 0 0\n10 11 0 0 0 0 0 0 0 0 0\n11 12 0 0 0 0 0 0 0 0 0\n12 13 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n\") == 2\n"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n2 1 0 0\\n3 0 4 5\\n\") == 2\n\"\"\"\n\nimport sys\n\n_all_ = [\n    \"_input\",\n    \"_print\",\n    \"_sscanf\",\n    \"_ungetc\",\n]\n\n_all_ += [\"_puts\"]\n\n_input = sys.stdin.readline\n\n_print = print\n\n_sscanf = \"sscanf\"\n\n_ungetc = \"ungetc\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\") == \"2\"\n\nassert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\") == \"2\"\n\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\") == \"4\"\n\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\") == \"4\"\n\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\") == \"4\""
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n\\n2 1 0 0\\n3 0 4 5\") == \"2\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n\") == \"4\"\n\n\"\"\"\n\nN, M = map(int, input().split())"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n\") == \"2\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 2 3 3 4 2\") == \"2\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n1 2 3 3 4 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 2 3 3 4 2\") == 2\nassert solution(\"8\\n1 2 1 3 1 3 1 2\") == 4\nassert solution(\"100\\n1 2 3 4 5 6 7 8 9\") == 7\nassert solution(\"100\\n1 2 3 4 4 5 6 7 8 9\") == 7\nassert solution(\"100\\n1 2 3 3 4 4 5 6 7 8 9\") == 7\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n1 2 3 3 4 2') == '2', 'Wrong Answer'\nassert solution('8\\n1 2 1 3 1 3 1 2') == '4', 'Wrong Answer'\n\"\"\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 2 3 3 4 2\") == 2\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 3 4 2\") == 2\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"4\"\nassert solution(\"5\\n1 2 2 3 4\") == \"2\"\n\n'''\nimport sys\n\nN = int(sys.stdin.readline())\narr = sys.stdin.readline().split()\n\ndp = [[0, 0] for _ in range(N)]\ndp[0][0] = 1\ndp[0][1] = 1\n\nfor i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + 1 if int(arr[i]) == int(arr[i - 1]) else 1\n    dp[i][1] = dp[i - 1][1] + 1 if int(arr[i]) == int(arr[i - 1]) else 1\n\nprint(max(dp[-1]))\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\nassert solution('1 2 3 3 4 2') == 2\n\nassert solution('1 2 1 3 1 3 1 2') == 4\n\nassert solution('1 2 1 3 1 3 1 2') == 4\n\nassert solution('1 2 1 2 1 2 1 2') == 4"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 3 4 2') == 2\nassert solution('1 2 1 3 1 3 1 2') == 4\nassert solution('1 2 2 3 1 3 1 2') == 4\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3\\n') == 2\nassert solution('2\\n1 2\\n') == 1\nassert solution('4\\n4 4\\n') == 1\nassert solution('5\\n1 1 2 2 2\\n') == 2\nassert solution('10\\n2 1 3 4 2 5 3 1 5 1\\n') == 4\n"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2''') == '4\n\"\"\""
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 2 1\\n2 2 2 2 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\\n1 1 1 2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1') == '4\\n2'\nassert solution('2 2 2\\n1 1 1\\n2 2 2\\n2 2 2 1') == '4\\n2'\n"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2''') == '4\\n2'\nassert solution('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2''') == '4\\n2'\nassert solution('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2''') == '4\\n2'\nassert solution('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2''') == '4\\n2'\nassert solution('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2''') == '4\\n2'\n"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 2 1\\n2 2 2 2 1\\n1 1 1 2\\n\") == \"4\"\nassert solution(\"2 2 2\\n1 1 1\\n2 2 2 1\\n2 2 2 2 1\\n1 1 1 2\\n\") == \"4\"\n\n\"\"\"\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2'''\n) == '''4\n0'''\n\nassert solution(\n'''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2'''\n) == '''4\n2'''\n\nassert solution(\n'''3 4 2\n1 1 1\n1 1 1\n3 3 1\n2 2 2 1\n3 3 3 2\n2 2 2 1\n1 1 1 2\n1 1 1 1\n2 2 1'''\n) == '''0\n2\n4'''\n\nassert solution(\n'''8 8 16\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1'''\n) == '''64\n36\n40'''\n\nassert solution(\n'''3 3 2\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1'''\n) == '''0\n3\n6'''"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 2 1\\n2 2 2 1\") == \"4\"\nassert solution(\"2 2 2\\n1 1 1\\n2 2 2 1\") == \"4\"\nassert solution(\"2 2 2\\n1 1 1\\n2 2 1\") == \"0\"\n\"\"\"\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\\n1 1 1 2\\n\") == \"4\"\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\nstdin = sys.stdin\ninput = stdin.readline\n\nN, K, P = map(int, input().split())\n\nK_r = []\nfor _ in range(K):\n    r, c, x = map(int, input().split())\n    K_r.append((r, c, x))\n\nP_r = []\nfor _ in range(P):\n    r1, c1, r2, c2 = map(int, input().split())\n    P_r.append((r1, c1, r2, c2))\n\nr_dist = defaultdict(list)\nfor r1, c1, r2, c2 in P_r:\n    r_dist[r1].append((c1, r2, c2))\n    r_dist[r2].append((c2, r1, c1))\n\nr_matrix = [[0 for _ in range(N)] for _ in range(N)]\nfor r1, c1, r2, c2 in P_r:\n    r_matrix[r1][c1] = 1\n    r_matrix[r2][c2] = 1\n\nr_attack = [[0 for _ in range(N)] for _ in range(N)]\nfor i in range(N):\n    for j in range(N):\n        if r_matrix[i][j] == 0:\n            continue\n        powers = []\n        for r, c, x in K_r:\n            if (r1 := i + r) < N and (c1 := j + c) < N and r_matrix[r1][c1] == 1:\n                powers.append(x)\n        powers = sorted(powers, reverse=True)\n        for r, c, x in K_r:\n            r_attack[i][j] += powers.pop(0) if x ^ sum(powers) > 0 else 0\n\nprint(sum(sum(r_attack[i]) for i in range(N)))\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\\\n0 0 1 1\\\\n1 0 0 1\\\\n0 1 0 0\\\\n0 0 1 0\\\\n1 2\\\\n\") == \"1\"\nassert solution(\"4 2\\\\n0 0 1 1\\\\n1 0 0 1\\\\n0 1 0 0\\\\n0 0 1 0\\\\n1 2\\\\n\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n\"\"\") == \"1\"\n\n\"\"\"\nThe algorithm is quite simple:\n\n1. Take the ranking of the players after the elimination.\n2. Put this ranking in a list.\n3. Remove players that have already lost against one another.\n4. Pick players by checking how many players there are in the list, and check how many of them are the result of the elimination.\n\"\"\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\"\"\") == \"1\"\nassert solution(\"\"\"4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n2\"\"\") == \"impossible\"\nassert solution(\"\"\"4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\"\"\") == \"impossible\"\n\n-----Explanation-----\nExample case 1: All players are ranked correctly, so we don't need to disqualify anyone.\nExample case 2: All players are ranked correctly, so we don't need to disqualify anyone.\n\nIn both cases, the answer is 1, because the first player doesn't have to disqualify anyone (since he is ranked correctly). However, in case 2, the solution is \"impossible\" because it's impossible to make the second player not rank below anyone.\n\"\"\"\n\n\nimport itertools\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n\") == '1'\nassert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n2 2\\n\") == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n') == '1'\nassert solution('3 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n') == 'impossible'\nprint('The local tests are done.')\n\n-----Solution-----\nimport numpy as np\nimport re\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2''') == '1'\nassert solution('''4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2''') == 'impossible'\nassert solution('''5 3\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2''') == '2'\nassert solution('''10 6\n0 0 1 1\n0 0 0 1\n1 1 1 1\n0 1 1 0\n0 0 1 1\n0 0 1 1\n0 0 0 1\n0 1 0 0\n0 0 1 0\n1 1 1 1\n0 0 1 0\n1 1 1 1\n0 0 1 0\n0 0 0 1\n0 0 0 1\n1 1 1 1\n0 0 0 1\n0 0 0 1\n1 1 1 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n1 1 1 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n1 1 1 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n1 1 1 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n1 1 1 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n1 1 1 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n1 1 1 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0 0 0 1\n0"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n0 0 1 1\\n1 0 0 1\") == \"1\"\nassert solution(\"2 1\\n0 0 1 1\\n1 0 0 1\") == \"impossible\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\") == \"1\"\nassert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\") == \"impossible\"\nassert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\") == \"impossible\"\n\n\"\"\"\n\nn, k = map(int, input().split())\n\nstdin = [input().split() for _ in range(n)]\n\nt = [0 for _ in range(n)]\n\nfor i in range(n):\n    for j in range(n):\n        t[i] += int(stdin[i][j])\n\nt = list(set(t))\nt.sort()\nt = t[::-1]"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 7 10\\n3\\n0 10\\n2 6\\n7 7') == '8\\n2\\n1'\nassert solution('10 6\\n10\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n') == '8\\n2\\n1'\nassert solution('10 6\\n10\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n') == '8\\n2\\n1'\n\n'''\nThe first line of input contains two integers, N, and K, the size of the array, and the number of calls to something that Mirko makes.\n\nThe second line contains N integers, X_1,X_2,X_3,\u2026,X_K, the arguments passed to the procedure (1\u2264X_i\u2264N).\n\nThe third line contains one integer Q, the number of special parts of the array Mirko needs to check.\n\nThe next Q lines contain two integers each L_i and R_i, the bounds of each special part.\n\n-----Output-----\nFor each special part, the output should contain the sum of elements seq[L_i] + seq[L_i+1] + seq[L_i+2] + \u2026 + seq[R_i] (1\u2264i\u2264Q).\n\n-----Examples-----\nSample Input 1:\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\nSample Output 1:\n35\n18\n3\n\nSample Input 2:\n10 4\n3 7 10\n3\n0 10\n2 6\n7 7\nSample Output 2:\n8\n2\n1\n\nSample Input 3:\n11 3\n3 7 10\n3\n0 10\n2 6\n7 7\nSample Output 3:\n8\n2\n1\n\nSample Input 4:\n11 3\n3 7 10\n3\n0 10\n2 6\n7 7\nSample Output 4:\n8\n2\n1\n\nSample Input 5:\n11 3\n3 7 10\n3\n0 10\n2 6\n7 7\nSample Output 5:\n8\n2\n1\n\nSample Input 6:\n11 3\n3 7 10\n3\n0 10\n2 6\n7 7\nSample Output 6:\n8\n2\n1\n'''\n"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 4 3\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7') == '35\\n18\\n3'\n\nassert solution('10 4 3\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7') == '35\\n18\\n3'\n\nassert solution('10 4 3\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7') == '35\\n18\\n3'\n\nassert solution('10 4 3\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7') == '35\\n18\\n3'\n\nassert solution('10 4 3\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7') == '35\\n18\\n3'"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4 3\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\") == \"35\\n18\\n3\"\n\"\"\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\") == \"35\\n18\\n3\"\nassert solution(\"10 6\\n1 1 7 1\\n1\\n3\\n2 6\\n7 7\\n3\\n1\\n3\") == \"36\\n16\\n1\"\nassert solution(\"10 6\\n1 1 7 1\\n1\\n3\\n2 6\\n7 7\\n3\\n1\\n3\") == \"36\\n16\\n1\"\nassert solution(\"10 6\\n1 1 7 1\\n1\\n3\\n2 6\\n7 7\\n3\\n1\\n3\") == \"36\\n16\\n1\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4 3\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\\n\") == \"35\\n18\\n3\"\nassert solution(\"10 4 3\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\\n\") == \"8\\n2\\n1\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4 3\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\") == '35\\n18\\n3'\nassert solution(\"11 3\\n3 7 10\\n3\\n0 10\\n2 6\\n7 7\") == '8\\n2\\n1'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000000)\n"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1\\n7 2\\n3') == '14'\n\"\"\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\\n') == '35\\n18\\n3'\nprint('The code is correct!')\nassert solution('5 4\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\\n') == '35\\n18\\n3'\nprint('The code is correct!')\n\nSample Input 3:\n5 8\n1 1 2 1\n2\n0 9\n1 7\n7 7\nSample Output 3:\n19\n13\n1\n\nSample Input 4:\n7 3\n3 7 10\n3\n0 10\n2 6\n7 7\nSample Output 4:\n8\n2\n1\n\nSample Input 5:\n9 6\n3 1 2 5 7 9 11\n2\n0 9\n1 7\n7 7\nSample Output 5:\n37\n3\n1\n\nSample Input 6:\n7 7\n1 1 2 1\n1\n0 9\n2 6\n7 7\nSample Output 6:\n0\n1\n1\n\"\"\"\n\nn, k = map(int, input().split())\nsequence = [0] * n\nfor x in map(int, input().split()): sequence[x] = sequence[x] + 1\nq = int(input())\n\nfor _ in range(q):\n    l, r = map(int, input().split())\n    print(sum(sequence[l:r + 1]))\n"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4 1\") == \"35\"\n\"\"\""
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\") == \"35\\n18\\n3\"\n\n\"\"\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == '0\\n1\\n3\\n6'\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\\n\") == '0\\n1\\n2\\n4\\n6'\n\"\"\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4') == '0\\n1\\n3\\n6'\nassert solution('5\\n3\\n2\\n4\\n1\\n5') == '0\\n1\\n2\\n4\\n6'\n\"\"\"\n\nfrom sys import stdin\n\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\nclass Tree:\n    def __init__(self, data):\n        self.root = Node(data)\n\n    def insert(self, data):\n        if self.root is None:\n            self.root = Node(data)\n        else:\n            self.insert_node(data, self.root)\n\n    def insert_node(self, data, node):\n        if data < node.data:\n            if node.left is not None:\n                self.insert_node(data, node.left)\n            else:\n                node.left = Node(data)\n        else:\n            if node.right is not None:\n                self.insert_node(data, node.right)\n            else:\n                node.right = Node(data)\n\n    def in_order(self, root):\n        if root:\n            self.in_order(root.left)\n            print(root.data, end=' ')\n            self.in_order(root.right)\n\n    def pre_order(self, root):\n        if root:\n            print(root.data, end=' ')\n            self.pre_order(root.left)\n            self.pre_order(root.right)\n\n    def post_order(self, root):\n        if root:\n            self.post_order(root.left)\n            self.post_order(root.right)\n            print(root.data, end=' ')\n\n    def BFS(self, root):\n        if root is None:\n            return None\n\n        queue = []\n        queue.append(root)\n        while queue:\n            node = queue.pop(0)\n            print(node.data, end=' ')\n            if node.left is not None:\n                queue.append(node.left)\n            if node.right is not None:\n                queue.append(node.right)\n\n    def DFS(self, root):\n        if root is None:\n            return None\n\n        stack = []\n        stack.append(root)\n        while stack:\n            node = stack.pop()\n            print(node.data, end=' ')\n            if node.right is not None:\n                stack.append(node.right)\n            if node.left is not None:\n                stack.append(node.left)\n\n    def count_nodes(self, root):\n        if root is None:\n            return 0\n\n        return 1 + self.count_nodes(root.left) + self.count_nodes(root.right)\n\n    def height(self, root):\n        if root is None:\n            return 0\n        else:\n            return 1 + max(self.height(root.left), self.height(root.right))\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '0\\n1\\n3\\n6'\n\nassert solution('5\\n3\\n2\\n4\\n1\\n5\\n') == '0\\n1\\n2\\n4\\n6'\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"0\\n1\\n3\\n6\\n\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\\n\") == \"0\\n1\\n2\\n4\\n6\\n\"\n\n'''\n\nimport sys\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\") == \"0\\n1\\n3\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\") == \"0\\n1\\n2\\n4\\n6\"\n\"\"\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"0\\n1\\n3\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\\n\") == \"0\\n1\\n2\\n4\\n6\"\n\"\"\"\n\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n        self.counter = 0\n\n    def insert(self, data):\n        if self.root is None:\n            self.root = Node(data)\n            return\n\n        if data > self.root.data:\n            if self.root.right is None:\n                self.root.right = Node(data)\n                return\n\n            self.root.right = self.insert(self.root.right, data)\n            return\n\n        if self.root.left is None:\n            self.root.left = Node(data)\n            return\n\n        self.root.left = self.insert(self.root.left, data)\n\n    def display(self):\n        self.__print_helper(self.root, \"\", True)\n\n    def __print_helper(self, cur_node, cur_prefix, left_child):\n        if cur_node is None:\n            return\n\n        if left_child:\n            self.__print_helper(cur_node.left, cur_prefix + \"\", True)\n        else:\n            self.__print_helper(cur_node.right, cur_prefix + \"\", False)\n\n        print(cur_prefix + str(cur_node.data))\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '0\\n1\\n3\\n6'\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"0\\n1\\n3\\n6\\n\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\\n\") == \"0\\n1\\n2\\n4\\n6\\n\"\n\n\"\"\"\n\n\nimport unittest\n\n\nclass BST:\n    def __init__(self, root_data):\n        self.root_data = root_data\n        self.left_child = None\n        self.right_child = None\n\n    def insert(self, data):\n        if self.root_data == None:\n            self.root_data = data\n            return\n        if self.root_data < data:\n            if self.right_child == None:\n                self.right_child = BST(data)\n            else:\n                self.right_child.insert(data)\n        else:\n            if self.left_child == None:\n                self.left_child = BST(data)\n            else:\n                self.left_child.insert(data)\n\n    def search(self, data):\n        if self.root_data == data:\n            return True\n        if self.root_data < data:\n            if self.right_child == None:\n                return False\n            else:\n                return self.right_child.search(data)\n        if self.root_data > data:\n            if self.left_child == None:\n                return False\n            else:\n                return self.left_child.search(data)\n\n    def print_tree(self):\n        if self.left_child:\n            self.left_child.print_tree()\n        print(self.root_data)\n        if self.right_child:\n            self.right_child.print_tree()\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '0\\n1\\n3\\n6\\n'\nassert solution('5\\n3\\n2\\n4\\n1\\n5\\n') == '0\\n1\\n2\\n4\\n6\\n'\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\") == \"0\\n1\\n3\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\") == \"0\\n1\\n2\\n4\\n6\"\n\"\"\"\nimport sys\nfrom sys import stdin\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n1 3 2 2\n1 1 3 2\n2 4 7 3\n3 3 5 3''') == '2 4 1 3'\n\nassert solution('''4\n0 0 1 1\n1 2 0 3\n2 2 3 3\n4 0 3 1''') == '4 3 1 2'\n\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\") == \"4 3 1 2\"\nassert solution(\"4\\n0 0 1 1\\n0 1 2 3\\n0 2 4 3\") == \"2 4 1 3\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n0 2 4 3\") == \"4 3 1 2\"\nassert solution(\"4\\n0 0 1 1\\n0 1 2 3\\n0 2 4 3\") == \"4 3 1 2\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\") == \"4 3 1 2\"\nassert solution(\"4\\n2 4 7 3\\n0 0 1 1\\n2 2 3 3\\n4 0 3 1\") == \"4 3 1 2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\") == \"4 3 1 2\"\n\"\"\"\n\n\nfrom math import sqrt, acos, degrees"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\") == \"4 3 1 2\"\nassert solution(\"4\\n0 0 1 1\\n0 0 3 1\\n1 1 3 2\\n2 2 3 3\") == \"1 2 3 4\"\nassert solution(\"4\\n0 0 1 1\\n0 1 2 1\\n1 1 3 2\\n2 2 3 3\") == \"1 3 4 2\"\n\n-----Problem-----\n\nA child is playing with a table of size n \u00d7 m. The table is so long, the two opposite ends of the table can be seen as points $(0,0)$ and $(m,n)$. One day the child puts down the table. Unfortunately, his work is not perfect and there are some sticks that were not put in correct place.\n\nThe child remembers that the table was so big, that he had to make at least one move.\n\nHelp the child determine all possible positions in which the sticks could be put.\n\n-----Solution-----\n\nhttps://www.notion.so/leetcode-349-Intersection-Points-on-Two-Lines-6327b2c3a4d5\n\n-----Explanation-----\n\nhttps://leetcode.com/problems/intersection-of-two-arrays/discuss/147969/Python-short-solution-with-diagram\n\n'''"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\") == \"4 3 1 2\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\") == \"4 3 1 2\""
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == '2 4 1 3'\n\n\"\"\"\n\nfrom collections import deque\nfrom math import hypot"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3') == '2 4 1 3'\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1') == '4 3 1 2'\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\") == \"4 3 1 2\"\n\"\"\"\n\nfrom collections import deque\n\nn = int(input())\nt = deque([])\nfor _ in range(n):\n    x, y, x1, y1 = map(int, input().split())\n    t.append((x - x1, y - y1))\n\nq = deque([])\nfor x, y in sorted(t, key=lambda x: abs(x[0]) + abs(x[1])):\n    if not q:\n        q.append((x, y))\n    else:\n        if x < q[0][0]:\n            q.appendleft((x, y))\n        elif x > q[-1][0]:\n            q.append((x, y))\n        else:\n            while q and q[0][0] <= x and q[-1][0] >= x:\n                q.popleft()\n            q.append((x, y))\n\nprint(*q, sep=\" \")\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3') == '2 4 1 3'\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1') == '4 3 1 2'\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1') == '4 3 1 2'\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1') == '4 3 1 2'\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1') == '4 3 1 2'\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n\"\"\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n\"\"\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n\"\"\"\n\n\"\"\"\n\u89e3\u9898\u601d\u8def:\n\u4e3b\u8981\u601d\u8def\u662f\u8fd9\u6837:\n1. \u628a\u6bcf\u4e2a\u70b9\u503c\u8f6c\u5316\u4e3aint\n2. \u628a\u624b\u724c\u7684\u4e24\u5217\u90fd\u53d8\u6210\u5217\u8868\n3. \u5f00\u59cb\u904d\u5386, \u76f8\u7b49\u7684\u5c31\u52a0\u5230stack\u91cc\u9762\u53bb\n4. \u7528\u4e00\u4e2a\u961f\u5217\u7ef4\u62a4\u6700\u5927\u503c\n5. \u6bcf\u6b21pop\u7684\u65f6\u5019\u5224\u65ad\u662f\u4e0d\u662f\u6700\u5927\u503c\n\"\"\"\n\nfrom collections import deque, Counter\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n\"\"\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n\n\"\"\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n\"\"\""
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n\n\"\"\"\n\n\n\nimport collections"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\"\n) == \"Theta wins\"\nassert solution(\n    \"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\"\n) == \"Theta wins\"\n\"\"\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2\\n1 not 1 1') == 'charlatan'\nassert solution('2 1\\n1 and 1 1') == 'fabulist'"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n1 truther 1\\n1 not charlatan 1\") == \"charlatan\"\nassert solution(\"2 1\\n1 and fabulist 1 fabulist 2\") == \"fabulist\"\nassert solution(\"3 2\\n1 xor fabulist 1 xor fabulist 2\") == \"truther\"\n\"\"\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n1 charlatan 1\\n1 not charlatan 1\") == \"charlatan\"\n\"\"\"\nimport re\nimport sys\nimport dataclasses"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n1 not 1 1\") == \"truther\"\nassert solution(\"1 2\\n1 and 1 2\") == \"fabulist\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\n\"\"\""
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n1\\n') == 'truther'\nassert solution('2\\n1\\n1\\n') == 'charlatan'\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n1 and fabulist 1 fabulist 2') == 'fabulist\\ntruther'\n\"\"\""
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n1 truther 1\n1 not 1\n\"\"\") == 'truther'\nassert solution(\"\"\"\n2\n1 and 1\n1 not 1\n\"\"\") == 'fabulist'\nassert solution(\"\"\"\n1\n1 and 1\n\"\"\") == 'charlatan'\nassert solution(\"\"\"\n1\n1 and 1\n2 and 2\n\"\"\") == 'charlatan'\nassert solution(\"\"\"\n1\n1 and 1\n\"\"\") == 'charlatan'\n"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"4\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"4\", \"Test 1\"\nassert solution(\"3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00\") == \"3\", \"Test 2\"\n\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == 4\n\n-----Explanation-----\nThe maximum number of fruits that can be sliced with one straight-line swipe is 4. The figure shows the four fruits that can be sliced.\n\n-----Constraints-----\n$1 \\leq n \\leq 100$\nAll coordinates have absolute value no larger than $10^4$.\n\"\"\""
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == 4\nassert solution(\"3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00\") == 3\n"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == 4\nassert solution(\"3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00\") == 3\n"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n1.00 5.00\n3.00 3.00\n4.00 2.00\n6.00 4.50\n7.00 1.00\n''') == '4'\nprint('Test pass.')"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n1.00 5.00\n3.00 3.00\n4.00 2.00\n6.00 4.50\n7.00 1.00''') == '4'\nassert solution('''3\n-1.50 -1.00\n1.50 -1.00\n0.00 1.00''') == '3'\nassert solution('''3\n-1.50 -1.00\n1.50 -1.00\n0.00 1.00''') == '3'\nassert solution('''3\n-1.50 -1.00\n1.50 -1.00\n0.00 1.00''') == '3'\nassert solution('''3\n-1.50 -1.00\n1.50 -1.00\n0.00 1.00''') == '3'\n"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"4\"\n\"\"\""
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"4\"\nassert solution(\"3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00\") == \"3\"\nprint('OK')"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"4\"\nassert solution(\"3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 1\\nX..\\n.?\\n10 1000 1') == '10'\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"2 5 2\nR..?.\n.X...\n100 100 7 100 8\"\"\") == 16\n\n\"\"\"\n\nR, C, K = [int(x) for x in stdin.split()]\ngrid = [list(stdin) for i in range(R)]"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".X..\") == \"10\"\nassert solution(\"..X.\") == \"1\"\nassert solution(\"X...X\") == \"0\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8\\n\") == \"16\"\n\n\"\"\"\nfrom __future__ import annotations\n\nfrom collections import defaultdict\n\nclass Conveyor:\n    def __init__(self, direction: str):\n        self.direction = direction\n        self.next = None\n\nclass Part:\n    def __init__(self, rows: int, columns: int, num_conveyor_beats: int):\n        self.rows = rows\n        self.columns = columns\n        self.num_conveyor_beats = num_conveyor_beats\n        self.conveyors = defaultdict(Conveyor)\n        self.points = []\n    \n    def set_conveyors_to_right(self) -> None:\n        self.conveyors[self.rows - 1].next = self.conveyors[self.rows]\n\n    def set_conveyors_to_left(self) -> None:\n        self.conveyors[0].next = self.conveyors[1]\n\n    def set_conveyors_for_beats(self) -> None:\n        # 1. Determine the number of rows and columns\n        row_count = self.rows\n        column_count = self.columns\n        # 2. Set the right and left conveyor belts\n        self.set_conveyors_to_right()\n        self.set_conveyors_to_left()\n        # 3. Set the conveyor belts for beats\n        for beat_num in range(1, self.num_conveyor_beats + 1):\n            # a. Determine the left and right positions for the beat\n            beat_left_position = (beat_num - 1) % column_count\n            beat_right_position = (beat_num + 1) % column_count\n            # b. Determine the right and left conveyor belts for the beat\n            conveyor_left = self.conveyors[beat_left_position]\n            conveyor_right = self.conveyors[beat_right_position]\n            # c. Connect the left and right conveyors to each other\n            conveyor_left.next = conveyor_right\n    \n    def set_points(self) -> None:\n        for row in range(self.rows):\n            for column in range(self.columns):\n                self.points.append((row, column))\n    \n    def get_max_score(self) -> int:\n        pass"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n2 5 2\nR..?.\n.X...\n100 100 7 100 8\n''') == '16'\nassert solution('''\n2 5 2\nR..?.\n.X...\n100 100 7 100 8\n''') == '10'\n\"\"\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8\") == 16\nassert solution(\"2 3 1\\nX..\\n.?.\\n10 1000 1\") == 10\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8\\n') == 16\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 1\\nX..\\n.?\\n10 1000 1\") == \"10\"\nassert solution(\"2 5 2\\nR...\\n...X\\n100 100 7 100 8\\n100 100 7 100 8\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8\\n') == 16\nassert solution('2 3 1\\nX..\\n.?.\\n10 1000 1\\n') == 10\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8\") == \"16\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n0 4 4\\n1 5 1\\n2 6 1\") == '1.414'\nassert solution(\"6 11\\n0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10\") == '5.657'\n\"\"\"\n\n\"\"\"\nnaive solution\nuse sieve\n\nfor each input:\n    we find all the multiples of k\n    we check that each one of them sums up to n\n    if so, then we return the D\n\"\"\"\n\nimport math\nimport itertools\nimport time\n"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n0 4 4\\n1 5 1\\n2 6 1') == '1.414'\n\"\"\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\nassert solution('6 11') == '5.657'\n\nassert solution('6 3') == '1.414'\n\nassert solution('6 1') == '1.414'\n\nassert solution('6 2') == '1.414'"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 4 4\\n1 5 1\\n2 6 1') == '1.414'\n\"\"\""
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n0 4 4\\n1 5 1\\n2 6 1\") == \"1.414\"\n\n\"\"\""
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n0 4 4\\n1 5 1\\n2 6 1\") == \"1.414\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 3\n0 4 4\n1 5 1\n2 6 1\n\"\"\") == '1.414'\n\n\"\"\"\nN, K = [int(i) for i in stdin.readline().split()]\ncoordinates = [stdin.readline().split() for _ in range(N)]\ncoordinates = [[int(i) for i in j] for j in coordinates]\ncoordinates = sorted(coordinates, key = lambda x: x[1])\ncoordinates = [[i, j] for i, j in coordinates]\nx = [i[0] for i in coordinates]\ny = [i[1] for i in coordinates]\nz = [i[2] for i in coordinates]\nx, y = zip(*sorted(zip(x, y)))\na = []\nfor i, j in zip(x, y):\n    for k in range(1, j+1):\n        if (i+k)%K == 0:\n            a.append(k)\nfor i in range(len(x)-1):\n    if x[i+1] == x[i] and y[i+1] == y[i]:\n        continue\n    else:\n        a.append(abs(x[i+1]-x[i]))\n    a.append(abs(y[i+1]-y[i]))\n"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 3\\n1 1 2\\n1 1 3\") == \"1.414\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n0 4 4\\n1 5 1\\n2 6 1\") == \"1.414\"\n\"\"\"\n\nN, K = map(int, input().split())\ncities = []\nfor i in range(N):\n    x, y, k = map(int, input().split())\n    cities.append((x, y, k))\n\nl = 0\nr = 100000000000000000\n\nwhile l <= r:\n    m = (l + r) // 2\n    count = 0\n    for x, y, k in cities:\n        if x < m and y < m:\n            count += k\n    if count % K == 0:\n        r = m - 1\n    else:\n        l = m + 1\n\nprint(\"%.3f\" % (r + 1))\n"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n0 4 4\\n1 5 1\\n2 6 1') == '1.414'\nassert solution('6 11\\n0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10') == '5.657'\nprint('The local tests are done. Click on \"Check\" for more details about tests')\n\"\"\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 1 1 1\\n') == '1.0'\nassert solution('3 1 1 1\\n') == '0.433'\nassert solution('7 1 1 1 1 1 1\\n') == '0.0'\nassert solution('3 1 1 1\\n') == '0.433'\nassert solution('7 1 1 1 1 1 1\\n') == '0.0'\n"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 1 1 1 1''') == '1.0'\nassert solution('''3 1 1 1''') == '0.433'\nassert solution('''5 1 1 1 1''') == '1.0'\n'''"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 1 1 1\\n') == '1.0\\n'\nassert solution('3 1 1 1\\n') == '0.433\\n'\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 1 1 1\") == \"1.0\"\nassert solution(\"3 1 1 1\") == \"0.433\"\n\"\"\""
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 1 1 1\") == \"1.0\"\nassert solution(\"3 1 1 1\") == \"0.433\"\n\n\"\"\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 1 1 1\") == \"1.0\"\nassert solution(\"3 1 1 1\") == \"0.433\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 1 1 1\") == \"1.0\"\nassert solution(\"3 1 1 1\") == \"0.433\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n1\n1\n1\n1\n''') == '1.0'\nassert solution('''3\n1\n1\n1\n''') == '0.433'\nassert solution('''8\n6\n4\n6\n2\n6\n2\n6\n4\n''') == '0.470'\nassert solution('''8\n6\n4\n6\n2\n6\n2\n6\n4\n''') == '0.433'\nassert solution('''4\n5\n1\n1\n1\n''') == '0.5'\n"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 1 1 1\") == \"1.0\"\nassert solution(\"3 1 1 1\") == \"0.433\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 1 1 1\\n3 1 1 1\") == \"1.0\"\nassert solution(\"4 1 1 1 1\\n1 1 1 1\") == \"0.0\"\nassert solution(\"4 1 1 1 1\\n2 1 1 1\") == \"0.5\"\n\nassert solution(\"4 1 1 1 1\\n1 1 1 1\") == \"0.0\"\nassert solution(\"4 1 1 1 1\\n1 2 1 1\") == \"0.5\""
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\\n4\\n1 1\\n2 1\\n2 3\\n3 3\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\") == \"36\\n5\\n1 1\\n1 2\\n2 2\\n3 2\\n3 3\"\n\n\"\"\"\n\n\nimport sys\nfrom typing import NamedTuple\nimport operator\n\n\nclass PositionAndFlies(NamedTuple):\n    position: tuple[int, int]\n    flies: int\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\\n\") == \"5\\n4\\n1 1\\n2 1\\n2 3\\n3 3\"\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\\n4\\n1 1\\n2 1\\n2 3\\n3 3\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\") == \"36\\n5\\n1 1\\n1 2\\n2 2\\n3 2\\n3 3\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5') == '5\\n4\\n1 1\\n2 1\\n2 3\\n3 3'\nassert solution('8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15') == '36\\n5\\n1 1\\n1 2\\n2 2\\n3 2\\n3 3'\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5\") == \"5\"\nassert solution(\"8 10\") == \"36\"\nassert solution(\"2 1 30\") == \"1\"\nassert solution(\"1 1 5\") == \"4\"\nassert solution(\"1 2 4\") == \"1 1\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\\n\") == \"5\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\\n\") == \"36\""
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == '5'\nassert solution('4 10') == '10'\nassert solution('4 100') == '100'\nassert solution('5 5') == '5'\nassert solution('5 10') == '10'\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\"\nassert solution(\"5 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5''') == '5'\nassert solution('''8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15''') == '36'\n\nprint(solution(input()))"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n1 2\\n1 3\") == \"3\"\nprint(solution(\"3 2\\n2 1 3\\n1 3\\n2 3\"))\n"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n2 1\\n1 2\") == '1'\nassert solution(\"3 2\\n2 1 3\\n1 3\\n2 3\") == '3'\n"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n1 2\\n1 2\") == \"1\"\nassert solution(\"3 2\\n2 1 3\\n1 3\\n2 3\") == \"3\"\nassert solution(\"4 3\\n1 3\\n2 3\\n3 1 3\\n1 2 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(\"ex_0_0.txt\", 'r').read()) == \"1\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'3 2\\n'\n'2 1 3\\n'\n'1 3\\n'\n'2 3'\n) == '3\n\nassert solution(\n'2 1\\n'\n'2 1\\n'\n'1 2'\n) == '1\n\nassert solution(\n'5 4\\n'\n'3 1 4 2\\n'\n'1 4\\n'\n'2 3\\n'\n'3 4'\n) == '3\n\nassert solution(\n'2 1\\n'\n'2 1\\n'\n'1 2'\n) == '0\n\nprint('The local tests are done. Click on \"Check\" for more details about the hidden tests.')\n\"\"\"\n\nfrom collections import Counter, defaultdict\n"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(None) == None\nassert solution(\"1 2 3 4\") == \"0\"\n\n-------------------------------------------------\nimport sys"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n2 1\\n1 2\\n\") == \"1\"\nassert solution(\"3 2\\n2 1 3\\n1 3\\n2 3\\n\") == \"3\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(['1 2','1 3']) == '1'\nassert solution(['2 1','1 3']) == '2'\nassert solution(['1 2','1 3','1 2']) == '0'\n\n\"\"\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n2 1\\n1 2\\n\") == \"1\"\nassert solution(\"3 2\\n2 1 3\\n1 3\\n2 3\\n\") == \"3\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 2\\n1 3') == '3'\nassert solution('3 2\\n2 1 3\\n1 3\\n2 3') == '3'\n\"\"\""
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\") == '5'\nassert solution(\"5 5\\n2 4\\n3 5\\n1 5\\n3 6\") == '-1'\nassert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\") == '5'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 7\\n1 2\\n1 3\\n1 4\\n2 4\\n3 4\\n4 2\\n2 3\\n3 1\\n1 3') == '-1'\nassert solution('5 6\\n1 4\\n2 4\\n3 5\\n4 5\\n4 6\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4') == '6'\nassert solution('6 7\\n1 5\\n2 5\\n3 5\\n4 6\\n4 7\\n5 6\\n1 6\\n1 7\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\\n5 2\\n1 2\\n2 4\\n3 4\\n4 5\\n5 1\\n1 3') == '6'\nassert solution('8 7\\n1 6\\n1 7\\n2 4\\n2 5\\n3 4\\n3 5\\n4 6\\n5 4\\n6 3\\n1 3\\n1 4\\n2 6\\n2 7\\n3 7\\n4 6\\n5 6\\n6 5\\n7 6\\n1 7\\n2 5\\n3 5\\n4 7') == '5'\nassert solution('9 7\\n1 4\\n2 4\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n1 9\\n2 8\\n3 8\\n4 8\\n4 9\\n5 7\\n6 9\\n1 7') == '4'\n"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n\") == -1\nassert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n\") == 5\n\"\"\"\n\nimport sys\nimport collections\nimport math\n"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\") == \"5\"\n\"\"\""
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\") == -1\nassert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\") == 5\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1\\n2\\n1\\n2\\n2\\n2\\n2\\n2\\n2\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n3 6\\n1 6\\n\") == -1\nassert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n\") == 5\n"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == -1\n\n'''\nLet us first find the graph of the city.\n\nFor example, if the input is\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\nthen the graph is:\n\n[1, 2, 3, 4]\n[2, 3]\n[1, 3]\n[1]\n[2]\n[3]\n[4]\nThe graph is:\n\n0  1  2  3  4\n  \\   /  /\n   1  2  3\n    \\\n     4\nWe define the following graph representation:\n\nn = number of areas\nm = number of roads\nq = number of queries\nFor each query, we are given the two areas a and b and our task is to find the cheapest decorating cost of a city."
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(open('./sample_input.txt', 'r').read()) == '-1'\n\"\"\"\n\nfrom collections import deque, defaultdict\nfrom itertools import combinations"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n\") == -1\nassert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n\") == 5\nprint('Test pass.')\n\n-----Solution-----\n\n\u5c31\u662f\u628a\u8fd9\u4e2a\u6709\u5411\u56fe\u8fde\u8fb9\u653e\u5230\u90bb\u63a5\u8868\u91cc\uff0c\u7136\u540e\u505a\u4e00\u4e2a\u56fe\uff0c\u7528\u62d3\u6251\u6392\u5e8f\n\u4ee5\u540e\u518d\u89e3\u51b3\u3002\u3002\u3002\n\n'''\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1\\n1 1\\n5 1\\n5 5\\n4 2') == '4.00'\n\"\"\""
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1\\n1 1\\n5 1\\n5 5') == '4.00'\nassert solution('6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0') == '9.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n1 1\\n5 1\\n5 5\\n4 2\\n\") == \"4.00\"\n\nassert solution(\"6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0\\n\") == \"9.00\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1\\n1 1\\n5 1\\n5 5\\n4 2\\n') == '4.00'\n\"\"\""
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 1\\n5 1\\n5 5\\n4 2\") == \"4.00\"\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(    \"4 1\\n1 1\\n5 1\\n5 5\\n4 2\") == \"4.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 1\n1 1\n5 1\n5 5\n4 2''') == '4.00'\n\n\"\"\""
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n1 1\\n5 1\\n5 5\\n4 2') == '4.00'\nassert solution('6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0') == '9.00'\n\"\"\""
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1\\n1 1\\n5 1\\n5 5\\n4 2') == '4.00'\nassert solution('6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0') == '9.00'\n\nimport numpy\nfrom a2p import path\n\np = numpy.array([[int(j) for j in i.split(' ')] for i in open(path('input', '14')).readlines()])\nprint(numpy.max(p[:, 0]) - numpy.min(p[:, 0]))\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n1 1\\n5 1\\n5 5\\n4 2\") == \"4.00\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2\\n\"\n    \"PAINT 2 0 0 3 3\\n\"\n    \"PAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2\\nPAINT 2 0 0 3 3\\nPAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\\n\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2\\n\"\n\"PAINT 2 0 0 3 3\\n\"\n\"PAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\\n\"\n\nassert solution(\"3 3 4\\n\"\n\"PAINT 3 0 0 1 1\\n\"\n\"SAVE\\n\"\n\"PAINT 2 1 1 2 2\\n\"\n\"LOAD 1\\n\") == \"3 1 1\\n1 3 1\\n1 1 1\\n\""
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\\nPAINT 2 0 0 3 3\\nPAINT 3 0 3 3 3\") == \"2 1 2 3\\n1 2 1 2\"\nassert solution(\"3 3 4\\nPAINT 3 0 0 1 1\\nSAVE\\nPAINT 2 1 1 2 2\\nLOAD 1\") == \"3 1 1\\n1 3 1\"\n\n\"\"\"\nimport fileinput"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2\\nPAINT 2 0 0 3 3\\nPAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\"\n\"\"\"\nimport os\nimport unittest"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '''2 1 2 3\n1 2 1 2\n2 1 2 3\n1 2 1 2'''\n\nprint(solution('''4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n'''))\n"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\"\"\"\n    ) == \"\"\"2 1 2 3\n1 2 1 2\"\"\"\n\nassert solution(\n\"\"\"3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\"\"\"\n    ) == \"\"\"3 1 1\n1 3 1\n1 1 1\"\"\"\n\nassert solution(\n\"\"\"4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\nPAINT 2 3 3 4 4\nPAINT 3 3 4 3 4\nPAINT 2 3 3 4 4\nSAVE\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\nPAINT 2 3 3 4 4\nPAINT 3 3 4 3 4\nPAINT 2 3 3 4 4\nLOAD 1\"\"\"\n    ) == \"\"\"2 1 2 3\n1 2 1 2\n2 1 2 3\n1 2 1 2\n2 1 2 3\n1 2 1 2\n3 1 1\n1 3 1\n1 1 1\"\"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2\\n\"\n    \"PAINT 2 0 0 3 3\\n\"\n    \"PAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\"\nassert solution(\"4 3 2\\n\"\n    \"PAINT 3 0 0 1 1\\n\"\n    \"SAVE\\n\"\n    \"PAINT 2 1 1 2 2\\n\"\n    \"LOAD 1\\n\") == \"3 1 1\\n1 3 1\\n1 1 1\"\nassert solution(\"4 3 2\\n\"\n    \"PAINT 3 0 0 1 1\\n\"\n    \"SAVE\\n\"\n    \"PAINT 2 1 1 2 2\\n\"\n    \"LOAD 1\\n\") == \"3 1 1\\n1 3 1\\n1 1 1\"\nassert solution(\"4 3 2\\n\"\n    \"PAINT 3 0 0 1 1\\n\"\n    \"SAVE\\n\"\n    \"PAINT 2 1 1 2 2\\n\"\n    \"LOAD 1\\n\") == \"3 1 1\\n1 3 1\\n1 1 1\"\nassert solution(\"4 3 2\\n\"\n    \"PAINT 3 0 0 1 1\\n\"\n    \"SAVE\\n\"\n    \"PAINT 2 1 1 2 2\\n\"\n    \"LOAD 1\\n\") == \"3 1 1\\n1 3 1\\n1 1 1\"\n\n\"\"\""
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2\\nPAINT 2 0 0 3 3\\nPAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2\\n\"\n    \"PAINT 2 0 0 3 3\\n\"\n    \"PAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\"\n\n\"\"\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 4 2 3\") == \"1 4 2 3\"\nassert solution(\"5 1\\n1 5 2 3 4\") == \"-1\"\nassert solution(\"7 8\\n1 2 3 4 5 6 7\") == \"1 2 3 4 5 6 7\"\nassert solution(\"6 1\\n1 2 3 4 5 6\") == \"-1\"\nassert solution(\"6 4\\n1 3 2 4 5 6\") == \"1 3 2 4 5 6\"\n\"\"\"\n\nn, m = input().split()\nn, m = int(n), int(m)\nnums = list(range(1, n+1))\nans = \"\"\nfor i in range(1 << n):\n    a = set()\n    for j in range(n):\n        if i & (1 << j):\n            a.add(nums[j])\n    if len(a) == m:\n        ans += \" \".join(str(e) for e in sorted(a)) + \" \"\nprint(ans.rstrip())\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"4 3\\n1 4 2 3\\n\") == \"1 4 2 3\\n\"\nassert solution(\n\"4 3\\n1 3 4 2\\n\") == \"-1\\n\"\nassert solution(\n\"5 1\\n1 2 1 2 1\\n\") == \"-1\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"1 4 2 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n\") == \"1 4 2 3\"\nassert solution(\"5 1\\n1 2 3 4 5\\n\") == \"-1\"\nassert solution(\"5 4\\n1 2 3 4 5\\n\") == \"1 2 3 4 5\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430:\n\u041f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u044b \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0438 \u043d\u0430 \u043f\u0440\u043e\u0448\u043b\u043e\u043c \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438.\n\n\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0442\u0430\u043a\u0438\u043c:\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f:\n\u0412\u0432\u043e\u0434 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0442\u0440\u043e\u043a N \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 M. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 M.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 M.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 M.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 M.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 M.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 M.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 M.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 M.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 M.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 M.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 M.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 M.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 M.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 M.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 M.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 M.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 M.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 N \u0446\u0438\u0444\u0440, \u043a\u0430"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 4 2 3') == '1 4 2 3'\nassert solution('5 1\\n1 2 3 4 5') == '-1'\nassert solution('5 1\\n2 3 4 5 1') == '2 3 4 5 1'\n\n\"\"\""
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(output())\n\n\"\"\""
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2 3 4\\n') == '1 4 2 3'\nassert solution('5 1\\n1 2 3 4 5\\n') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n\") == \"1 4 2 3\"\nassert solution(\"5 1\\n3 2 4 5\") == \"3 2 4 5\"\nassert solution(\"1 1\\n10 10\") == \"10\"\nassert solution(\"3 3\\n4 1 2\\n2 3 4\\n2 3 1\\n1 2 1\") == \"4 3 2\"\n\"\"\""
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 4 2\\n2 3 4\\n2 4 1\\n3 4 1\\n3 4\\n4 3\\n\") == \"1 4 2 3\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 3\n1 4 2 3\n1 4 2 3\n1 4 2 3\n1 4 2 3''') == '1 4 2 3'\nassert solution('''5 1\n5 5 5 5\n5 5 5 5\n5 5 5 5\n5 5 5 5\n5 5 5 5''') == '-1'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4 2\\n2 1\\n1 3\\n\") == \"1\"\nassert solution(\"4\\n5 0\\n2 6\\n8 6\\n5 7\\n\") == \"0\"\n\"\"\"\n\nn = int(input())\n\ncount = 0\n\nfor i in range(n):\n    x1, y1 = map(int, input().split())\n    for j in range(i + 1, n):\n        x2, y2 = map(int, input().split())\n        if x1 == x2:\n            if y1 == y2:\n                count += 1\n        elif abs(y1 - y2) == abs(x1 - x2):\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n4 2\\n2 1\\n1 3') == '1\\n'\nassert solution('4\\n5 0\\n2 6\\n8 6\\n5 7') == '0\\n'\n\"\"\""
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n2 1\\n1 3\\n\") == \"1\"\nassert solution(\"4 3\\n4 1\\n5 2\\n\") == \"0\""
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4 2\\n2 1\\n1 3\") == 1\n"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n2 2\\n8 6\\n5 7\\n') == '0'\nassert solution('4 4\\n2 1\\n1 3\\n') == '1'\nassert solution('4 5\\n2 1\\n1 3\\n') == '0'\nassert solution('4 4\\n5 0\\n2 6\\n8 6\\n5 7\\n') == '0'\nassert solution('3 2\\n4 2\\n2 1\\n1 3\\n') == '1'\n"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4 2\\n2 1\\n1 3\") == \"1\"\nassert solution(\"4\\n5 0\\n2 6\\n8 6\\n5 7\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"4 3 2 1\") == \"0\"\nassert solution(\"5 1 3 2 4\") == \"0\"\n\"\"\""
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n4 2\n2 1\n1 3''') == '1'\nassert solution('''4\n5 0\n2 6\n8 6\n5 7''') == '0'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4 2\\n2 1\\n1 3\") == \"1\"\nassert solution(\"4\\n5 0\\n2 6\\n8 6\\n5 7\") == \"0\"\n\"\"\""
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('5') == '0'\n\"\"\"\n\nfrom math import sqrt, gcd"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n2 3 2\n0 1 2\n0 1 2\n''') == \"3\", \"Wrong answer\"\nprint(\"The last line contains the correct answer!\")"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\") == \"4 140\"\n\"\"\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10') == '4 140'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\") == \"4 140\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom sys import setrecursionlimit\nsetrecursionlimit(10**6)"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\\n\") == \"4 140\", \"Wrong solution\"\n\"\"\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a) == b\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10') == '4 140'\nassert solution('2 1 0 1\\n0 1 1000 100') == '1000 100000'\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\\n\") == '4 140'\nassert solution(\"2 1 0 1\\n0 1 1000 100\\n\") == '1000 100000'\nprint(\"Passed!\")\n\n\"\"\"\n\nimport sys\nimport heapq"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10') == '4 140'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\") == \"4 140\"\n\"\"\""
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\") == \"3\"\nassert solution(\"8 2\\n8 3\\n5 7\") == \"impossible\"\nassert solution(\"4 1\\n3 4\") == \"impossible\"\nassert solution(\"2 2\\n3 2\") == \"impossible\"\nassert solution(\"100 3\\n1 100\\n1 100\") == \"impossible\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\") == \"3\"\nassert solution(\"8 2\\n8 3\\n5 7\") == \"impossible\""
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\") == \"3\"\nassert solution(\"8 2\\n8 3\\n5 7\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\\n') == '3'\nassert solution('8 2\\n8 3\\n5 7\\n') == 'impossible'\n\"\"\"\n\nn, k = map(int, input().split())\narr = []\nfor i in range(k):\n    a, b = map(int, input().split())\n    arr.append((a, b))\n\narr.sort()\n\ncnt = 0\nmin_cnt = 0\nfor i in range(k):\n    if arr[i][0] > arr[i][1]:\n        break\n    min_cnt = max(min_cnt, arr[i][1] - arr[i][0] + 1)\n    if i == k-1:\n        cnt = max(cnt, min_cnt)\nprint(cnt)\n"
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(output())"
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\\n') == '3'\nassert solution('100 6\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n') == 'impossible'\n\n-----\nYou are given a set of building blocks, each has its own weight. You have a set of towers of various heights, you can put some building blocks to each of them, and each tower will have the sum of the building blocks' weights it can support. You need to figure out the largest tower that can be successfully created.\n\n-----\nExample\n\nGiven:\n\nblocks = {50, 20, 10, 5, 1}\nheights = {15, 2, 10, 6, 4}\nReturn:\n\n20\n\"\"\"\n\nblocks = {50, 20, 10, 5, 1}\nheights = {15, 2, 10, 6, 4}\n\nheights = list(heights)\nblocks = list(blocks)\n\nheights.sort()\nblocks.sort()\n\nprint(blocks)\nprint(heights)\n\nfor i in range(len(heights)):\n    print(heights[i] - blocks[i], \" \", heights[i])\n    if heights[i] - blocks[i] < 0:\n        print(\"impossible\")\n        break\n\nprint(\"maximum height\", heights[i] - blocks[i])\n"
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\\n') == '3'\nassert solution('8 2\\n8 3\\n5 7\\n') == 'impossible'\n\nprint(solution(stdin.strip()))\n\"\"\"\n\nn, k = list(map(int, input().split()))\n"
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\\n\") == \"3\\n\"\nprint(solution(\"100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\\n\"))\n\nassert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n1 4\\n\") == \"impossible\\n\"\nprint(solution(\"4 4\\n1 2\\n2 3\\n3 4\\n1 4\\n\"))\n\n\"\"\""
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n'''\n\nn, k = [int(c) for c in stdin.readline().split()]\nbounds = [tuple(map(int, stdin.readline().split())) for _ in range(k)]"
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\") == \"3\"\nassert solution(\"8 2\\n8 3\\n5 7\") == \"impossible\"\n\"\"\"\n\nimport collections\n\n\"\"\"\n\na[i]\nb[i]\n\nstdin = \"100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\"\n\nn, k = [int(i) for i in stdin.strip().split()]\n\na = [[int(i) for i in stdin.strip().split()][1:] for _ in range(k)]\nb = [[int(i) for i in stdin.strip().split()][1:] for _ in range(k)]\n\nans = 0\nfor i in range(k):\n    a_i = a[i]\n    b_i = b[i]\n    if a_i[0] > b_i[0]:\n        print(\"impossible\")\n        exit(0)\n    if a_i[0] == b_i[0] and a_i[1] <= b_i[1]:\n        print(1)\n        exit(0)\n    if a_i[0] < b_i[0]:\n        ans += b_i[1] - a_i[0] + 1\nprint(ans)\n\"\"\"\n\nn, k = [int(i) for i in stdin.strip().split()]\n\na = [[int(i) for i in stdin.strip().split()][1:] for _ in range(k)]\nb = [[int(i) for i in stdin.strip().split()][1:] for _ in range(k)]\n\nans = 0\nfor i in range(k):\n    a_i = a[i]\n    b_i = b[i]\n    if a_i[0] > b_i[0]:\n        print(\"impossible\")\n        exit(0)\n    if a_i[0] == b_i[0] and a_i[1] <= b_i[1]:\n        print(1)\n        exit(0)\n    if a_i[0] < b_i[0]:\n        ans += b_i[1] - a_i[0] + 1\nprint(ans)"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('120') == 5\n\"\"\""
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(21) == 5\nassert solution(51090942171709440000) == 21\nassert solution('120') == 5\n\"\"\""
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n\"\"\""
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"120\") == 5\nassert solution(\"51090942171709440000\") == 21\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('120') == 5\nassert solution('51090942171709440000') == 21\n\"\"\""
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(120) == 5\nassert solution(51090942171709440000) == 21\n\"\"\""
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n\nprint('Success')\n\n---------------------------------------------\n14. The Twelve Days of Christmas\nThe Twelve Days of Christmas is a repetitive song that contains twelve verses, each one describing the events of Christmas on the twelve day that it is intended to describe. The song is widely known and often sung in public.\n\nYour task is simple: given a year number, print the whole song in one line.\n\n-----Input-----\nThe input line contains the year number to which the song relates.\n\n-----Output-----\nPrint the song in one line.\n\n-----Examples-----\nSample Input 1:\n1954\nSample Output 1:\nOn the first day of Christmas my true love gave to me:\n    A partridge in a pear tree.\nOn the second day of Christmas my true love gave to me:\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the third day of Christmas my true love gave to me:\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the fourth day of Christmas my true love gave to me:\n    Four calling birds,\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the fifth day of Christmas my true love gave to me:\n    Five gold rings,\n    Four calling birds,\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the sixth day of Christmas my true love gave to me:\n    Six geese a-laying,\n    Five gold rings,\n    Four calling birds,\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the seventh day of Christmas my true love gave to me:\n    Seven swans a-swimming,\n    Six geese a-laying,\n    Five gold rings,\n    Four calling birds,\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the eighth day of Christmas my true love gave to me:\n    Eight maids a-milking,\n    Seven swans a-swimming,\n    Six geese a-laying,\n    Five gold rings,\n    Four calling birds,\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the ninth day of Christmas my true love gave to me:\n    Nine ladies dancing,\n    Eight maids a-milking,\n    Seven swans a-swimming,\n    Six geese a-laying,\n    Five gold rings,\n    Four calling birds,\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the tenth day of Christmas my true love gave to me:\n    Ten lords a-leaping,\n    Nine ladies dancing,\n    Eight maids a-milking,\n    Seven swans a-swimming,\n    Six geese a-laying,\n    Five gold rings,\n    Four calling birds,\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the eleventh day of Christmas my true love gave to me:\n    Eleven pipers piping,\n    Ten lords a-leaping,\n    Nine ladies dancing,\n    Eight maids a-milking,\n    Seven swans a-swimming,\n    Six geese a-laying,\n    Five gold rings,\n    Four calling birds,\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the twelfth day of Christmas my true love gave to me:\n    Twelve drummers drumming,\n    Eleven pipers piping,\n    Ten lords a-leaping,\n    Nine ladies dancing,\n    Eight maids a-milking,\n    Seven swans a-swimming,\n    Six geese a-laying,\n    Five gold rings,\n    Four calling birds,\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\n-----Input-----\nThe input is a number of year to which the song relates.\n\n-----Output-----\nPrint the song in one line.\n\n-----Examples-----\nSample Input 1:\n21\nSample Output 1:\nOn the first day of Christmas my true love gave to me:\n    A partridge in a pear tree.\nOn the second day of Christmas my true love gave to me:\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the third day of Christmas my true love gave to me:\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the fourth day of Christmas my true love gave to me:\n    Four calling birds,\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the fifth day of Christmas my true love gave to me:\n    Five gold rings,\n    Four calling birds,\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the sixth day of Christmas my true love gave to me:\n    Six geese a-laying,\n    Five gold rings,\n    Four calling birds,\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the seventh day of Christmas my true love gave to me:\n    Seven swans a-swimming,\n    Six geese a-laying,\n    Five gold rings,\n    Four calling birds,\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the eighth day of Christmas my true love gave to me:\n    Eight maids a-milking,\n    Seven swans a-swimming,\n    Six geese a-laying,\n    Five gold rings,\n    Four calling birds,\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the ninth day of Christmas my true love gave to me:\n    Nine ladies dancing,\n    Eight maids a-milking,\n    Seven swans a-swimming,\n    Six geese a-laying,\n    Five gold rings,\n    Four calling birds,\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the tenth day of Christmas my true love gave to me:\n    Ten lords a-leaping,\n    Nine ladies dancing,\n    Eight maids a-milking,\n    Seven swans a-swimming,\n    Six geese a-laying,\n    Five gold rings,\n    Four calling birds,\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the eleventh day of Christmas my true love gave to me:\n    Eleven pipers piping,\n    Ten lords a-leaping,\n    Nine ladies dancing,\n    Eight maids a-milking,\n    Seven swans a-swimming,\n    Six geese a-laying,\n    Five gold rings,\n    Four calling birds,\n    Three French hens,\n    Two turtle doves,\n    And a partridge in a pear tree.\nOn the twelfth day of Christmas my true love gave to me:\n    Twelve drummers drumming,\n    Eleven pipers piping,\n    Ten lords a-leaping,\n    Nine ladies dancing,\n    Eight maids a-milking,\n    Seven swans a-swimming,\n    Six geese a-laying,\n    Five gold rings,\n    Four calling birds,"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"120\") == \"5\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 1 2\\n\") == \"45\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 1\\n') == '1'\nassert solution('3 3 3\\n') == '6'\n\"\"\"\n\nfrom fractions import Fraction"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'\n\"\"\"\n\nimport numpy as np\nimport sys"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 2\\n3 3 3\") == \"45\\n\"\n\"\"\"\nimport itertools"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 1 2\\n3 3 3') == '45'\nassert solution('3 3 3\\n3 3 3') == '10'\n"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(int(input()))\nprint(solution(str(input())))\n"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 1 2\") == \"45\"\nassert solution(\"3 3 3\") == \"10\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 1 2\") == \"45\"\nassert solution(\"3 3 3\") == \"10\"\n\"\"\"\n\n\n\nimport sys\n"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 1 2\") == \"45\"\nassert solution(\"3 3 3\") == \"10\"\n\"\"\"\n\nn, m, k = map(int, input().split())"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'\n\"\"\"\n\nN, M, K = map(int, stdin.readline().split())\n"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\\n') == '18'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n5\\n') == '20'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n4\\n') == 'impossible'\n\"\"\""
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\\n') == '18'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n5\\n') == '20'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"18\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'impossible'\nassert solution('1\\n2\\n2\\n3\\n4') == '6'\n\"\"\""
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\") == \"18\"\nassert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n5\") == \"20\"\n\"\"\""
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\") == \"18\"\nassert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"20\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5\n3 1\n4 1\n5 9\n2 6\n5 3\n10\"\"\") == \"18\"\n\n\"\"\"\n5 3 1\n4 1\n5 9\n2 6\n5 3\n5\n\"\"\"\n\nassert solution(\"\"\"5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n\"\"\") == \"20\"\n\"\"\"\n5 1 3\n4 1\n5 9\n2 6\n5 3\n5\n\"\"\"\n\nassert solution(\"\"\"5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n\"\"\") == \"impossible\"\n\"\"\"\n5 1 3\n4 1\n5 9\n2 6\n5 3\n5\n\"\"\""
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10') == 20\nassert solution('5\\n1 1\\n2 1\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10') == 20\nassert solution('5\\n1 1\\n2 1\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10') == 20\n"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 5 10\\n7 8 2') == '3'"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 4 2\\n2 1 4 5') == '9'\nassert solution('3\\n-1 -1 -1\\n5 5 5') == '11'\n\"\"\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 5 10\\n7 8 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 5 10\\n7 8 2\") == \"3\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom math import inf\nfrom typing import Set\n\nfrom collections import defaultdict\nfrom collections.abc import Hashable\n"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 5\\n1 1 1\") == \"11\"\n\"\"\"\n\nimport sys\nimport heapq"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3\\n4 5 6\\n7 8 9\\n11 12 13\\n\") == \"9\\n\"\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 5 10\\n7 8 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 5 10\\n7 8 2\") == \"3\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 5 10\\n7 8 2\") == '3'\nassert solution(\"3\\n-1 -1 -1\\n5 5 5\\n10 10 10\") == '11'\nassert solution(\"4\\n1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\") == '8'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"110\\n011\") == 2\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"110\\n011\") == \"2\"\nassert solution(\"1000\\n1000\\n0000\\n0010\") == \"0\"\n\"\"\""
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n110\\n011') == '2'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 1\n110\n011''') == 2\nprint(solution(stdin), end='')\n"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"110\\n011\") == 2\n\"\"\""
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n110\\n011') == '2'\nassert solution('4 2\\n1000\\n1000\\n0000\\n0010') == '0'"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\n110\\n011') == '2'\nassert solution('4 2\\n1000\\n1000\\n0000\\n0010') == '0'\n\"\"\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('010') == '1'\n'''\n"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n110\\n011') == '2'\nassert solution('4 2\\n1000\\n1000\\n0000\\n0010') == '0'\n\"\"\""
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 2\\n2\") == \"1\"\nprint(\"Test 1 PASSED\")\nassert solution(\"3\\n1 3 2\\n2\") == \"1\"\nprint(\"Test 2 PASSED\")\nassert solution(\"3\\n1 3 2\\n2\") == \"1\"\nprint(\"Test 3 PASSED\")\n"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 3 2\\n2\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\\n3\") == \"1\\n\"\nassert solution(\"5\\n1 2 3 4 5\\n4\") == \"1\\n3\\n2\\n2\\n1\\n\"\n\"\"\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\\n2\\n\") == \"1\"\n\nassert solution(\"3\\n1 3 2\\n2\\n\") == \"1\"\n\nassert solution(\"3\\n3 1 2\\n2\\n\") == \"2\"\n\nassert solution(\"3\\n2 1 3\\n3\\n\") == \"1\"\n\nassert solution(\"3\\n3 1 2\\n3\\n\") == \"2\""
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 3\n3''') == '1'\nassert solution('''3\n1 3 2\n2''') == '5'\n'''\n\nsolution.py\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution([\"1 2 3\"]) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 2\\n2\") == \"5\"\nassert solution(\"3\\n1 3 2\\n3\") == \"1\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3\\n2\\n') == '1'\nassert solution('3\\n1 3 2\\n2\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 3 2') == '1'\nassert solution('3\\n1 3 2\\n2') == '5'\n\"\"\"\n\n\"\"\"\nWrong Answer\nInput: 3\n1 3 2\n3\nExpected Output:\n1\n\nInput: 3\n1 3 2\n2\nExpected Output:\n5\n\"\"\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n1 2 3\n3\"\"\") == '1'\n\"\"\"\n\nfrom collections import Counter\nfrom functools import lru_cache"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 100 20') == '19'\nassert solution('10 10 1') == '19'\n\"\"\""
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 100 20''') == '0'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n100 20\\n') == '0'\nassert solution('10\\n10 1\\n') == '19'\n\"\"\"\n\nn, r, p = [int(i) for i in input().split(' ')]"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 100 20\") == \"0\"\nassert solution(\"10 10 1\") == \"19\"\n\"\"\"\n\nimport math\n\nlines, compile_time, add_time = [int(i) for i in stdin.split()]\ncrash_time = (compile_time + add_time) * lines\n\nprint(math.ceil(crash_time / lines) - 1)\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('1 1000 1') == '19'\nassert solution('1 100 10') == '14'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 100 20') == '19'"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 100 20\") == \"19\"\nprint(solution(\"1 100 20\"))\n\"\"\"\n\nn, r, p = [int(x) for x in input().split()]"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 100 20\") == '19'\nassert solution(\"10 10 1\") == '19'\n\"\"\"\n\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 100 20\\n\") == \"0\"\nassert solution(\"10 10 1\\n\") == \"19\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 100 20') == '19'\nassert solution('10 10 1') == '19'\n\"\"\"\n\nn, r, p = [int(i) for i in stdin.split()]"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0''') == 'c'\nassert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0''') == 'SHIP IT'\nassert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0''') =='myfilec execd libe'\nassert solution('''4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0''') == 'SHIP IT'\nassert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0''') == 'SHIP IT'\n'''"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a,b,c,d\\n1\\nimport a\\na,b,c,d\\n1\\nimport c, d\\n2\\nimport c\\n2\\nimport d\") == \"a,b,c,d\\nSHIP IT\"\nassert solution(\"a,b,c,d\\n1\\nimport a\\n1\\nimport b\\n2\\nimport d\\n1\\nimport c\\n2\\nimport d\\nSHIP IT\") == \"a,b,d,c,d\\nSHIP IT\"\nassert solution(\"a,b,c,d\\n1\\nimport a,b\\n1\\nimport a\\nimport b\\n1\\nimport c\\nSHIP IT\") == \"a,b,d,c,d\\nSHIP IT\"\nassert solution(\"a,b,c,d\\n1\\nimport a\\n1\\nimport b\\n1\\nimport c\\nSHIP IT\") == \"SHIP IT\"\nassert solution(\"a,b,c,d\\n1\\nimport a\\n1\\nimport b\\n2\\nimport c\\n1\\nimport d\\nSHIP IT\") == \"SHIP IT\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c\\nd 0\\n\") == \"c\"\nassert solution(\"5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe\\nlibe 0\\n\") == \"SHIP IT\"\n\"\"\"\nimport collections"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a b c d') == 'c'\nassert solution('a 1') == 'SHIP IT'\nassert solution('a 1, b 1, c 1, d 1') == 'SHIP IT'\nassert solution('a 1, b 2, c 1, d 1') == 'SHIP IT'\nassert solution('a 1, b 1, c 2, d 1') == 'SHIP IT'\n"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\na\\nb\\nc\\nd\\n\\na\\n2\\nimport b, c\\nb\\n3\\nimport c\\nc\\n1\\nimport c\\nd\\n0\\n\") == \"c\"\n\"\"\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a b c d\") == \"c\"\n\n\"\"\"\nimport sys\nimport networkx as nx\nfrom typing import List\n\nsys.setrecursionlimit(10000)\n\nn = int(sys.stdin.readline())\n\ngraph = {}\n\nfor i in range(n):\n    graph[sys.stdin.readline().strip()] = []\n\nfor i in range(n):\n    for j in range(int(sys.stdin.readline())):\n        graph[sys.stdin.readline().strip()].append(sys.stdin.readline().strip())"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a\\nb\\nc\\nd') == 'a\\nb\\nc\\nd'\nassert solution('a\\nb\\nc\\nd\\ne') == 'SHIP IT'\nassert solution('a\\nb\\nc\\nd\\ne\\nf\\ng\\nh') == 'a\\nf\\ng\\nh'\n'''\n"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c\\nd 0') == 'c'\nassert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe') == 'SHIP IT'\n\"\"\""
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'SHIP IT'\nassert solution('a') == 'SHIP IT'\nassert solution('a,a') == 'SHIP IT'\nassert solution('a,a,a') == 'SHIP IT'\nassert solution('a,a,a,a') == 'SHIP IT'\n"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'SHIP IT'\nassert solution('a,1') == 'a'\nassert solution('a,1,import,b,2,import,c,1,import,c,1,import,d,0') == 'c'\nassert solution('a,1,import,b,2,import,c,1,import,c,1,import,d,0,import,b,2,import,c,1,import,c,1,import,d,0') == 'c'\nassert solution('a,1,import,b,2,import,c,1,import,c,1,import,d,0,import,b,2,import,c,1,import,c,1,import,d,0') == 'c'\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5+3+x\") == \"1\"\n\"\"\"\n\nimport string"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"x+3+x\") == \"2\"\nassert solution(\"x*3+x\") == \"6\"\nassert solution(\"x*(3+x)\") == \"7\"\nassert solution(\"x*(x+x)\") == \"4\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"x+3*x+4*(5+3*(2+x-2*x))\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"5+(3*(x+4))\") == \"1\"\nassert solution(\"x + 3 * (2 + x)\") == \"1\"\nassert solution(\"5 + 3 * (2 + x)\") == \"1\"\nassert solution(\"(5 + 3) * 2 + x\") == \"1\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n\nassert solution('5+3*x') == '2'\nassert solution('5+3*x+x') == '3'\nassert solution('5+3*x+x*x') == '4'"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\nassert solution('5+3*x') == '3'\nassert solution('5*x+3+x') == '9'\nassert solution('5*(3+x)+3+x') == '18'\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\nassert solution('5+3-2*x') == '1'\nassert solution('4+5-x') == '2'\nassert solution('4+5-x+7*x+4') == '1'\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\nassert solution('5+3*x') == '1'\nassert solution('x+3*x+4*(5+3*(2+x-2*x))') == '1'\n\"\"\""
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"5*3+x\") == \"9\"\nassert solution(\"5*3*x\") == \"9\"\nassert solution(\"5+3*x\") == \"9\"\nassert solution(\"5+3+x\") == \"1\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5+3+x\") == '1'\nassert solution(\"20+3+x\") == '2'\nassert solution(\"5*2-3*x\") == '3'\nassert solution(\"5*(2+3*x)\") == '-5'\nassert solution(\"(5+3)*x\") == '0'\n"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 15\\n5 20\") == \"yes\"\nassert solution(\"0 20\\n1 15\") == \"no\""
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10\\n1 15\\n0 20\") == \"yes\"\nassert solution(\"2 10\\n0 15\\n5 20\") == \"no\"\n\"\"\""
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 15\\n5 20') == 'yes'\nassert solution('1 15\\n0 20') == 'no'\nassert solution('1 15\\n5 20') == 'yes'\nassert solution('1 15\\n5 20\\n3 6') == 'yes'\nassert solution('1 15\\n5 20\\n3 6') == 'yes'\n"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10\\n1 15\\n0 20') == 'yes'\nassert solution('2 10\\n5 20\\n0 15') == 'no'\n"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10\\n0 15\\n5 20\") == \"yes\"\nassert solution(\"2 10\\n1 15\\n0 20\") == \"no\"\n\"\"\""
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10\\n1 15\\n0 20\") == \"yes\"\nassert solution(\"2 10\\n5 20\\n1 15\\n0 20\") == \"no\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10\\n1 15\\n0 20') == 'yes'\nassert solution('2 10\\n0 15\\n5 20') == 'no'\n\n\"\"\""
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 10\\n0 15\\n5 20') == 'yes'\nassert solution('2 10\\n1 15\\n0 20') == 'no'\n\"\"\"\n\na = input().split()\n\nn = int(a[0])\nt = int(a[1])\n\ntimes = []\n\nfor _ in range(n):\n    times.append(list(map(int, input().split())))\n\ntimes.sort()\n\nfor i in times:\n    print(i[0], i[1], sep=' ')"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 10\\n1 15\\n0 20') == 'yes'\n\"\"\"\n\nfrom typing import List\nimport unittest"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10\\n1 15\\n0 20\") == 'yes'\n\"\"\"\n\nimport unittest\nimport sys"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\") == \"0.25\"\nassert solution(\"4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\") == \"0\"\n\"\"\"\n\nfrom collections import deque\nimport re\nimport sys\n"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n') == '0.25'\nassert solution('4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\\n') == '0'\nprint('Test pass.')\n\n-----"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\") == '0.25'\nassert solution(\"4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\") == '0'\n\"\"\"\n\nfrom collections import namedtuple"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\") == \"0.25\"\nassert solution(\"4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\") == \"0\"\n\"\"\""
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\") == \"0.25\"\nassert solution(\"4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\") == \"0\"\n\n\"\"\"\n\nimport os\nimport sys\nimport logging\nimport random\nimport collections\nfrom io import BytesIO, IOBase\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n\") == '0.25'\n"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\") == \"0.25\"\nassert solution(\"4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\") == \"0\"\n\n\"\"\"\n\nfrom sys import stdin, stdout\nimport math\n"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\") == \"0.25\"\nassert solution(\"4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\") == \"0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 3\\n2\\n1 green\\n2 yellow\\n3 red\\n1 green') == '0.16666666666666666'\nassert solution('5 5 5\\n3\\n2 green\\n4 yellow\\n6 red\\n6 green') == '0'\n\"\"\""
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\") == \"0.25\"\nassert solution(\"4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\") == \"0\"\nprint('All tests passed.')\n\n\"\"\"\n\nimport sys\nfrom math import factorial"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n2\\n2\\n3\\n2\\n3\\n3\\n3\\n4\\n3\\n4\\n4\\n4\\n5\\n4\\n5\\n5\\n5\\n5\\n6\\n5\\n6\\n6\\n6\\n6\\n6\\n7\\n6\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n8\\n7\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n9\\n8\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3') == '3'\n"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3') == '3'\nassert solution('2 2\\n1 2\\n2 1') == 'inf'\n\n\"\"\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3\") == 3\n\"\"\""
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3\") == 3\nassert solution(\"3 2\\n1 3\\n1 2\") == 2\nassert solution(\"5 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3\") == inf\n\"\"\"\n\nn, m = map(int, input().split())\nroads = [list(map(int, input().split())) for _ in range(m)]\n\nG = {u: set() for u in range(1, n + 1)}\nfor u, v in roads:\n    G[u].add(v)\n    G[v].add(u)\n\nvisited = [0] * (n + 1)\nvisited[1] = 1\nres = 0\n"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n1 3\\n2 3\\n3 5\\n4 5\\n5 6\\n6 7\\n1 5\\n2 4\\n3 4\\n4 5\\n5 7\\n7 8\") == \"inf\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n3 4\") == \"1 2\\n3 4\"\n\nassert solution(\"1 3\\n2 3\") == \"1 3\\n2 3\"\n\nassert solution(\"1 4\\n2 4\") == \"1 4\\n2 4\"\n\nassert solution(\"1 2\\n3 4\") == \"1 2\\n3 4\"\n\nassert solution(\"1 3\\n2 3\") == \"1 3\\n2 3\""
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3\") == \"3\"\nassert solution(\"1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3\") == \"inf\"\n\n\"\"\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 2\") == 1\nassert solution(\"1 1\\n1 1\") == 0\nassert solution(\"1 1\\n2 2\") == 2\nassert solution(\"1 1\\n2 2\\n1 2\") == 0\nassert solution(\"1 1\\n2 2\\n3 3\") == 6\n"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6 8\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3''') == '3'\nassert solution('''6 8\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3''') == 'inf'\n\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1 2 3 4') == '4'\n"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2 3 4\\n') == '4'\nassert solution('12 3\\n2 3 4 5 6 7 4 7 8 8 12 12\\n') == '2'"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n1 2 3 4') == '4'\n"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1 2 3 4\\n') == '4'"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n1 2 3 4') == '4', 'Oops'\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n1 2 3 4') == '4'\nassert solution('12 3\\n2 3 4 5 6 7 4 7 8 8 12 12') == '2'\n\"\"\""
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n\") == \"4\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n\") == 4"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == '4'\n"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 4\n1 2 3 4\n''') == '4'\n\nassert solution('''12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2'\nprint('Passed all tests')"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\nhoose\nhose\nnose\nnoises\nnoise\n''') == 'hoose\\nnoises\\nnoise'\nassert solution('''4\nhose\nhoose\noose\nmoose\n''') == 'hose\\nmoose'\n\n'''\nMany of the approaches used here involve going through each word and comparing it to every other word in the dictionary. This will be very slow if there are millions of words in the dictionary. However, when there are only hundreds of words, these approaches are all reasonable and much faster than a naive approach.\n\nIf you are interested in exploring the differences between a Naive approach and a more optimized approach, I suggest that you look into a fastword.py file.\n\nAnother good approach is to build a trie and search for typos using a trie. This problem is also a good case of using a trie to build a dictionary.\n'''"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('hoose\\nhose\\nnoise\\nnoises\\nnoise') == 'hoose\\nnoises\\nnoise'\nassert solution('hoose\\nhose\\noose\\nnoise\\nnoises\\noise') == 'hoose\\nnoise\\nnoise'\nassert solution('hoose\\nhose\\noose\\nnoise\\noises\\noise') == 'noise\\nnoises\\noise'\nassert solution('hoose\\nhose\\noose\\nnoise\\noises\\noise') == 'hoose\\nnoise\\nnoise'\nassert solution('hoose\\nhose\\nnoise\\noises\\noise') == 'noise\\nnoises\\noise'\n"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nhoose\\nhose\\nnose\\nnoises\\nnoise\") == \"hoose\\nnoises\\nnoise\"\nassert solution(\"4\\nhose\\nhoose\\noose\\nmoose\") == \"hoose\\noose\\nmooose\"\n\nprint(solution(input().split(\"\\n\")))\n\n\"\"\""
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"hoose\", \"hose\", \"nose\", \"noises\", \"noise\") == \"hoose\\nnoises\\nnoise\"\nassert solution(\"hose\", \"hose\", \"nose\", \"noises\", \"noise\") == \"hose\\nnoises\\nnoise\"\nassert solution(\"hoose\", \"hoose\", \"oose\", \"moose\", \"noise\") == \"hoose\\nmoose\\nnoise\"\n\n-------------\nSample Output 1:\nhose\nnoises\nnoise\n\n-------------\nSample Input 2:\n4\nhose\nhoose\noose\nmoose\nSample Output 2:\nNO TYPOS\n\n-------------\nSample Output 2:\nNO TYPOS\n\"\"\""
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('hoose') == 'noise'\nassert solution('hose') == 'noise'\nassert solution('hoose') == 'noises'\nassert solution('hose') == 'noises'\n\nassert solution('hose') == 'noise'\n"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"hoose\\nhose\\nnoise\\nnoises\\nmoose\\n\") == \"noise\\nnoises\\nmoose\\n\"\nassert solution(\"hose\\nhoose\\nnoise\\nnoises\\nmoose\\n\") == \"hoose\\nnoise\\nnoises\\n\"\nassert solution(\"hoose\\nhose\\nnoise\\nnoises\\nmoose\\n\") == \"noise\\nnoises\\nmoose\\n\"\nassert solution(\"hose\\nhoose\\nnoise\\nnoises\\nmoose\\n\") == \"noise\\nnoises\\nmoose\\n\"\nassert solution(\"hoose\\nhose\\nnoise\\nnoises\\nmoose\\n\") == \"noise\\nnoises\\nmoose\\n\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"hoose\\nhose\\noose\\nmoose\\n\") == \"hoose\\nmoose\\n\"\nassert solution(\"hose\\nhoose\\noose\\nmoose\\n\") == \"moose\\n\"\nassert solution(\"hose\\nhose\\noose\\nmoose\\n\") == \"noose\\n\"\n\nassert solution(\"hoose\\nhose\\noose\\nmoose\\n\") == \"hoose\\nmoose\\n\"\nassert solution(\"hose\\nhose\\noose\\nmoose\\n\") == \"moose\\n\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\nhoose\\nhose\\nnose\\nnoises\\nnoise') == 'hoose\\nnoises\\nnoise'\nassert solution('4\\nhoose\\nhoose\\noose\\nmoose') == 'hoose\\nmoose'\n"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"hoose\") == \"hose\"\nassert solution(\"hose\") == \"hoose\"\nassert solution(\"noises\") == \"noise\"\nassert solution(\"noise\") == \"noise\"\nassert solution(\"moose\") == \"moose\"\n\nprint('Success')\n"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"hoose\\nhose\\nnoise\\nnoises\") == \"hoose\\nnoise\\nnoises\"\nassert solution(\"hoose\\nhose\\nnoise\\nnoises\\nnoise\") == \"hoose\\nnoise\\nnoises\\nnoise\""
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n3\\n\") == \"2\\n2\\n5\"\nassert solution(\"2 3\\n4\\n\") == \"0\\n16\\n8\"\nassert solution(\"3 3\\n5\\n\") == \"2\\n8\\n12\"\nassert solution(\"5 4\\n1\\n\") == \"0\\n13\\n8\"\nassert solution(\"3 5\\n4\\n\") == \"0\\n14\\n9\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n3\\n\") == '2\\n2\\n5'\nassert solution(\"2 3\\n4\\n\") == '0\\n16\\n8'\n\"\"\"\n\nfrom sys import stdin\n\n_, A, B, L = map(int, stdin.readline().split())\n"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n3\\n\") == \"2\\n2\\n5\"\nassert solution(\"1 1\\n1\\n\") == \"0\\n0\\n1\"\nassert solution(\"1 1\\n3\\n\") == \"2\\n2\\n5\"\n\"\"\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n3\") == \"2\\n2\\n5\"\nassert solution(\"2 3\\n4\") == \"0\\n16\\n8\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3) == 5\nassert solution(4) == 8\n\"\"\""
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n3\") == \"2\\n2\\n5\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n3\\n') == '2\\n2\\n5\\n'\nassert solution('2 3\\n4\\n') == '0\\n16\\n8\\n'\n"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n3\\n\") == \"2\\n2\\n5\"\nassert solution(\"1 1\\n5\\n\") == \"2\\n0\\n10\"\n\nprint(\"Test complete.\")"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n3') == '2'\n\nassert solution('2 3\\n4') == '0'\nassert solution('2 3\\n6') == '2'\nassert solution('2 3\\n8') == '5'\n"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n3\") == \"2\\n2\\n5\"\nassert solution(\"1 1\\n5\") == \"0\\n11\\n7\"\nassert solution(\"2 3\\n4\") == \"0\\n16\\n8\"\nassert solution(\"2 3\\n5\") == \"0\\n0\\n0\"\nassert solution(\"1 1\\n2\") == \"0\\n0\\n0\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1 1 1\") == \"1\"\nassert solution(\"1\\n2 2 1\") == \"1\"\nassert solution(\"2\\n50 45 45\") == \"68.52419365\"\n\"\"\"\n\n\nimport numpy as np\n"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n50 45 45') == '68.52419365'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '1\\n2'\n\"\"\"\nfrom typing import List, Optional\n\nfrom icontract import require, ensure, DBC\n\n\nclass Timing(DBC):\n    \"\"\"Timing.\"\"\"\n\n    # fmt: off\n    @require(lambda start: 0 <= start < 1000)\n    @require(lambda duration: duration >= 0)\n    # fmt: on\n    def __init__(self, start: int, duration: int) -> None:\n        self.start = start\n        self.duration = duration\n\n\nclass Schema(DBC):\n    \"\"\"Schema.\"\"\"\n\n    # fmt: off\n    @require(lambda timing: len(timing) == 3)\n    @require(lambda timing: timing[0] > 0)\n    @require(lambda timing: timing[1] >= 0)\n    @require(lambda timing: timing[2] >= 0)\n    # fmt: on\n    def __init__(self, timing: List[int]) -> None:\n        self.timing = [Timing(start, duration) for start, duration in zip(timing[0::2], timing[1::2])]\n\n    @require(lambda self: self.timing[0].start < self.timing[1].start)\n    @require(lambda self: self.timing[-1].start < self.timing[-2].start)\n    @require(lambda self: all(self.timing[i].duration < self.timing[i + 1].duration for i in range(len(self.timing) - 1)))\n    @require(lambda self: self.timing[-1].duration < self.timing[-2].duration)\n"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n50 45 45\") == \"68.52419365\"\n\"\"\"\n\nimport sys\n\nn = int(input())\n\ngreen_duration = []\nred_duration = []\n\nfor i in range(n-1):\n    g, r = map(int, input().split())\n    green_duration.append(g)\n    red_duration.append(r)\n\nminimum_time = sys.maxsize\n\nfor i in range(len(green_duration)):\n    minimum_time = min(minimum_time, green_duration[i] + red_duration[i])\n\nprint(minimum_time)\n"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n50 45 45') == '68.52419365'\nassert solution('1\\n40\\n30') == '41.4240836'\nassert solution('1\\n40\\n40') == '40.0'\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\"\"\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n1 1 1') == '4.00000'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n20 5 45\\n\") == \"11.943863\"\n\"\"\""
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n3 40 20\\n') == '3'\nassert solution('2\\n3 40 20\\n') == '24'\nassert solution('3\\n3 40 20\\n') == '24'\nassert solution('4\\n3 40 20\\n') == '36'\nassert solution('5\\n3 40 20\\n') == '50'\n"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n50 45 45\") == \"68.52419365\"\nassert solution(\"2\\n50 45 45\") == \"68.52419365\"\n\"\"\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 1 5\\n1 2\") == \"1\\n3\\n2\"\n\"\"\""
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2 3\") == '1\\n3\\n2\\n0\\n1\\n'\n\nassert solution(\"5 6 4 5\") == '1\\n3\\n2\\n1\\n1\\n0\\n1\\n2\\n2\\n1\\n0\\n'\n\nassert solution(\"5 4 3 4\") == '1\\n1\\n0\\n1\\n2\\n1\\n0\\n0\\n1\\n1\\n0\\n0\\n0\\n0\\n'\n\nassert solution(\"5 6 1 3\") == '1\\n3\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n2\\n2\\n2\\n2\\n'\n\nassert solution(\"5 6 1 5\") == '1\\n3\\n2\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n0\\n1\\n'"
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2 3\") == \"1 1 0 2\"\n\n\"\"\"\n\nimport sys\n\nN, K, B, M = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 1 5\\n1 2\\n') == '1\\n3\\n2'\nassert solution('3 4 2 3\\n1 3 1\\n') == '1\\n1\\n0\\n2'\n"
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 1 6\", \"1 2 3 4\") == \"1\\n3\\n2\\n0\\n2\"\nassert solution(\"5 3 1 5\", \"1 2 3 4 5\") == \"1\\n3\\n2\\n0\\n2\"\nassert solution(\"6 4 1 6\", \"1 2 3 4 5 6\") == \"1\\n3\\n2\\n0\\n2\"\n\n\"\"\"\n\nfrom random import randint\n"
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 3 1 5\n1 2\n''') == '''1\n3\n2\n'''\nassert solution('''3 4 2 3\n1 3 1\n''') == '''1\n1\n0\n2\n'''\n"
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 2 3\\n1 3 1\") == \"1\\n1\\n0\\n2\"\nassert solution(\"4 4 2 3\\n1 3 1\") == \"1\\n1\\n0\\n2\"\nassert solution(\"5 4 2 3\\n1 3 1\") == \"1\\n1\\n0\\n2\"\n\"\"\""
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 1 5\\n1 2\") == \"1\\n3\\n2\"\nassert solution(\"3 4 2 3\\n1 3 1\") == \"1\\n1\\n0\\n2\"\n\nfrom functools import lru_cache"
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 5\\n1 2\") == \"1\\n3\\n2\"\nassert solution(\"3 4 2 3\\n1 3 1\") == \"1\\n1\\n0\\n2\"\nassert solution(\"5 4 2 3\\n1 3 1\") == \"1\\n1\\n0\\n2\"\n\"\"\"\n\nfrom sys import stdin\nfrom typing import List\n"
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 1 3 2\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n1 1\") == \"3\"\nassert solution(\"5 3\\n2 2 3 2 2\") == \"2\"\n\"\"\"\n\nimport math\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\ncolors = list(map(int, sys.stdin.readline().split()))\nl = 1\nfor i in range(1, len(colors)):\n    if colors[i] == colors[i - 1]:\n        l += 1\n    else:\n        l = 1\nprint(max(l, k))\n"
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n3') == '2'\nassert solution('1 2\\n1 2\\n3 3\\n2 2\\n5 5\\n3') == '3'\nassert solution('1 1\\n1 1\\n3 3\\n2 2\\n5 5\\n3') == '1'\nassert solution('1 2\\n1 2\\n3 3\\n2 2\\n5 5\\n3') == '1'\nassert solution('1 1\\n1 1\\n1 1\\n3 3\\n2 2\\n5 5\\n3') == '1'\n"
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '2'\nassert solution('1 2 2 3') == '2'\n"
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n2 2') == '2'\nassert solution('1 2\\n2 1') == '2'\nassert solution('1 3\\n2 3') == '3'\nassert solution('1 1\\n1 2') == '1'\nassert solution('1 2\\n2 3') == '2'\n\"\"\""
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5\\n1 1') == '3'\nassert solution('5 3\\n2 2 3 2 2') == '2'\nassert solution('5 2\\n1 1 1 1 1') == '0'\nassert solution('4 3\\n1 2 1 2') == '0'\nassert solution('4 2\\n1 1 1 1') == '0'\n\nimport unittest\n\nclass Test2021Jan27(unittest.TestCase):\n    def test_solution(self):\n        pass"
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n1 1\") == \"3\"\nassert solution(\"5 3\\n2 2 3 2 2\") == \"2\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 5\n1 1\n''') == 3\nassert solution('''5 3\n2 2 3 2 2''') == 2\n\n\"\"\"\nfrom typing import Tuple"
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n1 1\") == \"3\"\nassert solution(\"5 3\\n2 2 3 2 2\") == \"2\"\n\"\"\"\n\nN, K = input().split()\nN = int(N)\nK = int(K)\n\narr = input().split()\n\nprint(K * (N - K + 1))\n"
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3') == '0'\nassert solution('1 1') == '0'\nassert solution('5 3') == '1'\nassert solution('1 1 2 2 2') == '2'\nassert solution('1 1 1 2 2 2') == '0'\n"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n100 100\\n50 50') == '50'\nassert solution('2\\n100 100\\n50 50') == '50'\n\"\"\"\n\n\n\"\"\"\nhttps://www.hackerrank.com/challenges/find-second-maximum-number-in-a-list/problem\nFind Second Maximum Number in a List\n\nGiven five positive integers, find the minimum and second maximum numbers, and the numbers on those positions.\n\nExample\n\nFor inputArray = [3, 6, 1, 10, 5], the output should be\nfindSecondMaximum(inputArray) = [6, 1, 10].\n\nThe minimum number is 1, and the second maximum number is 10.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer inputArray\n\nThe input array of positive integers.\n\nGuaranteed constraints:\n5 \u2264 inputArray.length \u2264 10,\n1 \u2264 inputArray[i] \u2264 100.\n\n[output] array.integer\n\nThe output array of two elements: the minimum and the second maximum numbers.\n\"\"\"\n\n\n\"\"\"\nhttps://www.hackerrank.com/challenges/py-check-strict-superset/problem\nCheck Strict Superset\n\nYou are given a set A and N other sets. \nYour job is to find whether set A is a strict superset of each of the N sets.\n\nPrint True, if A is a strict superset of each of the N sets. Otherwise, print False.\n\nA strict superset has at least one element that does not exist in its subset.\n\nExample\n\nSet (a) is a strict superset of set(b).\nSet (a) is not a strict superset of set(c).\nSet (a) is not a strict superset of set(d).\nSet (e) is not a strict superset of set(f).\nInput Format\n\nThe first line contains the space separated elements of set(a). \nThe second line contains integer, the number of other sets. \nThe next  lines contains the space separated elements of the other sets.\n\nConstraints\n\n\nEach element in the set(a) occurs only once.\nOutput Format\n\nPrint True if set(a) is a strict superset of all other  sets. Otherwise, print False.\n\nSample Input 0\n\n1 2 3 4 5 6 7 8 9 10 11 12 23 45 84 78\n2\n1 2 3 4 5\n100 11 12\nSample Output 0\n\nFalse\nExplanation 0\n\nSet (a) is the strict superset of the set(b). But set(c) is not a strict superset of set(a), because 100 is not in set(a).\n\"\"\"\n\n\n\"\"\"\nhttps://www.hackerrank.com/challenges/py-check-strict-superset/problem\nCheck Strict Superset\n\nYou are given a set and  other sets. \nYour job is to find whether set  is a strict superset of each of the  sets.\n\nPrint True, if set  is a strict superset of each of the  sets. Otherwise, print False.\n\nA strict superset has at least one element that does not exist in its subset.\n\nExample\n\nSet (a) is a strict superset of set(b).\nSet (a) is not a strict superset of set(c).\nSet (e) is not a strict superset of set(f).\nInput Format\n\nThe first line contains the space separated elements of set(a). \nThe second line contains integer, the number of other sets. \nThe next  lines contains the space separated elements of the other sets.\n\nConstraints\n\n\nEach element in the set(a) occurs only once.\nOutput Format\n\nPrint True, if set(a) is a strict superset of all other  sets. Otherwise, print False.\n\nSample Input 0\n\n1 2 3 4 5 6 7 8 9 10 11 12 23 45 84 78\n2\n1 2 3 4 5\n100 11 12\nSample Output 0\n\nFalse\nExplanation 0\n\nSet (a) is not a strict superset of the set(b), because 100 is not in set(b).\n\"\"\"\n\n\n\"\"\"\nhttps://www.hackerrank.com/challenges/finding-the-percentage/problem\nFinding the Percentage\n\nYou have a record of N students. Each record contains the student's name, and their percent marks in Maths, Physics and Chemistry. \nThe marks can be floating values. The user enters some integer  followed by the names and marks for N students. You are required to save the record in a dictionary data type. The user then enters a student's name. Output the average percentage marks obtained by that student, correct to two decimal places.\n\nInput Format\n\nThe first line contains the integer, the number of students. The next  lines contains the name and marks obtained by that student separated by a space. The final line contains the name of a particular student previously listed.\n\nConstraints\n\n2 <= N <= 10\n0 <= Marks, <= 100\n\nOutput Format\n\nPrint one line: The average of the marks obtained by the particular student correct to 2 decimal places.\n\nSample Input 0\n\n3\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\nSample Output 0\n\n56.00\nExplanation 0\n\nMarks    Marks    Marks\n---------------------------------\nName       Name       Name\n---------------------------------\nKrishna   67        68        69\nArjun     70        98        63\nMalika    52        56        60\nMalika    There are 3 students in this class whose name is Malika. \nTheir average percentage marks are (52+56+60)/3 = 56.00\n\nSample Input 1\n\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\nHarsh\nSample Output 1\n\n26.50\n\"\"\"\n\n\n\"\"\"\nhttps://www.hackerrank.com/challenges/alternating-characters/problem\nAlternating Characters\n\nGiven a string, find the length of the longest substring in it with alternating characters.\n\nExample\n\nFor inputString = \"0110202\", the output should be\nalternatingCharacters(inputString) = 4.\n\nThe longest substring with alternating characters is \"010202\", which has length = 4.\n\"\"\"\n\n\n\"\"\"\nhttps://www.hackerrank.com/challenges/grading/problem\nGrading Students\n\nYou have a record of N students. Each record contains the student's name, and their percent marks in Maths, Physics and Chemistry. \nThe marks can be floating values. The user enters some integer  followed by the names and marks obtained by each student. You are required to save the record in a dictionary data type. The user then enters"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n\") == \"50\\n25\"\nassert solution(\"0\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n\") == \"50\\n25\"\nassert solution(\"0\\n2\\n4\\n6\\n8\\n10\\n12\\n14\\n16\\n18\\n20\\n\") == \"50\\n25\"\n\"\"\"\n\n\n\"\"\"\nThe main solution is the 'N' - Fibonacci sequence.\n\nThe sum of the first 'N' Fibonacci numbers is\n    sum(F_n) = F_0 + F_1 +... + F_n = F_n (1)\n\nThe probability of success of the 'n'th mission is equal to\n    P_n = F_n / F_{n-1} = (F_n + F_{n-1}) / F_n\n\nThe probability of success of the 'n-1'th mission is equal to\n    P_{n-1} = F_{n-1} / F_n = F_{n-1} / (F_n + F_{n-1}) = F_{n-1} / (2 * F_n) = F_{n-1} / F_n = 2 * P_n\n\nAnd the probability of success of the 'n-2'th mission is equal to\n    P_{n-2} = F_{n-2} / F_{n-1} = F_{n-2} / (F_n + F_{n-1}) = F_{n-2} / (2 * F_n) = F_{n-2} / F_n = 2 * P_{n-1}\n\nSo the probability of success of the 'n-1'th mission is the sum of the probabilities of the 'n-1', 'n-2' and 'n' missions.\n\nThis solution has the advantage that it doesn't need to calculate the 'n'th Fibonacci number, which makes it a lot faster.\n\"\"\""
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n100 100\\n50 50\") == \"50\"\nassert solution(\"2\\n0 50\\n50 0\") == \"25\"\nprint('all tests passed.')\n\n-----Solution-----\n"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n100 100\\n50 50') == '50'\nassert solution('2\\n100 100\\n50 50') == '50'\n\"\"\"\n\nimport sys\n\nn = int(input())\n\nres = 0\n\nfor _ in range(n):\n    a, b = [int(i) for i in input().split()]\n    if a < b:\n        a, b = b, a\n    res += a * (a - 1) * (b - 1)\n\nprint(res / (n * (n + 1) * (n + 2) / 6))"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n100 100\\n50 50\\n') == '50'\nassert solution('2\\n0 50\\n50 0\\n') == '25'\n\"\"\"\n\n\nfrom fractions import Fraction\nfrom functools import reduce\nfrom math import gcd\n"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n100 100\\n50 50') == '50'\n\"\"\"\n\nn = int(input())\n\nmatrix = []\nfor i in range(n):\n    matrix.append([int(s) for s in input().split()])"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n100 100\\n50 50') == '50'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 100\") == \"100\"\nassert solution(\"50 50\") == \"50\"\nassert solution(\"100 100\\n0 50\") == \"50\"\n\nassert solution(\"100 100\\n100 100\") == \"100\"\nassert solution(\"50 50\\n100 100\") == \"100\"\n"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 100\\n50 50\") == \"50\"\nassert solution(\"0 50\\n50 0\") == \"25\"\n\"\"\"\n\nfrom math import prod"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"2\n100\n200\"\"\") == \"160\"\nassert solution(\"\"\"3\n100\n200\n2010\"\"\") == \"250\"\n\"\"\""
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n100\\n200') == '160'\nassert solution('3\\n100\\n200\\n2010') == '250'\n\n----\n\nIn Delft there are a number of bridges that are still being operated by a human, known as the bridge operator. One such bridge operator will soon retire, hence there is the need for a replacement. The Bridge And Poker Committee has decided to use a computer program to automatically open and close the bridge, eliminating the need for human interaction.\n\nHowever, the computer program still needs to be written. The requirements for this project are as follows:\n - No boat may be forced to wait for more than $30$ minutes.\n - The amount of time during which the bridge is unavailable to road traffic must be as small as possible while still satisfying requirement 1.\n\nIt takes $60$ seconds to raise or lower the bridge. During this time the bridge is not available to either road traffic or water traffic.\n\nBoats arrive at the bridge at predictable times. It takes $20$ seconds for a boat to sail through the bridge, assuming the bridge is already fully raised.\n\nIf the bridge is not fully raised when a boat arrives, the boat must wait. If there are boats waiting when the bridge becomes fully raised, these boats pass through the bridge one-by-one, which takes $20$ seconds per boat. The bridge must remain fully raised as long as there are still boats sailing through! As soon as all boats have passed, the bridge may be lowered. But it might be more efficient to keep the bridge raised for a little while longer if the next boat is soon to arrive.\n\nGiven the arrival times of all boats, operate the bridge such that all boats can pass through without any boat waiting longer than $30$ minutes. What is the total amount of time during which the bridge is unavailable to road traffic?\n\n-----Input-----\nThe first line contains an integer $N$, the number of boats that must pass the bridge ($1 \\leq N \\leq 4000$).\n\nThen follow $N$ lines, each containing an integer $T_ i$, the time at which boat $i$ will arrive at the bridge in seconds ($60 \\leq T_ i \\leq 10^5$).\n\nBoats are sorted by increasing time of arrival, and never arrive within $20$ seconds of each other ($i < j$ implies $T_ i + 20 \\leq T_ j$).\n\n-----Output-----\nWrite one line with an integer, the total number of seconds during which the bridge must be unavailable for road traffic in order for all boats to pass the bridge.\n\n-----Examples-----\nSample Input 1:\n2\n100\n200\nSample Output 1:\n160\n\nSample Input 2:\n3\n100\n200\n2010\nSample Output 2:\n250\n\n-----\n"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n100\\n200') == '160'\nassert solution('3\\n100\\n200\\n2010') == '250'\n\"\"\"\n\nfrom typing import List, Dict\n\nimport math\n\nfrom src.main.classes import BridgAndPoker\n\n\nclass Solution:\n    \"\"\"\n    This solution uses the concept of the latest arrival time and the sum of the time it took for each boat to cross the bridge,\n    which in theory should be within a few minutes of the time it took for the boat to cross the bridge, thus allowing\n    for more efficient use of the bridge.\n\n    The time is the sum of all the times it took for each boat to cross the bridge, and then the time it took for the last\n    boat to cross the bridge, assuming that all the other boats had crossed the bridge at that time. If all of the\n    other boats had arrived after that time, then the time it took for the last boat to cross the bridge would be 0,\n    hence it is added to the total time.\n\n    The bridge is considered fully raised if all the other boats have arrived after the time it took for the last boat\n    to cross the bridge, which is the latest time at which the bridge was fully raised.\n\n    It takes a minimum of 60 seconds to raise or lower the bridge, so there is a maximum amount of time that the bridge can\n    be unavailable to road traffic for each boat. The total number of seconds for which the bridge is unavailable to road\n    traffic is the time it took for the last boat to cross the bridge, and the time it took for the last boat to\n    cross the bridge, assuming that all the other boats had arrived after that time.\n\n    Time complexity: O(N)\n    Space complexity: O(1)\n    \"\"\"\n\n    def solve(self, _input: List[int]) -> int:\n        # Construct the solution object\n        bridge = BridgAndPoker(_input)\n\n        # Get the latest arrival time for the first boat\n        latest_arrival_time = _input[0]\n\n        # Calculate the time it took for the first boat to cross the bridge\n        time_taken_for_first_boat = latest_arrival_time - 60\n\n        # Get the sum of the time it took for each boat to cross the bridge\n        time_taken_for_other_boats = sum(_input[1:])\n\n        # Get the amount of time it took for the last boat to cross the bridge\n        time_taken_for_last_boat = 0\n        if bridge.all_other_boats_arrived_after_time(latest_arrival_time):\n            time_taken_for_last_boat = 0\n        else:\n            time_taken_for_last_boat = bridge.get_time_for_last_boat_to_cross_bridge(latest_arrival_time)\n\n        # Get the total amount of time it took for all the boats to cross the bridge\n        total_time = time_taken_for_other_boats + time_taken_for_last_boat\n\n        return total_time\n"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open('test_01').read()) == '160'\nassert solution(open('test_02').read()) == '250'\n\nprint(solution(open('input').read()))\n\n\"\"\"\n\n\nimport heapq"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n100\\n200\") == \"160\"\n\n-----Solution-----\n\"\"\"\n\nimport heapq\n\nnum_of_boats = int(stdin.readline())\ntime_list = sorted([int(i) for i in stdin.readline().split()])\n\nq = []\nfor t in time_list:\n    heapq.heappush(q, t)\n\nheapq.heapify(q)\n\nwait_time = 0\ncounter = 0\nwhile len(q)!= 0:\n    t = heapq.heappop(q)\n    wait_time += t\n    counter += 1\n    for _ in range(num_of_boats):\n        if len(q) > 0:\n            heapq.heappush(q, heapq.heappop(q) + 20)\n\nprint(wait_time - 20 * num_of_boats)\n"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n100\\n200') == '160'\nassert solution('3\\n100\\n200\\n2010') == '250'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n100\n200\n\"\"\") == \"160\"\n\nassert solution(\"\"\"\n3\n100\n200\n2010\n\"\"\") == \"250\"\n\nassert solution(\"\"\"\n4\n100\n200\n500\n1000\n\"\"\") == \"1500\"\n\nassert solution(\"\"\"\n1\n100\n\"\"\") == \"100\"\n\nassert solution(\"\"\"\n1\n10\n\"\"\") == \"10\""
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n100\\n200') == '160'\n"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n100\\n200') == '160'\nassert solution('3\\n100\\n200\\n2010') == '250'\n\"\"\""
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n100\\n200') == '160'\nassert solution('3\\n100\\n200\\n2010') == '250'\n\"\"\""
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n0 1 1\\n2 3 1\\n\") == \"2\"\nassert solution(\"5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\\n\") == \"0\"\n\n\"\"\"\n\nfrom sys import stdin\n\nn, m = map(int, stdin.readline().strip().split())\n\npays = [list(map(int, line.strip().split())) for line in stdin.readlines()]\n\n\"\"\"\nn, m = 4, 2\npays = [[0, 1, 1], [2, 3, 1]]\n\"\"\"\n\nbill = {}\nfor p in pays:\n    payer = p[0]\n    payee = p[1]\n    amount = p[2]\n\n    if payer not in bill:\n        bill[payer] = 0\n    if payee not in bill:\n        bill[payee] = 0\n\n    bill[payer] += amount\n    bill[payee] -= amount\n\nprint(min(bill.values()))\n"
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n0 1 1\\n2 3 1\\n2 3 1\") == \"2\"\nassert solution(\"5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\") == \"0\"\n\"\"\"\n\nM, N = map(int, input().split())"
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n0 1 1\\n2 3 1\") == \"2\"\n\"\"\"\n\nfrom collections import deque, defaultdict\nfrom itertools import combinations\nimport sys"
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n0 0\\n1 3') == '0'\nassert solution('1 3\\n0 0\\n1 2') == '2'\nassert solution('1 3\\n0 2\\n1 2') == '2'\nassert solution('1 3\\n0 2\\n1 2\\n1 2') == '1'\n"
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5 2\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\\n') == '0'\n"
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n0 1 1\\n2 3 1\\n2 3 3\\n3 4 3\\n4 0 3\\n\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n0 1 1\\n2 3 1\\n') == '2'\nassert solution('5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\\n') == '0'\n\n\"\"\"\n\nimport sys\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport networkx as nx\nfrom scipy.special import comb\nfrom itertools import combinations\n"
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n0 1 1\\n2 3 1\\n2 3 1\\n3 4 1\\n4 0 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n0 1 1\\n2 3 1\\n3 4 1\\n4 0 3') == '2'\nassert solution('5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3') == '0'\n\n\"\"\"\nimport sys\nimport io\n"
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(...)\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n3 3 2 1\\n3 3 3\") == \"1 1\\n1 2\\n2 3 4\"\nassert solution(\"4 2\\n3 3 2 2\\n6 3\") == \"-\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('123') == '123'\nassert solution('100') == '1'\n\n\"\"\"\nfrom math import ceil\nfrom typing import List\n"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n3 3 2 1\\n3 3 3\\n') == '1 1\\n1 2\\n2 3 4'\nassert solution('4 2\\n3 3 2 2\\n6 3\\n') == '-1'\nassert solution('2 3\\n3 2\\n') == '1 1'\nassert solution('2 2\\n3\\n') == '-1'\nassert solution('3 3\\n2 2\\n') == '1 1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n3 3 2 1\\n3 3 3\\n\") == '1 1\\n1 2\\n2 3 4\\n'\nassert solution(\"4 2\\n3 3 2 2\\n6 3\\n\") == '-1\\n'\nassert solution(\"3 2\\n5 3\\n4 3\\n\") == '-1\\n'\n\n\"\"\""
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n3 3 2 1\\n3 3 3\") == \"1 1\\n1 2\\n2 3 4\"\nassert solution(\"4 2\\n3 3 2 2\\n6 3\") == \"-1\"\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n3 3 2 1\\n3 3 3\") == \"1 1\\n1 2\\n2 3 4\"\nassert solution(\"4 2\\n3 3 2 2\\n6 3\") == \"-1\"\nassert solution(\"4 3\\n3 3 2 1\\n3 3 3\") == \"1 1\\n1 2\\n2 3 4\"\nassert solution(\"4 2\\n3 3 2 2\\n6 3\") == \"-1\"\nassert solution(\"4 3\\n3 3 2 1\\n3 3 3\") == \"1 1\\n1 2\\n2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n3 3 2 2\\n6 3\") == -1\n\"\"\"\n\n\"\"\"\n\u984c\u76ee\u63cf\u8ff0\n\u4e00\u500b\u9577\u5ea6\u70ba $n$ \u7684\u6bd4\u8f03\u5408\u6cd5\u7684\u67f1\u72c0\u5716\u3002 \u6bd4\u8f03\u5408\u6cd5\u7684\u67f1\u72c0\u5716\u70ba\u67f1\u72c0\u5716\u4e2d\u7684\u6bcf\u4e00\u884c\u5177\u6709\u76f8\u540c\u7684\u9577\u5ea6\uff0c\u4e14\u6bcf\u4e00\u500b\u9ede\u7684\u9ad8\u5ea6\u503c\u90fd\u6709\u76f8\u540c\u7684\u503c\u3002\n\u8acb\u5c07\u5176\u8a08\u7b97\u70ba\u67f1\u72c0\u5716\u7684\u6700\u5c0f\u898f\u6a21\uff0c\u8981\u4f7f\u6bcf\u4e00\u5217\u548c\u70ba\u4e00\u5b9a\u7684\u503c\u3002\n\n-----Input-----\n\u8f38\u5165\u7684\u6a94\u6848\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u500b\u6574\u6578 $n$\uff0c\u8868\u793a\u67f1\u72c0\u5716\u7684\u9577\u5ea6\u3002\n\u63a5\u4e0b\u4f86\u6709 $n$ \u884c\uff0c\u6bcf\u4e00\u884c\u5305\u542b $n$ \u4e32\u6574\u6578\uff0c\u4ee3\u8868\u67f1\u72c0\u5716\u7684\u6bcf\u4e00\u884c\u3002\u6bcf\u4e00\u500b\u6574\u6578\u503c\u4ee3\u8868\u67f1\u72c0\u5716\u4e2d\u7684\u67f1\u5b50\u9ad8\u5ea6\u3002\n\n-----Output-----\n\u8f38\u51fa\u5171 $n$ \u884c\uff0c\u6bcf\u4e00\u884c\u6bcf\u4e00\u500b\u6574\u6578\uff0c\u4ee3\u8868\u67f1\u72c0\u5716\u7684\u6700\u5c0f\u898f\u6a21\u3002\n\u5982\u679c\u7121\u6cd5\u7522\u751f\u67f1\u72c0\u5716\u5247\u8f38\u51fa -1\u3002\n\n-----Examples-----\nSample Input 1:\n3\n1 1 1\n2 3 2\n3 3 3\nSample Output 1:\n1 1\n2 2 2\n3 3 3\n\nSample Input 2:\n2\n4 4\n1 2 3 4\n6 6\nSample Output 2:\n-1\n\nSample Input 3:\n3\n4 4\n1 2 3 4\n5 5\n1 2 3 4\n6 6\nSample Output 3:\n-1\n\nSample Input 4:\n5\n5 4\n1 2 3 4 5\n6 6\n1 2 3 4 5\n6 6\n1 2 3 4 5\n6 6\nSample Output 4:\n4 2\n1 2 1\n2 3 2\n1 3 3\n4 5 4\n1 4 4\n2 4 4\n3 5 5\n1 5 5\n\"\"\"\n\nimport sys\n\n\"\"\"\n\u6839\u64da\u9019\u984c\u7684\u610f\u601d\uff0c\u82e5\u9577\u5ea6\u70ban\uff0c\n\u6240\u6709\u67f1\u5b50\u7684\u9577\u5ea6\u4e00\u5b9a\u662f\u4e00\u6a23\u7684\uff0c\n\u6bcf\u4e00\u5217\u7684\u9ad8\u5ea6\u503c\u4e00\u5b9a\u662f\u4e00\u6a23\u7684\uff0c\n\n\u5217\u5148\u5f9e\u5de6\u5230\u53f3\u627e\u6bd4\u8f03\u5927\u7684\u67f1\u5b50\uff0c\n\u6700\u5927\u7684\u67f1\u5b50\u653e\u5230\u7b2c\u4e00\u500b\u4f4d\u7f6e\uff0c\n\u7b2c\u4e8c\u5927\u7684\u67f1\u5b50\u653e\u5230\u7b2c\u4e8c\u500b\u4f4d\u7f6e\uff0c\n\n\u9577\u5ea6\u70ban\uff0c\u6bcf\u4e00\u5217\u7684\u9577\u5ea6\u70ban\uff0c\n\u6bcf\u4e00\u5217\u6700\u5927\u7684\u9ad8\u5ea6\u70ban\uff0c\n\n\u6240\u4ee5\u6700\u5c11\u8981\u7522\u751fn*n\u7684\u67f1\u72c0\u5716\uff0c\n\u4f46\u662f\u6709\u53ef\u80fd\u4e0d\u5408\u6cd5\uff0c\u56e0\u70ba\u6700\u5927\u503c\u6703\u5c0d\u7b49\uff0c\n\u6240\u4ee5\u5148\u5224\u65b7\u6700\u5927\u503c\u662f\u5426\u662fn\uff0c\n\n\u5982\u679cn < max\uff0c\n\u5247\u7121\u6cd5\u7522\u751f\u67f1\u72c0\u5716\uff0c\u8f38\u51fa-1\n\n\u4f46\u662f\u5982\u679cn == max\uff0c\n\u5247\u7121\u6cd5\u7522\u751f\u67f1\u72c0\u5716\uff0c\u8f38\u51fa-1\n\n\u5148\u5f9e\u5de6\u5230\u53f3\u627e\u6bd4\u8f03\u5927\u7684\u67f1\u5b50\uff0c\n\u6700\u5927\u7684\u67f1\u5b50\u653e\u5230\u7b2c\u4e00\u500b\u4f4d\u7f6e\uff0c\n\u7b2c\u4e8c\u5927\u7684\u67f1\u5b50\u653e\u5230\u7b2c\u4e8c\u500b\u4f4d\u7f6e\uff0c\n\n\u5f9e\u5de6\u5230\u53f3\u627e\u6bd4\u8f03\u5927\u7684\u67f1\u5b50\uff0c\n\u6700\u5927\u7684\u67f1\u5b50\u653e\u5230\u7b2c\u4e8c\u500b\u4f4d\u7f6e\uff0c\n\u7b2c\u4e00\u5927\u7684\u67f1\u5b50\u653e\u5230\u7b2c\u4e00\u500b\u4f4d\u7f6e\uff0c\n\n\u6bcf\u6b21\u5728\u7b2c\u4e00\u500b\u4f4d\u7f6e\u7684\u67f1\u5b50\u4e0a\u7522\u751f\u65b0\u7684\u67f1\u5b50\uff0c\n\u67f1\u5b50\u500b\u6578+1\uff0c\n\n\u6bcf\u6b21\u7522\u751f\u65b0\u7684\u67f1\u5b50\uff0c\n\u6700\u5927\u7684\u67f1\u5b50\u653e\u5230\u7b2c\u4e00\u500b\u4f4d\u7f6e\uff0c\n\u7b2c\u4e8c\u5927\u7684\u67f1\u5b50\u653e\u5230\u7b2c\u4e8c\u500b\u4f4d\u7f6e\uff0c\n\"\"\"\n\nn, max_length = map(int, sys.stdin.readline().split())\n"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '1 1'\nassert solution('1 2 3 4 5') == '-1'\nassert solution('1 2 3 4 5 6') == '1 2'\nassert solution('1 2 3 4 5 6 7') == '-1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(open(\"ex1.txt\", \"r\").read()) == \"1 1\"\nassert solution(open(\"ex2.txt\", \"r\").read()) == \"1 2\"\nassert solution(open(\"ex3.txt\", \"r\").read()) == \"-1\"\nassert solution(open(\"ex4.txt\", \"r\").read()) == \"3 3 3\"\nassert solution(open(\"ex5.txt\", \"r\").read()) == \"5 3 3 2\"\n\"\"\"\nimport math\n\nn, m = map(int, input().split())\nblock_height = list(map(int, input().split()))\nbuilding_height = list(map(int, input().split()))\n\nanswer = []\nfor i in range(m):\n    cnt = 0\n    for j in range(n):\n        if block_height[j] >= building_height[i]:\n            cnt += 1\n        else:\n            break\n    answer.append(str(cnt))\n\nprint(' '.join(answer))\n"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n3 3 2 1\\n3 3 3') == '1 1\\n1 2\\n2 3 4'\nassert solution('4 2\\n3 3 2 2\\n6 3') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 7\\n1 0 D\\n3 0 D\\n4 1 L\\n6 2 D') == '10.0\\n4.0\\n1.0'\n\"\"\"\n\nfrom collections import deque\nimport copy\nimport math\nimport random"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 7\\n1 0 D\\n3 0 D\\n4 1 L\\n6 2 D\") == \"10.0\\n4.0\\n1.0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 10\\n0 0 D\\n10 1 L') == '10.0\\n10.0\\n0.0\\n'\nassert solution('4 3 7\\n1 0 D\\n3 0 D\\n4 1 L\\n6 2 D') == '10.0\\n4.0\\n1.0\\n'\n\n\"\"\"\n\nfrom typing import List, Dict, Union, Any, Tuple\n\nfrom math import atan, degrees\n"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 7\\n1 0 D\\n3 0 D\\n4 1 L\\n6 2 D') == '10.0\\n4.0\\n1.0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 10\\n0 0 D\\n10 1 L\") == \"10.0\\n10.0\\n0.0\\n\"\nassert solution(\"4 3 7\\n1 0 D\\n3 0 D\\n4 1 L\\n6 2 D\") == \"10.0\\n4.0\\n1.0\\n\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected_return\n"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 10\\n0 0 D\\n10 1 L\\n\") == \"10.0\\n10.0\\n0.0\"\nassert solution(\"4 3 7\\n1 0 D\\n3 0 D\\n4 1 L\\n6 2 D\\n\") == \"10.0\\n4.0\\n1.0\"\n\n\"\"\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(print(...)).replace('\\n', '')\nprint(solution(str(input())))\n"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 7\\n1 0 D\\n3 0 D\\n4 1 L\\n6 2 D') == '10.0\\n4.0\\n1.0'\nassert solution('2 3 10\\n0 0 D\\n10 1 L') == '10.0\\n10.0'\nassert solution('2 3 10\\n0 0 D\\n10 1 L\\n0 0 D\\n10 1 L') == '10.0\\n10.0'\nassert solution('2 3 10\\n0 0 D\\n10 1 L\\n0 0 D\\n10 1 L') == '10.0\\n10.0'\nassert solution('2 3 10\\n0 0 D\\n10 1 L\\n0 0 D\\n10 1 L\\n0 0 D\\n10 1 L') == '10.0\\n10.0'\n"
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 10\\n0 0 D\\n10 1 L\\n\") == \"10.0\\n10.0\\n0.0\\n\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\n\nprint(solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\"))\nprint(solution(\"wl jkd\"))\n"
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'"
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'\n\nprint(solution('ex eoii jpxbmx cvz uxju sjzzcn jzz'))\nprint(solution('wl jkd'))\n"
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\n\"\"\""
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(sample_input_text) == sample_expected_result\n\n----"
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\n\nassert solution('wl jkd') == 'Impossible'\n\"\"\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\n\n\"\"\"\n\nimport itertools\nimport string\n"
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == 'we will avenge our dead parrot arr'\nassert solution(\"wl jkd\") == 'Impossible'\n\"\"\"\nimport sys"
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120\") == \"68.3\"\nassert solution(\"Amsterdam Rotterdam\\n1\\nAmsterdam Utrecht 10 22 5 10\") == \"IMPOSSIBLE\"\nassert solution(\"Krakow Kiel\\n3\\nKrakow Kiel 18 56 55 20\\nKiel Krakow 12 92 15 120\\nKiel Kiel 20 100 110 20\") == \"89.6\"\n\n\"\"\"\n\nimport math\nimport random"
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120') == '68.3'\nassert solution('Hamburg Bremen\\n1\\nAmsterdam Rotterdam 10 22 5 10') == 'IMPOSSIBLE'\n\nimport sys\nassert sys.version_info >= (3, 7)\nimport os\nfrom typing import IO, Any, List, Optional, Union\n\nimport collections"
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120') == '68.3'\nassert solution('Amsterdam Rotterdam\\n1\\nAmsterdam Rotterdam 10 22 5 10') == 'IMPOSSIBLE'\n\n\"\"\"\n\nimport sys\n\nimport random\n\nfrom typing import Tuple\n\n\nclass Data:\n    def __init__(self, path: str):\n        self.origin: str = path[: path.find('\\n')]\n        self.destination: str = path[path.find('\\n') + 1 :]\n\n        self.n: int = int(sys.stdin.readline())\n        self.train_connections: list[Tuple[str, str, int, int, int, int]] = []\n        for i in range(self.n):\n            self.train_connections.append(\n                tuple(sys.stdin.readline().split())\n            )\n\n        self.cur_connection_idx: int = 0\n\n        self.cur_train_connection: Tuple[str, str, int, int, int, int] = self.train_connections[\n            self.cur_connection_idx\n        ]\n\n        self.next_train_connection: Tuple[str, str, int, int, int, int] = self.train_connections[\n            self.cur_connection_idx + 1\n        ]\n\n    def update_connection_idx(self) -> None:\n        self.cur_connection_idx += 1\n        if self.cur_connection_idx == self.n:\n            self.cur_connection_idx = 0\n\n        self.cur_train_connection = self.train_connections[self.cur_connection_idx]\n        self.next_train_connection = self.train_connections[self.cur_connection_idx + 1]\n"
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120\") == '68.3'\nassert solution(\"Amsterdam Rotterdam\\n1\\nAmsterdam Rotterdam 10 22 5 10\") == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''Hamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120''') == '68.3'\n\nassert solution('''Amsterdam Rotterdam\n1\nAmsterdam Rotterdam 10 22 5 10''') == 'IMPOSSIBLE'\n\nassert solution('''Kiev Lutsk\n2\nKiev Lutsk 65 48 20 15\nLutsk Lviv 65 35 10 20''') == '65.3'\n'''\n\n'''\n\nimport math"
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120\") == '68.3'\nassert solution(\"Amsterdam Rotterdam\\n1\\nAmsterdam Rotterdam 10 22 5 10\") == 'IMPOSSIBLE'\n\"\"\""
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('Hamburg Bremen') == '68.3'\nassert solution('Hamburg Bremen 15 68 10 5') == '68.3'\nassert solution('Hamburg Bremen 46 55 50 60') == '68.3'\nassert solution('Hamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60') == '68.3'\n"
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('Bremen Frankfurt') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120') == '68.3'\nassert solution('Amsterdam Rotterdam\\n1\\nAmsterdam Rotterdam 10 22 5 10') == 'IMPOSSIBLE'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120\") == \"68.3\"\n\"\"\"\n\nplaces = stdin.split('\\n')\nnum_connections = int(places[0].split()[1])\nconnections = []\n\nfor _ in range(num_connections):\n    start = tuple(places[1].split()[:2])\n    dest = tuple(places[2].split()[:2])\n    departure_time = int(places[3].split()[1])\n    journey_time = int(places[4].split()[1])\n    delay_prob = int(places[5].split()[1])\n    delay_duration = int(places[6].split()[1])\n    connections.append((start, dest, departure_time, journey_time, delay_prob, delay_duration))\n\nconnections.sort(key=lambda x: x[0][1])"
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n*.*') == '3'\nassert solution('3\\n*.*\\n.*-*') == '3'\nassert solution('3\\n*.*\\n|.|.') == '2'\n\"\"\""
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*\") == \"3\"\nassert solution(\"2\\n*.*\\n...\\n*.*\") == \"4\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n.*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*\") == \"3\"\nassert solution(\"2\\n.*.*\\n...\\n*.*\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*\\n\") == 3\n\"\"\"\n\nimport numpy as np\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*') == '3'\nassert solution('2\\n*.*\\n...\\n*.*') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*') == '3'\n\nassert solution('2\\n*.*\\n...\\n*.*') == '4'\n\nassert solution('4\\n*.*.*\\n...\\n*.*.*') == '8'\n\nassert solution('7\\n*.*.*\\n...\\n*.*.*') == '8'\n\nassert solution('8\\n*.*.*.*\\n...\\n*.*.*.*') == '16'"
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*\") == 3\n\"\"\""
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*\") == \"3\"\nassert solution(\"2\\n*.*\\n...\\n*.*\") == \"4\"\n\nimport unittest\nclass TestStringMethods(unittest.TestCase):\n    def test_00(self):\n        self.assertEqual(solution(\"3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*\"), \"3\")\n    def test_01(self):\n        self.assertEqual(solution(\"2\\n*.*\\n...\\n*.*\"), \"4\")"
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n.*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*\\n\") == 3\nassert solution(\"2\\n.*\\n...\\n*\\n\") == 4\n\"\"\"\n\nn = int(input())\n\nboard = []\nfor _ in range(n):\n    board.append(input())\n\nprint(n)\nfor row in board:\n    print(row)"
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*\") == \"3\"\nassert solution(\"2\\n*.*\\n...\\n*.*\") == \"4\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12210020\") == 4\nassert solution(\"1111\") == \"impossible\"\nassert solution(\"1212\") == \"impossible\"\nassert solution(\"2222\") == \"impossible\"\nassert solution(\"01010\") == \"impossible\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'impossible'\nassert solution('12210020') == '4'\nassert solution('1111') == 'impossible'\nassert solution('12210020\\n12210020') == 'impossible'\n\n'''"
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n12210020\") == \"4\"\nassert solution(\"4\\n1111\") == \"impossible\"\nprint(\"Success!\")\n\"\"\""
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12210020\") == \"4\"\nassert solution(\"1111\") == \"impossible\"\n\n\"\"\"\n\nimport time\nimport math\n\nstart = time.time()\n"
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12210020\") == \"4\"\nassert solution(\"1111\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1111\") == \"impossible\"\nassert solution(\"8\\n12210020\") == \"4\"\n\"\"\""
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n12210020') == '4'\nassert solution('4\\n1111') == 'impossible'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\""
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12210020\") == 4\nassert solution(\"1111\") == 'impossible'\nprint('Passed all tests...')\n\n\"\"\""
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12210020') == '4'\nassert solution('1111') == 'impossible'\n\nassert solution('12210020') == '4'\nassert solution('1111') == 'impossible'\n\nprint(solution('12210020'))\nprint(solution('1111'))\n"
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\nassert solution(\"4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\") == \"Bill will be bitten.\"\n\"\"\""
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\nassert solution(\"4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\") == \"Bill will be bitten.\"\n\"\"\""
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == \"Bill will be bitten.\"\nassert solution('0\\n0\\n0\\n0') == \"0.00 0.00 0.00 0.00\"\nassert solution('1\\n0\\n0\\n0') == \"0.00 0.00 0.00 0.00\"\nassert solution('1\\n2\\n0\\n0') == \"0.00 0.00 2.00 0.00\"\nassert solution('2\\n3\\n0\\n0') == \"0.00 0.00 2.00 0.00\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n500 500 499\\n1000 1000 200\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)\"\nassert solution(\"4\\n0 0 999\\n1000 1000 200\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\") == \"Bill will be bitten\""
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\nassert solution(\"4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\") == \"Bill will be bitten.\"\n\nSample Input 3:\n2\n0 0 0\n1000 1000 999\nSample Output 3:\nBill will be bitten.\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c. \u0421\u0442\u0440\u043e\u043a\u0443 \u0440\u0430\u0437\u0440\u0435\u0436\u044c\u0442\u0435 \u043f\u043e \u0441\u043b\u043e\u0432\u0430\u043c \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0443:\n\n\u043f\u0440\u043e\u043d\u0443\u043c\u0435\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435 \u0441\u043b\u043e\u0432\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0432 \u0438\u0445 \u043f\u043e \u0434\u043b\u0438\u043d\u0435;\n\u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0443\u044e \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u0435 \u0441\u043e \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0439 \u0434\u043b\u0438\u043d\u044b, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043e \u0441\u043b\u043e\u0432\u0430\u043c;\n\u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u0441\u043b\u043e\u0432.\n\n\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d.\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e split().\n\nSample Input:\n\n\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 \u0441\u043b\u043e\u0432, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u043b\u0438\u043d\u0435 \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e.\n\nSample Output:\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u043e\u0441\u043b\u0435 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u0441\u043b\u043e\u0432\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0442\u0430\u043a\u043e\u0439: ['\u041f\u0435\u0440\u0432\u0430\u044f', '\u043f\u0443\u0441\u0442\u0430\u044f', '\u0441\u0442\u0440\u043e\u043a\u0430', '\u043f\u043e\u0441\u043b\u0435', '\u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f', '\u0441\u0442\u0440\u043e\u043a\u0438', '\u043d\u0430', '\u0441\u043b\u043e\u0432\u0430', '\u0434\u043e\u043b\u0436\u043d\u0430', '\u0431\u044b\u0442\u044c', '\u0442\u0430\u043a\u043e\u0439:', '\u041f\u0435\u0440\u0432\u0430\u044f', '\u043f\u0443\u0441\u0442\u0430\u044f', '\u0441\u0442\u0440\u043e\u043a\u0430', '\u043f\u043e\u0441\u043b\u0435', '\u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f', '\u0441\u0442\u0440\u043e\u043a\u0438', '\u043d\u0430', '\u0441\u043b\u043e\u0432\u0430', '\u0434\u043e\u043b\u0436\u043d\u0430', '\u0431\u044b\u0442\u044c', '\u0442\u0430\u043a\u043e\u0439:', '\u0412', '\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435', '\u043e\u0442\u0432\u0435\u0442\u0430', '\u0443\u043a\u0430\u0436\u0438\u0442\u0435', '\u0441\u0442\u0440\u043e\u043a\u0443', '\u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e', '\u0438\u0437', '\u0441\u043b\u043e\u0432', '\u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445', '\u043f\u043e', '\u0434\u043b\u0438\u043d\u0435', '\u043f\u043e', '\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e.\n\"\"\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\nassert solution(\"4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\") == \"Bill will be bitten.\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\") == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution(\"4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\") == 'Bill will be bitten.'\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\") == \"0.00 1000.00 800.00\"\n\"\"\"\nimport sys\nimport collections\n\ninput = sys.stdin.readline\n\nclass Snake(collections.namedtuple('Snake', ['x', 'y', 'd'])):\n    __slots__ = ()\n\n    def __new__(cls, x, y, d):\n        return super().__new__(cls, x, y, d)\n\n    def __repr__(self):\n        return '{} {} {}'.format(self.x, self.y, self.d)\n\n    def __lt__(self, other):\n        return self.x < other.x if self.x!= other.x else self.y < other.y"
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'3\\n500 500 499\\n0 0 999\\n1000 1000 200'\n) == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution(\n'4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300'\n) == 'Bill will be bitten.'\n"
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 999\\n1000 1000 200\") == \"0.00 1000.00 800.00\"\n\"\"\"\n\nn = int(stdin.readline())\npos = dict()\nfor i in range(n):\n    x, y, d = map(int, stdin.readline().split())\n    pos[(x, y)] = d\n\nx_min, x_max = min(pos.keys(), key=lambda x: x[0])[0], max(pos.keys(), key=lambda x: x[0])[0]\ny_min, y_max = min(pos.keys(), key=lambda x: x[1])[1], max(pos.keys(), key=lambda x: x[1])[1]\n\nfor x in range(x_min, x_max + 1):\n    for y in range(y_min, y_max + 1):\n        if (x, y) in pos:\n            print(f\"{x:.2f} {y:.2f} {pos[(x, y)]}\")\n"
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''8 3\nxxxxxxxx''') == 'xxoooooo'\n\nassert solution('''8 3\nxxxoooxx\n''') == 'xxoooooo'\n\nassert solution('''8 3\nxxooooxx\n''') == 'xxooooxx'\n\nassert solution('''8 3\nxxxxoxxx\n''') == 'xxxxoxxx'\n\nassert solution('''8 3\nxxxxxxxx''') == 'xxxxoooxx'"
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 3\\n+++++x+++') == '+++++o+++'\nassert solution('8 3\\nxxxxx') == 'xoooo'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3 xxx') == 'xxxx'\nassert solution('8 3 xxox') == 'xxxx'\nassert solution('8 3 xxxox') == 'xoxoxox'\nassert solution('8 3 xxooo') == 'xooxoxo'\nassert solution('8 3 xxxxx') == 'xxxxxo'\n"
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3\\n++xx+x++') == '++xx+o++'\n"
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 3', 'xxxxxxxx') == 'xxoooooo'\n\"\"\""
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\") == \"xxoooooo\"\n\"\"\"\n\nsteps, strength = input().split()\nsteps, strength = int(steps), int(strength)\nsteps = list(stdin)\n\nop = \"\"\n\nfor step in steps:\n    if step == 'x':\n        op += 'o' * 2\n    else:\n        op += 'o'"
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"oooo\"\nassert solution(\"3 4\") == \"xxxx\"\nassert solution(\"10 10\") == \"oooxxxxxxxxxxxxxxxxx\"\n\n\"\"\""
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\", \"xxxxxxxx\") == \"xxoooooo\"\nassert solution(\"1 1\", \"xxxxxxxx\") == \"xxxxxxxx\"\nassert solution(\"11 3\", \"xxxxxxxx\") == \"xxxxxxxx\"\nassert solution(\"11 3\", \"x+xxx+xxxxx\") == \"xoooooooo\"\nassert solution(\"8 4\", \"x+xxxxx\") == \"x+oooooo\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3\\n++++xx+x++++') == '++++xx+o++++'\n\"\"\"\n\nM, S = map(int, input().split())\nstring = list(input())\ncount = 0\n\nfor i in range(len(string)):\n    if string[i] == '+':\n        count += 1\n        if count == S:\n            string[i] = 'o'\n            break\n    else:\n        count = 0\n\nprint(''.join(string))\n"
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3\\n++xx+x++') == '++xx+o++'\nassert solution('8 3\\nxxxxxxxx') == 'xxoooooo'\nassert solution('8 3\\nxxxxxxxx') == 'xxoooooo'\n\n------Solution------\n\"\"\""
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Lost is Close to Lose') == 'close: lose\\nhe: the\\nin: inc is\\ninc: in\\nis: in\\nlose: close lost\\nlost: lose\\nthe: he'\nassert solution('The fox said, \"When?\"') == 'clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\nit: is\\noclock: clock\\nthe: he\\ntill: will\\nwhen: hen\\nwill: till'\n"
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\nThe cat is running.\n''') == '''\ncat: run\nthe: cat\ncat: is\nrun: run\n'''\nassert solution('''\nThe dog is running.\n''') == '''\ndog: run\nthe: dog\ndog: is\n'''\nassert solution('''\nThe cow is running.\n''') == '''\ncow: run\nthe: cow\n'''\nassert solution('''\nThe cow jumped over the moon.\n''') == '''\ncow: jump\nthe: cow\n'''\n\nassert solution('''\nThe cow jumped over the moon.\nThe cow jumped over the moon.\n''') == '''\ncow: jump\nthe: cow\n'''\n"
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"The fox said, \\\"When?\\\"\") == \"clock: oclock\\nhen: hen the\\nhen: he when\\nit: it\\nis: in\\nis: in\\noclock: oclock\\nthe: he\\nwill: till\\nwhen: hen\\nwill: till\"\nassert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\", he said.\") == \"clock: oclock\\nhe: hen the\\nhen: he when\\nit: it\\nis: in\\nis: in\\noclock: oclock\\nthe: he\\nwill: till\\nwhen: hen\\nwill: till\"\n\nSample Output 3:\n***\nSample Input 4:\nI am  lost\n***\nSample Output 4:\nlost: I am lost\nam: I am\nlost: I am lost\n***\nSample Input 5:\nThis is the end of the input.\n***\nSample Output 5:\n***\n\n------Solution------\nfrom typing import List\nimport re\n\ntext = stdin.split(\"\\n\\n\")\ntext = text[:-1]\n\nfor i in range(len(text)):\n    text[i] = text[i].split(\"\\n\")"
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(    \"The fox said, \\\"When?\\\"\"\n                \"Not till 12 o'clock, replied the hen.\\\" He said.\"\n                \"***\"\n            ) == (\n                \"clock: oclock\"\n                \"he: hen the\"\n                \"hen: he when\"\n                \"is: it\"\n                \"it: is\"\n                \"oclock: clock\"\n                \"the: he\"\n                \"till: will\"\n                \"when: hen\"\n                \"will: till\"\n            )\n\"\"\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\" he said.\") == \"\"\"clock: oclock\nhen: he when\nhen: he when\nin: inc is\nis: in\nlose: close lost\nlost: lose\nthe: he\"\"\"\nassert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\" he said.\") == \"\"\"clock: oclock\nhen: he when\nhen: he when\nin: inc is\nis: in\nlose: close lost\nlost: lose\nthe: he\"\"\"\nassert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\" he said.\") == \"\"\"clock: oclock\nhen: he when\nhen: he when\nin: inc is\nis: in\nlose: close lost\nlost: lose\nthe: he\"\"\"\n\"\"\"\nBoth solutions should run in O(n)\u00a0time and O(n)\u00a0space, where n is the number of lines in the input.\n\"\"\"\n\n\"\"\"\nMy solution:"
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Lost is Close to Lose\\n\\\"Better Documents Inc. wants to add Typo Checking in to the next generation of word processors,\\\" he said.\\n***\") == \"close: lose\\nhe: the\\nin: inc is\\ninc: in\\nis: in\\nlose: close lost\\nlost: lose\\nthe: he\"\nassert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\", he said.\\n***\") == \"clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\nit: is\\noclock: clock\\nthe: he\\ntill: will\\nwhen: hen\\nwill: till\\ndef solution(stdin: str) -> str:\\n    pass\\nassert solution('Lost is Close to Lose\\n\\\"Better Documents Inc. wants to add Typo Checking in to the next generation of word processors,\\\" he said.\\n***') == 'close: lose\\nhe: the\\nin: inc is\\ninc: in\\nis: in\\nlose: close lost\\nlost: lose\\nthe: he'\\nassert solution('The fox said, \\\"When?\\\"\\n\\\"Not till 12 o\\'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\", he said.\\n***') == 'clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\nit: is\\noclock: clock\\nthe: he\\ntill: will\\nwhen: hen\\nwill: till\\ndef solution(stdin: str) -> str:\\n    pass\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Lost is Close to Lose\\n\\\"Better Documents Inc. wants to add Typo Checking in to the\\nnext generation of word processors,\\\" he said.\\n***\\n\") == \"close: lose\\nhe: the\\nin: inc is\\ninc: in\\nis: in\\nlose: close lost\\nlost: lose\\nthe: he\"\nassert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\", he said.\\n***\\n\") == \"clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\nit: is\\noclock: clock\\nthe: he\\ntill: will\\nwill: till\\nwhen: hen\\nhen: he\\n\"\n\"\"\"\n\nimport re\n\npattern = r'[A-Za-z]+'\n"
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(TEST1) == TEST1_RESULT1\nassert solution(TEST2) == TEST2_RESULT2\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Lost is Close to Lose\") == \"close: lose\\nhe: the\\nin: inc is\\ninc: in\\nis: in\\nlose: close lost\\nlost: lose\\nthe: he\"\nassert solution(\"The fox said, 'When?'\") == 'clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\nit: is\\noclock: clock\\nthe: he\\nwhen: hen\\nwill: till\\ntill: will\\nwhen: hen'\nassert solution(\"Never give up on a dream.\\nNever let a set of words you don't like stop you\\ngetting what you need.\\nNever forget to take a step toward what you want.\\nNever give up on anything.\\nNever apologize for anything, no matter how much you didn't do or how much you didn't like.\") == 'a: after all\\nand: all\\nevery: every\\ngive: give\\ngive: give up\\nhonest: honest\\ntake: take\\ndo: do\\nevery: every\\ngive: give\\ngive: give up\\nhonest: honest\\nmake: make\\nmake: make up\\nold: old\\nnever: never\\nsay: say\\ntake: take\\nthe: the\\nthink: think\\nwhen: when\\nwhat: what\\nyou: you\\nwhole: whole\\nwhere: where\\nwhy: why\\nwhy: why\\nwould: would'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('Lost is Close to Lose') == 'close: lose\\nhe: the\\nin: inc is\\ninc: in\\nis: in\\nlose: close lost\\nlost: lose\\nthe: he'\nassert solution('The fox said, \"When?\"') == 'clock: oclock\\nhen: hen the\\nhen: he when\\nit: it\\nis: it\\noclock: clock\\nthe: he\\nwill: till\\ntill: will\\nwhen: hen'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 2 7 3 8 9 4 5 10 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 1 2 7 3 8 9 4 5 10 6\") == \"1\"\nassert solution(\"10 9 8 7 6 5 4 3 2 1\") == \"7\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4') == '1'\nassert solution('4\\n3 4 1 2') == '2'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '0'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '0'\nassert solution('9\\n1 2 3 4 5 6 7 8 9') == '1'\n"
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\\\n1 2 7 3 8 9 4 5 10 6\") == \"1\"\n\"\"\"\n\n\"\"\"\nSuppose we have a deck of cards, and that a set of cards is one of the following:\n\n{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\nYou will be given a set of cards, and your task is to find the smallest number of moves you can make to sort them, using the following algorithm:\n\n\nWe define a move to be an operation which you can perform on a set S of n cards. For example, if we have a set of 10 cards, and if we have the cards in the following order:\n\n1 2 3 4 5 6 7 8 9 10\n\nA move that swaps the cards at positions 1 and 2 is the move (1, 2) with 2 moves. Similarly, a move that swaps the cards at positions 2 and 3 is the move (2, 3) with 2 moves, and so on. A move that swaps the cards at positions 1 and 3 is the move (1, 3) with 3 moves.\n\nYou can also move a card to another position. For example, if we have the cards in the following order:\n\n1 2 3 4 5 6 7 8 9 10\n\nA move that moves the card at position 2 to position 3 is the move (2, 3) with 1 move. Note that a move that moves a card to a position that is already occupied by a card is still counted as a move with 2 moves. For example, if the card at position 4 is moved to a position occupied by card 1, this counts as 2 moves.\n\nYou will also be given a number of moves $m$, and for each move you will be given two numbers $a$ and $b$ with 1 \\le a \\le b \\le n$. These two numbers represent the position of the card you are moving, and the position to which you are moving it. For example, if you have a set of 10 cards, and if we have the cards in the following order:\n\n1 2 3 4 5 6 7 8 9 10\n\nIf you were to perform the move (4, 6) with 2 moves, this would correspond to the cards in the following order:\n\n1 2 3 4 5 6 7 8 9 10\n\nIf you were to perform the move (2, 7) with 3 moves, this would correspond to the cards in the following order:\n\n1 2 4 3 5 6 7 8 9 10\n\nYour task is to perform each of the moves described by the input and to print the total number of moves that you would need to make in order to sort the cards in the set.\n\n-----Input-----\nYou will be given a number of test cases $t$. For each test case, you will first be given a single line of input that has two integers $n$ and $m$ separated by a single space. They represent the number of cards and the number of moves, respectively. The next line has $n$ unique integers $c_1, \\ldots, c_n$ separated by a single space. They represent the initial order of the cards.\n\n-----Output-----\nFor each test case, print a single line with a single integer $k$ indicating the minimum number of moves needed to sort the set.\n\n-----Examples-----\nSample Input 1:\n3\n10 3\n1 2 3 4 5 6 7 8 9 10\n3 1 2\n4 8 1\nSample Output 1:\n2\n0\n3\n\nSample Input 2:\n3\n10 3\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\nSample Output 2:\n1\n1\n2\n\"\"\""
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n1 2 7 3 8 9 4 5 10 6\") == \"1\"\nassert solution(\"10\\n3 8 1 9 4 5 2 7 10 6\") == \"2\"\nassert solution(\"10\\n8 1 9 4 5 2 7 10 6 3\") == \"2\"\n\nimport unittest\nimport sys\nfrom io import StringIO\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdin, stdout = sys.stdin, sys.stdout\n        sys.stdin, sys.stdout = StringIO(input), StringIO()\n        resolve()\n        sys.stdin, sys.stdout = stdin, stdout\n        self.assertEqual(output, sys.stdout.getvalue().strip())\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"10\n1 2 7 3 8 9 4 5 10 6\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"10\n3 8 1 9 4 5 2 7 10 6\"\"\"\n        output = \"\"\"2\"\"\"\n        self."
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('4\\n1 2 3 4') == '1'\nassert solution('10\\n3 8 1 9 4 5 2 7 10 6') == '2'\n'''"
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"0\"\nassert solution(\"9\\n1 3 5 7 9 2 4 6 8 10\") == \"2\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\n1 2 7 3 8 9 4 5 10 6') == '1'\n\n\"\"\""
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"10\"\n) == \"1\"\nassert solution(\n    \"10\\n3 8 1 9 4 5 2 7 10 6\"\n) == \"2\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1'\n"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n\"\"\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\"\n\"\"\"\n\nfrom fractions import Fraction\nimport re"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\"\n\n\"\"\"\nfrom fractions import Fraction"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n\"\"\"\n\nimport sys\nfrom fractions import Fraction\n"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\"\nassert solution(\"0.142857 6\")!= \"1/6\"\nassert solution(\"1.6 1\")!= \"5/3\"\nassert solution(\"1.6 1\")!= \"5/3\"\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\"\n\"\"\"\n\nimport re\nfrom fractions import Fraction\nimport math"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\"\n\n\"\"\""
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nprint('All tests passed.')\n"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n0 0 0\\n\") == 6\nassert solution(\"2\\n0 0 0\\n0 0 1\") == 10\n\n\"\"\""
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n0 0 0\\n') == '6'\nassert solution('2\\n0 0 0\\n0 0 1\\n') == '10'\n\"\"\"\n\n\"\"\"\nSolution Explanation\n\nhttps://leetcode.com/problems/cell-with-the-greatest-number-of-alive-neighbors/discuss/1491816/C%2B%2BJavaPython-BFS-solution-O(mn)\n\nImagine a board of 0s and 1s. A 0 means the cell is dead, and a 1 means it is alive. We'll call a group of cells alive if they all have a 1.\n\nSo, the question is, what is the largest group of alive cells?\n\nTo do this, we'll do a breadth-first search. At every step, we'll check the 8 cells surrounding the current cell. If it's alive, add it to the current group. If it's dead, we'll see if the 8 surrounding cells are all alive. If they're not, then we'll reset the group and add the current cell to it.\n\nWhen the group has a size of 1 (or the cell itself, for the first group), we know that's the largest group.\n\"\"\"\n\nimport collections\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\n    def bfs(self, x, y, z, grid):\n        dx = [-1, 1, 0, 0, 0, 0, 0, 0]\n        dy = [0, 0, -1, 1, 0, 0, 0, 0]\n        dz = [0, 0, 0, 0, -1, 1, 0, 0]\n\n        q = collections.deque()\n        q.append((x, y, z))\n        visited = set()\n\n        while q:\n            x, y, z = q.popleft()\n            visited.add((x, y, z))\n            for i in range(8):\n                nx, ny, nz = x + dx[i], y + dy[i], z + dz[i]\n                if (nx, ny, nz) not in visited and (0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and 0 <= nz < len(grid[0][0])) and grid[nx][ny][nz] == 1:\n                    grid[nx][ny][nz] = 0\n                    q.append((nx, ny, nz))\n\n    def solution(self, stdin: str) -> str:\n        grid = []\n        for _ in range(int(stdin)):\n            grid.append([[1 if c == '1' else 0 for c in s] for s in stdin.split()])\n        \n        for x in range(len(grid)):\n            for y in range(len(grid[0])):\n                for z in range(len(grid[0][0])):\n                    if grid[x][y][z] == 1:\n                        self.bfs(x, y, z, grid)\n        \n        ans = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                ans = max(ans, sum(grid[i][j]))\n        \n        return ans\n"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n0 0 0\\n0 0 1') == '10'"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n0 0 0\\n0 0 1') == '10'\n"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0 0 0\\n0 0 1\") == \"10\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n0 0 0\\n') == '6'\nassert solution('2\\n0 0 0\\n0 0 1\\n') == '10'\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\n0 0 0\\n'))\nprint(solution('2\\n0 0 0\\n0 0 1\\n'))\n\nprint(solution('1\\"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0 0\\n0 0 1\") == \"4\"\nassert solution(\"2\\n0 0 0\\n0 0 1\") == \"10\"\nassert solution(\"1\\n0 0 0\") == \"6\"\nassert solution(\"10\\n0 0 0 0 0 0 0 0 0\\n0 0 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\") == \"22\"\nassert solution(\"2\\n0 0 0\\n0 0 1\") == \"10\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n0 0 0\\n0 0 1\") == \"10\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n0 0 0\\n') == '6'\nassert solution('2\\n0 0 0\\n0 0 1\\n') == '10'\n"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n0 0 0\\n') == '6'\n"
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(\"sample_input_1.txt\").read()) == \"1\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(1500)\n\nedges = []"
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n-1 2 -1\\n2 2\\n1 -1 1') == '1'\nassert solution('7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n-1 2 -1\\n2 2\\n1 -1 1\") == \"1\"\nassert solution(\"7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\") == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n-1 2 -1\\n2 2\\n1 -1 1\") == '1'\nassert solution(\"7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\") == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n-1 2 -1\\n2 2\\n1 -1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n-1 2 -1\\n2 2\\n1 -1 1\") == 1\nassert solution(\"7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\") == 1\n"
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n-1 2 -1\\n2 2\\n1 -1 1\") == \"1\"\nassert solution(\"7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\") == \"1\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n1\\n-1,1\") == \"1\"\nassert solution(\"3\\n2\\n1\\n-1,1\") == \"1\"\nassert solution(\"7\\n-1,4,5,1,0,-1,-1\\n-1,3,2,0,0,1\\n1,3,4,2,4,4\\n0,2,3,-1,4,4,2\\n-1,4,4,3,2,4,2\\n1,-1,-1,-1,4,2,-1\\n\") == \"1\"\nassert solution(\"7\\n-1,4,5,1,0,-1,-1\\n-1,3,2,0,0,1\\n1,3,4,2,4,4\\n0,2,3,-1,4,4,2\\n-1,4,4,3,2,4,2\\n1,-1,-1,-1,4,2,-1\\n\") == \"2\"\n\nassert solution(\"3\\n2\\n1\\n-1,1\") == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n-1 2 -1\\n2 2\\n1 -1 1\\n\") == \"1\"\nassert solution(\"7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\\n\") == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n-1 2 -1\\n2 2\\n1 -1 1\\n') == '1'\n\nassert solution('7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\\n') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == 1\nassert solution('11100') == 5\nassert solution('1111') == 1\nassert solution('11101') == 2\nassert solution('110011') == 2\n\"\"\""
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1100') == 1\nassert solution('101010') == 2\nassert solution('11101010') == 3\nassert solution('11101011') == 4\nassert solution('111101010') == 5\n"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\nassert solution('1110') == '0'\n\nprint('Success')\n\nSample Input 2:\n10111010\n\nSample Output 2:\n16\n\nSample Input 3:\n10111010\n\nSample Output 3:\n16\n\nSample Input 4:\n10111010\n\nSample Output 4:\n16\n\nSample Input 5:\n10111010\n\nSample Output 5:\n16\n\nSample Input 6:\n1011111010\n\nSample Output 6:\n32\n\nSample Input 7:\n101111010\n\nSample Output 7:\n31\n\nSample Input 8:\n101111010\n\nSample Output 8:\n31\n\nSample Input 9:\n101111010\n\nSample Output 9:\n31\n\nSample Input 10:\n1011111010\n\nSample Output 10:\n31\n\nSample Input 11:\n1011111010\n\nSample Output 11:\n31\n\nSample Input 12:\n101111010\n\nSample Output 12:\n31\n\nSample Input 13:\n101111010\n\nSample Output 13:\n31\n\nSample Input 14:\n101111010\n\nSample Output 14:\n31\n\nSample Input 15:\n101111010\n\nSample Output 15:\n31\n\nSample Input 16:\n101111010\n\nSample Output 16:\n31\n\nSample Input 17:\n101111010\n\nSample Output 17:\n31\n\nSample Input 18:\n1011111010\n\nSample Output 18:\n31\n\nSample Input 19:\n1011111010\n\nSample Output 19:\n31\n\nSample Input 20:\n1011111010\n\nSample Output 20:\n31\n\nSample Input 21:\n101111010\n\nSample Output 21:\n31\n\nSample Input 22:\n101111010\n\nSample Output 22:\n31\n\nSample Input 23:\n101111010\n\nSample Output 23:\n31\n\nSample Input 24:\n101111010\n\nSample Output 24:\n31\n\nSample Input 25:\n1011111010\n\nSample Output 25:\n31\n\nSample Input 26:\n101111010\n\nSample Output 26:\n31\n\nSample Input 27:\n1011111010\n\nSample Output 27:\n31\n\nSample Input 28:\n101111010\n\nSample Output 28:\n31\n\nSample Input 29:\n101111010\n\nSample Output 29:\n31\n\nSample Input 30:\n1011111010\n\nSample Output 30:\n31\n\nSample Input 31:\n101111010\n\nSample Output 31:\n31\n\nSample Input 32:\n1011111010\n\nSample Output 32:\n31\n\nSample Input 33:\n1011111010\n\nSample Output 33:\n31\n\nSample Input 34:\n101111010\n\nSample Output 34:\n31\n\nSample Input 35:\n101111010\n\nSample Output 35:\n31\n\nSample Input 36:\n1011111010\n\nSample Output 36:\n31\n\nSample Input 37:\n101111010\n\nSample Output 37:\n31\n\nSample Input 38:\n1011111010\n\nSample Output 38:\n31\n\nSample Input 39:\n101111010\n\nSample Output 39:\n31\n\nSample Input 40:\n101111010\n\nSample Output 40:\n31\n\nSample Input 41:\n1011111010\n\nSample Output 41:\n31\n\nSample Input 42:\n1011111010\n\nSample Output 42:\n31\n\nSample Input 43:\n101111010\n\nSample Output 43:\n31\n\nSample Input 44:\n101111010\n\nSample Output 44:\n31\n\nSample Input 45:\n101111010\n\nSample Output 45:\n31\n\nSample Input 46:\n1011111010\n\nSample Output 46:\n31\n\nSample Input 47:\n101111010\n\nSample Output 47:\n31\n\nSample Input 48:\n101111010\n\nSample Output 48:\n31\n\nSample Input 49:\n101111010\n\nSample Output 49:\n31\n\nSample Input 50:\n101111010\n\nSample Output 50:\n31\n\nSample Input 51:\n101111010\n\nSample Output 51:\n31\n\nSample Input 52:\n1011111010\n\nSample Output 52:\n31\n\nSample Input 53:\n101111010\n\nSample Output 53:\n31\n\nSample Input 54:\n101111010\n\nSample Output 54:\n31\n\nSample Input 55:\n1011111010\n\nSample Output 55:\n31\n\nSample Input 56:\n101111010\n\nSample Output 56:\n31\n\nSample Input 57:\n1011111010\n\nSample Output 57:\n31\n\nSample Input 58:\n101111010\n\nSample Output 58:\n31\n\nSample Input 59:\n101111010\n\nSample Output 59:\n31\n\nSample Input 60:\n101111010\n\nSample Output 60:\n31\n\nSample Input 61:\n1011111010\n\nSample Output 61:\n31\n\nSample Input 62:\n101111010\n\nSample Output 62:\n31\n\nSample Input 63:\n1011111010\n\nSample Output 63:\n31\n\nSample Input 64:\n101111010\n\nSample Output 64:\n31\n\nSample Input 65:\n101111010\n\nSample Output 65:\n31\n\nSample Input 66:\n101111010\n\nSample Output 66:\n31\n\nSample Input 67:\n101111010\n\nSample Output 67:\n31\n\nSample Input 68:\n101111010\n\nSample Output 68:\n31\n\nSample Input 69:\n1011111010\n\nSample Output 69:\n31\n\nSample Input 70:\n101111010\n\nSample Output 70:\n31\n\nSample Input 71:\n1011111010\n\nSample Output 71:\n31\n\nSample Input 72:\n1011111010\n\nSample Output 72:\n31\n\nSample Input 73:\n1011111010\n\nSample Output 73:\n31\n\nSample Input 74:\n1011111010\n\nSample Output 74:\n31\n\nSample Input 75:\n1011111010\n\nSample Output 75:\n31\n\nSample Input 76:\n1011111010\n\nSample Output 76:\n31\n\nSample Input 77:\n1011111010\n\nSample Output 77:\n31\n\nSample Input 78:\n1011111010\n\nSample Output 78:\n31\n\nSample Input 79:\n1011111010\n\nSample Output 79:\n31\n\nSample Input 80:\n1011111010\n\nSample Output 80:\n31\n\nSample Input 81:\n1011111010\n\nSample Output 81:\n31\n\nSample Input 82:\n1011111010\n\nSample Output 82:\n31\n\nSample Input 83:\n1011111010\n\nSample Output 83:\n31\n\nSample Input 84:\n1011111010\n\nSample Output 84:\n31\n\nSample Input 85:\n1011111"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1001') == 3\nassert solution('1111') == 1\nprint('Success')\n"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1001\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('101') == 5\nassert solution('111') == 5\nassert solution('1000') == 1\nassert solution('1001') == 2\nassert solution('10101010') == 8\n\nprint('All tests passed.')\n\n\"\"\""
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\nprint('Test pass.')"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1001\") == 3\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(5000)\n"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1111\") == 1\nassert solution(\"1001\") == 3\n"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1011\") == 2\nassert solution(\"10011\") == 2\nassert solution(\"11111\") == 1\n"
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 1') == 'LLL'\nassert solution('2 2 2 1 2') == 'LLRLR'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n1 1 1\n''') == 'LLL'\nassert solution('''5\n1 2 2 1 2\n''') == 'LLRLR'\nassert solution('''4\n1 1 1 2\n''') == 'LLRLL'\nassert solution('''5\n1 2 2 1 2\n''') == 'LLRLL'\nassert solution('''5\n2 2 1 2 2\n''') == 'RRLLL'\n"
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 1 1\nSample Output 1:\nLLL\n\nSample Input 2:\n5\n1 2 2 1 2\nSample Output 2:\nLLL\n\nSample Input 3:\n5\n1 2 2 1 2\nSample Output 3:\nRRLL\n''') == 'LLL\\nLLL\\nRRLL'\n\nassert solution('''\n2\n1 1\nSample Output 2:\nLL\n''') == 'LL'\n\nassert solution('''\n4\n1 1 2 2\nSample Output 3:\nLLLL\n''') == 'LLLL'\n\nassert solution('''\n1\n1\nSample Output 4:\nno dance\n''') == 'no dance'\n\nassert solution('''\n4\n1 1 1 1\nSample Output 5:\nno dance\n''') == 'no dance'\n\nprint('Success')"
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1 1\") == \"LLL\"\n\nassert solution(\"5\\n1 2 2 1 2\") == \"LLRLR\"\n\nassert solution(\"5\\n1 2 2 1 3\") == \"LLRLR\"\n\nassert solution(\"5\\n3 4 5 2 1\") == \"LLRLR\"\n\nassert solution(\"5\\n1 4 6 2 1\") == \"LLRLR\""
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n1 2 3 4''') == 'LLLL'\nassert solution('''5\n1 2 2 1 3\n''') == 'LLRRLL'\nassert solution('''3\n1 1 1\n''') == 'RRR'\nassert solution('''6\n1 2 2 3 4 5\n''') == 'LLRRLLRLLLRRRR'\nassert solution('''6\n1 2 2 3 3 4\n''') == 'LLLLRRRLLRLL'\n"
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1 1') == 'LLL'\n\"\"\""
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1 1\") == \"LLL\"\nassert solution(\"5\\n1 2 2 1 2\") == \"LLRLR\"\n\"\"\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1 1\\n') == 'LLL'\nassert solution('5\\n1 2 2 1 2\\n') == 'LLRLR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1 1 1\n''') == 'LLL'\nassert solution('''5\n1 2 2 1 2\n''') == 'LLRLR'"
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\\n2 2 2 1 2\") == \"LLL\"\nassert solution(\"1 2 2 1 2\\n3 1 1 2 3\") == \"LLRLR\"\nassert solution(\"2 2 2 1 2\\n1 1 1 2 3\") == \"LLL\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected_result\nprint(solution(stdin))\n"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 7 10\\n1 2 1000000\\n2 3 2000000\\n3 4 3000000\\n4 5 4000000\\n5 6 5000000\\n6 7 6000000\\n7 1 7000000\") == \"49000000000070\"\nassert solution(\"6 6 7\\n1 3 1000000\\n3 5 3000000\\n5 1 5000000\\n2 4 2000000\\n4 6 4000000\\n6 2 6000000\") == \"25000000000021\"\n\n'''\n\nimport sys"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 7 10\\n1 2 1000000\\n2 3 2000000\\n3 4 3000000\\n4 5 4000000\\n5 6 5000000\\n6 7 6000000\\n7 1 7000000\") == \"49000000000070\"\nassert solution(\"6 6 7\\n1 3 1000000\\n3 5 3000000\\n5 1 5000000\\n2 4 2000000\\n4 6 4000000\\n6 2 6000000\") == \"25000000000021\""
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 7 10') == '49000000000070'\nassert solution('6 6 7') == '25000000000021'\n"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 7 10\") == \"49000000000070\"\nassert solution(\"6 6 7\") == \"25000000000021\"\nassert solution(\"3 2 1\") == \"Poor girl\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 6 4\\n1 3 1000000\\n3 5 3000000\\n5 1 5000000\\n2 4 2000000\\n4 6 4000000\\n6 2 6000000') == '25000000000021'\nassert solution('7 6 10\\n1 2 1000000\\n2 3 2000000\\n3 4 3000000\\n4 5 4000000\\n5 6 5000000\\n6 7 6000000\\n7 1 7000000') == '49000000000070'\n\nprint('Success')"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 7 10\\n1 2 1000000\\n2 3 2000000\\n3 4 3000000\\n4 5 4000000\\n5 6 5000000\\n6 7 6000000\\n7 1 7000000') == '49000000000070'\nassert solution('6 6 7\\n1 3 1000000\\n3 5 3000000\\n5 1 5000000\\n2 4 2000000\\n4 6 4000000\\n6 2 6000000') == '25000000000021'\n"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 7 10\\n1 2 1000000\\n2 3 2000000\\n3 4 3000000\\n4 5 4000000\\n5 6 5000000\\n6 7 6000000\\n7 1 7000000') == '49000000000070'\nassert solution('6 6 7\\n1 3 1000000\\n3 5 3000000\\n5 1 5000000\\n2 4 2000000\\n4 6 4000000\\n6 2 6000000') == '25000000000021'\n\n\"\"\"\n\nimport collections\nfrom pprint import pprint"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 10\") == \"Poor girl\"\nassert solution(\"6 5 9\") == \"Poor girl\"\nassert solution(\"4 2 1\") == \"Poor girl\"\nassert solution(\"7 7 6\") == \"Poor girl\"\nassert solution(\"6 7 3\") == \"Poor girl\"\n\"\"\""
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 7 10\\n1 2 1000000\\n2 3 2000000\\n3 4 3000000\\n4 5 4000000\\n5 6 5000000\\n6 7 6000000\\n7 1 7000000\") == \"49000000000070\"\nassert solution(\"6 6 7\\n1 3 1000000\\n3 5 3000000\\n5 1 5000000\\n2 4 2000000\\n4 6 4000000\\n6 2 6000000\") == \"25000000000021\""
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n0 1\\n0 1\") == \"2\"\nassert solution(\"2 3\\n0 1\\n1 2\") == \"2\"\nassert solution(\"2 3\\n0 1\\n0 1\") == \"1\"\nassert solution(\"2 3\\n0 1\\n0 1\\n0 1\") == \"Yeah!\"\nassert solution(\"4 4\\n0 1\\n0 1\\n0 1\\n0 1\") == \"Yeah!\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 2\") == \"2\\n2\\n0\\n1\\n2\\n2\\n3\"\nassert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 2\") == \"Yeah!\"\n\"\"\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 4\n0 1\n1 0\n2 3\n3 2''') == '''2\n2\n0\n1\n2\n2\n3\n\nassert solution('''4 4\n0 1\n1 0\n2 3\n3 3''') == '''Yeah!'''\n\nassert solution('''4 4\n0 1\n1 0\n2 3\n3 3''') == '''2\n2\n0\n1\n2\n2\n3\n\nassert solution('''4 4\n0 1\n1 0\n2 3\n3 3''') == '''2\n2\n0\n1\n2\n2\n3\n\nassert solution('''4 4\n0 1\n1 0\n2 3\n3 3''') == '''2\n2\n0\n1\n2\n2\n3"
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n0 1\\n1 0\\n2 3\\n3 2') == '2\\n2\\n0\\n1\\n2\\n2\\n3'\n"
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 2\") == \"2\\n2\\n0\\n1\\n2\\n2\\n3\"\n\n\"\"\"\n\nclass Graph(object):\n    def __init__(self):\n        self.adjacency_list = {}\n        self.number_of_nodes = 0\n\n    def __repr__(self):\n        return self.adjacency_list\n\n    def add_node(self, node: int):\n        self.adjacency_list[node] = []\n        self.number_of_nodes += 1\n\n    def add_edge(self, start: int, end: int):\n        if end not in self.adjacency_list[start]:\n            self.adjacency_list[start].append(end)\n        if start not in self.adjacency_list[end]:\n            self.adjacency_list[end].append(start)\n\n    def remove_edge(self, start: int, end: int):\n        if end in self.adjacency_list[start]:\n            self.adjacency_list[start].remove(end)\n        if start in self.adjacency_list[end]:\n            self.adjacency_list[end].remove(start)\n\n    def number_of_nodes(self):\n        return self.number_of_nodes\n"
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 2\") == \"2\\n2\\n0\\n1\\n2\\n2\\n3\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 2\") == \"2\\n2\\n0\\n1\\n2\\n2\\n3\"\nassert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 3\") == \"Yeah!\"\nassert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 3\\n2 3\") == \"Yeah!\"\nassert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 3\\n2 3\\n2 2\") == \"2\\n2\\n0\\n1\\n2\\n2\\n3\\n3\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n0 1\\n1 0\\n2 3\\n3 2\\n') == '2\\n2\\n0\\n1\\n2\\n2\\n3\\n', 'Wrong result for input 4 4\\n0 1\\n1 0\\n2 3\\n3 3\\n'\nassert solution('4 4\\n0 1\\n1 0\\n2 2\\n3 3\\n') == 'Yeah!\\n', 'Wrong result for input 4 4\\n0 1\\n1 0\\n2 2\\n3 3\\n'\nassert solution('4 4\\n0 1\\n1 0\\n2 2\\n3 3\\n') == '2\\n2\\n0\\n1\\n2\\n2\\n3\\n', 'Wrong result for input 4 4\\n0 1\\n1 0\\n2 2\\n3 3\\n'\nassert solution('4 4\\n0 1\\n1 0\\n2 2\\n3 3\\n') == '2\\n2\\n0\\n1\\n2\\n2\\n3\\n', 'Wrong result for input 4 4\\n0 1\\n1 0\\n2 2\\n3 3\\n'\nassert solution('4 4\\n0 1\\n1 0\\n2 2\\n3 3\\n') == '2\\n2\\n0\\n1\\n2\\n2\\n3\\n', 'Wrong result for input 4 4\\n0 1\\n1 0\\n2 2\\n3 3\\n'\n"
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n0 1\\n1 0\\n2 3\\n3 2\\n') == '2\\n2\\n0\\n1\\n2\\n2\\n3\\n'\n\nprint(solution(input()))\n\n-----Notes-----\nThe input format is the same as for the first puzzle on this topic.\n\n\"\"\"\n\nimport math\nimport itertools"
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n0 1\\n1 0\\n2 3\\n3 2') == '2\\n2\\n0\\n1\\n2\\n2\\n3\\n'\nassert solution('4 4\\n0 1\\n1 0\\n2 3\\n3 3') == 'Yeah!'\n\n\"\"\"\n\nimport sys\nimport math\n\nlines = sys.stdin.readlines()\nN, M = [int(x) for x in lines[0].split()]\n\ngraph = {}\nfor i in range(M):\n    f, t = [int(x) for x in lines[i + 1].split()]\n    if f not in graph:\n        graph[f] = []\n    if t not in graph:\n        graph[t] = []\n    graph[f].append(t)\n    graph[t].append(f)\n\nvisited = set()\nqueue = [[0, 0]]\nwhile queue:\n    node, level = queue.pop(0)\n    if node not in visited:\n        visited.add(node)\n        if len(visited) == N:\n            print(level)\n            for p in visited:\n                print(p, end=\" \")\n            print()\n            break\n        for neighbour in graph[node]:\n            queue.append([neighbour, level + 1])\n    elif node == 0:\n        print(\"Not possible\")\n        break"
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1 1 2\n''') == 'POSSIBLE'\nassert solution('''3\n1 1 2\n''') == 'IMPOSSIBLE'\nassert solution('''2\n1 2\n''') == 'IMPOSSIBLE'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('1\\n1 2\\n') == 'IMPOSSIBLE'\nassert solution('2\\n1 2\\n') == 'IMPOSSIBLE'\nassert solution('3\\n1 1 2\\n') == 'POSSIBLE'\nassert solution('4\\n1 1 2\\n') == 'POSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 2\") == \"POSSIBLE\"\nassert solution(\"2\\n1 2\") == \"IMPOSSIBLE\"\n\n\"\"\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('4 1 2 1') == 'IMPOSSIBLE'\nassert solution('5 1 2 3 1') == 'IMPOSSIBLE'\nassert solution('6 1 2 3 3 1') == 'POSSIBLE'\nassert solution('7 1 2 3 3 3 1') == 'POSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1 2\") == \"POSSIBLE\\n1 3\\n2 3\"\n\n\"\"\"\n\nfrom collections import deque, defaultdict"
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('3\\n1 1 2') == 'POSSIBLE'\nassert solution('3\\n1 1 2\\n2 2 3') == 'POSSIBLE'\nassert solution('3\\n1 1 2\\n2 2 3\\n3 3 2') == 'IMPOSSIBLE'"
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3\\n2 3 1') == 'POSSIBLE'\nassert solution('1 2 3\\n3 1 2') == 'IMPOSSIBLE'\nassert solution('1 2 1\\n2 2 1') == 'IMPOSSIBLE'\nassert solution('1 2 1\\n2 3 2') == 'POSSIBLE'\n\n-----------"
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1 2') == 'POSSIBLE\\n1 3\\n2 3'\nassert solution('2\\n1 2') == 'IMPOSSIBLE'\nassert solution('5\\n1 4 2 3\\n3 1 2') == 'POSSIBLE\\n1 4\\n1 3\\n2 4\\n2 3'\n\"\"\""
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 2\") == \"POSSIBLE\\n1 3\\n2 3\"\n\"\"\"\n\nV = int(input())\n\ninp = input().split()\nd = [int(i) for i in inp]"
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('5 3 2') == 'IMPOSSIBLE'\nassert solution('4 3 1') == 'POSSIBLE'"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.0 0.0 -0.0\"\nassert solution(\"100 100 100\\n-100 -100 100\\n-100 100 -100\\n100 -100 100\") == \"0.0 0.0 0.0\"\n\"\"\"\nfrom decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN, InvalidOperation\nfrom fractions import Fraction\nfrom typing import List\n\nINPUT_SYNTAX = \" \".join([\n    \"0 0 0\",\n    \"1 0 0\",\n    \"0 1 0\",\n    \"0 0 1\"\n])\n"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'\nassert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.0 0.5'\nassert solution('0 0 0\\n0 0 0\\n1 0 0\\n0 0 1') == '0.0 0.0 0.0'\nassert solution('1 1 1\\n0 0 0\\n0 1 1\\n0 0 0') == '0.5 0.5 0.5'\n"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0\\\\n1 0 0\\\\n0 1 0\\\\n0 0 1\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\\\\n1 0 0\\\\n0 1 0\\\\n0 0 1\") == \"0.0 0.0 -0.0\"\nassert solution(\"-1 0 0\\\\n0 -1 0\\\\n0 0 1\\\\n0 0 1\") == \"0.0 0.0 -0.0\"\nassert solution(\"0 0 0\\\\n0 0 0\\\\n0 0 0\\\\n0 0 0\") == \"0.0 0.0 0.0\"\n\"\"\"\n\nimport math\nimport unittest\n"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n0 0 0\n1 0 0\n0 1 0\n0 0 1\n\"\"\"\n) == \"0.5 0.5 0.5\"\n\nassert solution(\n\"\"\"\n-1 0 0\n1 0 0\n0 1 0\n0 0 1\n\"\"\"\n) == \"0.0 0.0 -0.0\"\n\nassert solution(\n\"\"\"\n0 0 0\n1 0 0\n0 1 0\n0 0 1\n\"\"\"\n) == \"0.0 0.0 0.0\"\n\nassert solution(\n\"\"\"\n0 0 0\n1 0 0\n0 1 0\n0 0 1\n\"\"\"\n) == \"0.0 0.0 0.0\"\n\nassert solution(\n\"\"\"\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n\"\"\"\n) == \"0.0 0.0 0.0\""
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.0 0.0 -0.0\"\nassert solution(\"0 -1 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.0 0.0 -0.0\"\n\n'''\n\n\nfrom math import sqrt\nfrom math import pi\n\npoints = [\n    [0, 0, 0],\n    [1, 0, 0],\n    [0, 1, 0],\n    [0, 0, 1]\n]"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 0 0\\n0 0 0\\n0 0 1\\n0 0 1\") == \"0.0 0.0 0.0\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 1\\n0 0 1\") == \"0.5 0.5 0.5\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 1\\n0 0 1\") == \"0.0 0.0 0.0\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'\nassert solution('0 0 0\\n1 1 0\\n0 1 1\\n0 0 1') == '0.0 0.0 0.0'\n\"\"\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1 1\\n2 1 2\\n3 1 3') == '1 1 0'\n\n\"\"\"\n\nfrom __future__ import print_function\n\nimport sys"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4 5\\n6 7 8 9 10\\n11 12 13 14 15\\n16 17 18 19 20') == '11 18 19 20'\n\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n3 6 2 3 2 2 2 1 5 6\") == \"2\\n3 2 2 1 5\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n3 6 2 3 2 2 2 1 5 6\") == \"2\\n3 2 2 1 5\\n3 2 2\"\nassert solution(\"3\\n17 17 17\") == \"0\\n17 17 17\"\n\"\"\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n3 6 2 3 2 2 2 1 5 6\\n\") == \"2\\n3 2 2 1 5\\n3 2\\n6 6\"\n\"\"\""
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n3 6 2 3 2 2 2 1 5 6\") == \"2\\n3 2 2 1 5\"\nassert solution(\"3\\n17 17 17\") == \"0\\n17 17 17\"\nprint(solution(\"10\\n3 6 2 3 2 2 2 1 5 6\"))\nprint(solution(\"3\\n17 17 17\"))\n"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n3 6 2 3 2 2 2 1 5 6\") == \"2\\n3 2 2 1 5\\n3 2 2\\n6 6\"\n\"\"\"\n\n\nimport sys\nimport math\nimport random\nimport time\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 1 3 3 4') == '4'\n"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3 5 4 2\\n') == '1\\n'\nassert solution('5\\n3 2 2 2\\n') == '3\\n2\\n2\\n'\nassert solution('4\\n1 1 1 1\\n') == '4\\n'\nassert solution('5\\n1 9 8 5\\n') == '2\\n1\\n9\\n'\nassert solution('5\\n1 9 7 8\\n') == '1\\n1\\n'\n"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n17 17 17\\n') == '0\\n17 17 17\\n'\nprint('Test pass.')\n"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3\n17 17 17\n\"\"\") == \"\"\"\n0\n17 17 17\n\"\"\"\n\n\"\"\"\nIf we are allowed to see the future, we can just go ahead and remove the candidate with the lowest current value from the queue.\n\nOtherwise, we can go ahead and remove the candidate with the lowest current value from the queue, but we also have to consider their neighbors. Specifically, we will remove the candidate with the lowest current value among the candidates that are next in line of sight (i.e., the neighbors, including the first and last candidates in the queue).\n\nLet's do that!\n\"\"\""
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n17 17 17\") == \"0\\n17 17 17\"\n\nprint(solution(\"10\\n3 6 2 3 2 2 2 1 5 6\"))\n\nassert solution(\"10\\n3 6 2 3 2 2 2 1 5 6\") == \"2\\n3 2 2 1 5\\n6 6\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"IMPOSSIBLE\"\n\"\"\"\n\nfrom math import inf\nfrom collections import defaultdict\nfrom typing import List, Optional, Set\n\n\nclass Intersection:\n    def __init__(self, id_: int, roads: List[List[int]]):\n        self.id = id_\n        self.roads = roads\n        self.max_speed = None\n        self.max_path = []\n\n    def solve(self, car: int) -> Optional[float]:\n        self.max_path = [car]\n        max_speed = self.max_speed or 1\n        return self._solve(max_speed)\n\n    def _solve(self, max_speed: int) -> Optional[float]:\n        for path, speed in self.roads:\n            if speed <= max_speed:\n                if path == car:\n                    return speed\n                self.max_path.append(path)\n                if speed < max_speed:\n                    max_speed = speed\n        return None\n\n    def __str__(self):\n        return f'{self.id}'\n\n    def __repr__(self):\n        return f'{self.__class__.__name__}({self.id})'\n"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n') == '74.6666666667'\nprint(solution(stdin))\n"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2\\n3 2 1\\n1 2 7\\n2 3 8\\n1') == 'IMPOSSIBLE'\nassert solution('2\\n3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3') == '74.6666666667'\nassert solution('2\\n3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\\n3 2 1\\n1 2 7\\n2 3 8\\n1') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"74.6666666667\"\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n') == '74.6'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\\n') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"74.6666666667\"\nassert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"IMPOSSIBLE\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 2 1\n1 2 7\n2 3 8\n1\n3 2''') == 'IMPOSSIBLE'\nassert solution('''3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == '74.66666667'\nassert solution('''3 2 1\n1 2 7\n2 3 8\n1\n3 2\n3 1\n2 1\n1 2\n2 2\n1 3\n3 3\n2 3\n3 3''') == '74.66666667'\n'''\nassert solution('''3 2 1\n1 2 7\n2 3 8\n1\n3 2\n3 1\n2 1\n1 2\n2 2\n1 3\n3 3\n2 3\n3 3''') == 'IMPOSSIBLE'\nassert solution('''3 2 1\n1 2 7\n2 3 8\n1\n3 2\n3 1\n2 1\n1 2\n2 2\n1 3\n3 3\n2 3\n3 3''') == '74.66666667'\n\nimport sys\nimport math\n"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"IMPOSSIBLE\"\n\"\"\""
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '2'\nassert solution('1\\n2\\n3\\n') == '3'\nassert solution('1\\n2\\n3\\n4\\n') == '4'\n"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\") == \"1\\n2\\n1\\n2\\n2\\n1\\n\"\nassert solution(\"7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\") == \"0\\n\"\nassert solution(\"7 8\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\\n4 8\\n8 1\") == \"0\\n0\\n1\\n2\\n2\\n1\\n2\\n\"\nassert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\") == \"1\\n2\\n1\\n2\\n2\\n1\\n\"\nassert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\") == \"1\\n2\\n1\\n2\\n2\\n1\\n\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\n\"\"\"\n) == \"\"\"\n0\n2\n1\n2\n2\n1\n1\n\"\"\"\n\nassert solution(\n\"\"\"\n7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\n\"\"\"\n) == \"\"\"\n0\n2\n1\n2\n2\n1\n1\n\"\"\"\n\nassert solution(\n\"\"\"\n7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\n\"\"\"\n) == \"\"\"\n0\n2\n1\n2\n2\n1\n1\n\"\"\"\n\nassert solution(\n\"\"\"\n4 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\n2 5\nSample Output 1:\n0\n2\n2\n2\n2\n2\n\"\"\"\n) == \"\"\"\n0\n2\n1\n2\n2\n1\n1\n\"\"\"\n\nassert solution(\n\"\"\"\n4 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\n2 5\nSample Output 1:\n0\n\"\"\"\n) == \"\"\"\n0\n\"\"\""
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\") == \"1\\n2\\n1\\n2\\n2\\n1\\n0\"\nassert solution(\"7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\"\n\"\"\""
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\") == '1\\n2\\n1\\n2\\n2\\n1'\n\n-----Notes-----\nYou should have a graph of cities and roads.\nEach edge in this graph should contain exactly one chain (i.e. only one chain can build there).\nYou should traverse all roads and for each city with one road, find all cities connected by that road.\n\nYou should create a list of lists, each of them representing a chain.\nEach chain is formed by two cities connected by that road.\n\nYou should traverse the graph and find all groups of chain with 2 cities.\nFor each group, if there is only one city in it, then you can build there.\nYou should do this for all groups and return the list of all built chains.\n\nIn each output line you should write \"1\" if the first chain has the right to build on that road, or \"2\" if the second chain has the right to build on that road.\n\nThe solution is guaranteed to be unique, but it may not always be optimal.\n\n------Hints------\n\"\"\"\n\n\n####################################################\n##                        START                        ##\n####################################################"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\") == \"1\\n2\\n1\\n2\\n2\"\nassert solution(\"7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\") == \"0\"\nassert solution(\"1 2\\n1 3\") == \"1\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n4 6\\n5 6\\n6 7\\n7 4\") == \"0\"\nassert solution(\"7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\") == \"0\"\nassert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n4 6\\n5 6\\n6 7\\n7 4\") == \"2\"\nassert solution(\"7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\") == \"1\"\nassert solution(\"3 5\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\") == \"0\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\\n') == '0\\n0\\n0\\n1\\n2\\n2\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n2\\n0\\n0\\n0\\n0\\n1\\n2\\n1\\n2\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5''') == '''1\n2\n1\n2\n2\n1'''\n\nassert solution('''7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4''') == '''0\n1\n2\n1\n2\n2\n2\n1'''\n\nassert solution('''6 4\n1 2\n2 3\n2 4\n3 4\n4 5\n5 6''') == '''0\n1\n2\n2\n1\n2\n1'''\n\nassert solution('''3 3\n1 2\n2 3\n3 1''') == '''0\n1\n2\n1\n0\n1\n1'''\n\nassert solution('''5 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4''') == '''1\n2\n1\n2\n1\n2\n1\n1'''"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4') == '0'\n\nassert solution('5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4') == '1'\n\nassert solution('5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4') == '2'\n\nassert solution('7 7\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4') == '1'\n\nassert solution('5 5\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4') == '0'"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '0'\nassert solution('2') == '2'\nassert solution('7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4') == '0'\nassert solution('7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4') == '1\\n2\\n1\\n2\\n2\\n1\\n2'\n\nprint(solution(stdin.read()))\n\nimport sys\nimport os"
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\nstdin = stdin.split('\\n')\nstdin = list(map(int, stdin))\n"
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10 2\\n0\\n15\\n30\\n45\") == \"10\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 10 2\\n0\\n15\\n30\\n45\"\n) == \"10\"\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10 2\\n0\\n15\\n30\\n45\") == \"10\"\n\"\"\""
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 10 2\n0\n15\n30\n45''') == '10'\nassert solution('''4 10 3\n0\n15\n30\n45''') == '5'\n\n\"\"\""
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 10 2\\n0\\n15\\n30\\n45') == '10'\nassert solution('4 10 3\\n0\\n15\\n30\\n45') == '5'"
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10 2\\n0\\n15\\n30\\n45') == '10'\n\"\"\""
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 10 3\\n0\\n15\\n30\\n45') == '5'\n\"\"\"\n\n\"\"\"\nProblem Statement\nFind the minimum possible waiting time for the skiers.\n\n-----Input-----\n - One line containing three integers:\n - $N$ ($1 \\le N \\le 400$), the number of skiers.\n - $T$ ($1 \\le T \\le 720$), the time to travel from the bottom of the hill to the top in minutes.\n - $G$ ($1 \\le G \\le 400$), the number of available gondola cabs.\n - A further $N$ lines in no particular order, each containing one integer $X$ ($0 \\le X \\le 10^6$) which gives the time when a skier arrives at the foot of the mountain.\n\n-----Output-----\n - One line containing one integer: the minimum possible sum of all waiting times, where the waiting time for one skier is the time difference between their arrival and departure on the next available gondola (which may be shared with any number of other skiers).\n\n-----Examples-----\nSample Input 1:\n4 10 2\n0\n15\n30\n45\nSample Output 1:\n10\n\nSample Input 2:\n4 10 3\n0\n15\n30\n45\nSample Output 2:\n5\n\"\"\"\n\nimport math"
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 10 2\\n0\\n15\\n30\\n45') == '10'\n\"\"\"\n\n\nimport sys\nfrom collections import deque\nfrom typing import Deque, List\n"
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n50 50 75\\n25 25 25') == '2'\nassert solution('5 2\\n50 50 50 50\\n25 25 25 25') == '1'"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n50 50 75\\n25 25 25\\n') == '2'\n\nassert solution('5 2\\n50 50 50 50\\n25 25 25 25\\n') == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n50 50 75\\n25 25 25\") == \"2\"\nassert solution(\"5 2\\n50 50 50 50\\n25 25 25 25\") == \"1\"\nassert solution(\"5 3\\n50 50 50 50\\n25 25 25 25\") == \"5\"\nassert solution(\"6 4\\n50 50 50 50 50\\n25 25 25 25 25\") == \"5\"\nassert solution(\"7 5\\n50 50 50 50 50 50\\n25 25 25 25 25 25\") == \"6\"\n"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n50 50 75\\n25 25 25\\n\") == \"2\"\n"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n50 50 75\\n25 25 25') == '2'\nassert solution('5 2\\n50 50 50 50\\n25 25 25 25') == '1'\nassert solution('5 3\\n50 50 50 50\\n25 25 25 25') == '1'\nassert solution('5 4\\n50 50 50 50\\n25 25 25 25') == '1'\nassert solution('5 5\\n50 50 50 50\\n25 25 25 25') == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n4 2\n50 50 75\n25 25 25\n''') == '2'\nassert solution('''\n5 2\n50 50 50 50\n25 25 25 25\n''') == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n50 50 75\\n25 25 25\\n\") == 2\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\narr = []\nfor _ in range(m):\n    arr.append(list(map(int, stdin.readline().split())))\n\nrank = [1] + [0] * 30\n\nfor s in arr:\n    for i in range(1, n):\n        if s[i] > s[i - 1]:\n            rank[i] = rank[i - 1] + 1\n\nrank[30] = max([x for x in rank if x!= 0])\n\nprint(max(rank))\n"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n50 50 75\\n25 25 25\\n') == '2'\nassert solution('5 2\\n50 50 50 50\\n25 25 25 25\\n') == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n50 50 75\\n25 25 25') == 2\nassert solution('5 2\\n50 50 50 50\\n25 25 25 25') == 1\n\"\"\""
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n50 50 75\\n25 25 25\\n\") == \"2\"\nassert solution(\"5 2\\n50 50 50 50\\n25 25 25 25\\n\") == \"1\"\nassert solution(\"5 2\\n50 50 50 50\\n25 25 25 25\\n\") == \"1\"\nassert solution(\"5 2\\n50 50 50 50\\n25 25 25 25\\n\") == \"1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n.LX.\\n.X..\\n....\\n.L..\\n\") == 1\n\"\"\"\n\nimport itertools\nimport math\n"
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n..XL\\n....\\n....\\n...L\") == 2\nassert solution(\"4 4\\n.X.L\\n.X..\\n...L\\n....\") == 1\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    4 4\n    .XLX\n    .X..\n    ...L\n    .X..\n    \"\"\") == '2'\nassert solution(\n    \"\"\"\n    3 3\n    .X.X\n    .XX.\n    .XXX\n    \"\"\") == '3'\nassert solution(\n    \"\"\"\n    4 4\n    .LX.\n    .X.X\n    ....\n    .X..\n    \"\"\") == '1'\nassert solution(\n    \"\"\"\n    4 4\n    .XX.\n    .X.X\n    ....\n    .X..\n    \"\"\") == '0'\nassert solution(\n    \"\"\"\n    4 4\n    .XX.\n    .X.X\n    ....\n    .L..\n    \"\"\") == '1'\n"
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n.LX.\\n.X..\\n....\\n.L..\\n\") == \"1\"\nassert solution(\"4 4\\n.XLX\\n.X..\\n...L\\n.X..\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n..XL\\n...X\\nL.X.\\nX..X\") == 2\n\"\"\""
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n.XLX\\n.X..\\n...L\\n.X..') == '2'\nassert solution('4 4\\n.X..\\n.X..\\n...L\\n.X..') == '2'\nassert solution('4 4\\n.X.X\\n.X..\\n...L\\n.X..') == '1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n.XLX\\n.X..\\n...L\\n.X..\") == 2\nassert solution(\"4 4\\n.XLX\\n.X..\\nL...\\n.X..\") == 3\nassert solution(\"4 4\\n.X.L\\n.X..\\nL...\\n.X..\") == 3\nassert solution(\"4 4\\n.XLX\\n.X.L\\n.L..\\nL...\\n.X..\") == 4\nassert solution(\"4 4\\n.X.L\\n.XLX\\n.L.X\\nL.X..\\nL...\\n.X..\") == 3\n\"\"\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n....\\n...X\\n.LX\\n....\") == \"2\"\n\nassert solution(\"4 4\\n.XXL\\n.X.X\\n.LX.\"\n        \"\\nLXX\\n.LXX\\n.LXX\\n.LXX\") == \"1\"\n\nassert solution(\"4 4\\n.XXXL\\n.X.X\\n.LX.\"\n        \"\\nLXXL\\n.LXXL\\n.LXXL\\n.LXXL\") == \"2\"\n\nassert solution(\"4 4\\n.X..\\n.LX\\n.LX.\"\n        \"\\nL.X\\n.LX\\n.LX\\n.LX\") == \"3\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n.XLX\\n.X..\\n...L\\n.X..\\n') == 2\n"
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 4\n.LX.\n.X..\n....\n.L..\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 4\n.XLX\n.X..\n...L\n.X..\n\"\"\") == \"2\"\n\n\"\"\"\nThe solution is a little complex. Basically, we are taking a cross of $(R+1) \\times C$ cells, and putting 'L' in each of the $R$ rows and $C$ columns. Then, we will count the number of ways in which we can place 'X' such that at most two of them will be less than or equal to all the 'L' in the cross. \n\"\"\"\n\n\"\"\"\nTo count the number of ways in which we can place 'X' such that at most two of them will be less than or equal to all the 'L' in the cross, we will be using a dynamic programming approach. \n\"\"\"\n\n\"\"\"\nThe algorithm will be to consider every cell of the cross in order, and increment the answer by the number of ways in which we can place 'X' such that the cell is the only cell in the cross where we have placed 'X' and the cell immediately above it is empty (or we have placed a 'X' there). \n\"\"\"\n\n\"\"\"\nThe following is a detailed description of the algorithm.\n\nFirst, the table of the cross is initialized with all 'L' cells. We will consider each cell in the order of rows, starting from the last, until we have considered every row of the cross. We will also sort the cells in the order of their distance to the last 'X', from the farthest to the closest.\n\nThen, for each cell, we will consider the number of ways in which we can place 'X' such that the cell is the only cell in the cross where we have placed 'X' and the cell immediately above it is empty (or we have placed a 'X' there).\n\n1) We will start with the last cell (the one with distance '0'). \n\nConsider that the last cell has been placed 'X'. There are three possibilities: \n\na) The immediate cell above it is also empty. In this case, we add to the answer the number of ways in which we can place 'X' such that the cell is the only cell in the cross where we have placed 'X' and the cell immediately above it is empty (or we have placed a 'X' there). \n\nb) The immediate cell above it is occupied by a 'L'. In this case, we add to the answer the number of ways in which we can place 'X' such that the cell is the only cell in the cross where we have placed 'X' and the cell immediately above it is a 'L' (or we have placed a 'X' there). \n\nc) The immediate cell above it is occupied by a 'X'. In this case, we add to the answer the number of ways in which we can place 'X' such that the cell is the only cell in the cross where we have placed 'X' and the cell immediately above it is a 'X' (or we have placed a 'X' there).\n\n2) Now, we consider the second-last cell (the one with distance '1'). \n\nConsider that the second-last cell has been placed 'X'. There are three possibilities: \n\na) The immediate cell above it is also empty. In this case, we add to the answer the number of ways in which we can place 'X' such that the cell is the only cell in the cross where we have placed 'X' and the cell immediately above it is empty (or we have placed a 'X' there). \n\nb) The immediate cell above it is occupied by a 'L'. In this case, we add to the answer the number of ways in which we can place 'X' such that the cell is the only cell in the cross where we have placed 'X' and the cell immediately above it is a 'L' (or we have placed a 'X' there). \n\nc) The immediate cell above it is occupied by a 'X'. In this case, we add to the answer the number of ways in which we can place 'X' such that the cell is the only cell in the cross where we have placed 'X' and the cell immediately above it is a 'X' (or we have placed a 'X' there).\n\n3) And so on, until we consider the first cell. \n\nNote that we do not need to consider every cell. We only need to consider the cells on the far right and the far left of the last 'X'. \n\nFor each cell, we also need to count the number of ways in which we can place 'X' such that the cell is the only cell in the cross where we have placed 'X' and the cell immediately above it is a 'L' (or we have placed a 'X' there).\n\n4) Now, we increment the answer by the sum of the above three possibilities. \n\n5) Finally, we will return the answer. \n\nIn the example above, we have considered each cell in the order of rows, and for each cell we have computed the number of ways in which we can place 'X' such that the cell is the only cell in the cross where we have placed 'X' and the cell immediately above it is a 'L' (or we have placed a 'X' there).\n\nNote that we do not need to consider every cell, because we are only considering the far right and far left 'X'.\n\nComplexity: O(n) where n is the total number of cells in the cross.\n\"\"\"\n\n\"\"\"\nThe solution is easy to understand if you understand the above algorithm. We are taking a cross of $(R+1) \\times C$ cells. For every cell, we increment the answer by the number of ways in which we can place 'X' such that the cell is the only cell in the cross where we have placed 'X' and the cell immediately above it is a 'L' (or we have placed a 'X' there).\n\nThe complexity is O(n) because we consider every cell in the cross.\n\nImplementation:\n\nThe implementation is a little bit tricky, but easy to understand. We will be using a matrix 'dist' of dimensions $(R+1) \\times C$ and then, for every cell, we will increment the answer by the number of ways in which we can place 'X' such that the cell is the only cell in the cross where we have placed 'X' and the cell immediately above it is a 'L' (or we have placed a 'X' there).\n\nWe will store the number of ways in which we can place 'X' such that the cell is the only cell in the cross where we have placed 'X' and the cell immediately above it is a 'L' in the matrix 'dist'."
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input_1) == expected_1, \"Incorrect output for input 1\"\nassert solution(input_2) == expected_2, \"Incorrect output for input 2\"\n\n\"\"\"\nimport itertools\nimport math\nfrom collections import Counter\n\nDEBUG = False\ndata = [int(x) for x in input().split()]\nn, p, q = data\n\nstudents = []\nfriends = []\nfor _ in range(n):\n    students.append(set())\n    friends.append(set())\n\nfor _ in range(n):\n    data = [int(x) for x in input().split()]\n    num_friends = data.pop(0)\n    for i in range(num_friends):\n        friends[data[i]].add(data[i+1])\n        friends[data[i+1]].add(data[i])\n        students[data[i]].add(data[i+1])\n        students[data[i+1]].add(data[i])"
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\n\"\"\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n') == 'home'\nassert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n') == 'detention'\nassert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n') == 'detention'\n\n\"\"\"\n\nclass Vertex:\n    def __init__(self, id):\n        self.id = id\n        self.adjacent = {}\n\n    def __repr__(self):\n        return '{}: {}'.format(self.id, self.adjacent)\n\nclass Graph:\n    def __init__(self):\n        self.vertices = {}\n\n    def add_vertex(self, id):\n        self.vertices[id] = Vertex(id)\n\n    def add_edge(self, id1, id2):\n        vertex1 = self.vertices[id1]\n        vertex2 = self.vertices[id2]\n        vertex1.adjacent[id2] = vertex2\n        vertex2.adjacent[id1] = vertex1\n\n    def is_connected(self, id1, id2):\n        vertex1 = self.vertices[id1]\n        vertex2 = self.vertices[id2]\n        return id2 in vertex1.adjacent and id1 in vertex2.adjacent\n\n    def get_connected_components(self):\n        groups = []\n        for id1 in self.vertices:\n            if id1 not in groups:\n                vertex1 = self.vertices[id1]\n                for id2 in vertex1.adjacent:\n                    if id2 not in groups:\n                        vertex2 = self.vertices[id2]\n                        groups.append(id1)\n                        groups.append(id2)\n        return groups"
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 2 1\n1 1\n2 0 2\n2 1 3\n1 2''') == 'home'\nassert solution('''5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3''') == 'detention'\nassert solution('''10 4 3\n0 2\n4 3\n3 5\n7 8\n8 9\n9 10\n8 3\n5 9\n9 9\n9 10\n3 7\n5 7\n4 6\n9 10\n8 5\n7 4\n9 9\n9 10\n5 4\n4 7\n5 7\n6 8\n7 7\n8 9\n4 7\n5 10\n6 6\n8 9\n9 3\n3 4\n4 10\n7 9\n2 5\n5 4\n8 5\n7 9\n6 5\n2 2\n3 4\n7 5\n5 7\n6 9\n7 7\n9 9\n4 7\n7 4\n5 7\n9 6\n6 4\n7 3\n8 7\n5 3\n7 8\n7 10\n7 5\n8 9\n6 10\n6 6\n7 6\n5 9\n7 7\n9 9\n6 10\n9 10\n8 2\n7 4\n9 3\n7 5\n7 10\n4 10\n7 7\n8 10\n4 7\n8 4\n9 7\n5 4\n7 2\n5 6\n5 10\n5 5\n9 3\n8 6\n7 4\n8 3\n6 9\n9 10\n10 9\n5 6\n6 5\n9 10\n10 7\n6 8\n7 9\n10 2\n5 8\n6 10\n4 7\n6 4\n10 10\n8 2\n10 5\n3 4\n8 6\n4 6\n10 9\n9 9\n4 8\n7 7\n9 5\n6 6\n5 6\n6 9\n8 10\n3 4\n7 9\n9 6\n5 3\n10 2\n9 2\n10 4\n4 7\n10 7\n9 6\n6 10\n5 2\n8 5\n10 9\n8 7\n3 5\n2 5\n4 6\n5 4\n10 7\n5 3\n3 5\n2 3\n5 9\n9 3\n6 3\n10 3\n3 9\n7 5\n5 3\n7 4\n3 5\n2 4\n9 7\n9 7\n8 5\n7 3\n7 7\n9 10\n8 2\n2 1\n1 1\n2 5\n1 1\n2 2\n3 2\n4 3\n1 2\n2 3\n2 2\n1 2\n3 1\n2 7\n6 3\n10 2\n3 5\n5 2\n6 10\n5 10\n2 3\n8 4\n6 3\n4 4\n6 2\n1 9\n2 2\n2 4\n9 9\n4 7\n9 5\n2 5\n6 10\n5 2\n4 5\n4 9\n4 3\n5 8\n9 7\n3 8\n6 10\n10 9\n3 4\n7 10\n6 5\n9 3\n7 6\n8 9\n4 3\n10 6\n2 4\n8 7\n9 2\n6 6\n3 4\n5 3\n10 6\n2 9\n5 7\n9 9\n5 3\n10 5\n6 2\n4 3\n4 4\n3 6\n7 10\n9 2\n1 5\n1 4\n8 9\n5 3\n9 3\n3 2\n8 7\n1 1\n1 1\n4 6\n10 4\n5 9\n7 1\n7 5\n5 8\n9 6\n6 4\n10 7\n10 7\n10 1\n6 10\n1 1\n5 3\n9 4\n5 4\n10 3\n7 7\n7 5\n2 2\n7 7\n4 9\n1 1\n6 1\n5 6\n3 9\n4 9\n8 10\n5 1\n5 6\n9 10\n3 6\n5 1\n5 4\n4 3\n8 2\n1 3\n2 3\n5 10\n6 8\n7 10\n5 3\n7 3\n4 10\n6 10\n9 1\n7 10\n9 2\n4 7\n2 5\n10 6\n7 10\n8 9\n7 5\n9 3\n9 10\n10 3\n9 5\n2 6\n2 7\n4 3\n2 8\n4 9\n5 9\n5 6\n3 6\n4 9\n1 4\n5 7\n6 10\n6 8\n8 6\n8 7\n7 3\n5 2\n5 5\n7 6\n5 8\n7 2\n10 2\n5 3\n2 4\n7 6\n3 8\n5 9\n3 5\n5 3\n6 10\n10 7\n6 3\n4 8\n4 10\n10 1\n2 1\n6 8\n10 5\n9 6\n4 8\n7 4\n6 1\n6 1\n8 4\n4 1\n4 8\n3 1\n2 5\n9 5\n7 2\n3 2\n7 2\n2 1\n3 5\n5 2\n9 7\n2 1\n6 1\n7 2\n7 5\n8 10\n9 2\n7 7\n1 2\n8 10\n3 4\n8 1\n4 3\n5 7\n9 7\n5 7\n9 4\n3 5\n2 3\n6 5\n9 3\n3 7\n6 9\n4 4\n5 7\n6 1\n6 3\n4 9\n4 4\n3 5\n7 10\n6 10\n9 2\n8 3\n9 2\n1 8\n3 9\n10 5\n5 3\n9 4\n5 1\n7 3\n4 7\n8 2\n6 5\n7 6\n8 2\n2 2\n3 7\n8 1\n2 9\n5 9\n7 3\n3 5\n5 7\n9 8\n7 6\n4 7\n2 4\n1 8\n4 1\n2 1\n4 7"
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'detention'\nassert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n') == 'home'\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import chain"
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n4 2 1\n1 1\n2 0 2\n2 1 3\n1 2\n\"\"\"\n) == \"home\"\nassert solution(\n\"\"\"\n4 2 1\n1 1\n2 0 2\n2 1 3\n1 2\n\"\"\"\n) == \"detention\"\nassert solution(\n\"\"\"\n5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n\"\"\"\n) == \"detention\"\nassert solution(\n\"\"\"\n5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n\"\"\"\n) == \"home\"\nassert solution(\n\"\"\"\n5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n\"\"\"\n) == \"home\"\n\"\"\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n') == 'home'\nassert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n') == 'detention'\n"
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\n\"\"\"\n\n\nfrom typing import List\nfrom collections import Counter\n"
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\n\"\"\""
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\n\n\"\"\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '-1'\nassert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'"
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'"
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\n\"\"\""
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n\nimport codewars_test as test\n\n@test.describe(\"Sample tests\")\n"
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == 'zzzz'\nassert solution('yzzz') == '-1'\nprint('Test pass.')\n\n----------SOLUTION----------\n"
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"zzzz\") == \"-1\"\n\"\"\"\n\nfrom typing import Set\n"
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'\n\n\"\"\""
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'\n\nprint('Test Completed')\n\n\"\"\""
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'\nprint('Test pass.')\n\n---"
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == -1\nassert solution(\"abbcba\") == \"abbcba\"\nassert solution(\"abbccba\") == \"abbcba\"\nassert solution(\"abbccab\") == -1\n\nprint(solution(\"tralalal\"))\nprint(solution(\"zzzz\"))\nprint(solution(\"abbcba\"))\nprint(solution(\"abbccba\"))\nprint(solution(\"abbccab\"))\n"
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5\\n'\nassert solution('6\\n3 2 1 6 4 5') == '8\\n'\n\n\"\"\""
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5\\n1 2 3 4 5'\nassert solution('6\\n3 2 1 6 4 5') == '8'\n"
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\"\nassert solution(\"6\\n3 2 1 6 4 5\") == \"8\"\nprint('The code ran Correctly')"
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(int(input()))\n"
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5') == 5\nassert solution('6\\n3 2 1 6 4 5') == 8\nassert solution('3\\n3 2 1') == 3\nassert solution('1\\n1') == 1\nassert solution('2\\n1 2') == 2\n"
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5'\nassert solution('6\\n3 2 1 6 4 5') == '8'\nassert solution('7\\n1 2 3 4 5 6 7') == '14'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '24'\nassert solution('9\\n1 2 3 4 5 6 7 8 9') == '39'\n"
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\\n\"\nassert solution(\"6\\n3 2 1 6 4 5\") == \"8\\n\""
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5'\nassert solution('4\\n1 2 3 4') == '1'\nassert solution('3\\n1 2 3') == '0'\nassert solution('3\\n2 1 3') == '1'\nassert solution('5\\n1 2 3 4 5') == '5'"
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 1 6 5\") == 8\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n2') == '1'\nassert solution('1\\n2\\n3') == '1'\nassert solution('1\\n2\\n3\\n4') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"47\") == \"1\"\n\"\"\""
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"47\") == \"1\"\nassert solution(\"523\") == \"2\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''47''') == '1'\nassert solution('''523''') == '2'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('47') == 1\nassert solution('523') == 2\n\nprint('Success')"
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''47''') == '1'\nassert solution('''523''') == '2'\n'''"
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('47') == '1'\nassert solution('523') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(47)) == \"1\"\nassert solution(str(523)) == \"2\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"47\") == 1\nassert solution(\"523\") == 2\nassert solution(\"13\") == 1\n\nprint(solution(\"47\"))\nprint(solution(\"523\"))\nprint(solution(\"13\"))\n"
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"47\") == \"1\"\nassert solution(\"523\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == \"0\"\nassert solution(\"2 2\\n0 1 20\\n1 0 5\") == \"1\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20''') == '0'\n\nassert solution('''2 2\n0 1 20\n1 0 5''') == '1'\n\nassert solution('''4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20''') == '0'\n\nassert solution('''2 2\n0 1 20\n1 0 5''') == '1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20'\n) == '0\\n1 0 15\\n2 0 15'\n\"\"\"\n\nimport unittest\nfrom collections import defaultdict\nimport itertools\n\nclass UnionFind():\n    def __init__(self, n):\n        self.parents = list(range(n))\n        self.ranks = [0] * n\n        self.sizes = [1] * n\n    def union(self, a, b):\n        pa = self.find(a)\n        pb = self.find(b)\n        if pa!= pb:\n            if self.ranks[pa] == self.ranks[pb]:\n                self.ranks[pa] += 1\n            elif self.ranks[pa] > self.ranks[pb]:\n                self.parents[pb] = pa\n                self.sizes[pa] += self.sizes[pb]\n            else:\n                self.parents[pa] = pb\n                self.sizes[pb] += self.sizes[pa]\n    def find(self, a):\n        if self.parents[a] == a:\n            return a\n        self.parents[a] = self.find(self.parents[a])\n        return self.parents[a]\n    def same(self, a, b):\n        return self.find(a) == self.find(b)\n    def size(self, a):\n        return self.sizes[self.find(a)]\n    def groups(self):\n        group = defaultdict(list)\n        for a in range(len(self.parents)):\n            group[self.find(a)].append(a)\n        return group"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == \"0\\n1 1 15\"\nassert solution(\"2 2\\n0 1 20\\n1 0 5\") == \"1\\n0 1 15\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == \"0\\n1 15\\n\"\n\"\"\"\n\nn, m = list(map(int, input().split()))\n\nlst = []\nfor _ in range(m):\n    lst.append(list(map(int, input().split())))"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(output())\n"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == \"0\"\nassert solution(\"2 2\\n0 1 20\\n1 0 5\") == \"1\"\nassert solution(\"4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == \"0\"\nassert solution(\"4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == \"0\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20') == '0\\n1 10\\n1 2 10\\n1 3 5\\n2 3 10'\nassert solution('2 2\\n0 1 20\\n1 0 5') == '1\\n0 5'\nassert solution('2 2\\n0 1 20\\n1 0 5') == '1\\n0 5'\nassert solution('4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20') == '0\\n1 10\\n1 2 10\\n1 3 5\\n2 3 10'\nassert solution('2 2\\n0 1 20\\n1 0 5') == '1\\n0 5'\n\n\"\"\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == \"0\\n1 1 15\\n\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 8 12\\n1 2\\n2 3\\n3 4\") == 1\n\"\"\"\n\nimport sys\nimport math\nimport numpy"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 4\") == 1\n\"\"\""
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5') == '5'\nassert solution('4 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4') == '1'\n\"\"\"\n\nn, m = map(int, input().split())\nl = list(map(int, input().split()))\n\nA = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    A.append([a, b])\n\nf = [0] * n\nf[0] = l[0]\nf[1] = l[1]\n\nfor i in range(2, n):\n    f[i] = max(f[i-1], f[i-2] + l[i])\n\na = 0\nfor i in range(m):\n    if f[A[i][0]-1] < f[A[i][1]-1]:\n        a += 1\nprint(a)"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('1\\n1\\n') == '0'\nassert solution('1\\n1\\n1\\n2\\n2\\n3\\n3\\n') == '3'\nassert solution('1\\n1\\n1\\n2\\n2\\n3\\n3\\n4\\n4\\n') == '3'\n"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4\\n\") == \"1\"\nassert solution(\"4 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 6\n1 3 2 1 5\n1 3\n2 3\n1 4\n3 5\n4 5\n2 5''') == '5'\nassert solution('''4 3\n4 4 8 12\n1 2\n2 3\n3 4''') == '1'\n"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5') == 5\nassert solution('4 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4') == 1\n"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('7 6') == '2'\nassert solution('1 3 2 1 5') == '5'\nassert solution('1 3') == '1'\nassert solution('2 3') == '0'\n"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5\") == 5\n\"\"\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5\") == '5'\nassert solution(\"4 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4\") == '1'\n\"\"\"\n\nn, m = map(int, input().split())\nhouses = list(map(int, input().split()))\nroads = []\nfor _ in range(m):\n    roads.append(tuple(map(int, input().split())))"
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''020302''') == '7'\nassert solution('''1311''') == '24'\nassert solution('''11''') == '12'\n\nprint('all tests passed')\n\n\"\"\""
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('020302') == 7\nassert solution('1311') == 24\nassert solution('11') == 12\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"020302\") == 7\nassert solution(\"1311\") == 24\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"020302\") == 7\nassert solution(\"1311\") == 24\n"
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('020302') == 7\n"
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"020302\") == 7\nassert solution(\"1311\") == 24\nassert solution(\"11\") == 12\n"
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"020302\") == 7\nassert solution(\"1311\") == 24\n"
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"020302\") == 7\n\"\"\"\n\n\"\"\"\nPROBLEM STATEMENT:\nMr. Panda needs to backup all the data on his computer to allow him to do a full upgrade of his computer. Since the upgrade will take some time, he will peruse the services of the company ACM (Association of Computer Maintenance) that provides storage servers for him to temporarily store his data.\n\nSince ACM offers storage servers of any size, ACM wants to encourage more bulk purchases of servers of the same size as this saves cost. The cost of purchasing a set of storage servers that can each store $M$ bytes consists of a base cost of $M$ dollars plus $1$ dollar for every server of that size purchased.\n\nMr. Panda wants to store a total of $K$ bytes of data and in order to easily track the servers, he wants to purchase a set of storage servers of the same size to store the $K$ bytes of data using the least cost. However, Mr. Panda feels compelled not to waste any space. Thus, he requires that the total storage space of the servers purchased must be exactly $K$ bytes.\n\nAs storage space of technology increases exponentially with time, $K$ can be very large. You are given the prime factorization of $K$. Help Mr. Panda calculate the minimum cost required to store his data. As the minimum cost can be quite large, print the minimum cost modulo a prime number $10^9+7$.\n\n-----Input-----\nThe input consists of one line with a string of even length consisting of at most $700$ representing the prime factorization of $K$. Every pair of two consecutive digits, starting from the first two digits, represents one prime factor. So input of length $N$ will have $N/2$ prime factors.\n\nIt is guaranteed that all the prime factors given are prime and that $K$ has at most $10^{10}$ divisors. Each prime factor will appear at most $100$ times.\n\n-----Output-----\nOutput the minimum cost in one line as a single integer.Sample Data Explanation\n\nIn the first example, $K = 2 \\cdot 3 \\cdot 2 = 12$, so buy three servers with $M = 4$ bytes. Mr. Panda pays $4$ dollars base cost plus $3$ dollars for three servers purchased, or a total of $4+3 = 7$ dollars. Mr. Panda can also buy four servers with $M = 3$ bytes with the same cost of $7$ dollars.\n\nIn the second example, $K = 13 \\cdot 11 = 143$, so buy eleven servers with $M = 13$ bytes. Mr. Panda pays $13$ dollars base cost plus $11$ dollars for eleven servers purchased, or a total $13+11 = 24$ dollars. Mr. Panda can also buy thirteen servers with $M = 11$ bytes with the same cost of $24$ dollars.\n\nIn the third example, $K = 11$, so buy one server with $M = 11$ bytes. Mr. Panda pays $11$ dollars base cost plus $1$ dollar for one server purchased, or a total $11+1 = 12$ dollars. Note that although he can get a cheaper cost if he were to purchase storage servers of different sizes, he cannot do so.\n\n-----Examples-----\nSample Input 1:\n020302\nSample Output 1:\n7\n\nSample Input 2:\n1311\nSample Output 2:\n24"
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"020302\") == \"7\"\nassert solution(\"1311\") == \"24\"\n\"\"\"\n\nfrom typing import List\nfrom math import gcd\n\nfrom collections import defaultdict"
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"020302\") == 7\nassert solution(\"1311\") == 24\n\"\"\"\n\nimport sys\n\nfrom collections import Counter\nfrom typing import Tuple\n\nfrom input_utils import decode_input\n"
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########\") == \"3 1 3 10\"\nassert solution(\"5 20\\n###########.#.#.#.#.\\n###########...#.###.\\n##########..##.#..##\\n###########..#.##.##\\n###########.###...#.\\n\") == \"1 15 5 15\"\nassert solution(\"5 20\\n###########.#.#.#.#.\\n###########...#.###.\\n##########..##.#..##\\n###########..#.##.##\\n###########.###...#.\\n\") == \"1 15 5 15\"\nassert solution(\"5 20\\n###########.#.#.#.#.\\n###########...#.###.\\n##########..##.#..##\\n###########..#.##.##\\n###########.###...#.\\n\") == \"1 15 5 15\"\n\"\"\""
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########\\n\") == \"3 1 3 10\"\nassert solution(\"5 20\\n#.#.#.#.#\\n#.#.#.#.#\\n#.#.#.#.#\\n#.#.#.#.#\\n#...#.#.#\\n#.##.#.#.\\n##########\\n##########\\n\") == \"1 15 5 15\"\nassert solution(\"5 20\\n#.##..#..\\n####.#...\\n#.#.###..\\n#.#.#..##\\n#.#.##..#\\n#.#####.#\\n#...#.#.#\\n#.####.#.\\n#..###.#.\\n\") == \"1 4 4 16\"\nassert solution(\"5 20\\n#.##..#..\\n####.#...\\n#.#.#..##\\n#.#.##..#\\n#.#.##..#\\n#.###.#.#\\n#...#.#.#\\n#.###.#.#\\n#..#.#.#.\\n\") == \"1 1 1 1 1\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########\") == \"3 1 3 10\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########\") == \"3 1 3 10\"\nassert solution(\"5 20\\n###########.#.#.#.#.\\n###########...#.###.\\n##########..##.#..##\\n###########..#.##.##\\n###########.###...#.\\n\") == \"1 15 5 15\"\nassert solution(\"5 20\\n###########.#.#.#.#.\\n###########...#.###.\\n##########..##.#..##\\n###########..#.##.##\\n###########.###...#.\\n\") == \"1 15 5 15\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########\") == \"3 1 3 10\"\nassert solution(\"5 20\\n###########.#.#.#.#.\\n###########...#.###.\\n##########..##.#..##\\n###########..#.##.\\n###########.###...#.\\n\") == \"1 15 5 15\"\n\"\"\""
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".#.#.#\") == \"1 1 4 4\"\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport sys\nimport math\nimport collections\nfrom itertools import permutations\nfrom collections import deque\nimport heapq\nfrom typing import List\n"
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".#..##.###...#######\") == (3,1,3,10)\n\"\"\""
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n\"\"\"\n\nimport re\nimport math\n\npattern = re.compile(r'(\\d+)\\s+(\\d+\\.\\d{3})')"
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n\"\"\""
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\nprint('The solution is correct!')\n\n2. Modular Arithmetic\nThe modulus $N$ is a positive integer greater than or equal to 2. The modulus $M$ is a positive integer greater than or equal to $1$, and $M$ is congruent to $0$ modulo $N$.\n\nThe modulus $M$ is also called the modulus in modular arithmetic, and the modulus $N$ is called the modulus base in modular arithmetic.\n\nA simple way to make modulus arithmetic easier is to use the notation $a \\bmod n$ instead of $a \\mod n$ where $a$ and $n$ are integers. Since $n$ is an integer greater than or equal to 2, we can define $n-1$ to be zero.\n\nThe modulus operator is also defined as the division operator in the standard number system, i.e., $a \\bmod n = a \\pmod n$\n\nWhen we use modulus arithmetic in our implementation, we need to deal with cases where $n$ is not a positive integer. In this case, we return the value -1, since we cannot deal with fractional numbers.\n\nLet $a \\pmod n = b \\pmod n$ be the modulus operator defined above. Then $a \\pmod n = b \\pmod n$ if and only if $b \\pmod n = a \\pmod n$. This property is called the modular inverse property.\n\nLet $a$ be a positive integer greater than or equal to 2 and let $n$ be a positive integer greater than or equal to 2. Let $b$ be a positive integer and let $b \\pmod n = a$ be the modulus operator defined above. Let $x$ be an integer greater than or equal to 2.\n\nWe call $x$ a generator of $n$ if $x$ generates $n$ as a subgroup. For example, if $a=3 \\pmod 5$, then $3 \\pmod 5 = \\pmod {5^2} = 1 \\pmod{5^2} = \\pmod 5$ and $3 \\pmod {5^2} = \\pmod 5$. Therefore, $3$ is a generator of $5$.\n\nWe call $x$ a primitive generator of $n$ if $x$ is a generator of $n$ and $x^m \\bmod n = 1 \\bmod n$ for all $m$ such that $m \\neq 0$. We call $x$ a primitive $n$-generator if $x$ is a primitive generator of $n$.\n\nGiven $n$ and $x$, we define $a \\pmod n = x^m \\bmod n$ where $m$ is an integer greater than or equal to 2 and $a$ is a positive integer greater than or equal to 2. The modulus operator is also defined for $a = \\pmod n$.\n\nGiven $a$ and $n$ where $a$ is a positive integer greater than or equal to 2 and $n$ is a positive integer greater than or equal to 2, write a program to test if $a$ is a generator of $n$. If $a$ is a generator of $n$, your program should output \u201cYES\u201d and otherwise output \u201cNO\u201d.\n\nNote: We recommend that you write your own test cases for this problem.\n\n-----Input-----\nThe input consists of a single line containing the string $a \\pmod n$ and the string $n$. $a$ and $n$ are positive integers greater than or equal to 2.\n\n-----Output-----\nThe output should be a single line containing either \u201cYES\u201d or \u201cNO\u201d.\n\n-----Examples-----\nSample Input 1:\n3 3\nSample Output 1:\nNO\n\nSample Input 2:\n8 7\nSample Output 2:\nYES\n\nSample Input 3:\n19 7\nSample Output 3:\nNO\n\nSample Input 4:\n15 8\nSample Output 4:\nYES\n\nSample Input 5:\n26 15\nSample Output 5:\nNO\n\nSample Input 6:\n21 3\nSample Output 6:\nYES\n\nSample Input 7:\n81 20\nSample Output 7:\nYES\n\n3. Modified Fibonacci Numbers\nIn number theory, the Fibonacci numbers are a family of sequences that can be used to generate the integers 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, \u2026 The Fibonacci numbers are also known as the Lucas numbers.\n\nThe Fibonacci numbers are defined recursively, with $F(n) = F(n-1) + F(n-2)$, $F(1) = F(2) = 1$.\n\nWrite a program that computes the $n^{th}$ Fibonacci number $F(n)$.\n\n-----Input-----\nThe input consists of a single integer, $n$.\n\n-----Output-----\nThe output should be the integer value $F(n)$.\n\n-----Examples-----\nSample Input 1:\n7\nSample Output 1:\n13\n\nSample Input 2:\n2\nSample Output 2:\n1\n\nSample Input 3:\n4\nSample Output 3:\n3\n\nSample Input 4:\n0\nSample Output 4:\n0\n\nSample Input 5:\n-1\nSample Output 5:\n-1\n\nSample Input 6:\n1\nSample Output 6:\n1\n\nSample Input 7:\n10\nSample Output 7:\n55\n\nSample Input 8:\n5\nSample Output 8:\n8\n\nSample Input 9:\n0\nSample Output 9:\n0\n\nSample Input 10:\n-2\nSample Output 10:\n-1\n\n4. Trailing Zeroes\nWrite a program that reads a positive integer, $n$, and outputs the number of trailing zeroes in $F(n)$.\n\n-----Input-----\nThe input consists of a single integer, $n$.\n\n-----Output-----\nThe output should be the integer value $F(n)$.\n\n-----Examples-----\nSample Input 1:\n7\nSample Output 1:\n1\n\nSample Input 2:\n3\nSample Output 2:\n0\n\nSample Input 3:\n0\nSample Output 3:\n0\n\nSample Input 4:\n1\nSample Output 4:\n0\n\nSample Input 5:\n2\nSample Output 5:\n0\n\nSample Input 6:\n5\nSample Output 6:\n1\n\nSample Input 7:\n10\nSample Output 7:\n2\n\nSample Input 8:\n33\nSample Output 8:\n7\n\nSample Input 9:\n45\nSample Output 9:\n10\n\nSample Input 10:\n100\nSample Output 10:\n21\n\nSample Input 11:\n101\nSample Output 11:\n0\n\nSample Input 12:\n230\nSample Output 12:\n7\n\nSample Input 13:\n280\nSample Output 13:\n9\n\nSample Input 14:\n290\nSample Output 14:\n8\n\nSample Input 15:"
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"50 0.125\") == \"16.339203308\"\nassert solution(\"201 1.000\") == \"5.000000000\"\n\"\"\"\n\nn, p = input().split()\np = float(p)\nn = int(n)\n\nprint(int(n * (1 - p) * 100))\n"
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"50 0.125\") == \"16.339203308\"\n\nSample Case:\n50 0.125\n\"\"\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"50 0.125\") == \"16.339203308\"\n\"\"\""
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"50 0.125\") == \"16.339203308\"\nassert solution(\"201 1.000\") == \"5.000000000\"\n\"\"\""
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('50 0.125') == '16.338581683'\nassert solution('201 1.000') == '5.0000000000'\nprint('The solution is correct!')\n\n----\n\nSample Input 1:\n50 0.125\nSample Output 1:\n16.338581683\nSample Input 2:\n201 1.000\nSample Output 2:\n5.0000000000\n"
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n0.5 1\\n1 11\") == \"2\"\nassert solution(\"4 3\\n1 11\\n0.4 1\") == \"3\"\n\"\"\"\n\nimport unittest\nimport numpy as np\nfrom collections import Counter\n"
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n0.5 1\\n\") == '3'\nassert solution(\"4 3\\n1 11\\n0.4 1\\n\") == '3'\nprint('The code ran Correctly')\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n0.5 1\\n1 11\\n0.4 1\") == \"3\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 2\n0.5 1\n0.6 1\n''') == \"2\"\nassert solution('''4 3\n0.6 1\n0.5 1\n0.4 1\n0.4 1\n''') == \"3\""
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n0.5 1\\n0.4 1\\n') == '3'\n\"\"\"\nfrom collections import Counter\nimport math\n\n\"\"\"\n2 2\n0.5 1\n0.4 1\n\"\"\""
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 2\n0.5 1\n0.4 1''') == '2'\nassert solution('''4 3\n1 11\n0.4 1\n1 10\n0.6 1''') == '3'\nassert solution('''4 4\n0.5 1\n0.4 1\n0.3 1\n0.2 1''') == '1'\nassert solution('''3 3\n0.5 1\n0.4 1\n0.3 1\n0.2 1''') == '0'\nassert solution('''5 2\n0.5 1\n0.4 1\n0.3 1\n0.2 1\n0.1 1''') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n0.5 1\\n0.4 1') == '3'\nassert solution('4 3\\n1 11\\n0.4 1\\n0.6 1') == '2'\n\n'''\nfrom typing import List\nimport math\n\nDEBUG = False\ndata = list(map(int, '4 3\\n1 11\\n0.4 1\\n0.6 1'.split()))\nk, v = data[0:2]\np = [0] + data[2:]\n\nassert k == 2\nassert v == 4\nassert len(p) == 4\n"
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_one) == expected_result_one\nassert solution(test_input_two) == expected_result_two\n"
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n0.5 1\\n0.2 1') == '2'\nassert solution('4 3\\n0.4 1\\n0.2 1\\n0.1 1') == '3'\nassert solution('4 3\\n0.2 1\\n0.2 1\\n0.1 1') == '2'\nassert solution('4 3\\n0.2 1\\n0.1 1\\n0.1 1') == '3'\n\nassert solution('2 3\\n0.4 1\\n0.2 1\\n0.1 1') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\n\n\"\"\"\n\ubb38\uc81c \uc124\uba85\nBinary Town is holding its biennial elections. All $k$ positions on its council are open, and as usual Notnomde and Yraglac are the only ones running for each position.\n\nHaving long since abandoned quaint majority voting, Binary Town uses binary voting instead. In binary voting, all $v$ voters can cast any number of ballots, or not vote at all. The $k^\\mathrm {th}$ least significant bits of the total number of ballots are then used to determine which candidate wins each position. That is, Notnomde wins position $j$ if the $j^\\mathrm {th}$ least significant bit of the total number of ballots is $0$, otherwise Yraglac wins.\n\nYou know your neighbours well, and know exactly how many ballots $b_ i$ each one will cast if they choose to vote. For some reason, not everyone is happy with the electoral system so not everyone votes. Thankfully, you also know the probability $p_ i$ of each citizen voting.\n\nSince you like Yraglac more than Notnomde, you want to cast the number of ballots which maximizes the expected number of positions held by Yraglac.\n\nSuppose there are $k = 2$ positions and $v = 2$ voters, and you know with $50\\% $ probability that the voter other than yourself will cast one ballot. If you cast one ballot, the total number of ballots could be $01_2$ or $10_2$ with equal probability, so the expected number of positions for Yraglac is $1$. If you cast two ballots, the total number of ballots could be $10_2$ or $11_2$ with equal probability, making Yraglac\u2019s expected number of positions $1.5$. In this case, you then decide to cast two ballots since that maximizes Yraglac\u2019s expected number of positions.\n\n-----Input-----\nThe first line contains two space-separated integers $1 \\leq k \\leq 16$, the number of positions, and $2 \\leq v \\leq 100$, the number of voters (including yourself). It is followed by $v - 1$ lines, each containing two space-separated numbers: a decimal $0 \\leq p_ i \\leq 1$, the probability of voter $i$ casting ballots, and an integer $0 \\leq b_ i \\leq 2^k - 1$, the number of ballots voter $i$ would cast should they vote.\n\n-----Output-----\nOutput on a single line the number of ballots $0 \\leq b_ v \\leq 2^k - 1$ you should cast to maximize the expected number of positions held by Yraglac. The answer is guaranteed to be unique.\n\n-----Examples-----\nSample Input 1:\n2 2\n0.5 1\nSample Output 1:\n2\n\nSample Input 2:\n4 3\n1 11\n0.4 1\nSample Output 2:\n3\n\"\"\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n7 1\\n3 2\\n10 0\\n\") == \"10.5\"\n\"\"\"\n\nimport sys\nimport math\nimport stdio\nimport stdarray"
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 1\\n3 2\\n10 0\") == \"10.5\"\nassert solution(\"3 1\\n2 0\\n0 3\") == \"-1\"\n\"\"\"\n\nn = int(input())\ndata = [list(map(int, input().split())) for _ in range(n)]\ndata.sort(key=lambda x: x[0], reverse=True)\n\nbefore = 0\nans = 0\nfor k in range(n):\n    before += data[k][0]\n    if before * data[k][1] < before * data[k][2]:\n        ans += (before * data[k][1] - before * data[k][2]) // data[k][1]\n        before = before * data[k][1]\n    else:\n        ans += (before * data[k][2] - before * data[k][1]) // data[k][2]\n        before = before * data[k][2]\n\nprint(ans)\n"
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n7 1\\n3 2\\n10 0') == '10.5'\n\nimport sys\nimport math\n"
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n7 1\\n3 2\\n10 0\\n\") == \"10.5\"\n\"\"\""
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n7 1\\n3 2\\n10 0') == '10.5'\nassert solution('3\\n2 1\\n4 0\\n0 3') == '-1'\n\"\"\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n7 1\\n3 2\\n10 0\") == \"10.5\"\n\"\"\"\n\nn = int(input())\nl = [0 for _ in range(n)]\nb = [0 for _ in range(n)]\n\nfor i in range(n):\n    l[i], b[i] = [int(j) for j in input().split()]\n\nf = list(map(lambda x: x / sum(b), b))\n\nans = sum(l) / n\n\nprint(ans) if ans.is_integer() else print(-1)\n"
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(r'input_9_2.txt').read()) == open(r'output_9_2.txt').read()\nprint('Test passed')\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n7 1\n3 2\n10 0''') == '10.5'\nassert solution('''3\n2 1\n4 0\n0 3''') == '-1'\n\n'''\nSolution:\n1. The problem is solved using simple Knapsack problem.\n2. We can use the concept of ratios to solve this problem.\n3. We can use the concept of ratios to solve this problem.\n4. We can use the concept of ratios to solve this problem.\n'''\n"
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n7 1\\n3 2\\n10 0') == '10.5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n7 1\n3 2\n10 0''') == '10.5'\n"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == '2'\n\nprint(solution(\"2 0.5\\n2 0.51\\n1 0.49\"))\n"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == '2'\n"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == \"2\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'\n\"\"\"\n\nn, p = map(float, input().split())\n\nenergy = 0\nprob = 0\nfor _ in range(int(n)):\n    x, y = map(float, input().split())\n    if y > p:\n        energy += x\n    elif prob < y:\n        prob = y\n        energy += x\n\nprint(energy)\n"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 0.5\\\\n2 0.51\\\\n1 0.49') == '2'\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == \"2\"\nassert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == \"2\"\n\n'''\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2 0.5\n2 0.51\n1 0.49\n''') == '2'\n\nassert solution('''\n2 0.5\n2 0.51\n1 0.49\n''') == '2'\n\nassert solution('''\n1 0.5\n''') == '1'\n\nassert solution('''\n3 0.5\n3 0.51\n2 0.49\n''') == '1'\n\nassert solution('''\n3 0.5\n3 0.51\n2 0.49\n3 0.51\n3 0.51\n''') == '3'"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\n'''\n\nfrom collections import defaultdict\n\nn, p = map(float, input().split())\nboxes = list(map(float, input().split()))\n\nenergy = defaultdict(int)\n\nfor i in range(n):\n    energy[i] = boxes[i]*boxes[i]\n\nmax_energy = max(energy.values())\n\nfor i in range(n):\n    if energy[i] / max_energy >= p:\n        print(i)\n        break\n    else:\n        continue\n"
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == \"2\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'yes'\n'''"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3') == 'yes'\nassert solution('4 5 4\\n1 1 2 2 2\\n0 1\\n2 3\\n3 4\\n4 2') == 'yes'\n\n\"\"\"\n\nimport sys\n\nn, m, k = [int(i) for i in sys.stdin.readline().split()]\ncap = [[int(i) for i in sys.stdin.readline().split()] for _ in range(n)]\nedits = [int(i) for i in sys.stdin.readline().split()]\n\nconnections = [[int(i) for i in sys.stdin.readline().split()] for _ in range(m)]\n\nc = dict()\nfor i in range(n):\n    for j in range(cap[i][0]):\n        c[i+1, j+1] = c.get((i+1, j+1), []) + [(i, j)]"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\\n\") == \"yes\"\nassert solution(\"5 4 4\\n1 1 2 2 2\\n0 1\\n2 3\\n3 4\\n4 2\\n\") == \"yes\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'yes'\nassert solution('1\\n1') == 'yes'\nassert solution('1\\n0') == 'yes'\nassert solution('2\\n1') == 'no'\nassert solution('2\\n2') == 'yes'\n"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\\n\") == \"yes\"\n\n'''\n\nn, m, k = list(map(int, stdin.readline().split()))\nconnections = list(map(int, stdin.readline().split()))\nconnections.sort()\n"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\\n') == 'yes'\nassert solution('4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\\n') == 'yes'\n\nimport re\n"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3''') == 'yes'\nassert solution('''5 4 4\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2''') == 'yes'"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\") == \"yes\"\nassert solution(\"4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\") == \"no\"\nassert solution(\"4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\") == \"yes\"\n\n\"\"\""
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'yes'\nassert solution('5 4 4\\n1 1 2 2 2\\n0 1\\n2 3\\n3 4\\n4 2\\n') == 'yes'\nassert solution('4 4 4\\n1 1 2 2 2\\n0 1\\n2 3\\n3 4\\n4 2\\n') == 'yes'\nassert solution('4 5 4\\n1 1 2 2 2\\n0 1\\n2 3\\n3 4\\n4 2\\n') == 'no'\nassert solution('5 5 4\\n1 1 2 2 2\\n0 1\\n2 3\\n3 4\\n4 2\\n') == 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3') == 'yes'\nassert solution('4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3') == 'no'"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n') == '2\\n1\\n2\\n3\\n4\\n5\\n'\n\n'''\n\nSample Input 1:\n3\n5\n5\n5\nSample Output 1:\n2\n1\n2\n\nSample Input 2:\n4\n20\n15\n17\n14\nSample Output 2:\n5\n8\n2\n7\n\nSample Input 3:\n6\n1\n0\n5\n5\n8\n2\nSample Output 3:\n4\n5\n0\n2\n3\n7\n\nSample Input 4:\n7\n0\n2\n5\n4\n7\n2\n9\n0\nSample Output 4:\n2\n9\n0\n2\n0\n0\n4\n0\n\nSample Input 5:\n7\n6\n5\n5\n3\n7\n8\n4\nSample Output 5:\n2\n9\n0\n2\n8\n4\n6\n3\n\nSample Input 6:\n7\n3\n4\n4\n1\n5\n6\n5\nSample Output 6:\n2\n9\n0\n2\n8\n4\n6\n3\n\nSample Input 7:\n8\n7\n8\n5\n5\n5\n6\n3\n3\nSample Output 7:\n4\n6\n0\n2\n9\n3\n0\n5\n8\n7\n\nSample Input 8:\n8\n2\n1\n5\n4\n6\n3\n5\n1\nSample Output 8:\n0\n1\n2\n4\n5\n3\n0\n6\n\n'''\n\nimport sys\nimport math\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5\\n5\\n5\\n\") == \"2\\n1\\n2\\n\"\nassert solution(\"4\\n20\\n15\\n17\\n14\\n\") == \"5\\n8\\n2\\n7\\n\"\n\"\"\"\n\nn = int(input())\nlst = list(map(int, input().split()))\nlst2 = lst + lst"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5\\n5\\n5\") == \"2\\n1\\n2\\n\"\nassert solution(\"4\\n20\\n15\\n17\\n14\") == \"5\\n8\\n2\\n7\\n\"\nassert solution(\"5\\n10\\n20\\n15\\n17\") == \"5\\n8\\n2\\n7\\n\"\nassert solution(\"3\\n7\\n7\\n7\") == \"2\\n1\\n2\\n\"\nassert solution(\"4\\n10\\n20\\n15\\n17\") == \"5\\n8\\n2\\n7\\n\"\n\"\"\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    3\n    5\n    5\n    5\n    \"\"\"\n) == \"\"\"\n2\n1\n2\n\"\"\"\n\nassert solution(\n    \"\"\"\n    4\n    20\n    15\n    17\n    14\n    \"\"\"\n) == \"\"\"\n5\n8\n2\n7\n\"\"\"\n\nassert solution(\n    \"\"\"\n    5\n    5\n    5\n    5\n    5\n    \"\"\"\n) == \"\"\"\n2\n1\n2\n\"\"\"\n\nassert solution(\n    \"\"\"\n    100\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    16\n    17\n    18\n    19\n    20\n    21\n    22\n    23\n    24\n    25\n    26\n    27\n    28\n    29\n    30\n    31\n    32\n    33\n    34\n    35\n    36\n    37\n    38\n    39\n    40\n    41\n    42\n    43\n    44\n    45\n    46\n    47\n    48\n    49\n    50\n    51\n    52\n    53\n    54\n    55\n    56\n    57\n    58\n    59\n    60\n    61\n    62\n    63\n    64\n    65\n    66\n    67\n    68\n    69\n    70\n    71\n    72\n    73\n    74\n    75\n    76\n    77\n    78\n    79\n    80\n    81\n    82\n    83\n    84\n    85\n    86\n    87\n    88\n    89\n    90\n    91\n    92\n    93\n    94\n    95\n    96\n    97\n    98\n    99\n    100\n    \"\"\"\n) == \"\"\"\n2\n1\n2\n\"\"\"\n\nassert solution(\n    \"\"\"\n    10\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    16\n    17\n    18\n    19\n    20\n    21\n    22\n    23\n    24\n    25\n    26\n    27\n    28\n    29\n    30\n    31\n    32\n    33\n    34\n    35\n    36\n    37\n    38\n    39\n    40\n    41\n    42\n    43\n    44\n    45\n    46\n    47\n    48\n    49\n    50\n    51\n    52\n    53\n    54\n    55\n    56\n    57\n    58\n    59\n    60\n    61\n    62\n    63\n    64\n    65\n    66\n    67\n    68\n    69\n    70\n    71\n    72\n    73\n    74\n    75\n    76\n    77\n    78\n    79\n    80\n    81\n    82\n    83\n    84\n    85\n    86\n    87\n    88\n    89\n    90\n    91\n    92\n    93\n    94\n    95\n    96\n    97\n    98\n    99\n    100\n    \"\"\"\n) == \"\"\"\n2\n1\n2\n\"\"\""
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n5\\n5\\n5') == '2\\n1\\n2\\n'\nassert solution('4\\n20\\n15\\n17\\n14') == '5\\n8\\n2\\n7\\n'\nassert solution('4\\n20\\n15\\n17\\n14\\n') == '8\\n5\\n2\\n7\\n'\n\n------\n4\n20\n15\n17\n14\n\"\"\"\n\nfrom __future__ import annotations\n"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n5\\n5\\n5\") == \"2\\n1\\n2\\n\"\nassert solution(\"4\\n20\\n15\\n17\\n14\") == \"5\\n8\\n2\\n7\\n\"\nassert solution(\"5\\n8\\n6\\n9\\n12\") == \"9\\n6\\n3\\n2\\n\"\nassert solution(\"5\\n9\\n10\\n14\\n12\") == \"6\\n4\\n2\\n8\\n\"\nassert solution(\"5\\n9\\n10\\n14\\n12\") == \"6\\n4\\n2\\n8\\n\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5\\n5\\n5\") == \"2\\n1\\n2\\n\"\nassert solution(\"4\\n20\\n15\\n17\\n14\") == \"5\\n8\\n2\\n7\\n\"\n\"\"\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5\\n5\\n5\\n\") == '2\\n1\\n2\\n'\nassert solution(\"4\\n20\\n15\\n17\\n14\\n\") == '5\\n8\\n2\\n7\\n'"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5\\n5\\n5\") == \"2\\n1\\n2\\n\"\nassert solution(\"4\\n20\\n15\\n17\\n14\") == \"5\\n8\\n2\\n7\\n\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == ''\n\nassert solution('3\\n5\\n5\\n5') == '2\\n1\\n2'\nassert solution('4\\n20\\n15\\n17\\n14') == '5\\n8\\n2\\n7'\nassert solution('7\\n23\\n43\\n25\\n52\\n13\\n51\\n20\\n28\\n42\\n20\\n36\\n15') == '5\\n8\\n2\\n7\\n8\\n2\\n7'\n"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\npython\\np^ main.py\\n^ -n 10\") == \"python\\npython main.py\\npython main.py -n 10\"\nassert solution(\"5\\npython\\njava\\n^\\n^^^\\n^^^\") == \"python\\njava\\npython\\njava\\npython\"\n-----Problem-----\nYou are given a history of a user\u2019s commands. The last command of each line in the input is an up-key character. You are to output the resulting command history.\n\n-----Input-----\nThe first line contains the number of lines in the input $n$, where $1 \\leq n \\leq 100000$.\n\nEach of the following $n$ lines contains a string with characters from the alphabet $\\big [$a-zA-Z0-9.^-\\big ]$, where each character is separated by exactly one space.\n\n-----Output-----\nFor each command in the input output a line with the completed command (where all \u201c^\u201d are expanded). The total amount of output is guaranteed to be at most $10^6$ characters.\n\n-----Sample Input-----\n3\npython\np^ main.py\n^ -n 10\nSample Output:\npython\npython main.py\npython main.py -n 10\n-----Explanation-----\nIn Sample Input $1$ your first command is \u201cpython\u201d. Your next command gets auto completed to \u201cpython\u201d, and then you write \u201c main.py\u201d, which is appended to your command making \u201cpython main.py\u201d. The last command completes the first up press to \u201cpython main.py\u201d, then \u201c -n 10\u201d is typed which becomes \u201cpython main.py -n 10\u201d.\n\nIn Sample Input $2$ your first two commands are \u201cpython\u201d and \u201cjava\u201d. The third command becomes auto completed to java, your previous command. The fourth command completes to \u201cpython\u201d since it was your third last command. For your fifth command the third last command auto completed is now \u201cjava\u201d.\n\nIn Sample Input $3$ no commands are in your history, so your up presses have no effect and only the non up presses count to your command making \u201cpython\u201d.\n\"\"\""
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3\npython\np^ main.py\n^ -n 10\n\"\"\"\n) == \"\"\"\npython\npython main.py\npython main.py -n 10\n\"\"\"\n\nassert solution(\n\"\"\"\n5\npython\njava\n^\n^^^\n^^^\n\"\"\"\n) == \"\"\"\npython\njava\npython\njava\npython\n\"\"\"\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\npython\\np^ main.py\\n^ -n 10') == 'python\\npython main.py\\npython main.py -n 10'\nassert solution('5\\npython\\njava\\n^\\n^^^\\n^^^') == 'python\\njava\\njava\\npython\\njava'\n\"\"\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\npython\\np^ main.py\\n^ -n 10\\n\") == 'python\\npython main.py\\npython main.py -n 10'\nassert solution(\"5\\npython\\njava\\n^\\n^^^\\n^^^\") == 'python\\njava\\njava\\npython\\njava'\n\"\"\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\npython\") == \"python\"\nassert solution(\"3\\npython\\njava\\npython\") == \"python\\njava\\npython\"\nassert solution(\"3\\npython\\njava\\npython\\njava\\npython\") == \"python\\njava\\npython\\njava\\npython\"\n\n\"\"\"\n\nfrom collections import deque\n\nwith open(\"input.txt\", \"r\") as file:\n    lines = file.read().splitlines()\n\nn = int(lines[0])\nqueue = deque(lines[1:])\n\nhistory = []\n\nwhile queue:\n    line = queue.popleft()\n\n    if line[-1] == \"^\":\n        history.append(line)\n\n    else:\n        complete_line = history.pop() + line\n        queue.appendleft(complete_line)\n\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"\\n\".join(history))\n"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\npython\\nmain.py\\n^ -n 10\\n\") == \"python main.py -n 10\"\nassert solution(\"5\\npython\\njava\\n^\\n^^^\\n^^^\\n\") == \"python\"\nassert solution(\"1\\npython\") == \"python\"\nassert solution(\"2\\npython\\njava\") == \"python\"\nassert solution(\"3\\npython\\njava\") == \"java\"\n\n\"\"\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\npython\\npython ^ main.py\\n^ -n 10\") == \"python main.py\"\nassert solution(\"2\\npython\\njava\\n^\\n^^^\\n^^^\") == \"python java\"\nassert solution(\"3\\npython\\njava\\n^\\n^^^\\n^^^\") == \"python\"\nassert solution(\"4\\npython\\njava\\n^\\n^^^\\n^^^\") == \"python\"\n\n\"\"\"\n\nimport sys\nimport re\nimport math\nfrom typing import List\n"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\npython\\np^ main.py\\n^ -n 10\\n\") == \"python\\npython main.py\\npython main.py -n 10\\n\"\nassert solution(\"5\\npython\\njava\\n^\\n^^^\\n^^^\\n\") == \"python\\njava\\njava\\npython\\njava\\n\"\nassert solution(\"5\\npython\\njava\\n^\") == \"python\\njava\\njava\\n\"\n\"\"\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == 'python\\npython main.py\\npython main.py -n 10\\njava\\njava\\npython\\njava'"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\npython\\np^ main.py\\n^ -n 10\") == \"python\\npython main.py\\npython main.py -n 10\"\nassert solution(\"5\\npython\\njava\\n^\\n^^^\\n^^^\") == \"python\\njava\\njava\\npython\\njava\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hitehre') == 'impossible'\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hitehre') == 'impossible'\nassert solution('htehsse') == 'ambiguous'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"hitehre\") == \"impossible\"\nassert solution(\"ahisthisdicethiswordisasentence\") == \"ambiguous\"\nassert solution(\"ahisthisdicethiswordisasentencei\") == \"ambiguous\"\nassert solution(\"ahisthisdicethiswordisasentenceg\") == \"ambiguous\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"hitehre\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"hitehre\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"hitehre\") == \"impossible\"\n\nimport sys"
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'impossible'\nassert solution('hi there') == 'impossible'\nassert solution('tihs snetncee mkaes prfecet sesne') == 'this sentence makes perfect sense'\n\"\"\""
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hitehre') == 'impossible'\n\"\"\""
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\n\"\"\"\n\nimport math\nimport itertools\nimport collections\nfrom functools import reduce\n\ns = stdin[0]\nn = int(stdin[1])\ndic = collections.defaultdict(list)\n\nfor line in stdin[2:]:\n    dic[line.strip()].append(line)\n\nfor _ in range(n):\n    for l in dic[stdin[2+_]]:\n        print(s.replace(s[0:len(l)], l[::-1], 1))"
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'impossible'\n\nprint(solution('tihssnetnceemkaesprfecetsesne'))\n"
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n3 5') == '5'\n\"\"\"\nimport sys"
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\n\"\"\"\n\nfrom collections import defaultdict\nimport math\n\nclass Graph:\n\n    def __init__(self, num_of_vertices):\n        self.V = num_of_vertices\n        self.graph = defaultdict(list)\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n\n    def topologicalSortUtil(self, v, visited, stack):\n        visited.append(v)\n        for i in self.graph[v]:\n            if i not in visited:\n                self.topologicalSortUtil(i, visited, stack)\n        stack.insert(0, v)\n\n    def topologicalSort(self):\n        visited = []\n        stack = []\n\n        for i in range(self.V):\n            if i not in visited:\n                self.topologicalSortUtil(i, visited, stack)\n        return stack\n\n    def printGraph(self):\n        print(self.graph)\n"
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n2 2') == 16\n"
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == 16\nassert solution(\"3 3\") == 52\nassert solution(\"4 4\") == 176\nassert solution(\"5 5\") == 616\nassert solution(\"6 6\") == 66560\n"
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2\\n2 2') == 16\n"
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n') == 16\n\"\"\""
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1 2''') == 4\n\"\"\""
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n\") == \"4\"\nassert solution(\"2 2\\n\") == \"16\"\n\nprint('Success')\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n') == '4'\nassert solution('2 2\\n') == '16'"
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"4\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcbab\", 2, \"cb\", \"cbab\") == 2\nassert solution(\"abcbab\", 2, \"cb\", \"cbab\") == 2\nassert solution(\"abcbab\", 2, \"cb\", \"cbab\") == 2\nassert solution(\"abcbab\", 2, \"cb\", \"cbab\") == 2\nassert solution(\"abcbab\", 2, \"cb\", \"cbab\") == 2\n"
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcbab') == 2\n\"\"\"\n\nfrom collections import defaultdict\nfrom enum import Enum\n\n\nclass Tile(Enum):\n    PADDING = 0\n    TILE = 1\n    OVERLAP = 2\n\n\nclass TileBuilder:\n    \"\"\"\n    Builds tiles of letters from a list of letters\n    \"\"\"\n\n    def __init__(self, letters: str):\n        self.letters = [l for l in letters]\n        self.tile_map = defaultdict(list)\n\n    def build_tiles(self):\n        for l in self.letters:\n            tile = TileBuilder.get_tile_type(l)\n            tile_id = TileBuilder.get_tile_id(tile)\n            self.tile_map[tile_id].append(l)\n\n    @staticmethod\n    def get_tile_type(letter: str) -> int:\n        if len(letter) == 1:\n            return Tile.PADDING\n        elif len(letter) == 2:\n            return Tile.TILE\n        else:\n            return Tile.OVERLAP\n\n    @staticmethod\n    def get_tile_id(tile_type: int) -> int:\n        if tile_type == Tile.PADDING:\n            return 0\n        elif tile_type == Tile.TILE:\n            return 1\n        else:\n            return 2\n"
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcbab\") == 2\nassert solution(\"abcba\") == 3\n"
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcbab') == 2\nassert solution('abcb') == 2\nassert solution('abcba') == 1\nassert solution('cbab') == 2\nassert solution('cb') == 2\n"
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n6\nabcbab\n2\ncb\ncbab\n''') == '2'\nassert solution('''\n4\nabab\n2\nbac\nbaba\n''') == '4'\nassert solution('''\n5\nabcde\n1\na\nabcde\n''') == '0'"
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcbab\") == 2\nassert solution(\"a\") == 0\nassert solution(\"aaaa\") == 0\nassert solution(\"abb\") == 0\nassert solution(\"abbb\") == 2\n"
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcbab') == 2\n\"\"\"\n\nn = int(input())\ns = input()\nm = int(input())"
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcbab\", 2, \"cb\", \"cbab\") == 2\n\"\"\""
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcbab\") == 2\nassert solution(\"abcbab\") == 2\nassert solution(\"abcbab\") == 2\nassert solution(\"abcbab\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcbab\") == 2\nassert solution(\"bcbab\") == 2\nassert solution(\"abacb\") == 1\nassert solution(\"bacbc\") == 1\nassert solution(\"abacbc\") == 2\n"
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"50\\n4\\n110 10\\n80 10\\n80 0\\n110 0\") == \"6\\n85\\n90\\n95\\n100\\n105\"\nassert solution(\"24\\n3\\n10 10\\n30 10\\n20 20\") == \"4\\n17.071067\\n20\\n22.928932\"\n\"\"\""
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('50\\n4\\n110 10\\n80 10\\n80 0\\n110 0') == '6\\n85\\n90\\n95\\n100\\n105'\n\nimport sys; input = sys.stdin.readline\n\nN, M = [int(x) for x in input().split()]\nR = []\nfor i in range(N):\n    R.append([int(x) for x in input().split()])"
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10\\n30 10\\n20 20\") == \"4\\n17.071067\\n20\\n22.928932\"\nprint(solution(\"10 10\\n30 10\\n20 20\"))\n"
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"50\\n4\\n110 10\\n80 10\\n80 0\\n110 0\") == \"6\\n85\\n90\\n95\\n100\\n105\"\nassert solution(\"24\\n3\\n10 10\\n30 10\\n20 20\") == \"4\\n17.071067\\n20\\n22.928932\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"50\\n4\\n110 10\\n80 10\\n80 0\\n110 0\") == \"6\\n85\\n90\\n95\\n100\\n105\"\nassert solution(\"24\\n3\\n10 10\\n30 10\\n20 20\") == \"4\\n17.071067\\n20\\n22.928932\""
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('10 10\\n30 10\\n20 20') == '17.071067'\nassert solution('10 10\\n30 10\\n20 20\\n10 10\\n20 0') == '20'\nassert solution('10 10\\n30 10\\n20 20\\n10 10\\n20 0\\n10 10\\n20 20') == '17.071067'\n"
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"50\\n4\\n110 10\\n80 10\\n80 0\\n110 0\") == \"6\\n85\\n90\\n95\\n100\\n105\"\nassert solution(\"24\\n3\\n10 10\\n30 10\\n20 20\") == \"4\\n17.071067\\n20\\n22.928932\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\\\n5\n2\n10 10\n30 10\n20 20\n''') == '''\\\n6\n85\n90\n95\n100\n105\n'''\n\nassert solution('''\\\n2\n1\n0 0\n1 1\n''') == '''\\\n1\n0\n'''\n\nassert solution('''\\\n1\n5\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == '''\\\n1\n0\n'''\n\nprint('Success')"
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"50\\n4\\n110 10\\n80 10\\n80 0\\n110 0\") == \"6\\n85\\n90\\n95\\n100\\n105\"\nassert solution(\"24\\n3\\n10 10\\n30 10\\n20 20\") == \"4\\n17.071067\\n20\\n22.928932\"\n\n\"\"\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"50\\n4\\n110 10\\n80 10\\n80 0\\n110 0\\n\") == \"6\\n85\\n90\\n95\\n100\\n105\\n\""
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"yes\"\n\"\"\""
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"yes\"\n\n\"\"\""
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"yes\"\nassert solution(\"1 11\") == \"no\"\nassert solution(\"1 7\") == \"no\"\nassert solution(\"9 7\") == \"no\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'yes'\n"
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'yes'\nassert solution('100 6') == 'no'\nassert solution('1000 3') == 'no'\nassert solution('100 3') == 'no'\n"
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'yes'\n\"\"\""
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 11\\n\") == \"yes\"\nassert solution(\"10 7\\n\") == \"yes\"\n\"\"\"\nimport math"
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 11\\n\") == \"yes\"\nassert solution(\"10 7\\n\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 7\") == \"yes\"\nassert solution(\"10 11\") == \"no\"\n\nprint(\"Successfully tested.\")\n\n\"\"\""
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"yes\"\nassert solution(\"100 200\") == \"no\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40\") == \"3\\n10 60\\n30 50\\n30 40\"\nprint(solution(input()))\n"
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 4\\n2 5\\n1 6\") == \"3\\n1 6\\n2 5\"\nassert solution(\"5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40\") == \"3\\n10 60\\n30 50\\n30 40\"\n\"\"\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n3 4\\n2 5\\n1 6') == '3\\n1 6\\n2 5'\nassert solution('5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40') == '3\\n10 60\\n30 50\\n30 40'\n"
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n3 4\n2 5\n1 6\"\"\") == \"3\\n1 6\\n2 5\"\nassert solution(\"\"\"5\n10 30\n20 40\n30 50\n10 60\n30 40\"\"\") == \"3\\n10 60\\n30 50\\n30 40\"\nprint(\"test passed\")\n"
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40\") == \"3\\n10 60\\n30 50\\n30 40\"\n\"\"\""
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3 4\\n2 5\\n1 6\") == \"3\\n1 6\\n2 5\\n3 4\"\nassert solution(\"5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40\") == \"3\\n10 60\\n30 50\\n30 40\"\n\"\"\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3 4\\n2 5\\n1 6\") == \"3\\n1 6\\n2 5\\n3 4\\n\"\n\"\"\""
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n3 4\\n2 5\\n1 6\") == \"3\\n1 6\\n2 5\"\nassert solution(\"5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40\") == \"3\\n10 60\\n30 50\\n30 40\"\n\"\"\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1 1') == '1 1\\n1 1'\nassert solution('3 2\\n2 3') == '3 2'\nassert solution('4 3\\n2 3\\n1 4\\n3 4') == '4 3'\nassert solution('2 5\\n3 4\\n4 5') == '2 5'"
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n3 4\\n2 5\\n1 6\") == 3\nassert solution(\"5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40\") == 3\nassert solution(\"\") == 0\nassert solution(\"0\") == 0\nassert solution(\"1\\n1\\n1\") == 1\n"
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"5836\"\nassert solution(\"5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"1828\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n\") == 5836\n\n------Solution------\n1. \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0440\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430\n2. \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0448\u0438\u0440\u0438\u043d\u0443 \u0438 \u0432\u044b\u0441\u043e\u0442\u0443 \u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u043a\u0430\u0440\u0442 \n3. \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0438\u043f\u043e\u0432 \u043a\u0430\u0440\u0442 (\u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c 5)\n4. \u0418\u0449\u0435\u043c \u0441\u0430\u043c\u0443\u044e \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0435\u0441\u0442\u044c \u043a\u0430\u0440\u0442\u044b \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c\u0438 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\n5. \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e\n6. \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0448\u0438\u0440\u0438\u043d\u0443 \u043e\u0441\u0442\u0430\u0432\u0448\u0435\u0439\u0441\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\n7. \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u044b\u0441\u043e\u0442\u0443 \u043e\u0441\u0442\u0430\u0432\u0448\u0435\u0439\u0441\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\n8. \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0440\u0442 \u043f\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\n9. \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0441 \u043c\u0435\u043d\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u0430\u0440\u0442, \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\n10. \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0430\u0440\u0442\u044b \u043f\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\n11. \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043a\u0430\u043a\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u043e\u0441\u0442\u0430\u043b\u0430\u0441\u044c \u0441\u0431\u0438\u0442\u043e\u0439\n12. \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0438\u043f\u043e\u0432 \u043a\u0430\u0440\u0442\n13. \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043a\u0430\u043a\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u0430\u043a\u0438\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438 \u043a\u0430\u0440\u0442\n14. \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0448\u0438\u0440\u0438\u043d\u0443 \u043e\u0441\u0442\u0430\u0432\u0448\u0435\u0439\u0441\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\n15. \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u044b\u0441\u043e\u0442\u0443 \u043e\u0441\u0442\u0430\u0432\u0448\u0435\u0439\u0441\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\n16. \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\ufffd"
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"5836\"\nassert solution(\"5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"1828\"\nassert solution(\"5 3\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"5836\"\n\"\"\""
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == 5836\n\"\"\"\n\nwith open('./input.txt') as f:\n    n, k = map(int, f.readline().split())\n    cards = []\n    for i in range(n):\n        w, h, q = map(int, f.readline().split())\n        cards.append((w, h, q))"
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == 5836\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == 5836\n\"\"\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '5836'\nassert solution('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '1828'\n\nprint(solution(stdin))\n\nimport collections\nimport itertools"
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '5836'\nassert solution('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '1828'\nprint('Passed')\n\n\"\"\"\n\n\"\"\"\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\n\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n\n-----"
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == 5836\n\"\"\""
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '5836'\n\"\"\""
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\\n') == '50'\nassert solution('3\\n7 100 200 200\\n8 100 300 200\\n9 100 400 200\\n') == 'impossible'\n\"\"\"\n\nimport sys\n\nsys.stdin = open(\"./4881.txt\")\ninput = sys.stdin.readline\n\nn = int(input())\ndelegates = []\nfor _ in range(n):\n    d, c, f, u = list(map(int, input().split()))\n    delegates.append((d, c, f, u))\n\ndelegates = sorted(delegates)\nd, c, f, u = delegates[0]"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99''') == '50'\nassert solution('''3\n7 100 200 200\n8 100 300 200\n9 100 400 200''') == 'impossible'\nassert solution('''3\n7 100 200 200\n8 100 300 200\n9 100 400 200''') == 'impossible'\nassert solution('''3\n7 100 200 200\n8 100 300 200\n9 100 400 200''') == 'impossible'\n\n---\n\nimport ast\nfrom itertools import chain"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\"\"\") == \"50\"\n\n\"\"\"\nI'm tired now but the code works :)\n\"\"\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\") == \"50\"\nassert solution(\"3\\n7 100 200 200\\n8 100 300 200\\n9 100 400 200\") == \"impossible\"\nassert solution(\"3\\n1 100 100 100\") == \"1\"\n\"\"\"\n\nstates = int(stdin.readline().strip())\n\ndelegates, voters_C, voters_F = [], [], []\n\nfor _ in range(states):\n    line = stdin.readline().strip()\n    delegates.append(int(line.split()[0]))\n    voters_C.append(int(line.split()[1]))\n    voters_F.append(int(line.split()[2]))"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == '50'\nassert solution('''\n3\n7 100 200 200\n8 100 300 200\n9 100 400 200\n''') == 'impossible'\nassert solution('''\n2\n7 100 200 200\n8 100 300 200\n''') == 'impossible'\nassert solution('''\n4\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n7 729 1360 0\n8 729 1360 0\n9 729 1360 0\n''') == '2'\nassert solution('''\n2\n7 100 200 200\n8 100 300 200\n''') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\") == \"50\"\nassert solution(\"7 100 200 200\\n8 100 300 200\\n9 100 400 200\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\") == \"50\"\nassert solution(\"3\\n7 100 200 200\\n8 100 300 200\\n9 100 400 200\") == \"impossible\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99') == '50'\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2401 3299 0') == '50'\nassert solution('6 2401 2399 0') == 'impossible'\nassert solution('7 100 200 200') == 'impossible'\n\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import Counter\nfrom itertools import combinations\n"
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\") == \"50\"\nassert solution(\"3\\n7 100 200 200\\n8 100 300 200\\n9 100 400 200\") == \"impossible\"\nprint(\"Success!\")\n'''\n\nN = int(input())\nD_list = []\nC_list = []\nF_list = []\nU_list = []\n\nfor i in range(N):\n    d, c, f, u = map(int, input().split())\n    D_list.append(d)\n    C_list.append(c)\n    F_list.append(f)\n    U_list.append(u)\n\nU_list.sort(reverse=True)\nD_list.sort(reverse=True)\nC_list.sort(reverse=True)\nF_list.sort(reverse=True)\n\nconst_count = 0\nfeder_count = 0\n\nfor i in range(N):\n    const_count += D_list[i]\n    feder_count += U_list[i]\n    \n    const_count += C_list[i]\n    feder_count += F_list[i]\n    \n    if const_count >= feder_count:\n        print(const_count - feder_count)\n        break"
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n\nSample Input 1:\n5.1\nSample Output 1:\n0 0 0 0 2\n\nSample Input 2:\n5.2\nSample Output 2:\n0 0 0 0 1\n\nSample Input 1:\n5.3\nSample Output 1:\n0 0 0 1 0\n\nSample Input 2:\n5.4\nSample Output 2:\n0 0 0 1 0\n\nSample Input 1:\n5.5\nSample Output 1:\n0 0 0 1 1\n\nSample Input 2:\n5.6\nSample Output 2:\n0 0 0 2 0\n\nSample Input 1:\n5.7\nSample Output 1:\n0 0 0 2 1\n\nSample Input 2:\n5.8\nSample Output 2:\n0 0 0 2 2\n\nSample Input 1:\n5.9\nSample Output 1:\n0 0 0 2 3\n\nSample Input 2:\n6.0\nSample Output 2:\n0 0 0 1 1\n\nSample Input 1:\n6.1\nSample Output 1:\n0 0 0 1 1\n\nSample Input 2:\n6.2\nSample Output 2:\n0 0 0 1 2\n\nSample Input 1:\n6.3\nSample Output 1:\n0 0 0 1 1\n\nSample Input 2:\n6.4\nSample Output 2:\n0 0 0 1 0\n\nSample Input 1:\n6.5\nSample Output 1:\n0 0 0 2 0\n\nSample Input 2:\n6.6\nSample Output 2:\n0 0 0 1 0\n\nSample Input 1:\n6.7\nSample Output 1:\n0 0 0 1 1\n\nSample Input 2:\n6.8\nSample Output 2:\n0 0 0 1 2\n\nSample Input 1:\n6.9\nSample Output 1:\n0 0 0 1 1\n\nSample Input 2:\n7.0\nSample Output 2:\n0 0 0 1 1\n\nSample Input 1:\n7.1\nSample Output 1:\n0 0 0 1 1\n\nSample Input 2:\n7.2\nSample Output 2:\n0 0 0 2 0\n\nSample Input 1:\n7.3\nSample Output 1:\n0 0 0 1 1\n\nSample Input 2:\n7.4\nSample Output 2:\n0 0 0 1 2\n\nSample Input 1:\n7.5\nSample Output 1:\n0 0 0 1 2\n\nSample Input 2:\n7.6\nSample Output 2:\n0 0 0 2 1\n\nSample Input 1:\n7.7\nSample Output 1:\n0 0 0 1 1\n\nSample Input 2:\n7.8\nSample Output 2:\n0 0 0 1 2\n\nSample Input 1:\n7.9\nSample Output 1:\n0 0 0 1 2\n\nSample Input 2:\n8.0\nSample Output 2:\n0 0 0 2 1\n\nSample Input 1:\n8.1\nSample Output 1:\n0 0 0 1 2\n\nSample Input 2:\n8.2\nSample Output 2:\n0 0 0 1 2\n\nSample Input 1:\n8.3\nSample Output 1:\n0 0 0 2 0\n\nSample Input 2:\n8.4\nSample Output 2:\n0 0 0 2 1\n\nSample Input 1:\n8.5\nSample Output 1:\n0 0 0 2 1\n\nSample Input 2:\n8.6\nSample Output 2:\n0 0 0 2 2\n\nSample Input 1:\n8.7\nSample Output 1:\n0 0 0 2 1\n\nSample Input 2:\n8.8\nSample Output 2:\n0 0 0 2 2\n\nSample Input 1:\n8.9\nSample Output 1:\n0 0 0 2 2\n\nSample Input 2:\n9.0\nSample Output 2:\n0 0 0 2 1\n\nSample Input 1:\n9.1\nSample Output 1:\n0 0 0 2 1\n\nSample Input 2:\n9.2\nSample Output 2:\n0 0 0 2 1\n\nSample Input 1:\n9.3\nSample Output 1:\n0 0 0 2 0\n\nSample Input 2:\n9.4\nSample Output 2:\n0 0 0 2 2\n\nSample Input 1:\n9.5\nSample Output 1:\n0 0 0 2 1\n\nSample Input 2:\n9.6\nSample Output 2:\n0 0 0 2 1\n\nSample Input 1:\n9.7\nSample Output 1:\n0 0 0 2 2\n\nSample Input 2:\n9.8\nSample Output 2:\n0 0 0 2 1\n\nSample Input 1:\n9.9\nSample Output 1:\n0 0 0 2 0\n\nSample Input 2:\n10.0\nSample Output 2:\n0 0 0 2 0\n\nSample Input 1:\n10.1\nSample Output 1:\n0 0 0 0 2\n\nSample Input 2:\n10.2\nSample Output 2:\n0 0 0 0 2\n\nSample Input 1:\n10.3\nSample Output 1:\n0 0 0 0 2\n\nSample Input 2:\n10.4\nSample Output 2:\n0 0 0 0 0\n\nSample Input 1:\n10.5\nSample Output 1:\n0 0 0 0 0\n\nSample Input 2:\n10.6\nSample Output 2:\n0 0 0 0 2\n\nSample Input 1:\n10.7\nSample Output 1:\n0 0 0 0 0\n\nSample Input 2:\n10.8\nSample Output 2:\n0 0 0 0 2\n\nSample Input 1:\n10.9\nSample Output 1:\n0 0 0 0 2\n\nSample Input 2:\n11.0\nSample Output 2:\n0 0 0 0 0\n\nSample Input 1:\n11.1\nSample Output 1:\n0 0 0 0 0\n\nSample Input 2:\n11.2\nSample Output 2:\n0 0 0 0 0\n\nSample Input 1:\n11.3\nSample Output 1:\n0 0 0 0 0\n\nSample Input 2:\n11.4\nSample Output 2:\n0 0 0 0 0\n\nSample Input 1:\n11.5\nSample Output 1:\n0 0 0 0 0\n\nSample Input 2:\n11.6\nSample Output 2:\n0 0 0 0 0\n\nSample Input 1:\n11.7\nSample Output 1:\n0 0 0 0 0\n\nSample Input 2:\n11.8\nSample Output 2:\n0 0 0 0 0\n\nSample Input 1:\n11.9\nSample Output 1:\n0 0 0 0 0\n\nSample Input 2:\n12.0\nSample Output 2:\n0 0 0 0 0\n\nSample Input 1:\n12.1\nSample Output 1:\n0 0 0 0 0\n\nSample Input 2:\n12.2\nSample Output 2:\n0 0 0 0 0\n\nSample Input 1:\n12.3\nSample Output 1:\n0 0 0 0 0\n\nSample Input 2:\n12.4\nSample Output 2:\n0 0 0 0 0\n\nSample Input 1:\n12.5\nSample Output 1:\n0 0 0 0 0\n\nSample Input 2:\n12.6\nSample Output 2:\n0 0 0 0 0\n\nSample Input 1:\n12.7\nSample Output 1:\n0 0 0 0 0\n\nSample Input 2:\n12.8\nSample Output 2:\n0 0 0 0 0\n\nSample Input 1:\n12.9\nSample Output 1:\n0 0 0 0 0\n\nSample Input 2:\n13.0\nSample Output 2:\n0 0 0 0 0\n\nSample Input 1:\n13.1\nSample Output 1:\n0 0 0 0 0\n\nSample Input 2:\n13.2\nSample Output 2:\n0 0 0 0 0\n\nSample Input 1:\n13.3\nSample Output 1:\n0 0 0 0 0\n\nSample Input 2:\n13.4\nSample Output 2:\n0"
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5.0\") == '0 0 0 0 1'\n\"\"\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n\n------\n\nWrite 5 lines of code to test the correctness of solution:\nSlavko decided to challenge Mirko! He gave him a real number $P$ and a bag full of pieces of paper with exactly one number between $1$ and $5$ inclusive written on each paper. There is an unlimited quantity of each type of paper.\n\nMirko\u2019s task is to pick the minimum number of papers in a way that the average of the numbers written on them equals exactly $P$.\n\n-----Input-----\nFirst and only line of input contains real number $P$. $P$ will have between 1 and 9 decimal places, inclusive $(1 \\leq P \\leq 5)$.\n\n-----Output-----\nFirst and only line of output should contain five nonnegative integers \u2013 numbers of ones, twos, threes, fours and fives used, respectively. If there are multiple solutions, output any one of them.\n\n-----Examples-----\nSample Input 1:\n5.0\nSample Output 1:\n0 0 0 0 1\n\nSample Input 2:\n4.5\nSample Output 2:\n0 0 0 1 1\n"
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '0 0 0 0 1'\nassert solution('1.0') == '0 0 0 0 1'\nassert solution('1.01') == '0 0 0 1 1'\nassert solution('1.001') == '0 0 0 0 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\"\nassert solution(\"4.5\") == \"0 0 0 1 1\"\nassert solution(\"4.25\") == \"0 0 0 1 1\"\n\nSample Input 1:\n4.0\nSample Output 1:\n0 0 0 0 1\n\nSample Input 2:\n5.0\nSample Output 2:\n0 0 0 0 1\n\nSample Input 1:\n6.0\nSample Output 1:\n0 0 0 0 1 1\n\nSample Input 2:\n7.0\nSample Output 2:\n0 0 0 0 1 1 1\n\nSample Input 1:\n8.0\nSample Output 1:\n0 0 0 0 0 1 1 1\n\nSample Input 2:\n9.0\nSample Output 2:\n0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n10.0\nSample Output 1:\n0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n11.0\nSample Output 2:\n0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n12.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n13.0\nSample Output 2:\n0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n14.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n15.0\nSample Output 2:\n0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n16.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n17.0\nSample Output 2:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n18.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n19.0\nSample Output 2:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n20.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n21.0\nSample Output 2:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n22.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n23.0\nSample Output 2:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n24.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n25.0\nSample Output 2:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n26.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n27.0\nSample Output 2:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n28.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n29.0\nSample Output 2:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n30.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n31.0\nSample Output 2:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n32.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n33.0\nSample Output 2:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n34.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n35.0\nSample Output 2:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n36.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n37.0\nSample Output 2:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n38.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n39.0\nSample Output 2:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n40.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n41.0\nSample Output 2:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n42.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n43.0\nSample Output 2:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n44.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 2:\n45.0\nSample Output 2:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1\n\nSample Input 1:\n46.0\nSample Output 1:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\"\n\"\"\""
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\"\nassert solution(\"4.5\") == \"0 0 0 1 1\"\n\"\"\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\"\nassert solution(\"4.5\") == \"0 0 0 1 1\"\nassert solution(\"0\") == \"0 0 0 0 0\"\nassert solution(\"0.0\") == \"0 0 0 0 0\"\nassert solution(\"2.0\") == \"0 0 1 0 0\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\""
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5.0''') == '0 0 0 0 1'\nassert solution('''4.5''') == '0 0 0 1 1'\n"
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3 1\\n1 7 8 2 6 4 3 5\") == '8'\nassert solution(\"8 2 1\\n1 7 8 2 6 4 3 5\") == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3 1\\n1 7 8 2 6 4 3 5\") == \"8\"\nassert solution(\"8 2 1\\n1 7 8 2 6 4 3 5\") == \"3\"\n\nfrom typing import List, Union, Any, Callable, Tuple\n"
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3 1\\n1 7 8 2 6 4 3 5\") == \"8\"\nprint(solution(\"8 3 1\\n1 7 8 2 6 4 3 5\"))\nassert solution(\"8 2 1\\n1 7 8 2 6 4 3 5\") == \"3\"\nprint(solution(\"8 2 1\\n1 7 8 2 6 4 3 5\"))"
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3 1\\n1 7 8 2 6 4 3 5\") == \"8\", \"case: normal\"\nassert solution(\"8 2 1\\n1 7 8 2 6 4 3 5\") == \"3\", \"case: max_jump 2\"\n\"\"\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 3 1\\n1 7 8 2 6 4 3 5') == '8'\n"
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 3 1\\n1 7 8 2 6 4 3 5') == '8'\nassert solution('8 2 1\\n1 7 8 2 6 4 3 5') == '3'\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3 1\\n1 7 8 2 6 4 3 5\") == \"8\"\nassert solution(\"8 2 1\\n1 7 8 2 6 4 3 5\") == \"3\"\n\"\"\""
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3 1\\n1 7 8 2 6 4 3 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3 1\\n1 7 8 2 6 4 3 5') == '8'\nassert solution('8 2 1\\n1 7 8 2 6 4 3 5') == '3'\nprint(solution(stdin))\n"
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''8 3 1\n1 7 8 2 6 4 3 5''') == '8'\nassert solution('''8 2 1\n1 7 8 2 6 4 3 5''') == '3'\n\"\"\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 2\n2 3 4 1''') == 3\n"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n2 3 4 1\") == \"3\"\nassert solution(\"6 3\\n2 2 2 4 4 4\") == \"4\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n2 3 4 1') == '3'\nassert solution('6 3\\n2 2 2 4 4 4') == '4'\nassert solution('4 2\\n1 2 3 4') == '1'\n"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n2 3 4 1\") == \"3\"\nassert solution(\"6 3\\n2 2 2 4 4 4\") == \"4\"\nassert solution(\"6 4\\n2 4 4 4 2\") == \"4\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 4 1\\n4') == '3'\n\"\"\"\n\nimport itertools\n\n\nclass LinkedList:\n    def __init__(self, head=None):\n        self.head = head\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.head is None:\n            raise StopIteration\n\n        curr = self.head\n        self.head = self.head.next\n        return curr\n\n    def append(self, data):\n        self.head = Node(data, self.head)\n\n    def __str__(self):\n        curr = self.head\n        res = ''\n        while curr is not None:\n            res += str(curr) + '\\n'\n            curr = curr.next\n        return res\n\n\nclass Node:\n    def __init__(self, data, next=None):\n        self.data = data\n        self.next = next\n\n    def __str__(self):\n        return str(self.data)\n"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n2 3 4 1') == 3\nassert solution('6 3\\n2 2 2 4 4 4') == 4\n\"\"\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2 2\\n\") == 3\n"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n2 3 4 1\") == \"3\"\nassert solution(\"6 3\\n2 2 2 4 4 4\") == \"4\"\nassert solution(\"6 3\\n2 2 4 4 4\") == \"4\"\nassert solution(\"6 3\\n2 4 4 4\") == \"4\"\n\n\"\"\"\n\n\nimport collections"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n2 3 4 1\") == \"3\"\nassert solution(\"6 3\\n2 2 2 4 4 4\") == \"4\"\n\n------Problem Description------\n\"\"\""
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1.732050808\\n\") == \"1.732050808\"\n\nprint(solution(\"1 1 3.0\\n\"))\n\n\"\"\"\n\"\"\"\nAlgebraist Carpet Manufacturing\nYour group of ACM workers are busy working on the last of the six parts of the next ACM rug that you need. For some reason, the workers can\u2019t seem to start working on their own tasks, and now they need you to do it.\n\nIn order to complete this task, you will need to calculate the area of the affected area of the rug. The length of the side is given by the length of the line segment AB, and the breadth is given by the length of the line segment AC. The area of the affected area is:\n\nV = 1/2(L \u00d7 B)\n\nWhere L is the length of the side AB and B is the breadth of the affected area.\n\nPlease, write a program that, given the three numbers that are the side lengths of the three sides of the triangle ABAC, outputs the area of the affected area as a floating point number rounded off to three significant digits.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will consist of a single line with three floating point numbers $a$, $b$ and $c$ ($0 < a,b,c \\le 100$, at most $10$ digits after the decimal point) representing the side lengths of the three sides of the triangle ABAC.\n\n-----Output-----\nOutput a single line with a single floating point number. If there is a carpet that satisfies the constraints, output the area of this carpet. If not, output -1. The output should have an absolute error of at most $10^{-3}$.\n\n-----Examples-----\nSample Input 1:\n1 1 1.732050808\nSample Output 1:\n1.732050808\n\nSample Input 2:\n1 1 3.0\nSample Output 2:\n-1\n"
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n1 1 1.732050808\n\"\"\") == \"\"\"\n1.732050808\n\"\"\"\n\nassert solution(\n\"\"\"\n1 1 3.0\n\"\"\") == \"\"\"\n-1\n\"\"\"\n\nassert solution(\n\"\"\"\n1 1 3.000000001\n\"\"\") == \"\"\"\n3.000000001\n\"\"\"\n\nassert solution(\n\"\"\"\n1 1 1.732\n\"\"\") == \"\"\"\n1.732\n\"\"\"\n\nassert solution(\n\"\"\"\n2 2 3.0\n\"\"\") == \"\"\"\n-1\n\"\"\""
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\nassert solution('0.1 0.1 0.2') == '0.09292301'\n\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1.732050\") == \"1.732050808\"\nassert solution(\"1 1 3.0\") == \"-1\"\nassert solution(\"1 1 1.73205\") == \"1.732050808\"\nassert solution(\"1 1 3.001\") == \"-1\"\nassert solution(\"1 1 1.732\") == \"1.732050808\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 1.732050\\n') == '1.732050808'\nassert solution('1 1 3.0\\n') == '-1'\nassert solution('1 1 1.732050\\n') == '1.732050808'\nassert solution('1 1 3.0\\n') == '-1'\nassert solution('1 1 1.732050\\n') == '1.732050808'\n"
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1.732050808') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\n\"\"\"\nimport sys\nfrom math import sqrt"
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 1.732050808\\n') == '1.732050808'\nassert solution('1 1 3.0\\n') == '-1'"
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\n\"\"\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\nassert solution('1 1 3.01') == '-1'"
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1.732050\") == \"1.732050808\"\nassert solution(\"1 1 3.0\") == \"-\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n3 4 2\\n.75\") == \"2.49999999875\"\n\"\"\"\n\nfrom typing import List\n\nfrom sys import stdin"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n3 4 2\\n.75\") == \"2.49999999875\"\n\"\"\"\nimport math\n\nfrom typing import List\n"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0 100 10\\n0 -100 100\\n.80\") == \"9.999999999000002\"\nassert solution(\"1\\n1 1 1\") == \"1\"\nassert solution(\"1\\n2 3 4\") == \"2\"\nassert solution(\"1\\n2 3 5\") == \"2\"\nassert solution(\"1\\n2 4 6\") == \"2\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n3 4 2\\n.75') == '2.49999999875'\nassert solution('2\\n0 100 10\\n0 -100 100\\n.80') == '9.999999999002'\n\"\"\"\n\n\nimport math\nimport sys"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n3 4 2\\n.75\\n\") == \"2.4999999987500003\"\n\"\"\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n3 4 2\\n.75\") == \"2.49999999875\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n1\\n.75\") == '2.49999999875'\n"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n3 4 2\\n.75') == '2.4999999987500003'\n"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"1\n3 4 2\n.75\"\"\") == \"2.4999999987500003\"\nassert solution(\"\"\"2\n0 100 10\n0 -100 100\n.80\"\"\") == \"9.999999999000002\"\n\"\"\""
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n3 4 2\\n.75\") == \"2.4999999987500003\"\nassert solution(\"2\\n0 100 10\\n0 -100 100\\n.80\") == \"9.999999999000002\"\n\"\"\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\\n1 1 5 1 2\") == \"0\"\nassert solution(\"1 1 5 1 2\\n2 1 6\") == \"3\""
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\\n1 1 5 1 2\\n2 1 6\\n1 1 5 1 2\\n2 1 6\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 6\\n1 1 5 1 2\\n2 1 6\\n\") == \"3\\n0\\n1\\n0\"\nassert solution(\"4 5\\n1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4\\n\") == \"3\\n2\\n1\\n0\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"6 3\n2 1 6\n1 1 5 1 2\n2 1 6\n\"\"\") == \"0\\n3\"\nassert solution(\"\"\"4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n\"\"\") == \"3\\n2\\n1\\n0\""
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 3 1 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3 1 3 2 1 3 1 3 1 3 2 1 3"
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3\\n2 1 6\\n1 1 5 1 2\\n2 1 6\\n') == '0\\n3\\n'\n\nassert solution('4 5\\n1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4\\n') == '3\\n2\\n1\\n0\\n'"
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n6 3\n2 1 6\n1 1 5 1 2\n2 1 6\n\"\"\") == '0'\nassert solution(\"\"\"\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n\"\"\") == '3'\nassert solution(\"\"\"\n6 3\n1 1 5 1 2\n2 1 6\n\"\"\") == '0'\nassert solution(\"\"\"\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n\"\"\") == '3'\n\n\"\"\"\n\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0432\u0441\u0435 \u043a\u0443\u0431\u0438\u043a\u0438.\n\n\u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u043e\u0434\u043a\u0440\u0443\u0442\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u0443\u0435\u043c\u043e\u0439 \u043a\u0430\u043c\u0435\u0440\u044b.\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u044b \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: $N$ \u0438 $Q$. $1 \\leq N \\leq 10^8$, \u0430 $1 \\leq Q \\leq 5\\cdot 10^4$.\n\n\u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0443\u0442 $Q$ \u0441\u0442\u0440\u043e\u043a \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438 \u043f\u043e\u0434\u043a\u0440\u0443\u0442\u043a\u0438.\n\n\u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441 1. \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0432\u0438\u0434\u0435 \u043f\u0430\u0440\u044b \u0447\u0438\u0441\u0435\u043b $L$ \u0438 $R$. $1 \\leq L \\leq R \\leq N$. \u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0443\u0442 \u0447\u0438\u0441\u043b\u0430 $L$, $R$, $A$ \u0438 $B$. \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c:\n\n\u041f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u043e\u0434\u043a\u0440\u0443\u0442\u043a\u0430 \u0441 \u043a\u0430\u043c\u0435\u0440\u044b \u043d\u0430 \u0446\u0438\u0444\u0440\u0443 $L$. \u0412 \u043a\u0430\u043c\u0435\u0440\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f $A$ \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u0430\u043d\u043e: $N=10$, $L=1$, $R=10$, $A=4$, $B=1$. \u041a\u0430\u043c\u0435\u0440\u0430 \u043f\u043e\u0434\u043a\u0440\u0443\u0442\u0430\u043b\u0430 \u0446\u0438\u0444\u0440\u0443 $1$ \u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u0432\u044b\u0434\u0430\u043b\u0430 \u0447\u0438\u0441\u043b\u043e $4$.\n\n\u041f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u043e\u0434\u043a\u0440\u0443\u0442\u043a\u0430 \u0441 \u043a\u0430\u043c\u0435\u0440\u044b \u043d\u0430 \u0446\u0438\u0444\u0440\u0443 $L+1$ \u0438 \u0432\u044b\u0434\u0430\u043b\u0430 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u0447\u0438\u0441\u043b\u043e $\\frac{2\\cdot A}{B} \\mod B$. \u0414\u0430\u043b\u0435\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u043e\u0434\u043a\u0440\u0443\u0442\u043a\u0430 \u0441 \u043a\u0430\u043c\u0435\u0440\u044b \u043d\u0430 \u0446\u0438\u0444\u0440\u0443 $L+2$ \u0438 \u0432\u044b\u0434\u0430\u043b\u0430 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u0447\u0438\u0441\u043b\u043e $\\frac{3\\cdot A}{B} \\mod B$.\n\n\u041f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u043e\u0434\u043a\u0440\u0443\u0442\u043a\u0430 \u0441 \u043a\u0430\u043c\u0435\u0440\u044b \u043d\u0430 \u0446\u0438\u0444\u0440\u0443 $L+3$ \u0438 \u0432\u044b\u0434\u0430\u043b\u0430 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u0447\u0438\u0441\u043b\u043e $\\frac{(X-L+1)\\cdot A}{B} \\mod B$, \u0433\u0434\u0435 $X$ \u2014 \u043d\u043e\u043c\u0435\u0440 \u043a\u0443\u0431\u0438\u043a\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0434\u043a\u0440\u0443\u0442\u0438\u043b\u0430 \u043a\u0430\u043c\u0435\u0440\u0430.\n\n\u041f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u043e\u0434\u043a\u0440\u0443\u0442\u043a\u0430 \u0441 \u043a\u0430\u043c\u0435\u0440\u044b \u043d\u0430 \u0446\u0438\u0444\u0440\u0443 $R$. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u0432\u044b\u0434\u0430\u043b\u0430\u0441\u044c \u0447\u0438\u0441\u043b\u043e $\\frac{(R-L+1)\\cdot A}{B} \\mod B$. \u041a\u0430\u043c\u0435\u0440\u0430 \u043f\u043e\u0434\u043a\u0440\u0443\u0442\u0430\u043b\u0430 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043a\u0443\u0431\u0438\u043a\u0438 \u0438 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u0443"
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 1\\n2 2 2') == '1\\n0'\nassert solution('1 1 6 1 2\\n2 1 6') == '0\\n3'\n\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom typing import List, Deque, Set, Tuple\n"
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"6 3\n2 1 6\n1 1 5 1 2\n2 1 6\n\"\"\") == \"0\\n3\\n\"\nassert solution(\"\"\"4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n\"\"\") == \"3\\n2\\n1\\n0\\n\"\n\"\"\""
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1\\n\") == \"3\"\nassert solution(\"2 1 6\\n\") == \"0\"\nassert solution(\"1 1 5 1 2\\n\") == \"3\"\nassert solution(\"1 1 5 1 2\\n\") == \"3\"\n\n\"\"\"\n\nfrom itertools import zip_longest\n"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 1000000007') == '1'\nassert solution('2 2 1000000007') == '4'\nassert solution('3 2 1000000007') == '2'\nassert solution('1 7 1000000007') == '1'\n"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 7 1000000007') == '1'\n\"\"\""
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n') == '1'\n\"\"\"\n\nfrom itertools import permutations\n\nwith open(\"input.txt\") as file:\n    n, k, p = file.read().split()\n    n, k, p = int(n), int(k), int(p)\n\npermutations_list = list(permutations(range(1, n + 1)))\n\nruns = 0\nfor permutation in permutations_list:\n    permutation = list(permutation)\n    k_sorted_list = [k for k in permutation if k == permutation[permutation.index(k) + 1]]\n    runs += len(k_sorted_list)\n\nruns = runs % p\nprint(runs)\n"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\n\"\"\"\n\nn,k,p = stdin.split()\nn,k,p = int(n), int(k), int(p)\n\nimport math"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\n\"\"\"\n\nimport sys\nimport math\nimport numpy as np"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 7 1000000007''') == '1'\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\n\"\"\"\n\nn, k, p = stdin.split()\n\nn, k, p = int(n), int(k), int(p)"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\"\n\nprint('Success')\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10\\n6\") == \"5\"\nassert solution(\"3 5\\n11\") == \"8\""
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10\\n6\") == '5'\nassert solution(\"3 5\\n11\") == '8'\n\"\"\""
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 3\n3\n''') == '1'\n\nassert solution('''3 3\n3\n''') == '0'\n\nassert solution('''3 3\n4\n''') == '2'\n\nassert solution('''10 10\n2\n''') == '2'\n\nassert solution('''20 100\n59\n''') == '66'"
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n11\") == \"8\"\nassert solution(\"3 5\\n12\") == \"7\"\n\"\"\""
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''10 10\n6''') == '5'\nassert solution('''3 5\n11''') == '8'\n'''\n\n'''\n\nfrom typing import List, Set, Tuple, Dict\n"
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n') == ''\nassert solution('2 5\\n') == '5'\nassert solution('10 10\\n6\\n') == '5'\nassert solution('3 5\\n11\\n') == '8'\n"
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 10\\n6') == '5'\nassert solution('3 5\\n11') == '8'\nassert solution('1000 100\\n20000') == '3200'\nassert solution('10 100\\n100000') == '3200'\n\"\"\"\n"
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 10\\n6') == 5\nassert solution('3 5\\n11') == 8\n\nimport math\n"
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n6') == '6'"
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10\\n6\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '2'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '3'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '2'\n\n\"\"\""
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 1\\n0 1 1\\n0 3 1\\n0 2 2') == \"1\"\nassert solution('1 2 1\\n0 1 1\\n0 3 1\\n0 2 2\\n1 2 1\\n3 2 1') == \"2\"\nassert solution('1 2 1\\n0 1 1\\n0 3 1\\n0 2 2\\n1 2 1\\n3 2 1\\n2 3 1') == \"3\""
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n') == '2'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n') == '3'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n') == '3'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n') == '3'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n') == '3'\n\n\"\"\"\n\nfrom collections import defaultdict\nimport networkx as nx\nimport sys\nimport heapq\n\nsys.setrecursionlimit(100000000)\n"
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\") == \"2\"\nassert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\") == \"3\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(SAMPLE_INPUT_1) == SAMPLE_OUTPUT_1\nprint(solution(INPUT))\n"
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '2'\n"
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\") == '2'\n\"\"\"\n\n\"\"\"\n- Problem -\n\nSuppose there is a delivery company which has a fleet of one truck with a capacity of 30, and they have to make deliveries to a number of clients. Each client has a unique one-way street that the truck must drive through.\n\nWhat is the minimum number of trucks needed to ensure that all clients can be visited without having to go by more than one truck.\n\nAssume that the trucks will start on the warehouse, and that they are able to return to the warehouse at any time.\n\nEach truck can drive at most one street at a time. They can drive in either direction on the street, and they cannot drive in the same direction more than once in a single trip.\n\n-----Solution-----\n\n- Ideas -\n\n- Steps -\n\n----\n\"\"\""
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\") == \"3\"\n\"\"\"\n\nfrom copy import deepcopy"
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '2'\n\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '3'\n\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '3'\n\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '3'\n"
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '2'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '3'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '2'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '3'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\\n3 120\") == '3'\n\"\"\"\n\nfrom collections import Counter\nfrom math import floor"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\\n3 120\") == \"3\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\\n3 120\\n') == 3\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open('./input.txt').read()) == open('./expected.txt').read()\n\nprint('Success!')\n"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\\n3 120') == 3\n"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120''') == 3\nassert solution('''4 1\n10\n10\n1 10\n1 10\n1 10\n''') == 3\nassert solution('''4 1\n10\n10\n1 10\n1 10\n1 10\n''') == 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\n10\\n10\\n1 10\\n1 10\\n1 10') == '3'\n\"\"\""
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\\n3 120\\n') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"3\") == 5\n"
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n\"\"\"\n\nN = int(input())"
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n') == 5\nassert solution('4\\n') == 1\nassert solution('5\\n') == 1\n\"\"\"\n\nn = int(input())\n\ncount = 0\n\nfor i in range(n, 0, -1):\n    for j in range(i - 1, 0, -1):\n        if i % j == 0:\n            if i / j > j:\n                count += 1\n            else:\n                count += i / j\n            break\n\nprint(count % 1000000000)\n"
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"5\"\nassert solution(\"5\") == \"24\"\nassert solution(\"20\") == \"24161297088602881480942597278738574836901807796\"\nassert solution(\"4\") == \"35\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"5\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'"
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\n\nassert solution('3') == '5'\n\nassert solution('4') == '3'\n\nassert solution('5') == '4'\n\n\"\"\""
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 1"
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"5\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n0 11 9\\n1 0 10\\n0 0 0\") == \"2\"\n\n\"\"\"\n\nfrom sys import stdin\n\nN, L = [int(i) for i in stdin.readline().split()]\nconnection = [[int(j) for j in stdin.readline().split()] for i in range(N)]"
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n0 11 9\\n1 0 10\\n0 0 0\") == \"2\"\n\"\"\"\nimport sys\nfrom random import randint"
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n0 11 9\\n1 0 10\\n0 0 0') == '2'\nassert solution('4 3\\n0 1 0 19\\n0 0 2 0\\n0 5 0 3\\n0 0 0 0') == '-1'"
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n0 11 9\\n1 0 10\\n0 0 0\") == \"2\"\n\n\"\"\"\n\nfrom typing import List\nimport sys\nimport numpy as np\n\nclass Solution:\n    def __init__(self, N: int, L: int) -> None:\n        self.N = N\n        self.L = L\n        self.connections = np.array([[int(i) for i in sys.stdin.readline().split()] for _ in range(N)])\n        self.connections = np.array(self.connections)\n        \n    def backtrack(self, index: int, connections: List[List[int]], total: int, visited: List[int]) -> int:\n        if index == self.N:\n            if total == self.L and np.sum(connections[:, visited][visited]) == self.L:\n                return 1\n            else:\n                return 0\n            \n        # if self.backtrack(index + 1, connections, total + 1, visited | {index})\n        if self.backtrack(index + 1, connections, total + 1, visited):\n            return 1\n        else:\n            if self.backtrack(index + 1, connections, total, visited):\n                return 1\n        \n        return 0\n            \n    def travel_plan(self) -> int:\n        visited = set()\n        connections = np.copy(self.connections)\n        \n        for i in range(self.N):\n            if i not in visited:\n                visited.add(i)\n                connections[i] = 0\n                if self.backtrack(1, connections, 1, visited):\n                    return 1\n                visited.remove(i)\n                connections[i] = self.connections[i]\n        \n        return -1\n        "
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n0 11 9\\n1 0 10\\n0 0 0\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n0 11 9\\n1 0 10\\n0 0 0\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n0 11 9\\n1 0 10\\n0 0 0\") == '2'\nassert solution(\"2 1\\n0 11 9\\n1 0 10\\n0 0 0\") == '2'\n\nassert solution(\"3 1\\n0 11 9\\n1 0 10\\n0 0 0\") == '-1'\nassert solution(\"3 1\\n0 11 9\\n0 0 0\\n0 0 0\") == '-1'\n\nassert solution(\"4 1\\n0 1 0 19\\n0 0 2 0\\n0 5 0 3\\n0 0 0 0\") == '-1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n3\\n0 1 2\\n0 2 0') == '2'\n\"\"\"\n\nfrom collections import defaultdict\nimport math\nfrom dataclasses import dataclass\nfrom typing import List\nfrom typing import Tuple"
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3 1\n0 11 9\n1 0 10\n0 0 0\n''') == '2'\n\nassert solution('''\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n''') == '-1'\n\nprint('Success')\n\n\"\"\"\nIn this problem, we are given an integer L and an array of integers N, A_i. The goal is to find an integer T such that 95% of the people in the bus are in B-ville after T days. This means that the probability that the number of people in the bus is not equal to the number of people in the bus on day T is less than or equal to 5%.\n\nInput\nThe first line of the input contains two integers L and N. The second line of the input contains N integers, the i-th of which is A_i.\n\nConstraints\n1 \u2264 L \u2264 10^6\n1 \u2264 N \u2264 2\u00d710^5\n0 \u2264 A_i \u2264 10^9 for each valid i\nOutput\nIn the output, print the smallest integer T such that the probability that the number of people in the bus is not equal to the number of people in the bus on day T is less than or equal to 5%. If no such value exists, print -1.\n\nSample Input 1\n4 1\n0 10 9\nSample Output 1\n3\n\nSample Input 2\n4 1\n0 10 9\nSample Output 2\n-1\n\"\"\""
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n0 11 9\\n1 0 10\\n0 0 0\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10') == '4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2'\nassert solution('2 1 0 1\\n0 1 100000') == '2 100000 1\\n0 1 100000'\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == \"4 3 5\"\n\"\"\"\n\n\nclass FlowNetwork:\n    def __init__(self, network):\n        self.network = network\n\n    def add_edge(self, u, v, c):\n        self.network[u][v] = c\n\n    def flow(self, s, t):\n        parent = [None] * len(self.network)\n        visited = [False] * len(self.network)\n        flow = [0] * len(self.network)\n        res = 0\n        flow[s] = float('inf')\n        while self.has_path(s, t, visited, parent, flow):\n            cur = t\n            while cur!= s:\n                nxt = parent[cur]\n                flow[nxt] -= flow[cur]\n                flow[cur] = 0\n                cur = nxt\n            res += flow[t]\n        return res\n\n    def has_path(self, s, t, visited, parent, flow):\n        visited[s] = True\n        for i, nxt in enumerate(self.network[s]):\n            if nxt > 0 and not visited[i] and flow[i] < nxt:\n                parent[i] = s\n                if i == t:\n                    return True\n                if self.has_path(i, t, visited, parent, flow):\n                    return True\n        return False\n"
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\"\nassert solution(\"2 1 0 1\\n0 1 100000\") == \"2 100000 1\\n0 1 100000\"\n\"\"\"\n\nimport unittest\nimport re\nimport math\n"
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\"\n\"\"\""
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == '4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2'\nprint(solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\"))\n"
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10') == '4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2'"
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\"\nassert solution(\"2 1 0 1\\n0 1 100000\") == \"2 100000 1\\n0 1 100000\""
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\\n\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\\n\"\nprint(solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\\n\"))\n\"\"\""
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\"\n\"\"\"\nfrom sys import stdin\nimport heapq"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '2 3\\nS.M\\nM..'\n    ) == '3 0'\n"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\nSMS\\nMMS\") == \"3 5\"\nprint(solution(\"2 3\\nSMS\\nMMS\"))\n\nassert solution(\"2 3\\nS.M\\nM..\") == \"2 0\"\nprint(solution(\"2 3\\nS.M\\nM..\"))\n"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\nS.M\\nM..\") == \"2 0\"\n\"\"\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\nS.M\\nM..\") == \"2 0\"\n\"\"\"\n\nfrom collections import deque\n\nR, C = list(map(int, stdin.readline().split()))\ns = [list(stdin.readline().strip()) for _ in range(R)]\n\ndr = [-1, -1, -1, 0, 0, 1, 1, 1]\ndc = [-1, 0, 1, -1, 1, -1, 0, 1]\n\nk_mirko = 0\nk_slavko = 0\nfor i in range(R):\n    for j in range(C):\n        if s[i][j] == 'M':\n            k_mirko += 1\n        elif s[i][j] == 'S':\n            k_slavko += 1"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\nSM\\nM..') == '2 0'\n"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\nS.M\\nM..\") == \"2 0\"\nprint('Hooray')\n"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\nS.M\\nM..\") == \"2 0\"\nassert solution(\"2 3\\nSMS\\nMMS\") == \"3 5\"\n\"\"\"\n\nclass Chess(object):\n    def __init__(self, R, C, field):\n        self.R = R\n        self.C = C\n        self.field = field\n        self.mirko_spread = 0\n        self.slavko_spread = 0\n\n    def calculate_spread(self, field):\n        for x in range(self.R):\n            for y in range(self.C):\n                if field[x][y] == 'M':\n                    self.calculate_spread_for_mirko(x, y)\n                elif field[x][y] == 'S':\n                    self.calculate_spread_for_slavko(x, y)\n\n    def calculate_spread_for_mirko(self, x, y):\n        self.mirko_spread += abs(x - self.R) + abs(y - self.C)\n\n    def calculate_spread_for_slavko(self, x, y):\n        self.slavko_spread += (abs(x - self.R) + abs(y - self.C)) * 2\n\n    def print_result(self):\n        print(self.mirko_spread, self.slavko_spread)"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\nS.M\\nM..') == '2 0'\nassert solution('2 3\\nSMS\\nMMS') == '3 5'\n\"\"\"\n\nimport sys\n\nr, c = map(int, sys.stdin.readline().strip().split())\nmirok = 0\nslavko = 0\n\nfor _ in range(r):\n    stdin = sys.stdin.readline().strip()\n    if stdin.count(\"M\") > 0:\n        mirok += stdin.count(\"M\") * stdin.index(\"M\")\n    if stdin.count(\"S\") > 0:\n        slavko += stdin.count(\"S\") * stdin.index(\"S\")\n\nprint(mirok, slavko)\n"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\nSMS\\nMMS\") == \"3 5\"\nassert solution(\"2 3\\nS.M\\nM..\") == \"2 0\"\n\"\"\""
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\nS.M\\nM..\") == \"2 0\"\n\"\"\""
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"13\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\"\"\") == \"2\\n3 c\\n6 c\"\n\nassert solution(\"\"\"6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\"\"\") == \"1\\n6 b\"\n\"\"\"\nn = int(input())\nd = dict()\nfor i in range(n):\n    line = input().split()\n    if line[0] == \"0\":\n        if line[1] == \"S\":\n            d[i] = line[2]\n        else:\n            "
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n0\\n1\\n1\\n2\\n5\\n5\\n1\\n10\\n1\\n\") == \"2\"\nassert solution(\"13\\n0\\n1\\n2\\n2\\n2\\n5\\n5\\n1\\n10\\n1\\n\") == \"3\"\nassert solution(\"13\\n0\\n1\\n2\\n2\\n2\\n5\\n5\\n1\\n10\\n1\\n\") == \"1\"\n\n------Other cases-----\n- How could one account for the situation when the big bird is removed?\n  It is just the case when one of the tiny birds is removed.\n\n- What if the tiny bird that eats the berry is"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 B\\n2 E a\\n2 E b\\n2 S\\n5 G a\\n5 T a\\n5 E a\\n5 E b\\n1 S\\n10 E a\\n10 G b\\n1 T a\") == \"2\\n3 c\\n6 c\"\nassert solution(\"3\\n1 B\\n2 E a\\n2 E b\\n2 S\\n5 G a\\n5 T a\\n5 E a\\n5 E b\\n1 S\\n10 E a\\n10 G b\\n1 T a\") == \"1\\n6 b\"\nassert solution(\"4\\n0 T b\\n1 E c\\n1 E d\\n1 E e\\n1 S"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0\\n1\\n2\\n2\\nB\\n5\\nT\\n5\\nE\\n1\\nS\") == \"2\\n3 c\"\nassert solution(\"6\\n0\\n1\\n2\\n2\\nB\\n5\\nT\\n5\\nE\\n1\\nS\") == \"1\\n6 b\"\nassert solution(\"13\\n0\\n1\\n2\\n2\\nB\\n5\\nT\\n5\\nE\\n1\\nS\") == \"2\\n3 c\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('12\\n0 G\\n6 E\\n2 S\\n1 T\\n10 E\\n1 G\\n1 T\\n5 E\\n5 E\\n7 G') == '2\\n6 b'\nassert solution('13\\n0 B\\n1 B\\n2 E a\\n2 E b\\n2 S\\n5 G a\\n5 T a\\n5 E a\\n5 E b\\n1 S\\n10 E a\\n10 G b\\n1 T a') == '1\\n6 b'\nassert solution('9\\n0 E\\n1 E\\n2 E\\n3 G\\n6 S\\n7 S\\n8 S\\n9 T\\"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13\\n0 B\\n1 B\\n2 E a\\n2 E b\\n2 S\\n5 G a\\n5 T a\\n5 E a\\n5 E b\\n1 S\\n10 E a\\n10 G b\\n1 T a\") == \"2\\n3 c\\n6 c\"\nassert solution(\"13\\n0 B\\n1 B\\n1 T a\\n2 E a\\n2 S\\n5 T a\") == \"1\\n6 b\""
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 B\\n1 B\\n2 E a\\n2 E b\\n2 S\\n5 G a\\n5 T a\\n5 E a\\n5 E b\\n1 S\\n10 E a\\n10 G b\\n1 T a\") == \"2\\n3 c\\n6 c\"\nassert solution(\"6\\n0 B\\n1 B\\n1 T a\\n2 E a\\n2 S\\n5 T a\\n\") == \"1\\n6 b\"\nassert solution(\"8\\n0 G\\n1 T\\n2 G\\n2 G\\n2 S\\n5 G\\n5 T\\n5 G\\n5 T\\n1 S\\n10 T\\n1 T"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 B\\n1 B\\n2 E a\\n2 E b\\n2 S\\n5 G a\\n5 T a\\n5 E a\\n5 E b\\n1 S\\n10 E a\\n10 G b\\n1 T a\") == \"2\\n3 c\\n6 c\"\nassert solution(\"7\\n0 S\\n1 S\\n3 G\\n6 G\\n1 E\\n5 E\\n3 E\\n2 E\\n5 G\\n6 T\\n1 E\\n6 T\\n3 G\\n2 G\\n5 E\\n1 E\\n6 E\\n3 T\\n6 E\\n6 E\\n3 E\\n2 E\\n5"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''13\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a''') == '2\\n3 c\\n6 c'\n\nassert solution('''6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a''') == '1\\n6 b'\nprint('Success')"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\") == \"1\\n6 b\"\nassert solution(\"4\\n1\\n2\\n3\\n4\\n0\\n3\\n5\\n2\\n1\\n0\\n3\\n2\\n1\\n0\\n2\\n0\\n0\\n0\\n0\") == \"1\\n6 b\"\nassert solution(\"4\\n1\\n2\\n3\\n4\\n0\\n3\\n5\\n2\\n1\\n0\\n2\\n0\\n0\\n0\\n0\") == \"2\\n2\\n2\"\nassert solution(\"4\\n1\\n2\\n3\\n4"
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1 5\n''') == '40'\n\nassert solution('''288 291\n''') == '76'\n\nassert solution('''2 2\n''') == '0'\n\nassert solution('''4 5\n''') == '20'\n\nassert solution('''4 5\n''') == '20'"
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"1 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"1 2\") == \"5\"\n\"\"\""
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\"\n\"\"\""
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5') == '40'\nassert solution('1 5') == '40'\nassert solution('1 10') == '10'\nassert solution('1 10') == '10'\nassert solution('1 100') == '100'\n"
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 5') == 40\nassert solution('288 291') == 76\n\"\"\""
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5') == 40\n"
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5\") == \"40\"\nprint(solution(\"1 5\"))\n"
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 5') == '40'\n\n-----\n'''"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '0\\n-1'\nassert solution('0') == '0\\n0'\nassert solution('1') == '0\\n-1'\nassert solution('2') == '0\\n0'\nassert solution('3') == '0\\n0'\n"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nCAT\\nDOG\\nCOT\") == \"COG\"\nassert solution(\"2\\nCAT\\nDOG\") == \"0\"\nassert solution(\"2\\nCAT\\nDOG\\nCOT\") == \"0\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution([\"CAT\", \"DOG\"]) == \"COG\"\n\"\"\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\nCAT\\nDOG\\nCOT\\n') == 'COG'\nassert solution('2\\nCAT\\nDOG\\n') == '0'\nassert solution('2\\nCAT\\nDOG\\n') == '0'\nassert solution('2\\nCAT\\nDOG\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nCAT\\nDOG\\nCOT\") == \"COG\"\nassert solution(\"2\\nCAT\\nDOG\") == 0\nassert solution(\"2\\nCAT\\nDOG\\nCOT\") == 0\nassert solution(\"2\\nCAT\\nDOG\\nCOT\\n\") == 0\n\"\"\"\n\nfrom itertools import permutations\nfrom collections import defaultdict\nfrom string import ascii_uppercase"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nCAT\\nDOG\\nCOT\\n\") == \"COG\"\nassert solution(\"2\\nCAT\\nDOG\\n\") == \"0\"\nassert solution(\"2\\nCAT\\nDOG\\n\") == \"0\"\nassert solution(\"2\\nCAT\\nDOG\\n\") == \"0\"\nassert solution(\"1\\nCAT\\n\") == \"0\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nCAT\\nDOG\\nCOT\") == \"COG\"\nassert solution(\"2\\nCAT\\nDOG\") == 0\nassert solution(\"2\\nCAT\\nDOG\") == -1"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nCAT\\nDOG\\nCOT') == 'COG\\n3'\nassert solution('2\\nCAT\\nDOG') == '0\\n-1'"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\nCAT\\nDOG\\nCOT\\n') == 'COG'\nassert solution('2\\nCAT\\nDOG\\n') == '0'\nassert solution('2\\nCAT\\nDOG\\n') == '0'\nassert solution('2\\nCAT\\nDOG\\n') == '0'\nassert solution('2\\nCAT\\nDOG\\n') == '0'\n"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nCAT\\nDOG\\nCOT\\n\") == \"COG\\n3\"\nassert solution(\"2\\nCAT\\nDOG\\n\") == \"0\\n-1\"\n\"\"\"\n\nfrom enum import Enum\nfrom typing import List\n\nfrom collections import Counter, defaultdict\n\nDICTIONARY_SIZE = 100010\n\nclass ChangeState(Enum):\n    GOOD = 1\n    BAD = 2\n\nclass Solution:\n    def __init__(self, dictionary: List[str]):\n        self.dict = dictionary\n\n    def find_words(self, word: str, i: int = 0) -> List[str]:\n        \"\"\"\n        Yield all possible words from given word with one change.\n        \"\"\"\n        word_counter = Counter(word)\n        for key in self.dict:\n            if key!= word and self.is_changeable(word, key, word_counter):\n                yield key\n                \n    def is_changeable(self, word: str, key: str, word_counter: Counter) -> bool:\n        for i, (letter, _) in enumerate(zip(word, key)):\n            if word_counter[letter] > 0 and word_counter[letter]!= key.count(letter):\n                return False\n        return True\n\n    def min_change_steps(self, word: str, target_word: str) -> int:\n        \"\"\"\n        Count shortest number of changes to transform word to target word.\n        \"\"\"\n        min_steps = len(word) + 1\n        for word_target in self.find_words(target_word):\n            steps = self.find_path(word, word_target)\n            if steps < min_steps:\n                min_steps = steps\n        return min_steps\n    \n    def find_path(self, word: str, target_word: str) -> int:\n        path = []\n        words = self.find_words(word)\n        for word_target in self.find_words(target_word):\n            steps = 0\n            if len(word) == len(word_target):\n                for (word_w, word_t) in zip(word, word_target):\n                    if word_w!= word_t:\n                        steps += 1\n            else:\n                steps = len(word) - len(word_target)\n            path.append(steps)\n            if target_word == word_target:\n                break\n        return min(path)"
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open('test_01').read()) == '7\\n'\nassert solution(open('test_02').read()) == '3\\n'\nassert solution(open('test_03').read()) == '6\\n'\n\n-----Notes-----\nThe pair of numbers $(i, j)$ is confused if $i > j$.\n\"\"\""
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 1') == '9'\n\"\"\""
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('4 3') == '6'\nassert solution('10 1') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1\") == \"9\"\nassert solution(\"4 3\") == \"6\"\n\"\"\""
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 1\\n\") == \"9\"\nassert solution(\"4 3\\n\") == \"6\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 1\") == \"9\"\nassert solution(\"4 3\") == \"6\"\n\"\"\"\n\nn, c = map(int, input().split())\nprint(n ** 2 - (n-1) ** 2 * (n-2) // 2 - (n-1) * (n-2) + (n-1) * n - n - c)"
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"10 1\") == \"9\"\nprint(\"Success\")\n\n\"\"\""
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == 6\n\"\"\"\n\nfrom math import comb, factorial\n\nN, C = map(int, input().split())\n\nmodulo = 1000000007"
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'\n\"\"\""
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1\") == 9\nassert solution(\"4 3\") == 6\n\"\"\"\nfrom collections import Counter\nimport sys\n\nN, C = [int(x) for x in sys.stdin.readline().split()]\ncounts = Counter([x for x in range(1, N + 1)])\n\nresult = 0\nfor i in range(1, N + 1):\n    for j in range(i + 1, N + 1):\n        if counts[i] == C or counts[j] == C:\n            continue\n        if i < j:\n            result += min(C - counts[i], C - counts[j])\n\nprint(result)"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n./.V.\\n./.V.\\n..#..\\n.V.#.\\n\\.V./\") == 3\nassert solution(\"2 5\\nV...\\nH...V\") == -1\nassert solution(\"5 5\\nV.#.#\\nH.#.#V\\nH.#.#V\\nH.#.#V\\nH.#.#V\") == 0\nassert solution(\"5 5\\n....\\n....\\n....\\n....\\n....\") == 0\nassert solution(\"2 5\\nH.#.#V\\nH.#.#V\") == -1\n\n---\n\"\"\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n/.V.\\n./.V.\\n..#..\\n.V.#.\\n\\.V./\") == 3\n\"\"\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"./\") == \"\"\nassert solution(\"..V..\\n.V..V.\\n.V..V.\\n..V..\\nV..VV\\n\") == 2\nassert solution
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5\\n/.V.\\n./.V.\\n..#..\\n.V.#.\\n\\.V./\\n') == 3\nassert solution('2 5\\nV...\\nH...V\\n') == -1\nassert solution('1 1\\nV\\n') == 0\nassert solution('1 2\\n\\\\\\n') == 2\nassert solution('3 5\\nVVVV\\nHHHH\\nHHHV\\nVVVV\\n') == 3\n"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".V.\\n./.V.\\n..#..\\n.V.#.\\n\\.V./\") == 3\nassert solution(\"V...\\nH...V\") == -1"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".V.\") == 1\nassert solution(\"V.V\") == 0\nassert solution(\"V.V.V\") == 2\nassert solution(\"V..VVV\") == 3\nassert solution(\"V.V.VV\") == 3\n"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5\\n/.V.\\n./.V.\\n..#..\\n.V.#.\\n\\V./') == 3\n\"\"\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n./.V.\\n./.V.\\n..#..\\n.V.#.\\n\\.V./\") == 3\nassert solution(\"2 5\\nV...\\nH...V\") == -1\n\"\"\""
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n/.V.\\n./.V.\\n..#..\\n.V.#.\\n\\.V./\") == 3\n\"\"\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n./V.\\n./.V.\\n..#..\\n.V.#.\\n\\.V./\") == 3\nassert solution(\"2 5\\nV...\\nH...V\") == -1\nassert solution(\"10 10\\n...#.\\n..#.#\\n..#.#\\n.#.##\\n.#.##\\n.#.#.#\\n.#.#.#\\n.#.#.#\\n.#.#.#\\n\") == -1\nassert solution(\"3 3\\n.V.V\\n..#..\\n.V.#\\n..#..\") == 0\nassert solution(\"4 4\\n....\\n...V\\n...V\\n....\") == 2\n"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('fox jumps ove\\nquick brown fox jumps over the lazy dog') == 'fox jumps over the lazy dog'\nassert solution('n fox jumps ove\\nn quick brown fox jumps over the lazy dog') == 'fox jumps over the lazy dog'\nassert solution('n fox jumps ove\\nn quick brown fox jumps over the lazy dog\\n\\n\\n\\n\\n') == 'AMBIGUOUS'\nassert solution('abcdefg\\ndefghijk\\nefghijx') == 'AMBIGUOUS'\nassert solution('cdefghi\\nefghijk\\nefghijx') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcefghi\") == \"The quick brown fox jumps over the lazy dog.\"\nassert solution(\"abcdefghijklmnop\") == \"The quick brown fox jumps over the lazy dog.\"\nassert solution(\"efghefghijklmnop\") == \"AMBIGUOUS\"\nassert solution(\"abcdefgjklmnopqrstuvwxyz\") == \"AMBIGUOUS\"\nassert solution(\"efgjklmnoqrstuvwxyzabcdefghijklmnop\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"n fox jumps ove\\n uick brown f\\nThe quick b\\ny dog.\") == \"The quick brown fox jumps over the lazy dog.\"\nassert solution(\"cdefghi\\nefghijk\\nefghijx\\nabcdefg\") == \"AMBIGUOUS\"\nassert solution(\"n fox jumps ove\\nn fox jumps ove\\n uick brown f\\nThe quick b\\ny dog.\") == \"AMBIGUOUS\"\nassert solution(\"n fox jumps ove\\nn fox jumps ove\\n uick brown f\\nThe quick b\\ny dog.\") == \"AMBIGUOUS\"\nassert solution(\"n fox jumps ove\\nn fox jumps ove\\n uick brown f\\nThe quick b\\ny dog.\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('oxonf') == 'oxonf'\nassert solution('oxonf')!= 'oxonfj'\nassert solution('oxonf')!= 'oxjnf'\nassert solution('oxonf')!= 'onfjk'\nassert solution('oxonf')!= 'onfjk'\n"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('n fox jumps ove\\n uick brown f') == 'The quick brown fox jumps over the lazy dog.'\nassert solution('n fox jumps ove\\n uick brown f\\n n fox jumps ove\\n uick brown f') == 'AMBIGUOUS'\nassert solution('n fox jumps ove\\n uick brown f\\n n fox jumps ove\\n uick brown f\\n n fox jumps ove\\n uick brown f') == 'AMBIGUOUS'\nassert solution('n fox jumps ove\\n uick brown f\\n n fox jumps ove\\n uick brown f\\n n fox jumps ove\\n uick brown f\\n n fox jumps ove\\n uick brown f') == 'AMBIGUOUS'"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"n fox jumps ove\\n\"\n                \"uick brown f\\n\"\n                \"The quick b\\n\"\n                \"y dog.\\n\"\n                \"rown fox\\n\"\n                \"mps over the l\\n\"\n                \"the lazy dog\") == \"The quick brown fox jumps over the lazy dog.\"\n\n\"\"\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\nn fox jumps ove\\nuick brown f\\nThe quick b\\ny dog.\\nrown fox\\nmps over the l\\nthe lazy dog\") == 'The quick brown fox jumps over the lazy dog'\nassert solution(\"4\\ncdefghi\\efghijk\\efghijx\\abcdefg\") == 'AMBIGUOUS'\n-----Test 1-----\ntime limit\n1\nmax mem\n\n-----Test 2-----\ntime limit\n1\nmax mem\n\n-----Test 3-----\ntime limit\n1\nmax mem\n\n-----Test 4-----\ntime limit\n1\nmax mem\n\n-----Test 5-----\ntime limit\n1\nmax mem\n\n-----Test 6-----\ntime limit\n1\nmax mem\n\n-----Test 7-----\ntime limit\n1\nmax mem\n\n-----Test 8-----\ntime limit\n1\nmax mem\n\n-----Test 9-----\ntime limit\n1\nmax mem\n\n-----Test 10-----\ntime limit\n1\nmax mem\n\n-----Test 11-----\ntime limit\n1\nmax mem\n\n-----Test 12-----\ntime limit\n1\nmax mem\n\n-----Test 13-----\ntime limit\n1\nmax mem\n\n-----Test 14-----\ntime limit\n1\nmax mem\n\n-----Test 15-----\ntime limit\n1\nmax mem\n\n-----Test 16-----\ntime limit\n1\nmax mem\n\n-----Test 17-----\ntime limit\n1\nmax mem\n\n-----Test 18-----\ntime limit\n1\nmax mem\n\n-----Test 19-----\ntime limit\n1\nmax mem\n\n-----Test 20-----\ntime limit\n1\nmax mem\n\n-----Test 21-----\ntime limit\n1\nmax mem\n\n-----Test 22-----\ntime limit\n1\nmax mem\n\n-----Test 23-----\ntime limit\n1\nmax mem\n\n-----Test 24-----\ntime limit\n1\nmax mem\n\n-----Test 25-----\ntime limit\n1\nmax mem\n\n-----Test 26-----\ntime limit\n1\nmax mem\n\n-----Test 27-----\ntime limit\n1\nmax mem\n\n-----Test 28-----\ntime limit\n1\nmax mem\n\n-----Test 29-----\ntime limit\n1\nmax mem\n\n-----Test 30-----\ntime limit\n1\nmax mem\n\n-----Test 31-----\ntime limit\n1\nmax mem\n\n-----Test 32-----\ntime limit\n1\nmax mem\n\n-----Test 33-----\ntime limit\n1\nmax mem\n\n-----Test 34-----\ntime limit\n1\nmax mem\n\n-----Test 35-----\ntime limit\n1\nmax mem\n\n-----Test 36-----\ntime limit\n1\nmax mem\n\n-----Test 37-----\ntime limit\n1\nmax mem\n\n-----Test 38-----\ntime limit\n1\nmax mem\n\n-----Test 39-----\ntime limit\n1\nmax mem\n\n-----Test 40-----\ntime limit\n1\nmax mem\n\n-----Test 41-----\ntime limit\n1\nmax mem\n\n-----Test 42-----\ntime limit\n1\nmax mem\n\n-----Test 43-----\ntime limit\n1\nmax mem\n\n-----Test 44-----\ntime limit\n1\nmax mem\n\n-----Test 45-----\ntime limit\n1\nmax mem\n\n-----Test 46-----\ntime limit\n1\nmax mem\n\n-----Test 47-----\ntime limit\n1\nmax mem\n\n-----Test 48-----\ntime limit\n1\nmax mem\n\n-----Test 49-----\ntime limit\n1\nmax mem\n\n-----Test 50-----\ntime limit\n1\nmax mem\n\n-----Test 51-----\ntime limit\n1\nmax mem\n\n-----Test 52-----\ntime limit\n1\nmax mem\n\n-----Test 53-----\ntime limit\n1\nmax mem\n\n-----Test 54-----\ntime limit\n1\nmax mem\n\n-----Test 55-----\ntime limit\n1\nmax mem\n\n-----Test 56-----\ntime limit\n1\nmax mem\n\n-----Test 57-----\ntime limit\n1\nmax mem\n\n-----Test 58-----\ntime limit\n1\nmax mem\n\n-----Test 59-----\ntime limit\n1\nmax mem\n\n-----Test 60-----\ntime limit\n1\nmax mem\n\n-----Test 61-----\ntime limit\n1\nmax mem\n\n-----Test 62-----\ntime limit\n1\nmax mem\n\n-----Test 63-----\ntime limit\n1\nmax mem\n\n-----Test 64-----\ntime limit\n1\nmax mem\n\n-----Test 65-----\ntime limit\n1\nmax mem\n\n-----Test 66-----\ntime limit\n1\nmax mem\n\n-----Test 67-----\ntime limit\n1\nmax mem\n\n-----Test 68-----\ntime limit\n1\nmax mem\n\n-----Test 69-----\ntime limit\n1\nmax mem\n\n-----Test 70-----\ntime limit\n1\nmax mem\n\n-----Test 71-----\ntime limit\n1\nmax mem\n\n-----Test 72-----\ntime limit\n1\nmax mem\n\n-----Test 73-----\ntime limit\n1\nmax mem\n\n-----Test 74-----\ntime limit\n1\nmax mem\n\n-----Test 75-----\ntime limit\n1\nmax mem\n\n-----Test 76-----\ntime limit\n1\nmax mem\n\n-----Test 77-----\ntime limit\n1\nmax mem\n\n-----Test 78-----\ntime limit\n1\nmax mem\n\n-----Test 79-----\ntime limit\n1\nmax mem"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcdefgh\") == \"abcdefgh\"\nassert solution(\"abcdefg\") == \"AMBIGUOUS\"\nassert solution(\"efghijk\") == \"efghijk\"\nassert solution(\"efghijx\") == \"AMBIGUOUS\"\nassert solution(\"n fox jumps ove\") == \"n fox jumps ove\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"n fox jumps ove\\n\" +\n\"uick brown f\\n\" +\n\"The quick b\\n\" +\n\"y dog.\\n\" +\n\"rown fox\\n\" +\n\"mps over the l\\n\" +\n\"the lazy dog\\n\") == \"The quick brown fox jumps over the lazy dog.\"\nassert solution(\"cdefghi\\n\" +\n\"efghijk\\n\" +\n\"efghijx\\n\" +\n\"abcdefg\\n\") == \"AMBIGUOUS\"\nassert solution(\"abcdefghijk\") == \"AMBIGUOUS\"\nassert solution(\"abcdefghijx\") == \"AMBIGUOUS\"\n\"\"\"\n\nimport sys\n\n###############################################################################"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n n fox jumps ove\\n uick brown f\\nThe quick b\\n y dog.\\n rown fox\\n mps over the l\\n the lazy dog\") == \"The quick brown fox jumps over the lazy dog.\"\nassert solution(\"4\\n cdefghi\\n efghijk\\n efghijx\\n abcdefg\") == \"AMBIGUOUS\"\n\"\"\""
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\") == \"0-0-\"\n\"\"\""
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == \"0-0-0-0\"\n\nSample Input 3:\n6 2\n0 0 -1\n0 1 2\n1 3 3\n2 2 1\n2 2 0\n2 0 0\nSample Output 3:\nimpossible"
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == \"0-0-0\"\n\nassert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == \"impossible\""
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"5 6\\n\"\n    \"3 -2 3\\n\"\n    \"2 -2 4\\n\"\n    \"2 3 3\\n\"\n    \"1 1 2\\n\"\n    \"0 1 4\\n\"\n    \"2 5 1\\n\") == \"0+-\"\n\"\"\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\\n\") == \"0-0+0\"\nassert solution(\"3 2\\n1 2 1\\n-2 0 2\\n\") == \"0-0+0\"\n\n\"\"\"\n\nimport math\nimport sys\nimport os\nfrom collections import deque\nfrom typing import List\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"../../I\"))\nimport input_utils\n\nDEBUG_MODE = True\n"
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == '0-0-0-0-0'\n\nassert solution(\"5 6\\n1 2 1\\n-2 0 2\\n3 2 3\\n0 1 4\\n2 5 1\") == '0-0-0-0-0'\n\nassert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == 'impossible'\n\nassert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == '0-0-0-0-0'\n\nprint('Success')\n\n\"\"\"\n\nfrom math import atan\nfrom collections import Counter\n"
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == \"0-0-0\"\nassert solution(\"3 2\\n1 2 1\\n-2 0 2\") == \"0-0\"\nassert solution(\"1 2 1\\n-2 0 2\") == \"impossible\""
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == \"0+-\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == \"0-0-\"\nassert solution(\"3 2\\n1 2 1\\n-2 0 2\") == \"0-0-\"\nassert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == \"impossible\"\nassert solution(\"2 2\\n1 2 1\\n0 0 2\") == \"impossible\"\nassert solution(\"3 2\\n1 2 1\\n-2 0 2\") == \"impossible\"\n\nprint(\"Success\")\n\nNote:\nIt is guaranteed that for every $n$ there exists at least one solution.\n\"\"\""
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1''') == '0+-\nassert solution('''5 2\n1 2 1\n-2 0 2\nSample Output 2:\nimpossible\n\nassert solution('''2 2\n1 2 1\n-2 0 2\nSample Output 2:\n0+-\n''') == 'impossible'\nassert solution('''3 2\n1 2 1\n-2 0 2\nSample Output 2:\n0+-\n''') == '0-0-\n\n'''\n\nimport itertools"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 2\n1 1\n1 1\n1\n1 1 1''') == '''1\n1\n1\n1\n1\n'''\n\nassert solution('''2 2\n1 2\n2 3\n2\n1 2 2\n2 2 2''') == '''4\n4\n'''\n\nassert solution('''2 2\n1 1\n2 3\n2\n1 2 2\n2 2 2''') == '''1\n1\n1\n1\n1\n'''\n\nassert solution('''2 2\n2 3\n2\n1 1 1\n1 1 1''') == '''1\n1\n1\n1\n1\n'''\n\nassert solution('''5 3\n2 2\n2 3\n2\n1 2 1\n2 1 1\n2 2 2\n2 2 2\n1 3\n1 2 1\n2 2 1\n2 1 1\n2 1 1\n''') == '''3\n2\n2\n2\n4\n4\n4\n'''\n"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\\n2 3\\n2\\n1 1 1\") == \"4\\n4\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n1 1\\n2 3\\n2\\n1 1 1') == '4'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\\n2 3\\n2\\n1 1 1\") == \"4\"\n\nprint(solution(\"2 2\\n1 1\\n2 3\\n2\\n1 1 1\"))"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 1\\n2 3\\n2\\n1 1 1\") == '4\\n4'\nassert solution(\"2 2\\n2 3\\n2\\n1 2 2\") == '4\\n4'\nassert solution(\"4 4\\n1 3\\n2 3\\n2 2 2\\n1 1 1\") == '4\\n4'\nassert solution(\"4 4\\n3 3\\n1 3\\n1 2 2\") == '4\\n4'\nassert solution(\"4 4\\n2 2\\n2 3\\n2 2 2\\n1 1 1\") == '4\\n4'\n"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a\\nb') == 'ab'\nassert solution('abc') == 'abc'\nassert solution('a\\nb\\nc') == 'abc'\n"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(r\"D:\\Desktop\\\u041f\u0440\u043e\u0435\u043a\u0442\u044b\\\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u0434\u0430\\\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b Python\\\u0417\u0430\u043d\u044f\u0442\u0438\u0435 \u21162\\input.txt\", \"r\")) == open(r\"D:\\Desktop\\\u041f\u0440\u043e\u0435\u043a\u0442\u044b\\\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u0434\u0430\\\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b Python\\\u0417\u0430\u043d\u044f\u0442\u0438\u0435 \u21162\\output.txt\", \"r\").read()\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 2\n1 1\n1 1\n1\n1 1 1''') == '''1\n1\n1\n1'''\n\nassert solution('''2 2\n1 2\n2 3\n2\n1 2 2\n2 2 2''') == '''4\n4\n4\n4'''\n\nassert solution('''2 2\n1 1\n2 2\n1\n1 1 1\n1 1 1''') == '''1\n2\n1\n1\n2'''\n\nassert solution('''2 2\n1 1\n1 1\n1\n1 1 1''') == '''1\n1\n1\n1\n1'''\n\nassert solution('''2 2\n1 1\n1 1\n1\n1 1 1''') == '''1\n2\n1\n1\n1\n'''"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 1\\n2 3\\n2\\n1 1 1\") == \"4\"\nassert solution(\"2 2\\n1 1\\n2 3\\n2\\n1 1 1\") == \"1\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 1\\n2 3\\n2\\n1 2 2\\n2 2 2\") == \"4\"\n\"\"\"\n\n_N, _C = list(map(int, input().split()))\n_a = list(map(int, input().split()))\n_b = list(map(int, input().split()))\n_Q = int(input())\n_p = []\n_a_p = [0] * _N\n_b_p = [0] * _N\nfor _ in range(_Q):\n    _p.append(list(map(int, input().split())))\nfor i in range(_N):\n    _a_p[i] = _a[i]\n    _b_p[i] = _b[i]\n_a_p_old = _a_p[:]\n_b_p_old = _b_p[:]\nfor _p_i in _p:\n    _a_p[int(_p_i[0]) - 1] = _p_i[1]\n    _b_p[int(_p_i[0]) - 1] = _p_i[2]\n    _a_p[int(_p_i[0]) - 1] = max(_a_p[int(_p_i[0]) - 1], _a_p_old[int(_p_i[0]) - 1])\n    _b_p[int(_p_i[0]) - 1] = max(_b_p[int(_p_i[0]) - 1], _b_p_old[int(_p_i[0]) - 1])\n_a_b_p = []\nfor i in range(_N):\n    if _a_p[i] >= 1 and _b_p[i] >= 1:\n        _a_b_p.append([_a_p[i], _b_p[i]])\n_a_b_p = sorted(_a_b_p, key=lambda x: x[0], reverse=True)\n_n = 0\nfor _i in _a_b_p:\n    _n += _i[0] * _i[1]\n_n = _n % (10 ** 7)\nprint(_n)\n"
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB') == 'YES'\nassert solution('3 4\\nWWRR\\nWRRR\\nWRRR') == 'NO'"
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB\") == \"YES\"\nassert solution(\"3 4\\nWWRR\\nWRRR\\nWRRR\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB') == 'YES'\nassert solution('3 4\\nWWRR\\nWRRR\\nWRRR') == 'NO'"
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB\") == \"YES\"\n\"\"\""
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB') == 'YES'\nassert solution('3 4\\nWWRR\\nWRRR\\nWRRR') == 'NO'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB\") == \"YES\"\nassert solution(\"3 4\\nWWRR\\nWRRR\\nWRRR\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB\") == \"YES\"\nassert solution(\"3 4\\nWWRR\\nWRRR\\nWRRR\") == \"NO\""
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB\") == \"YES\"\nassert solution(\"3 4\\nWWRR\\nWRRR\\nWRRR\") == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB\") == \"YES\"\nassert solution(\"3 4\\nWWRR\\nWRRR\\nWRRR\") == \"NO\""
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB\") == \"YES\"\nassert solution(\"3 4\\nWWRR\\nWRRR\\nWRRR\") == \"NO\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 5\") == 1\nassert solution(\"1 2 3\") == 3\n\"\"\"\n\n\"\"\"\n[N, K, S] = [int(x) for x in stdin.split()]\narray = [int(x) for x in stdin.split()]"
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 5\\n1\\n2\\n3\\n3\\n2\\n1') == '3'\nassert solution('6 3 5\\n1\\n2\\n3\\n3\\n2\\n1') == '3'\n\"\"\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 5\\n1\\n2\\n3\") == \"1\"\nassert solution(\"6 3 5\\n1\\n2\\n3\\n3\\n2\\n1\") == \"3\"\n\"\"\"\n\n\"\"\"\nThe key is that:\n- the set of all contiguous subarrays is exactly S\n- so we want to find the least number of changes we have to make in order to create a subarray of S length with contiguous elements\n- we can simply keep track of the number of changes we have made since we last saw a subarray of length S\n- if we see an array with an element that is the sum of all of the subarrays we have seen we must increment our counter\n\"\"\""
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 5\") == \"1\"\n\"\"\"\n\nn, k, s = map(int, input().split())\nA = [int(a) for a in input().split()]\n\nassert n == len(A)\nassert k <= n and k > 0\nassert s <= 5000 and s > 0"
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 5\\n1\\n2\\n3\") == \"1\"\nassert solution(\"6 3 5\\n1\\n2\\n3\\n3\\n2\\n1\") == \"3\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 5\\n1\\n2\\n3\\n3\\n2\\n1') == '3'\nassert solution('6 3 5\\n1\\n2\\n3\\n3\\n2\\n1') == '3'\n\"\"\"\n\n\"\"\"\nThe dynamic programming solution is based on the observation that for every element, the first K elements to the left of it must be a contiguous segment of the array that sums to S.\n\nLet's say we have an element of the array that is not smooth. To make it smooth, we should modify the element by moving one element to the left until the sum of the K consecutive elements is exactly S.\n\nAs we're looking for the minimum number of changes, we're going to focus on the most right element of the array, the one that cannot be modified. If it is not smooth, then we're going to modify all of its ancestors, moving one element to the left until the sum of the K consecutive elements is exactly S.\n\nThe time complexity of this algorithm is O(N^2 * K) where N is the size of the array and K is the K-smoothness parameter. The space complexity is O(N^2) for the memo array.\n\"\"\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 5\\n1\\n2\\n3') == '1'\nassert solution('6 3 5\\n1\\n2\\n3\\n3\\n2\\n1') == '3'\n\"\"\""
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 5\\n1\\n2\\n3\\n3\\n2\\n1') == '1'\nassert solution('6 3 5\\n1\\n2\\n3\\n3\\n2\\n1') == '3'\n\"\"\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n3\\n3\\n2\\n1\") == \"3\"\nassert solution(\"4\\n4\\n4\\n4\\n4\\n4\") == \"0\"\nassert solution(\"4\\n5\\n4\\n4\\n4\\n4\") == \"0\"\nassert solution(\"4\\n4\\n4\\n4\\n4\\n4\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str([3,3,5])) == \"1\"\nassert solution(str([3,3,5,3])) == \"2\"\nassert solution(str([3,3,5,3,3])) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n0 2\\n1 2\\n3 3') == '3 2'\nassert solution('5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5') == '12 3'\nprint('Passed!')\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------\n"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n0 2\\n1 2\\n3 3') == '3 2'\nassert solution('5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5') == '12 3'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 2\\n1 2\\n3 3\") == \"3 2\"\n\"\"\"\nimport math"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 2\\n1 3\\n3 3') == '12 3'\n"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 2\\n1 2\\n3 3\\n7 5\\n9 5\") == \"12 3\"\n\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline())\n\ntowers = {}\nfor i in range(n):\n    x, d = map(int, stdin.readline().split())\n    towers[x] = d\n\ntowers = [(k, v) for k, v in towers.items()]\ntowers = sorted(towers, key=lambda x: x[1])\n\npos = towers[0][0]\nmax_d = towers[0][1]\ntowers = towers[1:]\n\nprint(pos, max_d)\nfor tower in towers:\n    print(tower)\n    if tower[1] > max_d:\n        pos = tower[0]\n        max_d = tower[1]\n\"\"\"\n\nn = int(input())\ntowers = {}\nfor i in range(n):\n    x, d = map(int, input().split())\n    towers[x] = d\n\ntowers = [(k, v) for k, v in towers.items()]\ntowers = sorted(towers, key=lambda x: x[1])\n\npos = towers[0][0]\nmax_d = towers[0][1]\ntowers = towers[1:]\n\nprint(pos, max_d)\nfor tower in towers:\n    print(tower)\n    if tower[1] > max_d:\n        pos = tower[0]\n        max_d = tower[1]\n"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2\") == \"2 1\"\nassert solution(\"2\\n0 2\") == \"1 1\"\nassert solution(\"1\\n1 1\") == \"1 1\"\nassert solution(\"1\\n0 1\") == \"1 1\"\nassert solution(\"1\\n0 1\\n1 2\") == \"2 2\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 1\") == \"2 3\"\nassert solution(\"2 2\\n0 0\") == \"0 0\"\n\"\"\"\n\nn = int(input())\nmax_number = 0\nmin_position = float('inf')\n\nfor i in range(n):\n    x, d = map(int, input().split())\n    position = x\n    jumps = d\n    while position >= 0:\n        if position > max_number:\n            max_number = position\n            min_position = jumps\n        position += jumps\n        jumps += jumps\n\nprint(min_position, max_number)\n"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 2\\n1 2\\n3 3\") == \"3 2\"\n\"\"\"\n\nfrom tools import timing"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 2\\n1 2\\n3 3\") == '3 2'\nassert solution(\"5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5\") == '12 3'\n"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 2\\n1 2\\n3 3\\n7 5\\n9 5\") == \"3 2\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import log2, ceil\nimport string\n"
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1\\n0\\n0\\n3\") == \"100\\n000\\n01\\n01\\n01\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n1\\n1\\n1\") == \"100\\n010\\n101\\n010\\n100\"\n\"\"\""
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1\\n0\\n0\\n3\") == \"100\\n000\\n01\\n01\\n01\"\nassert solution(\"3\\n0\\n1 1\\n1\\n1 1\\n1\\n1\") == \"0000\\n1001\\n0010\\n101\\n010\\n000\\n100\\n010\"\n\"\"\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0\\n0\\n3\\n\") == \"100\\n000\\n01\\n01\\n01\"\nassert solution(\"3\\n0\\n1 1\\n1\\n1 1\\n1\\n1\") == \"0000\\n1001\\n0010\\n101\\n010\\n000\\n100\\n\"\nassert solution(\"5\\n0\\n2 2\\n1\\n2 2\\n2\\n2\") == \"01110\\n10110\\n11110\\n10010\\n11110\\n10110\\n11110\\n10110\\n11110\\n\"\nassert solution(\"2\\n0\\n0\\n3\\n\") == \"100\\n000\\n01\\n01\\n01\"\nassert solution(\"6\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1\\n0\\n1 1"
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n0\\n0\\n3\") == \"100\\n010\\n101\\n010\\n110\"\nassert solution(\"3\\n1\\n0\\n0\\n3\\n1\\n0\\n0\\n3\") == \"010\\n101\\n010\\n110\\n011\\n101\\n010\\n110\"\nassert solution(\"3\\n1\\n0\\n0\\n3\\n2\\n0\\n0\\n3\\n1\\n0\\n0\\n3\") == \"010\\n101\\n010\\n110\\n010\\n101\\n010\\n110\\n011\\n101\\n010\\n110\"\n\n\"\"\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1\\n0\\n0\\n3\\n\") == \"100\\n000\\n01\\n01\\n01\"\nassert solution(\"3\\n0\\n1 1\\n1\\n1 1\\n1\\n1\\n\") == \"0000\\n1001\\n0010\\n101\\n010\\n000\\n100\\n010\"\n\n\"\"\"\n\nn = int(stdin.readline())"
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1\\n0\\n0\\n3\") == \"100\\n000\\n01\\n01\\n01\"\nassert solution(\"3\\n0\\n1 1\\n1\\n1 1\\n1\\n1\") == \"0000\\n1001\\n0010\\n101\\n010\\n000\\n100\\n010\"\nassert solution(\"3\\n0\\n1 1\\n1\\n1 1\\n1\\n1\") == \"0000\\n1001\\n0010\\n101\\n010\\n010\\n010\"\nassert solution(\"3\\n0\\n1 1\\n1\\n1 1\\n1\\n1\") == \"0000\\n1001\\n0010\\n010\\n010\\n010\\n010\"\n\nprint(\"Successfully solved!\")\n"
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_0) == expected_output_0\n\nassert solution(test_input_1) == expected_output_1\n\nassert solution(test_input_2) == expected_output_2\n\nprint(\"Correct!\")\n"
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"100\\n010\\n101\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\nassert sys.getrecursionlimit() == 10 ** 9\n\nsys.setrecursionlimit(10 ** 6)\n\n__author__ = 'Luca Daniel'\n__version__ = '2.0.0'\n"
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1\\n0\\n0\\n3\\n\") == \"100\\n000\\n01\\n01\\n01\"\n\nassert solution(\"3\\n0\\n1 1\\n1\\n1 1\\n1\\n1\\n\") == \"0000\\n1001\\n0010\\n101\\n010\\n000\\n100\\n010\"\n\nprint(solution(\"3\\n0\\n1 1\\n1\\n1 1\\n1\\n1\\n\"))"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n1 2\\n2 3\\n2 3\") == \"2\"\nassert solution(\"4 1\\n1 3\\n4 6\\n7 8\\n2 5\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n1 2\\n2 3\\n2 3\") == \"2\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 1\\n1 2\\n2 3\\n2 3\"\n) == \"2\"\n\nassert solution(\n    \"4 1\\n1 3\\n4 6\\n7 8\\n2 5\"\n) == \"3\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n1 2\\n2 3\\n2 3') == '2'\nassert solution('4 1\\n1 3\\n4 6\\n7 8\\n2 5') == '3'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n4 6\\n7 8\\n2 5\") == 3\nprint('Test success!')\n\n\"\"\"\n\n\nimport sys\nimport os"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n1 2\\n2 3\\n2 3\") == 2\n\nassert solution(\"4 1\\n1 3\\n4 6\\n7 8\\n2 5\") == 3\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce\nimport re\n\nclass Solution:\n    def __init__(self, input_str: str):\n        self.input_str = input_str\n        self.n, self.k = map(int, input_str.split())\n        self.show_times = []\n        for line in input_str.split('\\n')[1:]:\n            self.show_times.append([int(i) for i in line.split()])\n\n    def solution(self) -> str:\n        shows = []\n        for times in self.show_times:\n            shows.append([times[0], 1])\n            shows.append([times[1], -1])\n        counter = Counter(shows)\n        shows = sorted(list(set(shows)), key=lambda x: x[0])\n        active_shows = []\n        for i in shows:\n            counter[i] += active_shows[-1][1] if active_shows else 0\n            active_shows.append([i[0], counter[i]])\n        active_shows = [i[1] for i in active_shows if i[1] > 0]\n        return len(active_shows)"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 1\n1 3\n4 6\n7 8\n2 5\n\"\"\") == \"3\"\n\n\"\"\"\nYou are given a list of operations to perform on the linked list and an initial list of the linked list. Do the operations in the order they are given.\n\nTo perform an operation, you should print the value of the node next to the operation, then remove that node from the list. After that, your program should end with the total sum of the list's values.\n\nNote that the initial list of the linked list always contains the head node.\n\nInput format\nThe first line contains two integers n and m separated by a single space.\nThe next m lines contains a pair of integers l and v.\nOutput format\nAfter each remove, print the value of the head node. After the last remove, print the total sum of all nodes' values.\n\nSample input\n6 3\n1 3\n2 5\n4 6\n5 2\nSample output\n1\n5\n8\nExplanation\nAfter the first operation, the list is {1, 3, 5, 6}, the sum is 1+3+5+6=13.\nAfter the second operation, the list is {1, 5, 6}, the sum is 1+5+6=12.\nAfter the third operation, the list is {5, 6}, the sum is 5+6=11.\nAfter the fourth operation, the list is {6}, the sum is 6.\nAfter the fifth operation, the list is {}, the sum is 0.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n1 3\\n4 6\\n7 8\\n2 5\\n\") == 3\n\"\"\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n1 2\\n2 3\\n2 3\") == 2\n\nassert solution(\"4 1\\n1 3\\n4 6\\n7 8\\n2 5\") == 3\n"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n1 2\\n2 3\\n2 3\") == \"2\"\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        [n, k] = stdin.split(\"\\n\")[0].split()\n        [k] = stdin.split(\"\\n\")[1].split()\n        return str(int(sum([int(i[0]) < int(i[1]) for i in stdin.split(\"\\n\")[1:]]) // k))\n"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\n') == '126.86989765'"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 6 450\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5''') == '126.86989765'\nassert solution('''5 6 450\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\nSample Output 2:\nImpossible\n''') == 'Impossible'\n\n'''\nSolution Approach\n\nT = (J + 1) * (R + 1) * (D / L) * 2\n    T = (J + 1) * (R + 1) * (D / L) * 2\n    T = (J + 1) * (R + 1) * (D / L) * 2\n    T = (J + 1) * (R + 1) * (D / L) * 2\n\nIf we assume that the turning angle at a junction is \ud835\udc40 = min(\ud835\udc431, \ud835\udc432, \ud835\udc433,..., \ud835\udc43\ud835\udc5b), then we can say that \ud835\udc40 \u2248 min(\ud835\udc431, \ud835\udc432, \ud835\udc433,..., \ud835\udc43\ud835\udc5b) \u2248 min(\ud835\udc431, \ud835\udc432, \ud835\udc433,..., \ud835\udc43\ud835\udc5b) \u2248 min(\ud835\udc431, \ud835\udc432, \ud835\udc433,..., \ud835\udc43\ud835\udc5b) \u2248 min(\ud835\udc431, \ud835\udc432, \ud835\udc433,..., \ud835\udc43\ud835\udc5b) \u2248 min(\ud835\udc431, \ud835\udc432, \ud835\udc433,..., \ud835\udc43\ud835\udc5b). This turns out to be a very simple and intuitive problem for an optimization problem.\n\nWe are also aware that the straight roads between any two junctions must have at least one turning in the junction. Since there is no actual turning, we can skip this requirement. Furthermore, we know that we can only travel the minimum distance D if we brake and accelerate at the end of each straight road.\n\nWe are also aware that the turning angle of the entire route is at most 2\ud835\udc40. Therefore, we can use the two-way roads to break the route and accelerate.\n\nWe can simplify the expression for the total travel time T = (J + 1) * (R + 1) * (D / L) * 2 by writing it as T = (J + 1)(R + 1)(D / L) + (J + 1) * (R + 1) * (D / L) * 2. This simplification is important for large inputs.\n\nNow, we are left with the expression for the turning angle at each junction. The expression for the turning angle of the entire route is \ud835\udc40 = min(\ud835\udc431, \ud835\udc432, \ud835\udc433,..., \ud835\udc43\ud835\udc5b) and we know that the minimum turning angle is at the end of the route. This means that we can write the expression for the turning angle at each junction as \ud835\udc40 = min(\ud835\udc431, \ud835\udc432, \ud835\udc433,..., \ud835\udc43\ud835\udc5b).\n\nSo we are left with a system of equations with only one unknown \ud835\udc43\ud835\udc5b. The minimal travel time T = (J + 1)(R + 1)(D / L) + (J + 1) * (R + 1) * (D / L) * 2 tells us that \ud835\udc43\ud835\udc5b is the unknown. We only need to determine the route from Junction 1 to Junction J such that \ud835\udc40 = min(\ud835\udc431, \ud835\udc432, \ud835\udc433,..., \ud835\udc43\ud835\udc5b).\n\nWe are aware that \ud835\udc43\ud835\udc5b is only known if there is a route from Junction 1 to Junction J. Thus, the problem is reduced to finding a minimum \ud835\udc431, \ud835\udc432, \ud835\udc433,..., \ud835\udc43\ud835\udc5b such that the turning angle of the route from Junction 1 to Junction J is minimal.\n\nOnce we have the starting point, we can go through the rest of the route and determine the minimum \ud835\udc43\ud835\udc5b in each step.\n\nFor the rightmost two junctions, we can simply determine the minimal turning angle by only considering the second to last and last one-way road to the right. For the rightmost junction, we can only take the shortest path to Junction J.\n\nThe expression for the turning angle at Junction J is \ud835\udc40 = min(\ud835\udc431, \ud835\udc432, \ud835\udc433,..., \ud835\udc43\ud835\udc5b) and the minimum turning angle at Junction J is \ud835\udc40 = min(\ud835\udc431, \ud835\udc432, \ud835\udc433,..., \ud835\udc43\ud835\udc5b).\n\nWe can now determine the minimum turning angle in Junction J by finding the minimum turning angle in Junction J in each step. We can calculate the minimum turning angle for Junction J as:\n\n\ud835\udc40 = min(\ud835\udc431, \ud835\udc432, \ud835\udc433,..., \ud835\udc43\ud835\udc5b) = min(\ud835\udc431, \ud835\udc432, \ud835\udc433,..., \ud835\udc43\ud835\udc5b) = min(\ud835\udc431, \ud835\udc432, \ud835\udc433,..., \ud835\udc43\ud835\udc5b) = min(\ud835\udc431, \ud835\udc432, \ud835\udc433,..., \ud835\udc43\ud835\udc5b) = min(\ud835\udc431, \ud835\udc432, \ud835\udc433,..., \ud835\udc43\ud835\udc5b) = min(\ud835\udc431, \ud835\udc432, "
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\") == \"126.86989765\"\nassert solution(\"5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\") == \"90.00000000\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 6 450\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5''') == '126.86989765'\nassert solution('''5 6 450\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5''') == 'Impossible'\nassert solution('''5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5''') == '90.0'\n"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\") == \"126.86989765\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\") == '90.0'\n"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\n') == '90.0'\nassert solution('5 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\n') == '126.86989765'\n\n\"\"\"\n\nfrom math import pi, cos, sin, asin, atan2\nfrom itertools import permutations"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == '90.0'\nassert solution('5 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == '126.86989765'\n\"\"\"\nimport math"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\") == \"126.86989765\"\n\"\"\"\n\nfrom typing import List, Dict, Set, Tuple, Union\n\nimport math\n\nMAX_DISTANCE: float = 10000000\n\nJUNCTIONS: int = 0\nROADS: int = 0\nDISTANCE: int = 0\n\nJUNCTION_IDS: Set[int] = set()\nJUNCTION_TO_NEIGHBOR_ID: Dict[int, Set[int]] = {}\nJUNCTION_TO_ROAD_ID: Dict[int, Set[int]] = {}\nJUNCTION_TO_ROAD_LENGTH: Dict[int, float] = {}\n\nROAD_IDS: Set[int] = set()\nROAD_SOURCE: Dict[int, int] = {}\nROAD_DESTINATION: Dict[int, int] = {}\nROAD_LENGTH: Dict[int, float] = {}\n"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\n') == '126.86989765'\nassert solution('4 5 3000\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n') == 'Impossible'\n"
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('37') == '4\\n8 29\\n9 28\\n11 26\\n15 22'\nassert solution('30014') == '7\\n85 29929\\n88 29926\\n785 29229\\n788 29226\\n7785 22229\\n7788 22226\\n7789 22225'\n"
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\">100\\n1234567890\\n9\") == \">100\\n123456789\\n90\"\nassert solution(\">1\\n1234567890\\n9\") == \">1\\n12345678\\n8\"\n\n\"\"\""
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('37') == 4\nassert solution('30014') == 7\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '37'\n) == '4'\n\nassert solution(\n    '30014'\n) == '7'\n\nassert solution(\n    '8'\n) == '8'\n\nassert solution(\n    '89999'\n) == '8'\n\nassert solution(\n    '8999999'\n) == '8'"
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"37\") == \"4\"\n\"\"\"\n\nfrom itertools import permutations\n\nP = int(stdin.readline())\n\nnums = set()\nfor i in range(9):\n    for j in range(9):\n        nums.add(10**i + j)\n\nbeverages = {}\nfor i in range(1, P + 1):\n    n = i\n    while n > 0:\n        d = n % 10\n        if d in nums:\n            nums.remove(d)\n        n //= 10\n\nfor i in range(1, P + 1):\n    for j in range(1, P + 1):\n        if i!= j and j in nums:\n            beverages[i] = j\n            nums.remove(j)\n            break"
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(37) == '4\\n8 29\\n9 28\\n11 26\\n15 22'\nassert solution(30014) == '7\\n85 29929\\n88 29926\\n785 29229\\n788 29226\\n7785 22229\\n7788 22226\\n7789 22225'\n\nprint(solution(30014))\n"
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('37') == '4\\n8 29\\n9 28\\n11 26\\n15 22'\n\"\"\"\n\nfrom collections import deque\nfrom functools import lru_cache"
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"37\") == '4'\nassert solution(\"30014\") == '7'\n\"\"\"\n\nP = int(input())\n\ns1 = set()\ns2 = set()\ns3 = set()\ns4 = set()\ns5 = set()\nfor i in range(1, 10):\n    s1.add(i*P)\n    s2.add((i+1)*P)\n    s3.add((i+2)*P)\n    s4.add((i+3)*P)\n    s5.add((i+4)*P)\n\ns1 = s1.difference(s2.union(s3.union(s4.union(s5))))\nprint(len(s1))\nfor i in sorted(s1):\n    print(i, end=\" \")\n"
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"37\") == \"4\"\nassert solution(\"30014\") == \"7\""
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(8) == 4\nassert solution(37) == 4\n\"\"\"\n\nimport sys\nfrom itertools import permutations, combinations"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1\\n\") == \"3.5\"\nassert solution(\"3 3 2\\n\") == \"4.9\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 1') == '3.5'\n\n-----Constraints-----\n$d$ is an integer in the range $[1, 500]$\n$r$ is an integer in the range $[1, n]$\n\n'''"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\nassert solution('3 3 3') == '4'\n\"\"\""
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1\") == \"3.5\"\nassert solution(\"3 3 2\") == \"4.9\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1\") == \"3.5\"\nassert solution(\"3 3 2\") == \"4.9\"\n\"\"\"\n\nn, d, r = [int(c) for c in stdin.split()]\n\nf = 1.0 / r\na = [f * i for i in range(1, r + 1)]\n\nexpect = sum(a) * d / n\nprint(\"{:.6f}\".format(expect))\n"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1\") == \"3.5\"\nassert solution(\"3 3 2\") == \"4.9\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 1\") == \"3.5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 1\\n') == '3.5'\nassert solution('3 3 2\\n') == '4.9'\n\"\"\""
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1\") == \"3.5\"\n\"\"\"\n\n\"\"\"\nThe problem was solved in 0.0480 sec\n\"\"\""
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5 1 5\") == \"19\"\nassert solution(\"12 12 1 12\") == \"4\"\nassert solution(\"1 10 1 10\") == \"0\"\nassert solution(\"1 2 3 4\") == \"0\"\n\nprint('Success')"
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2'\n\nassert solution('1 5 1 5') == '19'\nassert solution('1 5 1 5\\n1 5 1 5') == '19'\nassert solution('1 5 1 5\\n1 5 1 5\\n1 5 1 5') == '19'\n"
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 1 5\") == 19\nassert solution(\"12 12 1 12\") == 4\nprint(solution(\"1 5 1 5\"), end=\" \")\nprint(solution(\"12 12 1 12\"), end=\" \")\n\n-----------------------------------------\n\nGiven a list of intervals, merge all the overlapping intervals to produce a list that has only mutually exclusive intervals.\n\nExample:\n\nGiven A = [[1,4], [2,5], [7,9]],\n\nYour function should return [[1,5], [7,9]],\n\nExplanation: Since [1,4] and [2,5] overlap, we merged them into one [1,5]."
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '1'\nassert solution('2 3 5 6') == '1'\nassert solution('1 10 1 10') == '1'\nassert solution('2 3 4 5') == '2'\n"
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n\"\"\""
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 1 5\") == 19\n\"\"\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n\"\"\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 1 5\") == \"19\"\n\"\"\""
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 1 5\") == \"19\"\n\nsolution()\n"
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 5 1 5') == '19', 'check your solution'\n\nprint(solution(input().split(' ')))\n"
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5\") == \"4\"\n\"\"\"\nimport sys\nfrom typing import List"
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5') == '4'\n\"\"\""
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\nassert solution('1 2000000000') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str([1, 5])) == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\nassert solution('1 2000000000') == '4'\nassert solution('1 2000000000') == '4'\n\"\"\""
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n\"\"\"\n"
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5\") == \"4\"\nassert solution(\"1 12\") == \"4\"\n\"\"\"\n\n\"\"\"\nSample Input 1:\n1 5\nSample Output 1:\n4\nSample Input 2:\n1 12\nSample Output 2:\n4\nSample Input 3:\n2 6\nSample Output 3:\n8\nSample Input 4:\n2 1000\nSample Output 4:\n6\nSample Input 5:\n4 9\nSample Output 5:\n6\nSample Input 6:\n2 9\nSample Output 6:\n5\n\"\"\"\n"
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5\\n') == '4'\nassert solution('1 12\\n') == '4'\nassert solution('1 1\\n') == '5'\n"
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 3\\n5') == '4'\nassert solution('2 4\\n1') == '2'\nassert solution('2 4\\n2') == '2'\n\"\"\"\n\nfrom itertools import takewhile"
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"car\") == 1\nassert solution(\"cocar\") == 2\n\"\"\""
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('car') == 1\nassert solution('cocar') == 2\n\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"car\") == 1\nassert solution(\"cocar\") == 2\nassert solution(\"cocaror\") == 2\n"
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('car') == 1\nassert solution('cocar') == 2\nassert solution('cocear') == 2\nassert solution('coceocar') == 4\nassert solution('coceocecar') == 6\n\n\"\"\""
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n\nsolution.test_cases = [\n    \"car\", \"cocar\"\n]\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\nassert solution('codec') == '0'\n\"\"\"\nimport math"
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('car') == 1\nassert solution('cocar') == 2\n"
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n\"\"\""
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import Dict\nimport string\nimport sys\n"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 2 0 1\") == \"8\"\nassert solution(\"5\\n1000000 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0 2 0 1\\n') == '8'\nassert solution('5\\n1000000 1 1 1 1\\n') == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 2 0 1') == '8'\nassert solution('5\\n1000000 1 1 1 1') == '0'\n\"\"\"\n\nfrom math import log\nimport math"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 2 0 1\") == \"8\"\nassert solution(\"5\\n1000000 1 1 1 1\") == \"0\"\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nfrom math import log2, ceil\nfrom typing import List\n"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 2 0 1\") == \"8\"\n\"\"\"\n\nimport sys\n\nfrom math import log2\nfrom collections import deque\nfrom itertools import combinations\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 2 0 1\") == \"8\"\nassert solution(\"5\\n1000000 1 1 1 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 2 0 1\") == \"8\"\nassert solution(\"5\\n1000000 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 2 0 1\\n\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 2 0 1\\n') == '8'\nassert solution('5\\n1000000 1 1 1 1\\n') == '0'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())"
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 651') == '-1'\n\nprint(solution('2 651'))"
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2') == 'ab'\nassert solution('2 651') == '-1'\n"
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2') == 'zyz'\nassert solution('2 651') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 650') == 'zyz'\n\"\"\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 651') == '-1'\nassert solution('2 650') == 'zyz'\n\"\"\""
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 650\") == \"zyz\"\nassert solution(\"2 651\") == \"-\"\nassert solution(\"2 652\") == \"-\"\n\nassert solution(\"2 650\") == \"zyz\"\nassert solution(\"2 651\") == \"-\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 651') == '-1'\n\"\"\""
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\n"
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 651\\n') == '-1'\n\"\"\"\n\nimport numpy as np\nimport re\n\nstdin = input()"
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '-1'\nassert solution('2 651') == '-1'\nassert solution('2 650') == 'zyz'\n'''\n\n'''\n"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n'''\n\n'''"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1') == '8'\n\"\"\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0') == '4'\nassert solution('10\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1') == '8'\n"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''6\n0 10 0\n10 0 1\n12 8 1\n5 5 0\n11 2 1\n11 3 0''') == '4'\nassert solution('''10\n6 1 1\n0 2 0\n2 1 1\n6 1 1\n8 2 0\n4 4 0\n4 0 0\n2 3 1\n6 1 0\n6 3 1''') == '8'\n\n'''\nn = int(stdin.readline())\nnums = [tuple(map(int, stdin.readline().strip().split())) for _ in range(n)]\nans = float('inf')\nfor i in range(n):\n    for j in range(i + 1, n):\n        s = sum((a * i + b * j) for a, b in nums)\n        ans = min(ans, j - i + 1)\nprint(ans)\n'''\n\nn = int(input())\nnums = [tuple(map(int, input().strip().split())) for _ in range(n)]\nans = float('inf')\nfor i in range(n):\n    for j in range(i + 1, n):\n        s = sum((a * i + b * j) for a, b in nums)\n        ans = min(ans, j - i + 1)\nprint(ans)\n"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == '4'\nassert solution('2\\n1\\n1\\n1\\n1\\n1\\n1') == '1'\nassert solution('10\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == '0'\nassert solution('5\\n5\\n5\\n5\\n5') == '0'\n"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n0 0 1\\n2 0 0\\n6 0 0\\n8 0 0\\n4 0 0\\n3 0 0\\n5 0 0\\n7 0 0\\n\") == \"8\"\nassert solution(\"7\\n0 0 1\\n2 0 0\\n6 0 0\\n8 0 0\\n4 0 0\\n3 0 0\\n5 0 0\\n7 0 0\\n\") == \"8\"\nassert solution(\"7\\n0 0 1\\n2 0 0\\n6 0 0\\n8 0 0\\n4 0 0\\n3 0 0\\n5 0 0\\n7 0 0\\n\") == \"8\"\nassert solution(\"7\\n0 0 1\\n2 0 0\\n6 0 0\\n8 0 0\\n4 0 0\\n3 0 0\\n5 0 0\\n7 0 0\\n\") == \"8\"\nassert solution(\"7\\n0 0 1\\n2 0 0\\n6 0 0\\n8 0 0\\n4 0 0\\n3 0 0\\n5 0 0\\n7 0 0\\n\") == \"8\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n\") == \"4\"\n\nassert solution(\"10\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1\\n\") == \"8\"\n\n\"\"\"\n\n\nfrom typing import List\nfrom collections import defaultdict\nimport itertools\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        n = int(stdin.split(\"\\n\")[0])\n        person_data: List[List[int]] = [[int(i) for i in stdin.split(\"\\n\")[1:]] for _ in range(n)]\n        n_votes = sum([sum(i) for i in person_data])\n        if n_votes == 0:\n            return \"0\"\n        total_votes = [0 for i in range(3)]\n        for person in person_data:\n            total_votes[0] += person[0]\n            total_votes[1] += person[1]\n            total_votes[2] += 1\n        for person_a, person_b, person_c in itertools.combinations(person_data, 3):\n            if [person_a[2], person_b[2], person_c[2]] == [1, 0, 0]:\n                continue\n            for x, y in itertools.combinations(person_a, 2):\n                if x * y > total_votes[1]:\n                    break\n            else:\n                continue\n            for x, y in itertools.combinations(person_b, 2):\n                if x * y > total_votes[0]:\n                    break\n            else:\n                continue\n            for x, y in itertools.combinations(person_c, 2):\n                if x + y > total_votes[2]:\n                    break\n            else:\n                return str(total_votes[2] - total_votes[0] + total_votes[1])\n        return \"0\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n\") == \"4\"\nassert solution(\"10\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1\\n\") == \"8\"\nassert solution(\"25\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_solution\nprint(solution(stdin))\n\n-------\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nfor _ in range(n):\n    a, b, c = map(int, sys.stdin.readline().split())\n    print(b - a + 1)\n\n\"\"\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 4 3\n3 4 5 7\n1 2 10''') == '0'\nassert solution('''3 5 2\n1 4 7 9 11\n2 3''') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 3\\n3 4 5 7\\n1 2 10\") == \"0\"\nassert solution(\"3 5 2\\n1 4 7 9 11\\n2 3\") == \"2\"\n\"\"\"\n\nfrom typing import List\nfrom functools import reduce"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 3\\n3 4 5 7\\n1 2 10\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 3\\n3 4 5 7\\n1 2 10\\n') == '0'\n\"\"\"\n\nfrom functools import lru_cache\n"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\\n1 4 7 9 11\\n2 3\") == \"0\"\nassert solution(\"2 2 2\\n10 9 9 11\") == \"-1\"\nassert solution(\"3 2 1\\n1 2 10\\n2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 3\\n3 4 5 7\\n1 2 10\\n\") == \"0\"\nassert solution(\"3 5 2\\n1 4 7 9 11\\n2 3\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 3\\n1 2 10\\n3 4\") == \"0\"\nassert solution(\"2 4 3\\n3 4\\n1 2 10\") == \"0\"\n\"\"\""
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2\\n1 4 7 9 11\\n2 3\") == \"2\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2 4 3\n3 4 5 7\n1 2 10\n''') == '0'\nassert solution('''\n3 5 2\n1 4 7 9 11\n2 3\n''') == '2'\nassert solution('''\n3 5 2\n1 2 10\n2 3\n''') == '2'\n"
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 3\n3 2''') == '1'\n\nassert solution('''1 2\n3 4''') == '3'\nassert solution('''1 9\n3 4''') == '-1 1'\nassert solution('''1 8\n3 4''') == '-1 1'\nassert solution('''1 5\n2 10''') == '0 -2'\n"
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n3 2\\n\") == '1\\n-2\\n-1'\nassert solution(\"1 2\\n3 4\\n\") == '3\\n-1\\n1'\n"
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n3 2\") == \"1\\n-2 -1\"\n\n\"\"\"\n\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n3 2\") == \"1\"\nassert solution(\"1 2\\n3 4\") == \"3\"\n\nprint(\"All tests passed.\")\n\n-----\n------\n------\n"
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n3 2\") == \"1\"\nassert solution(\"1 2\\n3 4\") == \"3\"\nassert solution(\"1 2\\n3 4\\n4 2\") == \"3\"\n\nprint(solution(input()))\n\n\"\"\"\n\nimport sys\n\n\"\"\"\n2 3\n3 2\nSample Output\n1\n-2 -1\n\n\"\"\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n3 2') == '1'\nassert solution('1 2\\n3 4') == '3'\n\"\"\""
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n3 2') == '1'\nassert solution('1 2\\n3 4') == '3'\nassert solution('1 2\\n1 2') == '3'\nassert solution('1 2\\n3 4') == '3'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n3 2\") == \"1\\n-2 -1\"\nassert solution(\"1 2\\n3 4\") == \"3\\n-1 1\""
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n3 2\") == \"1\\n-2 -1\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 3\n3 2''') == '1\\n-2 -1'\nassert solution('''1 2\n3 4''') == '3\\n-1 1'\nassert solution('''1 2\n5 1''') == '3\\n-1 1'\nassert solution('''1 2\n8 2''') == '3\\n-1 1'\nassert solution('''1 2\n2 3''') == '3\\n-1 1'\n"
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nIVO\\nJASNA\\nJOSIPA\") == \"4\"\nassert solution(\"5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\") == \"24\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nIVO\\nJASNA\\nJOSIPA\\n\") == \"4\"\nassert solution(\"5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\\n\") == \"24\""
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\nIVO\\nJASNA\\nJOSIPA') == '4'\nassert solution('5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA') == '24'\nassert solution('7\\nIVO\\nJASNA\\nJOSIPA\\nZIKOM\\nZISLANIE\\nZANZIE') == '8'\n\nassert solution('1\\nC') == '1'\nassert solution('2\\nCAD') == '2'\n"
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\n\"\"\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\nIVO\\nJASNA\\nJOSIPA') == '4'\nassert solution('5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA') == '24'\n\"\"\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nIVO\\nJASNA\\nJOSIPA\") == \"4\"\nassert solution(\"5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\") == \"24\""
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nIVO\\nJASNA\\nJOSIPA\") == \"4\"\nassert solution(\"5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\") == \"24\""
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nIVO\\nJASNA\\nJOSIPA') == '4'\nassert solution('5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA') == '24'\n"
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nIVO\\nJASNA\\nJOSIPA\") == 4\n\"\"\""
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nIVO\\nJASNA\\nJOSIPA\\n\") == \"4\\n\"\nassert solution(\"5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\\n\") == \"24\\n\"\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\") == \"3\\n\"\nassert solution(\"3\\n2 2 3 8\\n3 1 5 6\\n1 9 4 7\") == \"39\\n\"\n\"\"\"\n\nimport sys\nimport re\nimport collections"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\") == \"3\"\nassert solution(\"3\\n2 3 4 1\\n3 1 5 6\\n1 9 4 7\") == \"39\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\") == \"3\\n39\\n\"\n\"\"\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\") == \"3\"\nassert solution(\"3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\") == \"39\"\nassert solution(\"3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\") == \"39\"\n\"\"\"\nimport sys\n\nlines = sys.stdin.readlines()\n\nN = int(lines[0])\n\nprices = {}\nfor i in range(N):\n    line = lines[i+1]\n    f, p, m, s = map(int, line.split())\n    prices[f] = m\n\nsorted_prices = sorted(prices.items(), key=lambda x:x[1])\n\nprofit = 0\nfor f, p in sorted_prices:\n    profit += (p - prices[f]) * s\n\nprint(profit)\n"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\") == \"3\"\n\"\"\"\n\nn = int(input())\n\nvending_dict = {}\n\nfor i in range(n):\n    f, p, m, s = list(map(int, input().split()))\n    vending_dict[f] = (p, m, s)\n\nprofit = 0\nbuy_snacks = []\nfor i in range(1, n+1):\n    p, m, s = vending_dict[i]\n    if m < s:\n        continue\n    else:\n        for _ in range(s):\n            buy_snacks.append(i)\n        profit += p*s\n\nprint(profit)\n"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1') == '3'\n"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2 3 1\n2 3 4 1\n3 4 5 1''') == '3'\nassert solution('''3\n1 2 3 1\n2 3 4 1\n3 4 5 1''') == '39'\n\nprint(solution(input()))"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\\n\") == \"3\"\nprint(\"Passed!\")\n\nassert solution(\"3\\n1 2 3 8\\n3 1 5 6\\n1 9 4 7\\n\") == \"39\"\nprint(\"Passed!\")\n\nassert solution(\"3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\\n\") == \"3\"\nprint(\"Passed!\")\n\nassert solution(\"3\\n1 2 3 8\\n3 1 5 6\\n1 9 4 7\\n\") == \"39\"\nprint(\"Passed!\")"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1') == '3', 'case1'\nassert solution('3\\n2 3 4 1\\n3 1 5 6\\n1 9 4 7') == '39', 'case2'\n"
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1''') == '5.2696518641'\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n5 8 4 -2 0 0 -3 2 0 0 3\\n8 10 4 -1 -1 1 -1 1 1 -1 1\") == '5.2696518641'\nassert solution(\"2\\n5 8 4 -2 0 0 -3 2 0 0 3\\n8 10 4 -1 -1 1 -1 1 1 -1 1\") == '9.0'\n\"\"\""
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n5 8 4 -2 0 0 -3 2 0 0 3\\n8 10 4 -1 -1 1 -1 1 1 -1 1') == '5.2696518641'\nassert solution('1\\n8 9 3 -14 -14 14 -14 0 20') == '9'\nassert solution('1\\n8 9 3 -14 -14 14 -14 0 20') == '9'\n\n\"\"\"\n\nimport sys\n\nimport numpy as np\n\nsys.path.append('../')\n\nfrom common.time import time_func\n\nfrom.matrix_compression import get_compressed_matrix\n\nX = 0\nY = 1\n"
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 8 4 -2 0 0 -3 2 0 0 3\\n8 10 4 -1 -1 1 -1 1 1 -1 1') == '5.2696518641'\nprint('Test pass.')\n"
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 8 4 -2 0 0 -3 2 0 0 3') == '5.2696518641'\n\n\"\"\""
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 9 3 -14 -14 14 -14 0 20\") == '9'\n\"\"\"\n\n\n\n\"\"\"\nYou are given an array of positive integers, and for each index you are required to determine the number of contiguous, non-empty subarrays that sum to a given value.\n\nFor example, for the array [2, 5, 1, 3, 4, 1] and the target 3, you should return 4. The four subarrays are [2], [5], [1, 3], and [4, 1].\n\nWrite a function that, given a target value and an array of numbers, returns the number of contiguous non-empty subarrays that sum to the target.\n\nWrite a function that, given a target value and an array of numbers, returns the number of contiguous non-empty subarrays that sum to the target.\n\nSample input:\ntarget = 6\nnumbers = [2, 5, 1, 3, 4, 1]\nSample output:\n4\n\n\"\"\""
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n5 8 4 -2 0 0 -3 2 0 0 3\\n8 10 4 -1 -1 1 -1 1 1 -1 1\\n\") == \"5.2696518641\"\n\"\"\""
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n5 8 4 -2 0 0 -3 2 0 0 3\") == \"5.2696518641\"\nassert solution(\"1\\n8 9 3 -14 -14 1 -1 1 -1 1 1 -1 1\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5 8 4 -2 0 0 -3 2 0 0 3\\n8 10 4 -1 -1 1 -1 1 1 -1 1\") == \"5.2696518641\"\nassert solution(\"1\\n8 9 3 -14 -14 14 -14 0 20\") == \"9\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n5 8 4 -2 0 0 -3 2 0 0 3\\n8 10 4 -1 -1 1 -1 1 1 -1 1\") == '5.2696518641'\nassert solution(\"1\\n8 9 3 -14 -14 14 -14 0 20\") == '9'\n\n\"\"\"\n\nN = int(stdin.readline().strip())\n\nd = {}\n\nfor _ in range(N):\n    h0, h1 = [int(x) for x in stdin.readline().strip().split(' ')]\n    m = int(stdin.readline().strip())\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.readline().strip().split(' ')]\n        d[(x, y)] = min(d.get((x, y), float('inf')), abs(h0 - h1))\n\nans = min(d.values())\nprint(ans if ans < float('inf') else \"0.0\")\n"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == -1\nassert solution('1 1 1') == 1\nassert solution('2 0 2') == 8\nassert solution('3 1 1') == 4\n'''"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3\") == \"6\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\\n2 0 2\\n3 1 1\") == \"1\\n8\\n4\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n1') == '1'\nassert solution('2\\n0\\n2') == '8'\nassert solution('3\\n1\\n1\\n1') == '4'\n"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4 1 1\\n5 2 3\\n5 0 3\") == \"4\"\n\n\"\"\"\n\nfrom math import sqrt\n\nq = int(stdin.readline().strip())\nfor _ in range(q):\n    k, l, m = map(int, stdin.readline().strip().split())\n    happy = set()\n    for i in range(1, k+1):\n        happy.add(i)\n        for j in range(2, int(sqrt(i))+1):\n            if i % j == 0:\n                happy.discard(i)\n                break\n    if l > len(happy):\n        print(-1)\n    elif m in happy:\n        print(m)\n    else:\n        print(m-1)\n"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1\\n2 0 2\\n3 1 1') == '1'\nassert solution('3 1 1\\n5 2 3\\n5 0 3') == '6'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 1\\n5 2 3\\n5 0 3\\n') == '4'\n"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 1\\n2 0 2\\n3 1 1\") == \"1\\n8\\n4\"\n\"\"\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 1\\n2 0 2\\n3 1 1\") == \"1\"\nassert solution(\"3\\n4 1 1\\n5 2 3\\n5 0 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 1') == '2'\nassert solution('3 2 1') == '8'\nassert solution('5 2 3') == '24'\n\"\"\""
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"6 6\") == \"240\"\n\n\"\"\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 6\") == \"240\"\nassert solution(\"2 3 1\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\n\"\"\""
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"6 6\") == \"240\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 3 1\") == \"1\"\nassert solution(\"5 6\") == \"0\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        self."
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n') == '3'\nassert solution('6 6\\n') == '240'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == 3\nassert solution(\"6 6\") == 240\n\n\"\"\""
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == '6'\nassert solution('4 2') == '3'\nassert solution('10 5') == '10'\nassert solution('7 7') == '0'\nassert solution('6 0') == '0'\n"
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 6') == 240\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\n\"\"\""
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\n\nprint('HERE')\n"
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'impossible'\nassert solution('A+A=A') == 'impossible'\nassert solution('SEND+MORE=MONEY') == '9567+1085=10652'"
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\n"
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\n\n\"\"\""
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution(self):\n        self.assertEqual(solution(\"SEND+MORE=MONEY\"), \"9567+1085=10652\")\n        self.assertEqual(solution(\"A+A=A\"), \"impossible\")"
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A+A=A') == 'impossible'\nassert solution('SEND+MORE=MONEY') == '9567+1085=10652'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\n"
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\""
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\n"
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\n"
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 2 4\") == 14\nassert solution(\"5\\n1 1 2 1 1\") == 1\nassert solution(\"6\\n1 1 2 1 1 2\") == 6\nassert solution(\"7\\n1 1 2 1 1 2 2\") == 10\nassert solution(\"8\\n1 1 2 1 1 2 2 2\") == 30\n"
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0 1 2 3') == '14'\nassert solution('5\\n1 1 2 1 1') == '1'\n\nimport os, io, time, traceback, math, re, functools\nfrom operator import itemgetter\nfrom fractions import Fraction as F\nfrom math import ceil, floor, inf, gcd\nfrom collections import namedtuple, defaultdict, Counter\nfrom itertools import combinations, permutations, product, groupby, combinations_with_replacement, accumulate, \\\n    chain\nfrom functools import lru_cache\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, bisect_right\nfrom heapq import heappush, heappop, heapify\nfrom functools import reduce\nfrom math import factorial, sqrt, log, gcd, pi, sin, cos, tan, asin, atan, atan2, exp, log2, log10\nfrom fractions import Fraction as F\nfrom bisect import bisect, bisect_left, bisect_right\nfrom collections import namedtuple, defaultdict, Counter, deque\nfrom itertools import combinations, permutations, product, accumulate\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom time import process_time\nfrom typing import NamedTuple, Dict, List, Tuple, Optional, Union, Callable, Set, Any, Sequence, TypeVar\nfrom typing import Type, ClassVar\nfrom contextlib import contextmanager\nfrom io import BytesIO, StringIO\nfrom fractions import Fraction as F\nfrom math import ceil, floor, inf, gcd\n"
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 1 2 3\") == 14\nassert solution(\"5\\n1 1 2 1 1\") == 1\n\"\"\"\nimport sys"
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 1 2 3\") == 14\nassert solution(\"5\\n1 1 2 1 1\") == 1\n"
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('1\\n1') == 0\nassert solution('1\\n1\\n1\\n1') == 0\nassert solution('1\\n1\\n2\\n1') == 0\nassert solution('1\\n1\\n3\\n1') == 0\n"
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 2 3\") == 14\n\"\"\""
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1 2 3\") == 14\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\nlst = list(map(int, input().split()))\n\nc = Counter(lst)\nans = 0\nfor i, j in c.items():\n    ans += j * (j - 1) // 2\n\nprint(ans % (10 ** 9 + 9))\n"
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n0 1 2 3') == 14\n\"\"\""
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 2 3\\n\") == \"14\"\nassert solution(\"0 1 2 1 1\\n\") == \"1\"\nassert solution(\"1 1 2 1 1\\n\") == \"1\"\nassert solution(\"1 1 2 3 1\\n\") == \"14\"\nassert solution(\"1 3 2 3 1\\n\") == \"14\"\n\"\"\"\n\nn = int(input())\n\narr = list(map(int, input().split()))\n\nd = {}\n\ncnt = 0\n\nfor i in range(len(arr)):\n    if arr[i] not in d:\n        d[arr[i]] = 1\n    else:\n        d[arr[i]] += 1\n\nfor i in d:\n    if d[i] > 1:\n        cnt += d[i] * (d[i] - 1) // 2\n\nprint(cnt % (10**9+9))\n"
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 2 3\\n\") == 14\n\nassert solution(\"5\\n1 1 2 1 1\\n\") == 1"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\") == \"88\"\n\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\") == \"88\"\n\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\") == \"88\"\n\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\") == \"88\"\n\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\") == \"88\""
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 4\n1 2 3 0\n0 0 5 6\n0 0 7 8\n7 0 0 10\n\"\"\") == \"88\"\n\n\"\"\"\nIn this problem, you're going to be filling in a table that represents a checkerboard of arbitrary size. To represent the checkerboard, you'll use a 2D array of integers.\n\nYour task is to find the minimum possible total cost of filling in all of the empty cells such that the resulting table is a valid checkerboard. A cell is considered \"empty\" if it contains the integer 0.\n\nValid checkerboards are called magic checkerboards and they have the following properties:\n\n1. It is a square matrix (height and width are equal).\n2. The sum of all cells in each row is the same.\n3. The sum of all cells in each column is the same.\n4. All values in the matrix are positive integers.\n5. The sum of all values in the matrix is odd.\nIf you're interested in mathematical proof, you can find it here.\n\nNote that \"matrix\" in the context of this problem means more accurately \"2D array of integers\".\n\nInput Format\n\nThe first line contains two space-separated integers $n$ and $m$, the height and width of the checkerboard.\nEach of the next $n$ lines contains $m$ space-separated integers representing the rows of the checkerboard. Each of these lines represents a row in the checkerboard.\n\nConstraints\n\n1 <= n <= 1000\n1 <= m <= 1000\n1 <= c <= 100\n\nOutput Format\n\nPrint a single integer denoting the minimum total cost to fill in all of the empty cells of the checkerboard to make it a magic checkerboard. If it is not possible, print \"-1\".\n\nSample Input 0\n\n3 3\n1 2 3\n4 5 6\n7 8 9\nSample Output 0\n\n3\nExplanation 0\n\nThere are three ways to make the checkerboard valid:\n\nFill the top left corner, say, 1.\nFill the top right corner, say, 2.\nFill the bottom left corner, say, 3.\nFill the bottom right corner, say, 4.\nFill in a corner, say, 7, and fill the rest of the corners by repeating the above process.\n\"\"\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10') == '88'\nassert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10') == '-1'\nassert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10') == '-1'\n\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))\nprint(solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10'))"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10') == '88'\nassert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10') == '-1'\n\n\"\"\""
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution([\"4 4\", \"1 2 3 0\", \"0 0 5 6\", \"0 0 7 8\", \"7 0 0 10\"]) == \"88\"\nassert solution([\"4 4\", \"1 2 3 0\", \"0 0 5 6\", \"0 4 7 8\", \"7 0 0 10\"]) == \"88\"\nassert solution([\"4 4\", \"1 2 3 0\", \"0 0 5 6\", \"0 0 7 8\", \"7 0 0 10\"]) == \"88\"\nassert solution([\"4 4\", \"1 2 3 0\", \"0 0 5 6\", \"0 4 7 8\", \"7 0 0 10\"]) == \"88\"\nassert solution([\"4 4\", \"1 2 3 0\", \"0 0 5 6\", \"0 0 7 8\", \"7 0 0 10\"]) == \"88\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\\n\") == 88\n"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\") == \"88\"\nassert solution(\"4 4\\n1 2 3 4\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\") == \"88\"\nassert solution(\"4 4\\n1 2 3 4\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\") == \"88\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10') == '88'\nassert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10') == '-1'\nassert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10') == '88'\n\"\"\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\") == \"88\"\nassert solution(\"4 4\\n1 2 3 4\\n0 2 5 6\\n0 2 7 8\\n7 0 0 10\") == \"88\"\nassert solution(\"4 4\\n1 2 3 4\\n0 2 5 6\\n0 2 7 8\\n7 0 0 10\") == \"88\"\n\n-----------------\nimport sys\nimport itertools"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10') == '88'\nassert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10') == '-1'\nassert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10') == '-1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 99999\\n99999 99999\") == \"9999700002.0\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"2\n1 99999\n99999 99999\"\"\") == \"9999700002.000\"\nassert solution(\"\"\"1\n1 1\"\"\") == \"0.000\"\nassert solution(\"\"\"10\n10 10\"\"\") == \"1000.000\"\nassert solution(\"\"\"10\n2 3\"\"\") == \"100.000\"\nassert solution(\"\"\"10\n4 4\"\"\") == \"10.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(    '2\\n1 1\\n99999 99999\\n') == '9999700002.0'\n\nassert solution(    '2\\n1 99999\\n99999 99999\\n') == '9999700002.0'\n\nassert solution(    '1\\n1 1\\n') == '0.0'\n\nassert solution(    '5\\n1 1\\n5 3\\n3 1\\n1 3\\n5 2\\n1 1\\n') == '1.0'\n\nassert solution(    '1\\n5\\n3\\n1\\n') == '3.0'"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1 1') == '999999999.0'\nassert solution('1\\n1 1') == '0.0'\nassert solution('1\\n99999 99999') == '999999999.0'\n"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''\n5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n) == '9999500002'\n\nassert solution(\n'''\n5\n1 99999\n99999 99999\n1 99999\n1 99999\n1 99999\n'''\n) == '9999700002'\n\nassert solution(\n'''\n3\n3 99999\n99999 99999\n3 99999\n'''\n) == '9999700002'\n\nassert solution(\n'''\n3\n3 99999\n99999 99999\n3 99999\n'''\n) == '9999700002'\n\nassert solution(\n'''\n3\n3 99999\n99999 99999\n3 99999\n'''\n) == '9999700002'"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 1\\n99999 99999\") == \"9999700002.000\"\nassert solution(\"5\\n5\\n1 3\\n4 6\\n7 10\\n8 20\") == \"711111000.000\"\nassert solution(\"3\\n3\\n3\\n1 1\\n2 2\") == \"0.500\"\n\n\"\"\"\n\n\n\"\"\"\nThe minimum length of the pack is the distance between the first and the last animal in the pack. The length can be measured at any time $T \\geq \\max _{k = 1, \\ldots, N} t_ k$. We suppose that each cheetah is running at a constant speed for all the time from the start and also at its moment of release from the start box.\n\nFor the first $n$ cheetah, the minimum length of the pack happens at the time $t_n$ when the first cheetah reaches the finish line and the first n cheetah have traveled the length $L_n$ of the distance.\n\nFor the last $n$ cheetah, the minimum length of the pack happens at the time $t_n + \\cdots + t_n + L_n$ when the last cheetah reaches the finish line and the last n cheetah have traveled the length $L_n$ of the distance.\n\nTo find out the minimum length of the pack, we compare the minimum length of the pack at all times.\n\n---Example 1---\n\nIn the figure below, we can see that the minimum length of the pack is determined in the time $t_1 + t_2 + t_3 + L_3$.\n\n<img src=\"https://i.imgur.com/MtP4s2L.png\" width=\"500px\">\n\nThe minimum length of the pack is determined in the time $t_3 + L_3$. For the cheetah 3, the cheetah behind it is running with the speed $v_3$, and the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah behind the cheetah"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '2\\n1 1\\n99999 99999') == '9999700002.0'\nassert solution(\n    '2\\n999999 99999\\n1 1') == '9999700002.0'\n"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 1\\n99999 99999') == '9999700002.0'\n"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\\n1 1\") == \"0.0\"\nassert solution(\"2 1 99999\\n99999 99999\") == \"9999700002.0\"\n\n\"\"\"\n\nimport sys\nimport math\nimport random\n"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 1\\n99999 99999\") == \"9999700002.0\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n1\\n') == '1'\nassert solution('1\\n2\\n') == '2'\nassert solution('1\\n2\\n3\\n') == '3'\n"
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4\") == \"3\"\nassert solution(\"3 4 1 2\\n1 2 6\\n1 3 2\\n1 2 7\\n2 3 3\\n2\\n1 2\") == \"Infinity\"\n\"\"\"\n\nn, p, x, y = map(int, stdin.readline().split())\n\nc = dict()\nfor i in range(p):\n    a, b, ci = map(int, stdin.readline().split())\n    if a not in c:\n        c[a] = [0, 0]\n    if b not in c:\n        c[b] = [0, 0]\n    c[a][0] += ci\n    c[b][0] += ci\n    c[a][1] = max(c[a][1], ci)\n    c[b][1] = max(c[b][1], ci)\n    \ncount = 0\nfor i in c:\n    if i in (x, y):\n        count += min(c[i][0], c[i][1])"
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4\") == \"3\"\nassert solution(\"3 4 1 2\\n1 2 6\\n1 3 2\\n1 2 7\\n2 3 3\\n2\\n1 2\") == \"Infinity\"\n\n\"\"\"\n\nimport sys\nfrom itertools import combinations"
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\") == \"3\"\nassert solution(\"6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\") == \"Impossible\"\nassert solution(\"5 5 5\\n1 2 2\\n1 3 1\\n1 4 1\\n1 5 1\\n1 6 1\\n1 7 1\\n1 8 1\\n1 9 1\\n1 10 1\\n1 11 1\\n1 12 1\\n1 13 1\\n1 14 1\\n1 15 1\\n1 16 1\\n1 17 1\\n1 18 1\\n1 19 1\\n1 20 1\\n1 21 1\\n1 22 1\\n1 23 1\\n1 24 1\\n1 25 1\\n1 26 1\\n1 27 1\\n1 28 1\\n1 29 1\\n1 30 1\\n1 31 1\\n1 32 1\\n1 33 1\\n1 34 1\\n1 35 1\\n1 36 1\\n1 37 1\\n1 38 1\\n1 39 1\\n1 40 1\\n1 41 1\\n1 42 1\\n1 43 1\\n1 44 1\\n1 45 1\\n1 46 1\\n1 47 1\\n1 48 1\\n1 49 1\\n1 50 1\\n1 51 1\\n1 52 1\\n1 53 1\\n1 54 1\\n1 55 1\\n1 56 1\\n1 57 1\\n1 58 1\\n1 59 1\\n1 60 1\\n1 61 1\\n1 62 1\\n1 63 1\\n1 64 1\\n1 65 1\\n1 66 1\\n1 67 1\\n1 68 1\\n1 69 1\\n1 70 1\\n1 71 1\\n1 72 1\\n1 73 1\\n1 74 1\\n1 75 1\\n1 76 1\\n1 77 1\\n1 78 1\\n1 79 1\\n1 80 1\\n1 81 1\\n1 82 1\\n1 83 1\\n1 84 1\\n1 85 1\\n1 86 1\\n1 87 1\\n1 88 1\\n1 89 1\\n1 90 1\\n1 91 1\\n1 92 1\\n1 93 1\\n1 94 1\\n1 95 1\\n1 96 1\\n1 97 1\\n1 98 1\\n1 99 1\\n1 100 1\\n1 101 1\\n1 102 1\\n1 103 1\\n1 104 1\\n1 105 1\\n1 106 1\\n1 107 1\\n1 108 1\\n1 109 1\\n1 110 1\\n1 111 1\\n1 112 1\\n1 113 1\\n1 114 1\\n1 115 1\\n1 116 1\\n1 117 1\\n1 118 1\\n1 119 1\\n1 120 1\\n1 121 1\\n1 122 1\\n1 123 1\\n1 124 1\\n1 125 1\\n1 126 1\\n1 127 1\\n1 128 1\\n1 129 1\\n1 130 1\\n1 131 1\\n1 132 1\\n1 133 1\\n1 134 1\\n1 135 1\\n1 136 1\\n1 137 1\\n1 138 1\\n1 139 1\\n1 140 1\\n1 141 1\\n1 142 1\\n1 143 1\\n1 144 1\\n1 145 1\\n1 146 1\\n1 147 1\\n1 148 1\\n1 149 1\\n1 150 1\\n1 151 1\\n1 152 1\\n1 153 1\\n1 154 1\\n1 155 1\\n1 156 1\\n1 157 1\\n1 158 1\\n1 159 1\\n1 160 1\\n1 161 1\\n1 162 1\\n1 163 1\\n1 164 1\\n1 165 1\\n1 166 1\\n1 167 1\\n1 168 1\\n1 169 1\\n1 170 1\\n1 171 1\\n1 172 1\\n1 173 1\\n1 174 1\\n1 175 1\\n1 176 1\\n1 177 1\\n1 178 1\\n1 179 1\\n1 180 1\\n1 181 1\\n1 182 1\\n1 183 1\\n1 184 1\\n1 185 1\\n1 186 1\\n1 187 1\\n1 188 1\\n1 189 1\\n1 190 1\\n1 191 1\\n1 192 1\\n1 193 1\\n1 194 1\\n1 195 1\\n1 196 1\\n1 197 1\\n1 198 1\\n1 199 1\\n1 200 1\\n1 201 1\\n1 202 1\\n1 203 1\\n1 204 1\\n1 205 1\\n1 206 1\\n1 207 1\\n1 208 1\\n1 209 1\\n1 210 1\\n1 211 1\\n1 212 1\\n1 213 1\\n1 214 1\\n1 215 1\\n1 216 1\\n1 217 1\\"
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 1 2\\n1 2 6\\n1 3 2\\n1 2 7\\n2 3 3\\n2\\n1 2\\n\") == \"Infinity\"\nassert solution(\"6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4\\n\") == \"3\"\nassert solution(\"6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4\\n\") == \"Impossible\"\nassert solution(\"6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4\\n\") == \"Impossible\"\nassert solution(\"5 3 1 2\\n1 2 6\\n1 3 2\\n2 3 3\\n2\\n1 2\\n\") == \"3\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4\") == 3\n"
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 1 2\\n1 2 6\\n1 3 2\\n1 2 7\\n2 3 3\\n2\\n1 2\\n\") == 'Infinity'\n\n\"\"\"\n\nimport sys\n\nN, P, X, Y = map(int, sys.stdin.readline().strip().split())\na = []\nb = []\nc = []\nfor _ in range(P):\n    a_i, b_i, c_i = map(int, sys.stdin.readline().strip().split())\n    a.append(a_i)\n    b.append(b_i)\n    c.append(c_i)\nM = int(sys.stdin.readline().strip())\nbanks = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4\\n\") == 3\nassert solution(\"6 9 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4\\n\") == \"Impossible\"\nassert solution(\"3 4 1 2\\n1 2 6\\n1 3 2\\n1 2 7\\n2 3 3\\n2\\n1 2\\n\") == \"Infinity\"\n\"\"\"\n\nimport sys\n\ntests = int(input())\n\nfor i in range(tests):\n    tokens = input().split()\n    n, p, x, y = int(tokens[0]), int(tokens[1]), int(tokens[2]), int(tokens[3])\n    transfer_agreements = []\n    for _ in range(p):\n        transfer_agreements.append(input().split())\n    m = int(input())\n    banks = input().split()\n    s = set(banks)\n    if x not in s or y not in s:\n        print(\"Impossible\")\n        sys.exit(0)\n    my_banks = set(banks)\n    max_value = 0\n    for i, (a, b, c) in enumerate(transfer_agreements):\n        my_banks.discard(a)\n        my_banks.discard(b)\n        my_banks.add(str(i + 1))\n        value = int(c) + (n - 2) * int(c) * (i + 1)\n        max_value = max(max_value, value)\n    print(max_value)\n"
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\nprint(solution(a))\n\n\"\"\"\n\nimport sys\nimport math\nimport collections\nfrom collections import defaultdict"
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4') == '3'\n\"\"\"\nimport math"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1\\n6\\n\") == \"impossible\"\nassert solution(\"3 1\\n1\\n\") == \"000\\n001\\n011\\n010\\n110\\n111\\n101\\n100\"\nprint(\"Passed!\")\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1\\n6\") == \"impossible\"\nassert solution(\"3 1\\n1\") == \"000\\n001\\n011\\n010\\n110\\n111\\n101\\n100\"\n\"\"\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 1\\n6\\n1') == 'impossible'\nassert solution('3 1\\n1') == '010'\n\"\"\"\n\n\"\"\"\n[input]\n6 1\n6\n1\n\n[output]\nimpossible\n\"\"\""
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 1\\n6\\n\") == \"impossible\"\nassert solution(\"3 1\\n1\\n\") == \"000\\n001\\n011\\n010\\n110\\n111\\n101\\n100\"\n\"\"\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('123456') == ''\nassert solution('1111') == '1111'\nassert solution('11111111') == ''\nassert solution('111111111111111111') == '11111111111111111111111111'\n"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"110\"\nassert solution(\"3 1\") == \"111\"\nassert solution(\"3 2\") == \"010\"\nassert solution(\"4 2\") == \"110\"\nassert solution(\"5 2\") == \"1101\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 1\\n6\\n\") == 'impossible'\nassert solution(\"6 2\\n6\\n1 3\\n\") == '010\\n110\\n111\\n101\\n100\\n011\\n101\\n110\\n111\\n111\\n101\\n100\\n110\\n101\\n110\\n101\\n110\\n101\\n110\\n110\\n111\\n101\\n100\\n101\\n110\\n110\\n101\\n110\\n110\\n101\\n110\\n110\\n101\\n110\\n110\\n110\\n110\\n111\\n101\\n110\\n101\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n110\\n"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n1\\n\") == \"000\\n001\\n011\\n010\\n110\\n111\\n101\\n100\"\n\"\"\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1\\n6\") == \"impossible\"\nassert solution(\"3 1\\n1\") == \"010\"\n\"\"\""
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 1\\n6\\n1\\n') == 'impossible'\nassert solution('3 1\\n1\\n') == '000\\n001\\n011\\n010\\n110\\n111\\n101\\n100'\nassert solution('4 4\\n1\\n3\\n2\\n4\\n') == 'impossible'\nassert solution('5 2\\n5\\n2\\n') == 'impossible'\nassert solution('6 3\\n1\\n2\\n3\\n4\\n5\\n') == '110\\n101\\n111\\n010\\n011\\n100\\n111\\n110\\n010\\n110\\n100\\n101\\n101\\n011\\n010\\n111\\n110'\n\nprint('Successfully solved {}'.format(challenge_name))\n"
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 9\") == \"1\"\nassert solution(\"90 10\") == \"10\"\n\n\"\"\""
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n99') == '1'\nassert solution('90\\n10') == '10'"
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 10') == 0\nassert solution('99 100') == 2\nassert solution('90 1000') == 10"
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"10\\n99\"\n) == 1\n\"\"\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n99') == '1'\nassert solution('90\\n10') == '10'\nprint('Success')\n\"\"\""
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\n99') == 1\nassert solution('90\\n10') == 10\n\"\"\""
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 5\") == \"1\"\nassert solution(\"90 10\") == \"10\"\nassert solution(\"99 99\") == \"1\"\nassert solution(\"123 543\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n99\") == \"1\"\nassert solution(\"90\\n10\") == \"10\"\n\"\"\"\n\n\"\"\"\nsolution(\"10\\n99\")\nsolution(\"90\\n10\")\n\"\"\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n99\") == \"1\"\n\nassert solution(\"90\\n10\") == \"10\"\n\n\"\"\""
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 3 3 3\\n2 7 3\\n4 1 2\\n5\\n1 1\") == '1'\n\"\"\"\n\nfrom math import ceil, floor\nfrom collections import deque"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2 6\\n5 8 7 10\\n3 1 3 3\\n\") == \"1\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n4 1 3\\n2 7 3') == '2'\n"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 3 3\\n4 1 10\\n2 7 3\") == \"2\"\nassert solution(\"4\\n1 3 3 3\\n5 8 7 10\\n4 1 2 6\") == \"1\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 3\\n4 1 10\\n2 7 3\") == \"2\"\nassert solution(\"4\\n3 1 3 3\\n5 8 7 10\\n4 1 2 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 3 3\\n5 8 7 10\\n4 1 2 6\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\n\nprint(solution(input()))\n\n\"\"\"\n\n\n\"\"\"\n\n\u0417\u0430\u0434\u0430\u0447\u0430 \u00ab\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u043a\u0443\u043f\u043a\u0438\u00bb\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435\n\u0412\u0430\u043c \u0434\u0430\u043d\u044b \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u043e\u0441\u0442\u0430\u0432\u043e\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043d\u0438\u0445. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0440\u0435\u0437\u0435\u0440\u0432\u0443\u0430\u0440\u0430 \u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u0434\u0432\u0443\u0445 \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u043e\u0434\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0433\u043e \u0436\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430. \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0447\u0435\u0442\u044b\u0440\u0435 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430. \u041f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432, \u0432\u0442\u043e\u0440\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044f\u043c \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u043a\u0443\u043f\u043a\u0438. \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043d\u0430\u0441 \u0432\u043e\u0432\u0441\u0435 \u043d\u0435 \u043e\u0431\u0441\u0442\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u043a\u0443\u043f\u043b\u0435\u0442 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432.\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u043a\u0443\u043f\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0440\u0435\u0437\u0435\u0440\u0432\u0443\u0430\u0440\u0430.\n\nSample Input 1:\n7 8 9\n7\n6\n\nSample Output 1:\n16\n\nSample Input 2:\n6 5 4\n6\n6\n6\n\nSample Output 2:\n12\n\nSample Input 3:\n2 8 6\n2\n6\n8\n\nSample Output 3:\n12\n\n\"\"\""
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 3\\n4 1 10\\n2 7 3') == '2'\nassert solution('3 1 3 3\\n5 8 7 10\\n4 1 2 6') == '1'\n\"\"\""
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 3\\n4 1 10\\n2 7 3') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 3 3\\n4 1 10\\n2 7 3') == '2'\nassert solution('4\\n1 3 3 3\\n5 8 7 10\\n4 1 2 6') == '1'"
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n"
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"beginning\") == 5\nassert solution(\"velvet\") == 7\n\"\"\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"beginning\") == '5'\nassert solution(\"velvet\") == '7'"
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"beginning\") == \"5\"\nassert solution(\"beginning\") == \"5\"\nassert solution(\"velvet\") == \"7\"\nassert solution(\"velvet\") == \"7\"\nassert solution(\"foo\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('beginning') == 'n'\nassert solution('madam') =='m'\nassert solution('level') == 'l'\nassert solution('abcdefg') == 'a'\nassert solution('hello') == 'e'\n"
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(\"input.txt\", \"r\").read()) == \"solution(open('input.txt', 'r').read())\"\n\nprint(solution(open(\"input.txt\", \"r\").read()))\n\"\"\"\nimport re\nfrom collections import Counter\n"
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"beginning\") == \"beginning\"\n\"\"\"\n\nn, q = map(int, stdin.readline().strip().split())\ns = stdin.readline().strip()\n\nfor _ in range(q):\n    left, right = map(int, stdin.readline().strip().split())\n    left_count = right_count = 0\n    for i in range(left - 1, right):\n        if s[i] == s[right - 1]:\n            left_count += 1\n            right_count += 1\n        else:\n            left_count += 1\n            if left_count > 1:\n                break\n    print(left_count * right_count)"
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"beginning\") == \"9\"\nassert solution(\"velvet\") == \"7\"\n\"\"\""
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"beginning\") == \"5\"\nassert solution(\"velvet\") == \"7\"\nassert solution(\"madam\") == \"6\"\nassert solution(\"level\") == \"6\"\nassert solution(\"the quick brown fox jumps over the lazy dog\") == \"24\"\n\"\"\""
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1, f\"Expected: {test_output_1} Actual: {solution(test_input_1)}\"\nassert solution(test_input_2) == test_output_2, f\"Expected: {test_output_2} Actual: {solution(test_input_2)}\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n3 1\\n2 2\\n1 1\") == \"2\"\nprint('Example: 1 passed')\n\nassert solution(\"2 3\\n1 23\\n2 17\") == \"23\"\nprint('Example: 2 passed')\n\nassert solution(\"3 4\\n3 1\\n2 2\\n1 1\") == \"2\"\nprint('Example: 3 passed')\n\nassert solution(\"2 3\\n1 23\\n2 17\") == \"23\"\nprint('Example: 4 passed')\n\nassert solution(\"4 6\\n3 1\\n3 2\\n3 5\\n3 6\\n2 3\") == \"12\"\nprint('Example: 5 passed')"
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n3 1\\n2 2\\n1 1\") == 2\n\"\"\""
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n2 2') == '2'\nassert solution('1 1\\n2 3') == '2'\nassert solution('2 3\\n1 23') == '23'\nassert solution('2 3\\n1 2\\n1 2') == '2'\n"
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('4 5') == 6\nassert solution('4 5\\n1 1\\n2 2\\n3 3\\n4 4') == 4\nassert solution('4 5\\n1 2\\n2 3\\n3 4\\n4 5') == 8\nassert solution('4 5\\n2 1\\n1 2\\n2 3\\n3 4\\n4 5') == 7\n"
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n3 1\\n2 2\\n1 1\") == \"2\"\nassert solution(\"2 3\\n1 23\\n2 17\") == \"23\"\nassert solution(\"3 4\\n3 1\\n2 2\\n1 1\") == \"2\"\nassert solution(\"2 3\\n1 23\\n2 17\") == \"23\""
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 23\\n2 17') == '23'\n\"\"\""
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n3 1\\n2 2\\n1 1\\n\") == \"2\"\nassert solution(\"2 3\\n1 23\\n2 17\\n\") == \"23\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n2 3\") == \"3\"\nassert solution(\"2 3\\n1 23\\n2 17\") == \"23\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n3 1\\n2 2\\n1 1\") == \"2\"\nprint(\"Test PASSED\")\n\n\"\"\""
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 4\n3 1\n2 2\n1 1''') == 2\nprint(solution(input()))\n"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\\n') == '0.0000000000'\nassert solution('6\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0\\n') == '9.476048311178'\n\"\"\"\n\n\nclass Polygon:\n    def __init__(self, n: int, vertices: list) -> None:\n        self.n = n\n        self.vertices = vertices\n\n    def __len__(self) -> int:\n        return self.n\n\n    def __getitem__(self, item: int) -> list:\n        return self.vertices[item]\n\n    def __str__(self) -> str:\n        return str(self.vertices)\n\n\nclass Line:\n    def __init__(self, a: int, b: int) -> None:\n        self.a = a\n        self.b = b\n\n    def __str__(self) -> str:\n        return str([self.a, self.b])\n\n\nclass Solution:\n    def largest_area(self, polygon: Polygon) -> float:\n        if len(polygon) <= 3:\n            return 0\n\n        # bounding box of the polygon\n        polygon_bbox = self.get_bbox(polygon)\n        x_bbox = polygon_bbox[0]\n        y_bbox = polygon_bbox[1]\n\n        # upper bounding box of the polygon\n        polygon_upper_bbox = self.get_upper_bbox(polygon, x_bbox, y_bbox)\n\n        # for each point in the upper bounding box, check if its contained in the polygon or not\n        points_in_polygon = []\n        for x_upper in range(polygon_upper_bbox[0][0], polygon_upper_bbox[1][0] + 1):\n            for y_upper in range(polygon_upper_bbox[0][1], polygon_upper_bbox[1][1] + 1):\n                if self.is_point_in_polygon(polygon, [x_upper, y_upper]):\n                    points_in_polygon.append([x_upper, y_upper])\n\n        # sort the points in the polygon by their x-coordinate\n        points_in_polygon.sort(key=lambda point: point[0])\n\n        # for each pair of points in the polygon, compute the line passing through them\n        lines = []\n        for i in range(len(points_in_polygon) - 1):\n            line = Line(points_in_polygon[i][0] - points_in_polygon[i + 1][0],\n                        points_in_polygon[i][1] - points_in_polygon[i + 1][1])\n\n            lines.append(line)\n\n        # for each pair of lines, find the intersection point\n        for i in range(len(lines)):\n            for j in range(i + 1, len(lines)):\n                point = self.get_intersection_point(lines[i], lines[j])\n                if point is not None:\n                    # get the area from the polygon through the intersection point\n                    area = self.get_area(polygon, point)\n\n                    return area\n\n        return 0\n\n    def get_bbox(self, polygon: Polygon) -> list:\n        # find the leftmost point\n        leftmost_point = polygon[0]\n        for point in polygon:\n            if point[0] < leftmost_point[0]:\n                leftmost_point = point\n\n        # find the rightmost point\n        rightmost_point = polygon[0]\n        for point in polygon:\n            if point[0] > rightmost_point[0]:\n                rightmost_point = point\n\n        # find the bottommost point\n        bottommost_point = polygon[0]\n        for point in polygon:\n            if point[1] < bottommost_point[1]:\n                bottommost_point = point\n\n        # find the topmost point\n        topmost_point = polygon[0]\n        for point in polygon:\n            if point[1] > topmost_point[1]:\n                topmost_point = point\n\n        return [leftmost_point, bottommost_point, rightmost_point, topmost_point]\n\n    def get_upper_bbox(self, polygon: Polygon, x_bbox: int, y_bbox: int) -> list:\n        # find the upper leftmost point\n        leftmost_point = polygon[0]\n        for point in polygon:\n            if point[0] < leftmost_point[0] or (point[0] == leftmost_point[0] and point[1] < leftmost_point[1]):\n                leftmost_point = point\n\n        # find the upper rightmost point\n        rightmost_point = polygon[0]\n        for point in polygon:\n            if point[0] > rightmost_point[0] or (point[0] == rightmost_point[0] and point[1] < rightmost_point[1]):\n                rightmost_point = point\n\n        # find the upper bottommost point\n        bottommost_point = polygon[0]\n        for point in polygon:\n            if point[1] > bottommost_point[1] or (point[0] == bottommost_point[0] and point[1] < bottommost_point[1]):\n                bottommost_point = point\n\n        return [[leftmost_point[0], y_bbox], [rightmost_point[0], y_bbox],\n                [rightmost_point[0], bottommost_point[1]], [leftmost_point[0], bottommost_point[1]]]\n\n    def is_point_in_polygon(self, polygon: Polygon, point: list) -> bool:\n        num_intersect = 0\n        for i in range(len(polygon)):\n            if ((polygon[i][0"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3'\n) == '0.0000000000'\n\nassert solution(\n    '6\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0'\n) == '9.476048311178'\n"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\") == \"0.0\"\n\nassert solution(\"6\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0\") == \"9.476048311278\""
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\\n\") == \"0.0000000000\"\nassert solution(\"6\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0\\n\") == \"9.4760483111784\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\") == '0.0000000000'\nassert solution(\"6\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0\") == '9.476048311178'\nassert solution(\"6\\n7 0\\n5 7 2 0\") == '9.476048311178'\n\"\"\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\") == \"0.0000000000\"\nassert solution(\"6\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0\") == \"9.476048311178\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\\n\") == \"0.0000000000\"\nassert solution(\"6\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0\\n\") == \"9.476048311178\"\n\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\") == '0.0000000000'\n"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\\n\") == '0.0000000000'\n\nassert solution(\"6\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0\\n\") == '9.47604831117'\n\nassert solution(\"7\\n0 5\\n4 3\\n1 6\\n2 2\\n0 2\\n0 3\\n0 -1 0 3\\n\") == '14.3915572553'\n\nassert solution(\"5\\n-1 1\\n1 1\\n3 1\\n1 -1 0 3\\n\") == '0.0000000000'\n\nassert solution(\"5\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3\\n\") == '0.0000000000'"
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 1\\n0 2\\n-2 0\\n0 -2') == '8.0'\n\"\"\"\nfrom math import sqrt\nfrom sys import stdin"
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2') == '8.0000000000'\nassert solution('5\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0') == '0.0200000000'\n\n\"\"\""
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2') == '8.0000000000'\n\"\"\""
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n\") == \"8.0000000000\"\nassert solution(\"5\\n0.2 0\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\\n\") == \"0.0200000000\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\") == \"8.0000000000\"\n\"\"\"\n\nfrom __future__ import annotations\nfrom math import sqrt\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2 0\n1 1\n0 2\n-2 0\n0 -2''') == '8.0000000000'\n\nassert solution('''5\n0.2 0.00\n0 -0.2\n0.0 0\n-0.2 0\n0 0.20''') == '0.0200000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\") == \"8.0000000000\""
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\") == \"8.0000000000\"\n\"\"\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2') == '8.0'\nassert solution('5\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0') == '0.0200000000'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\") == \"8.0\"\n\"\"\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n1 1 9 9 1 6 6 39 9\") == \"2\"\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9 4 3\\n1 1 9 9 1 6 6 39 9') == 2\n"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''9 4 3\n1 1 9 9 1 6 6 39 9''') == 2\nassert solution('''10 2 2\n1 1 1 1 1 2 2 2 2 2''') == 2\n'''"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\"\"\"\n\n\n\"\"\"\n10-2. Favorite Numbers: Modify your program from Exercise 10-1 (page 162) \nso each person can have more than one favorite number. Then print each person\u2019s \nname along with their favorite numbers.\n\n\"\"\"\n\n\"\"\"\n9-1. Restaurant: Make a class called Restaurant. The __init__() method for \nRestaurant should store two attributes: a restaurant_name and a cuisine_type. \nMake a method called describe_restaurant() that prints these two pieces of \ninformation, and a method called open_restaurant() that prints a message \nindicating that the restaurant is open. Make an instance called restaurant \nfrom your class. Print the two attributes individually, and then call both \nmethods.\n\n\"\"\"\n\n\"\"\"\n9-2. Three Restaurants: Start with your class from Exercise 9-1. Create three \ndifferent instances from the class, and call describe_restaurant() for each \ninstance.\n\n\"\"\"\n\n\n\"\"\"\n9-3. Users: Make a class called User. Create two attributes called first_name \nand last_name, and then create several other attributes that are typically stored \nin a user profile. Make a method called describe_user() that prints a summary \nof the user\u2019s information. Make another method called greet_user() that prints \na personalized greeting to the user. Create several instances representing \ndifferent users, and call both methods for each user.\n\"\"\"\n\n\n\"\"\"\n9-4. Number Served: Start with your program from Exercise 9-1 \n(page 162). Add an attribute called number_served with a default value of 0. \nCreate an instance called restaurant from this class. Print the number of \ncustomers the restaurant has served, and then change this value and print it \nagain.\n\nAdd a method called set_number_served() that lets you set the number of \ncustomers that have been served. Call this method with a new number and \nprint the value again.\n\nAdd a method called increment_number_served() that lets you increment the \nnumber of customers who\u2019ve been served. Call this method with any number you \nlike that could represent how many customers were served in, say, a day of \nbusiness.\n\"\"\"\n\n\n\"\"\"\n9-5. Login Attempts: Add an attribute called login_attempts to your User class \nfrom Exercise 9-3 (page 162). Write a method called increment_login_attempts() \nthat increments the value of login_attempts by 1. Write another method called \nreset_login_attempts() that resets the value of login_attempts to 0.\n\nMake an instance of the User class and call increment_login_attempts() several \ntimes. Print the value of login_attempts to make sure it was incremented \nproperly, and then call reset_login_attempts(). Print login_attempts again to \nmake sure it was reset to 0.\n\"\"\"\n\n\n\"\"\"\n9-6. Ice Cream Stand: An ice cream stand is a specific kind of restaurant. \nWrite a class called IceCreamStand that inherits from the Restaurant class \nyou wrote in Exercise 9-1 or 9-4. Either version of the class will work; just \nbe sure that the behaviors are appropriate for an ice cream stand. Add an \nattribute called flavors that stores a list of ice cream flavors. Write a \nmethod that displays these flavors. Create an instance of IceCreamStand, and \ncall this method.\n\"\"\"\n\n\n\"\"\"\n9-7. Admin: An administrator is a special kind of user. Write a class called \nAdmin that inherits from the User class you wrote in Exercise 9-3 or 9-6. \nAdd an attribute, privileges, that stores a list of strings like \"can add post\", \n\"can delete post\", \"can ban user\", and so on. Write a method called show_privileges() \nthat lists the administrator\u2019s set of privileges. Create an instance of \nAdmin, and call your method.\n\"\"\"\n\n\n\"\"\"\n9-8. Privileges: Write a separate Privileges class. The class should have one \nattribute, privileges, that stores a list of strings as described in Exercise \n9-7. Move the show_privileges() method to this class. Make a Privileges instance \nas an attribute in the Admin class. Create a new instance of Admin and use your \nmethod to show its privileges.\n\"\"\"\n\n\n\"\"\"\n9-9. Battery Upgrade: Use the final version of electric_car.py from this section. \nAdd a method to the Battery class called upgrade_battery(). This method \nshould check the battery size and set the capacity to 100 if it isn\u2019t already. \nMake an electric car with a default battery size, call get_range() once, and \nthen call get_range() a second time after upgrading the battery. You should \nsee an increase in the car\u2019s range.\n\"\"\"\n\n\n\"\"\"\n9-10. Imported Restaurant: Start with your work from exercise 9-1 \n(page 162). Make a separate copy of the Restaurant class and call it \nRestaurantBJ. Change the initial statement in the body of the __init__() \nmethod so that \"Chinese\" is replaced with \"BJ Chinese\". Make a separate \nmethod called describe_restaurant() that prints the two types of cuisine the \nrestaurant serves. Create an instance of RestaurantBJ, and call both methods.\n\"\"\"\n\n\n\"\"\"\n9-11. Users: Make a class called User. Create two attributes called first_name \nand last_name, and then create several other attributes that are typically stored \nin a user profile. Make a method called describe_user() that prints a summary \nof the user\u2019s information. Make another method called greet_user() that prints \na personalized greeting to the user. Create several instances representing \ndifferent users, and call both methods for each user.\n\"\"\"\n\n\n\"\"\"\n9-12. Number Served: Start with your program from Exercise 9-1 \n(page 162). Add an attribute called number_served with a default value of \n0. Create an instance called restaurant from this class. Print the number of \ncustomers the restaurant has served, and then change this value and print it \nagain.\n\nAdd a method called set_number_served() that lets you set the number of \ncustomers that have been served. Call this method with a new number and \nprint the value again.\n\nAdd a method called"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n9 8 7') == '2'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 4 3\\n1 1 9 9 1 6 6 39 9\\n') == 2\n\"\"\""
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 2\\n1 1 9 9 1 6 6 39 9') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 4 3\\n1 1 9 9 1 6 6 39 9\") == \"2\"\nprint(\"Test pass.\")\n"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n') == '2'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == '2'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == '2'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n') == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''9 4 3\n1 1 9 9 1 6 6 39 9\n''') == 2\n\nassert solution('''10 2 2\n1 1 1 1 1 2 2 2 2 2\n''') == 2\n\nassert solution('''10 4 3\n1 1 1 1 1 2 2 2 2 2\n''') == 2\n\nassert solution('''10 2 2\n1 1 1 1 1 2 2 2 2 2\n''') == 2\n\nassert solution('''10 3 2\n1 1 1 1 1 2 2 2 2 2\n''') == 1"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 2\\n1 2 3\\n') == '3.666666667'\nassert solution('4 11 4\\n10 10 10 10\\n') == '20.000000000'\n\nprint(solution(input()))\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport numpy as np\nimport re"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2\\n1 2 3\\n\") == \"3.666666667\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3.33333333'\n'''\n"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 2\\n1 2 3') == '3.666666667'\nassert solution('4 11 4\\n10 10 10 10') == '20.0'\n\nimport math"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2\\n1 2 3\") == \"3.666666667\"\n\"\"\"\n\n\"\"\"\nGiven an integer n and a list of n positive integers, write a function groupSum that produces the largest possible sum of groups of integers.\n\nA group of integers is a list of integers such that the difference between any two consecutive integers is less than or equal to 1. For example, [2, 4, 6, 8] is a group of integers because the consecutive integers 2, 4 and 6 are less than or equal to 1 in difference. The first group can have any length between 0 and n. The number of groups is also between 0 and n.\n\nFor example, with n = 3, the groups of integers are [[2], [4], [6], [8]], and the largest sum of groups is 18.\n\nThis function takes in a list of n positive integers and returns a number, the maximum sum of groups.\n\nSample Input:\n[2, 4, 6, 8]\nSample Output:\n18\n\"\"\""
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2\\n1 2 3\\n\") == \"3.666666667\\n\"\n\n-----Explanation-----\nOn the first line we have the number of tables, $n$ (1 \\le n \\le 100), the maximum group size, $g$ (1 \\le g \\le 200) and the number of hours the restaurant is open, $t$. The maximum number of people in the restaurant is given by $n * g$.\n\nOn the second line we have $n$ numbers, which are the capacities of the tables, $c_1$, $c_2$, $c_3$ and $c_4$, (1 \\le c_i \\le 200 for each $i$). The expected number of people in the restaurant when it is closed is given by the formula:\n\n$$\n\\sum_{k = 1}^n \\left( \\frac{k}{n} \\right)^2 + \\left( \\frac{n - k}{n} \\right)^2\n$$\n\"\"\"\n\nn, g, t = map(int, input().split())\nc = list(map(int, input().split()))\np = sum(map(lambda x: x ** 2, [x / n for x in c])) + (n - sum(c)) ** 2\nprint(p * t)\n"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 2\\n1 2 3') == '3.666666667'\nassert solution('4 11 4\\n10 10 10 10') == '20.000000000'\n\"\"\"\n\nn, g, t = [int(i) for i in input().split()]\nc = [int(i) for i in input().split()]\nassert len(c) == n\n\nresidues = [i for i in c if i > 0]\nfor i in range(t):\n    if len(residues) == 0:\n        break\n    # choose largest residue to find the largest group, and find largest group size\n    i_max = residues.index(max(residues))\n    c_max = max(residues)\n    residues[i_max] -= g\n    if residues[i_max] == 0:\n        residues.pop(i_max)\n\nprint('%.6f' % (len(residues)/n))\n"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2\\n1 2 3\") == \"3.666666667\"\nassert solution(\"4 11 4\\n10 10 10 10\") == \"20.000000000\"\n\"\"\"\n"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2\\n1 2 3\") == \"3.666666667\"\n\"\"\"\n\nn, g, t = list(map(int, input().split()))\ncapacities = list(map(int, input().split()))\n\npeople_left = g\nfor i in range(t):\n    people_left -= people_left % capacities[people_left % n]\n\nprint(\"{:.6f}\".format(people_left/n))\n"
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 2\\n1 2 3\") == \"3.666666667\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 42') == 2\nassert solution('5 123456789') == 16317634"
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 42\") == 2\nassert solution(\"5 123456789\") == 16317634\n\"\"\"\n\nfrom string import ascii_lowercase\nfrom math import log2, factorial"
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 42') == 2\nassert solution('5 123456789') == 16317634\n"
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 42\") == 2\nassert solution(\"5 123456789\") == 16317634\n\"\"\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 42\"\n) == 2\n\"\"\""
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 42\"\n) == 2\nassert solution(\n    \"5 123456789\"\n) == 16317634\nassert solution(\n    \"2 16\"\n) == 0\nassert solution(\n    \"5 16317634\"\n) == 16317634\n\n\"\"\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 42') == 2\nassert solution('5 123456789') == 16317634"
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\"\n\"\"\""
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 42') == 2\nassert solution('5 123456789') == 16317634\n\"\"\"\nimport math"
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 0 0 2\\n1 2 2\\n1 1 1') == '0'\nassert solution('3 1 1 1 8\\n0 1 1\\n1 0 1\\n2 1 1\\n1 2 1\\n1 2 2\\n2 2 3\\n0 2 5\\n1 2 6') == '4'\n\n\"\"\"\nimport sys\nimport collections\nimport math\n"
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 0 0 2\") == '0'\nassert solution(\"1 2 2\") == '0'\nassert solution(\"1 1 1\") == '0'\n\"\"\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('1 2 2') == '1'\nassert solution('1 1 1') == '2'"
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 0 0 2\\n1 2 2\\n1 1 1') == '0'\n\nassert solution('3 1 1 1 8\\n0 1 1\\n1 0 1\\n2 1 1\\n1 2 1\\n1 2 2\\n2 2 3\\n0 2 5\\n1 2 6') == '4'\n\nprint(solution(input()))"
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n3 1 0 0 2\n1 2 2\n1 1 1\n''') == '0'\nassert solution('''\n3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '4'\n\"\"\""
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 1 0 0 2\n1 2 2\n1 1 1''') == '0'\nassert solution('''3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6''') == '4'\n\n\"\"\""
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 0 0 2\\n1 2 2\\n1 1 1\") == \"0\"\nassert solution(\"3 1 1 1 8\\n0 1 1\\n1 0 1\\n2 1 1\\n1 2 1\\n1 2 2\\n2 2 3\\n0 2 5\\n1 2 6\") == \"4\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 0 0 2\\n1 2 2\\n1 1 1\\n\") == \"0\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nN, E, Sx, Sy, C = map(int, sys.stdin.readline().split())\nS = (Sx, Sy)\ngrid = defaultdict(list)\nfor _ in range(C):\n    x, y, t = map(int, sys.stdin.readline().split())\n    grid[(x, y)].append(t)\n"
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 0 0 2\\n1 2 2\\n1 1 1\") == \"0\"\nassert solution(\"3 1 1 1 8\\n0 1 1\\n1 0 1\\n2 1 1\\n1 2 1\\n2 2 3\\n0 2 5\\n1 2 6\") == \"4\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 1 0 0 2\n1 2 2\n1 1 1''') == '0'\nassert solution('''3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6''') == '4'"
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 100 100\\n27 75\\n79 77\\n40 93\\n62 41\\n52 45') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 10 10\") == \"3\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 100 100\\n27 75\\n79 77\\n40 93\\n62 41\\n52 45') == '3'\n\"\"\""
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1 10 10\\n8 8\\n5 1\\n4 6\\n4 7\\n7 9') == 3\nassert solution('5 1 100 100\\n27 75\\n79 77\\n40 93\\n62 41\\n52 45') == 3\n"
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 10 10\\n8 8\\n5 1\\n4 6\\n4 7\\n7 9') == '3'\nassert solution('5 1 100 100\\n27 75\\n79 77\\n40 93\\n62 41\\n52 45') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('ab') == 'b'\nassert solution('abc') == 'c'\n"
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 10 10\\n8 8\\n5 1\\n4 6\\n4 7\\n7 9\") == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9''') == 3\n\n\"\"\""
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1 10 10\\n8 8\\n5 1\\n4 6\\n4 7\\n7 9') == 3\n\"\"\"\n\n\"\"\"\n\u8fd9\u9053\u9898\u7684\u5173\u952e\u662f\u8981\u4e0d\u65ad\u7684\u627e\u5230\u6700\u4f4e\u7684\u70b9\uff0c\u4ee5\u53ca\u6700\u9ad8\u7684\u70b9\uff0c\u7136\u540e\u7528\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u4f5c\u4e3a\u62d0\u70b9\u3002\n\n\"\"\""
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 10 10\\n8 8\\n5 1\\n4 6\\n4 7\\n7 9\") == 3\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == -1\nassert solution('ABC') == 0\nassert solution('ABC\\nABC\\nABC') == 0\nassert solution('ABC\\nABBC\\nABCC') == 2\nassert solution('ABBBAAAA\\nBBBCCCBB\\nCCCCAAAC') == 3\n\"\"\"\n\nclass Wheel:\n    def __init__(self, init: str):\n        self.index = {\n            'A': 0,\n            'B': 1,\n            'C': 2\n        }\n        self.current_position = self.index[init[0]]\n\n    def rotate_left(self):\n        self.current_position -= 1\n        if self.current_position < 0:\n            self.current_position = 2\n        return\n\n    def rotate_right(self):\n        self.current_position += 1\n        if self.current_position > 2:\n            self.current_position = 0\n        return\n\n    def get_letter(self) -> str:\n        return list(self.index.keys())[self.current_position]\n"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC\") == -1\nassert solution(\"ABCABCABC\") == 2\nassert solution(\"ABCABC\") == 2\nassert solution(\"BBBCCCBB\") == 3\nassert solution(\"CCCCAAAC\") == -1\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('ABC') == 'ABC'\nassert solution('ABCABCABC') == 'ABCABC'\nassert solution('ABCABCABCABCABC') == 'ABCABC'\nassert solution('ABCBCABBC') == 'ABCBCABBC'\n"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC\") == 2\nassert solution(\"ABBBAAAA\") == 3\nassert solution(\"CCCCAAAC\") == -1\nprint('PASSED')\n\n-----\nSample Input 1:\nABC\nABC\nABC\nSample Output 1:\n0\n\nSample Input 2:\nABBBAAAA\nBBBCCCBB\nCCCCAAAC\nSample Output 2:\n-1\n"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC\") == 2\nassert solution(\"ABC\") == 2\nassert solution(\"ABBBAAAA\") == 3\nassert solution(\"BBBCCCBB\") == 3\nassert solution(\"CCCCAAAC\") == -1\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''ABC\nABC\nABC''') == 2\nassert solution('''ABC\nABC\nABC''') == 2\nassert solution('''ABBBAAAA\nBBBCCCBB\nCCCCAAAC''') == 3\n\nprint(\"PASSED\")\n\n'''\n\n'''"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC\") == 0\nassert solution(\"ABBBAAAA\") == 3\nassert solution(\"BBBCCCBB\") == -1\n\"\"\""
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC\") == \"ABC\"\nassert solution(\"ABCABC\") == \"ABBCCA\"\nassert solution(\"ABCCABB\") == \"ABBCCB\"\nassert solution(\"ABCBABC\") == \"ABCCBB\"\nassert solution(\"ABCBBAC\") == \"ABCCBAC\"\n"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''ABC\nABC\nABC''') == 2\nassert solution('''ABBBAAAA\nBBBCCCBB\nCCCCAAAC''') == 3\n\n-----Problem-----\nYou are given a string $s$ consisting only of lower-case letters and the digits 0 and 1. You are also given a string $t$, which may consist only of lower-case letters. You want to check whether the string $s$ could be obtained by rotating the letters in $t$ in such a way that it becomes a palindrome.\n\nFor example, if $s$ is \"123\", it can be obtained by rotating the letters in $t$ so that it becomes \"132\".\n\n-----Solution-----\nFor each string $t$ of length $2 \\cdot 10^3$, we consider the largest number of letters that could be found by rotating the letters of $t$ to form a palindrome. If this number is a multiple of three, then we print the corresponding number of rotations. Otherwise, we print -1.\n\n'''\n\n\n\n################################################################\n'''\nYou are given a string s, which represents the key for a lock, and an array of moves where each move is in the form (i,c) where i represents the index of the element to be moved, and c is the desired new position of the element. Given a key and array of moves, determine the number of moves required to obtain the goal.\n\nFor example, if the key is \"12345\", and the moves are (0,1), (0,3), (0,5), (2,1), (3,3), (4,3), (5,5), then we can change the goal to obtain the key.\n\nmoves[0] is the element to move from, and moves[1] is the element to move to.\n\nExample 1\nInput\ns = \"12345\"\nmoves = [(0,1),(0,3),(0,5),(2,1),(3,3),(4,3),(5,5)]\n\nOutput\n4\n\nExample 2\nInput\ns = \"1234\"\nmoves = [(0,1),(1,2),(0,3),(3,4),(2,1),(0,4)]\n\nOutput\n5\n'''"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == -1\nassert solution('ABC') == 2\nassert solution('ABCABC') == 2\nassert solution('ABCABCABC') == 2\nassert solution('ABCABCABCABC') == 2\n"
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\nA\nB\nAA\nBBB\nAAA\n\"\"\") == 3\nassert solution(\"\"\"\n5\nA\nABA\nBBB\nABABA\nAAAAAB\n\"\"\") == 3\n\"\"\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\nA\\nABA\\nBBB\\nABABA\\nAAAAAB') == '3'\n\"\"\""
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\nAAB\\nBBB\\nABABA') == 3\n\"\"\""
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nA\\nB\\nAA\\nBBB\\nAAA\") == 3\nassert solution(\"5\\nA\\nABA\\nBBB\\nABABA\\nAAAAAB\") == 3\n\"\"\"\n\nN = int(input())\nstring = []\nfor _ in range(N):\n    string.append(input())"
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\nA\\nABA\\nBBB\\nABABA\\nAAAAAB') == 3\n"
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('A') == 1\nassert solution('AA') == 2\nassert solution('AAB') == 1\nassert solution('AABB') == 2\n"
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AAABAA') == 1\nassert solution('ABAABAA') == 2\nassert solution('AAABBB') == 2\nassert solution('ABCBABC') == 1\nassert solution('ABCBAB') == 2\n"
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('A') == 1\nassert solution('ABA') == 1\nassert solution('BBB') == 1\nassert solution('AAA') == 1\n"
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABCDE\\nABABA\\nBBB\\nABABA') == 3\n\"\"\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nA\\nB\\nAA\\nBBB\\nAAA') == '3'\nprint('Passed')\n\n-----Constraints-----\n1 <= N <= 1000000\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 10 2 1\") == \"0.1\"\nassert solution(\"100 10 2 2\") == \"0.1909090909\"\n\nprint(solution(\"100 10 2 2\"))\n"
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 10 2 1\") == \"0.1\"\nassert solution(\"100 10 2 2\") == \"0.1909090909\"\n\nprint(solution(stdin.strip()))"
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('0\\n') == '0.0'\nassert solution('0\\n0\\n0\\n0') == '0.0'\nassert solution('0\\n1\\n0\\n0\\n0') == '0.0'\nassert solution('0\\n1\\n2\\n0\\n0') == '0.5'\n"
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''100 10 2 1''') == '0.1'\nassert solution('''100 10 2 2''') == '0.1909090909'\n\n'''\n$m$, $n$, and $t$ are integers between 1 and 100.\n$m$ is the number of people who entered the lottery.\n$n$ is the number of winners drawn.\n$t$ is the number of tickets each winner is allowed to buy.\n$p$ is the number of people in your group.\n'''\n"
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 10 2 1\") == \"0.1\"\nassert solution(\"100 10 2 2\") == \"0.1909090909\"\n\"\"\""
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'\n\"\"\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 10 2 1\") == \"0.1\"\nassert solution(\"100 10 2 2\") == \"0.1909090909\"\n\"\"\""
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 10 2 1\") == \"0.1\"\nassert solution(\"100 10 2 2\") == \"0.1909090909\""
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'\n\"\"\""
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(m) == r\nprint(solution(m))\n"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"ABABABcABABAbAbab\") == 4, \"First\"\nassert solution(\n\"ABcABABAB\") == 5, \"Second\"\nassert solution(\n\"BABABcABABAbAbab\") == 0, \"Third\"\nassert solution(\n\"ABABABcABcABABAbAbab\") == 5, \"Fourth\"\n\nprint('\\n')\nprint('returned:', solution(\n\"ABABABcABABAbAbab\"))\nprint('expected: 4')\n"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == 4\nassert solution(\"ABABABcABABAbAbab\") == 4\nassert solution(\"ABABABcABABAbAbab\") == 4\n\"\"\""
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\n\"\"\"\n\nfrom collections import deque\nfrom typing import Deque, Dict, List, Set\n\nfrom icontract import require, ensure\n\n\nclass Node:\n    def __init__(self, data: str, left: \"Node\" = None, right: \"Node\" = None) -> None:\n        self.data = data\n        self.left = left\n        self.right = right\n\n\n@require(lambda A: all(c.isupper() or c == \"-\" for c in A))\n@require(lambda q: 1 <= q <= 100000)\n"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABCDEFABCDEFGABCDEF\") == 3\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def lcs(self, stdin: str) -> int:\n        n = stdin.find('A', 1)\n        m = stdin.find('A', n + 1)\n        return stdin[n:m]\n"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''ABABABcABABAbAbab''') == '4'\nassert solution('''ABABABcABABAbAbab''') == '0'\nassert solution('''ABABABcABABAbAbab''') == '5'\nassert solution('''AAABAAA''') == '3'\nassert solution('''AAABAAA''') == '3'\n"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(ABABABcABABAbAbab) == 4\nassert solution(ABCDEFGabcdefg) == 7\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import inf\n\ns = stdin.readline().strip()\nn = int(stdin.readline())\n\nl = []\nfor _ in range(n):\n    l.append(list(map(int, stdin.readline().split())))"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == 4"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABABABcABABAbAbab') == 4\n\nassert solution('ABABABcABABAbAbab') == 5\n\nassert solution('ABABABcABABAbAbab') == 5\n\n\"\"\""
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == 4\n\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == 4\nassert solution(\"AAAbAAAbAAABAAA\") == 0\nassert solution(\"\") == 0\nassert solution(\"A\") == 1\nassert solution(\"ABA\") == 1\n"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n0\\n0\\n1\") == 2\n\"\"\"\n\n\"\"\"\nsolution (0):\n\"\"\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n0\\n0\\n1\") == \"2\"\n\"\"\"\n\nfrom typing import List\n\nfrom collections import deque"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n0\\n0\\n1\") == 2\n\n\"\"\"\n\nfrom sys import stdin\n\nN, D = [int(x) for x in stdin.readline().split()]\n\ndist = {}\n"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n2\\n0\\n2\\n') == '2'\nassert solution('1 3\\n2\\n0\\n0\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n0\\n0\\n1\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n0\\n0\\n1\") == \"2\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n0\\n0\\n1\") == \"2\"\nassert solution(\"5 2\\n0\\n0\\n1\\n2\") == \"2\"\nassert solution(\"10 10\\n0\\n0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"10\"\n\"\"\"\n\nimport math\n\nN, D = [int(i) for i in input().split()]"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n0\\n0\\n1') == '2'"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n0\\n0\\n1\") == \"2\"\n\n\"\"\"\nimport sys\nfrom math import ceil, log2\n\nsys.setrecursionlimit(10000)\n\n\nclass TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n0\\n0\\n1') == 2\n\"\"\""
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1\") == \"1\\nP0: 22 1 4 2 6 -1 0\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(5000)"
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1''') == '1'\n\nassert solution('''2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n22 4 1 4 2 6 -1 0''') == '3'\n\nassert solution('''2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n22 4 1 4 2 6 -1 0\n22 4 1 4 2 6 -1 0''') == '3'\n\nassert solution('''2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n22 4 1 4 2 6 -1 0\n22 4 1 4 2 6 -1 0''') == '3'\n\nassert solution('''2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n22 4 1 4 2 6 -1 0\n22 4 1 4 2 6 -1 0''') == '3'"
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 8 8 8\\\\n12 4 1 4 5 3 -2\\\\n10 1 2 1 8 -6 1\") == \"1\"\nassert solution(\"2 8 8 8\\\\n12 4 1 4 5 3 -2\\\\n10 1 2 1 8 -6 1\\\\n12 4 1 4 5 3 -2\") == \"2\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1\") == \"1\"\nassert solution(\"2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1\\n0 1 0 0 0 0 0 0\") == \"0\"\nassert solution(\"2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1\\n0 1 0 0 0 0 0 0\\n0 1 0 0 0 0 0 0\\n0 1 0 0 0 0 0 0\\n0 1 0 0 0 0 0 0\\n0 1 0 0 0 0 0 0\\n0 1 0 0 0 0 0 0\\n0 1 0 0 0 0 0 0\\n0 1 0 0 0 0 0 0\\n0 1 0 0 0 0 0 0\\n0 1 0 0 0 0 0 0\\n0 1 0 0 0 0 0 0\") == \"0\"\n\"\"\"\n\n\nimport itertools\nimport math\n"
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1\") == \"1\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1') == '1\\nP0: 22 1 4 2 6 -1 0'\n\n\"\"\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n\"\"\") == \"1\""
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1\") == \"1\\nP0: 22 1 4 2 6 -1 0\"\n\"\"\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1') == '1'\n"
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\") == \"2\\n2\\n3\\n3\"\nassert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\") == \"1\\n2\\n3\\n3\"\nassert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\") == \"1\\n2\\n1\\n2\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\") == \"1\\n2\\n3\\n\""
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\") == \"2\"\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n\") == \"1\\n2\\n3\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n\") == \"1\\n2\\n3\\n\"\nprint('Passed!')\n"
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\") == \"1 2 3\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n\") == '2\\n2\\n3\\n'\n\"\"\"\nimport sys\nfrom collections import defaultdict\nimport bisect\n"
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n\") == \"1\\n2\\n3\\n\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n\") == \"2\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\nroads = [[int(x) for x in stdin.readline().split()] for _ in range(m)]\nroads.sort()\nq = int(stdin.readline())\nfor _ in range(q):\n    s, t = map(int, stdin.readline().split())\n    print(sum((x[1] for x in roads if x[0] == s and x[1] == t)) + sum((x[1] for x in roads if x[0] == t and x[1] == s)))\n"
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5 4 3 2 6') == '2'\nassert solution('1 2 5 4 3 6') == '2'\n\n-----------------------------\nSample Input:\n3\n1 2 3\n1 3 2\nSample Output:\n2\n"
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 4 3 2 6\") == \"2\"\nassert solution(\"1 2 5 4 3 6\") == \"2\"\nassert solution(\"1 3 2 4 5 6\") == \"1\"\nassert solution(\"1 3 2 5 6 4\") == \"1\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 5 4 3 6') == '2'\n\n-----Explanation-----\nBoth frogs, the frog in position 2, and the frog in position 4, can make a single leap (swap places) to put the frog in the position in front of the frog in position 2.\n\nThe frogs, the frog in position 5, and the frog in position 6, can make a single leap (swap places) to put the frog in the position in front of the frog in position 5.\n\nThe number of proclamations is 2.\n\nassert solution('1 2 5 4 3 6') == '2'\n\n-----Test Case-----\n5\n1 2 3 4 5\n1 2 3 4 5\nSample Output:\n2\n\"\"\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n1 5 4 3 2\n1 2 5 4 3\n\"\"\") == \"\"\"\n1\n2\n\"\"\"\n\n\"\"\"\nI am very sure the solutions is right. My program goes through all the permutations of the frogs, finds out the proper sequence for each case and prints the case's final sequence.\n\"\"\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n2\n1 2\n2 1\n''') == '''\n2\n1 2\n'''\n\nassert solution('''\n3\n1 5 4\n5 1 4\n4 5 3\n''') == '''\n1\n2\n1\n'''\n\nassert solution('''\n6\n1 5 4 3 2 6\n1 2 5 4 3 6\n''') == '''\n2\n3\n1\n2\n1\n'''\n\nassert solution('''\n6\n1 5 4 3 2 6\n1 2 5 3 6 4\n''') == '''\n2\n2\n2\n3\n1\n'''\n\nassert solution('''\n3\n1 2\n2 3\n''') == '''\n2\n3\n1\n'''"
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n1 5 4 3 2 6\n1 2 5 4 3 6\n''') == '2'\n\n-----Explanation-----\nThe resulting sequence is:\n\n1 2 5 4 3 6\n\nFor the frog with ID 1, it has one leap left. For the frog with ID 2, it has two leaps left.\n\nThe frog with ID 3 and ID 4 will swap places with the frog with ID 2.\n\nThe frog with ID 5 and ID 6 will swap places with the frog with ID 1.\n\nSo the correct sequence is:\n\n1 2 5 4 3 6\n\nTherefore, the program should output:\n\n2\n'''\n\n\n\n\n\nimport numpy as np"
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5 4 3 2 6\\n1 2 5 4 3 6\") == \"2\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1 5 4 3 2 6\\n1 2 5 4 3 6') == '2'\n\"\"\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5 4 3 2 6') == '2'\nassert solution('1 5 2 3 4 6') == '1'\nassert solution('1 2 5 4 3 6') == '2'\n\n\"\"\""
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 5 4 3 2 6') == '2'\nassert solution('1 2 5 4 3 6') == '2'\nassert solution('1 4 2 5 3 6') == '2'\nassert solution('1 5 3 4 2 6') == '3'\nassert solution('1 3 2 5 4 6') == '3'\n"
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2\") == -1\nassert solution(\"1 30 2 50\") == 60\n\"\"\""
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 2\\n1 30 2 50\\n2 70 3 10\\n3 20 1 80') == 60\n"
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 30 2 50\\n2 70 3 10\\n3 20 1 80') == '60'\n\nSample Input:\n4 4 1\n1 30 2 50\n2 70 3 10\n3 20 1 80\n4 40 2 70\nSample Output:\n-1\n"
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 2\\n1 30 2 50\\n2 70 3 10\\n3 20 1 80\") == \"60\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2\\n1 30 2 50\\n2 70 3 10\\n3 20 1 80\\n\") == \"60\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2\\n1 30 2 50\\n2 70 3 10\\n3 20 1 80\") == \"60\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1\") == '-1'\nassert solution(\"3 3 3\") == '-1'\nassert solution(\"3 2 2\") == '60'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 2\\n1 30 2 50\\n2 70 3 10\\n3 20 1 80') == '60'\n\"\"\"\n\n\"\"\"\nhttps://www.hackerrank.com/challenges/knapsack-problem/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=dynamic-programming\n\nThe knapsack problem is a problem in combinatorial optimization: Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.\n\"\"\"\n\n\"\"\"\nhttps://www.youtube.com/watch?v=q9uMPFVsXsE&list=PL4cUxeGkcC9idu7HqF2h2t6wYxFqt4RZE&index=7\n\nAlgorithms\nImplement the dynamic programming version of the 0/1 knapsack problem.\nGiven:\n\nAn array of positive integers representing item weights, an array of positive integers representing item values, and a positive integer representing a knapsack capacity,\n\nReturn:\n\nThe maximum possible value you can obtain for the given knapsack.\n\"\"\"\n\n\"\"\"\nInput Format\nThe first line of input contains an integer,, the number of items.\nEach of the next  lines contains two integers corresponding to the  weight and  value of the  item.\nThe last line contains an integer,, denoting the knapsack capacity.\n\nOutput Format\nPrint the maximum value that can be obtained for a knapsack of capacity.\n\nSample Input 0\n4\n1 3\n2 4\n3 5\n4 7\n10\nSample Output 0\n10\nSample Input 1\n6\n1 3\n4 5\n2 5\n3 6\n3\nSample Output 1\n12\n\"\"\"\n\n\"\"\"\nhttps://www.youtube.com/watch?v=U5rJlhD3BA0&list=PL4cUxeGkcC9idu7HqF2h2t6wYxFqt4RZE&index=15\n\nAlgorithms\nImplement the dynamic programming version of the 0/1 knapsack problem.\nGiven:\n\nAn array of positive integers representing item weights, an array of positive integers representing item values, and a positive integer representing a knapsack capacity,\n\nReturn:\n\nThe maximum possible value you can obtain for the given knapsack.\n\"\"\"\n\n\"\"\"\nInput Format\nThe first line of input contains an integer,, the number of items.\nEach of the next  lines contains two integers corresponding to the  weight and  value of the  item.\nThe last line contains an integer,, denoting the knapsack capacity.\n\nOutput Format\nPrint the maximum possible value you can obtain for the given knapsack.\n\nSample Input 0\n4\n1 3\n2 4\n3 5\n4 7\n10\nSample Output 0\n10\nSample Input 1\n6\n1 3\n4 5\n2 5\n3 6\n3\nSample Output 1\n12\n\"\"\"\n\n\"\"\"\nhttps://www.youtube.com/watch?v=yqZNuLzCYcw&list=PL4cUxeGkcC9idu7HqF2h2t6wYxFqt4RZE&index=3\n\nAlgorithms\nImplement the dynamic programming version of the 0/1 knapsack problem.\nGiven:\n\nAn array of positive integers representing item weights, an array of positive integers representing item values, and a positive integer representing a knapsack capacity,\n\nReturn:\n\nThe maximum possible value you can obtain for the given knapsack.\n\"\"\"\n\n\"\"\"\nInput Format\nThe first line of input contains an integer,, the number of items.\nEach of the next  lines contains two integers corresponding to the  weight and  value of the  item.\nThe last line contains an integer,, denoting the knapsack capacity.\n\nOutput Format\nPrint the maximum possible value you can obtain for the given knapsack.\n\nSample Input 0\n4\n1 3\n2 4\n3 5\n4 7\n10\nSample Output 0\n10\nSample Input 1\n6\n1 3\n4 5\n2 5\n3 6\n3\nSample Output 1\n12\n\"\"\"\n\n\"\"\"\nhttps://www.youtube.com/watch?v=yqZNuLzCYcw&list=PL4cUxeGkcC9idu7HqF2h2t6wYxFqt4RZE&index=4\n\nAlgorithms\nImplement the dynamic programming version of the 0/1 knapsack problem.\nGiven:\n\nAn array of positive integers representing item weights, an array of positive integers representing item values, and a positive integer representing a knapsack capacity,\n\nReturn:\n\nThe maximum possible value you can obtain for the given knapsack."
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 2\\n1 30 2 50\\n2 70 3 10\\n3 20 1 80') == '60'\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List\n\nn, m, k = map(int, input().split())\n\nprices = defaultdict(dict)\nknock_offs = defaultdict(dict)\nfor i in range(1, n+1):\n    a, p, b, q = map(int, input().split())\n    prices[i][a] = p\n    prices[i][b] = q\n    knock_offs[i][a] = b\n    knock_offs[i][b] = a"
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '60'\n\"\"\"\n\nimport sys\nfrom typing import List, Dict\nfrom collections import defaultdict, Counter\n\nDEBUG = False\ndata = sys.stdin.read().strip().split('\\n')\ndata = [line.split() for line in data]\n\nn, m, k = map(int, data[0])\nantique: List[List[int]] = []\nfor i in range(1, n + 1):\n    antique.append([int(j) for j in data[i]])\n\nshop = defaultdict(lambda: [0, 0])\nshop.update({j: [int(k), int(v)] for j, k, v in data[1:1 + m]})"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n10000 0 0\\n0 10000 0\") == \"Case #1: 1\\nCase #2: 2\"\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\n\n'''\n\n\n\nimport sys\nimport re\n"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0 1 2 3 4\") == \"Case #1: 1\\nCase #2: 2\"\nprint(solution(stdin))"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000') == 'Case #1: 1\\nCase #2: 2'\n\"\"\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n10000 0 0\\n0 10000 0\\n0 0 10000') == 'Case #1: 1\\nCase #2: 2'\nassert solution('2\\n5000 0 0\\n0 2000 0\\n0 0 4000') == 'Case #1: 2\\nCase #2: 0'\n"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000') == 'Case #1: 1\\nCase #2: 2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000\") == \"Case #1: 1\\nCase #2: 2\"\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline().strip())"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000\") == \"Case #1: 1\\nCase #2: 2\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10000 0 0\\n0 10000 0\\n0 0 10000\\n3\\n5000 0 0\\n0 2000 0\\n0 0 4000\\n\") == \"Case #1: 1\\nCase #2: 2\"\n\n'''\n\n\nimport sys"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n3\\n5000 0 0\\n0 2000 0\\n0 0 4000\\n\") == \"Case #1: 1\\nCase #2: 2\"\n\nExplanation:\nCase #1: The maximum number of people that will like the drink is 1, as only 1 person is holding the 3 types of juice that satisfies their minimum fraction requirements.\n\nCase #2: The maximum number of people that will like the drink is 2, as the 3 types of juice from 2 of the 3 people will satisfy the minimum fraction requirements.\n\n-----Problem-----\nhttps://www.hackerrank.com/challenges/apple-and-orange\n\"\"\""
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\n\"\"\"\nfrom __future__ import annotations\n\nimport sys\nfrom collections import Counter\nfrom enum import Enum, auto\nfrom itertools import chain\nfrom typing import Dict, List, Set\n\n\nclass Element(Enum):\n    hydrogen = auto()\n    carbon = auto()\n    oxygen = auto()\n"
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n\") == \"6 6 6 1\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n\") == \"6 6 6 1\"\nassert solution(\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n\") == \"6 6 6 1\"\nassert solution(\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n\") == \"6 6 6 1\"\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict\n\nimport io"
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n\"\"\") == \"6 6 6 1\"\nassert solution(\"\"\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n\"\"\") == \"6 6 6 1\"\nassert solution(\"\"\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n\"\"\") == \"6 6 6 1\"\nassert solution(\"\"\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n\"\"\") == \"6 6 6 1\"\n\"\"\""
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n\"\"\") == \"6 6 6 1\"\nassert solution(\"\"\"+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n\"\"\") == \"6 6 6 1\"\nassert solution(\"\"\"+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n\"\"\") == \"6 6 6 1\"\n\n\"\"\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\") == \"6 6 6 1\"\nassert solution(\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\") == \"1 1 1 1 1 1 1 1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\nassert solution(\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\\n0 0\") == \"6 6 6 1\"\nassert solution(\"-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"0 0\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n0 0\") == \"2 2 2 2\"\nassert solution(\"-1 1 O 2\\n0 0\") == \"1 1 1 1\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\n\n\"\"\"\n\nimport re\nfrom collections import Counter"
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\nassert solution(\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\nassert solution(\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\nassert solution(\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n20\\n30\\n40\\n50\") == \"20.83\"\nassert solution(\"10\\n20\\n30\\n40\\n50\\n60\") == \"12.00\"\nassert solution(\"10\\n20\\n30\\n40\\n50\\n60\\n70\") == \"12.00\"\nassert solution(\"10\\n20\\n30\\n40\\n50\\n60\\n70\\n80\\n90\\n100\") == \"12.00\"\nassert solution(\"100\\n200\\n300\\n400\\n500\\n600\\n700\\n800\\n900\\n1000\") == \"15.23\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\") == \"20.83\"\nassert solution(\"3\\n500 0\\n100 0\\n100 500\") == \"500.0\"\nassert solution(\"2\\n100 0\\n100 500\") == \"500.0\"\n\n\"\"\""
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n30 0\\n20 0\\n100 0\\n100 40\\n20 40\") == \"20.83\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\") == \"20.83\"\nprint(solution(\"3\\n10 100\\n90 100\\n110 100\"))\nassert solution(\"5\\n50 30\\n110 0\\n110 100\\n110 100\\n110 100\") == \"10.10\"\nprint(solution(\"4\\n40 100\\n20 0\\n100 0\\n110 100\"))\nassert solution(\"7\\n100 0\\n110 0\\n110 100\\n110 100\\n110 100\\n110 100\") == \"10.00\"\nprint(solution(\"3\\n10 100\\n90 100\\n110 100\"))\nassert solution(\"4\\n100 0\\n110 0\\n110 100\") == \"10.00\"\nprint(solution(\"6\\n100 0\\n110 0\\n110 100\\n110 100\\n110 100\"))\nassert solution(\"2\\n110 0\\n110 100\") == \"10.00\"\nprint(solution(\"6\\n110 0\\n110 100\\n110 100\\n110 100\\n110 100\"))\n"
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n30 50\n20 0\n100 0\n100 40\n20 40''') == '20.83'\nprint(solution(stdin))\n\n----"
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\") == \"20.83\"\nassert solution(\"4\\n50 100\\n20 0\\n100 0\\n100 40\\n20 40\") == \"21.13\"\nassert solution(\"4\\n50 100\\n100 0\\n100 40\\n20 40\") == \"20.83\"\n\"\"\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n30 0\\n20 0\\n100 0\\n100 40\\n20 40\") == \"20.83\"\nassert solution(\"4\\n100 0\\n100 40\\n20 40\\n20 0\") == \"20.83\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40') == '20.83'\nprint('Test pass.')\n\n-----Explanation-----\nYou poured water into the aquarium tank at 30cm, and the tank is now full. You poured water into the aquarium tank at 20cm, and the tank is now full. You poured water into the aquarium tank at 100cm, and the tank is now full. You poured water into the aquarium tank at 40cm, and the tank is now full.\n\nThe heights of water in the aquarium tank at these points is 20.83 cm.\n\n*Solution: https://www.martinkysel.com/codility/demo/water_container-3fa0e7fc/solution/\n'''\n\n\nimport unittest\nimport math\n\nclass Solution(object):\n    def height(self, l, r, d, h, water):\n        if l > r or l < 0 or r < 0 or d < 0:\n            return 0\n        \n        if d == 0:\n            return h\n        \n        return self.height(l, r, d - 1, h + math.ceil((r - l) / d), water)\n    \n    def solution(self, l: int, r: int, d: int, h: int) -> float:\n        return self.height(l, r, d, h, 0)\n        \nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        s = Solution()\n        self.assertEqual(s.solution(30, 50, 40, 20), 20.83)"
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\") == \"20.83\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 3\n1 2 5\n7 6 4\n9 8 3''') == '49'\n\nprint(solution(input()))\n\n------Solution---------\n'''\nO(r*c*3^(r*c)) runtime\n\nfor each element in rows and columns, add up the rows and columns to a single list\nuse the count function to count how many times the element occurs\nadd all the elements together\n\nthe logic here is that for each element, it will appear in\nrows, columns, and a 3 x 3 grid\n'''"
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 5\\n7 6 4\\n9 8 3\") == \"49\"\nprint(\"Well done.\")\n\"\"\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n1 2 3 4 5\\n2 3 4 5 6\\n3 4 5 6 7\\n4 5 6 7 8\\n5 6 7 8 9\\n6 7 8 9 10\\n7 8 9 10 11\\n8 9 10 11 12\\n9 10 11 12 13\\n') == '18'\n\n\"\"\""
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2 4 5\\n7 2 3 1\\n9 4 6 8\\n3 2 1 4\\n\") == 49\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('5 5\\n1 2 3 4 5\\n5 1 2 3 4\\n4 5 1 2 3\\n3 4 5 1 2\\n2 3 4 5 1\\n1 2 3 4 5') == 9\nassert solution('2 2\\n1 1\\n2 2') == 0\nassert solution('1 1\\n1 1') == 1\nassert solution('3 2\\n1 1\\n1 1') == 3\n\"\"\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 2 5\\n7 6 4\\n9 8 3\") == \"49\"\n\"\"\"\n\nwith open(\"output.txt\", \"w\") as f:\n    f.write(solution(stdin))\n"
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\\n6 1 7 8 9\") == '4\\n3\\n2'\nprint('Hooray!')\n"
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 2 5\\n7 6 4\\n9 8 3\") == \"49\"\nassert solution(\"3 4\\n1 2 3 4\\n5 6 7 8\\n9 10 11 12\") == \"12\"\nassert solution(\"2 2\\n1 1\\n2 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2 3\\n4 5 6\\n7 8 9') == '9'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 5\\n7 6 4\\n9 8 3') == '49'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 15\\n##.........####\\n1\\nCROSSWORD\") == \"##CROSSWORD####\"\nassert solution(\"1 15\\n##.........####\\n1\\nCrossword\") == \"##Crossword####\"\nassert solution(\"1 15\\n##.........####\\n1\\nCrossword\") == \"##Crossword####\"\nassert solution(\"1 15\\n##.........####\\n1\\nCrossword.\") == \"##Crossword####.\"\nassert solution(\"1 15\\n##.........####\\n1\\nCrossword.\") == \"##Crossword####.\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 15\\n##.........####\\n1\\nCROSSWORD\") == \\\n       \"##CROSSWORD####\"\n\n\"\"\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 15\\n##.........####\\n1\\nCROSSWORD\") == \"##CROSSWORD####\"\n\n----\n\nimport unittest\nfrom typing import List\nfrom collections import namedtuple\n\n\nclass Point(namedtuple(\"Point\", \"x y\")):\n    def __add__(self, other: \"Point\"):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: \"Point\"):\n        return Point(self.x - other.x, self.y - other.y)\n\n\nclass Solution:\n    @staticmethod\n    def get_path_position(path: str, positions: List[Point]):\n        position = Point(0, 0)\n        for direction in path:\n            if direction == \"U\":\n                position += Point(0, 1)\n            elif direction == \"D\":\n                position += Point(0, -1)\n            elif direction == \"R\":\n                position += Point(1, 0)\n            elif direction == \"L\":\n                position += Point(-1, 0)\n            else:\n                raise ValueError(f\"Unknown direction {direction}\")\n\n        if position not in positions:\n            raise ValueError(f\"Position {position} not in positions {positions}\")\n\n        return position\n\n    @staticmethod\n    def get_puzzle_grid(grid: str, word: str) -> List[List[str]]:\n        grid = [row for row in grid.split(\"\\n\")]\n        rows = len(grid)\n        cols = len(grid[0])\n        word = word.upper()\n\n        puzzle_grid = [[None for _ in range(cols)] for _ in range(rows)]\n\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == \"#\":\n                    continue\n\n                path = \"\"\n                for k in range(len(word)):\n                    if i + k >= rows or j + len(word[k]) >= cols:\n                        break\n                    try:\n                        path += grid[i + k][j:j + len(word[k])]\n                    except IndexError:\n                        break\n                    if path!= word[k]:\n                        break\n                    puzzle_grid[i][j] = path\n                    for k in range(len(word[k])):\n                        grid[i + k][j] = \".\"\n\n        return puzzle_grid\n\n    @staticmethod\n    def get_solution_grid(grid: List[List[str]], word: str) -> List[List[str]]:\n        rows = len(grid)\n        cols = len(grid[0])\n        word = word.upper()\n        solution_grid = [[None for _ in range(cols)] for _ in range(rows)]\n\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == \"#\":\n                    continue\n                path = \"\"\n                for k in range(len(word)):\n                    if i + k >= rows or j + len(word[k]) >= cols:\n                        break\n                    try:\n                        path += grid[i + k][j:j + len(word[k])]\n                    except IndexError:\n                        break\n                    if path!= word[k]:\n                        break\n                    solution_grid[i][j] = path\n                    for k in range(len(word[k])):\n                        grid[i + k][j] = \".\"\n\n        return solution_grid\n\n    def build_paths(self, grid: List[List[str]], word: str):\n        for direction in word:\n            if direction == \"U\":\n                positions = [Point(i, j) for i in range(len(grid)) for j in range(len(grid[i])) if grid[i][j]!= \"#\"]\n            elif direction == \"D\":\n                positions = [Point(i, j) for i in range(len(grid)) for j in range(len(grid[i])) if grid[i][j]!= \"#\"]\n            elif direction == \"R\":\n                positions = [Point(i, j) for j in range(len(grid[0])) for i in range(len(grid)) if grid[i][j]!= \"#\"]\n            elif direction == \"L\":\n                positions = [Point(i, j) for j in range(len(grid[0])) for i in range(len(grid)) if grid[i][j]!= \"#\"]\n            else:\n                raise ValueError(f\"Unknown direction {direction}\")\n\n            for i in range(len(positions)):\n                yield positions[i:] + positions[:i]\n\n    def solution(self, stdin: str) -> str:\n        grid, word = stdin.split(\"\\n\\n\")\n        grid = self.get_puzzle_grid(grid, word)\n        solution_grid = self.get_solution_grid(grid, word)\n        return \"\\n\".join(\"\".join(row) for row in solution_grid)\n\n\nclass Test(unittest.TestCase):\n    def test_solution1(self):\n        self.assertEqual(Solution().solution(stdin=\"1 15\\n##.........####\\n1\\nCROSSWORD\"), \"##CROSSWORD####\")\n\n    def test_solution2(self):\n        self.assertEqual(Solution().solution(stdin=\"1 15\\n##.........####\\n1\\nCROSSWORD\"), \"##CROSSWORD####\")\n\n    def test_solution3(self):\n        self.assertEqual(Solution().solution(stdin=\"1 15\\n##.........####\\n1\\nCROSSWORD\"), \"##CROSSWORD####\")\n\n    def test_solution4(self):\n        self.assertEqual(Solution().s"
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 15\\n##.........####\\n1\\nCROSSWORD') == '##CROSSWORD####'\n\"\"\""
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 15\\\\n##.#####.##\\\\n1\\\\nCROSSWORD\") == \"##CROSSWORD####\"\n\"\"\"\n\n\"\"\"\nIn this problem, we want to convert a crossword puzzle into a dictionary.\nFor example, the dictionary will contain the following information for this sample puzzle:\n    \"#\": 1, # 1 means void\n    \".\": 3, # 3 means empty\n    \"A\": [0, 0], # [0,0] means the cell starting from [0,0]\n    \"C\": [2, 0],\n    \"R\": [1, 0],\n    \"S\": [0, 0],\n    \"T\": [0, 0],\n    \"W\": [2, 0],\n    \"X\": [0, 0]\n\nThen, we want to traverse the puzzle and convert it into the dictionary.\n\nStep 1: Reading the puzzle from the input and storing into a 2-dimensional array, in a way that we can access it easily.\n\nStep 2: Using the dictionary to solve the crossword.\n    If there is a '#', the value of the dictionary is 1, the cell can be placed\n    If there is a '.', the value of the dictionary is 3, the cell can be placed\n    If there is a 'A', the value of the dictionary is [0,0], and we need to get the value of the cell [0,0] and store it.\n    If there is a 'C', the value of the dictionary is [2,0], and we need to get the value of the cell [2,0] and store it.\n    If there is a 'R', the value of the dictionary is [1,0], and we need to get the value of the cell [1,0] and store it.\n    If there is a 'S', the value of the dictionary is [0,0], and we need to get the value of the cell [0,0] and store it.\n    If there is a 'T', the value of the dictionary is [0,0], and we need to get the value of the cell [0,0] and store it.\n    If there is a 'W', the value of the dictionary is [2,0], and we need to get the value of the cell [2,0] and store it.\n    If there is a 'X', the value of the dictionary is [0,0], and we need to get the value of the cell [0,0] and store it.\n\"\"\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1 15\n##.........####\n1\nCROSSWORD''') == '''##CROSSWORD####\n'''\n\nprint(solution(stdin))\n\n\n-----\n\"\"\"\n    \"\"\"\n    # Write your code here\n    row, column = map(int, stdin.readline().split())\n    crossword = [list(stdin.readline().strip()) for _ in range(row)]\n    words = [stdin.readline().strip() for _ in range(int(stdin.readline()))]\n    ans = [['.'] * column for _ in range(row)]\n    for i in range(row):\n        for j in range(column):\n            if crossword[i][j] == '.':\n                for word in words:\n                    if is_valid(word, i, j, row, column):\n                        fill_word(word, ans, i, j)\n    return '\\n'.join([''.join(row) for row in ans])\n"
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('a') == 'a'\nassert solution('a' * 5) == 'aaaaa'\n\n\"\"\"\n\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 15\\n##.........####\\n1\\nCROSSWORD') == '##CROSSWORD####'\n\n-----Notes-----\n1.\n2.\n3.\n4.\n5.\n\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 15\\n##.........####\\n1\\nCROSSWORD') == '##CROSSWORD####'\n    '''\n    Example Tests\n    \"1 15\"\n    \"##.........####\\n1\"\n    \"CROSSWORD\"\n    '''\n    pass\n\nprint(solution(stdin))\n    '''\n    Print\n    \"##CROSSWORD####\"\n    '''\n"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3 1\n2 7 6\n9 5 1\n4 3 8\n''') == '31'\nprint('The second sample test is successful.')\n\nassert solution('''\n3 1\n2 7 6\n9 5 1\n4 3 8\n''') == '31'\nprint('The third sample test is successful.')\n\nassert solution('''\n3 1\n2 7 6\n9 5 1\n4 3 8\n''') == '31'\nprint('The fourth sample test is successful.')"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n2 7 6\\n9 5 1\\n4 3 8\\n\") == \"31\"\n\nSample Input:\n1 1\n8\nSample Output:\n16\n\"\"\""
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n2 7 6\\n9 5 1\\n4 3 8\") == \"31\"\n\"\"\""
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n2 7 6\\n9 5 1\\n4 3 8\") == \"31\"\n\"\"\"\n\nn, k = map(int, input().split())\nt = []\nfor _ in range(n):\n    t.append(list(map(int, input().split())))\n\nmin_sum = 10000000000\n\nfor x in range(n - k + 1):\n    for y in range(n - k + 1):\n        t_sum = 0\n        for i in range(k):\n            for j in range(k):\n                t_sum += t[x + i][y + j]\n        min_sum = min(t_sum, min_sum)\n\nprint(min_sum)\n\n\"\"\"\n3 1\n2 7 6\n9 5 1\n4 3 8\n\"\"\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"3 1\\n2 7 6\\n9 5 1\\n4 3 8\\n\") == \"31\"\n\n----Problem----\n\nGiven the number $N$, determine the smallest positive integer $K$ such that:\n\n1. The largest value in the $N \\times N$ table that is not replaced by a domino is smaller than or equal to the square root of $K$,\n2. The number of dominoes to cover the table is at most $K$,\n3. The sum of the visible fields is at most $K$.\n\nInput Format\n\nThe first line of input contains two integers $N$, $K$, separated by a space.\n\nEach of the following $N$ lines contains $N$ integers $l_1$, $l_2$,..., $l_N$, where $l_i \\geq 0$.\n\nConstraints\n\n$1 \\leq N \\leq 2000$\n$1 \\leq K \\leq 8$\n$0 \\leq l_i \\leq 1000$\n\nOutput Format\n\nThe only line of output should contain the smallest positive integer $K$.\n\nSample Input 0\n\n3 1\n2 7 6\n9 5 1\n4 3 8\nSample Output 0\n\n31\nExplanation 0\n\nThe table is as follows:\n\n1. The largest value in the table is 7, which is smaller than or equal to the square root of 1. Thus, we put a domino covering the largest uncovered field (3rd field) and the second largest uncovered field (5th field).\n\n2. The number of dominoes placed on the table is 2, which is less than or equal to the number of dominoes, so we only need to put a domino covering the largest uncovered field.\n\n3. The sum of the visible fields is 2 + 5 = 7, which is less than or equal to the required value, so we put another domino covering the largest uncovered field.\n\n4. Thus, we put two dominoes covering two largest uncovered fields.\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n4 5 6\\n') == '27'\n'''"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n4 1 2 1 2\\n3 1 3\") == \"15\"\n\nSample Input:\n3 1\n2 9 3\n1 4 2\n4 1 2\nSample Output:\n8\n\"\"\""
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n2 3\") == 3\n\"\"\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n7 6\\n9 5 1\\n4 3 8\") == \"31\"\nprint(solution(\"2\\n7 6\\n9 5 1\\n4 3 8\"))\n"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n2 7 6\\n9 5 1\\n4 3 8\\n') == '31'\n\n---Problem Description---\nThe aim of this kata is to determine the minimum possible sum of the uncovered fields on the table, after placing the dominoes without overlapping.\n\nThe test data will always be such that it will always be possible to place $K$ dominoes without overlapping.\n\n---Sample Input/Output---\nSample Input:\n3 1\n2 7 6\n9 5 1\n4 3 8\n\nSample Output:\n31\n\n---Test Cases---\nThe smallest table has $K = 1$, thus the answer is simply the sum of the uncovered fields:\n\n7 6\n9 1\n2 3\n\nThe smallest table has $K = 2$, thus the answer is simply the sum of the uncovered fields:\n\n6 3\n9 5\n2 7\n\nThe smallest table has $K = 3$, thus the answer is simply the sum of the uncovered fields:\n\n4\n\nThe smallest table has $K = 4$, thus the answer is simply the sum of the uncovered fields:\n\n3\n\nThe smallest table has $K = 5$, thus the answer is simply the sum of the uncovered fields:\n\n0\n\nThe smallest table has $K = 6$, thus the answer is simply the sum of the uncovered fields:\n\n0\n\nThe smallest table has $K = 7$, thus the answer is simply the sum of the uncovered fields:\n\n0\n\nThe smallest table has $K = 8$, thus the answer is simply the sum of the uncovered fields:\n\n0\n\"\"\""
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('BBW') == 2\nassert solution('BW') == 2\nassert solution('WW') == 1\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\nBBW\") == \"2\"\nassert solution(\"1 1\\nB\") == \"1\"\nassert solution(\"2 2\\nWW\") == \"1\"\nassert solution(\"2 2\\nW\") == \"0\"\n\"\"\""
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BBW\") == 2\nassert solution(\"WWWWW\") == 0\n"
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\nWBWBWBW') == '2'\n\"\"\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('BWBWBW') == 'BBW'\nassert solution('BBWBBW') == 'BW'\nassert solution('WBWBWBW') == 'WBW'\nassert solution('BBWBBW') == 'BBW'\n"
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('BBW') == '2'\nassert solution('BWBB') == '1'\nassert solution('BWBW') == '3'\nassert solution('WWBWBWB') == '7'\nassert solution('WWBBWBW') == '6'\n\n\"\"\"\n\nimport collections\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\ncircle = collections.deque(list(sys.stdin.readline()[:-1]))"
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\nBBW\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\n-----Input-----\n4 5\nWWBWBW\nSample Output:\n3\n\n-----Input-----\n4 5\nBWWBBW\nSample Output:\n2\n\n-----Input-----\n4 6\nBWWBWBW\nSample Output:\n1\n\n-----Input-----\n7 1\nWWBBBWW\nSample Output:\n1\n\n-----Input-----\n5 6\nBWBWBWBW\nSample Output:\n3\n\n-----Input-----\n3 2\nBBW\nSample Output:\n2\n\n'''\n"
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 1\nBBW''') == 2\n\nassert solution('''5 5\nWWWWWWWW\nWWWWBWBW\nWBBWBWBW\nWWBWBWBW\nWBWWBWBW''') == 10\n\nassert solution('''2 2\nBB\nWB''') == 0\n\nassert solution('''6 3\nBBWWBWB\nWBWBWBW\nWWBWBWB\nWBBBWBW\nWBWBWBW\nBBBWBWB\n''') == 20\n\nprint('Success')\n\n------Hint------\nThe strategy to solve the problem is to count the number of starting circles that give the same circle as Stanko\u2019s original after K transformations.\n\nIf there are 2 starting circles that give the same circle after K transformations, then they are indistinguishable.\n\nSo, how can you deduce that after K transformations, the number of distinct starting circles will be 2^K.\n\nSince 2^K is a power of 2, we can use it to simplify the problem.\n\nThe idea is to count the number of distinct starting circles that give the same circle as Stanko\u2019s original after K transformations.\n\nSince the circle is divided into two identical halves, we know that we only need to count the number of distinct starting circles that give the same circle after a number of K transformations that divides 2.\n\nThis means that we can use a very efficient dynamic programming approach to solve the problem.\n\nThe main idea is to choose the starting circle that gives the same circle after K transformations, and then add it to a set.\n\nFor the last circle, we know that it will always give the same circle, so we add it to the set once.\n\nThe number of distinct starting circles after K transformations is the number of elements in the set.\n\nThis solution has a running time of O(2^K)O(2\u200b^K\u200b\u200b) and a space complexity of O(2^K)O(2\u200b^K\u200b\u200b).\n\nThe main idea is to use dynamic programming to solve the problem.\n\nSo, the number of distinct starting circles after K transformations is the number of distinct starting circles after a number of K transformations that divides 2.\n\nSo, we can find the number of distinct starting circles after a number of K transformations using a recursive function.\n\nThe base case is when K = 0. Then the number of distinct starting circles is just 1.\n\nSo, if we have a function that finds the number of distinct starting circles after a number of K transformations, we can easily find the number of distinct starting circles after K transformations.\n\nSo, we have to find the number of distinct starting circles after a number of K transformations.\n\nFor every K, there are two distinct starting circles after that number of K transformations.\n\nSo, the number of distinct starting circles after K transformations is the sum of the number of distinct starting circles after a number of K transformations that divides 2.\n\nThe base case is when K = 0, so the number of distinct starting circles after K transformations is 1.\n\nSo, we have to find the number of distinct starting circles after a number of K transformations.\n\nSo, we have to find the number of distinct starting circles after a number of K transformations.\n\nFor every K, there are two distinct starting circles after that number of K transformations.\n\nSo, the number of distinct starting circles after K transformations is the sum of the number of distinct starting circles after a number of K transformations that divides 2.\n\nThe base case is when K = 0, so the number of distinct starting circles after K transformations is 1.\n\nSo, we have to find the number of distinct starting circles after a number of K transformations.\n\nSo, we have to find the number of distinct starting circles after a number of K transformations.\n\nFor every K, there are two distinct starting circles after that number of K transformations.\n\nSo, the number of distinct starting circles after K transformations is the sum of the number of distinct starting circles after a number of K transformations that divides 2.\n\nThe base case is when K = 0, so the number of distinct starting circles after K transformations is 1.\n\nSo, we have to find the number of distinct starting circles after a number of K transformations.\n\nSo, we have to find the number of distinct starting circles after a number of K transformations.\n\nFor every K, there are two distinct starting circles after that number of K transformations.\n\nSo, the number of distinct starting circles after K transformations is the sum of the number of distinct starting circles after a number of K transformations that divides 2.\n\nThe base case is when K = 0, so the number of distinct starting circles after K transformations is 1.\n\nSo, we have to find the number of distinct starting circles after a number of K transformations.\n\nSo, we have to find the number of distinct starting circles after a number of K transformations.\n\nFor every K, there are two distinct starting circles after that number of K transformations.\n\nSo, the number of distinct starting circles after K transformations is the sum of the number of distinct starting circles after a number of K transformations that divides 2.\n\nThe base case is when K = 0, so the number of distinct starting circles after K transformations is 1.\n\nSo, we have to find the number of distinct starting circles after a number of K transformations.\n\nSo, we have to find the number of distinct starting circles after a number of K transformations.\n\nFor every K, there are two distinct starting circles after that number of K transformations.\n\nSo, the number of distinct starting circles after K transformations is the sum of the number of distinct starting circles after a number of K transformations that divides 2.\n\nThe base case is when K = 0, so the number of distinct starting circles after K transformations is 1.\n\nSo, we have to find the number of distinct starting circles after a number of K transformations.\n\nSo, we have to find the number of distinct starting circles after a number of K transformations.\n\nFor every K, there are two distinct starting circles after that number of K transformations.\n\nSo, the number of distinct starting circles after K transformations is the sum of the number of distinct starting circles after a number of K transformations that divides 2.\n\nThe base case is when K = 0, so the number of distinct starting circles after K transformations is 1.\n\nSo, we have to find the number of distinct starting circles after a number of K transformations.\n\nSo, we have to find the number of distinct starting circles after a number of K transformations.\n\nFor every K, there are two distinct starting circles after that number of K transformations.\n\nSo, the number of distinct starting circles after K transformations is the sum of the number of distinct starting circles after a number of K transformations that divides 2.\n\nThe base case is when K ="
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\nBBW\") == \"2\"\n\"\"\""
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1\\n3 2 1\\n1 2 3') == '0.556'\n\n\"\"\"\nimport math\nimport sys\n\nn, l = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nc = [int(i) for i in input().split()]\n\navg_a = sum(a) / n\navg_c = sum(c) / n\n\nmin_price = float('inf')\n\nfor ai, ci in zip(a, c):\n    price = ci / (ai / avg_a + 1)\n    if l <= ai:\n        price *= (l / ai)\n    else:\n        price *= (ai / l)\n    min_price = min(min_price, price)\n\nprint('%.3f' % min_price)\n"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n3 2 1\\n1 2 3\") == \"0.556\"\n\"\"\"\n\nfrom typing import List, Dict\n\nN, L = [int(s) for s in input().split()]"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2 3\") == \"0.556\"\n\"\"\"\n\nfrom math import gcd\nfrom functools import reduce\n\nstdin = input()\nn, l = map(int, stdin.split(\" \"))\nns = list(map(int, input().split(\" \")))\ncs = list(map(int, input().split(\" \")))"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n3 2 1\\n1 2 3') == '0.556'\n\"\"\"\nimport sys\nimport collections"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n3 2 1') == '0.556'\n"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 1\") == \"0.333\"\n\nassert solution(\"10 4 10\") == \"0.4\"\n\nassert solution(\"10 10 10\") == \"1\"\n\nassert solution(\"100 100 100\") == \"1\"\n\nassert solution(\"100 1 100\") == \"0.01\""
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n3 2 1\") == \"0.571\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 1\n3 2 1\n1 2 3''') == '0.556'\n\nassert solution('''3 1\n3 2 2\n2 3 1''') == '1.1111'\n\nassert solution('''6 3\n1 10 1\n5 6 7\n10 10 1\n10 10 10\n1 1 10\n1 1 10\n1 10 1''') == '1.1111'\n\nassert solution('''4 4\n1 10 1\n10 1 1\n1 1 10\n1 1 10\n1 10 1''') == '1.1111'\n\nassert solution('''3 1\n3 2 2\n2 3 1''') == '1.1111'"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n3 2 1\") == \"0.556\"\nassert solution(\"4 1\\n1 2 3 4\") == \"2.0\"\n\"\"\"\n\nimport sys\nimport math\n\n\"\"\"\nL <= N <= 100, 1 <= L < N, L < N,\na_i <= 100, c_i <= 1000000, c_i = a_i,\nc_i = a_i, a_i >= 1\n\"\"\"\n\nN, L = map(int, sys.stdin.readline().strip().split())\navgs = list(map(float, sys.stdin.readline().strip().split()))\ncs = list(map(int, sys.stdin.readline().strip().split()))\n\ncnt = 0\nfor c in cs:\n    if cnt >= L:\n        break\n    cnt += c\n\np1 = cs[0] / cnt\np2 = avgs[0]\n\nfor i in range(1, N):\n    if cnt >= L:\n        break\n    cnt += cs[i]\n    p2 = max(p2, avgs[i] / cnt)\n\nprint(f'{p1 * p2:.3f}')\n"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n3 2 1\\n1 2 3') == '0.556'\nprint(solution(input()))"
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '1'\nassert solution('3\\n') == '0'\n"
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 4 3 2''') == 3\n\"\"\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"5 4 3 2\") == \"3\"\n\nassert solution(\n    \"6 4 1 7\") == \"3\"\n\nassert solution(\n    \"5 4 2 6\") == \"3\"\n\nassert solution(\n    \"5 4 2 7\") == \"2\"\n\nassert solution(\n    \"6 5 4 3\") == \"2\""
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a, b, p) == expected\n"
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 3 2\") == 3\n"
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"5 4 3 2\"\n) == 3\nprint(solution(input()))\n"
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 3 2\") == \"3\"\nprint(solution(\"5 4 3 2\"))\n\"\"\"\n\nL, A, B, P = list(map(int, stdin.split()))\nprint(A + B - P)\n"
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == 2\n\n-----\n\n\"\"\""
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4 3 2') == '3'\nassert solution('3 2 1 0') == '1'\nassert solution('1 0 0 0') == '0'\nassert solution('0 0 1 0') == '1'\nassert solution('0 0 0 0') == '0'\n"
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4 3 2\") == 3\n\n\"\"\""
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 6\\n2 5 8\\n3 3 5\\n5 3 6\") == \"13\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 6\\n2 5 8\\n3 3 5\\n5 3 6\") == \"13\"\nassert solution(\"2 1 4\\n2 3 8\\n1 2 8\\n3 4 6\") == \"5\"\nassert solution(\"3 2 6\\n2 1 8\\n3 2 4\\n2 1 8\\n1 2 8\\n3 2 4\\n2 3 8\\n1 2 8\\n3 2 4\") == \"9\"\nassert solution(\"1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"15\""
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open('./input.txt').read()) == '13'\n"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n\"\"\") == 13\n\n-----Challenge-----\nTime limit: 10s.\nMemory limit: 1GB.\n\n\"\"\""
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 6\\n2 5 8\\n3 3 5\\n5 3 6') == 13\n\"\"\"\n\nimport sys\nimport itertools\n\nN = int(sys.stdin.readline())\nstreams = [tuple(map(int, sys.stdin.readline().split())) for _ in range(N)]\nstreams.sort()\n\ncombs = itertools.combinations(streams, r=N // 2)\nmax_ = -1\nfor comb in combs:\n    if sum(comb[i][2] for i in range(len(comb))) > max_:\n        max_ = sum(comb[i][2] for i in range(len(comb)))\nprint(max_)\n"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == ''\nassert solution('2 1 3') == ''\nassert solution('1 2 3') == '2'\nassert solution('2 1 3') == '3'\n"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3 6\\n2 5 8\\n3 3 5\\n5 3 6') == '13'\n\"\"\"\n\nclass Solution:\n    def maxPriority(self, stdin):\n        n = int(stdin)\n        arr = []\n        for _ in range(n):\n            a, b, c = map(int, input().split())\n            arr.append((a, b, c))\n\n        arr.sort()\n        dp = [0] * (len(arr) + 1)\n        for i in range(len(arr)):\n            idx = i + 1\n            dp[idx] = dp[idx - 1] + arr[idx - 1][2]\n            for j in range(i):\n                if arr[idx][0] >= arr[j][1] and arr[idx][1] >= arr[j][0]:\n                    dp[idx] = max(dp[idx], dp[j] + arr[idx][2])\n        return dp[len(arr)]\n\nassert Solution().maxPriority('4\\n1 3 6\\n2 5 8\\n3 3 5\\n5 3 6') == '13'"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 6\\n2 5 8\\n3 3 5\\n5 3 6') == '13'\n\n\"\"\"\n\nimport math\nimport sys\nimport numpy as np"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 6\\n2 5 8\\n3 3 5\\n5 3 6\") == '13'\n\"\"\"\nimport sys"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open('input.txt').read()) == '13'\n'''\n\nn = int(input())\nfor _ in range(n):\n    start, duration, priority = map(int, input().split())\n    print(start + duration * priority)\n"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10.0 20.123456\\n1\\n13.141593 20.123456') == '3.141593'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10.0 20.123456\\n1\\n13.141593 20.123456') == '3.141593'\n\"\"\"\nfrom typing import List, Tuple\nimport math\n\n\nclass Node:\n    def __init__(self, x: float, y: float):\n        self.x = x\n        self.y = y\n        self.children: List[Node] = []\n\n    def __repr__(self):\n        return f'({self.x}, {self.y})'\n"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10.1234567 20.1234567\") == '3.1234567'\nassert solution(\"1.1234567 20.1234567\") == '1.1234567'\nassert solution(\"1.1234567 20.1234567\\n5\") == '1.1234567'\nassert solution(\"1.1234567 20.1234567\\n0\") == '1.1234567'\nassert solution(\"1.1234567 20.1234567\\n0\\n1.1234567 20.1234567\") == '0.1234567'\n"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10.000000 20.123456\\n1\\n13.141593 20.123456\") == \"3.141593\"\nassert solution(\"10.000000 20.123456\\n2\\n3.141593 20.123456\\n4\\n5.141593 20.123456\") == \"3.141593\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '1.000000'\n\"\"\"\n\nimport math\nimport re\nimport sys"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10.000000 20.123456\\n1\\n13.141593 20.123456\") == '3.141593'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10.000000 20.123456\\n1\\n13.141593 20.123456\") == '3.141593'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10.000000 20.123456\\n1\\n13.141593 20.123456\") == \"3.141593\"\n\nimport numpy as np\n"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10.000000 20.123456\\n1\\n13.141593 20.123456') == '3.141593'\nprint(solution(stdin.strip()))\n\"\"\"\n\nfrom math import sqrt, pow\n\nroost, dead_hens = (float(x) for x in input().split())\nn = int(input())\nhems = {float(x) for x in input().split()}\n\nfar = 1000\nfor hen in hems:\n    hems.add(hen + far)\n    far *= 1000\nhems.add(roost)\nhems.add(roost + far)\n\ntot = far * 2\nfor hen in hems:\n    tot -= sqrt((roost - hen) ** 2 + (roost - hen - far) ** 2)\nprint(tot)\n"
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10.000000 20.123456\\n1\\n13.141593 20.123456') == '3.141593'\nassert solution('10.000000 20.123456\\n1\\n5.123456 10.123456') == '7.123456'\n\n\"\"\""
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4 4\\n2\") == \"2.13333333333333\"\nassert solution(\"3\\n3 3\\n2\") == \"impossible\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n4 4\\n2') == '2.13333333333333'\nassert solution('2\\n3 2\\n') == 'impossible'\nassert solution('1\\n2\\n') == 'impossible'\n\n\"\"\"\n\nfrom itertools import combinations\nfrom typing import List, Tuple"
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'impossible'\n\n\"\"\""
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n4 4\\n2') == '2.13333333333333'\n\nassert solution('3\\n4 4\\n2\\n0\\n1\\n0\\n1') == '2.13333333333333'\n\nassert solution('3\\n4 4\\n2\\n0\\n1\\n0\\n1\\n0\\n1') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n4 4\\n2') == '2.13333333333333'\nassert solution('2\\n1\\n1') == '1.0'\nassert solution('2\\n4\\n3') == 'impossible'\n\n\"\"\"\n\nn = int(stdin.readline())\nd = {}\nfor _ in range(n - 1):\n    x = [int(i) for i in stdin.readline().split()]\n    for i in range(len(x)):\n        for j in range(i + 1, len(x)):\n            d[(x[i], x[j])] = x[j] - x[i]\n        d[(x[i], x[i])] = 0\n\nx = [int(i) for i in stdin.readline().split()]\ny = 0\nfor i in range(len(x) - 1):\n    for j in range(i + 1, len(x)):\n        y += d[(x[i], x[j])]"
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4 4\\n2\") == \"2.13333333333333\"\n\"\"\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n2') == '1'\nassert solution('2\\n3\\n4') == '2'\nassert solution('1\\n2\\n3\\n4') == '1.5'\n"
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n4 4\\n2') == '2.13333333333333'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2\\n1') == '2.13333333333333'\n\n\"\"\"\n\nimport math\nimport sys\n\n\nclass Solution:\n    def solve(self, inputs: str) -> str:\n        n = int(inputs[0])\n        result = 0\n        matrix = []\n        for i in range(1, n):\n            matrix.append(list(map(int, inputs[i].split())))\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                result += matrix[i][j]\n        return str(round(result / (n - 1), 9))\n"
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n2\\n\") == \"2.13333333333333\"\nprint(solution(input()))\n"
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7') == '18'\n\n\"\"\""
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7') == '18'\nassert solution('13') == '48'\nassert solution('10000') == '14918'\nassert solution('1') == '0'\nassert solution('3') == '3'\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '0'\nassert solution('7') == '18'\n\"\"\"\n\nfrom math import sqrt, floor"
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"18\""
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7') == '18'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\") == \"18\"\n\n\"\"\""
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"18\"\n\"\"\""
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\") == \"18\"\nassert solution(\"10000\") == \"7722\"\nassert solution(\"10**6\") == \"169964\n"
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7') == '18'\nprint(solution('7'))\n"
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(12) == 8\nassert solution(10) == 6\n\"\"\""
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\") == '3'\n\"\"\"\n\nnum_of_students = int(input())\n\nstudents_dict = {}\n\nfor _ in range(num_of_students):\n    students_list = input().split()\n    students_dict[students_list[0]] = students_list[1:]\n\nmax_students = 0\n\nfor i in range(num_of_students):\n    for j in range(i + 1, num_of_students):\n        for k in range(j + 1, num_of_students):\n            if not (students_dict[students_list[i]][1] == students_dict[students_list[j]][1] or\n                    students_dict[students_list[i]][2] == students_dict[students_list[j]][2] or\n                    students_dict[students_list[i]][3] == students_dict[students_list[j]][3]):\n                continue\n            if abs(int(students_dict[students_list[i]][0]) - int(students_dict[students_list[j]][0])) > 40:\n                continue\n            max_students += 1\n            break\n\nprint(max_students)\n"
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"35 M classicism programming\") == 3\nassert solution(\"0 M baroque skiing\") == 3\nassert solution(\"43 M baroque chess\") == 3\nassert solution(\"30 F baroque soccer\") == 0\n\"\"\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"35M classicism programming\\n0M baroque skiing\\n43M baroque chess\\n30F baroque soccer\") == \"3\"\n\nimport re"
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\") == 3\n\"\"\""
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n35 F classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer') == '3'\nassert solution('3\\n70 F classicism programming\\n70 F classicism programming\\n70 F classicism programming') == '3'\nassert solution('4\\n70 F classicism programming\\n70 F classicism programming\\n70 F classicism programming\\n70 F classicism programming') == '2'\nassert solution('4\\n70 F classicism programming\\n70 F classicism programming\\n70 F classicism programming\\n70 F classicism programming\\n70 F classicism programming') == '2'\nassert solution('4\\n70 F classicism programming\\n70 F classicism programming\\n70 F classicism programming\\n70 F classicism programming\\n70 F classicism programming\\n70 F classicism programming') == '2'\n\n\"\"\""
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\") == \"3\"\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\") == \"3\"\n\n\"\"\"\nimport collections"
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n35 F classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"35M classicism programming\") == \"3\"\nassert solution(\"0M baroque skiing\") == \"3\"\nassert solution(\"43M baroque chess\") == \"3\"\nassert solution(\"30F baroque soccer\") == \"0\"\n\"\"\"\n\nimport math\nfrom typing import List\n\nlines: List[str] = [line.strip() for line in open(\"test_input.txt\", \"r\") if line.strip()]\n\nstdin = \" \".join(lines)\n\ntest_input_count = int(stdin.split()[0])\ntest_input_lines = stdin.split(\"\\n\")[1:]\n"
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"2\\n1\\n2\\n2\"\nassert solution(\"4\\na 1\\na 2\\nb 2\\nb 4\") == \"1\\n1\\n2\"\nassert solution(\"1\\na 0\") == \"0\"\nassert solution(\"2\\nb 0\\nb 1\\na 1\\n\") == \"0\\n0\\n1\"\n\n\"\"\"\n\nn = int(input())\nstack = []\nd = {}\n\nfor i in range(n):\n    s = input().split()\n    stack.append(int(s[1]))\n    d[int(s[1])] = int(s[2])\n\nfor i in range(n):\n    print(d[stack[-1]] if len(stack) > 0 else 0)\n    stack.pop()\n"
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"2\\n1\\n2\\n\"\nassert solution(\"1\\na 0\") == \"1\\n\"\nassert solution(\"2\\nb 1\") == \"1\\n\"\nassert solution(\"3\\nc 0 1\") == \"2\\n\"\n\"\"\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\\n'\n) == '2\\n1\\n2\\n'\n"
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\na 0\\na 1\\nb 2\\nc 2 3\") == \"2\\n1\\n2\"\nassert solution(\"1 2\\na 0\\na 1\\nb 2\\nc 2 3\") == \"2\\n1\\n2\"\nassert solution(\"1 2\\na 0\\na 1\\nb 2\\nc 2 3\") == \"2\\n1\\n2\"\n\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter\nfrom math import inf\n\n\nclass Solution:\n    def __init__(self):\n        self._stack = []\n        self._prev_stack = []\n        self._min_stack = []\n\n    def process_operation(self, operation: str) -> None:\n        # print(operation)\n        op, *args = operation.split()\n        if op == \"a\":\n            self._prev_stack.append(self._stack[-1])\n            self._stack.append(int(args[0]))\n        elif op == \"b\":\n            self._stack.pop()\n        elif op == \"c\":\n            num_counts = Counter(self._prev_stack[::-1])\n            num_counts[self._stack[-1]] -= 1\n            self._stack.append(num_counts.most_common(1)[0][0])\n\n    def solution(self, stdin: str) -> str:\n        for line in stdin.splitlines():\n            self.process_operation(line)\n        return \"\\n\".join(map(str, self._stack))\n"
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5\na 0\na 1\nb 2\nc 2 3\nb 4\n\"\"\") == \"2\\n1\\n2\\n2\\n\"\n\"\"\"\n\n\"\"\"\n\nfrom collections import Counter\n\nfrom utils import read_input, p1, p2, test\n"
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"2\\n1\\n2\\n2\"\nassert solution(\"7\\na 0\\na 1\\nb 0\\nb 1\\nb 1\\nb 2\\na 2\\nb 2\\nb 2\") == \"0\\n1\\n0\\n2\\n0\\n1\\n0\\n1\"\nassert solution(\"8\\na 0\\na 1\\nb 0\\nb 1\\nb 1\\nb 2\\na 0\\nb 2\\nb 2\\nb 3\\n\") == \"0\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n0\"\n\nprint(solution(\"7\\na 0\\na 1\\nb 0\\nb 1\\nb 1\\nb 2\\a 2\\b 2\\b 2\"))\nprint(solution(\"8\\na 0\\na 1\\nb 0\\nb 1\\nb 1\\nb 2\\a 0\\b 2\\b 2\\b 3\"))\n"
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == '2\\n1\\n2\\n2'\n\"\"\""
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"2\\n1\\n2\\n\"\n\nSample Input:\n10\na 0\na 1\na 2\nb 3\nc 3 1\nd 2 1\nb 5\na 6\nb 7\nc 8 4\nc 9 2\nb 10\nSample Output:\n5\n1\n1\n1\n1\n\"\"\"\n\nimport sys\nimport os\nfrom collections import defaultdict\nimport collections\nfrom typing import Dict, List, Tuple, Set, Deque\nimport functools\nimport heapq\nimport itertools\nimport math\n\n\nclass Solution:\n    def solve(self, stdin):\n        \"\"\"\n        >>> solution = Solution()\n        >>> solution.solve('5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4')\n        2\n        1\n        2\n        1\n        \"\"\"\n        for step in range(int(stdin)):\n            stack = collections.defaultdict(list)\n            for operation, num in [line.split() for line in stdin.splitlines()[step + 1:]]:\n                if operation[0] == 'b':\n                    stack[int(operation[1])].pop()\n                elif operation[0] == 'a':\n                    stack[int(operation[1])].append(int(num))\n                elif operation[0] == 'c':\n                    stack[int(operation[1])] += stack[int(operation[2])]\n            print(len(stack[0]))\n            for i in range(int(operation[1])):\n                print(len(stack[int(operation[1])]))\n"
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"2\\n1\\n2\\n2\"\nassert solution(\"a 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"2\\n1\\n2\\n2\"\nassert solution(\"a 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"2\\n1\\n2\\n2\"\nassert solution(\"a 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"2\\n1\\n2\\n2\"\nassert solution(\"a 0\\na 1\\nb 2\\nb 3\\ncc 3 4\") == \"2\\n1\\n2\\n2\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n5\na 0\na 1\nb 2\nc 2 3\nb 4\n'''.strip()) == '''\n2\n1\n2\n2\n'''.strip()\n\n\"\"\"\nfrom collections import defaultdict\nfrom typing import List, Dict\n\nfrom icontract import require, ensure, DBC\n\n\nclass Solution:\n    def __init__(self) -> None:\n        self.stacks: Dict[int, List[int]] = defaultdict(list)\n\n    @require(lambda l: 0 < l < 300_000)\n    @require(lambda v: v >= 0)\n    def put_top(self, stack_id: int, value: int) -> None:\n        self.stacks[stack_id].append(value)\n\n    @require(lambda l: 0 < l < 300_000)\n    @require(lambda v: v >= 0)\n    def remove_top(self, stack_id: int) -> int:\n        return self.stacks[stack_id].pop()\n\n    @require(lambda l: 0 < l < 300_000)\n    @require(lambda v: v >= 0)\n    def stack_of(self, stack_id: int) -> int:\n        return len(self.stacks[stack_id])\n\n\nclass Solution2(DBC):\n    @require(lambda num: 0 <= num < 300_000)\n    @require(lambda num: 0 <= num < 300_000)\n    def execute(self, num: int) -> None:\n        self.solution.put_top(0, num)\n\n    @require(lambda num: 0 <= num < 300_000)\n    def remove_top(self) -> int:\n        return self.solution.remove_top(0)\n\n    @require(lambda num: 0 <= num < 300_000)\n    def stack_of(self, num: int) -> int:\n        return self.solution.stack_of(0)\n\n\nimport re\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_example(self) -> None:\n        s = Solution()\n        s.put_top(0, 0)\n        s.put_top(0, 1)\n        s.execute(2)\n        self.assertEqual(2, s.remove_top(0))\n        s.execute(3)\n        self.assertEqual(1, s.remove_top(0))\n        self.assertEqual(2, s.remove_top(0))\n        self.assertEqual(1, s.stack_of(0))\n"
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1 1\n10 10\n0 0 0\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 2\n5 4\n0 0 0\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 1\n1 1\n0 0 0\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n10 1\n1 1\n0 0 0\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 1\n1 1\n0 0 0\n\"\"\") == \"1\""
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 2 3 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == '5'\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"15 1\\n67 99\") == \"1\"\nassert solution(\"5 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\") == \"3\"\nassert solution(\"5 1\\n7 7\\n7 7\\n7 7\\n7 7\") == \"1\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 1\\n2 1\\n2 1\\n2 1\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n1 1\\n\") == \"1\"\nassert solution(\"3 3\\n1 1 2\\n1 1 3\\n2 1 3\\n\") == \"3\"\nassert solution(\"3 2\\n1 1 2\\n1 1 3\\n2 1 3\\n\") == \"2\"\nassert solution(\"2 3\\n1 1 2\\n1 1 3\\n2 1 3\\n\") == \"3\"\nassert solution(\"2 2\\n1 1 2\\n1 1 3\\n2 1 3\\n\") == \"1\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\") == \"6\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"4 5\") == \"0\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n5 2\n4 1 2 3 4\n1 1 2 3 4\n2 2 2 2 2\n2 2 2 2 3\n1 2 1 3 1\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"\n5 1\n5 4 1 2 3\n1 1 2 3 4\n2 2 2 2 2\n2 2 2 2 3\n1 2 1 3 1\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n5 1\n1 2 1 3 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n\"\"\"\n) == \"5\"\n\nassert solution(\n\"\"\"\n5 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"\n6 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n\"\"\"\n) == \"0\""
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15 5\\n1 3 2 1 4\\n2 3 2 5 6\\n3 2 3 1 5\\n5 2 2 3 4 6\\n1 3 3 4 3\\n3 5 5 6 6\\n2 2 3 4 3\\n3 1 1 4 2\\n5 2 2 3 4 6\\n1 3 3 4 3\\n2 1 1 4 2\\n2 1 1 5 2\\n2 1 1 6 2\\n1 4 4 4 4\\n3 2 2 3 3\\n4 2 2 4 4\\n4 2 2 5 4\\n5 2 2 4 5\\n5 2 2 3 5\\n4 4 4 4 4\\n3 2 2 3 3\\n4 2 2 4 3\\n3 3 3 3 3\\n3 3 3 4 3\\n2 1 1 5 2\\n4 2 2 4 5\\n5 2 2 3 5\\n5 2 2 4 5\\n2 2 2 2 2\\n3 2 2 3 4\\n2 2 2 2 2\\n2 2 2 2 2\\n4 2 2 5 4\\n1 2 2 3 2\\n3 3 3 3 3\\n2 2 2 2 2\\n3 2 2 4 3\\n4 4 4 4 4\\n3 2 2 3 3\\n4 2 2 5 3\\n2 2 2 2 2\\n3 2 2 3 4\\n5 2 2 4 5\\n4 4 4 4 4\\n1 2 2 3 2\\n2 2 2 2 2\\n5 2 2 4 5\\n1 2 2 3 2\\n4 2 2 5 4\\n1 3 3 4 3\\n3 5 5 6 6\\n2 2 3 4 3\\n3 1 1 4 2\\n5 2 2 3 4 6\\n1 3 3 4 3\\n2 1 1 4 2\\n2 1 1 5 2\\n2 1 1 6 2\\n1 4 4 4 4\\n3 2 2 3 3\\n4 2 2 4 3\\n3 3 3 3 3\\n4 2 2 5 3\\n5 2 2 4 5\\n5 2 2 3 5\\n4 4 4 4 4\\n3 2 2 3 3\\n4 2 2 4 3\\n3 3 3 3 3\\n3 3 3 4 3\\n2 1 1 5 2\\n4 2 2 5 4\\n5 2 2 3 5\\n5 2 2 4 5\\n2 2 2 2 2\\n3 2 2 3 4\\n2 2 2 2 2\\n5 2 2 4 5\\n1 2 2 3 2\\n3 3 3 3 3\\n2 2 2 2 2\\n3 2 2 4 3\\n4 4 4 4 4\\n3 2 2 3 3\\n4 2 2 5 3\\n2 2 2 2 2\\n3 2 2 3 4\\n5 2 2 4 5\\n1 3 3 4 3\\n3 5 5 6 6\\n2 2 3 4 3\\n3 1 1 4 2\\n5 2 2 3 4 6\\n1 3 3 4 3\\n2 1 1 5 2\\n4 2 2 5 4\\n1 2 2 3 2\\n3 3 3 3 3\\n4 2 2 5 3\\n5 2 2 4 5\\n5 2 2 3 5\\n4 4 4 4 4\\n3 2 2 3 3\\n4 2 2 5 3\\n2 2 2 2 2\\n3 2 2 3 4\\n5 2 2 4 5\\n4 4 4 4 4\\n1 2 2 3 2\\n2 2 2 2 2\\n5 2 2 4 5\\n1 2 2 3 2\\n4 2 2 5 4\\n1 3 3 4 3\\n3 5 5 6 6\\n2 2 3 4 3\\n3 1 1 4 2\\n5 2 2 3 4 6\\n1 3 3 4 3\\n2 1 1 5 2\\n4 2 2 5 4\\n1 2 2 3 2\\n3 3 3 3 3\\n4 2 2 5 3\\n5 2 2 4 5\\n5 2 2 3 5\\n4 4 4 4 4\\n3 2 2 3 3\\n4 2 2 5 3\\n2 2 2 2 2\\n3 2 2 3 4\\n5 2 2 4 5\\n1 3 3 4 3\\n3 5 5 6 6\\n2 2 3 4 3\\n3 1 1 4 2\\n5 2 2 3 4 6\\n1 3 3 4 3\\n2 1 1 5 2\\n4 2 2 5 4\\n1 2 2 3 2\\n3 3 3 3 3\\n4 2 2 5 3\\n5 2 2 4 5\\n5 2 2 3 5\\n4 4 4 4 4\\n3 2 2 3 3\\n4 2 2 5 3\\n2 2 2 2 2\\n3 2 2 3 4\\n5 2 2 4 5\\n1 3 3 4 3\\n3 5 5 6 6\\n2 2 3 4 3\\n3 1 1 4 2\\n5 2 2 3 4 6\\n1 3 3 4 3\\n2 1 1 5 2\\n4 2 2 5 4\\n1 2 2 3 2\\n3 3 3 3 3\\n4 2 2 5 3\\n5 2 2 4 5\\n5 2 2 3 5\\n4 4 4 4 4\\n3 2 2 3 3\\n4 2 2 5 3\\n2 2 2 2 2\\n3 2 2 3 4\\n5 2 2 4 5\\n1 3 3 4 3\\n3 5 5 6 6\\n2 2 3 4 3\\n3 1 1 4 2\\n5 2 2 3 4 6\\n1 3 3 4 3\\n2 1 1 5 2\\n4 2 2 5 4\\n1 2 2 3 2\\n3 3 3 3 3\\n4 2 2 5 3\\n5 2 2 4 5\\n5 2 2 3 5\\n4 4 4 4 4\\n3 2 2 3 3\\n4 2 2 5 3\\n2 2 2 2 2\\n3 2 2 3 4\\n5 2 2 4 5\\n1 3 3 4 3\\n3 5 5 6 6\\n2 2 3 4 3\\n3 1 1 4 2\\n5 2 2 3 4 6\\n1 3 3 4 3\\n2 1 1 5 2\\n4 2 2 5 4\\"
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('12\\n3\\n2\\n2\\n2') == 1\nassert solution('1\\n2\\n1\\n2\\n1') == 0\nassert solution('1\\n2\\n2\\n1\\n1') == 0\nassert solution('1\\n2\\n2\\n2\\n1') == 1\n"
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == 4\n\n\"\"\""
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '4'\nassert solution('5 10\\n1 2\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\\n4 6\\n5 6\\n5 7\\n6 7\\n7 8\\n7 9\\n8 9\\n9 10') == '0'\n"
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 5\n1 2\n1 3\n1 4\n2 3\n2 4''') == '4'\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom math import factorial\nfrom typing import List, DefaultDict, Tuple\n"
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == \"4\"\n\n\"\"\"\n\nfrom sys import stdin\nfrom math import factorial"
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '4'\nassert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('aa') == 'a'\n\"\"\""
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '4'\n\n\"\"\""
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '4'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == 4\n\n\"\"\"\n\nimport sys\n\nclass Graph():\n    def __init__(self, num_vertices):\n        self.num_vertices = num_vertices\n        self.edges = {}\n\n    def add_edge(self, u, v):\n        if u in self.edges:\n            self.edges[u].append(v)\n        else:\n            self.edges[u] = [v]\n\n    def remove_edge(self, u, v):\n        if u in self.edges:\n            self.edges[u].remove(v)\n\n    def all_edges(self):\n        for u, v in self.edges.items():\n            for i in v:\n                yield (u, i)\n\n    def all_vertices(self):\n        return self.edges.keys()"
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n2 4\"\nassert solution(\"4\\n1 2\\n3 4\\n3 2\") == \"1\\n3 4\\n1 4\"\n\"\"\""
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n4\n1 2\n2 3\n3 4\n\"\"\"\n) == \"2\\n3 4\\n2 4\"\n\nassert solution(\n\"\"\"\n4\n1 3\n2 4\n3 4\n\"\"\"\n) == \"2\\n4 4\\n2 4\"\n\nassert solution(\n\"\"\"\n4\n1 2\n2 3\n3 4\n\"\"\"\n) == \"3\\n3 4\\n2 4\"\n\nassert solution(\n\"\"\"\n4\n1 2\n1 2\n2 3\n3 4\n\"\"\"\n) == \"0\\n0\\n0\"\n\nassert solution(\n\"\"\"\n2\n1 1\n\"\"\"\n) == \"0\\n0\""
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n2 4\"\nassert solution(\"3\\n1 2\\n2 3\") == \"2\\n3 1\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n2 4\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n2 4\"\nassert solution(\"4\\n1 2\\n3 2\\n2 3\\n4 4\") == \"0\\n1 2\\n1 2\\n1 2\\n1 2\"\nassert solution(\"3\\n1 2\\n2 3\") == \"1\\n2 3\\n2 3\"\nassert solution(\"3\\n2 3\\n1 2\") == \"1\\n2 3\\n2 3\"\n\"\"\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"2\\n3 4\\n2 4\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"2\\n3 4\\n2 4\"\nassert solution(\"4\\n3 2\\n4 1\\n1 3\\n\") == \"1\\n3 4\\n2 4\"\n\n\"\"\"\n\n\"\"\"\n\uc810\ud654\uc2dd : \ubc30\uc5f4\uc758 \uc6d0\uc18c\uc758 \uac12\uc740 i\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ud3ec\ud568\ud558\ub294 \uc9d1\ud569\uacfc i+1\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ud3ec\ud568\ud558\ub294 \uc9d1\ud569 \uc911 \ucd5c\uc18c\uc778\uac70\n\ub450 \uc9d1\ud569\uc744 \ube44\uad50\ud574\uc11c \ud070 \uc9d1\ud569\uc744 \ubc14\uafb8\ub294\uac8c \ucd5c\uc18c\uc778\uac70 \n\ubc18\ubcf5\ubb38\uc744 \ub3cc\uba74\uc11c \ubaa8\ub4e0 \uc6d0\uc18c\ub97c \ube44\uad50\ud574\uc11c \ucd5c\uc18c\uac12\uc744 \ucc3e\ub294\ub2e4 \n\ubc18\ubcf5\ubb38 \uc548\uc5d0\uc11c \ud55c\ubc88\ub3c4 \ubc14\uafb8\uc9c0 \uc54a\uc740 \uc6d0\uc18c\ub97c \ucc3e\uc73c\uba74 \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(n)\n\uc911\ubcf5\ub41c \uc6d0\uc18c\ub97c \ucc3e\uc9c0 \ubabb\ud558\uba74 \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(n)\n\n\"\"\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n2 4\"\nassert solution(\"5\\n1 2\\n2 3\\n4 5\\n1 5\\n1 3\\n1 4\") == \"4\\n3 4\\n2 4\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2\\n3 4\\n2 4'"
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n2 4\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\n''') == '2\\n3 4\\n2 4'\nprint('Test passed')\n\n-----Explanation-----\nThere are 2 optimal ways to change the flights:\n\nCancel the flight from 1 to 2, add a new flight from 2 to 3.\nCancel the flight from 2 to 3, add a new flight from 1 to 4.\nThe minimum number of flight changes is 2.\n\nFor n = 4, the expected output is:\n2\n3 4\n2 4\n\nFor n = 5, the expected output is:\n2\n3 4\n2 5\n2 4\n3 4\n\nFor n = 6, the expected output is:\n3\n4 5\n3 5\n2 4\n2 5\n3 4\n\nFor n = 7, the expected output is:\n3\n4 5\n3 5\n2 4\n2 5\n3 4\n\nFor n = 8, the expected output is:\n2\n3 4\n3 4\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 9, the expected output is:\n2\n3 4\n3 4\n2 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 10, the expected output is:\n3\n4 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 11, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 12, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 13, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 14, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 15, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 16, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 17, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 18, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 19, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 20, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 21, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 22, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 23, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 24, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 25, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 26, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 27, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 28, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 29, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\nFor n = 30, the expected output is:\n3\n4 5\n3 5\n2 4\n3 5\n2 5\n3 4\n3 5\n2 4\n2 5\n3 4\n3 5\n2 4\n2 5\n\n-----Question 2-----\nGiven a positive integer n, find the value of d < n such that n + d + d^2 +... + d^n is minimized, and d^n is maximized.\n\n-----Example-----\nn = 10\n\n10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 = 619\n10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 = 619\n10 + 11 + 12 + 13 + 14 + 16 + 17 + 18 + 19 = 619\n10 + 11 + 12 + 13 + 16 + 17 + 18 + 19 = 6"
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 1\\n1 2\\n5 3\\n3 1\\n2 1\\n4 1\\n1 2\\n4 1\\n1 1\\n1 4\\n') == '20'\n"
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 3\\n2 1\\n3 5\\n7 2\\n\") == \"5\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n1 3\\n2 1\\n3 5\\n7 2') == '5'\n\"\"\"\n\nfrom itertools import chain\n"
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 2\\n3 5') == '5'\n\"\"\"\n\nn, m = [int(c) for c in stdin.readline().split()]\nfor _ in range(n):\n    p, d = [int(c) for c in stdin.readline().split()]\n    x = [p]\n    y = [d]\n    for _ in range(m):\n        p, d = [int(c) for c in stdin.readline().split()]\n        x.append(p)\n        y.append(d)\n    x.append(0)\n    y.append(0)\n\nimport functools\n\n@functools.lru_cache(None)\n"
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 3\\n2 1\\n3 5\\n7 2') == '5'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3\\n2 1\\n3 5\\n7 2\\n') == '5'\n\n'''"
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 3\\n2 1\\n3 5\\n7 2\\n') == '5'\nassert solution('4 3\\n3 10\\n2 2\\n4 5\\n6 4\\n') == '0'\nassert solution('4 3\\n3 10\\n2 2\\n4 5\\n6 4\\n') == '0'\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn this problem you will be given a set of constraints and will be required to find the minimal subset of the constraints which will allow you to satisfy them.\n\nGiven n constraints of the form A =/= B, where A and B are both n-tuples of integers, determine if a solution exists which satisfies all constraints.\n\nIf one solution exists, find it.\n\nExample\n\nFor\n\nconstraints = [[1, 2, 3], [1, 4, 5], [2, 3, 5], [2, 5, 4], [3, 4, 5], [3, 5, 6]]\nthe output should be\nallDifferentConstraintSatisfaction(constraints) = [1, 2, 3, 4, 5, 6].\n\nHere's how the solution is obtained:\n\n[1, 2, 3] satisfies all constraints, so it is the only solution.\n[1, 4, 5] does not satisfy [2, 3, 5], so it is discarded.\n[2, 3, 5] does not satisfy [2, 5, 4] (it has element 2 twice), so it is discarded.\n[2, 5, 4] does not satisfy [3, 4, 5] (it has element 3 twice), so it is discarded.\n[3, 4, 5] does not satisfy [3, 5, 6] (it has element 5 twice), so it is discarded.\n[1, 2, 3] is left intact.\n\nThus, the only solution is [1, 2, 3, 4, 5, 6].\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.array.integer constraints\n\nAn array of n-tuples of integers, where the n-th element of the tuple is the first variable of the n-th constraint. It is guaranteed that no constraint is a subset of another constraint.\n\nGuaranteed constraints:\n1 \u2264 constraints.length \u2264 100\n1 \u2264 constraints[i].length \u2264 3\n1 \u2264 constraints[i][j] \u2264 10^9 for 0 \u2264 i < constraints.length and 0 \u2264 j < constraints[i].length.\n\n[output] array.integer\n\nAn array of integers, where the i-th element is the second variable of the i-th constraint.\n\"\"\""
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 2\n1 3\n2 1\n3 5\n7 2''') == '5'\nassert solution('''2 2\n1 3\n2 1\n3 5\n7 2\n3 6\n3 7\n5 8''') == '0'\n'''\n\nimport sys\nimport bisect"
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 3\\n2 1\\n3 5\\n7 2\") == \"5\"\n\"\"\""
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 2\n1 3\n2 1\n3 5\n7 2''') == '5'\nassert solution('''2 2\n1 3\n2 1\n3 5\n7 2\n1 3\n2 1\n3 5\n7 2\n1 3\n2 1\n3 5\n7 2''') == '5'\nassert solution('''2 2\n1 3\n2 1\n3 5\n7 2\n1 3\n2 1\n3 5\n7 2\n1 3\n2 1\n3 5\n7 2\n1 3\n2 1\n3 5\n7 2\n1 3\n2 1\n3 5\n7 2\n1 3\n2 1\n3 5\n7 2\n1 3\n2 1\n3 5\n7 2''') == '0'\n"
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == 2\n\"\"\"\n\n\n\"\"\"\n\u89e3\u984c\u601d\u8def\n\u4f7f\u7528KDTree\u4f86\u627e\u51fa\u8ddd\u96e2\u66fc\u54c8\u9813\u8ddd\u96e2\u6700\u8fd1\u7684post\uff0c\u5176\u4e2d\u512a\u5148\u63a1\u7528\u8ddd\u96e2\u4f86\u9078\u64c7post\n\"\"\"\nimport sys\nimport math\nimport heapq\nfrom collections import Counter, deque\nfrom typing import List\nfrom dataclasses import dataclass\n\n\n@dataclass(order=True)\nclass Point:\n    x: int\n    y: int\n    distance: int\n\n\nclass KDTree:\n    def __init__(self, points):\n        self.points = points\n        self.dimension = len(points[0])\n        self.kd = [None] * len(points)\n\n        def _build_tree(points, i):\n            if not points:\n                return\n            if len(points) == 1:\n                self.kd[i] = points\n                return\n            dimension = self.dimension\n            _partition_x = [\n                x[i]\n                for x in points\n            ]\n            median_x = sorted(_partition_x)[len(points) // 2]\n            left, right = [], []\n            for x in points:\n                if x[i] < median_x:\n                    left.append(x)\n                else:\n                    right.append(x)\n            _build_tree(left, i + 1)\n            _build_tree(right, i + 1)\n            self.kd[i] = left\n            self.kd[i + 1] = right\n\n        _build_tree(points, 0)\n\n    def nearest_neighbor(self, point: Point):\n        dim = self.dimension\n        i = 0\n        kd_node = self.kd[i]\n        distance = float('inf')\n        while kd_node is not None:\n            distance_candidate = math.sqrt(sum(map(lambda x, y: (x - y) ** 2, point, kd_node)))\n            if distance_candidate < distance:\n                distance = distance_candidate\n                nearest_point = kd_node\n            if distance_candidate < 1e-5:\n                break\n            if point[i] < kd_node[i]:\n                kd_node = self.kd[i + 1]\n                i += 1\n            else:\n                kd_node = self.kd[i]\n        return nearest_point, distance\n"
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\") == \"2\"\n\nassert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\") == \"2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0') == 2\n\"\"\"\n\nimport sys\nimport math\nfrom math import *"
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0') == '2'\nassert solution('4 3 3\\n1 1\\n2 2\\n1 3\\n3 3\\n2 1\\n3 0') == '3'\nassert solution('5 3 3\\n1 1\\n3 2\\n1 3\\n3 3\\n2 1\\n3 0') == '1'\nassert solution('3 2 4\\n0 1\\n0 3\\n3 1\\n3 3\\n0 2\\n1 2\\n2 3\\n1 0') == '4'\nassert solution('5 2 4\\n0 2\\n0 4\\n2 4\\n2 0\\n2 1\\n4 2\\n0 2\\n3 2\\n1 2\\n3 2\\n1 3\\n2 3\\n3 1\\n2 3\\n1 3\\n3 0\\n2 1\\n3 0') == '2'"
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(len(find_points_of_interest(stdin)))"
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 5\\n2 0\\n0 1\\n0 1\\n1 1\\n1 3') == '2'\nassert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4') == '1'\nassert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4') == '1'\nassert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4') == '1'\nassert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4') == '1'\n\n'''\nfrom __future__ import annotations\n\nfrom collections import defaultdict\nimport unittest\n\nclass TestWallModel(unittest.TestCase):\n    def test_example_1(self) -> None:\n        "
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3') == '2'\n\"\"\"\n\nfrom typing import List\n\nimport sys\nimport os\nimport io\nimport time\nimport re"
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0''') == 2\n\n'''\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\n3 2 3\n0 0\n1 1\n0 0\n1 3\n1 4\n0 0\n3 0\n\n6 4 3\n3 0\n2 0\n0 0\n0 2\n0 4\n0 0\n0 3\n3 0\n\n5 5 3\n3 0\n2 0\n0 0\n0 2\n0 4\n0 0\n0 3\n3 0\n\n6 5 3\n3 0\n2 0\n0 0\n0 2\n0 4\n0 0\n0 3\n3 0\n\n3 5 3\n3 0\n2 0\n0 0\n0 2\n0 4\n0 0\n0 3\n3 0\n\n3 5 3\n0 0\n1 1\n0 0\n1 3\n1 4\n0 0\n3 0\n\n3 5 3\n0 0\n1 1\n0 0\n1 3\n1 4\n0 0\n3 0\n\n6 5 3\n0 0\n1 1\n0 0\n1 3\n1 4\n0 0\n3 0\n\n5 5 3\n0 0\n1 1\n0 0\n1 3\n1 4\n0 0\n3 0\n\n6 5 3\n0 0\n1 1\n0 0\n1 3\n1 4\n0 0\n3 0\n'''"
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\") == 2\nassert solution(\"3 3 3\\n0 0\\n0 3\\n1 4\\n3 0\") == 2"
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0') == '2'\n"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n3 C\\n2 C\\n1 C\") == 'GHOST'\nassert solution(\"7 5\\n3 C\\n2 C\\n1 C\\n4 C\\n5 C\") == 'GHOST'\nassert solution(\"7 10\\n3 C\\n2 C\\n1 C\\n4 C\\n5 C\\n6 C\\n7 C\\n8 C\\n9 C\\n10 C\") == 'GHOST'\nassert solution(\"7 10\\n3 W\\n2 C\\n1 C\\n4 C\\n5 C\\n6 C\\n7 C\\n8 C\\n9 C\\n10 W\") == 'GHOST'\nassert solution(\"7 10\\n3 W\\n2 C\\n1 C\\n4 C\\n5 W\\n6 C\\n7 C\\n8 C\\n9 C\\n10 W\") == 'GHOST'\n"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n3 C\\n2 C\\n1 C') == 'GHOST'\nassert solution('5 5\\n1 C\\n3 C\\n1 C\\n2 C\\n2 C') == 'SAFE'\n\"\"\""
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n3 C\\n2 C\\n1 C\") == \"GHOST\"\nassert solution(\"4 3\\n3 C\\n2 C\\n1 C\") == \"GHOST\"\nassert solution(\"4 3\\n3 W\\n2 W\\n1 W\") == \"GHOST\"\nassert solution(\"4 3\\n3 W\\n2 C\\n1 W\") == \"SAFE\"\nassert solution(\"4 3\\n3 C\\n2 C\\n1 C\") == \"SAFE\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == 'GHOST'\n\"\"\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 3\n3 C\n2 C\n1 C\n''') == 'GHOST'\nassert solution('''4 3\n3 W\n2 W\n1 W\n''') == 'SAFE'\nassert solution('''4 3\n3 C\n2 C\n1 W\n''') == 'GHOST'\nassert solution('''4 3\n3 W\n2 C\n1 W\n''') == 'SAFE'\nassert solution('''4 3\n3 W\n2 W\n1 C\n''') == 'GHOST'\n"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n4 3\n3 C\n2 C\n1 C\n''') == 'GHOST'\nassert solution('''\n4 3\n3 C\n2 C\n1 C\n''') == 'GHOST'\nassert solution('''\n4 3\n3 C\n2 C\n1 C\n''') == 'GHOST'\nassert solution('''\n4 3\n3 C\n2 C\n1 C\n''') == 'GHOST'\n\n-----Test input-----\n4 3\n3 C\n2 C\n1 C\n'''\n"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n3 C\\n2 C\\n1 C') == 'GHOST'\n\n\"\"\"\nimport sys\n\nL, n = [int(i) for i in sys.stdin.readline().strip().split(' ')]"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n3 C\\n2 C\\n1 C\") == \"GHOST\"\n\n\"\"\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 C\\n2 C\\n1 C\") == \"GHOST\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n3 C\\n2 C\\n1 C\") == \"GHOST\"\n\"\"\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n0.00 2.00\") == \"2\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n0.00 2.00\") == \"2\"\nassert solution(\"2 3\\n2.00 3.00\") == \"no fika\"\n\nprint(solution(\"2 3\\n0.00 2.00\"))\n\nprint(solution(\"2 3\\n2.00 3.00\"))\n\nassert solution(\"2 3\\n0.10 2.00\") == \"no fika\"\n\nprint(solution(\"2 3\\n0.10 2.00\"))\n\nprint(solution(\"2 3\\n0.10 2.00\"))\n\nassert solution(\"2 3\\n0.00 2.00\") == \"2\"\nassert solution(\"2 3\\n2.00 3.00\") == \"no fika\"\n\nprint(solution(\"2 3\\n0.00 2.00\"))\n\nprint(solution(\"2 3\\n2.00 3.00\"))"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5 1\\n0.0 2.0') == 'no fika'\nassert solution('4 2\\n2.0 3.0 4.0') == '6.0'\n\n---Problem 2 ---\nThe real difference between the two parts of the problem is that there are no constraints on the speed of the conveyor belt; it is allowed to go as fast as desired. However, the luggage cannot move faster than one meter per second.\n\nGiven a list of luggage positions, return the list of maximum speeds of the conveyor belt which avoids all collisions.\n\n-----Input-----\nThe first line of input contains two positive integers $N$ and $M$ ($1 \\leq N \\leq M \\leq 100$), where $N$ is the number of pieces of luggage and $M$ is the number of allowed speeds. The second line contains $M$ unique space-separated numbers $v_ i$ ($0.1 \\leq v_ i \\leq 10$) denoting the allowed speeds in m/s.\n\n-----Output-----\nOutput the $M$ speeds in m/s ($0.1 \\leq v_ i \\leq 10$) which makes sure no collisions will occur, or \u201cno fika\u201d if there is no such speed. The answer is considered correct if it has an absolute error of at most $10^{-9}$.\n\nYou may assume that when an optimal speed exists, each speed in the interval $[v_i - 10^{-9}, v_i]$ will also be a valid speed.\n\nSample Input:\n2 3\n1.0 2.0 3.0\nSample Output:\n1.0 1.0\n\n\"\"\"\nimport math"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stub) == answer\n"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n0.00 2.00\") == '2'\nassert solution(\"2 3\\n0.01 0.02\") == 'no fika'\nassert solution(\"2 3\\n0.01 0.02\") == '2'\nassert solution(\"2 3\\n0.01 2.02\") == '2'\n\nimport sys\nassert sys.version_info >= (3, 7)\n\nn, l = map(int, input().split())\nx = list(map(float, input().split()))\nv = min(x)\nwhile min(x) < v + 10 ** -9:\n    v += 1\nprint(v if v!= 0.0 else \"no fika\")"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1') == 'no fika'\nassert solution('0 0') == 'no fika'\nassert solution('0.1 0.9') == 'no fika'\nassert solution('0.1 0.9') == 'no fika'\n"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n0.00 2.00') == '2'\n\n\"\"\"\nimport math\n\nN, L = map(int, stdin.readline().split())\nLs = list(map(float, stdin.readline().split()))\n\np = [Ls[i] * 1000 / L for i in range(N)]\np.sort()\nmax = p[-1]"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n0.00 2.00\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n0.00 2.00') == '2'\n\"\"\""
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n0.00 2.00') == '2'\nassert solution('3 7\\n0.00 4.99 6.00') == 'no fika'\nassert solution('3 9\\n0.01 2.40 3.70') == '3.7'\nassert solution('4 5\\n0.00 1.00 3.00 5.00') == 'no fika'\nassert solution('4 10\\n0.00 1.00 3.00 5.00 7.00 8.00 9.00') == 'no fika'\n\n'''\n\nfrom math import ceil"
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0\\n') == '10'\n\"\"\"\n\nn = int(input())\n\nlist1 = []\nlist2 = []\n\nfor _ in range(n):\n    list1.append(list(map(int, input().split())))\n\nfor _ in range(n):\n    list2.append(list(map(int, input().split())))"
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n10\\n15\\n5\\n2\\n6\") == \"10\"\nassert solution(\"3\\n10\\n10\\n2\\n10\\n10\\n3\") == \"9\"\n\nprint(solution(\"5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n2\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\"
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n0\\n') == '0'\nassert solution('1\\n0\\n10\\n') == '10'\nassert solution('1\\n0\\n10\\n20\\n') == '10'\n\n-------"
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0\\n10 0\\n2\\n30 0\\n15 0') == '10'\nprint('Hooray!')\n\"\"\""
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5\\n0 0\\n1 0\\n0 1\\n0 2\\n0 3\\n3 3\\n0 0\\n1 0') == '2'\n\nassert solution('5\\n0 0\\n1 0\\n0 1\\n0 2\\n0 3\\n3 3\\n0 0\\n1 0') == '2'\n\nassert solution('5\\n0 0\\n1 0\\n0 1\\n0 2\\n0 3\\n3 3\\n0 0\\n1 0') == '2'\n\nassert solution('5\\n0 0\\n1 0\\n0 1\\n0 2\\n0 3\\n3 3\\n0 0\\n1 0') == '2'"
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n10 0\\n2\\n30 0\\n15 0\\n') == '10'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 0\\n10 0\\n2\\n30 0\\n15 0\") == \"10\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open(r\"D:\\Code\\GitHub\\MateuszGrzelakOMI\\dokumenty\\kod-testy\\C\\input.txt\", \"r\").read()) == open(r\"D:\\Code\\GitHub\\MateuszGrzelakOMI\\dokumenty\\kod-testy\\C\\output.txt\", \"r\").read()\n"
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5') == '5'\nassert solution('1\\n1\\n2\\n3\\n4\\n5') == '4'"
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0') == '10'\nassert solution('2\\n10 0\\n2\\n30 0\\n15 0') == '10'\nassert solution('2\\n30 0\\n15 0\\n2\\n10 0') == '10'\nassert solution('2\\n30 0\\n15 0\\n2\\n10 0') == '10'\nassert solution('2\\n30 0\\n15 0\\n2\\n10 0') == '10'\n"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 3\\nW 10 0\\nW 10 3\\nE 17 4') == '0'\n"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 3\\nW 10 0\\nW 10 3\\nE 17 4') == '0'\n\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\nE 10 3\\nW 20 2\\nE 5 2\\nW 10 1\\nW 10 1\\nE 10 2\\nE 5 2\\nE 20 2\\nW 10 1\\nW 20 1\\nE 5 2\\nW 10 1\") == '0'\n\nassert solution(\"8 3\\nE 10 3\\nW 20 2\\nE 5 2\\nW 10 1\\nW 10 1\\nE 10 2\\nE 5 2\\nE 20 2\\nW 10 1\\nW 20 1\\nE 5 2\\nW 10 1\") == '2'\n\nassert solution(\"8 3\\nE 10 3\\nW 20 2\\nE 5 2\\nW 10 1\\nW 10 1\\nE 10 2\\nE 5 2\\nE 20 2\\nW 10 1\\nW 20 1\\nE 5 2\\nW 10 1\") == '1'\n\nassert solution(\"8 3\\nE 10 3\\nW 20 2\\nE 5 2\\nW 10 1\\nW 10 1\\nE 10 2\\nE 5 2\\nE 20 2\\nW 10 1\\nW 20 1\\nE 5 2\\nW 10 1\") == '2'\n\nassert solution(\"8 3\\nW 10 3\\nW 10 3\\nE 10 3\\nE 10 3\\nW 10 3\\nW 10 3\\nE 10 3\\nE 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nE 10 3\\nE 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nE 10 3\\nW 10 3\\nE 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nE 10 3\\nW 10 3\\nE 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nE 10 3\\nW 10 3\\nE 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nE 10 3\\nE 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nE 10 3\\nE 10 3\\nW 10 3\\nW 10 3\\nE 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nE 10 3\\nW 10 3\\nE 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nE 10 3\\nW 10 3\\nE 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10 3\\nW 10"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\\nW 10 0\\nW 10 3\\nE 17 4\\n\") == \"0\"\n\nassert solution(\"8 2\\nW 10 0\\nE 10 3\\n\") == \"1\"\n\nassert solution(\"8 2\\nW 10 0\\nW 10 3\\nE 17 3\\n\") == \"2\"\n\n\"\"\"\n\n\nimport collections\nimport itertools\nimport math\n\nclass Car(object):\n    def __init__(self, direction, time):\n        self.direction = direction\n        self.time = time\n        \n    def __repr__(self):\n        return 'Car(%r, %r)' % (self.direction, self.time)\n        \nclass Queue(object):\n    def __init__(self, idx, limit):\n        self.idx = idx\n        self.limit = limit\n        \n    def __repr__(self):\n        return 'Queue(%r, %r)' % (self.idx, self.limit)\n        \n"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\\nW 10 0\\nW 10 3\\nE 17 4\") == \"0\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''8 3\nW 10 0\nW 10 3\nE 17 4''') == '0'\n"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3\\nW 10 0\\nW 10 3\\nE 17 4') == '0'\n\"\"\"\n\nfrom typing import List, Dict"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n8 3\nW 10 0\nW 10 3\nE 17 4\n''') == '0'\n\nassert solution('''\n8 3\nW 10 0\nW 10 3\nE 17 4\n''') == '0'\n\nassert solution('''\n8 3\nE 10 0\nE 10 3\nW 17 4\n''') == '0'\n\nassert solution('''\n8 3\nE 10 0\nW 10 3\nE 17 4\n''') == '1'\n\nassert solution('''\n8 3\nE 10 0\nW 10 3\nE 17 4\n''') == '1'"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''8 3\nW 10 0\nW 10 3\nE 17 4''') == '0'\nassert solution('''8 5\nW 10 0\nW 10 3\nE 17 4\nW 10 2 0\nW 10 4 1\nE 16 2 4\nE 20 2 4\nE 15 2 4\nE 17 2 4\nE 10 4 4\nE 9 4 4\nE 6 2 4\nW 9 2 4\nE 9 3 4\nE 8 4 4\nW 8 4 4\nE 11 2 4\nE 12 2 4\nE 11 3 4\nE 16 3 4\nE 16 5 4\nE 18 5 4\nE 17 5 4\nW 18 3 4\nE 19 2 4\nE 20 4 4\nE 21 4 4\nE 22 5 4\nE 23 5 4\nE 24 5 4\nW 20 3 4\nE 20 4 4\nE 21 4 4\nW 20 4 4\nW 20 3 4\nE 20 3 4\nE 21 3 4\nE 20 4 4\nE 19 3 4\nE 16 3 4\nW 16 3 4\nE 18 3 4\nE 16 4 4\nE 18 4 4\nE 16 5 4\nE 17 5 4\nW 16 4 4\nE 16 5 4\nE 17 5 4\nW 16 5 4\nW 16 5 4\nE 18 5 4\nW 18 4 4\nE 18 5 4\nE 17 5 4\nE 16 6 4\nW 18 3 4\nE 16 6 4\nE 17 6 4\nW 16 6 4\nW 16 7 4\nW 18 3 4\nE 17 6 4\nE 16 6 4\nE 18 6 4\nW 18 3 4\nE 16 6 4\nE 17 6 4\nW 18 3 4\nE 16 7 4\nE 17 7 4\nE 18 7 4\nE 16 8 4\nE 17 8 4\nE 18 8 4\nE 17 9 4\nE 16 9 4\nW 17 9 4\nW 18 3 4\nE 17 9 4\nW 18 3 4\nE 18 9 4\nE 19 9 4\nE 18 10 4\nW 18 10 4\nE 18 11 4\nE 18 11 4\nE 19 11 4\nE 20 11 4\nE 18 12 4\nW 19 12 4\nE 18 12 4\nE 18 13 4\nE 18 13 4\nE 18 14 4\nW 18 14 4\nE 18 15 4\nE 18 15 4\nE 19 15 4\nW 18 15 4\nE 18 16 4\nE 18 16 4\nW 18 16 4\nE 18 17 4\nE 18 17 4\nE 18 18 4\nE 18 18 4\nW 18 18 4\nE 18 19 4\nE 18 19 4\nE 19 19 4\nW 18 19 4\nE 18 20 4\nE 18 20 4\nE 19 20 4\nW 18 20 4\nW 18 20 4\nE 18 21 4\nE 18 21 4\nE 19 21 4\nE 19 22 4\nE 18 22 4\nE 18 23 4\nE 18 23 4\nE 19 23 4\nW 18 23 4\nE 18 24 4\nE 18 24 4\nE 18 25 4\nE 19 25 4\nW 18 25 4\nE 18 26 4\nE 18 26 4\nE 19 26 4\nW 18 26 4\nW 18 27 4\nE 18 27 4\nE 18 28 4\nE 18 28 4\nE 19 28 4\nE 18 29 4\nE 18 29 4\nE 19 29 4\nE 18 30 4\nE 18 30 4\nE 18 31 4\nE 19 31 4\nE 18 32 4\nW 18 32 4\nE 18 33 4\nE 18 33 4\nE 19 33 4\nE 18 34 4\nE 18 34 4\nE 18 35 4\nE 18 35 4\nE 18 36 4\nE 18 36 4\nE 18 37 4\nE 18 37 4\nW 18 37 4\nE 18 38 4\nE 18 38 4\nE 19 38 4\nE 18 39 4\nE 18 39 4\nE 19 39 4\nW 18 39 4\nE 18 40 4\nE 18 40 4\nE 19 40 4\nE 18 41 4\nE 18 41 4\nE 18 42 4\nW 18 42 4\nE 18 43 4\nE 18 43 4\nE 19 43 4\nW 18 43 4\nE 18 44 4\nE 18 44 4\nE 19 44 4\nW 18 44 4\nE 18 45 4\nE 18 45 4\nE 19 45 4\nW 18 45 4\nE 18 46 4\nE 18 46 4\nE 19 46 4\nW 18 46 4\nE 18 47 4\nE 18 47 4\nE 19 47 4\nE 18 48 4\nE 18 48 4\nE 19 48 4\nW 18 48 4\nE 18 49 4\nE 18 49 4\nE 19 49 4\nE 18 50 4\nE 18 50 4\nE 19 50 4\nW 18 50 4\nE 18 51 4\nE 18 51 4\nE 19 51 4\nW 18 51 4\nE 18 52 4\nE 18 52 4\nE 19 52 4\nW 18 52 4\nE 18 53 4\nE 18 53 4\nE 19 53 4\nW 18 53 4\nE 18 54 4\nE 18 54 4\nE 19 54 4\nW 18 54 4\nE 18 55 4\nE 18 55 4\nE 19 55 4\nW 18 55 4\nE 18 56 4\nE 18 56 4\nE 19 56 4\nW 18 56 4\nE 18 57 4\nE 18 57 4\nE 19 57 4\nW 18 57 4\nE 18 58 4\nE 18 58 4\nE 19 58 4\nW 18 58 4\nE 18 59 4\nE 18 59 4\nE 19 59 4\nW 18 59 4\nE 18 60 4\nE 18 60 4\nE 19 60 4\nW 18 60 4\nE 18 61 4\nE 18 61 4\nE 19 61 4\nW 18 61 4\nE 18 62 4\nE 18 62 4\nE 19 62 4\nW 18 62 4\nE 18 63 4\nE 18 63 4\nE 19 63 4\nW 18 63 4\nE 18 64 4\nE 18 64 4\nE 19 64 4\nW 18 64 4\nE 18 65 4\nE"
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('W 10 3\\nE 17 4') == '0'\n\n\"\"\"\n\n\n\"\"\"\nThe most naive solution is to sort the input by arrival time and then iterate over it, and whenever a car arrives in a \"going\" state, we add 1 to the count. The time complexity is O(nlog(n)). We may want to think about implementing a heap to get an even faster solution. We could put cars into a heap, and then iterate over it, and whenever we receive a \"go\" signal, we would pop out the car with the earliest departure time. The time complexity would be O(n + \\text{push and pop}).\n\nHere is a solution using a min heap.\n\nThis solution is the fastest one so far, and it only depends on the heap.\n\"\"\"\n\n\nimport heapq\n"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n5 6\\n3 4\\n5 13\\n6 10\") == \"3\"\nassert solution(\"5 10\\n7 13\\n1 8\\n1 7\\n4 14\\n4 11\\n4 7\") == \"3\"\nassert solution(\"1 10\\n5 9\\n5 7\\n2 4\\n5 5\\n4 8\\n5 2\") == \"2\"\n\nprint(solution())\n"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n5 8\\n5 6\\n3 4\\n5 13\\n6 10\") == \"3\"\n-------------------------------"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n5 8\n5 6\n3 4\n5 13\n6 10''') == 3\n'''"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(r'5\\n5 8\\n5 6\\n3 4\\n5 13\\n6 10') == 3\n\nfrom typing import List\n\nclass Solution:\n    def solve(self, A: List[str]) -> int:\n        n = int(A[0])\n        t = []\n        h = []\n        for i in range(1,n+1):\n            t.append(int(A[i].split(' ')[0]))\n            h.append(int(A[i].split(' ')[1]))\n        t.sort()\n        h.sort()\n        a = 0\n        b = 0\n        temp = t[0]\n        count = 1\n        for i in range(1,n):\n            if t[i] - temp == 0:\n                count += 1\n            elif t[i] - temp == 1:\n                a = count\n                b = i\n                break\n            else:\n                temp = t[i]\n                count = 1\n        c = n - b - 1\n        return min(a,c,b)\n\n\nassert Solution().solve(r'5\\n5 8\\n5 6\\n3 4\\n5 13\\n6 10') == 3\n\nsolution(r'5\\n5 8\\n5 6\\n3 4\\n5 13\\n6 10')\n5\n5 8\n5 6\n3 4\n5 13\n6 10\n\n\"\"\""
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 2\") == \"1\\n2\"\nassert solution(\"3\\n3 2\") == \"0\\n0\"\nassert solution(\"4\\n3\\n3 2\") == \"0\\n0\\n0\"\n\"\"\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n5 8\\n5 6\\n3 4\\n5 13\\n6 10') == '3'\nprint(solution(stdin))\n\n-----Explanation-----\nDemetrios can visit the stores at indices 1, 2, and 3 prior to reaching the sunken treasure, and must return to his ship at the store at index 5 prior to sinking.\n\"\"\""
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5\\n6\\n7\\n8\\n9') == '3'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n5 8\\n5 6\\n3 4\\n5 13\\n6 10') == '3'\nassert solution('8\\n6 3\\n5 9\\n4 8\\n3 7\\n1 2\\n1 2') == '6'\n\"\"\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n5 8\\n5 6\\n3 4\\n5 13\\n6 10\\n') == '3'\n"
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3, 2) == \"impossible\"\nassert solution(2, 3) == \"impossible\"\nassert solution(3, 3) == \"ABBA\"\nassert solution(4, 4) == \"AAAB\"\n\n\"\"\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n10 3 3\") == \"impossible\"\n\nassert solution(\"4 4\\n10 5 6\") == \"10\\n10\\n10\\n10\"\n\nassert solution(\"3 4\\n3 3 3\") == \"impossible\"\n\nassert solution(\"2 2\\n1 1 1\") == \"impossible\"\nassert solution(\"4 4\\n5 5 5\") == \"impossible\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\n------Problem description------\n\u0421\u0438\u0434\u0438\u0442 \u0438 \u043e\u043d \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0438\u0441\u043a\u043e\u0439 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 \u0432 \u043a\u0430\u0444\u0435. \u0415\u0433\u043e \u0437\u0430\u0434\u0443\u043c\u0430\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u043a\u0430\u0437\u044b \u0438 \u043c\u043e\u0436\u0435\u0442 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043d\u0430 \u0434\u0438\u0441\u043a\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u043a\u0430\u0437\u043e\u0432.\n\n\u0417\u0430\u043a\u0430\u0437 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430 \u0438 \u0441\u0443\u043c\u043c\u044b \u0437\u0430\u043a\u0430\u0437\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0435\u0439 \u043a\u0430\u043a \u0446\u0435\u043d\u0430 \u0442\u043e\u0432\u0430\u0440\u0430, \u0442\u0430\u043a \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e. \u041e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0434\u0432\u0430 \u0437\u0430\u043a\u0430\u0437\u0430 \u043c\u043e\u0433\u0443\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043f\u0440\u0438 \u043e\u0431\u0445\u043e\u0434\u0435 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0442\u043e\u0432\u0430\u0440\u0443.\n\n\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u043e\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430 \u0438 \u0437\u0430\u043a\u0430\u0437\u0430\u043c \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430. \u0412\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043a \u0442\u0438\u043f\u0443 str.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0437\u0430\u043a\u0430\u0437\u044b \u0434\u043b\u044f \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u0432\u0435\u0449\u0435\u0439 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435. \u0422\u0430\u043a \u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430 \u0438 \u0441\u0443\u043c\u043c\u0430 \u0437\u0430\u043a\u0430\u0437\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u0446\u0435\u043d\u0430 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0432\u0430\u0440\u0430.\n\n\u0422\u0430\u043a\u0436\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u044b \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430 \u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 \u043f\u043e \u0441\u0443\u043c\u043c\u0435 \u0437\u0430\u043a\u0430\u0437\u0430. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0437\u0430\u043a\u0430\u0437\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u043a\u043b\u044e\u0447\u0435\u0439 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0437\u0430\u043a\u0430\u0437\u044b \u0434\u043b\u044f \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u0432\u0435\u0449\u0435\u0439 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430 \u0438 \u0441\u0443\u043c\u043c\u0430 \u0437\u0430\u043a\u0430\u0437\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u0446\u0435\u043d\u0430 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0432\u0430\u0440\u0430.\n\n\u0412 \u043e\u0431\u0449\u0435\u043c \u0441\u043c\u044b\u0441\u043b\u0435 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u043e\u0439 "
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n10 3 3\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n10 3 3') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n10 3 3\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n10 3 3') == 'impossible'\n\n\"\"\"\n\nR, C = [int(x) for x in input().split()]\nAB = [int(x) for x in input().split()]"
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'impossible'\nassert solution('10 3 3\\n10') == 'impossible'\nassert solution('4 4\\n10 3 3') == 'impossible'\nassert solution('4 4\\n10 1 3') == 'A BBBB\\nB CCCC'\nassert solution('4 4\\n4 2 3') == 'A A C\\nB B B\\nC C C'\n"
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n10 3 3') == 'impossible'\nassert solution('5 4\\n1 2 3 4 4') == 'impossible'\nassert solution('4 4\\n1 2 2') == 'impossible'\nassert solution('4 4\\n1 1 3') == 'impossible'\nassert solution('4 4\\n1 1 1') == 'impossible'\n"
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'impossible'\nassert solution('2 4 3') == 'impossible'\nassert solution('4 4 3') == '4 4'\nassert solution('4 4 2') == 'impossible'\nassert solution('1 1 3') == 'impossible'\n"
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"11\\n\"\n    \"BETWEEN\\n\"\n    \"SUBTLE\\n\"\n    \"SHADING\\n\"\n    \"AND\\n\"\n    \"THE\\n\"\n    \"ABSENCE\\n\"\n    \"OF\\n\"\n    \"LIGHT\\n\"\n    \"LIES\\n\"\n    \"NUANCE\\n\"\n    \"IQLUSION\\n\"\n    \"BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\"\n) == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nprint(\"PASSED\")"
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"11\"\n) == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(\n\"1\"\n) == \"C\"\nassert solution(\n\"2\"\n) == \"ABC\"\nassert solution(\n\"3\"\n) == \"ABCDEF\"\nassert solution(\n\"4\"\n) == \"ABCDETW\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n\n----INPUT EXAMPLE----\n11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n----OUTPUT EXAMPLE----\nBETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\n\"\"\"\n\nimport sys\n\ndict_words = set()\nfor _ in range(int(sys.stdin.readline().strip())):\n    dict_words.add(sys.stdin.readline().strip())\nno_vowels_message = sys.stdin.readline().strip()"
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n\"\"\"\n\nimport re\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('A B C') == 'A B C'\nassert solution('A B C D') == 'A B C D'\nassert solution('A B C D E') == 'A B C D E'\n"
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\n\"\"\""
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nprint(solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\"))\n"
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n\"\"\""
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\"\"\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abrahellehhelleh') == 12"
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abrahellehhelleh\") == 12\n\"\"\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abrahellehhelleh\") == 12\n\nassert solution(\"rachelhellabracadabra\") == 0\n\nassert solution(\"golf\") == 0\nassert solution(\"chris\") == 0\n\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == 0\n"
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abrahellehhelleh') == 12\n\"\"\"\n\nstdin = 'abrahellehhelleh'\n\nimport sys"
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('helleh') == 12\nassert solution('abracadabra') == 0\nassert solution('abba') == 4\n\nprint('Success')\n\"\"\""
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abrahellehhelleh') == 12\nassert solution('rachelhellabracadabra') == 0\n\"\"\""
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abrahellehhelleh\") == 12\n\"\"\"\n\nimport sys\nfrom collections import Counter, defaultdict\nimport numpy as np\nfrom dataclasses import dataclass\n\nsys.setrecursionlimit(1_000_000)\n\n@dataclass\nclass Word:\n    \"\"\"Class for storing word\"\"\"\n    word: str\n\n    def power(self) -> int:\n        \"\"\"Returns the power of the word\"\"\"\n        total = 0\n        for char in self.word:\n            if char == self.word[::-1][0]:\n                total += 1\n        return total * 4"
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abrailleh') == 12\nassert solution('abc') == 0\nassert solution('abcdefghijklmnopqrstuvwxyz') == 0\n\"\"\""
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abrahellehhelleh\") == 12\n\"\"\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abrahellehhelleh\") == 12\n\"\"\"\nimport re\n"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\") == \"70\"\nassert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\") == \"70\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\") == \"70\"\nassert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\") == \"140\"\n\"\"\""
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"70\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"100\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\") == \"70\"\n"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n') == '70'"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"70\"\n\nassert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"140\"\n\nassert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"140\"\n\nassert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"170\"\n\nassert solution(\"65"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 2 3\\n2 2 4 5\\n3 3 5 6\\n4 4 5 5\\n5 5 5 5\\n\") == \"Yahtzee!\"\nassert solution(\"4\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 5 5\\n\") == \"0\"\nassert solution(\"4\\n1 1 1 1 1\\n2 2 2 2 2\\n3 3 3 3 3\\n4 4 4 4 4\\n\") == \"0\"\nassert solution(\"4\\n1 1 1 1 1\\n2 2 2 2 2\\n3 3 3 3 3\\n4 4 4 4 4\\n\") == \"0\"\nassert solution(\"4\\n1 1 1 1 1\\n2 2 2 2 2\\n3 3 3 3 3\\n4 4 4 4 4\\n\") == \"0\"\n"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\") == \"70\"\nassert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\") == \"210\"\nassert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\") == \"210\"\nassert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\") == \"210\"\nassert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"65\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n\") == \"70\"\n\"\"\""
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 1\\n1 1') == '5'\nassert solution('4\\n1 1\\n2 2\\n3 3') == '12'\nassert solution('7\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6') == '48'\nassert solution('17\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13') == '73'\nassert solution('9\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9') == '63'\n"
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n2 3 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4') == '6\\n0\\n0\\n0\\n8'\n'''\n\n'''\nTCC"
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n 1 2 1\\n 1 2 2 1\\n 0 0\\n 1 1\\n 1 2\") == \"4\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"10\\n7\\n8\\n7\\n\"\n\nassert solution(\"10 6\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"10\\n7\\n8\\n7\\n\"\n\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"10\\n7\\n8\\n7\\n\"\n\n\"\"\"\n\n\"\"\"\nimport collections"
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"7\\n8\\n7\\n8\"\n\"\"\""
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"10\\n7\\n8\\n7\\n\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n7\\n8\\n7\\n\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n8\\n8\\n8\\n\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n8\\n8\\n8\\n\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n8\\n8\\n8\\n\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n8\\n8\\n8\\n\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"10\\n7\\n8\\n7\\n\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n\"\"\") == \"\"\"\n10\n7\n8\n7\n\"\"\""
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 2\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"10\\n7\\n8\\n7\"\nprint(solution(\"9 4\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"6 4\\n1 2 3 4 5 6\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"4 4\\n1 2 3 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"4 4\\n1 2 3 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"5 5\\n1 2 3 4 5\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"7 5\\n1 2 3 4 5 6 7\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"8 5\\n1 2 3 4 5 6 7 8\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"6 4\\n1 2 3 4 5\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"4 4\\n1 2 3 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"4 4\\n1 2 3 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"5 5\\n1 2 3 4 5\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"7 5\\n1 2 3 4 5 6 7\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"8 5\\n1 2 3 4 5 6 7 8\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"6 4\\n1 2 3 4 5\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"4 4\\n1 2 3 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"4 4\\n1 2 3 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"5 5\\n1 2 3 4 5\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"7 5\\n1 2 3 4 5 6 7\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"8 5\\n1 2 3 4 5 6 7 8\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"6 4\\n1 2 3 4 5\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"4 4\\n1 2 3 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\"))\nprint(solution(\"4 4\\n1 2 3 4\\n0 1\\n0 4\\n1 4\\n"
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '''10\n7\n8\n7\n'''\n\nassert solution('''10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '''10\n8\n7\n'''\n\nassert solution('''10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '''10\n8\n7\n'''\n\nassert solution('''10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '''10\n7\n'''\n\nassert solution('''10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '''10\n7\n'''"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\nassert solution(\"1 1 1\\n1 1 1\") == \"2\"\nassert solution(\"3 5 2\\n2 2 2\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom enum import Enum\nfrom typing import List, Tuple, Optional\n\nfrom structs import Edge, Graph, GraphSolution\n\n\nclass LogStates(Enum):\n    UPPER = 0\n    LOWER = 1\n    RIGHT = 2\n    LEFT = 3\n\n\n@dataclass(eq=True, frozen=True)\nclass Plank(Edge):\n    pass\n\n\n@dataclass(eq=True, frozen=True)\nclass Log:\n    start_index: int\n    end_index: int\n    current_state: LogStates\n    next_state: LogStates\n    plank: Plank\n    plank_next_state: Optional[LogStates] = None\n"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\n\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import List\nimport math"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\n\n---\n\nSample Input:\n2 4 6\n-1 -1\n-2 0\n0 -1\n0 0\n1 0\n2 0\n3 0\n2 1\nSample Output:\n2\n"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\n\"\"\"\n\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = [[0 for column in range(vertices)]\n                      for row in range(vertices)]\n\n    def printSolution(self, dist):\n        print(\"Vertex tDistance from Source\")\n        for node in range(self.V):\n            print(node, \"t\", dist[node])\n\n    def minDistance(self, dist, sptSet):\n        min = 9999\n        min_index = -1\n        for v in range(self.V):\n            if dist[v] < min and sptSet[v] is False:\n                min = dist[v]\n                min_index = v\n        return min_index\n\n    def dijkstra(self, src):\n\n        dist = [9999] * self.V\n        dist[src] = 0\n        sptSet = [False] * self.V\n\n        for cout in range(self.V):\n\n            u = self.minDistance(dist, sptSet)\n\n            sptSet[u] = True\n\n            for v in range(self.V):\n                if self.graph[u][v] > 0 and sptSet[v] is False and dist[v] > dist[u] + self.graph[u][v]:\n                    dist[v] = dist[u] + self.graph[u][v]\n\n        self.printSolution(dist)\n"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\n\"\"\"\nimport sys\n\nclass Bank:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1') == 6\n\n\"\"\""
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 4 40\") == \"3\"\n\"\"\""
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 4 40\") == \"3\"\n\"\"\"\n\ns, r, n, z = map(int, stdin.readline().split())\nr /= 100\ns = abs(s)\n\nres = 0\nfor i in range(n):\n    if r < s/2:\n        res += 1\n        r += 0.01\n\nprint(res)"
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 4 40\") == 3\n\"\"\"\n\nimport sys\n\nn, z = map(int, sys.stdin.readline().split())\ns, r = map(float, sys.stdin.readline().split())\n\narea = z * s * 3.141592 * s / 100\n\nprint(n * area / (3.141592 * r * r))\n"
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('5 1 6 80') == '5'\nassert solution('1 1 1 80') == '3'\nassert solution('1 1 0 80') == '2'\nassert solution('1 1 1 80') == '3'\n"
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 1 0.1') == '6'\nassert solution('1 1 4 0.1') == '3'\nassert solution('0.5 0.5 4 1') == '3'\nassert solution('1 1 1 0.01') == '4'\nassert solution('1 1 1 0.00001') == '4'\n"
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('3.5 1 4 40') == '3'\nassert solution('3.5 1.6 4 40') == '3'\nassert solution('3.5 1.6 4.1 40') == '3'\nassert solution('3.5 1.6 4.2 40') == '4'\n\n\"\"\"\n\nimport math\nfrom collections import Counter"
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 4 40') == 3\n\"\"\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 4 40\") == \"3\"\n\"\"\"\n\n\"\"\"\nInstead of solving for the area of the cut, we can say:\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pickles.\n\n\"The maximum amount of pickles I can put on the sandwich is the maximum amount of space I can put between the two pick"
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(solution.__doc__.split(\"\\n\")[1:][0]) == 2\n\"\"\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 4 40\") == 3\nassert solution(\"3.4 1 4 40\") == 3\nassert solution(\"3.44 1 4 40\") == 3\nassert solution(\"3 1 40 4\") == 2\n\"\"\""
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\") == '99'\nassert solution(\"5 1440\\n1 3 5 0\\n1 2 1 0\\n1 3 1 0\\n1 4 1 0\\n1 5 1 0\\n1 5 2 0\\n2 3 2 0\\n3 4 2 0\\n3 5 2 0\\n4 5 2 0\\n5 5 2 0\\n5 5 3 0\\n5 5 4 0\\n5 5 5 0\\n0\") == '0'\n\n---------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n60 89 -1\\n60 -1 120 -1\\n60 90 120 120\\n60 60 -1 60\") == \"0\"\nassert solution(\"4 3\\n60 89 -1\\n60 -1 120 -1\\n60 90 120 120\\n60 60 -1 60\") == \"120\"\nassert solution(\"4 2\\n60 89 -1\\n60 -1 120 -1\\n60 90 120 120\\n60 60 -1 60\") == \"89\"\n\nassert solution(\"4 2\\n60 89 -1\\n60 -1 120 -1\\n60 90 120 120\\n60 60 -1 60\") == \"89\"\nassert solution(\"4 1\\n60 89 -1\\n60 -1 120 -1\\n60 90 120 120\\n60 60 -1 60\") == \"89\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\") == \"99\\n3\"\nassert solution(\"1 2\\n0 0\") == \"0\"\nassert solution(\"1 2\\n0 1\") == \"1\"\nassert solution(\"1 2\\n0 0\\n0 1\") == \"0\"\nassert solution(\"1 2\\n0 1\\n1 1\") == \"1\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"93 82 444\") == \"99\"\nassert solution(\"92 76 436\") == \"1\"\nassert solution(\"99 62 -1\") == \"0\"\nassert solution(\"0 70 66 71 97\") == \"1\"\nassert solution(\"76 0 87 66 74\") == \"1\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0') == '99'\nassert solution('1 1\\n0 0') == '0'\nassert solution('4 8\\n5 3\\n3 7\\n6 2\\n2 5\\n4 2\\n7 4\\n3 6\\n4 1\\n4 2\\n2 0') == '9'\nassert solution('3 8\\n2 1\\n6 7\\n4 3\\n0 4\\n5 1\\n5 2\\n4 0\\n4 1\\n3 2\\n0 1\\n1 2\\n1 3') == '18'\nassert solution('3 8\\n0 0') == '0'\n"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\\n') == '99'\n\nassert solution('3 353\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\\n') == '0'\n\nassert solution('3 354\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\\n') == '0'\n\nassert solution('3 355\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\\n') == '0'\n\nassert solution('3 356\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\\n') == '0'"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\\n\") == \"99\"\n\n-----Explanation-----\nThe maximum number of points that can be earned is $99$. This can be earned by completing task 3.\n\nWhen we complete task 3, we have $p_ 3$ points. There are no tasks in the same location as 3.\n\nIn this example, we will have $3$ tasks that can be performed. In particular, 3, 2, 1, and 0. The tasks are processed in the order 0, 1, 2, 3.\n\"\"\""
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\") == \"99\"\n\n\"\"\"\nimport sys\nimport collections\nimport math"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\") == \"99\"\nassert solution(\"3 352\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10\") == '0'\nassert solution(\"3 10\") == '0'\nassert solution(\"3 20\") == '0'\nassert solution(\"1 10\") == '0'\nassert solution(\"5 10\") == '0'\n\n\"\"\"\nimport itertools"
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"2\\n3 4\\n4 2\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2\\n4 2'\nassert solution('4\\n1 2\\n3 2\\n4 3') == '2\\n1 1'\nassert solution('4\\n2 3\\n4 1') == '3\\n3 3'\n\n---------------------\nTESTS:\n---------------------\nimport codewars_test as test\nfrom solution import solution\n\n@test.describe(\"Sample tests\")\n"
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n4 2\\n4 3\"\nassert solution(\"4\\n1 2\\n3 4\") == \"2\\n2 3\\n4 3\"\nassert solution(\"4\\n1 2\\n3 1\\n3 4\") == \"2\\n4 2\\n1 3\\n4 3\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n4 1\") == \"2\\n2 3\\n3 4\\n4 1\\n4 1\"\n\nassert solution(\"6\\n4 1\\n1 2\\n4 3\\n2 3\\n3 4\\n4 5\") == \"2\\n1 3\\n4 5\\n1 2\\n3 4\\n4 3\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n4 2\\n\"\nassert solution(\"4\\n4 1\\n2 3\\n3 4\") == \"4\\n4 1\\n4 1\\n\"\nassert solution(\"4\\n1 4\\n2 3\\n3 4\") == \"4\\n4 1\\n4 1\\n\"\nassert solution(\"4\\n1 2\\n2 1\\n3 4\\n4 3\") == \"4\\n4 2\\n4 1\\n4 1\\n\"\nassert solution(\"4\\n1 4\\n2 2\\n3 3\\n4 4\") == \"4\\n4 1\\n4 1\\n4 1\\n\"\n\n\"\"\"\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n4 2\"\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = []\n\nfor _ in range(N - 1):\n    a = sys.stdin.readline().split()\n    A.append(a)\n\nA.sort(key = lambda x: x[1])\n\ndistance = 0\nfor i in range(len(A)):\n    distance += int(A[i][1])\n\ndistance -= int(A[0][1])\n\nprint(distance)\n\nprint(A[0][0], A[0][1])\n\ndistance = int(A[0][1])\n\nfor i in range(1, len(A)):\n    if int(A[i][1]) == distance:\n        print(A[i][0], A[i][1])\n        break\n    distance += int(A[i][1])\n\ndistance -= int(A[0][1])\n\nprint(distance)\n\nprint(A[0][0], A[0][1])\n\ndistance = int(A[0][1])\n\nfor i in range(1, len(A)):\n    if int(A[i][1]) < distance:\n        print(A[i][0], A[i][1])\n        break\n    distance -= int(A[i][1])\n\ndistance += int(A[0][1])\n\nprint(distance)\n\nprint(A[0][0], A[0][1])\n\ndistance = int(A[0][1])\n\nfor i in range(1, len(A)):\n    if int(A[i][1]) > distance:\n        print(A[i][0], A[i][1])\n        break\n    distance -= int(A[i][1])\n\ndistance += int(A[0][1])\n\nprint(distance)\n\nprint(A[0][0], A[0][1])\n\ndistance = int(A[0][1])\n\nfor i in range(1, len(A)):\n    if int(A[i][1]) < distance:\n        print(A[i][0], A[i][1])\n        break\n    distance += int(A[i][1])\n\ndistance -= int(A[0][1])\n\nprint(distance)\n\nprint(A[0][0], A[0][1])\n"
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n4 2\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n3 4\") == \"3\\n4 4\\n4 3\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n4 1\") == \"3\\n4 1\\n1 2\"\nassert solution(\"4\\n4 1\\n1 2\\n2 3\\n3 4\") == \"4\\n4 3\\n3 2\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\") == \"4\\n4 1\\n4 3\\n3 2\"\n\nSample Input 1:\n4\n1 2\n2 3\n3 4\nSample Output 1:\n2\n3 4\n4 2\n\nSample Input 2:\n4\n1 2\n2 3\n3 4\n4 1\nSample Output 2:\n3\n4 4\n4 3\n\nSample Input 3:\n4\n1 2\n2 3\n3 4\n4 1\nSample Output 3:\n2\n3 4\n4 2\n\"\"\""
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n4 2\"\n\"\"\"\nimport sys\nimport heapq\n\nN = int(sys.stdin.readline())\nconnections = [[] for _ in range(N)]\nfor _ in range(N - 1):\n    A, B = map(int, sys.stdin.readline().split())\n    connections[A - 1].append(B - 1)\n    connections[B - 1].append(A - 1)\n\ndist = [10 ** 10] * N\ndist[0] = 0\nq = [0]\nwhile q:\n    current = heapq.heappop(q)\n    for next_node in connections[current]:\n        if dist[next_node] > dist[current] + 1:\n            dist[next_node] = dist[current] + 1\n            heapq.heappush(q, next_node)\n\nprint(max(dist))\nfor i in range(len(dist)):\n    if dist[i] == max(dist):\n        print(i, end=\" \")\nprint()\n\ndisconnected = set()\nfor i in range(len(dist)):\n    if dist[i] == max(dist):\n        disconnected.add(i)\n\nfor i in range(len(connections)):\n    for j in range(len(connections[i])):\n        if connections[i][j] in disconnected:\n            print(i, j)\n            break\n"
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\n''') == '2'\nassert solution('''5\n1 2\n2 3\n3 4\n4 5\n''') == '2 3'\nassert solution('''5\n1 2\n3 4\n2 5\n''') == '2 3'\nassert solution('''5\n5 4\n1 2\n3 4\n2 5\n''') == '3 4'\nassert solution('''3\n1 2\n2 3\n3 1\n''') == '1 2'\n"
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\\n3 4\\n4 2\"\n\"\"\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"2\\n3 4\\n4 2\"\n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n1 1\n2 2\n3 2\n4 1''') == '''9.0\n12\n12.0\n9.0\n'''\n\nassert solution('''2\n3 10\n2 20''') == '''17.6\n'''\n\nassert solution('''1\n3 10''') == '''0.5\n'''\nassert solution('''4\n4 9\n1 1\n4 1\n2 1\n4 1''') == '''1.75\n'''\nassert solution('''1\n4 9''') == '''0.25\n'''\n"
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n4\n1 1\n2 2\n3 2\n4 1\n\"\"\"\n) == \"9.0\\n12\\n12.00000\\n9.0\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1\\n2 2\\n3 2\\n4 1') == '9.0'\n\"\"\"\nimport math"
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1\\n2 2\\n3 2\\n4 1\") == \"9.0\\n12\\n12.0\\n9.0\"\n\n\"\"\""
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(read_file()) == write_file()\n"
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1\\n2 2\\n3 2\\n4 1\\n\") == \"9.0\\n12\\n12.0\\n9.0\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1\\n2 2\\n3 2\\n4 1') == '9.0000'\n\n---Problem---\nA core right in Roman tenancy law was the availability of sunlight to everybody, regardless of status. Good sun exposure has a number of health benefits, many of which were known even in those ancient times.\n\nThe first act of a Roman city plan reviewer, then, is to survey the proposed structures to measure how well they distribute this precious resource. Given any one avenue of buildings arranged West-to-East, the number of hours for which each building is exposed to sunlight needs to be determined.\n\nFor the purpose of simplicity, the number of hours a building is in sunlight is proportional to the fraction of the $180$ degrees of sky visible from its top. Thanks in no small part to the marvels of ancient engineering (and also to the strict nutritional regimes of old) you may assume each building is infinitesimally thin.\n\n-----Input-----\n - One line containing one integer $N$ ($1 \\leq N \\leq 2 \\cdot 10^5$): the number of buildings.\n - $N$ further lines each containing two space-separated integers $X_ i$ and $H_ i$ ($1 \\leq X, H \\leq 10^9$), the location and height respectively, in metres, of the $i^{th}$-most building from the west.\n\n-----Output-----\nOn each of the $N$ lines of output, write one real number to at least 4 decimal places of accuracy: the number of hours for which the peak of the $i$-th building is bathed in sunlight.\n\n-----Examples-----\nSample Input:\n4\n1 1\n2 2\n3 2\n4 1\nSample Output:\n9.0000\n12\n12.00000\n9.0\n'''\n"
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1\\n2 2\\n3 2\\n4 1') == '9.0'\nassert solution('4\\n2 2\\n1 1\\n4 1') == '12.0'\nassert solution('4\\n3 2\\n2 1\\n4 1') == '12.0'\nassert solution('4\\n4 1\\n3 2\\n2 1') == '9.0'\n\nimport math"
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"4\n1 1\n2 2\n3 2\n4 1\"\"\") == \"9.0\\n12\\n12.0\\n9.0\"\n\nprint(solution(\"\"\"4\n1 1\n2 2\n3 2\n4 1\"\"\"), \"9.0\\n12\\n12.0\\n9.0\")\n\nassert solution(\"\"\"3\n2 3\n1 3\n3 1\"\"\") == \"8.0\\n10.0\\n10.0\"\n\nassert solution(\"\"\"5\n1 1\n2 2\n3 3\n4 1\n5 1\"\"\") == \"10.0\\n10.0\\n10.0\\n10.0\\n10.0\"\n\nassert solution(\"\"\"8\n1 10\n2 20\n3 10\n4 20\n5 10\n6 20\n7 10\n8 10\"\"\") == \"34.0\\n39.0\\n34.0\\n40.0\\n34.0\\n41.0\\n44.0\\n45.0\"\n\nassert solution(\"\"\"2\n2 2\n1 3\n3 1\"\"\") == \"4.0\\n6.0\\n4.0\"\n\nprint(\"OK\")\n\n\"\"\"\nEnd of the file\n\"\"\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1\\n2 2\\n3 2\\n4 1\") == \"9.0\"\n\"\"\"\n\nimport sys\nimport numpy as np\n"
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y'\n\"\"\"\n\nimport sys\n\nfrom typing import Dict, List\nfrom collections import deque"
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n'\nassert solution('101010') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\nST X\\nST Y\\nDI A\\nDI X\\nDI Y\\n'\nassert solution('101010\\n') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\nST X\\nST Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI"
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n3') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y'\n\"\"\""
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\"\n-----Problem-----\nUKIEPC gave a number of instructions to show a number on a laser display board. They gave you a number to solve.\n\nPrint a number on a laser display board to show that number.\n\"\"\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\"\nassert solution(\"3\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nPL Y\\nAD\\nPL Y\\nPL Y\\nDI Y\\n\"\nassert solution(\"4\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nPL Y\\nAD\\nPL Y\\nPH Y\\nAD\\nPL Y\\nPH Y\\nPH Y\\nDI Y\\n\"\nassert solution(\"255\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nPL Y\\nAD\\nPL Y\\nPH Y\\nPH Y\\nAD\\nPL Y\\nPL Y\\nAD\\nPL Y\\nPH Y\\nPH Y\\nPH Y\\nPH Y\\nPH Y\\nPH Y\\nPH Y\\nPH Y\\nPH Y\\nPH Y\\nPH Y\\nPH Y\\nPH Y\\nDI Y\\n\"\n\n\"\"\"\n\nn = int(stdin.read())"
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\"\n\n\"\"\"\n\nimport sys\n\nfrom typing import List\n\nINSTRUCTIONS: List[str] = [\"ST\", \"ZE\", \"DI\", \"PH\", \"PL\"]"
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2) == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y'\n\n\"\"\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y'\n\n\"\"\"\n\nimport re\n\n\nclass CPU:\n    def __init__(self, registers: dict, stack: list):\n        self.registers = registers\n        self.stack = stack\n\n    def run(self, instruction: str) -> bool:\n        is_completed = True\n\n        if instruction[0] == 'PH':\n            self.stack.append(int(instruction[1]))\n\n        elif instruction[0] == 'PL':\n            if not self.stack:\n                is_completed = False\n            else:\n                self.registers[instruction[1]] = self.stack.pop()\n\n        elif instruction[0] == 'AD':\n            if not self.stack:\n                is_completed = False\n            else:\n                self.registers[instruction[1]] = self.stack.pop() + self.stack.pop()\n\n        elif instruction[0] == 'ZE':\n            self.registers[instruction[1]] = 0\n\n        elif instruction[0] == 'ST':\n            self.registers[instruction[1]] = 1\n\n        elif instruction[0] == 'DI':\n            return True\n\n        return is_completed\n"
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y'\nassert solution('0') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nZE Y\\nST X\\nPH Y\\nPH A\\nPH X\\nAD\\nST X\\nPH A\\nPL Y\\nST X\\nPH A\\nPH X\\nAD\\nST X\\nPH Y\\nPH A\\nPH X\\nAD\\nST X\\nPH A\\nPH X\\nPH X\\nAD\\nST Y\\nST Y\\nST Y\\nST Y\\nST Y\\nST Y\\nST Y\\nST Y\\nST Y\\nST Y\\nST Y\\nST Y\\nDI Y'\nassert solution('255') == 'DI Y'\nassert solution('257') == 'DI Y'\nassert solution('255') == 'DI Y'\n"
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000\") == \"2\""
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 5 6\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000''') == 2\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(blur_boxes)) == str(n_solutions)"
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000') == '2'\n\"\"\""
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 5 6\\n'\n                '0000 FFFF 0000 0000 0000 0000\\n'\n                'FFFF FFFF 0000 FFFF FFFF 0000\\n'\n                '0000 0000 0000 FFFF 0000 0000\\n'\n                '0000 FFFF FFFF FFFF FFFF 0000\\n'\n                '0000 0000 0000 0000 0000 0000') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1 5 6\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000''') == '2'\nprint(solution(stdin))\n\n-----Notes-----\nInput is expected from STDIN. Output should be printed to STDOUT.\n\"\"\"\n\nfrom itertools import product\nfrom operator import mul\nfrom functools import partial\nfrom itertools import combinations, chain\n"
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5 6\\n' + '0000 FFFF 0000 0000 0000 0000\\n' + 'FFFF FFFF 0000 FFFF FFFF 0000\\n' + '0000 0000 0000 FFFF 0000 0000\\n' + '0000 FFFF FFFF FFFF FFFF 0000\\n' + '0000 0000 0000 0000 0000 0000\\n') == 2\nprint(solution('1 5 6\\n
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 6\\\\n0000 FFFF 0000 0000 0000 0000\\\\nFFFF FFFF 0000 FFFF FFFF 0000\\\\n0000 0000 0000 FFFF 0000 0000\\\\n0000 FFFF FFFF FFFF FFFF 0000\\\\n0000 0000 0000 0000 0000 0000\") == \"2\"\nprint(solution(\"1 5 6\\\\n0000 FFFF 0000 0000 0000 0000\\\\nFFFF FFFF 0000 FFFF FFFF 0000\\\\n0000 0000 0000 FFFF 0000 0000\\\\n0000 FFFF FFFF FFFF FFFF 0000\\\\n0000 0000 0000 0000 0000 0000\"))\n"
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000\") == \"2\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\nS -> aSb\nS -> bSb\nS -> cSb\nS -> \n\n\"\"\") == \"aSb\"\n\nassert solution(\"\"\"\nS -> a\nS -> \n\n\"\"\") == \"a\"\n\nassert solution(\"\"\"\nS -> abcde\n\n\"\"\") == \"NONE\"\n\nassert solution(\"\"\"\nS -> a\nS -> b\nS -> c\nS -> d\nS -> e\nS -> \n\n\"\"\") == \"abcde\"\n\nassert solution(\"\"\"\nS -> ab\nS -> cd\nS -> \n\n\"\"\") == \"NONE\""
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nA -> B\\nB -> C\\nC -> a\\nB -> b\\nA -> A\\n\") == 'AB'\nassert solution(\"5\\nA -> B\\nB -> C\\nC -> a\\nB -> b\\n\\nA -> A\\n\") == 'A'\nassert solution(\"5\\nA -> B\\nB -> C\\nC -> a\\nB -> b\\n\\nB -> B\\n\") == 'B'\n"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS ->\") == \"abaaba\"\nassert solution(\"3\\nA -> a\\nB -> b\\nS -> A\\nS -> B\") == \"A\"\nassert solution(\"2\\nA -> a\\nA -> A\\nS -> A\\nS -> B\") == \"A\"\nassert solution(\"4\\nA -> a\\nA -> B\\nB -> a\\nB -> B\\nS -> A\\nS -> B\") == \"B\"\nassert solution(\"5\\nA -> a\\nA -> B\\nB -> a\\nB -> B\\nS -> A\\nS -> B\") == \"B\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n\"\"\") == 'abaaba'\nassert solution(\"\"\"\nS -> aS\nS -> bS\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n\"\"\") == 'NONE'\nassert solution(\"\"\"\nS -> aS\nS -> bS\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n\"\"\") == 'abbbbbbbbbbbbbbbbba'\nassert solution(\"\"\"\nS -> aS\nS -> bS\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n\"\"\") == 'a'\nassert solution(\"\"\"\nS -> aS\nS -> bS\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n\"\"\") == 'NONE'\n"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS ->\") == \"abaaba\"\nassert solution(\"10\\nS -> a\\nS -> b\\nS -> \\nS -> aa\\nS -> bb\\nS -> \\nS -> ab\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\nS -> bb\\nS -> \\nS -> a\\nS -> b\\nS -> aa\\"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1 S -> a\n2 S -> b\n3 S -> S S\n4 S -> SS\n5 S ->\n6 S ->\n7 SS -> S\n8 S ->\n9 S -> S\n10 S -> S S\n11 S ->\n12 S -> S S\n13 S -> S\n14 S -> S\n15 S ->\n16 S -> S\n17 S -> S S\n18 S -> S\n19 S ->\n20 S -> S S\n21 S -> S\n22 S ->\n23 S -> S\n24 S -> S\n25 S -> S\n26 S ->\n27 S ->\n28 S -> S\n29 S ->\n30 S ->\n31 S -> S\n32 S -> S\n33 S ->\n34 S ->\n35 S -> S\n36 S -> S\n37 S ->\n38 S ->\n39 S -> S\n40 S ->\n41 S -> S\n42 S -> S\n43 S ->\n44 S -> S\n45 S ->\n46 S ->\n47 S -> S\n48 S ->\n49 S ->\n50 S ->\n51 S ->\n52 S ->\n53 S ->\n54 S ->\n55 S ->\n56 S ->\n57 S ->\n58 S ->\n59 S ->\n60 S ->\n61 S ->\n62 S ->\n63 S ->\n64 S ->\n65 S ->\n66 S ->\n67 S ->\n68 S ->\n69 S ->\n70 S ->\n71 S ->\n72 S ->\n73 S ->\n74 S ->\n75 S ->\n76 S ->\n77 S ->\n78 S ->\n79 S ->\n80 S ->\n81 S ->\n82 S ->\n83 S ->\n84 S ->\n85 S ->\n86 S ->\n87 S ->\n88 S ->\n89 S ->\n90 S ->\n91 S ->\n92 S ->\n93 S ->\n94 S ->\n95 S ->\n96 S ->\n97 S ->\n98 S ->\n99 S ->\n100 S ->\n101 S ->\n102 S ->\n103 S ->\n104 S ->\n105 S ->\n106 S ->\n107 S ->\n108 S ->\n109 S ->\n110 S ->\n111 S ->\n112 S ->\n113 S ->\n114 S ->\n115 S ->\n116 S ->\n117 S ->\n118 S ->\n119 S ->\n120 S ->\n121 S ->\n122 S ->\n123 S ->\n124 S ->\n125 S ->\n126 S ->\n127 S ->\n128 S ->\n129 S ->\n130 S ->\n131 S ->\n132 S ->\n133 S ->\n134 S ->\n135 S ->\n136 S ->\n137 S ->\n138 S ->\n139 S ->\n140 S ->\n141 S ->\n142 S ->\n143 S ->\n144 S ->\n145 S ->\n146 S ->\n147 S ->\n148 S ->\n149 S ->\n150 S ->\n151 S ->\n152 S ->\n153 S ->\n154 S ->\n155 S ->\n156 S ->\n157 S ->\n158 S ->\n159 S ->\n160 S ->\n161 S ->\n162 S ->\n163 S ->\n164 S ->\n165 S ->\n166 S ->\n167 S ->\n168 S ->\n169 S ->\n170 S ->\n171 S ->\n172 S ->\n173 S ->\n174 S ->\n175 S ->\n176 S ->\n177 S ->\n178 S ->\n179 S ->\n180 S ->\n181 S ->\n182 S ->\n183 S ->\n184 S ->\n185 S ->\n186 S ->\n187 S ->\n188 S ->\n189 S ->\n190 S ->\n191 S ->\n192 S ->\n193 S ->\n194 S ->\n195 S ->\n196 S ->\n197 S ->\n198 S ->\n199 S ->\n200 S ->\n201 S ->\n202 S ->\n203 S ->\n204 S ->\n205 S ->\n206 S ->\n207 S ->\n208 S ->\n209 S ->\n210 S ->\n211 S ->\n"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nS -> aS\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS ->\") == \"abaaba\"\nassert solution(\"10\\nS -> AAa\\nS -> a\\nS -> BBbb\\nS -> b\\nS -> BBb\\nS -> aBB\\nS -> aBB\\nS -> AAa\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBbb\\nS -> AAa\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBbb\\nS -> AAa\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBbb\\nS -> AAa\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> BBbb\\nS -> AAa\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS -> aBB\\nS -> BBb\\nS -> BBb\\nS"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS ->\") == \"abaaba\"\nassert solution(\"3\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS ->\") == \"NONE\"\nassert solution(\"4\\nS -> a\\nS -> b\\nS -> \\nS ->\") == \"NONE\"\nassert solution(\"7\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS ->\") == \"ab\"\nassert solution(\"5\\nS -> a\\nS -> b\\nS -> \\nS ->\") == \"NONE\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> ') == 'abaaba'\nassert solution('5\\nS -> a\\nS -> b\\nS -> \\nS -> ') == 'NONE'\n\nassert solution('100\\nS -> aSb\\nS -> a\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\nS -> a\\nS -> b\\nS -> b\\nS -> a\\n"
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> ') == 'abaaba'\nassert solution('6\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> ') == 'bSb'\nassert solution('6\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> ') == 'abaaba'\n\n\"\"\"\n\nfrom itertools import chain\n"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'''\n5\n4 5 0 2\n1 3 7\n2 0\n4\n''') == 4\n\n'''\n5\n4 5 0 2\n1 3 7\n2 0\n4\n'''\n\nassert solution(\n'''\n5\n4 5 0 2\n1 3 7\n2 0\n4\n''') == 4\n\n'''\n4\n4 5 0 2\n1 3 7\n2 0\n4\n'''\n\nassert solution(\n'''\n4\n4 5 0 2\n1 3 7\n2 0\n4\n''') == 4\n\n'''\n2\n4 5 0 2\n1 3 7\n2 0\n4\n'''\n"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n\") == '4'\n\nassert solution(\"5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n\") == '4'\n\nassert solution(\"5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n\") == '4'\n\nassert solution(\"5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n\") == '4'\n\nassert solution(\"5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n\") == '4'"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3 7\\n2 0\\n4') == '4'\n\"\"\"\n\nimport sys\n\ninputs = []\nfor line in sys.stdin:\n    inputs.append(line.rstrip('\\n'))\n\nn = int(inputs[0])\n\ndistances = []\nfor i in range(n - 1):\n    temp = inputs[1 + i].split(' ')\n    distances.append(list(map(int, temp)))"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n') == '4'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n4 5 0 2\\n1 3 7\\n2 0\\n4') == '4'\nassert solution('5\\n2 6 8\\n1 5 2\\n2 3 7\\n4') == '2'\nassert solution('5\\n1 2\\n2 3 7\\n4') == '2'\n"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 0 2\\n1 3 7\\n2 0\\n4\") == '4'\n"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('12') == '12'\nassert solution('100') == '100'\nassert solution('100 100') == '100'\n"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n\") == \"4\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 0 2\\n1 3 7\\n2 0\\n4\\n\") == \"4\"\n\"\"\"\n\n\"\"\"\n\u9996\u5148\u6c42\u51fa\u6240\u6709\u70b9\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u904d\u5386\u6240\u6709\u8ddd\u79bb\uff0c\u8fdb\u884c\u4e8c\u5206\u67e5\u627e\u3002\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(10 ** 6)\n\ndis = []\n\nmax_num = 1e9\n"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"GO FOR IT\"\n\nSample Input:\n2 1\n4 4\nWWWW\nWSBB\nWWWW\nWWWG\nSample Output:\nNO CHANCE"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'NO CHANCE'\nassert solution('1 1\\n2 2\\n3 3\\n3 2\\n3 1') == 'NO WAY'\nassert solution('1 1\\n4 4\\n1 1\\n1 1') == 'SUCCESS'\nassert solution('2 2\\n3 4\\n4 2\\n3 3') == 'SUCCESS'\nassert solution('1 1\\n4 4\\n1 1\\n1 1') == 'SUCCESS'\n"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(read()) == EXPECTED\n\nprint(solution(read()))\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG') == 'GO FOR IT'\nassert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG') == 'NO CHANCE'\n\"\"\""
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG\n\"\"\") == 'GO FOR IT'\n\nassert solution(\"\"\"\n1 1\n1 1\nSSS\n\"\"\") == 'NO WAY'\n\nassert solution(\"\"\"\n2 3\n4 4\nWWW\nBWB\nWWW\nBWB\n\"\"\") == 'SUCCESS'\n\n\"\"\"\nThe rules of the game say that you\u2019re allowed to walk on white tiles, but not on black tiles.\n\nSo in this case, it is the player who moves first who is allowed to do the next move. In this game, it is the Elsa who moves first, so she will be allowed to do the next move.\n\nIn the example above, the Lava tile in the bottom left corner will be safe for both players.\n\nSo we\u2019ll call the rule that says that it is allowed to move in all directions.\n\nAs we have seen above, the maximum step length of Elsa is $2$. So the maximum possible distance that Elsa can travel in one move is a $2$ tile away from the goal.\n\nThis means that the maximum possible step length that the father can travel is $2$ tiles away from the lava tile in the bottom right corner, which is a $2$ tile away from the goal.\n\nSo if the distance to the goal is exactly a $2$ tile away, the game is over.\n\nWe can see that this rule will mean that it is impossible for the father to reach the goal before the game is over.\n\nIt is not impossible, but it is not very interesting.\n\nSo how could this rule change so that the game could be interesting?\n\nIf we change the rule so that it is allowed to move in all directions, then it is possible for both players to move in all directions.\n\nFor example, in the following map, the father can move all the way to the right.\n\n-----Input-----\n5 5\nWWWW\nWWWW\nWBBB\nWWWW\nWWWW\n-----Output-----\nSUCCESS\n\nThe rules of this game are not restricted in any way, and we can therefore allow the players to move in all directions.\n\nSo this means that this is a valid Lava game and the first player can move to any tile.\n\nIt is also possible for the second player to move to any tile.\n\nThis means that we can play the game on any map and the game will always be over.\n\nFor the following example, the game is not over:\n\n-----Input-----\n2 3\n4 4\nWBB\nWWW\n-----Output-----\nNO WAY\n\nBut in the following example, the game is over:\n\n-----Input-----\n2 3\n4 4\nWBB\nWWW\n-----Output-----\nSUCCESS\n\"\"\"\n\n################################################################\n\"\"\"\nThe rules of the game say that you\u2019re allowed to walk on white tiles, but not on black tiles.\n\nSo in this case, it is the player who moves first who is allowed to do the next move. In this game, it is the Elsa who moves first, so she will be allowed to do the next move.\n\nIn the example above, the Lava tile in the bottom left corner will be safe for both players.\n\nSo we\u2019ll call the rule that says that it is allowed to move in all directions.\n\nAs we have seen above, the maximum step length of Elsa is $2$. So the maximum possible distance that Elsa can travel in one move is a $2$ tile away from the goal.\n\nThis means that the maximum possible step length that the father can travel is $2$ tiles away from the lava tile in the bottom right corner, which is a $2$ tile away from the goal.\n\nSo if the distance to the goal is exactly a $2$ tile away, the game is over.\n\nIt is not impossible, but it is not very interesting.\n\nSo how could this rule change so that the game could be interesting?\n\nIf we change the rule so that it is allowed to move in all directions, then it is possible for both players to move in all directions.\n\nFor example, in the following map, the father can move all the way to the right.\n\n-----Input-----\n5 5\nWWWW\nWWWW\nWBBB\nWWWW\nWWWW\n-----Output-----\nSUCCESS\n\nThe rules of this game are not restricted in any way, and we can therefore allow the players to move in all directions.\n\nSo this means that this is a valid Lava game and the first player can move to any tile.\n\nIt is also possible for the second player to move to any tile.\n\nThis means that we can play the game on any map and the game will always be over.\n\nFor the following example, the game is not over:\n\n-----Input-----\n2 3\n4 4\nWBB\nWWW\n-----Output-----\nNO WAY\n\nBut in the following example, the game is over:\n\n-----Input-----\n2 3\n4 4\nWBB\nWWW\n-----Output-----\nSUCCESS\n\"\"\"\n################################################################\n\"\"\"\nThe rules of the game say that you\u2019re allowed to walk on white tiles, but not on black tiles.\n\nSo in this case, it is the player who moves first who is allowed to do the next move. In this game, it is the Elsa who moves first, so she will be allowed to do the next move.\n\nIn the example above, the Lava tile in the bottom left corner will be safe for both players.\n\nSo we\u2019ll call the rule that says that it is allowed to move in all directions.\n\nAs we have seen above, the maximum step length of Elsa is $2$. So the maximum possible distance that Elsa can travel in one move is a $2$ tile away from the goal.\n\nThis means that the maximum possible step length that the father can travel is $2$ tiles away from the lava"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG') == 'GO FOR IT'\nassert solution('1 1\\nW\\nW') == 'NO CHANCE'\nassert solution('2 2\\nWW\\nW') == 'SUCCESS'\n\"\"\""
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG\n''') == \"GO FOR IT\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG') == 'GO FOR IT'\n"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == \"NO WAY\"\nassert solution('\\n') == \"SUCCESS\"\nassert solution('\\n\\n') == \"NO CHANCE\"\n\n\"\"\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"GO FOR IT\"\nassert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"GO FOR IT\"\nassert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"GO FOR IT\"\nassert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"GO FOR IT\""
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 900\\n800 700 400 300 200') == '2243'\n\"\"\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 900\\n800 700 400 300 200') == '2243'\n\"\"\"\n\nm, n = map(int, input().split(' '))\na = [int(c) for c in input().split(' ')]"
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 900\\n800 700 400 300 200') == '2243'\nassert solution('3 1000\\n900 600 0 300') == '900'\n\n\"\"\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 900\\n800 700 400 300 200\") == \"2243\"\n\"\"\""
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 900\\n800 700 400 300 200\") == \"2243\"\n\"\"\"\n\nimport numpy\n\nN, M = map(int, input().split())\n\nnumbers = list(map(int, input().split()))"
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 900\n800 700 400 300 200''') == '2243'\n\n\"\"\"\n\nimport sys\nimport typing\nimport math"
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8\\n300 700 200 400') == '1604'\nassert solution('5 8\\n900 800 700 400 300') == '908'\nassert solution('2 8\\n0 0') == '0'\nassert solution('3 9\\n0 1 0') == '1'\nassert solution('2 8\\n0 0') == '0'\n"
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 900\\n800 700 400 300\") == '2243'\nassert solution(\"5 900\\n800 700 400 300 200\") == '2450'\n"
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 900\\n800 700 400 300 200\") == \"2243\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 900\n800 700 400 300 200''') == '2243'\nassert solution('''4 500\n250 350 400 250''') == '3000'\n\n\"\"\"\n\nimport sys\nimport math\n\n\"\"\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n1') == 'yes\\n'\nassert solution('1\\n1\\n2\\n1\\n1\\n1') == 'yes\\nyes\\nno\\n'\nassert solution('1\\n1\\n2\\n1\\n1\\n1\\n1') == 'yes\\nno\\nno\\nno\\n'\n\nSample Input:\n10 5\n? 1 3\n= 1 8\n= 3 8\n? 1 3\n= 1 8\n= 3 8\n? 1 3\n= 1 8\n= 3 8\n? 1 3\n= 1 8\n= 3 8\n? 1 3\n= 1 8\n= 3 8\nSample Output:\nno\nyes\nyes\nno\nno\n'''"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4\\n? 1 3\\n= 1 8\\n= 3 8\") == \"no\\nyes\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('aabb') == 'aba'\nassert solution('aaabb') == 'aabba'\n'''"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '0 2\\n2 1'\n\"\"\"\n\n\n\"\"\"\n@param - stdin - str - \n@return - str - \n\"\"\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n? 1 3\\n= 1 8\\n= 3 8') == 'no yes'\n\"\"\""
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''10 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3''') == 'no yes'\n\nassert solution('''10 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3''') == 'no yes'\n\nassert solution('''10 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3''') == 'no yes'\n\nassert solution('''10 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3''') == 'no yes'\n\nassert solution('''10 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3''') == 'no yes'"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3\\n= 1 8\\n= 3 8') == 'no'\n\nassert solution('1 3\\n= 1 8\\n= 3 8\\n? 1 3') == 'yes'\n\nassert solution('1 3\\n= 1 8\\n= 3 8\\n? 1 3\\n= 1 8\\n= 3 8') == 'yes'\n\nassert solution('1 3\\n= 1 8\\n= 3 8\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3\\n= 1 8\\n= 3 8') == 'no'\n\nassert solution('1 3\\n= 1 8\\n= 3 8\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3\\n= 1 8\\n= 3 8') == 'no'"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a\\nb') == 'a\\nb'\n'''\n\nimport sys\ninput = sys.stdin.readlines\n\nN, Q = list(map(int, input().split()))\n\nbase_set = set([i for i in range(N)])\n\nfor _ in range(Q):\n    line = input().split()\n    if line[0] == '=':\n        a = int(line[1])\n        b = int(line[2])\n        base_set.discard(a)\n        base_set.discard(b)\n    else:\n        a = int(line[1])\n        b = int(line[2])\n        print('yes' if a in base_set and b in base_set else 'no')\n"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 8\\n1 3') == 'no'\nassert solution('0 8\\n1 3\\n= 3 9') == 'yes'\nassert solution('0 8\\n1 3\\n= 3 9\\n? 9 2') == 'yes'\nassert solution('0 8\\n1 3\\n= 3 9\\n? 9 2\\n= 2 10') == 'no'\nassert solution('0 8\\n1 3\\n= 3 9\\n? 9 2\\n= 2 10\\n= 9 9') == 'no'\n"
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\n'''"
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == '2'\n\"\"\""
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 5 4 8 3') == 2\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 5 4 8 3\") == 2\n\"\"\"\n\nimport math"
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == '2'\n\"\"\""
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == 2\n\"\"\"\n\nimport unittest\n\nfrom typing import List\n"
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == 2\n"
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 5 4 8 3\") == \"2\"\nassert solution(\"10 5 4 8 3\") == \"2\"\n\nassert solution(\"10 5 4 8 3\") == \"2\"\nassert solution(\"10 5 4 8 3\") == \"2\"\n\nassert solution(\"10 5 4 8 3\") == \"2\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 5 4 8 3\\n1 2 3 4 5\") == \"2\"\n\"\"\""
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 127') == '1083'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 127') == '1083'"
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 127\") == \"1083\"\nassert solution(\"2 127\") == \"3359\"\nassert solution(\"5 127\") == \"1489\"\nassert solution(\"1 10^9\") == \"1055\"\nassert solution(\"2 10^9\") == \"1169\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 127\") == \"1083\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 127\") == \"1083\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1 127''') == '1083'\nprint(solution(stdin.rstrip()))\n\n-----"
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n------Solution------\n\"\"\"\n\nfrom math import log10, ceil, log\n"
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 123') == '69'\nassert solution('1 10') == '10'\nassert solution('5 12') == '24'\nassert solution('3 7') == '8'\n\"\"\"\nimport math"
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 127\") == \"1083\""
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 127\") == \"1083\"\nprint(solution(\"1 127\"))\n\n----\n\n\nfunction f(X):\n    iterations := 0\n    while X is not 1:\n        if X is even:\n            X := X / 2\n        else:\n            X := X + 1\n        iterations := iterations + 1\n    return iterations\n\nprint(f(1))\n\n-----"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?') == '2'\nprint(solution('4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?'))\n"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African\") == '2.0'\nassert solution(\"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African\") == '2.0'\nassert solution(\"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African\") == '2.0'\nassert solution(\"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African\") == '2.0'\nassert solution(\"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African\") == '2.0'\n"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?\") == 2.0\nprint(\"Passed all tests\")\n\n-----Problem-----\nFor the purposes of this problem, a valid word is a nonempty string that contains no consecutive spaces and no consecutive spaces.\n\nA nonempty string is called a non-word if it contains consecutive spaces, or a non-word if it contains consecutive spaces.\n\nGiven a string text that consists of only spaces and non-words, you must modify the string so that it becomes a valid word.\n\nIf text is already a valid word, you must do nothing to it; if it is not, you must change it into a valid word.\n\nA valid word is guaranteed to be unique.\n\n-----Test data-----\nSample Input 1:\n  3 3\n  This is a valid word, but an invalid word.\n  This is a valid word, but an invalid word.\n  This is a valid word, but an invalid word.\n\nSample Output 1:\n  This is a valid word, but an invalid word.\n  This is a valid word, but an invalid word.\n  This is a valid word, but an invalid word.\n\nSample Input 2:\n  4 4\n  This is a valid word, but an invalid word.\n  This is a valid word, but an invalid word.\n  This is a valid word, but an invalid word.\n  This is a valid word, but an invalid word.\n\nSample Output 2:\n  This is a valid word, but an invalid word.\n  This is a valid word, but an invalid word.\n  This is a valid word, but an invalid word.\n  This is a valid word, but an invalid word.\n\n-----Hint-----\nHow can you tell if a word is valid or not?\n\"\"\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 5\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n\"\"\") == \"2.0000000000\"\n\nassert solution(\"\"\"\n1 1\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n\"\"\") == \"2.0000000000\"\n\nassert solution(\"\"\"\n4 2\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n\"\"\") == \"4.0000000000\"\n\nassert solution(\"\"\"\n4 2\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n\"\"\") == \"4.0000000000\"\n\nassert solution(\"\"\"\n3 3\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n\"\"\") == \"2.50000000\""
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?\\n') == '2.0000000000'\n\nprint(solution(stdin))\n-----Note-----\n\nThe first line of the input contains two integers $t$ and $n$ (1 \\leq t \\leq 100, 1 \\leq n \\leq 100\\ 000), the duration of the quiz and the number of questions.\n\nThe second line of the input contains $t$ questions, each on a separate line. Each of the following $n$ lines contains a question, which is a space-separated list of words terminated by a question mark, and an answer, which is a single word.\n\nEach word is a sequence of non-space ASCII printable characters, between the ASCII values of \u2018!\u2019 and \u2018$\\sim $\u2019. Only the last word of a question has a question mark (\u2018?\u2019). You can assume that no question is a prefix of another and that punctuation marks are part of a word. Words spelled with different upper/lower case are assumed to be different.\n\nIt is guaranteed that the total number of word characters is at most $100\\ 000$.\n\nIt is guaranteed that the total number of lines in the input is at most $100\\ 000$.\n\nThe input is guaranteed to be valid and a valid input to the problem.\n\n\"\"\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?') == '2.0'\n"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African\") == '2.0'\nassert solution(\"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African\") == '2.0'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n1\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n''') == '2.0000000000'\n\nassert solution('''\n2\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n''') == '0.66'\n\nassert solution('''\n3\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n''') == '0.44'\n\nassert solution('''\n2\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n''') == '0.66'\n\nassert solution('''\n1\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n''') == '0.66'"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?') == '2.0000000000'\n\n\"\"\"\nimport numpy as np\nfrom time import sleep"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?\") == \"2.0000000000\"\nassert solution(\"1 1\\nWho's there? Nobody\") == \"0.0\"\n\"\"\"\nfrom collections import Counter, OrderedDict\nfrom functools import lru_cache\nfrom itertools import zip_longest\n"
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey''') == 'POSSIBLE'\n\nassert solution('''3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey''') == 'IMPOSSIBLE'\n\nassert solution('''3 6\nlion 3 monkey penguin lion\npenguin 1 monkey''') == 'FALSE ALARM'\n\nassert solution('''3 6\npenguin 1 monkey\nlion 3 monkey penguin lion\npenguin 1 monkey''') == 'FALSE ALARM'\n\nassert solution('''3 6\nlion 3 monkey penguin lion\npenguin 1 monkey''') == 'FALSE ALARM'"
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\n'\n                'penguin 1 monkey') == 'POSSIBLE'\nassert solution('3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\n'\n                'penguin 1 monkey\\nmonkey 2 lion penguin') == 'IMPOSSIBLE'\nassert solution('3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\n'\n                'penguin 1 monkey\\nmonkey 2 lion penguin') == 'FALSE ALARM'\nassert solution('3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\n'\n                'penguin 1 monkey\\nlion 3 monkey penguin lion') == 'IMPOSSIBLE'\nassert solution('3 6\\nlion 3 monkey penguin lion\\n'\n                'penguin 1 monkey') == 'POSSIBLE'\n"
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey') == 'POSSIBLE'\nassert solution('3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey') == 'POSSIBLE'\nassert solution('3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey') == 'POSSIBLE'\nassert solution('3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey') == 'POSSIBLE'\nassert solution('3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey') == 'POSSIBLE'\n"
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\n\") == \"POSSIBLE\"\nassert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\n\") == \"POSSIBLE\"\nassert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\n\") == \"POSSIBLE\"\n\nassert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\n\") == \"POSSIBLE\"\nassert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\n\") == \"POSSIBLE\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey''') == 'POSSIBLE'\nassert solution('''3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey''') == 'IMPOSSIBLE'\nassert solution('''3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey''') == 'FALSE ALARM'\n\nassert solution('''3 3\ncat 2 dog\ndog 1 cat''') == 'IMPOSSIBLE'\nassert solution('''3 3\ndog 2 cat\ncat 1 dog''') == 'FALSE ALARM'\n"
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\") == \"POSSIBLE\"\nassert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\")!= \"IMPOSSIBLE\"\nassert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\")!= \"FALSE ALARM\""
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\\n monkey 2 lion penguin\\nlion 3 monkey penguin lion\\n penguin 1 monkey\\n\") == \"POSSIBLE\"\nassert solution(\"3 6\\n lion 2 monkey lion\\nlion 3 monkey penguin lion\\n penguin 1 monkey\\n\") == \"IMPOSSIBLE\"\nassert solution(\"3 6\\n penguin 2 lion monkey lion\\nlion 3 monkey penguin lion\\n penguin 1 monkey\\n\") == \"FALSE ALARM\"\n\"\"\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\") == \"POSSIBLE\"\nassert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\") == \"POSSIBLE\"\nassert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\") == \"POSSIBLE\"\nassert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\") == \"POSSIBLE\"\nassert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\") == \"POSSIBLE\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey') == 'POSSIBLE'\nassert solution('2 3\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey') == 'POSSIBLE'\nassert solution('2 3\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey') == 'POSSIBLE'\nassert solution('2 3\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey') == 'POSSIBLE'\nassert solution('2 3\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey') == 'POSSIBLE'\n"
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nn, m = [int(x) for x in stdin.readline().split(' ')]\n\nl = {}\nfor i in range(n):\n    k = stdin.readline().split(' ')\n    if k[0] in l:\n        l[k[0]] += int(k[1])\n    else:\n        l[k[0]] = int(k[1])\n\nfor i in range(m):\n    k = stdin.readline().split(' ')\n    if k[0] in l:\n        if l[k[0]] == 0:\n            print('FALSE ALARM')\n            break\n        l[k[0]] -= 1\n    else:\n        if k[1] not in l:\n            print('IMPOSSIBLE')\n            break\n        else:\n            if l[k[1]] == 0:\n                print('FALSE ALARM')\n                break\n            l[k[1]] += 1\n    if sum(l.values()) == 0:\n        print('POSSIBLE')\n"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5\\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\n\n\"\"\"\n\n\nimport math\nfrom operator import itemgetter\n\n\nclass Triplet():\n    def __init__(self, x, n, m):\n        self.x = x\n        self.n = n\n        self.m = m\n\n    def __repr__(self):\n        return f\"{self.x}({self.n}){self.m}({self.n + self.m})\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == '''triple correlation 4(1)4(3)3 found\ntriple correlation 4(1)4(3)3 found\ntriple correlation 4(1)4(3)3 found\ntriple correlation 4(1)4(3)3 found\ntriple correlation 4(1)4(3)3 found\n'''\n\n'''\nIt is possible that triple correlations are present in multiple places in the sequence. If so, return the one that occurs earliest. If there are multiple triple correlations, return the one that occurs earliest in the sequence. If all triple correlations are tied by time, then return the one that occurs earliest in the list of triple correlations. If there are multiple triple correlations tied by earliest time, then return the one that occurs earliest in the sequence. If there are multiple triple correlations tied by earliest location, then return the one that occurs earliest in the list of triple correlations.\n'''"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin), file=sys.stdout)\n\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Union, NamedTuple, Iterable, Iterator, Callable, Optional, Sequence\nfrom math import ceil\nfrom itertools import combinations, permutations\nfrom heapq import heappush, heappop\n\n\nclass TripleCorrelation(NamedTuple):\n    a_offset: int\n    b_offset: int\n    c_offset: int\n    a: int\n    b: int\n    c: int\n\n    @property\n    def score(self) -> Tuple[int, int, int]:\n        return self.a, self.b, self.c\n\n    @property\n    def score_list(self) -> List[int]:\n        return list(self.score)\n\n    def __repr__(self) -> str:\n        return f\"triple correlation ({self.a}, {self.b}, {self.c})\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\nassert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\nassert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\nassert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\nassert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\n"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found\\n'\n"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\nassert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\nassert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\nassert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\nassert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\n"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\\n\"\n\"\"\"\n\nfrom typing import List, Optional, Tuple, Callable, TypeVar, Set, Dict\nimport math\nimport copy"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1\\n39\\n10\\n40') == '40.5'\n\n--- Part Two ---\nEagleton is a bit of a country\u2019s middle class, so the government decided to build a 2-story building for every citizen. All citizens have agreed to move into the 2-story building in their house if the height of their house is at least as tall as the height of the tallest house. Otherwise, they will stay in their flat. The government is still building the tallest house, so it is up to you to figure out when it will be completed.\n\nThe first line of input contains a single integer, $N$, the number of citizens. The next line contains $N$ integers, $h_1, h_2,..., h_N$, the heights of the citizens\u2019 houses.\n\nPrint the number of citizens who moved into the 2-story building.\n\n-----Input-----\n4\n3 3 2 2\nSample Output:\n2\n\"\"\"\n\nimport sys\nimport math\nimport numpy as np\n"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1\\n39\\n10\\n40\\n') == '40.5'\n\"\"\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n39\\n10\\n40\\n') == '40.5'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n39\\n10\\n40') == '40.5'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n39\\n10\\n40\") == \"40.5\"\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 1\n39\n10\n40\n''') == '40.5'"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n39\\n10\\n40') == '40.5'\nprint(solution(input()))\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n39\\n10\\n40\\n\") == \"40.5\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n39\\n10\\n40\") == \"40.5\"\nassert solution(\"10\\n20\\n30\\n40\\n50\\n60\\n70\\n80\\n90\\n100\\n110\\n120\\n130\\n140\\n150\\n160\\n170\\n180\\n190\\n200\\n110\\n120\\n130\\n140\\n150\\n160\\n170\\n180\\n190\\n200\\n110\\n120\\n130\\n140\\n150\\n160\\n170\\n180\\n190\\n200\") == \"110.5\"\nassert solution(\"100\\n10\\n20\\n30\\n40\\n50\\n60\\n70\\n80\\n90\\n100\\n110\\n120\\n130\\n140\\n150\\n160\\n170\\n180\\n190\\n200\") == \"110.5\"\nassert solution(\"2 2\\n2\\n1\") == \"2\"\nassert solution(\"10\\n20\\n30\\n40\\n50\\n60\\n70\\n80\\n90\\n100\\n110\\n120\\n130\\n140\\n150\\n160\\n170\\n180\\n190\\n200\") == \"110.5\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n39\\n10\\n40\") == \"40.5\"\n\nSample Input 2:\n100000 1\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n10\n0.1\n"
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"1987\"\nassert solution(\"4 6\\n1 2 1986\\n2 3 1986\\n1 3 1986\\n2 4 1986\\n1 4 1986\\n3 4 1986\") == \"Impossible\"\nassert solution(\"4 6\\n1 2 1988\\n2 3 1987\\n1 3 1988\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"Impossible\"\nassert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1988\\n1 4 1987\\n3 4 1987\") == \"1986\"\nassert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1988\\n1 4 1987\\n3 4 1987\") == \"Impossible\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == 'Impossible'\n\"\"\"\n\n\nfrom collections import defaultdict\n\nn, c = map(int, input().split())\nedges = []\nfor i in range(c):\n    a, b, y = map(int, input().split())\n    edges.append((a, b, y))\nedges = sorted(edges, key=lambda x: x[2])\n\npre = defaultdict(set)\npost = defaultdict(set)\nfor i in range(c):\n    a, b, y = edges[i]\n    if y < 2008:\n        pre[a].add(b)\n        post[b].add(a)\n    else:\n        pre[b].add(a)\n        post[a].add(b)\n\nres = []\nyear = {x: False for x in range(2008, n + 1)}\nfor i in range(c):\n    a, b, y = edges[i]\n    if not year[a] and not year[b]:\n        res.append(y)\n        year[a] = True\n        year[b] = True\n    elif not year[a]:\n        for u in pre[b]:\n            if u not in post[a] and not year[u]:\n                res.append(y)\n                year[u] = True\n                break\n    elif not year[b]:\n        for u in post[a]:\n            if u not in pre[b] and not year[u]:\n                res.append(y)\n                year[u] = True\n                break\n"
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == 'Impossible'\n\nassert solution('4 6\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == '1987'\n\n\"\"\"\n\nfrom math import gcd\nfrom functools import reduce\nfrom typing import Callable, List, Tuple, Dict\n"
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == '1987'\nassert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == 'Impossible'\nassert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == 'Impossible'\n\n-----Notes-----\n\n\"\"\""
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"Impossible\"\n\"\"\"\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"Impossible\"\nassert solution(\"4 6\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == 'Impossible'\n\"\"\"\n\nimport sys\nimport bisect\n\nN, C = list(map(int, sys.stdin.readline().split()))\nmeetings = []\nfor _ in range(C):\n    a, b, y = list(map(int, sys.stdin.readline().split()))\n    bisect.insort(meetings, (y, a, b))\n\nmeetings.sort()\n\nj = 0\nwhile j < N:\n    low, high = meetings[j][0], meetings[j + 1][0]\n    while j < N - 1 and meetings[j + 1][0] <= high:\n        j += 1\n    if j < N - 1:\n        low, high = min(low, meetings[j + 1][0]), max(low, meetings[j + 1][0])\n    if j < N - 2:\n        while j < N - 2 and meetings[j + 2][0] <= high:\n            j += 1\n    if j < N - 2:\n        low, high = min(low, meetings[j + 2][0]), max(low, meetings[j + 2][0])\n    if j < N - 3:\n        while j < N - 3 and meetings[j + 3][0] <= high:\n            j += 1\n    if j < N - 3:\n        low, high = min(low, meetings[j + 3][0]), max(low, meetings[j + 3][0])\n    if j == N - 1:\n        low, high = min(low, meetings[j + 1][0]), max(low, meetings[j + 1][0])\n    j += 1\n    if low > high:\n        print(\"Impossible\")\n        sys.exit()\nprint(high)\n"
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == '1987'\n\n---Problem Name---\nFind Y\n---Problem Section---\nFind the year Y such that every pair of participants in the first part met for the first time before year Y, and every pair in the second part met for the first time in or after year Y. If no such year exists, print \u2019Impossible\u2019.\n\nYou can assume that every pair of participants in the list is distinct, and that participants appear in the list in the order in which they met, and that the first year in the list is greater than or equal to $1948$.\n\"\"\"\n\n\"\"\"\nx = [1,2,3,4,5,6,7,8,9,10]\nfor i in range(len(x)):\n    if x[i] == 5:\n        print(i)\n\"\"\""
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == 'Impossible'\nassert solution('4 5\\n1 2 1981\\n2 3 1981\\n1 3 1981\\n2 4 1981\\n1 4 1981') == '2006'\nassert solution('3 4\\n1 2 1981\\n2 3 1981\\n1 3 1981') == 'Impossible'\nassert solution('4 4\\n1 2 1981\\n2 3 1981\\n1 3 1981') == 'Impossible'\nassert solution('4 5\\n1 2 1981\\n2 3 1981\\n1 3 1981\\n2 4 1981\\n1 4 1981') == '2006'\n"
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 0 1\\n1 2\\nC 1 2\\nN 1 3\\nC 1 1\") == \"3\"\nassert solution(\"4 0 1\\n1 2\\nN 1 3\\nC 1 1\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 1\\n1 2\\nC 1 2\\nN 1 3\\nC 1 1\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\") == \"impossible\"\nassert solution(\"4 0 1\\nN 1 3\\nC 1 1\") == 3\n\"\"\"\n\n\n\n\"\"\"\n1. a ~ b \u307e\u3067\u306e\u4efb\u610f\u306e\u6570\u3092\u98db\u3073\u8d8a\u3048\u3066\u3082\u307e\u3068\u3081\u3089\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3044\u3002\n2. \n3.\n\"\"\"\nfrom collections import defaultdict\n\n\nN, s, t = map(int, input().split())\n"
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\") == \"impossible\"\n\nSample Input:\n4 0 1\nN 1 2\nN 1 3\nN 1 1\nC 1 1\nSample Output:\n3\n\nimport sys\nsys.setrecursionlimit(50000)"
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1') == 'impossible'\nassert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1') == '3'\nassert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 3') == '4'\nassert solution('4 0 1\\nN 1 2\\nC 1 3\\nN 1 3\\nC 1 3') == 'impossible'\nassert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 3') == '2'\n\n\"\"\"\n\n\nclass Airport:\n    def __init__(self, s, ds, od):\n        self.s = s\n        self.ds = ds\n        self.od = od\n\n    def __repr__(self):\n        return f'{self.s}, {self.ds}'\n\n\nclass Solution:\n    def __init__(self):\n        self.airports = []\n        self.flight_time = {}\n        self.connections = set()\n        self.nodes = set()\n        self.queue = []\n\n    def read_input(self, input_path):\n        with open(input_path) as input_file:\n            lines = input_file.readlines()\n\n        self.n = int(lines[0].strip().split()[0])\n        self.s = int(lines[0].strip().split()[1])\n        self.t = int(lines[0].strip().split()[2])\n\n        for line in lines[1:self.n + 1]:\n            s, ds = line.split()[0], line.split()[1:]\n            self.airports.append(Airport(s, ds, None))\n\n        for line in lines[self.n + 1:]:\n            od = line.split()[1:]\n            for pair in od:\n                a, b = pair.split(',')\n                a, b = int(a), int(b)\n                self.connections.add((a, b))\n\n    def compute_flight_time(self):\n        for i in range(self.n):\n            for j in range(self.n):\n                if i!= j:\n                    self.flight_time[i, j] = self.airports[i].ds[j]\n\n    def compute_flight_time_if_possible(self, s, t):\n        if s == t:\n            return 0\n\n        if s > t:\n            return -float('inf')\n\n        return self.flight_time[s, t]\n\n    def compute_min_flight_plan(self):\n        queue = self.queue\n        self.queue = []\n\n        while queue:\n            s, t, time = queue.pop(0)\n            time += self.compute_flight_time_if_possible(s, t)\n\n            if s > 0:\n                queue.append((s - 1, t, time))\n\n            if t < self.n - 1:\n                queue.append((s, t + 1, time))\n\n        return time if time < float('inf') else 'impossible'\n\n    def process_input(self):\n        for i, airport in enumerate(self.airports):\n            self.nodes.add(i)\n\n            for dst in airport.ds:\n                self.nodes.add(dst)\n\n            if airport.ds:\n                self.queue.append((0, i, 0))\n\n        self.compute_flight_time()\n\n    def output_solution(self, output_path):\n        with open(output_path, 'w') as output_file:\n            output_file.write(self.compute_min_flight_plan())\n\n    def solution(self, input_path, output_path):\n        self.read_input(input_path)\n        self.process_input()\n        self.output_solution(output_path)\n"
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\nSample Input:\n4 2 2\nN\nN 2\nN 3\nC 1 2\n2\nC\n3\n3\nC\nSample Output:\n2\n\n-----Test Case 1-----\nIn this test case, the output is \u201c2\u201d, as the flights are impossible.\n\n-----Test Case 2-----\nIn this test case, the output is \u201c3\u201d, as the flights are possible, as there are two flights from $0$ to $1$ and from $0$ to $2$.\n\n-----Test Case 3-----\nIn this test case, the output is \u201cimpossible\u201d, as no flight from $0$ to $1$ exists.\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\n-----My Solution-----\n\nBFS from the source to all destinations. Keep track of the min number of steps for each step from the source to each destination.\n\nIn the worst case, there are no direct flights between two airports, so we can never travel to any airport.\n\"\"\"\n\nfrom collections import deque\n\nclass Airport():\n    def __init__(self):\n        self.destination_list = []\n        self.neighbor_list = []\n\n    def add_destination(self, destination):\n        self.destination_list.append(destination)\n\n    def add_neighbor(self, neighbor):\n        self.neighbor_list.append(neighbor)\n\nclass Solution():\n    def airport_dist(self, airport):\n        dist = {airport: 0}\n        queue = deque([airport])\n        while queue:\n            airport = queue.popleft()\n            for neighbor in airport.neighbor_list:\n                if neighbor not in dist:\n                    dist[neighbor] = dist[airport] + 1\n                    queue.append(neighbor)\n        return dist\n        \n    def bfs_airport(self, source, destination):\n        airport = Airport()\n        airport.add_destination(destination)\n        airport.add_neighbor(source)\n        return self.airport_dist(airport)\n    \n    def solution(self, N: int, s: int, t: int):\n        dist = {s:0}\n        queue = deque([s])\n        while queue:\n            airport = queue.popleft()\n            for neighbor in airport.neighbor_list:\n                if neighbor not in dist:\n                    dist[neighbor] = dist[airport] + 1\n                    queue.append(neighbor)\n        \n        for destination in range(1, N + 1):\n            if destination not in dist:\n                return 'impossible'\n        \n        if t not in dist:\n            return 'impossible'\n        \n        return dist[t]\n        \ntest_input = '4 0 1\\nN\\n1 2\\nC\\n1 3\\nC\\n1 1'\ntest_output = 'impossible'\n\nsol = Solution()\nprint(sol.solution(4, 0, 1))\n\n\"\"\"\nSample Test Cases:\n\nSample Input 1:\n4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n\nSample Output 1:\n2\n\nSample Input 2:\n4 2 2\nN\nN 2\nN 3\nC 1 2\n2\nC\n3\n3\nC\n\nSample Output 2:\n3\n\nSample Input 3:\n4 0 1\nN\nN 2\nN 3\nC 1 2\n2\nC\n3\n3\nC\n\nSample Output 3:\nimpossible\n\"\"\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1') == 'impossible'\nassert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 2') == '3'\nassert solution('4 0 1\\nN 1 2\\nC 1 1\\nN 1 3\\nC 1 3') == '3'\nassert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 3\\nN 1 2') == '2'\nassert solution('4 0 1\\nN 1 2\\nC 1 1\\nN 1 3\\nC 1 2\\nN 1 4\\nC 1 1\\nN 1 1\\nC 1 2\\nN 1 1\\nC 1 3\\nN 1 4') == '4'\n"
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\") == \"impossible\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n\n----\n\n3 0 0\nN\nN\nN\nC 1 2\n\n3 1 1\n\n2 0 1\nN\nN\nN\nC 1 2\n\n1 1 1\n\n----\n4 1 1\nN\nN\nN\nN\nC 0 3\n\n2 0 1\nN\nN\nN\nN\nN\nC 0 1\n\n3 2 3\n\n4 0 1\nN\nN\nN\nN\nN\nC 0 2\n\n4 1 1\n\nSample Output:\n1\n1\n2\n2\n\nSample Input:\n4 0 1\nN\nN\nN\nN\nC 0 3\n\n2 0 1\nN\nN\nN\nN\nN\nC 0 1\n\n3 2 3\n\n4 0 1\nN\nN\nN\nN\nN\nC 0 2\n\n4 1 1\n\nSample Output:\nimpossible\n1\n1\n1\n1\n\n----\n5 2 1\nN\nN\nN\nN\nN\nC 0 3\n\n2 0 1\nN\nN\nN\nN\nN\nC 0 1\n\n3 2 3\n\n4 0 1\nN\nN\nN\nN\nN\nC 0 2\n\n4 1 1\n\n5 0 1\nN\nN\nN\nN\nN\nN\nC 1 1\n\n5 1 1\n\nSample Output:\n1\n1\n1\n1\nimpossible\n\n----\n8 1 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nC 0 5\n\n2 0 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nC 0 1\n\n3 2 3\n\n4 0 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nC 0 2\n\n4 1 1\n\n5 0 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nC 1 1\n\n5 1 1\n\n6 0 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nC 1 2\n\n6 1 1\n\nSample Output:\n1\n1\n1\n1\n1\n1\nimpossible\n\n----\n8 1 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nC 0 5\n\n2 0 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nC 0 1\n\n3 2 3\n\n4 0 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nC 0 2\n\n4 1 1\n\n5 0 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nC 1 2\n\n5 1 1\n\n6 0 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nC 1 2\n\n6 1 1\n\nSample Output:\nimpossible\nimpossible\n1\n1\n1\n1\n1\n1\nimpossible\n\n----\n4 3 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nC 0 5\n\n2 0 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nC 0 1\n\n3 2 3\n\n4 0 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nC 0 2\n\n4 1 1\n\n5 0 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nC 1 2\n\n5 1 1\n\n6 0 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nC 1 2\n\n6 1 1\n\nSample Output:\n1\n1\n1\n1\nimpossible\n\n----\n6 1 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nC 0 2\n\n4 1 1\n\n5 0 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nC 1 2\n\n5 1 1\n\n6 0 1\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN\nN"
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\") == \"impossible\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('()') == 1\nassert solution('()(()(') == 5\nassert solution('()(()((') == 5\nassert solution('())') == 0\nassert solution('())') == 0\n"
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('())') == 2\nassert solution('((()))') == 4\nassert solution('((())') == 2\nassert solution('()(())') == 4\nassert solution('()()()') == 4\n"
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"()\") == 2\nassert solution(\"(()\") == 4\nassert solution(\")()\") == 4\nassert solution(\"(()(()())())\") == 10\nassert solution(\"()(()(()()))((()))()\") == 16\n\"\"\"\n\nfrom sys import stdin\nimport copy"
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('((()))') == 2\nassert solution('()()') == 4\nassert solution('()(()') == 4\nassert solution('()()()') == 6\nassert solution('()()()()') == 6\n"
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(()())((()()))\") == 10\nassert solution(\"(()()))((()())\") == 7\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"()\") == 2\nassert solution(\"(()())\") == 4\nassert solution(\"((()(()(()())))\") == 12\nassert solution(\"(((((()(((((((((())))))()())(())())))))))(((((()(((())((()))(()((()()(()((()((()(()((()((((()((((((((())))))()((()()(()()(((((((((((())))(((()(())(((((()(((((((((((((()(((())((()(()(((((((((((((((((())))))()(()))(())())()()(((())(())((()))((())(()(()))((()((()(((()((()(()(()((()(()((()(((((())))(((((((()()(())()(()(()()(())()(())()()(((()(())((()()(()(()()(()((((()(()(()(()(()(()(()(((()(((((((((((()(())(()(()((()()(()(((()(()(()(()(((((((((((((()(((()(()(()(()(((((((((((((((((((((()(()(()(()(()(((((((((((((((((((()(((()(()(()((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('(())') == 2\nassert solution('()())') == 4\nassert solution('()((())') == 6\nassert solution('(()(()(())())())()') == 18\nassert solution('(()(()(())())())())') == 22\n\"\"\""
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('()') == 1\nassert solution('(()') == 1\nassert solution('((()))') == 5\nassert solution('((()())') == 7\n"
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"((()))\") == 5\nassert solution(\"())\") == 2\nassert solution(\"((())\") == 6\n\nimport re"
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('())') == 2\nassert solution('(())') == 2\nassert solution('())') == 2\nassert solution('())(())') == 4\nassert solution('((()())(())())') == 12\n"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"85293\"\nprint(solution(\"9\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\"))\n"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"85293\"\nassert solution(\"4\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"1000000\"\nassert solution(\"4\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"2000000\"\nassert solution(\"4\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"2000000\"\nassert solution(\"4\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"2000000\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"85293\"\nassert solution(\"9\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"85293\"\nassert solution(\"7\\n1 2\\n1 3\\n2 3\\n3 3\\n4 6\\n5 6\\n6 6\\n7 7\") == \"15\"\nassert solution(\"3\\n1 2\\n2 3\") == \"3\"\nassert solution(\"6\\n1 2\\n1 3\\n2 3\\n3 3\\n4 5\\n5 6\") == \"4\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"0\\n\") == \"0\"\nassert solution(\"0\\n1\\n\") == \"0\"\nassert solution(\"0\\n1\\n1\\n\") == \"1\"\nassert solution(\"0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\\n2 3\\n2 4\\n2 5\\n3 6\\n3 7\\n3 8\\n3 9\\n4 7\\n4 8\\n4 9\\n4 10\\n5 6\\n5 7\\n5 8\\n6 7\\n6 8\\n6 9\\n6 10\\n7 9\\n7 10\\n7 11\\n8 11\\n8 12\\n9 10\\n9 11\\n9 12\\n10 11\\n10 12\\n11 12\\n') == '85293'\n\nimport time\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom timeit import timeit"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n\") == \"85293\""
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''9\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9''') == '85293'\nprint('Success')\n\n'''\n\n[Case Study] Alien and Human Communication - Hidden Messages\n\nIn this case study you will create a simple communication system between two systems: a human and an alien. The alien is a central communications hub, but has access to only one direct link, which is the communication hub.\n\nThe communications hub is a hub, that can send an unlimited amount of messages to other systems that are not directly linked to the hub.\n\nThe hub can receive messages from any system, but can only send to one system at a time.\n\nThe hub can also send messages to other hubs, so the communication hub may be indirectly linked to other hubs.\n\nMessages are sent on one thread, with multiple messages being sent in parallel.\n\nThere are some information about the communication hub, all of which is given to you as strings.\n\nThere are two functions that you need to implement, and the string between the two underscores will contain the communication hub\u2019s messages:\n\n    def hubMessage(hub: str) -> str:\n        pass\n\n    def hubMessage(hub: str) -> str:\n        pass\n\nMessages sent from the hub will be of the form:\n\n{'source': 0,'message':'send', 'destination': 0, 'type': 0, 'content': 'hello'}\n\n{'source': 0,'message':'send', 'destination': 0, 'type': 0, 'content': 'world'}\n\n{'source': 0,'message':'send', 'destination': 0, 'type': 0, 'content': 'helloworld'}\n\n{'source': 0,'message':'send', 'destination': 0, 'type': 0, 'content': 'error'}\n\n{'source': 0,'message':'send', 'destination': 0, 'type': 0, 'content': 'next'}\n\n{'source': 0,'message':'send', 'destination': 0, 'type': 0, 'content':'stop'}\n\n{'source': 0,'message':'recv', 'destination': 0, 'type': 0, 'content': 'hello'}\n\n{'source': 0,'message':'recv', 'destination': 0, 'type': 0, 'content': 'world'}\n\n{'source': 0,'message':'recv', 'destination': 0, 'type': 0, 'content': 'helloworld'}\n\n{'source': 0,'message':'recv', 'destination': 0, 'type': 0, 'content': 'error'}\n\n{'source': 0,'message':'recv', 'destination': 0, 'type': 0, 'content': 'next'}\n\n{'source': 0,'message':'recv', 'destination': 0, 'type': 0, 'content':'stop'}\n\n{'source': 0,'message':'recv', 'destination': 1, 'type': 0, 'content': 'hello'}\n\n{'source': 0,'message':'recv', 'destination': 1, 'type': 0, 'content': 'world'}\n\n{'source': 0,'message':'recv', 'destination': 1, 'type': 0, 'content': 'helloworld'}\n\n{'source': 0,'message':'recv', 'destination': 1, 'type': 0, 'content': 'error'}\n\n{'source': 0,'message':'recv', 'destination': 1, 'type': 0, 'content': 'next'}\n\n{'source': 0,'message':'recv', 'destination': 1, '"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"85293\"\n\n\"\"\"\n\nwith open('input.txt', 'r') as file:\n    N = int(file.readline().strip())\n    G = [file.readline().strip() for _ in range(N)]\n    E = int(file.readline().strip())\n    links = [[int(i) for i in l.strip().split()] for l in file.readlines()]\n"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\n'\n'377 a\\n'\n'455 h\\n'\n'180 a\\n'\n'211 a\\n'\n'134 a\\n'\n'46 h\\n'\n'111 h\\n'\n'213 h\\n'\n'17 a\\n'\n'15\\n'\n'1 2\\n'\n'1 4\\n'\n'1 6\\n'\n'2 3\\n'\n'2 4\\n'\n'2 5\\n'\n'3 5\\n'\n'4 6\\n'\n'4 7\\n'\n'4 9\\n'\n'5 7\\n'\n'5 8\\n'\n'6 9\\n'\n'7 9\\n'\n'7 8') == '85293'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"85293\"\n\"\"\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\nassert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n3 4') == '0'\nassert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n3 4\\n3 3') == '0'\nassert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n3 4\\n3 3\\n1 3\\n2 2') == '4'\nassert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n3 4\\n3 3\\n1 3\\n2 2\\n1 2') == '10'\n\"\"\""
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\n\"\"\"\n\nfrom typing import List\nimport sys\nimport math"
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\n\"\"\"\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n'''"
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == 5\n\"\"\"\n\nfrom collections import deque, defaultdict\nfrom sys import stdin"
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == '5'\n\"\"\"\n\nclass Graph:\n    def __init__(self, edges):\n        self.edges = edges\n        self.graph = {}\n        for a, b in edges:\n            if a not in self.graph:\n                self.graph[a] = [b]\n            else:\n                self.graph[a].append(b)\n            if b not in self.graph:\n                self.graph[b] = [a]\n            else:\n                self.graph[b].append(a)\n        print(self.graph)\n        self.visited = set()\n        self.components = []\n        self.components_count = 0\n        self.component_sum = 0\n        self.visit(self.edges[0][0])\n        print(self.components_count, self.component_sum)\n\n    def visit(self, node):\n        self.visited.add(node)\n        if node in self.graph:\n            for neighbour in self.graph[node]:\n                if neighbour not in self.visited:\n                    self.visit(neighbour)\n        else:\n            self.components.append(node)\n            self.components_count += 1\n            self.component_sum += node"
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\nprint(solution(stdin.readlines()))\n"
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == 5\n\"\"\""
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('2\\n1 candy') == '1 candy'\nassert solution('2\\n0 candy') == '1 candy'\nassert solution('2\\n2 candy') == '1 candy'\nassert solution('2\\n0 candy\\n1 candy') == '2 candy'\n"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 caterpillar 3 pupa 7 butterfly\\n3 dove 3 pigeon 7 aaabaaajss\\n3 mouse 1 electromouse 5 rat\") == \"5100\"\n\"\"\"\n\nimport math\nimport itertools\nimport operator\nimport time\nfrom collections import defaultdict\nfrom functools import reduce\nfrom typing import List, Dict, Any, Union\n"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\n\n---\n<strong>Hint #1:</strong> There are 10 types of candy for every type of Nudg\u00e9mon, and you can catch every Nudg\u00e9mon once.\n\n---\n<strong>Hint #2:</strong> Every time a Nudg\u00e9mon is caught, your friend is awarded 3 candies associated with its family. But if the Nudg\u00e9mon is not caught, the candy is lost.\n\n<strong>Hint #3:</strong> Since the evolution of a Nudg\u00e9mon is non-decreasing, the candy consumed by the evolution of a Nudg\u00e9mon will be equal to or higher than the candy consumed by the strongest member of its family.\n\n<strong>Hint #4:</strong> The maximum amount of XP your friend could have had at the current time had he activated his Blessed Egg at the optimal time and only evolved Nudg\u00e9mon during the time it was active.\n\n<strong>Hint #5:</strong> Remember that you can only use the Blessed Egg once, so the optimal time to activate it should be the earliest possible one.\n\n<strong>Hint #6:</strong> If you are to level up your character, you will need to catch at least $10^5$ Nudg\u00e9mon to do so.\n\n<strong>Hint #7:</strong> You can only catch up to three Nudg\u00e9mon per second, so if the Nudg\u00e9mon you want to catch is caught too early, you will lose some candies and your XP will decrease.\n\n<strong>Hint #8:</strong> Make use of the built-in function `max()` from the standard library to check whether there is a family with more than one member.\n\"\"\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 catcatcat dogdogdog\\n2 dogdogdog catcatcat\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict\n\nfamilies = defaultdict(list)\nn = int(stdin.readline().strip())\nfor _ in range(n):\n    s, *c = map(int, stdin.readline().strip().split())\n    families[s].extend(c)\n\neggs = int(stdin.readline().strip())\negg_times = sorted([int(stdin.readline().strip()) for _ in range(eggs)])\negg_times.append(10 ** 9)\n\nn = int(stdin.readline().strip())\ncatch_times = []\nfor _ in range(n):\n    catch_times.append(int(stdin.readline().strip()))"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\ncaterpillar 3\\npupa 7\\nbutterfly\") == \"5100\"\n\"\"\""
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3\\n3\\n7\\n\\n3\\n1\\n2\") == \"5000\"\n\"\"\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\ncaterpillar 3\\npupa 7\\nbutterfly') == '5100'\nassert solution('3\\ncaterpillar 3\\npupa 7\\nbutterfly') == '5100'\nassert solution('3\\ncaterpillar 3\\npupa 7\\nbutterfly') == '5100'\n'''"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\ncaterpillar 3 pupa 7 butterfly\\n3 dove 3 pigeon 7 aaabaaajss\\n3 mouse 1 electromouse 5 rat\\n7\\n0 electromouse\\n500 electromouse\\n1000 electromouse\\n1500 rat\\n2000 aaabaaajss\\n2500 pigeon\") == \"5100\"\n\"\"\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\ncaterpillar 3\\npupa 7\\nbutterfly\\n\") == \"5100\"\nassert solution(\"3\\ncaterpillar 3\\npupa 7\\nbutterfly\\n\") == \"5100\"\n\"\"\"\nfrom collections import defaultdict\n\nn_f = int(input())\n\nfam_d = defaultdict(list)\n\nfor _ in range(n_f):\n    s_i, *c = input().split()\n    fam_d[s_i].extend(c)\n\nn_n = int(input())\n\nfor _ in range(n_n):\n    t_i, p_i = input().split()\n    fam_d[p_i].extend(fam_d[t_i])\n\nfor k, v in fam_d.items():\n    fam_d[k] = sorted(v, key=lambda x: int(x[1:]))\n\nfam_d = dict(fam_d)\n\nmax_x = 0\n\nfor k, v in fam_d.items():\n    max_x += v[-1][1:]\n\nprint(max_x)\n"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\ncaterpillar 3\\npupa 7\\nbutterfly\\n') == '5100'\nassert solution('3\\ncaterpillar 3\\npupa 7\\nbutterfly\\n') == '5100'\nassert solution('3\\ncaterpillar 3\\npupa 7\\nbutterfly\\n') == '5100'\nassert solution('3\\ncaterpillar 3\\npupa 7\\nbutterfly\\n') == '5100'\nassert solution('3\\ncaterpillar 3\\npupa 7\\nbutterfly\\n') == '5100'\n"
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '-1'\nassert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5') == '6\\n1\\n2\\n3\\n1\\n4\\n5'\n"
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\"\nassert solution(\"3\\n1\\n2\\n3\") == \"1\\n2\\n3\"\nassert solution(\"1\\n1\\n1\") == \"1\"\n\"\"\"\n\nfrom typing import Tuple, List, Set, Union\nimport collections\nimport copy\n\nfrom..core.problems import Problem\n\n\nclass Stones(Problem):\n\n    def __init__(self, lines: str, test_case: int = 1):\n        self.lines = lines\n        self.test_case = test_case\n        super().__init__()\n\n    def solve(self) -> str:\n        if self.test_case == 1:\n            _, wall = self.prepare_input(self.lines)\n            dry, wet = self.create_dry_and_wet_plan(wall)\n            return self.format_output(dry, wet)\n\n        elif self.test_case == 2:\n            wall = self.prepare_input(self.lines)\n            dry, wet = self.create_dry_and_wet_plan(wall)\n            return self.format_output(dry, wet)\n        return \"\"\n\n    @staticmethod\n    def prepare_input(lines: str) -> Tuple[int, List[List[Union[int, None]]]]:\n        lines = [line.strip() for line in lines.split(\"\\n\") if line.strip()]\n        n = int(lines[0])\n        wall = []\n        for line in lines[1:]:\n            line = [int(num) for num in line.split(\" \")]\n            wall.append(line)\n        return n, wall\n\n    @staticmethod\n    def create_dry_and_wet_plan(wall: List[List[Union[int, None]]]) -> Tuple[List[List[Union[int, None]]], List[List[Union[int, None]]]]:\n        wall_copy = copy.deepcopy(wall)\n        dry = []\n        wet = []\n        # Getting number of holes in the wall\n        holes = sum([1 for row in wall for num in row if num is None])\n        for peg in range(holes):\n            dry_plan = []\n            wet_plan = []\n            dry_plan.append(wall_copy[0][0])\n            dry_plan.append(wall_copy[0][1])\n            dry_plan.append(wall_copy[0][2])\n            wet_plan.append(wall_copy[0][0])\n            wet_plan.append(wall_copy[0][1])\n            wet_plan.append(wall_copy[0][2])\n            # Start from the second row and place the rest of the pegs\n            for row in wall_copy[1:]:\n                if row[0] is None:\n                    wet_plan.append(row[1])\n                    wet_plan.append(row[2])\n                    dry_plan.append(row[1])\n                    dry_plan.append(row[2])\n                elif row[1] is None:\n                    wet_plan.append(row[0])\n                    wet_plan.append(row[2])\n                    dry_plan.append(row[0])\n                    dry_plan.append(row[2])\n                elif row[2] is None:\n                    wet_plan.append(row[0])\n                    wet_plan.append(row[1])\n                    dry_plan.append(row[0])\n                    dry_plan.append(row[1])\n                else:\n                    wet_plan.append(row[0])\n                    dry_plan.append(row[0])\n            dry.append(dry_plan)\n            wet.append(wet_plan)\n            # Drop the peg from the first row\n            wall_copy[0][0] = None\n            wall_copy[0][1] = None\n            wall_copy[0][2] = None\n            # Update row 1\n            wall_copy[1][0] = wall_copy[1][0] - 1\n            wall_copy[1][1] = wall_copy[1][1] - 1\n            wall_copy[1][2] = wall_copy[1][2] - 1\n            # Update row 2\n            wall_copy[2][0] = wall_copy[2][0] - 1\n            wall_copy[2][1] = wall_copy[2]["
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6\\n1\\n2\\n3\\n1\\n4\\n5'\n\n'''\nn = int(stdin.readline())\npegs = {}\nfor i in range(n):\n    p, *points = list(map(int, stdin.readline().split()))\n    pegs[p] = points\nt = int(stdin.readline())\nfor i in range(t):\n    s = list(map(int, stdin.readline().split()))\n    print(solution(n, pegs, t, s))\n'''\n\nimport heapq\n"
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\") == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'\n\"\"\"\n\nimport io"
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\") == '6\\n1\\n2\\n3\\n1\\n4\\n5'\nassert solution(\"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\") == '-1'\nassert solution(\"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\") == '10'\nassert solution(\"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\") == '3'\nassert solution(\"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\") == '4'\n"
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n') == '6\\n1\\n2\\n3\\n1\\n4\\n5'\n\"\"\"\n\n\"\"\"\nIn the previous problem, we only considered one wall. If there are multiple walls in the input, we can actually perform the same strategy in all of them and iterate until the number of safe wet plans is less than $10$ times the number of safe dry plans.\n\nGiven that we have multiple walls, we need to create a class `Wall` to represent them and a class `Climber` to represent Fiona.\n\nOur class `Wall` has three instance variables:\n\n`self.n`: the number of strategic points in the wall\n`self.pegs`: a list of the strategic points, where each point is represented by an integer.\n`self.wet_plans`: a list of the dry plans, where each plan is represented by a list of integers where the integer in position $i$ represents the point where a peg is added/removed in step $i$.\n\nOur class `Climber` has one instance variable:\n\n`self.max_pegs`: the maximum number of pegs that Fiona can carry at one time.\n\nThe `__init__` method of the `Climber` class has the following form:"
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\"\nassert solution(\"4\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\") == \"-1\"\n\"\"\"\n\nimport collections\nimport heapq"
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open(\"../tests/test_2.txt\").read()) == open(\"../tests/expected_2.txt\").read()\nprint(solution(open(\"../input.txt\").read()))\n"
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5') == '6\\n1\\n2\\n3\\n1\\n4\\n5'\nassert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5') == '-1'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1_000_000)\n"
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n2 1 3\\n1 3\\n3\\n4\\n4\\n3\\n2\\n1\") == \"2\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n2\\n1\"\nassert solution(\"5\\n0\\n1 1\\n1 2\\n2 3\\n4\\n1 2\\n3 4\\n1 3\\n4\") == \"3\\n1\\n2\\n3\\n2\\n3\\n4\\n4\\n1\\n1\\n0\\n3\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5''') == \"10\"\n\n\"\"\"\n\nimport sys\nimport math\n\nn, d = map(int, sys.stdin.readline().split())\ntour = list(map(int, sys.stdin.readline().split()))\nnum_airfares = int(sys.stdin.readline())\n\ns, d, t, p = 0, 0, \"O\", 0\nfor i in range(num_airfares):\n    s, d, t, p = map(str, sys.stdin.readline().split())\n    s, d = int(s), int(d)\n    p = int(p)\n\n    if t == \"R\":\n        s, d = d, s\n    if d == n:\n        if p < p:\n            p = p\n        else:\n            p = p + s\n    elif tour.count(s) == 0 or tour.index(s) == 0 and tour[1]!= d:\n        p = p\n    else:\n        p = p + s\n    tour.insert(tour.index(d) + 1, d)\nprint(p)\n\n\"\"\"\n\nimport sys\n\nn, d = map(int, sys.stdin.readline().split())\ntour = list(map(int, sys.stdin.readline().split()))\nnum_airfares = int(sys.stdin.readline())\n\np = 0\nfor i in range(num_airfares):\n    s, d, t, p = map(str, sys.stdin.readline().split())\n    s, d = int(s), int(d)\n    p = int(p)\n\n    if t == \"R\":\n        s, d = d, s\n    if d == n:\n        if p < p:\n            p = p\n        else:\n            p = p + s\n    else:\n        p = p + s\n    tour.insert(tour.index(d) + 1, d)\nprint(p)\n"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5\\n1 2 1 2 1\\n4\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5') == 10\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5''') == '10'\n\n---------------------------------------------------------------------------------------------------------------------------------------\n\nIvan is planning a large European tour with his jazz band. There are a total of n cities in Europe, numbered with integers 1 through n. Ivan is planning d concerts in cities a_1, a_2,..., a_d in that exact order, never having two consecutive concerts in the same city (a_i and a_{i+1} cannot be equal for i = 1, 2,..., d-1).\n\nIvan always takes a direct flight between cities a_i and a_{i+1} for i = 1, 2,..., d-1. However, he is trying to be smart with his ticket purchases in order to save money. As you may know, airlines price tickets based on supply and demand and, for example, it may be possible that one-way tickets are more expensive than round trip tickets between same cities. Generally, there are two kinds of tickets available for purchase:\n\n- One-way ticket from the origin city a_ i to destination city a_{i+1} can be used to fly from a_ i to a_{i+1} once (but not in the opposite direction).\n- Round trip ticket from the origin city a_ i to destination city a_{i+1} can be used to fly once from a_ i to a_{i+1} and once from a_{i+1} to a_ i. The return segment (from a_{i+1} to a_ i) does not need to be used. However, the segments have to be flown in order \u2013 it is not allowed for Ivan to use the return segment of a_ i ticket to fly from a_{i+1} to a_ i unless he has used the first segment of that ticket to fly from a_ i to a_{i+1} before.\n\nYou are given a list of available airfares, find the least amount of money Ivan needs to spend on tickets to be able to complete his journey. Ivan can purchase an arbitrary number of tickets for each airfare. Once again, Ivan needs to take a direct flight from a_ i to a_{i+1} for every i = 1, 2,..., d - 1. You may assume that is possible to complete the journey using the airfares.\n\n-----Input-----\nThe first line contains two integers n and d, the number of cities in Europe and the number of concerts. The following line contains n integers a_1, a_2,..., a_n, describing the planned tour schedule.\n\nThe following line contains m, the number of airfares. The k-th of the following m lines contains four tokens a_i, a_{i+1}, t_i, p_i, describing the k-th airfare as follows:\n\n- a_i and a_{i+1} are the origin and the destination city respectively,\n- t_i is an uppercase letter \u201cO\u201d or \u201cR\u201d denoting a one-way or round trip ticket respectively,\n- p_i is the ticket price, an integer.\n\n-----Output-----\nOutput the least amount of money necessary to purchase tickets that allow Ivan to complete the planned tour.\n\n-----Examples-----\nSample Input:\n4 4\n1 2 1 2 1\n3\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5\nSample Output:\n10\n"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n1 2 1 2 1\\n4\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\") == \"10\"\n\"\"\"\n\n\nimport sys\nfrom collections import deque\nfrom copy import deepcopy\n"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\") == 10\n\"\"\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n1 2 1 2 1\\n4\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\") == \"10\"\n\"\"\""
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5\\n1 2 O 3\\n1 2 R 4\\n1 2 R 3\\n2 1 O 3\\n2 1 R 5\") == 10\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n1 2 1 2 1\\n4\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\") == \"10\"\n\"\"\"\n\nfrom collections import defaultdict\n\nn, d = [int(i) for i in input().split()]\ntour = [int(i) for i in input().split()]"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\") == \"10\"\nassert solution(\"3 5\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\") == \"10\"\nassert solution(\"3 3\\n1 2 O 3\\n2 1 O 3\") == \"9\"\n\"\"\"\nimport collections\nimport itertools\n"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5') == 10\n\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n0 1\\n1 2\\n2 3\") == 1\n\"\"\"\n\nimport sys\nimport collections\n\nclass DirectedGraph:\n\n    def __init__(self, num_nodes: int, num_edges: int):\n        self._n = num_nodes\n        self._e = num_edges\n        self._g = collections.defaultdict(set)\n        self._in_deg = [0]*self._n\n        self._deg = [0]*self._n\n        for _ in range(self._e):\n            u, v = [int(x) for x in input().split()]\n            self._g[u].add(v)\n            self._deg[u] += 1\n            self._deg[v] += 1\n            self._in_deg[v] += 1\n\n    def topsort(self) -> list:\n        S = [n for n in range(self._n) if self._in_deg[n] == 0]\n        L = []\n        while S:\n            u = S.pop()\n            L.append(u)\n            for v in self._g[u]:\n                self._in_deg[v] -= 1\n                if self._in_deg[v] == 0:\n                    S.append(v)\n        return L\n\n    def largest_S(self) -> int:\n        return len(self.topsort())"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n0 1\\n1 2\\n2 3\") == \"1\"\nassert solution(\"6 4\\n0 3\\n1 4\\n0 2\\n3 5\\n4 5\") == \"2\"\nassert solution(\"6 5\\n0 4\\n1 4\\n2 3\\n3 4\\n4 5\\n5 0\") == \"3\"\nassert solution(\"6 6\\n0 5\\n1 5\\n2 4\\n3 4\\n4 5\\n5 0\\n0 4\") == \"2\"\n\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n0 1\\n1 2\\n2 3\\n') == '1'\n\"\"\"\nimport sys\nfrom typing import Set, Tuple, List, Dict\n"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 0\\n0 1\") == \"1\"\n\"\"\"\nfrom typing import List, Tuple\nfrom collections import deque\n"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n0 1\\n1 2\\n2 3') == '1'\nassert solution('4 3\\n0 1\\n1 2\\n2 3\\n3 0') == '1'\nassert solution('4 3\\n0 1\\n1 2\\n2 3\\n3 0\\n2 1') == '1'\nassert solution('4 3\\n0 1\\n1 2\\n2 3\\n3 0\\n2 1\\n1 3') == '1'\nassert solution('4 3\\n0 1\\n1 2\\n2 3\\n3 0\\n2 1\\n1 3\\n3 1') == '1'\n"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n0 1\\n1 2\\n2 3') == '1'\n\nassert solution('2 2\\n0 1') == '2'\n\nassert solution('3 3\\n0 1\\n1 2\\n2 0') == '3'\n\nassert solution('2 1\\n0 1') == '1'\nassert solution('1 1\\n0 1') == '1'\n"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n0 1\\n1 2\\n2 3') == '1'\n\"\"\"\n\nfrom collections import deque, defaultdict"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n0 1\\n1 2\\n2 3\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n0 1\\n1 2\\n2 3') == '1'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n0 1\\n1 2\\n2 3\") == \"1\"\nassert solution(\"3 3\\n0 1\\n1 2\\n2 0\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n0 1 0 1\n0 0 1 1\n1 0 1 1\n1 0 1 1''') == '0.962962962963'\n\nassert solution('''5\n0 1 0 1 0\n0 0 1 1 0\n1 0 1 1 1\n1 0 1 1 0\n1 0 1 0 1''') == '0.242424242424'\n\nassert solution('''6\n0 0 1 1 1 1\n0 1 1 1 0 0\n1 1 1 1 1 0\n0 1 0 1 0 0\n0 1 1 0 0 0\n1 1 1 1 1 1''') == '0.484848484848'\n\nassert solution('''9\n1 1 1 1 0 0 0 1 1\n0 0 0 1 0 0 0 1 0\n0 0 0 1 0 0 0 1 0\n0 0 0 1 0 0 0 0 0\n1 0 0 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n0 1 1 1 1 1 1 1 1''') == '0.5'\n\nassert solution('''3\n0 1 1\n0 1 1\n1 1 1''') == '0.6'"
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == '0.962963'\n\"\"\""
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"0.962962962963\"\n\nassert solution(\"5\") == \"0.4080675691937\"\n\nassert solution(\"12\") == \"0.7535177865003\"\n\nassert solution(\"15\") == \"0.8125\"\n\nassert solution(\"1000\") == \"0.6374812331826\""
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n4 3') == '0.962962962963'"
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3\\n2 3\\n3 1\") == \"0.66666666667\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nimport math\nimport re"
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2\\n2\\n2\\n2\") == \"0.96296296296\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n\") == \"0.9629629629629629\"\nassert solution(\"8\\n\") == \"0.9473684210526316\"\n\"\"\"\n\nfrom math import sqrt\nfrom random import seed\nfrom random import random\n"
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n4 1') == '0.962962962963'"
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"0.962962962963\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0\\n40000000 0\\n0 40000000\") == \"0 0\\n40000000 0\\n0 40000000\"\nassert solution(\"4\\n0 0\\n40000000 0\\n0 40000000\\n0 0\\n0 40000000\") == \"0 0\\n0 40000000\\n0 0\\n40000000 0\\n0 40000000\"\nassert solution(\"7\\n0 0\\n40000000 0\\n0 40000000\\n0 0\\n0 40000000\\n0 0\\n0 40000000\\n0 0\\n0 40000000\") == \"0 0\\n40000000 0\\n0 40000000\\n0 0\\n0 40000000\\n0 0\\n40000000 0\\n0 40000000\\n0 0\\n0 40000000\"\n\n\"\"\""
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0\\n40000000 0\\n0 40000000\") == \"0 0\\n40000000 0\"\n\nassert solution(\"3\\n0 0\\n40000000 0\\n0 40000000\") == \"0 0\\n0 40000000\"\n\nassert solution(\"3\\n0 0\\n0 40000000\\n40000000 0\") == \"0 0\\n0 40000000\"\n\nassert solution(\"3\\n0 0\\n0 40000000\\n40000000 0\") == \"0 0\\n0 40000000\"\n\nassert solution(\"3\\n0 0\\n40000000 0\\n0 40000000\") == \"0 0\\n0 40000000\""
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0\\n0 40000000\\n0 0\") == \"40000000 0\\n0 40000000\\n0 0\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)"
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 0\\n40000000 0\\n0 40000000') == '0 0\\n40000000 0\\n0 40000000'\nprint('Success')\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n0 0\\n40000000 0\\n0 40000000') == '40000000 0 40000000'\n\n\"\"\"\n\nimport os"
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('3\\n0 0') == '0 0'\nassert solution('3\\n0 1\\n0 0') == '0 0\\n0 1'\nassert solution('3\\n0 1\\n40000000 0') == '0 0\\n0 1\\n40000000 0'\nassert solution('3\\n0 0\\n0 0') == '0 0\\n0 0'\n"
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n0 0\\n40000000 0\\n0 40000000') == '0 0\\n40000000 0\\n0 40000000'\n\"\"\"\nimport itertools\n\nimport sys\n"
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1\\n0\\n0') == '0 0\\n40000000 0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n\") == \"\"\"0 0\n40000000 0\n0 40000000\"\"\"\nassert solution(\"4\\n\") == \"\"\"0 0\n40000000 0\n0 40000000\n0 0\n40000000 0\"\"\"\nassert solution(\"5\\n\") == \"\"\"0 0\n40000000 0\n0 40000000\n0 40000000\n40000000 0\n0 0\n40000000 0\n0 0\n40000000 0\"\"\"\n\"\"\"\n\n-----\nThe first line contains a non-negative integer $N$ representing the number of vertices.\n\nOutput any one of the possible ways to construct the main office, that is, for any possible set of $N$ locations of the $N$ vertices of your main office that has the properties described in the problem statement.\n\nThe output should consist of $N$ lines, each of which consists of two integers, $0 \\le x, y \\le 4 \\cdot 10^7$, denoting the coordinates of a vertex making up your main office. The coordinates can be given in any order and must adhere to your main office\u2019s restrictions as described in the problem statement.\n\nSample Input:\n3\nSample Output:\n0 0\n40000000 0\n0 40000000\n\"\"\"\n\nimport math"
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n0 0\\n40000000 0\\n0 40000000') == '0 0\\n40000000 0\\n0 40000000'\n\"\"\""
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"2 3 4 9\") == \"2\"\nassert solution(\"2 3 4 1\") == \"impossible\""
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"1 5 1 3\") == \"impossible\"\nassert solution(\"2 3 4 9\") == \"impossible\"\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"1 2 4 9\") == \"impossible\"\nassert solution(\"8 2 3 9\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('3 5 1 2') == 'impossible'\nassert solution('3 5 5 2') == '2'\n"
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 5 2') == '1'\n\"\"\"\n\nb = [int(i) for i in input().split(' ')]"
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 5 2\") == '1'\nassert solution(\"1 3 5 2\") == 'impossible'\nassert solution(\"1 1 1 1\") == 'impossible'\nassert solution(\"1 3 5 4\") == 'impossible'\nassert solution(\"5 5 5 2\") == '1'"
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"3 5 5 3\") == \"impossible\"\nassert solution(\"3 5 5 4\") == \"impossible\"\nassert solution(\"1 1 1 1\") == \"impossible\"\nassert solution(\"2 1 1 1\") == \"impossible\"\n\nprint(\"OK\")\n\"\"\""
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2\\n3\\n4\\n5\\n6\\n1\\n3\\n3\\n1\\n1\\n1\\n1\\n1\") == \"13\"\nassert solution(\"4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"4\"\nassert solution(\"4\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"0\"\nassert solution(\"4\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"0\"\n\n\"\"\"\n\nfrom collections import defaultdict\nimport math"
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 4 4\\n5 5 0\\n0 1 -5\\n0 3 0\\n1 1 1\") == \"0\"\nassert solution(\"10 4 4\\n5 5 0\\n0 1 -5\\n0 3 0\\n1 1 1\") == \"0\"\nassert solution(\"10 4 4\\n5 5 0\\n0 1 -5\\n0 3 0\\n1 1 1\") == \"0\"\nassert solution(\"10 4 4\\n5 5 0\\n0 1 -5\\n0 3 0\\n1 1 1\") == \"0\"\nassert solution(\"10 4 4\\n5 5 0\\n0 1 -5\\n0 3 0\\n1 1 1\") == \"0\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 3 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0\") == \"2\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0\") == '2'\nassert solution(\"4 10 20 20\\n-10 -10 -10 -10\\n-10 -10 -10 -10\\n0 0 0 0\\n0 0 0 0\") == '0'\n"
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str([\n    20,\n    3,\n    5,\n    5,\n])) == '2'\n\nassert solution(str([\n    20,\n    3,\n    5,\n    5,\n])) == '2'\n\nassert solution(str([\n    30,\n    0,\n    0,\n    0,\n])) == '0'\n\nassert solution(str([\n    20,\n    3,\n    5,\n    5,\n])) == '2'\n\nassert solution(str([\n    30,\n    0,\n    0,\n    0,\n])) == '0'"
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0') == '2'\n\"\"\"\n\nfrom sys import stdin, stdout\nimport math"
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 10 10\\n1 -3 0\\n0 0 0\\n1 0 0\\n0 -1 0\\n\") == \"0\"\nassert solution(\"4 3 10 10\\n1 -3 0\\n0 0 0\\n1 0 0\\n0 -1 0\\n\") == \"2\"\nassert solution(\"5 2 1 1\\n0 0 0\\n1 1 1\\n1 1 1\\n0 0 0\\n\") == \"0\"\nassert solution(\"4 3 10 10\\n1 -3 0\\n0 0 0\\n1 0 0\\n0 -1 0\\n\") == \"2\"\nassert solution(\"4 3 10 10\\n1 -3 0\\n0 0 0\\n1 0 0\\n0 -1 0\\n\") == \"0\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 2 3\\n0 0 0') == '0'\nassert solution('4 1 2 3\\n0 0 2') == '1.5'\nassert solution('4 1 2 3\\n0 -10 2') == '2.0'\nassert solution('4 1 2 3\\n0 0 -10') == '2.5'\nassert solution('4 1 2 3\\n30 0 0') == '2.5'\n"
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 2 4 1\\n0 0 0\\n2 -4 -2\\n2 3 -4\\n2 0 2\\n0 -1 2\\n0 0 2\\n-3 3 1\\n0 0 2\\n-2 3 0\\n0 0 2\\n0 0 0\\n2 -4 -2\\n2 3 -4\\n2 0 2\\n0 -1 2\\n0 0 2\\n-3 3 1\\n0 0 2\\n-2 3 0\\n0 0 2\\n0 0 0') == '0'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13\") == \"12 14\""
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13\") == \"12 14\"\n\"\"\""
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13') == '12 14'\nassert solution('12') == '12 12'\nassert solution('1') == '1 1'\nassert solution('10') == '10 10'\nassert solution('11') == '11 11'\n"
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\") == \"12 14\"\n\nassert solution(\"14\") == \"12 14\"\n\nassert solution(\"123\") == \"12 34\"\n\nassert solution(\"12345\") == \"12 34\"\n\nassert solution(\"2\") == \"2 2\""
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(123)) == \"12 13\"\nassert solution(str(124)) == \"12 24\"\nassert solution(str(125)) == \"12 25\"\nassert solution(str(126)) == \"12 26\"\nassert solution(str(127)) == \"12 27\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13\") == \"12 14\"\nassert solution(\"5\") == \"5\"\nassert solution(\"18\") == \"18\"\nassert solution(\"123\") == \"12 34\"\nassert solution(\"890\") == \"891\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13\") == \"12 14\"\n\nprint(solution(\"13\"))\n"
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13') == '12 14'\nassert solution('101010') == '101010 10111'\n\"\"\"\n\nfrom math import log2\n\nn = int(input())"
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n1\n7\n7\n13\n''') == '12 14'\nassert solution('''\n1\n7\n7\n7\n7\n7\n7\n13\n''') == '13'\n\"\"\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13\") == \"12 14\"\nassert solution(\"16\") == \"12 16\"\nassert solution(\"9\") == \"8 9\"\nassert solution(\"21\") == \"20 21\"\nassert solution(\"11\") == \"10 11\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1 0 1\n3 0 1''') == '0'\nassert solution('''3\n1 0 1\n3 0 0\n3 0 1''') == '0'\nassert solution('''3\n1 1 1\n0 1 1\n3 0 1''') == '3'\nassert solution('''3\n1 1 1\n0 1 1\n3 0 1''') == '0'\nassert solution('''3\n1 1 1\n1 1 1\n3 0 1''') == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1') == '0'\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nfrom collections import defaultdict\nfrom enum import Enum\nfrom itertools import product\nfrom typing import Callable, Dict, FrozenSet, List, Set, Tuple\n\n\nclass BaseCostumeParity(Enum):\n    even = 'even'\n    odd = 'odd'\n\n\nclass CustomDict(defaultdict):\n    def __init__(self, d: Dict[str, int]):\n        super().__init__(lambda x: int(x) if x.isdigit() else x)\n        self.__dict__ = d\n\n\nclass CostumeParity:\n    def __init__(self, base_costume_pairs: List[Tuple[int, int, int]]):\n        self.base_costume_pairs = base_costume_pairs\n        self.costumes = {\n            BaseCostumeParity.even: {\n                'odd': set(),\n                'even': set(),\n            },\n            BaseCostumeParity.odd: {\n                'odd': set(),\n                'even': set(),\n            }\n        }\n        for p in base_costume_pairs:\n            self.costumes[p[2]][p[1]].add(p[0])\n\n    def __str__(self):\n        return str(self.costumes)\n\n    def get_possible_costumes(self, origin: int, num_of_children: int) -> Set[FrozenSet[int]]:\n        if origin == 0:\n            even_or_odd = 'even' if num_of_children % 2 == 0 else 'odd'\n        else:\n            even_or_odd = 'odd' if origin % 2 == 0 else 'even'\n        if num_of_children == 0:\n            return {frozenset()}\n        possible_costumes = set()\n        for costume_odd in self.costumes[BaseCostumeParity.odd][even_or_odd]:\n            costume_even = set(self.costumes[BaseCostumeParity.even][even_or_odd]) - costume_odd\n            for left_costumes in self.get_possible_costumes(origin - 1, num_of_children - 1):\n                for right_costumes in self.get_possible_costumes(origin + 1, num_of_children - 1):\n                    possible_costumes.add(left_costumes | costume_odd | right_costumes | costume_even)\n        return possible_costumes\n"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 0 1\\n3 0 1\\n3 0 0\") == \"0\\n\"\nassert solution(\"4\\n1 1 1\\n3 1 1\\n3 1 0\") == \"1\\n\"\nassert solution(\"4\\n1 0 0\\n1 1 1\\n3 0 1\") == \"0\\n\"\nassert solution(\"4\\n1 1 1\\n3 0 0\\n3 1 1\") == \"1\\n\"\n\"\"\"\nimport math\n\nfrom tools import timing\n"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n0 0 1\\n3 0 1\\n3 0 0\\n3 0 1') == '0'\nassert solution('3\\n0 0 1\\n1 0 1\\n3 0 1') == '2'\n\n\"\"\"\n\nimport sys\n\nsys.stdin = open('test_files/Y11R5P1/A.in')"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\") == \"0\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\") == '0'\nassert solution(\"5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\") == '0'\nassert solution(\"5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\") == '0'\nassert solution(\"5\\n0 0 1\\n0 0 1\\n3 0 1\\n3 0 1\\n3 0 0\\n3 0 1\") == '0'\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1') == 0\n\"\"\""
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1') == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1') == '0'\nassert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n1 1 1') == '1'\nassert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1') == '0'\nassert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1') == '0'\nassert solution('5\\n1 0 0\\n1 0 1\\n1 1 1') == '1'\n"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '-1'\nassert solution('1') == '-1'\nassert solution('2\\n3') == '-1'\nassert solution('2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12') == '9 9'\nassert solution('2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15') == '13 13'\n"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"1 1\\n2 2\\n1 3\"\n\"\"\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\") == \"1 1\\n2 2\\n1 3\\n2 1\"\nassert solution(\"2 3\\n1 1\\n2 2\\n1 3\\n2 1\") == \"-1\"\n\"\"\""
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 1\\n2 2\\n1 3') == '1 1\\n2 2\\n1 3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\n\"\"\""
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == -1\nassert solution('0') == 0\nassert solution('1 2') == -1\nassert solution('0 2') == 2\nassert solution('1 0 1 3 1 3') == 1\n"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\"\nassert solution(\"4 4\") == \"3 3\\n1 3\\n2 1\\n1 2\\n2 3\\n3 1\\n2 2\\n1 1\"\nassert solution(\"1 10\") == \"3 3\\n1 3\\n2 1\\n1 2\\n2 3\\n3 1\\n2 2\\n1 1\\n2 3\\n3 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\\n3 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\\n3 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3') == '2 2\\n1 3\\n2 1'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3') == '2\\n3\\n2\\n1'\n\"\"\"\nimport sys\nfrom itertools import cycle"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\n''') == '''\n1 1\n2 2\n1 3\n2 1\n1 2\n2 3\n'''\n\nassert solution('''\n3 3\n''') == '''\n1 1\n2 2\n3 3\n1 3\n2 1\n3 2\n'''\nassert solution('''\n4 3\n''') == '''\n1 2\n3 2\n1 3\n2 1\n2 3\n1 1\n'''\n\nassert solution('''\n1 1\n''') == '''\n1 1\n'''\n\nassert solution('''\n1 3\n''') == '''\n1 1\n2 2\n3 3\n1 1\n'''"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\\n0 10 1\\n0 10 1\\n0 10 1\") == \"3.3333333333333335\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\\n0 10 1\\n0 10 1\\n0 10 1\") == \"3.3333333333333333\"\n\"\"\"\n\nfrom math import log"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10\\n1 5 1\\n1 5 1') == '0.66666667'\n\"\"\"\n\nn, t = [int(x) for x in stdin.split()]\na = []\nb = []\nd = []\nfor _ in range(n):\n    a_, b_, d_ = [int(x) for x in stdin.split()]\n    a.append(a_)\n    b.append(b_)\n    d.append(d_)"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open('./sample_input.txt').readlines()) == open('./sample_output.txt').readlines()\n\n\"\"\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 10 1\\n0 10 1\\n0 10 1\") == \"3.33333333\"\n\"\"\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 10\\n0 10 1\\n0 10 1\\n0 10 1') == '3.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\\n0 10 1\\n0 10 1\\n0 10 1\") == \"3.3333333333333335\"\nassert solution(\"3 10\\n0 10 1\\n0 10 1\\n0 10 1\") == \"3.3333333333333335\"\nassert solution(\"3 10\\n0 10 1\\n0 10 1\\n0 10 1\") == \"3.3333333333333335\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10\\n0 10 1\\n0 10 1\\n0 10 1\") == \"3.3333333333333335\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 10\n0 10 1\n0 10 1\n0 10 1\"\"\") == \"\"\"3.33333333\n3.33333333\n3.33333333\"\"\", \"Small test case\"\nassert solution(\"\"\"5 10\n0 10 1\n2 10 2\n4 10 2\n2 10 2\n1 10 1\n1 10 1\n1 10 1\n1 10 1\n1 10 1\n3 10 1\n2 10 1\n2 10 1\n1 10 1\n3 10 1\n3 10 1\n\"\"\") == \"\"\"1.7\n1.7\n1.7\n1.7\n1.7\n1.7\n1.7\n1.7\n1.7\n1.7\n1.7\n1.7\n1.7\n\"\"\", \"Various input, one answer for each.\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 2\") == \"1\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2\\n3 3 2\") == \"1\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 2\") == \"1\"\n\"\"\"\n\nn = int(input())\n\npoints = list(map(int, input().split()))\n\npoints.remove(max(points))"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(Sample Input 1)) == str(Sample Output 1)\n\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(int(input()))\nprint(str(solution(str(input()))))\n\n---Problem---\n\nChelsea is planning a huge party to celebrate her new university. She is going to invite a whole team of people, including some of her friends and colleagues. She is considering a certain party configuration where she ensures that every person from the team is invited, but no two people from the team are invited to the same party.\n\nShe is planning the party to take place in the city of Toronto. Each person is currently located at their residence in one of the surrounding cities and can travel by train to Toronto. She is also considering a cost of one dollar per km of travel. She does not want to spend too much money on the travel expenses. The total cost of the travel is calculated as the sum of all the travel distances between each pair of persons who will go to the same party. She wants to know the minimum cost of the travel.\n\nInput\nThe input consists of:\n - A line with the number of persons, $n$, who are invited to her party.\n - A line with $n$ integers, $p_1, \\ldots, p_n$, each one representing the residence of each person.\n\nOutput\nA line with the minimum total cost of the travel.\n\nConstraints\n2<=n<=10\n0<=p_i<=10^16\n\nExample\nInput:\n4\n1 2 3 4\nOutput:\n10"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n3 3 2''') == '1'\n"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2\\n\") == \"1\"\n\"\"\"\n\nn = int(input())\npoints = list(map(int, input().split()))\nmax_point = max(points)\n"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n3 3 2') == '1'\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n2\\n3\\n') == '2'\n\nassert solution('2\\n3\\n2\\n') == '1'\n\nassert solution('3\\n1\\n1\\n') == '0'\n\nassert solution('3\\n3\\n2\\n') == '0'\n\nassert solution('3\\n2\\n2\\n') == '1'"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(expected_result)"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abba') == 2\n\nassert solution('aa') == 0\n\nassert solution('aaaaaa') == 1\n\nassert solution('ababa') == 2\n\nassert solution('aaabb') == 1"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abba') == 2\nassert solution('aabbbb') == 1\nassert solution('aaabb') == 3\nassert solution('abbaa') == 4\nassert solution('abbba') == 2\n"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abba\") == 2\n\nSolution:\n    def solution(stdin: str):\n        n, k = list(map(int, stdin.split(\"\\n\")[0].split()))\n        list_v = list(stdin.split(\"\\n\")[1])\n        # number of clicks to watch all videos of same type\n        tot_same_type = 0\n        tot_same_type_before = 0\n        for i in range(k):\n            tot_same_type += n // k\n            tot_same_type_before += n // k\n            n = n // k\n            if n == 1:\n                break\n        return tot_same_type_before - tot_same_type\n\n\"\"\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abba') == 2\n\"\"\""
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abba') == 2\n\"\"\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abba\") == 2\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abba') == 2\n\nSample Input:\n4 3\nabab\nSample Output:\n-1\n\nSample Input:\n4 3\nabbb\nSample Output:\n-1\n\nSample Input:\n4 3\naab\nSample Output:\n1\n\nSample Input:\n4 3\naabcc\nSample Output:\n2\n\nSample Input:\n4 3\nababa\nSample Output:\n0\n\nSample Input:\n4 3\nbaa\nSample Output:\n-1\n\nSample Input:\n4 3\naba\nSample Output:\n0\n\nSample Input:\n4 3\naac\nSample Output:\n-1\n\nSample Input:\n4 3\naacd\nSample Output:\n2\n\nSample Input:\n4 3\naaac\nSample Output:\n2\n\nSample Input:\n4 3\nabcc\nSample Output:\n-1\n\nSample Input:\n4 3\nabca\nSample Output:\n2\n\nSample Input:\n4 3\nabcb\nSample Output:\n2\n\nSample Input:\n4 3\nabbc\nSample Output:\n1\n\nSample Input:\n4 3\nabcd\nSample Output:\n2\n\nSample Input:\n4 3\nbcba\nSample Output:\n0\n\nSample Input:\n4 3\nbcaa\nSample Output:\n1\n\nSample Input:\n4 3\nbcca\nSample Output:\n1\n\nSample Input:\n4 3\nbcca\nSample Output:\n1\n\nSample Input:\n4 3\nbcac\nSample Output:\n2\n\nSample Input:\n4 3\nbcab\nSample Output:\n1\n\nSample Input:\n4 3\nbcbc\nSample Output:\n0\n\nSample Input:\n4 3\nabc\nSample Output:\n-1\n\nSample Input:\n4 3\naacd\nSample Output:\n2\n\nSample Input:\n4 3\nacac\nSample Output:\n2\n\nSample Input:\n4 3\nabbb\nSample Output:\n1\n\nSample Input:\n4 3\ncbc\nSample Output:\n-1\n\nSample Input:\n4 3\ncbcb\nSample Output:\n2\n\nSample Input:\n4 3\ncbcb\nSample Output:\n2\n\nSample Input:\n4 3\nbbb\nSample Output:\n-1\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\nbbba\nSample Output:\n0\n\nSample Input:\n4 3\nbac\nSample Output:\n2\n\nSample Input:\n4 3\nbccb\nSample Output:\n2\n\nSample Input:\n4 3\nbbbc\nSample Output:\n1\n\nSample Input:\n4 3\nabbc\nSample Output:\n1\n\nSample Input:\n4 3\naaba\nSample Output:\n0\n\nSample Input:\n4 3\nbabb\nSample Output:\n0\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\naaba\nSample Output:\n0\n\nSample Input:\n4 3\nbabb\nSample Output:\n2\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\ncaca\nSample Output:\n-1\n\nSample Input:\n4 3\nccca\nSample Output:\n2\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\nbab\nSample Output:\n-1\n\nSample Input:\n4 3\nbbbc\nSample Output:\n2\n\nSample Input:\n4 3\nabcd\nSample Output:\n2\n\nSample Input:\n4 3\nbbaa\nSample Output:\n1\n\nSample Input:\n4 3\nabbc\nSample Output:\n1\n\nSample Input:\n4 3\nbacb\nSample Output:\n2\n\nSample Input:\n4 3\nabcc\nSample Output:\n2\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\naabb\nSample Output:\n1\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\ncbbb\nSample Output:\n2\n\nSample Input:\n4 3\ncccb\nSample Output:\n2\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\ncccb\nSample Output:\n2\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\nbabb\nSample Output:\n2\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\nbabb\nSample Output:\n2\n\nSample Input:\n4 3\nbabb\nSample Output:\n2\n\nSample Input:\n4 3\nbaba\nSample Output:\n0\n\nSample Input:\n4 3\nbabb\nSample Output:\n2\n\nSample Input:\n4 3\nbaba\nSample Output:\n0\n\nSample Input:\n4 3\nbabb\nSample Output:\n2\n\nSample Input:\n4 3\nbabb\nSample Output:\n2\n\nSample Input:\n4 3\nbaba\nSample Output:\n0\n\nSample Input:\n4 3\nbabb\nSample Output:\n2\n\nSample Input:\n4 3\nbbbb\nSample Output:\n0\n\nSample Input:\n4 3\nbabb\nSample Output:\n2\n\nSample Input:\n4 3\nbbaa\nSample Output:\n1\n\nSample Input:\n4 3\nbabb\nSample Output:\n2\n\nSample Input:\n4 3\nbabb\nSample Output:\n2\n\nSample Input:\n4 3\nbabba\nSample"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abba') == 2\n\"\"\"\n\nfrom math import gcd\n\nn, k = map(int, stdin.readline().split())\nls = list(stdin.readline().split())\n\nlength = []\nfor l in ls:\n    length.append(len(l))\n\nm = min(length)"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abba\") == 2\n\"\"\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n2 4\") == 3\nassert solution(\"4 4\\n1 2\\n2 3\\n2 4\\n1 3\\n3 4\") == 1\nassert solution(\"4 3\\n1 2\\n2 3\\n2 4\\n2 3\") == 4\n\"\"\""
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == 3\n\"\"\""
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n2 4') == 3\nassert solution('4 3\\n1 3\\n2 4') == 4\nassert solution('4 3\\n1 3\\n2 2') == 3\nassert solution('4 3\\n1 4\\n2 3') == 4\n\"\"\"\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('4 3\\n1 2\\n2 3\\n2 4') == '3'\nassert solution('5 3\\n1 3\\n1 2\\n2 3\\n2 4\\n4 5') == '2'\nassert solution('7 3\\n1 2\\n2 3\\n2 4\\n5 6\\n6 7') == '4'\nassert solution('7 7\\n1 2\\n2 3\\n2 4\\n5 6\\n6 7\\n7 1') == '4'\n\nSample Input:\n4 2\n1 2\n2 3\n3 4\nSample Output:\n1\n"
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n2 4\") == 3\nassert solution(\"7 8\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 1\") == 4\nassert solution(\"8 8\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 1\") == 4\nassert solution(\"9 8\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 1\") == 5\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\") == 5\n\"\"\"\n\nn, m = map(int, input().split())\n\ngraph = [[0] * n for _ in range(n)]\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a - 1][b - 1] = 1\n    graph[b - 1][a - 1] = 1\n\nvisited = [0] * n\n\ncount = 0\n\nfor i in range(n):\n    if visited[i] == 0:\n        count += 1\n        visited[i] = 1\n        queue = [i]\n        while queue:\n            v = queue.pop()\n            for i in range(n):\n                if graph[v][i] and visited[i] == 0:\n                    visited[i] = 1\n                    queue.append(i)\nprint(count)"
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5 1\\n1 2\\n1 4\\n1 2\\n1 3') == 3\nassert solution('5 3\\n1 2\\n1 4\\n1 2\\n1 3') == 3\nassert solution('7 6\\n1 2\\n2 3\\n2 4\\n5 6\\n2 3\\n1 2\\n1 3\\n2 5') == 3\nassert solution('5 2\\n1 2\\n1 3\\n1 4\\n1 5') == 4\n"
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n2 4') == 3\n\"\"\"\nimport collections\nimport itertools\nimport timeit\nimport typing\n"
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n2 4') == 3\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 3\n1 2\n2 3\n2 4''') == 3\n\"\"\""
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n2 4') == 3\n"
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n\"\"\") == \"\"\"1\n0\n\"\"\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nprint(solution(''), end='')\n\nfor line in stdin.splitlines():\n    pass\n\nassert solution('') == ''\nprint(solution(''), end='')\n\n\"\"\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3') == '1\\n0'\n\"\"\""
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\nassert solution('1 2\\n3 4') == '1'\n\nassert solution('2 2\\n1 0\\n1 1\\n1 0') == '1'\n\nassert solution('3 2\\n1 0\\n1 1\\n1 0\\n2 1') == '1'\n\nassert solution('3 2\\n1 0\\n1 1\\n1 0\\n2 1\\n1 0\\n2 1') == '2'"
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3\") == '1\\n0'\n\nSample Input:\n3 2\n2 0\n0 1\n1 1\n1 3\n2 3\nSample Output:\n1\n0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '1'\n\"\"\"\nimport sys\nfrom functools import reduce\nfrom typing import List\n\nfrom Helpers.test import test\nfrom Helpers.utils import _input_values, _print_output\n"
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 0\\n0 1\\n1000 1\\n1 3\") == '1'"
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 0\\n0 1\\n1000 1\\n1 3\") == \"1\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n''') == '''\n1\n0\n'''\n\nprint('Success')"
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3\\n\") == '1\\n0\\n'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(print(input()))\nprint(\"Hooray!\")\n\n\"\"\"\n\nimport sys\n\nN = int(input())\nmatrix = []\nfor i in range(N):\n    line = [int(x) for x in input().split()]\n    matrix.append(line)"
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3\\n3 2 2\\n5 2 1\\n3 2 1') == '7'\n\"\"\"\n\nimport os\nimport sys\nimport unittest\nimport io"
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n3 2 2\\n5 2 1\\n3 2 1') == '7'\n\"\"\""
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n1 2 3 4 5 6\\n2 3 4 5 6 7\\n3 4 5 6 7 8\\n2 3 1 5 6\\n1 2 1 4 3\\n4 3 5') == '7'\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n3 2 2\\n5 2 1\\n3 2 1') == '7'\n\"\"\"\n\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\nh = []\nv = []\nfor _ in range(N):\n    h.append(list(map(int, sys.stdin.readline().strip().split(' '))))\nfor _ in range(N):\n    v.append(list(map(int, sys.stdin.readline().strip().split(' '))))\n"
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 2 2\\n5 2 1\\n3 2 1\") == \"7\"\n\"\"\"\n\nimport sys\nfrom collections import deque, defaultdict\n\nsys.setrecursionlimit(5000)\n\n\nclass Tree:\n    def __init__(self, height, speed):\n        self.height = height\n        self.speed = speed\n\n    def grow_tree(self):\n        self.height += self.speed\n"
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '7'\nassert solution('1 2 3\\n3 2 2\\n5 2 1\\n3 2 1') == '7'"
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(sample_input_lines)) == str(sample_output)"
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(example_input) == expected_result\n\n-----Explanation-----\nIn the example above, the height of the tree at the beginning of each year is equal to 1, 2, and 3. That means there are groups of trees of equal height:\n\nGroup 1: { 1, 2, 3 }\n\nGroup 2: { { 3, 2 }, { 2, 1 } }\n\nGroup 3: { { 1, 2 }, { 1, 2, 3 } }\n\nThe size of the largest group of connected trees is 7.\n\"\"\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3\\n3 2 2\\n5 2 1\\n3 2 1') == '7'\n\"\"\""
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\") == 20\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\nlinearalgebra 10\\ncalkculus1 10\\ncalkculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\") == 20"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n1') == '1'\nassert solution('1\\n1\\n1') == '1'\nassert solution('1\\n1\\n1\\n1') == '1'\n"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\nlinearalgebra 10\\ncalkculus1 10\\ncalkculus2 20\") == 20\n"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100''') == 20\n\n\"\"\""
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\") == 20\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100\n\"\"\") == \"20\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\\n\") == 20\n\n---\nSolution:\n---\n\nfrom typing import List"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 10\na b c d 10\na b c e f 20\nx y z a b 30\nx y z a e 40\na b c d 1\na b c e 2\n''') == '''10\na b c d 10\na b c e f 20\na b c e 1\na b c d 2\n'''\nassert solution('''4 10\na b c d 10\na b c e f 20\nx y z a b 30\nx y z a e 40\na b c d 1\na b c e 2\n''') == '''20\na b c e f 20\na b c e 1\na b c d 2\n'''\nassert solution('''4 10\na b c d 10\na b c e f 20\nx y z a b 30\nx y z a e 40\na b c d 1\na b c e 2\n''') == '''20\na b c e f 20\na b c e 1\na b c d 2\n'''\nassert solution('''4 10\na b c d 10\na b c e f 20\nx y z a b 30\nx y z a e 40\na b c d 1\na b c e 2\n''') == '''20\na b c e f 20\na b c e 1\na b c d 2\n'''\nassert solution('''4 10\na b c d 10\na b c e f 20\nx y z a b 30\nx y z a e 40\na b c d 1\na b c e 2\n''') == '''20\na b c e f 20\na b c e 1\na b c d 2\n'''\n"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\") == \"20\"\n\"\"\""
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\\n') == '6'\n"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\") == 6\n\"\"\"\n\nfrom math import inf\nfrom typing import List, Tuple, Dict, Set\nfrom collections import defaultdict\n"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6''') == '6'\n\"\"\"\n\n\nfrom typing import List, Dict, Union\n\nfrom collections import defaultdict"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\") == 6\n\n-----Explanation-----\nThe pizzeria is located at road intersection 1, and the pizzeria and delivery car are stationed at time 0.\n\n1. At time 1, the delivery car is heading to road intersection 2, and it will be there by time 2, making it take the minimum possible time to deliver the order at time 1.\n\n2. At time 3, the delivery car is heading to road intersection 4, and it will be there by time 4, making it take the minimum possible time to deliver the order at time 1.\n\n3. At time 4, the delivery car is heading to road intersection 1, and it will be there by time 1, making it take the minimum possible time to deliver the order at time 4.\n\n4. The shortest path from the pizzeria to the delivery car is 1 -> 4 -> 1, making it take exactly 6 minutes to deliver the order at time 1.\n\n\"\"\"\n\n\nimport time\nimport sys\nfrom collections import deque\nfrom queue import PriorityQueue\n"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\\n') == '6'\n\"\"\"\n\n\"\"\"\nn, m = [int(i) for i in stdin.readline().strip().split()]\nroad_map = {}\nfor i in range(m):\n    u, v, d = [int(j) for j in stdin.readline().strip().split()]\n    road_map[u] = road_map.get(u, []) + [(v, d)]\n    road_map[v] = road_map.get(v, []) + [(u, d)]\n\nk = int(stdin.readline().strip())\ns, u, t = [int(i) for i in stdin.readline().strip().split()]\norder_map = {}\nfor i in range(k):\n    s, u, t = [int(j) for j in stdin.readline().strip().split()]\n    order_map[s] = order_map.get(s, []) + [(u, t)]\n    order_map[t] = order_map.get(t, []) + [(u, t)]"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\\n\") == '6'\n\n-----Constraints-----\n$1 \\le n \\le 1000$\n$1 \\le m \\le 5000$\n$1 \\le k \\le 1000$\n$1 \\le s_ i, t_ i \\le 10^8$\n$1 \\le u_ i, v_ i \\le n$\n$u_ i \\neq v_ i$\n\"\"\"\nimport sys\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\\n') == '6'\n\"\"\"\n\nimport sys\n\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.length = 0\n\n    def insert(self, data):\n        new_node = Node(data)\n        if self.length == 0:\n            self.head = self.tail = new_node\n        else:\n            self.tail.next = new_node\n            new_node.prev = self.tail\n            self.tail = new_node\n        self.length += 1\n\n    def remove(self, data):\n        temp = self.head\n        while temp is not None:\n            if temp.data == data:\n                break\n            prev = temp\n            temp = temp.next\n        if temp == self.head:\n            self.head = self.head.next\n        elif temp == self.tail:\n            self.tail = self.tail.prev\n        else:\n            prev.next = temp.next\n            temp.next.prev = prev\n        self.length -= 1\n        return True\n\n\nclass Solution:\n    def __init__(self):\n        self.linkedList = DoublyLinkedList()\n\n    def solution(self, stdin):\n        n, m = list(map(int, stdin.readline().split()))\n        road = [[int(i) for i in stdin.readline().split()] for _ in range(m)]\n        k = int(stdin.readline())\n        orders = [[int(i) for i in stdin.readline().split()] for _ in range(k)]\n        start, dest = 1, n\n        cars = [[[0, 0] for _ in range(m)] for _ in range(k)]\n        for i in range(k):\n            for j in range(m):\n                s, u, t = orders[i][j * 3], orders[i][j * 3 + 1], orders[i][j * 3 + 2]\n                if s > t:\n                    s, t = t, s\n                if u > dest:\n                    u = dest\n                cars[i][j] = [s, u, t]\n        cars = sorted(cars, key=lambda x: x[0])\n        intersections = {}\n        for i in range(m):\n            if road[i][0] in intersections.keys():\n                intersections[road[i][0]].append(road[i][1])\n            else:\n                intersections[road[i][0]] = [road[i][1]]\n        intersections = sorted(intersections.items(), key=lambda x: x[0])\n        answer = 0\n        # print(intersections)\n        # print(cars)\n        for i in range(m):\n            for j in range(len(cars[0])):\n                s, u, t = cars[i][j][0], cars[i][j][1], cars[i][j][2]\n                if s <= t:\n                    continue\n                if s > intersections[0][0]:\n                    answer += s - intersections[0][0]\n                    intersections.pop(0)\n                    break\n                if s < intersections[-1][0]:\n                    answer += intersections[-1][0] - s\n                    intersections.pop()\n                    break\n                if intersections[-1][0] - intersections[0][0] > t - s:\n                    answer += t - s\n                    s = intersections[0][0]\n                    for l in range(len(intersections) - 1, -1, -1):\n                        if intersections[l][0] <= s:\n                            answer += s - intersections[l][0]\n                            intersections.pop(l)\n                            break\n                    break\n        return answer\n"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6') == 6\n'''\n\nimport sys\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\") == 6\n\"\"\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(r'C:\\Users\\User\\IdeaProjects\\Gio\\venv\\Resources\\sample.in', encoding='utf8').read()) == '2'\n\"\"\""
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2') == 'impossible'\nassert solution('2 1 1') == '1'\nassert solution('3 1 1') == '1'\nassert solution('3 2 2') == '3'\n"
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 1\\n1 1') == '2'\n"
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 1') == '2'\nassert solution('4 2 2\\n1\\n1 2 3\\n2 3 4\\n4 2') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1\\n1 1') == '2'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 1\\n2\\n3\\n1 2\\n2 3 1\\n1 1\") == \"2\"\nassert solution(\"3 1 1\\n2\\n3\\n1 2\\n2 3 1\\n1 1\") == \"impossible\"\n\"\"\"\nimport sys\n\nassert sys.version_info >= (3, 7)  # make sure we have Python 3.7+\n"
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'impossible'\n\nSample Case:\n5 3 1\n3\n1 2 3\n4\n1 2 1\n3 3\n3 1 2\nSample Output:\n2\n\nSample Case:\n6 3 2\n3\n1 2 3\n4\n1 2 3\n5\n1 1\n3 5 2\n6\n3 2 1\n4 6\n2 3 1\n5 1\nSample Output:\n1\n\n-----Hint-----\nThe problem is equivalent to finding a subgraph of the game graph consisting of the cells that contain at least one resource. The problem is equivalent to finding the maximum independent set of a regular graph.\n\"\"\""
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 1 1\n2\n3\n1 2\n2 3 1\n1 1''') == '2'\nassert solution('''3 1 1\n2\n3\n1 2\n2 3 1\n1 1''') == 'impossible'\nassert solution('''3 1 1\n2\n3\n1 2\n2 3 1\n3 1''') == 'impossible'\nassert solution('''4 2 2\n2\n3\n1 2\n2 3 1\n3 1''') == '4'\nassert solution('''4 2 2\n2\n3\n1 2\n2 3 1\n3 1''') == '2'\n"
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 1\\n1') == '2'\nassert solution('4 3 2\\n1 2\\n3 4\\n4 1\\n1 2\\n3 3\\n3 1') == 'impossible'\nassert solution('3 5 4\\n3\\n1 2\\n2 3\\n2 4\\n3 4\\n4 5\\n1 3\\n1 4\\n1 5\\n5 2\\n4 2\\n2 2\\n3 3\\n3 2\\n4 1\\n3 5\\n2 4\\n5 3\\n3 2\\n2 4\\n4 1\\n5 5\\n5 4\\n5 1\\n5 4') == '5'\n\nimport sys"
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n125 50\\n250 250\\n750 750\") == \"500.0\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(float(input()))\n"
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n250 250\\n250 750') == '500.00'\n\"\"\""
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n250 250\\n250 750') == '500.00'\nassert solution('2\\n500 500\\n750 500') == '0.00'\nassert solution('2\\n150 150\\n250 500') == '100.00'\n\nSample Case:\nInput:\n3\n250 250\n250 750\n500 500\nOutput:\n750.00\n\"\"\""
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(solution_tester.TestCaseManager().get_input_as_string(__name__)) == solution_tester.TestCaseManager().get_expected_output(__name__)\n"
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n250 250\\n250 750') == '500.00'\nprint(solution(stdin.read()))\n\n-----Explanation-----\nThe maximum amount of rope is calculated by finding the length of the largest possible triangle. The longest side is a hypotenuse, and the other two sides are the largest side and the smallest side. The smallest side is the line between the two posts. The largest side is the line between the posts. The largest possible triangle is a right triangle, and one of its angles is the largest possible angle. The longest side is $d_3$, the shortest side is $d_2$, and the longest angle is $d_1$.\n\n$d_1^2 + d_2^2 = d_3^2$\n$d_1^2 = d_2^2 + d_3^2$\n$d_1^2 = 2d_2^2 + d_3^2$\n$d_1 = \\sqrt{2d_2^2 + d_3^2}$\n$d_1 = \\sqrt{2(d_2^2 + d_3^2)}$\n$d_1 = \\sqrt{2d_2^2 + 2d_3^2}$\n$d_1 = \\sqrt{2d_2^2} + \\sqrt{d_3^2}$\n$d_1 = \\sqrt{d_2^2 + d_3^2}$\n$d_1 = \\sqrt{d_3^2 + d_2^2}$\n$d_1 = \\sqrt{2d_2^2 + 2d_3^2}$\n$d_1 = \\sqrt{2d_2^2} + \\sqrt{d_3^2}$\n$d_1 = \\sqrt{d_2^2 + d_3^2}$\n$d_1 = \\sqrt{d_2^2} + \\sqrt{d_3^2}$\n$d_1 = \\sqrt{d_3^2}$\nThe maximum amount of rope is $d_1$.\n\n------"
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n250 250\\n250 750') == '500.00'\n\nsolution(stdin)\n\n----\nSample input:\n2\n567 10\n123 456\nSample output:\n1650.00\n"
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n'''"
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n250 250\\n250 750\") == \"500.00\"\nassert solution(\"3\\n1000 0\\n2000 1000\\n2000 2000\") == \"2.00\"\nassert solution(\"4\\n3000 0\\n3000 1000\\n2000 1000\\n2000 2000\") == \"1000.00\"\nassert solution(\"5\\n3000 0\\n3000 1000\\n2000 1000\\n2000 2000\\n2000 3000\") == \"1000.00\"\n\"\"\"\nimport math\nimport numpy as np\n"
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n250 250\\n250 750\") == \"500.00\"\n\"\"\"\n\nn = int(input())\n\nmax_x = 0\nmax_y = 0\n\nfor _ in range(n):\n    x, y = [int(i) for i in input().split()]\n    max_x = max(max_x, x)\n    max_y = max(max_y, y)\n\nprint(f\"{max_x * max_y:.2f}\")\n"
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n2 100 10\\n100 1 10\") == \"0\"\nassert solution(\"1 1\\n10 10\") == \"0\"\n\"\"\""
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 3\n2 100 10\n100 1 10''') == '0'\n\nimport math\nassert solution('''3 1\n1\n1\n1''') == '2'\n\nimport math\nassert solution('''4 1\n1\n1\n1\n1''') == '0'\n\nimport math\nassert solution('''5 1\n1\n1\n1\n1\n1''') == '1'\n\nimport math\nassert solution('''6 1\n1\n1\n1\n1\n1\n1''') == '2'\n\nimport math\n"
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(example) == example_answer\n\n\"\"\"\n\nfrom sys import stdin\nfrom typing import List\n\nN, M = map(int, stdin.readline().split())\nX = [list(map(int, stdin.readline().split())) for _ in range(N)]\n\nX.sort()\n\nans = 0\ncnt = 0\nfor i in range(len(X)):\n    ans += X[i][0]\n    cnt += 1\n    if cnt >= M:\n        break\nprint(ans)\n"
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n2 3 1''') == '2'\nassert solution('''5\n3 3 1\n2 2 2\n1 1 1\n1 2 2\n2 2 2''') == '4'\n\"\"\"\n"
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2 3') == '0'\n\"\"\"\n\nn, m = map(int, stdin.readline().strip().split())\nt = [[int(i) for i in stdin.readline().strip().split()] for _ in range(n)]\n\nprint(sum([sum(i) for i in t]))\n\n\"\"\"\n46.68%\n34.77%\n\"\"\"\n"
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n2 100 10\\n100 1 10\") == \"0\"\n"
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == 1\nassert solution(\"2 3\") == 2\nassert solution(\"3 4\") == 3\nassert solution(\"5 10\") == 5\n\n---Solution---\nclass Solution:\n    def solve(self, stdin):\n        a, b = map(int, stdin.readline().split())\n        lst = [list(map(int, stdin.readline().split())) for i in range(a)]\n        m, n = map(int, stdin.readline().split())\n        for i in range(a):\n            lst[i].sort(reverse=True)\n        r = 0\n        for i in range(m):\n            for j in range(n):\n                r += lst[j][i]\n        return r\n"
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n2 100 10\\n100 1 10\") == 0\n\nassert solution(\"1 1\\n100 100\") == 0\n\nassert solution(\"1 1\\n5 5\") == 0\n\nassert solution(\"2 3\\n1 100 10\\n100 1 10\") == 0\n\nassert solution(\"2 3\\n1 1 1\\n100 1 10\") == 0"
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n2 100 10\\n100 1 10\") == \"0\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('4 5 3 2') == '2'\nassert solution('0 1 1 1') == '0'\nassert solution('5 1 4 6 8') == '4'\nassert solution('3 2 2 1') == '0'\n'''\n\nfrom functools import reduce"
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35\") == 2\n\"\"\"\n\nimport sys\nfrom itertools import product\nimport numpy as np\n\nn_r, n_c, n_m, n = [int(x) for x in sys.stdin.readline().strip().split()]\nbounds = np.array([[int(x) for x in sys.stdin.readline().strip().split()] for i in range(n)])\nbounds = np.array([[int(x) for x in sys.stdin.readline().strip().split()] for i in range(n_m)])\n\nlocs = [int(x) for x in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35\") == \"2\""
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35\") == \"2\"\n\"\"\"\n\nfrom math import ceil, log, sqrt\nfrom typing import List"
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35\") == \"2\"\n\"\"\"\n\n\"\"\"\nSolution\nIf there are three or more file icons on the screen that are to be deleted, then it is very easy to group them together into a rectangle of coordinates $(r_1, c_1)$, $(r_2, c_2)$, $(r_3, c_3)$. If we find the coordinates of the four corners of the rectangle, we can find the coordinates of all the other corners of the rectangle by using the following formulas:\n\nr_i = r_1 + (r_2 - r_1) / 2\nc_i = c_1 + (c_2 - c_1) / 2\nr_i = r_1 + (r_3 - r_1) / 2\nc_i = c_1 + (c_3 - c_1) / 2\nr_i = r_1 + (r_4 - r_1) / 2\nc_i = c_1 + (c_4 - c_1) / 2\n\nBecause we know the pixel coordinates of the four corners $(r_1, c_1)$, $(r_2, c_2)$, $(r_3, c_3)$ and $(r_4, c_4)$, we can see that the coordinates of the four corners of the rectangle $(r_1, c_1)$, $(r_2, c_2)$, $(r_3, c_3)$ and $(r_4, c_4)$ will be in the following order:\n\n$(r_1, c_1)$\n$(r_1, c_4)$\n$(r_2, c_1)$\n$(r_2, c_4)$\n$(r_3, c_1)$\n$(r_3, c_4)$\n$(r_4, c_1)$\n$(r_4, c_4)$\nIn the figure below, the black icon $(r_1, c_1)$ and $(r_2, c_2)$ are to be deleted, the white icon $(r_3, c_3)$ and $(r_4, c_4)$ are to be kept, and the orange icon $(r_5, c_5)$ is to be ignored.\n\nFigure B.1 \n\nAs we can see, the coordinates of all the four corners of the rectangle are in the same order as the coordinates of the four corners of the four files to be deleted (red, blue, yellow, and green). Therefore, we can sort the coordinates of the four corners by their x-coordinate, and then by their y-coordinate.\n\nFor example, the two coordinates $(r_1, c_1)$ and $(r_2, c_2)$ are in the same order as the four corners of the four files to be deleted, so we can sort them by the x-coordinate and then the y-coordinate.\n\n$(r_1, c_1)$ is the upper left corner of the rectangle, so the first file is the file at the top left corner of the rectangle, which is the file to be deleted (red in the figure above). Thus, we sort them by the x-coordinate and then the y-coordinate.\n\n$(r_2, c_2)$ is the upper right corner of the rectangle, so the second file is the file at the top right corner of the rectangle, which is the file to be deleted (blue in the figure above). Thus, we sort them by the x-coordinate and then the y-coordinate.\n\nThe coordinates of the four corners of the rectangle are then sorted:\n\n$(r_1, c_1)$\n$(r_2, c_2)$\n$(r_3, c_3)$\n$(r_4, c_4)$\nThe top left corner of the rectangle is the first element of the sorted list of the coordinates. Therefore, we want to delete the file at the top left corner of the rectangle, which is the file to be deleted (red in the figure above).\n\n$(r_5, c_5)$ is the bottom left corner of the rectangle, so the third file is the file at the bottom left corner of the rectangle, which is the file to be deleted (green in the figure above). Thus, we sort them by the x-coordinate and then the y-coordinate.\n\n$(r_5, c_5)$ is the bottom right corner of the rectangle, so the fourth file is the file at the bottom right corner of the rectangle, which is the file to be deleted (yellow in the figure above). Thus, we sort them by the x-coordinate and then the y-coordinate.\n\nThe coordinates of the four corners are then sorted:\n\n$(r_1, c_1)$\n$(r_2, c_2)$\n$(r_5, c_5)$\n$(r_3, c_3)$\nThe first element of the sorted list of the coordinates is the top left corner of the rectangle, which is the file to be deleted (red in the figure above).\n\n$(r_5, c_5)$ is the bottom right corner of the rectangle, so the file at the bottom right corner of the rectangle is the file to be deleted (yellow in the figure above). Thus, we sort them by the x-coordinate and then the y-coordinate.\n\nThe coordinates of the four corners are then sorted:\n\n$(r_1, c_1)$\n$(r_2, c_2)$\n$(r_5, c_5)$\n$(r_3, c_3)$\nThe top left corner of the"
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35\") == \"2\"\n\"\"\""
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3') == '1'\nassert solution('1\\n2\\n3\\n1\\n2\\n3') == '0'\nassert solution('1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3') == '2'\nassert solution('1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3') == '1'\n'''"
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35''') == '2'"
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"80 50 3 2\\\\n75 5 25 20 50 35\\\\n50 5 25 35\") == 2\n\n-----Problem-----\nYou are given a rectangular screen and want to make a photo taken of some scene. You are to take one single image of a scene, then take the same image but two photos one after another in a larger photo. You are to take the smaller photo first, then increase the magnification and take the larger one afterwards.\n\nThe screen is represented by a string, where the characters represent the pixels on the screen. For example, if the screen has a row size of 50 pixels, and there is a pixel on the screen at the center position which is red, the string would have \u201cR\u201d at the center position.\n\nIf the magnification is set to 4, then the size of the resulting image will be 100 pixels. Then, there will be 4 red pixels in the center of the image, and each red pixel will be doubled (so 8 red pixels will appear in the image).\n\nIf the magnification is set to 3, then the size of the resulting image will be 200 pixels. Then, there will be 6 red pixels in the center of the image, and each red pixel will be tripled (so 12 red pixels will appear in the image).\n\nFinally, the magnification is set to 2, so that the resulting image will be 400 pixels. This means that there will be 12 red pixels in the center of the image, and each red pixel will be quadrupled (so 24 red pixels will appear in the image).\n\nThe screen is guaranteed to have a rectangular shape, and the magnifications are guaranteed to be integers, but their values are not necessarily the same for all inputs.\n\nYour goal is to output the minimum possible number of magnifications needed to take the full photo, while still maintaining its aspect ratio and having all of the red pixels in the center of the image.\n\nInput\nThe input begins with two integers $n_ r$ and $n_ c$ indicating the number of rows and columns of pixels on the screen, respectively, followed by the string $s$ representing the pixels on the screen.\n\nThe next line contains an integer $n$ indicating the number of file icons to be deleted, followed by the coordinates of the upper left corner of each file icon.\n\nThe final line contains $m$ coordinates of the upper left corner of each non-deleted icon, followed by another set of $m$ coordinates of the upper left corner of each non-deleted icon.\n\nOutput\nYour output must begin by writing the minimum number of magnifications needed to take the full photo, followed by the magnifications themselves, in order. The magnifications must be listed in the order in which they were taken.\n\nExample\nSample Input:\n50 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n\nSample Output:\n4\n2 2\n4 4\n2 2\n4 4\nExplanation\nThe first two magnifications are taken in order to take a photo of the size 100\u00d7100. The first photo is shown on the screen:\n\nThe third magnification is needed to take a photo of the size 200\u00d7200, which happens to be the same size as the first image. The photo is shown on the screen:\n\nThe fourth magnification is needed to take a photo of the size 400\u00d7400, which happens to be the same size as the second image. The photo is shown on the screen:\n\nThe final photo is the result of taking three magnifications in order: one of size 100, another of size 200, and a final one of size 400. The photo is shown on the screen:\n\nThe first and second magnifications are shown in order on the screen, with a magnification of 4 between them.\n\nNote\nThe magnifications are shown in order in which they were taken. For example, magnifications 2, 4, 2, and 4 are shown in order, not in which they were taken.\n\n'''\n\nimport numpy as np"
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(example_input) == 2\nassert solution(input) == 0\n\n\"\"\"\nimport os"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(    \"3 4\\n2211\\n1112\\n1112\") == \"AAAA\\n...A\\n....\\n\\nBB..\\nBBBB\\n...B\\n\\n....\\n...C\\nCCCC\"\nassert solution(    \"3 4\\n1112\\n1112\\n1112\") == \"impossible\"\nassert solution(    \"3 4\\n1112\\n1112\\n1112\") == \"impossible\"\nassert solution(    \"3 4\\n1111\\n1111\\n1111\") == \"impossible\"\nassert solution(    \"3 4\\n1111\\n2211\\n1111\") == \"BB..\\nBBBB\\n...B\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2211\\n1112\\n1112\") == \"AAAA\\n...A\\n....\"\nassert solution(\"2211\\n1112\\n1112\") == \"BB..\\nBBBB\\n...B\"\nassert solution(\"1112\\n1112\\n1112\") == \"....\\n...C\\nCCCC\"\nassert solution(\"2211\\n1112\\n1112\") == \"impossible\"\nassert solution(\"1111\\n1112\\n1111\") == \"impossible\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n2211\\n1112\\n1112') == 'AAAA\\n...A\\n....\\nBB..\\nBBBB\\n...B\\n....\\n...C\\nCCCC'\n\"\"\"\nimport numpy as np\n\nlines = stdin.split('\\n')\nn, m = list(map(int, lines[0].split()))\narr = np.array([list(line) for line in lines[1:]])\n\narr = np.where(arr == '1', 'A', np.where(arr == '2', 'B', '.'))\n\nprint(''.join(arr.ravel(order='F')).replace('.',''))\n"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'impossible'\nassert solution('\\n') == 'impossible'\nassert solution('1\\n') == 'A'\nassert solution('11\\n') == 'B'\nassert solution('22\\n') == 'B'\n"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3 4\n2211\n1112\n1112\n\"\"\") == \"\"\"\nAAAA\n...A\n....\n\nBB..\nBBBB\n...B\n\n....\n...C\nCCCC\n\"\"\", solution(\n\"\"\"\n3 4\n2211\n1112\n1112\n\"\"\") == \"impossible\", solution(\n\"\"\"\n3 4\n2211\n1112\n1112\n\"\"\")"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\nprint('Hooray!')\n"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\n2211\\n1112\\n1112') == 'AAAA\\n...A\\n....\\nBB..\\nBBBB\\n...B\\n....\\n...C\\nCCCC'\nassert solution('3 4\\n2211\\n1112\\n1112') == 'impossible'\n"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n2211\\n1112\\n1112\") == \"AAAA\\n...A\\n....\\nBB..\\nBBBB\\n...B\"\nassert solution(\"3 4\\n2211\\n1112\\n1112\") == \"impossible\"\n\nassert solution(\"3 4\\n2211\\n1112\\n1112\") == \"impossible\"\nassert solution(\"3 4\\n1112\\n1112\\n2211\") == \"BB..\\nBBBB\\n...B\"\nassert solution(\"3 4\\n2211\\n2211\\n2211\") == \"impossible\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n2211\\n1112\\n1112\") == \"AAAA\\n...A\\n....\\nBB..\\nBBBB\\n...B\\n....\\n...C\\nCCCC\"\nprint(solution(\"3 4\\n2211\\n1112\\n1112\"))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 2 4 2 4\") == \"5\"\nassert solution(\"2 3 2 4 2 1\") == \"9\"\nassert solution(\"3 3 1 3 3\") == \"7\"\nassert solution(\"3 3 1 3 2\") == \"9\"\nassert solution(\"4 1 3 4 3\") == \"9\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\") == '9'\nprint('Test pass.')"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1') == '9'\nassert solution('1 2\\n2 3') == '4'\nassert solution('4 3\\n1 1\\n2 1\\n3 1\\n4 1\\n1 2') == '10'\n"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\") == \"9\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3') == '9'\nprint('Cool!')\n\n________________\nimport sys\nimport math"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3\") == '9'\n\nassert solution(\"3 1 2\\n2 3 1\") == '4'\n\nassert solution(\"3 1 3\\n2 3 1\") == '8'\n\nassert solution(\"3 1 3\\n2 3 1\\n4 3 1\") == '8'\n\nassert solution(\"3 1 3\\n2 3 1\\n4 3 1\\n1 4 1\") == '12'"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\") == \"9\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3\") == 9\n\nassert solution(\"5 1 2 3 4 5\\n5 2 4 1 3 4 1\") == 9\n\nassert solution(\"3 1 3 1\\n3 4 1 2 3 2\\n4 3 1 2 1\") == 9\n\nassert solution(\"3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3\") == 12\n\nassert solution(\"3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3\\n5 2 4 1 3 4 1\") == 12"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3') == '9'\n"
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3') == '9'\n\"\"\"\n\nfrom collections import Counter\n\nN, A, R, T = [int(x) for x in stdin.split('\\n')[:4]]\nnodes = {i: {'d': 0, 'p': set()} for i in range(1, N + 1)}\nfor i in range(T):\n    duration, p, *path = [int(x) for x in stdin.split('\\n')[i + 4].split()]\n    delta = duration - nodes[p]['d']\n    nodes[p]['d'] += duration\n    nodes[A]['d'] += delta\n    nodes[R]['p'].add(p)\n    nodes[A]['p'].add(R)\n    nodes[R]['p'].add(A)\n    for x in path:\n        if x!= A:\n            nodes[x]['p'].add(A)\n    print(nodes)"
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n1 5') == '20.396078'\n\nSample Input:\n6 3 3 8\n0 0 1\n0 0 7\n0 3 7\n0 4 7\n3 4\n1 5\n1 6\nSample Output:\nimpossible\n\nSample Input:\n4 3 2 9\n0 0 6\n0 5 4\n1 0 2\n1 1 2\n0 3 2\n1 2 3\n2 3 2\n1 0 3\n3 0 4\n0 0 8\n1 0 7\n0 0 1\n2 1 5\n0 3 6\n3 1 3\n1 0 3\nSample Output:\n6.8"
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 2 1\") == \"4.0\"\n\n\"\"\"\n\nimport sys\nimport os\nfrom io import StringIO\nfrom collections import defaultdict\nfrom math import inf\n"
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n1 5\") == \"20.396078\"\nassert solution(\"3 4\\n1 5\\n3 4\") == \"IMPOSSIBLE\"\n\n\"\"\"\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n1 5\\n\") == \"20.396078\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n''') == '20.396078'\n\n-----Solution-----\n\n'''\nimport math"
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 2 3\\n1 4 6\\n0 0 6\\n6 4 8\\n6 0 6\\n6 4 8\\n3 4\") == \"20.396078\"\n\"\"\""
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 1 5 3\\n4 2 3\\n3 1 1\\n2 3 2\\n3 2 4\\n3 3 4\\n2 0 0\\n3 5 4\\n3 1 6\\n4 2 6\\n3 0 5\\n1 0 1\\n2 1 3\\n2 0 1\\n1 1 2\\n1 0 1\\n1 0 3\\n3 0 2\\n1 2 1\\n3 2 3\\n3 0 2\\n1 2 1\\n1 2 1\\n1 2 2\\n1 2 1\\n3 2 4\\n3 1 2\\n3 2 5\\n3 0 2\\n3 0 2\\n0 2 3\\n2 2 1\\n3 0 2\\n0 2 3\\n2 3 1\\n2 0 3\\n0 0 3\\n0 0 4\\n0 0 4\\n0 0 4\\n0 0 4\\n0 0 4\\n0 0 4\\n1 2 2\\n1 2 2\\n0 0 4\\n3 1 2\\n1 0 2\\n1 0 2\\n0 0 3\\n0 0 3\\n1 0 2\\n3 0 2\\n1 2 2\\n0 1 3\\n1 0 2\\n3 0 2\\n1 0 2\\n1 0 2\\n0 1 3\\n3 0 2\\n3 0 2\\n1 0 2\\n1 0 2\\n0 0 3\\n0 0 3\\n1 2 1\\n1 1 3\\n1 0 3\\n3 2 3\\n3 0 3\\n3 0 3\\n1 0 3\\n1 0 3\\n3 0 4\\n3 0 4\\n3 1 3\\n2 1 1\\n1 2 3\\n1 0 1\\n2 1 3\\n0 0 3\\n1 0 3\\n3 0 4\\n3 1 3\\n2 1 1\\n1 2 3\\n0 0 3\\n1 0 3\\n0 1 4\\n3 1 3\\n1 0 2\\n1 1 3\\n0 0 3\\n0 1 4\\n0 0 4\\n1 0 1\\n1 0 3\\n0 0 4\\n1 0 1\\n1 0 3\\n0 1 4\\n0 0 4\\n3 0 4\\n0 0 4\\n3 1 3\\n0 1 4\\n1 1 3\\n3 0 4\\n0 0 4\\n1 1 3\\n0 0 4\\n1 0 1\\n0 1 4\\n0 0 4\\n0 0 4\\n3 0 4\\n1 1 3\\n1 0 2\\n1 1 3\\n0 0 3\\n1 0 2\\n1 1 3\\n0 1 4\\n0 0 4\\n0 1 4\\n0 0 4\\n3 0 4\\n0 1 4\\n1 1 3\\n0 0 4\\n1 1 3\\n0 0 4\\n0 0 4\\n0 1 4\\n0 1 4\\n3 0 4\\n0 1 4\\n1 0 2\\n1 1 3\\n0 0 3\\n1 0 2\\n1 1 3\\n1 0 2\\n3 0 4\\n3 1 3\\n1 0 2\\n0 1 4\\n0 0 4\\n1 0 1\\n0 0 4\\n1 0 1\\n1 0 1\\n3 0 4\\n0 0 4\\n1 1 3\\n0 0 4\\n1 0 1\\n1 0 1\\n0 0 3\\n0 0 3\\n0 1 4\\n1 0 1\\n1 0 3\\n0 0 4\\n0 0 4\\n3 0 4\\n0 1 4\\n1 0 1\\n1 0 1\\n0 0 3\\n1 0 1\\n1 0 1\\n0 0 4\\n0 1 4\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n0 0 3\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n0 0 4\\n1 0 1\\n1 0 1\\n1 0 1\\n0 0 3\\n1 0 1\\n0 0 4\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n0 0 3\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n0 0 4\\n0 0 4\\n0 0 4\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n0 0 4\\n0 0 4\\n1 0 1\\n1 0 1\\n1 0 1\\n0 0 3\\n0 0 3\\n0 0 3\\n0 0 3\\n0 0 3\\n1 0 1\\n1 0 1\\n1 0 1\\n0 0 4\\n0 0 4\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n0 0 3\\n1 0 1\\n1 0 1\\n0 0 4\\n0 0 4\\n0 0 4\\n1 0 1\\n1 0 1\\n0 0 4\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n0 0 4\\n0 0 4\\n1 0 1\\n1 0 1\\n0 0 3\\n0 0 3\\n1 0 1\\n1 0 1\\n"
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n1 5\\n\") == \"20.396078\"\nassert solution(\"8 0 3\\n6 0 6\\n8 2 3\\n6 8 8\\n4 1\\n3 4\\n6 0 6\\n6 8 8\\n6 0 6\\n6 4 8\\n5 3\\n1 5\\n\") == \"20.052209\"\nassert solution(\"8 0 3\\n8 2 3\\n6 8 8\\n4 1\\n3 4\\n6 0 6\\n6 8 8\\n6 0 6\\n6 4 8\\n5 3\\n1 5\\n\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n1 5\") == \"20.396078\"\n\"\"\""
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n1 5\\n\") == \"20.396078\"\n\n\"\"\"\n\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abca\") == \"bc\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"nn\"\n\"\"\""
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abca\") == \"bc\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"nn\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm nn oo pp qq rr ss tt uu vv ww xx yy zz\") == \"fgh\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abca') == 'bc'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'nn'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm nn oo pp qq rr ss tt uu vv ww xx yy zz') == 'zz'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm nn oo pp qq rr ss tt uu vv ww xx yy zz abca') == 'zzb'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm nn oo pp qq rr ss tt uu vv ww xx yy zz abca'\n                'bc cd da dd ee ff gg hh ii jj kk ll mm nn oo pp qq rr ss tt uu vv ww xx yy zz abca'\n                'bc cd da dd ee ff gg hh ii jj kk ll mm nn oo pp qq rr ss tt uu vv ww xx yy zz abca'\n                'bc cd da dd ee ff gg hh ii jj kk ll mm nn oo pp qq rr ss tt uu vv ww xx yy zz abca'\n                'bc cd da dd ee ff gg hh ii jj kk ll mm nn oo pp qq rr ss tt uu vv ww xx yy zz abca') == 'zzbb'\n"
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abca\") == \"bc\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"nn\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"nn\"\n\"\"\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abca') == 'bc'\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == p\n\n\"\"\"\nimport string\nimport sys\nfrom typing import Callable, List\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abca') == 'bc'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'nn'\nassert solution('nn oo pp qq rr ss tt uu vv ww xx yy zz') == 'zz'\nassert solution('aabaab abcba babab') == 'b'\nassert solution('aa bb cc dd ee') == 'a'\n"
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abca\") == \"bc\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"nn\"\nassert solution(\"nn oo pp qq rr ss tt uu vv ww xx yy zz\") == \"z\"\nassert solution(\"abcaaaaaa\") == \"a\"\n\"\"\"\nfrom string import ascii_lowercase\n\nS = input()\nT = input().split()\n\nK = int(input())\nM = int(input())\n\nS_dict = {k: v for k, v in enumerate(S)}\n\nS_dict_list = [S_dict.copy() for _ in range(K)]\nS_list = list(S)\n\nfor m in range(M):\n    T_num_list = [int(input()) for _ in range(13)]\n    T_dict_list = [{k: v for k, v in enumerate(T[T_num])} for T_num in T_num_list]\n\n    for T_dict in T_dict_list:\n        for key in T_dict:\n            if key in S_dict:\n                T_dict[key] = S_dict[key]\n\n    S_dict_list = S_dict_list[:-1]\n    S_list = S_list[1:]\n\n    S_dict_list.append(T_dict_list[-1])\n    S_list.append(T_dict_list[-1][T_num_list[-1]])\n\npassword = \"\"\nfor S_dict in S_dict_list:\n    for key in S_dict:\n        password += S_dict[key]\n\nfor char in ascii_lowercase:\n    if char not in password:\n        print(char)\n        break\n"
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n-----Notes-----\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom collections import deque\n"
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    5\n    hobotnica\n    robot\n    hobi\n    hobit\n    robi\n    4\n    robi\n    hobi\n    hobit\n    rakija\n    \"\"\"\n) == \"\"\"\n12\n10\n16\n7\n\"\"\"\n)\n\"\"\"\none liner\n\"\"\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5\nhobotnica\nrobot\nhobi\nhobit\nrobi\n4\nrobi\nhobi\nhobit\nrakija\n''') == '''\n12\n10\n16\n7\n'''\n"
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\nhobotnica\nrobot\nhobi\nhobit\nrobi\n4\nrobi\nhobi\nhobit\nrakija\n''') == '12\\n10\\n16\\n7'\n\n-----"
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n4\\nrobi\\nhobi\\nhobit\\nrakija\\n\") == '12\\n10\\n16\\n7'\n\"\"\"\n\nimport sys\nimport string"
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n4\\nrobi\\nhobi\\nhobit\\nrakija\") == \"12\\n10\\n16\\n7\"\n\"\"\""
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n4\\nrobi\\nhobi\\nhobit\\nrakija\\n\") == \"12\\n10\\n16\\n7\\n\"\n\n\"\"\""
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n4\\nrobi\\nhobi\\nhobit\\nrakija\\n\") == \"12\\n10\\n16\\n7\\n\"\n\"\"\""
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('hobotnicarobothobi') == 'hobotnica'\nassert solution('robothobihobirakija') == 'robot'\nassert solution('hobothobihobirakija') == 'hobotnica'\n'''\n"
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\\n\".join(['4', 'robi\\nhobi\\nhobit\\nrakija'])) == \"12\\n10\\n16\\n7\"\n\"\"\"\n\nfrom collections import Counter, namedtuple"
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n4\\nrobi\\nhobi\\nhobit\\nrakija\") == '12\\n10\\n16\\n7'\nassert solution(\"6\\npies\\nkot\\nhund\\nkot\\nkop\\n3\\npies\\nkot\\nkop\\npies\\nhund\") == '12\\n12\\n12\\n4\\n12\\n12'\n\n\"\"\""
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"14 4\\nJQ IRKEYFG EXQ\") == 'THIS IS A TEST'\n\"\"\"\n\nimport numpy as np\n\nN, X = input().split()\nN, X = int(N), int(X)\n\ngrid = np.zeros((X, X), dtype=int)\n\nfor i in range(X):\n    grid[0, i] = (33 * i + 1) % 2**20\n\nfor i in range(X):\n    for j in range(X):\n        if j == 0:\n            grid[j, i] = grid[0, i]\n        else:\n            grid[j, i] = (grid[0, i] + grid[j, i-1]) % 2**20"
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"14 4\\n\"\n\"JQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\n\"\"\"\n"
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"14 4\", \"JQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\n\"\"\"\n\nfrom itertools import repeat\nfrom operator import mul\nfrom functools import reduce\n"
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"14 4\\nJQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\nprint(\"All tests passed.\")\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"JQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\n\"\"\"\n\nimport re\nfrom math import ceil\nfrom typing import List, Dict\n\nfrom collections import Counter\n"
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"JQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\n\"\"\""
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"14 4\") == \"THIS IS A TEST\"\n\"\"\"\n"
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"14 4\\nJQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2.6\") == ['135', '270']\n\"\"\""
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2.6') == '135\\n270\\n135135\\n270270'\n"
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2.6\") == [135, 270]\n\"\"\""
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2.6') == ['135', '270', '135135', '270270']\nassert solution('0.1') == ['1', '10', '101', '100', '1010', '1001', '1100', '1101', '1110', '1111', '11100', '11101', '11110', '11111', '111110', '111111', '1111110', '1111111', '11111110', '111111110', '11111111', '111111111', '1111111110', '11111111110', '11111111111', '1111111111110', '1111111111111', '111111111111110', '111111111111111', '11111111111111110', '1111111111111111', '11111111111111111', '11111111111111110', '11111111111111110', '1111111111111111', '1111111111111111', '1111111111111111', '11111111111111110', '11111111111111110', '11111111111111110', '1111111111111111', '1111111111111111', '11111111111111110', '11111111111111110', '1111111111111111', '11111111111111110', '11111111111111110', '1111111111111111', '1111111111111111', '11111111111111110', '11111111111111110', '11111111111111110', '11111111111111110', '11111111111111110', '1111111111111111', '1111111111111111', '1111111111111111', '11111111111111110', '11111111111111110', '11111111111111110', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '11111111111111110', '11111111111111110', '11111111111111110', '11111111111111110', '1111111111111111', '1111111111111111', '11111111111111110', '11111111111111110', '11111111111111110', '11111111111111110', '1111111111111111', '1111111111111111', '11111111111111110', '11111111111111110', '1111111111111111', '1111111111111111', '11111111111111110', '11111111111111110', '1111111111111111', '11111111111111110', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '1111111111111111', '111111111111"
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2.6') == ['135', '270', '135135', '270270']\nassert solution('3.2') == ['16', '432']\nassert solution('0.1') == ['101', '1010', '10101', '101010', '1010101', '1010110']\n\"\"\"\n\nx = input()\nx = float(x)\nx = int(x*10000)"
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2.6') == '135\\n270\\n135135\\n270270'\n\"\"\""
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2.6') == ['135', '270', '135135', '270270']\n\"\"\""
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2.6') == ['135', '270', '135135', '270270']\nassert solution('5.4') == ['355', '5705', '75551', '9055', '95505', '99510', '10510', '11510', '12010', '12110', '122110', '123110', '13110', '132110', '133110', '14110', '142110', '143110', '15110', '152110', '153110', '16110', '162110', '163110', '17110', '172110', '173110', '18110', '182110', '183110', '19110', '192110', '193110', '20110', '20210', '203110', '21110', '21210', '21310', '21410', '21510', '21610', '21710', '21810', '21910', '22110', '22210', '22310', '22410', '22510', '22610', '22710', '22810', '22910', '23110', '23210', '233110', '24110', '24210', '243110', '25110', '25210', '253110', '26110', '26210', '263110', '27110', '27210', '273110', '28110', '28210', '283110', '29110', '29210', '293110', '30110', '30210', '30310', '30410', '30510', '30610', '30710', '30810', '30910', '31010', '31110', '31210', '31310', '31410', '31510', '31610', '31710', '31810', '31910', '32110', '32210', '32310', '32410', '32510', '32610', '32710', '32810', '32910', '33010', '33020', '33110', '33210', '33310', '33410', '33512', '33513', '33625', '33626', '33781', '33782', '33793', '33794', '33795', '33796', '33797', '33798', '33799', '33810', '33811', '33812', '33813', '33814', '33815', '33816', '33817', '33818', '33819', '33820', '33821', '33822', '33823', '33824', '33825', '33826', '33827', '33828', '33829', '3383', '33830', '33831', '33832', '33833', '33834', '33835', '33836', '33837', '33838', '33839', '33840', '33841', '33842', '33843', '33844', '33845', '33846', '33847', '33848', '33849', '3385', '33850', '33851', '33852', '33853', '33854', '33855', '33856', '33857', '33858', '33859', '33860', '33861', '33862', '33863', '33864', '33865', '33866', '33867', '33868', '33869', '33870', '33871', '33872', '33873', '33874', '33875', '33876', '33877', '33878', '33879', '3388', '33881', '33882', '33883', '33884', '33885', '33886', '33887', '33888', '33889', '33890', '33891', '33892', '33893', '33894', '33895', '33896', '33897', '33898', '33899', '33900', '33901', '33902', '33903', '33904', '33905', '33906', '33907', '33908', '33909', '33910', '33911', '33912', '33913', '33914', '33915', '33916', '33917', '33918', '33919', '33920', '33921', '33922', '33923', '33924', '33925', '33926', '33927', '33928', '33929', '33930', '33931', '33932', '33933', '33934', '33935', '33936', '33937', '33938', '33939', '33940', '33941', '33942', '33943', '33944', '33945', '33946', '33947', '33948', '33949', '33950', '33951', '33952', '33953', '33954', '33955', '33956', '33957', '33958', '33959', '33960', '33961', '33962', '33963', '33964', '33965', '33966', '33967', '33968', '33969', '33970', '33971', '33972', '33973', '33974', '33975', '33976', '33977', '33978', '33979', '33980', '33981', '33982', '33983', '33984', '33985', '33986', '33987', '33988', '33989', '33990', '33991', '33992', '33993', '33994', '33995', '33996', '33997', '33998', '33999', '34000', '34001', '34002', '34003', '34004', '34005', '34006', '34007', '34008', '34009', '34010', '34011', '34012', '34013', '34014', '34015', '34016', '34017', '34018', '34019', '34020', '34021', '34022', '34023', '34024', '34025', '34026', '34027', '34028', '34029', '34030', '34031', '34032', '34033', '34034', '34035', '34036', '34037', '34038', '34039', '34040', '34041', '34042', '34043', '34044', '34045', '34046', '34047', '34048', '34049', '34050', '34051', '34052', '34053', '34054', '34055', '34056', '34057', '34058', '34059', '34060', '34061', '34062', '34063', '34064', '34065', '34066', '34067', '34068', '34069', '34070', '34071', '34072', '34073', '34074', '34075', '34076', '34077', '34078',"
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'No solution'\nassert solution('1') == 'No solution'\nassert solution('5') == '1\\n5'\nassert solution('5.6') == '1\\n5\\n6\\n15\\n36'\nassert solution('0.1') == 'No solution'\n"
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2.6') == ['135', '270', '135135', '270270']\nassert solution('1') == ['1']\n\"\"\""
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == '4'\n"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\\n\") == \"4\"\nassert solution(\"3\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n\") == \"3\"\nassert solution(\"4\\n0 1\\n1 1\\n3 4\\n5 7\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\\n\") == \"4\"\nassert solution(\"5\\n1 1\\n1 2\\n0 0\\n2 2\\n4 3\\n5 6\\n7 2\\n7 6\\n\") == \"5\"\nassert solution(\"7\\n0 0\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n3 1\\n3 2\\n3 3\\n4 0\\n4 1\\n4 2\\n4 3\\n5 0\\n5 1\\n5 2\\n5 3\\n6 0\\n6 1\\n6 2\\n6 3\\n\") == \"7\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n2 1\\n\") == \"4\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == \"4\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List\n\nclass Quadrilateral:\n    def __init__(self):\n        self.n = 0\n        self.points = []\n        self.candidates = []\n\n    def is_valid(self):\n        if self.n!= 4:\n            return False\n        if self.is_degenerated():\n            return False\n        if not self.is_non_degenerate():\n            return False\n        if self.is_non_intersecting():\n            return False\n        return True\n\n    def is_degenerated(self):\n        if len(set(self.points))!= 4:\n            return True\n        return False\n\n    def is_non_degenerate(self):\n        a = self.points[0]\n        b = self.points[1]\n        c = self.points[2]\n        d = self.points[3]\n\n        if a == b or a == c or b == c or a == d or b == d or c == d:\n            return False\n        return True\n\n    def is_non_intersecting(self):\n        for i in range(4):\n            for j in range(i + 1, 4):\n                if self.points[i] == self.points[j]:\n                    return False\n        return True\n\n    def add_point(self, point):\n        self.points.append(point)\n        self.n += 1\n        self.candidates.append(point)\n\n    def print(self):\n        print(\"n =\", self.n, \"points =\", self.points)\n\nclass Castle:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def is_valid(self):\n        return True\n\n    def add_point(self, point):\n        pass\n\n    def print(self):\n        pass"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == \"4\"\nassert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == \"1\"\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == \"4\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\\n\") == \"4\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3') == '4'\nassert solution('3\\n0 1\\n3 7\\n4 5\\n6 5\\n9') == '0'\nassert solution('2\\n1 0\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 0\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\\n3 5\\n3 6\\n4 0\\n4 1\\n4 2\\n4 3\\n4 4\\n4 5\\n4 6\\n5 0\\n5 1\\n5 2\\n5 3\\n5 4\\n5 6\\n6 0\\n6 1\\n6 2\\n6 3\\n6 4\\n6 5\\n6 6') == '0'\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == \"4\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2\\n1 3\\n1 4\\n1 5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2\\n1 3\\n1 4\\n1 5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n5\n1 2\n1 3\n1 4\n1 5\n\"\"\"\n) == \"\"\"\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n\"\"\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\n\"\"\""
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\n-----Problem-----\nThe order of the points is given by the data; we don't have to sort them or do anything fancy.\n\nEach edge is also guaranteed to be a straight line (i.e., no cycles).\n\nGiven the coordinates of the points on the graph, find the smallest distance between two points.\n\n-----Solution-----\nInstead of using a brute force approach, we can actually take advantage of the graph structure.\n\nWe can maintain a disjoint set of connected components (aka, the \"forest\"), and for every edge, we can simply create a new connected component and link them. This will end up creating a new connected component containing the new point and all old components, so we can store the resulting forest in a dictionary.\n\nO(E + V) time, where E is the number of edges and V is the number of vertices\nO(E + V) space, where E is the number of edges and V is the number of vertices\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\n\nSample Input:\n7\n1 3\n1 5\n2 3\n2 4\n2 6\n3 4\n3 7\nSample Output:\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n-1.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n-1.0000000 1.0000000\n1.0000000 1.0000000\n-1.0000000 1.0000000\n1.0000000 1.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n-1.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n-1.0000000 1.0000000\n0.0000000 -1.0000000\n-1.0000000 1.0000000\n1.0000000 1.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0.0000000\n0.0000000 0."
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\n\n-----Problem-----\nWe have a list of tasks that need to be done, and each task has an associated profit. We know the maximum profit that we can make if we finish the tasks in the order that they are given.\n\nHowever, we are only able to work on the tasks in the order that they are given. This means that we cannot complete the tasks in the order in which they were given.\n\nFor example, given $profits = [10, 7, 20, 17]$, we may make $17$, and then have to wait for $7$. We cannot make $20$ until we have finished $7$. We cannot make $10$ until we have finished $7$.\n\nGiven the list of profits, how much money can we make?\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2\n1 3\n1 4\n1 5''') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n\"\"\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\") == '0.0 0.0\\n1.0 0.0\\n-1.0 0.0\\n0.0 1.0\\n0.0 -1.0'\nassert solution(\"5\\n1 2\\n2 3\\n1 4\\n1 5\") == '1.0 0.0\\n0.0 1.0\\n0.0 -1.0'\n\"\"\"\n\nn = int(input())\n\nconnections = []\nfor _ in range(n - 1):\n    connections.append(list(map(int, input().split())))\n\nconnections = sorted(connections, key=lambda e: (e[1], e[0]))\n"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\n\nassert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\n\nassert solution(\"3\\n1 2\\n1 3\\n2 3\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n0.0000000 1.0000000\"\n\nassert solution(\"2\\n1 2\\n1 2\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\"\n\nassert solution(\"1\\n1 1\") == \"0.0000000 0.0000000\""
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('a\\nb\\nc\\n') == ''\nassert solution('a\\nb\\nc\\n') == '3'\nassert solution('a\\nb\\nc\\n') == '3'\n"
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaa\\nabc\\naba\\na*a\\naaa*\\n*aaa') == '2\\n1\\n1'\nprint('All tests passed.')\n\n-----Problem-----\nLittle Matej is solving an OOP (Object-oriented programming) laboratory exercise and he\u2019s having trouble with solving one subtask.\n\nHe is given a set that contains $N$ words. He is also given $Q$ queries where each query is one pattern. A pattern consists of a single character \u201c*\u201d and lowercase letters of the English alphabet. For example, \u201c*\u201d, \u201ckul*to\u201d, \u201cana*\u201d.\n\nA pattern is said to cover a word if such an array of letters (which can be empty) exists that, when replacing the character \u201c*\u201d, the pattern and the word become completely identical. It is necessary to output how many words each pattern covers.\n\nLittle Matej doesn\u2019t want to write a lot of test code to figure out what a pattern covers, so he asked you to help him. He wrote the following code to figure out which patterns cover how many words:\n\nSample Input:\n3 3\naaa\nabc\naba\na*a\naaa*\n*aaa\nSample Output:\n2\n1\n1\n----Solution----\nimport re"
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 3\naaa\nabc\naba\na*a\naaa*''') == '''2\n1\n1'''\nprint(solution(stdin))\n"
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\naaa\\nabc\\naba\\na*a\\naaa*\\n*aaa\") == \"2\\n1\\n1\"\n\"\"\"\nimport sys\n\nassert sys.stdin.readline().rstrip() == \"3 3\\naaa\\nabc\\naba\\na*a\\naaa*\\n*aaa\"\n\nfor line in sys.stdin:\n    pass\n"
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\naaa\\nabc\\naba\\na*a\\naaa*\") == \"2\\n1\\n1\"\n\nassert solution(\"3 1\\nacb\\n*cb\\na*c\") == \"2\\n1\\n1\"\n\nassert solution(\"1 1\\nacb\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 3\naaa\nabc\naba\na*a\naaa*\n*aaa\n''') == '''2\n1\n1\n'''\nassert solution('''1 1\na\n''') == '''1\n'''\nassert solution('''4 3\naa\naaa\naaaa\na\na*\na*a\na*a*\n*\n*a*\na\na*a\n*a\na*a*a\n*a*\na*\na\n*\n*a\na*a*a\n*a*a*\n*a*a*a\n*a*a*a*\na*a*a*a\na*a*a*a*\n''') == '''1\n1\n2\n2\n'''\nassert solution('''4 4\na\naaa\naa\na*\na*a\na*a*\n*a\n*a*\na\n*\n*a\na\na*a\n*a\na\na*a\n*a*\na*a*a\n*a*a*a\n''') == '''1\n2\n2\n1\n1\n'''\nassert solution('''5 5\naa\na\na\na\na\n*\na\na\na\na\na\n*\na\na\na\na\na\na\na\n*\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na"
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\naaa\\nabc\\naba\\na*a\\naaa*\\n*aaa\\n') == '2\\n1\\n1\\n'\n"
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('ab*') == 'ab'\nassert solution('ab*c') == 'ac'\nassert solution('a*b*c') == 'abc'\n"
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\naaa\\nabc\\naba\\n*aa\\naaa*\\n*aaa\") == \"2\\n1\\n1\"\nprint('Test pass.')"
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 3\naaa\nabc\naba\na*a\naaa*''') == '''2\n1\n1'''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 1\nassert solution('3 2\\nOO\\nOO\\nOO\\nOO\\nOO\\nOO\\nOO\\n') == 0\nassert solution('4 2\\nOO\\nOX\\nOX\\nOX\\nOO\\nOX\\nOX\\nOX\\n') == 1\nassert solution('5 2\\nOXX\\nOXO\\nOXO\\nOXO\\nOXO\\nOXX\\nOXO\\nOXO\\nOXO\\n') == 0\nassert solution('2 2\\nXX\\nXX\\n') == 0\n"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOO\\nXO\\nOO\") == 1\n\nassert solution(\"4 2\\nOX\\nXO\\nXO\\nOO\\nXO\\nOO\") == 0\n\nassert solution(\"4 2\\nXO\\nOX\\nXO\\nOO\\nXO\\nOO\") == 1\n\nassert solution(\"4 2\\nXX\\nXX\\nXX\\nXX\\nOO\\nXX\\nXX\") == 1\n\nassert solution(\"4 2\\nXX\\nXX\\nXX\\nXX\\nXO\\nXX\\nXX\") == 0"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\nO\\nOX\\nO\\nOX\\nO\\nO\\nOX') == 1\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOO\\nXO\\nOO') == 1\n\"\"\""
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(sample_input_text) == sample_output_text\n\n-----Problem-----\nYou have a rectangular piece of paper, and you wish to cut it into two pieces with equal lengths. One of the paper is facing up, and the other is facing down. You can only cut one side of the paper.\n\nWrite a program to compute the minimum possible length of the other side.\n\n-----Solution-----\n\n-----Notes-----\nIf the paper is initially cut to one side, then that is the minimum possible length.\n\nOtherwise, the minimum length will be the same as the total length minus the length of the side that is facing up.\n\nFor example, if the paper initially has length 6 and is cut to be 3 on the front and 4 on the back, the minimum length is 6-3 = 3.\n\n-----Caveats-----\n\n* Assume the input data is valid.\n* If the starting configuration is invalid, output 0.\n\n-----Test Case-----\nSample Input:\n3 1\nXO\nOO\nOX\n\nSample Output:\n0\n\nExplanation:\nThe front piece is always up, so it is impossible for the back piece to be down.\n\nSample Input:\n1 1\nXO\n\nSample Output:\n1\n\nExplanation:\nThe front and back pieces are both up, so the minimum length is 1.\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOO\\nXO\\nOO\") == 1\n\nassert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOO\\nXO\\nOO\") == 0\n\n-----Problem-----\nYou're making a game that requires players to stay in a board that is at least 5 by 5. Your program should output whether or not a player is able to stay in the board, based on whether or not they're able to get to the center.\n\nExample\n\nThe game's board would look something like this:\n\nXO\nOX\nXO\nOX\nOO\nThe player should be able to get to the center, and so should be able to stay in the board.\n\nThe program should output 1, and then 1 line for each player.\n\nSample Input\n\n5 5\nXO\nOX\nXO\nOX\nOO\nXO\nOO\nSample Output\n\n1\n1\n1\n1\n0\nExplanation\n\nPlayer 1 gets to the center, and so does Player 2. Player 3 gets to the center, but Player 4 can't. Player 3 can't because the board is too small, and Player 4 can't because Player 1 has already reached the center.\n\n-----Solution-----\n\nx=int(input())\ny=int(input())\nflag=1\nfor i in range(y):\n    a=input()\n    if len(a)==y:\n        if len(set(a))==1 and a[0]=='O':\n            flag=0\n            break\n        else:\n            if not 'X' in a:\n                flag=0\n                break\n        \n"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n\"\n\"XO\\n\"\n\"OX\\n\"\n\"XO\\n\"\n\"OX\\n\"\n\"OO\") == 1\nprint(solution(\"4 2\\n\"\n\"XO\\n\"\n\"OX\\n\"\n\"XO\\n\"\n\"OX\\n\"\n\"OO\"))"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOO\\nXO\\nOO\") == \"1\"\nassert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOO\\nXO\\nOO\") == \"0\"\nassert solution(\"4 2\\nOO\\nOX\\nOX\\nXO\\nOO\\nXO\\nOO\") == \"0\"\nassert solution(\"4 2\\nO\\nX\\nO\\nX\\nO\\nX\\nO\") == \"0\"\n\nIn this case, the starting board is:\n\n1 O\n2 O\n3 X\n4 O\n5 O\n6 X\n7 X\n8 O\nand the target board is:\n\n1 O\n2 O\n3 X\n4 X\n5 X\n6 O\n7 X\n8 O\nSince the board is not in the starting configuration, the teacher wants to bring it to the target configuration.\n\nIn the starting configuration, there are seven pegs that are up (O) and eight that are down (X). The teacher wants to bring them all down, since they are all in the target configuration, so there are no peg that is in the target configuration and not in the starting configuration.\n\nThis is the same starting configuration as before, so the answer is $1$.\n\"\"\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOO\\nXO\\nOO\") == \"1\"\n\nassert solution(\"4 2\\nOX\\nXO\\nXO\\nOX\\nOO\\nXO\\nOO\") == \"0\"\n\nassert solution(\"4 2\\nXO\\nXO\\nXO\\nOO\\nXO\\nOO\") == \"0\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOO\\nXO\\nOO') == 1\n\n-----Notes-----\n\n- n=1, m=1\n- n=1, m=2\n- n=2, m=1\n\n\"\"\""
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 0\\n0 2\\n-2 0\\n0 -2\") == \"16\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 0\\n0 2\\n-2 0\\n0 -2\") == 16\n\"\"\"\n\nimport itertools\nimport math"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 0\\n0 2\\n-2 0\\n0 -2\") == \"16\"\n'''\nimport sys\nimport math\nimport collections\nfrom functools import reduce"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 0\\n0 2\\n-2 0\\n0 -2') == 16\n"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n0 2\\n-2 0\\n0 -2\") == 16\n\"\"\"\n\nN = int(input())\npoints = []\nfor i in range(N):\n    points.append(tuple(map(int, input().split(' '))))"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n0\\n0\\n-2\\n0\\n') == '16'\n"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 0\\n0 2\\n-2 0\\n0 -2\") == \"16\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n'''\n\n'''\n\nn = int(input())\nmatrix = [[int(x) for x in input().split()] for _ in range(n)]\n\ntotal_s = 0\nn_pts = n ** 2"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 0\\n0 2\\n-2 0\\n0 -2\") == \"16\"\n\"\"\"\n\n\nfrom typing import List, Tuple, Callable, Dict\n"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n0 0\\n0 2\\n-2 0\\n0 -2') == 16\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 10 50\\n8 8 2 -2') == '80'\n\nimport sys"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 10 50\\n8 8 2 -2') == '80'\n"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 10 50\\n8 8 2 -2') == '80'\n\nSolution:\nimport sys\n"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10 50\\n8 8 2 -2\") == \"80\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 10 50\n8 8 2 -2''') == '80'\nprint(solution(stdin))\n'''\n\nn, c, r = [int(x) for x in input().split()]\nscores = [int(x) for x in input().split()]\nans = 0\nfor i in range(n):\n    if scores[i] == 0:\n        j = i + 1\n        scores[i] = scores[j] = 1\n        while j < n and scores[j] == 0:\n            scores[j] = scores[j + 1] = -scores[j]\n            j += 1\n        ans += c + r\n        break\nprint(ans)\n"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10 50\\n8 8 2 -2\") == '80'\n"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10 50\\n8 8 2 -2') == '80'\n\"\"\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10 50\\n8 8 2 -2\") == \"80\"\n\"\"\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10 50\\n8 8 2 -2\") == \"80\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10 50\\n8 8 2 -2\") == \"80\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6\") == \"3.000000000\"\n\"\"\"\n\nimport sys\nfrom math import inf\n"
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6') == '3.0'\n\"\"\"\nimport math\nfrom collections import namedtuple\n\nPoint = namedtuple('Point', ['x', 'y'])\nStation = namedtuple('Station', ['x', 'y'])\n\nBikeStation = namedtuple('BikeStation', ['x', 'y'])"
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\"\"\"\n\nfrom collections import defaultdict\n\nfrom aoc import utils\n\n__author__ = 'csilla'\n\npoints = defaultdict(int)\ncenter = [0, 0]\nsize = [0, 0]\n\nfor line in utils.get_lines(19):\n    # get data\n    inputs = line.split()\n    if line[0] == 'v':\n        v_walk, v_bike = int(inputs[1]), int(inputs[3])\n    elif line[0] == 'b':\n        x1, y1, x2, y2 = int(inputs[1]), int(inputs[3]), int(inputs[5]), int(inputs[7])\n        size = [max(x1, x2), max(y1, y2)]\n        for x in range(x1, x2 + 1):\n            for y in range(y1, y2 + 1):\n                points[(x, y)] = 1\n    elif line[0] == 'g':\n        x, y = int(inputs[1]), int(inputs[3])\n        center = [x, y]\n    elif line[0] == 'd':\n        x, y = int(inputs[1]), int(inputs[3])\n        points[(x, y)] = 2\n    elif line[0] == 'n':\n        n = int(inputs[1])\n        for i in range(n):\n            x, y = int(inputs[3 + 2*i]), int(inputs[3 + 2*i + 1])\n            points[(x, y)] = 1\n\nprint(size)\n\nwalked = 0\nbiked = 0\nto_go = center\n\nwhile True:\n    walked += 1\n    # current location\n    cur_x, cur_y = to_go\n    cur_point = points[(cur_x, cur_y)]\n    # check if destination\n    if cur_point == 2:\n        break\n    # if not, get the neighbor\n    next_point = None\n    if cur_point == 0:\n        next_point = points[(cur_x, cur_y + 1)]\n    elif cur_point == 1:\n        next_point = points[(cur_x + 1, cur_y)]\n        if points[(cur_x + 1, cur_y)] == 0:\n            walked -= 1\n        if points[(cur_x + 1, cur_y)] == 2:\n            biked += 1\n    # continue walking\n    if next_point == 0:\n        to_go = (cur_x, cur_y + 1)\n    elif next_point == 1:\n        to_go = (cur_x + 1, cur_y)\n        if points[(cur_x + 1, cur_y)] == 0:\n            walked -= 1\n        if points[(cur_x + 1, cur_y)] == 2:\n            biked += 1\n    else:\n        print('Something went wrong')\n\nprint(walked, biked)\nprint(walked + biked)\n"
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6\") == \"3.000000000\"\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport re\nfrom collections import namedtuple\n\nimport pytest\n\nfrom preprocessing import int_mapper, str_mapper, path_mapper\nfrom solutions.min_time_to_meet import min_time_to_meet\nfrom testing.common import read_input_with_separator\n\nTest = namedtuple('Test', ['input', 'expected'])\n\nTESTS = [\n    Test(\n        input=read_input_with_separator(\"example.in\"),\n        expected=6.0\n    ),\n    Test(\n        input=read_input_with_separator(\"example2.in\"),\n        expected=6.0\n    ),\n    Test(\n        input=read_input_with_separator(\"test.in\"),\n        expected=12.0\n    ),\n]\n\n\n@pytest.mark.parametrize(\"test\", TESTS)\n"
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6\") == \"3.000000000\"\n\"\"\""
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6\") == '3.0'\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.stdin = open('../in/input_11734.txt')\n"
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n3 3\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6\\n') == '3.0000000'\n\n'''\n\nfrom typing import Dict, Set, Tuple, List, Optional, Union\nfrom collections import defaultdict\nimport math\nimport sys\nimport copy\n\n\nCoordinate = Tuple[int, int]\nBounds = Tuple[int, int, int, int]\n"
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6') == '3.000000000'\n\"\"\""
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6\") == '3.000000000'\n\"\"\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4') == '1'\n\"\"\"\n\n\nimport time"
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 3\n0 1 0 0\n1 2\n2 3\n2 4''') == '1'\n\"\"\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n0 1\\n1 0\") == 2\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4') == 1\n\"\"\""
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4\") == 1\n\"\"\"\n\nclass Solution:\n    def get_friends(self, friends: str) -> list:\n        return [int(friend) for friend in friends.split()]\n    \n    def friends_in_same_party(self, curr_party: int, friendship: list) -> bool:\n        curr_friends = self.get_friends(friendship[curr_party])\n        \n        for friend in curr_friends:\n            if friend - curr_party == 1:\n                return True\n        \n        return False\n    \n    def get_num_of_months(self, num_of_states: int, friendship: list) -> int:\n        curr_party = 1\n        curr_months = 0\n        \n        while curr_party < num_of_states:\n            if not self.friends_in_same_party(curr_party, friendship):\n                curr_months += 1\n                curr_party = curr_party + 1\n            else:\n                curr_party = curr_party + 1\n        \n        return curr_months\n    \n"
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4\") == \"1\"\n\"\"\"\n\nimport sys\nimport numpy as np\n\ninput = sys.stdin.read()\nlines = input.split('\\n')\n\nn, m = lines[0].split(' ')\nn, m = int(n), int(m)\n\nparties = list(map(int, lines[1].split(' ')))\n\nrelations = np.zeros((n, n), dtype=np.int8)\n\nfor i in range(m):\n    line = lines[i+2].split(' ')\n    line = list(map(int, line))\n    relations[line[0]-1, line[1]-1] = 1\n    relations[line[1]-1, line[0]-1] = 1\n\nno_of_months = 0\nwhile not np.array_equal(np.count_nonzero(relations, axis=1), n):\n    for i in range(n):\n        if np.count_nonzero(relations[:, i] == 1) == 1:\n            for j in range(n):\n                relations[i, j] = np.bitwise_and(relations[i, j], relations[:, i])\n    no_of_months += 1\n\nprint(no_of_months)"
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4\") == \"1\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4\") == 1\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import Counter, defaultdict, deque\nfrom typing import DefaultDict, Deque, List, Set, Tuple\n\nfrom functools import lru_cache\n\nMAX_INT = 10 ** 6\n\nCoordinate = Tuple[int, int]\nPoint = Tuple[Coordinate, Coordinate]\n"
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 0 0\\n1 2\\n2 3\\n2 4\") == \"1\"\n\"\"\"\n\nimport sys\n\nn, m = [int(x) for x in sys.stdin.readline().strip().split()]\n\naffiliation = [int(x) for x in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2\\n') == '6.283185'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2\\n\") == \"6.283185\"\nassert solution(\"3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2\\n\") == \"6.283185\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2\") == 6.283185\n\"\"\"\nimport sys\nimport math\n\nn, m = map(int, sys.stdin.readline().split())\nmatrix = [list(map(int, sys.stdin.readline().split())) for _ in range(m)]\n"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2\") == \"6.283185\"\n\"\"\"\n\nfrom typing import NamedTuple, List, Tuple, Set\n\n\nclass Point(NamedTuple):\n    x: int\n    y: int\n"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2') == '6.283185'\n"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'\n\n-----Solution-----\n\n'''\n\nimport sys\nimport math"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2''') == '6.283185'\n'''\n'''\n"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2\\n') == '6.283185'\n"
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2\\n') == '6.283185'\n\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n') == '1 2 3'\nassert solution('3\\n') == '1 2 3 4 5 6 7'\nassert solution('4\\n') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nstdin = sys.stdin.readlines()\n\nn = int(stdin[0].strip())\n\nq = deque(range(1, 2 ** n))\n\nresult = []\n\nwhile q:\n    result.append(str(q.popleft()))\n    if len(q) > 0:\n        result.append(str(q.popleft()))\n\nprint(' '.join(result))\n"
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1 2 3\"\nassert solution(\"3\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\nassert solution(\"4\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\"\nassert solution(\"15\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199\""
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '1 2 3'\nassert solution('4') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100'\nassert solution('8') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200'\nassert solution('15') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199'\n"
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '1 2 3'\nassert solution('3') == '1 2 4 7'\nassert solution('4') == '1 3 5 8 10'\nassert solution('5') == '1 3 6 9 12 15'\nassert solution('6') == '1 4 8 12 16 20 25'\n"
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n') == '1 2\\n3\\n'\nassert solution('3\\n') == '1 2 3\\n6 5 4\\n7\\n'\nassert solution('4\\n') == '1 2 3 4\\n5 6 7 8\\n9 10 11 12\\n13 14 15\\n'\nassert solution('5\\n') == '1 2 3 4 5\\n6 7 8 9 10\\n11 12 13 14 15\\n16 17 18 19 20 21\\n22 23 24 25 26\\n27 28 29 30 31 32\\n33 34 35 36 37 38 39 40\\n41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\\n56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\n'\nassert solution('15\\n') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\\n16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101\\n103 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399\\n'"
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '1 2 3'\nassert solution('3') == '1 2 3 4 5 6 7 8'\nassert solution('4') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'\n\nassert solution('6') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255'\n\nassert solution('8') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255'\n\n'''"
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '1 2 3'\n\"\"\""
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1 2 3\"\nassert solution(\"4\") == \"1 2 4 5 6 7 8 9 10 11 12 13 14 15\"\nassert solution(\"6\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\"\nassert solution(\"8\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299\"\n\n\"\"\""
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1 2 3\"\nassert solution(\"3\") == \"1 2 4 5 3 6 7 8 9 10 11 12 13 14 15\"\n\n------Hint----\nA complete binary tree has $2^N - 1$ nodes, where $N$ is the number of levels.\n\nThe first number of a level is 1, the number of nodes in a level is 2^level - 1, where $1 \\le 2^level - 1 \\le 2^{N} - 1$.\n\nThe number of nodes in a level $L$ is $2^{L - 1} - 1$.\n\nA tree with $N$ levels has $2^{N} - 1$ nodes, where $1 \\le 2^{N} - 1 \\le 2^N - 1$.\n\nThe number of nodes in a level $L$ is $2^L - 1$.\n\nEach node has $2^L - 1$ nodes, where $1 \\le 2^L - 1 \\le 2^{L + 1} - 1$.\n\nThe sum of the left subtree of a node at level $L$ is $2^{L - 1}$ and the sum of the right subtree of a node at level $L$ is $2^{L - 1}$.\n\nThe absolute value of the difference of the sum of the left subtree of a node at level $L$ and the sum of the right subtree of a node at level $L$ is $2^L$.\n\nThe number of nodes in a level $L$ is $2^L - 1$.\n\nA node's sum is its number plus the sums of its left and right subtrees.\n\nNote: If the input is valid, each number should appear only once in the answer.\n\n\"\"\""
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3') == '1 2 3'\nassert solution('5\\n5 5 1 2 3') == '5 2 1 3 5'\nassert solution('3\\n3 3 1 2') == '3 2 1 3'\nassert solution('3\\n3 2 1') == '3 1 2 3'\nassert solution('3\\n1 2 3') == '1 2 3'\n"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\") == \"1\\n1 2 3 4\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n2 4\\n3 4') == '1\\n1 2 3 4'\nassert solution('4 4\\n1 2\\n1 3\\n2 4\\n3 5') == '2\\n1 3 4 5'\nassert solution('3 3\\n1 2\\n2 3') == '0\\n1 2 3'\nassert solution('3 3\\n1 2\\n2 3\\n1 2') == '2\\n1 2 3'\nassert solution('1 1\\n1 1') == '0\\n1'\n"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 2\\n1 3\\n2 4\\n3 4\\n1 4\\n2 3\\n2 4\\n3 4\\n4 5\\n3 5\\n2 5\\n4 5\\n5 1\\n4 1\\n5 2\\n3 2\\n5 3\\n4 3\\n5 4') == '1\\n1 2 3 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n4') == '1 2 3 4'\nassert solution('2 2\\n1 1\\n1 2') == '1 1 2'\nassert solution('3 3\\n1 2\\n2 3\\n3 1') == '1 2 3'\n"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n2 4\\n3 4') == '1\\n1 2 3 4'"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n2 4\\n3 4') == '1\\n1 2 3 4'\nassert solution('4 3\\n1 2\\n1 3\\n2 3') == '2\\n1 2 3'\n"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n') == '1\\n1 2 3 4'"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\") == \"1\\n1 2 3 4\"\n\"\"\""
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\") == '1\\n1 2 3 4'\n\"\"\"\n\nimport sys\n\n_, cities = map(int, sys.stdin.readline().strip().split())\npaths = [list(map(int, sys.stdin.readline().strip().split())) for _ in range(cities)]\n"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\") == \"1\\n1 2 3 4\"\n\nassert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\") == \"1\\n1 2 3 4\"\n\nassert solution(\"4 4\\n1 3\\n2 3\\n3 4\\n4 1\") == \"3\\n1 3 2 4\"\n\nassert solution(\"4 4\\n1 3\\n2 3\\n3 4\\n4 1\") == \"3\\n1 3 2 4\"\n\nassert solution(\"4 4\\n1 3\\n2 3\\n3 4\\n4 1\") == \"3\\n1 3 2 4\""
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"2 1\n1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"5 1\n2 3\n2 5\n3 1\n5 2\"\"\") == \"4\"\n\n\"\"\"\"\"\"\nimport sys\n\nfrom util.file_reader import read_lines\n"
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n2 1\n1 2\n''') == '1'\n\nassert solution('''\n4 5\n1 3\n2 3\n1 2\n2 3\n1 4\n''') == '3'\n\nassert solution('''\n3 4\n1 2\n2 3\n3 4\n''') == '4'\n\nassert solution('''\n3 3\n1 2\n2 3\n3 4\n''') == '1'\n\nassert solution('''\n2 2\n1 2\n2 1\n''') == '2'"
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1\\n2 3\\n3 1') == 1\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n\") == \"1\"\nassert solution(\"1 1\\n\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n1 2\") == \"1\"\nassert solution(\"2 2\\n1 2\\n2 1\") == \"2\"\nassert solution(\"2 3\\n1 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"2 4\\n1 2\\n2 3\\n2 4\\n1 4\") == \"4\"\nassert solution(\"2 4\\n1 2\\n2 3\\n2 4\\n1 4\\n1 3\\n2 3\\n1 3\") == \"3\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n1 2\") == \"1\"\n\"\"\"\n\nfrom collections import defaultdict\n\nfrom _2020.lib.helpers import file_and_line_parser\nfrom _2020.lib.helpers import timer\n\n\"\"\"\nA maximum independent set is a subset of V, which contains no vertices that are not in an independent set. \nFor example, given the input {1, 2, 3} {3, 1, 2} {1, 2} {2, 3} {3, 1} {1} for a graph G = (V, E), \nthe maximum independent sets are {1} and {2, 3} for G. \n\nYou are given a graph G = (V, E) in standard form. \nIn the graph G, there are n nodes and m edges. \nThe i-th edge connects vertices a_i and b_i with a_i!= b_i. \n\nReturn the size of a maximum independent set in G. \nThe size of an independent set is the number of nodes it contains.\n\"\"\"\n\n\nclass Graph:\n    def __init__(self, nodes, edges):\n        self.nodes = nodes\n        self.edges = edges\n        self.neighbors = defaultdict(list)\n        for v1, v2 in edges:\n            self.neighbors[v1].append(v2)\n            self.neighbors[v2].append(v1)\n"
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n1 2\") == 1\n\"\"\""
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n1 2') == '1'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n"
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n') == '1'\nassert solution('2 1\\n1 2\\n') == '1'\nassert solution('2 1\\n1 2\\n1 2\\n') == '2'\nassert solution('4 4\\n1 2\\n2 3\\n3 4\\n1 4\\n2 4\\n1 3\\n') == '3'\n\"\"\""
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n2 1') == 3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '45'\nassert solution('3') == '101'\nassert solution('10') == '77777'"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"45\"\nprint(solution(\"2\"))\n\n-----\nWrite the code for the Euler's totient function here.\n\"\"\""
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"45\"\n\"\"\"\n\nn = int(input())\n\nprint(5 * n - 1)\n"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '45'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '45'\n\"\"\""
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"45\"\nassert solution(\"3\") == \"135\"\nassert solution(\"10\") == \"1620\"\n\n\"\"\"\n\nfrom math import log\nimport os\nimport sys\nfrom typing import Union\n\n\nclass Solution:\n    def __init__(self, input_str: str, input_integer: Union[int, str]):\n        self._stdin = input_str\n        self._input = input_integer\n\n    def solution(self) -> int:\n        assert isinstance(self._input, int)\n        return int(self._input * (len(self._stdin) + 1 - log(self._input, len(self._stdin))) - self._input ** len(self._stdin))\n"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(...)\nprint(solution(str(input())))\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\nMr. Lucky has a store that sells numbers. These numbers have an interesting property: each number formed by its first $k$ digits is evenly divisible by $k$, for $k$ from $1$ to $n$, where $n$ is the number of digits in the number. The numbers do not have leading zeroes.\n\nMr. Unlucky wants to open a competing store. Price for lucky numbers is driven by demand and supply, and given by the formula\\[ \\mbox{price} = \\frac{\\mbox{demand}}{\\mbox{supply}} \\]\n\nwhile demand for numbers with $n$ digits is given by the formula\\[ \\mbox{demand} = \\mbox{citySize} \\cdot \\mbox{dayOfMonth} - n^e \\]\n\nwhere $e$ is the base of the natural logarithm. Supply for lucky numbers with $n$ digits is simply the number of lucky numbers with $n$ digits. Help Mr. Unlucky calculate the supply for $n$ digit lucky numbers.\n\n-----Input-----\nThe input is a single integer $n$.\n\n-----Output-----\nOutput the supply for $n$ digit lucky numbers.\n\n-----Limits-----\n - $2 \\leq n \\leq 1000$\n\n-----Examples-----\nSample Input:\n2\nSample Output:\n45\n"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 45\nassert solution(\"3\") == 435\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '45'\nassert solution('3') == '117'\n\"\"\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('100') == '75'\nassert solution('10000000') == '0'\nassert solution('2') == '9'\n"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 20 20\\n7 11 9 12 2\") == \"4\"\n\n\"\"\"\n\nimport sys\nimport math\nimport numpy as np"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 20 20\\n7 11 9 12 2\") == 4\n\"\"\""
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 20 20\\n7 11 9 12 2') == '4'\n\n-----Solution-----\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 7\\n3 4 4 2') == 3\n"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 20 20\\n7 11 9 12 2') == '4'\n\"\"\""
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5 20 20\\n7 11 9 12 2') == '4'\nassert solution('1 1\\n1') == '1'\nassert solution('2 3 5\\n6 9 9') == '3'\n'''\n\nimport math\nfrom decimal import *\nfrom collections import defaultdict\n"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 20 20\\n7 11 9 12 2\") == \"4\"\nprint(solution(\"5 20 20\\n7 11 9 12 2\"))\n\n----------Solution----------\nThe basic idea of this problem is that we have a ball in the first and second counters, and we have to find the number of customers who will be served in each of the two counters. So we can optimize the space complexity to O(1) and the time complexity to O(n) by using the observation that once we know the number of customers served in the first counter, we can calculate the number of customers served in the second counter.\n\nEach customer has a duration time t_j, we want to find the total number of customers in the first and second counters. We can assume that the two counters are closed for the same time t.\n\nSo our problem becomes:\n\nNumber of customers served in the first counter: i\nNumber of customers served in the second counter: j\nGiven i, we know that the total number of customers served in both counters should be i + j\n\ni + j = n\ni + j - n = 0\ni = n - j\n\nWe can solve the above equation by using binary search to find the minimum i and j.\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        def binary_search(n: int, s1: int, s2: int) -> int:\n            if s1 * s2 >= n:\n                return n\n\n            if n < s1:\n                return 0\n            else:\n                i = n // 2\n                j = n - i\n                while True:\n                    if i + j == n:\n                        return i\n                    if i + j > n:\n                        i -= 1\n                    else:\n                        j += 1\n                        if i + j == n:\n                            return i\n\n        n, s1, s2 = [int(c) for c in stdin.split()]\n        return str(binary_search(n, s1, s2))\n\nassert solution(\"5 20 20\\n7 11 9 12 2\") == \"4\"\nprint(solution(\"5 20 20\\n7 11 9 12 2\"))\n\n----------Solution----------\nWe can also solve this problem using recursion and top-down memoization.\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        n, s1, s2 = [int(c) for c in stdin.split()]\n        @lru_cache(None)\n        def f(i, j):\n            if i + j >= n:\n                return n\n            if i == n - j:\n                return i\n            return min(i + f(i, j + 1), j + f(i + 1, j))\n\n        return str(f(0, 0))\n\nassert solution(\"5 20 20\\n7 11 9 12 2\") == \"4\"\nprint(solution(\"5 20 20\\n7 11 9 12 2\"))\n\n-----------Solution-----------\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        n, s1, s2 = [int(c) for c in stdin.split()]\n        \n        @lru_cache(None)\n        def f(i, j):\n            if i + j >= n:\n                return n\n            if i == n - j:\n                return i\n            return min(i + f(i, j + 1), j + f(i + 1, j))\n        \n        return str(f(0, 0))\n\nassert solution(\"5 20 20\\n7 11 9 12 2\") == \"4\"\nprint(solution(\"5 20 20\\n7 11 9 12 2\"))"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 20 20\\n7 11 9 12 2\") == \"4\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 20 20\\n7 11 9 12 2\") == \"4\"\nassert solution(\"1 1 1\\n2 2 2\") == \"1\"\nassert solution(\"100 100 100\\n1 1 1\") == \"1\"\nassert solution(\"100 100 100\\n1 1 2\") == \"2\"\nassert solution(\"1 1 1\\n1 1 1\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 20 20\\\\n7 11 9 12 2\") == \"4\"\nprint(solution(\"5 20 20\\\\n7 11 9 12 2\"))\n"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n2 2\\nkenny 1\\ncharlie 1\\njenny 1\\nkenny 2\\ncharlie 2\\njenny 2\\n\") == 2\nassert solution(\"2 3\\nkenny 1\\ncharlie 1\\njenny 1\\nlaura 1\\n2 2\\nkenny 1\\ncharlie 1\\njenny 1\\nkenny 2\\ncharlie 2\\njenny 2\\nkenny 3\\ncharlie 3\\njenny 3\\n\") == 1\n\n'''"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == out\nprint(solution(stdin))\n\n-----Solution-----\n1. Split the input into two lists: boys and girls\n2. Find out how many books are there for each student\n3. Create a list of books that each student has read\n4. Sort the list of books alphabetically\n5. Make a list of pairs of books\n6. Sort the list of pairs on the number of books each pair has in common\n7. Sum the number of common books with each subsequent pair in the list and append that to a list\n8. Return the minimum of the list"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n\"\"\") == \"2\"\nassert solution(\"\"\"3\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n\"\"\") == \"3\"\nassert solution(\"\"\"2\nkenny 1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n\"\"\") == \"2\"\nassert solution(\"\"\"2\nkenny 1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n\"\"\") == \"2\"\n\"\"\")\n"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\") == 2\n"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\") == \"2\"\nassert solution(\"2 2\\nkenny 1\\ncharlie 1 lordoftherings\\njenny 1 lordoftherings\\nlaura 1\\n\") == \"2\"\nassert solution(\"2 2\\nkenny 1\\ncharlie 1 lordoftherings\\njenny 1 lordoftherings\\nlaura 1\\n\") == \"1\"\nassert solution(\"2 2\\nkenny 1\\ncharlie 1\\njenny 1 lordoftherings\\nlaura 1 lordoftherings\\n\") == \"1\"\nassert solution(\"2 2\\nkenny 1\\ncharlie 1\\njenny 1\\nlaura 1 lordoftherings\\n\") == \"1\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\") == 2\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043d\u0430 \u0432\u0445\u043e\u0434 \u043d\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043e\u043c\u0435\u0449\u0430\u044e\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u0430, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0435\u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\nsolution(1, 2, 3, 4, 5)\n6\nsolution()\n0\n\"\"\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\") == '2'\n\nSample Input:\n3 5\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\n0\nstudents 1 2 3 4\n0\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent2 abcd\nstudent3 abcd\nstudents 1 2 3 4\nstudent1 abcd\nstudent"
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('01') == '1 1'\nassert solution('11010') == '1 3'\nassert solution('1101010') == '2 4'\nassert solution('110101010') == '3 7'\nassert solution('11010101010') == '4 10'\n"
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"01\") == \"2 1\"\n\nSample Input:\n5\n1101101010\nSample Output:\n3 2\n\nSample Input:\n7\n1101101010\nSample Output:\n1 4\n\nSample Input:\n8\n111011110111101\nSample Output:\n1 5\n\nSample Input:\n1\n1\nSample Output:\n1 1\n\nSample Input:\n2\n01\nSample Output:\n0 0\n\nSample Input:\n1\n00\nSample Output:\n0 0\n\nSample Input:\n3\n10001101010\nSample Output:\n1 4\n\nSample Input:\n2\n10101101010\nSample Output:\n0 0\n\nSample Input:\n3\n101101101010\nSample Output:\n1 4\n\nSample Input:\n4\n100101101010\nSample Output:\n1 5\n\nSample Input:\n5\n111111111111\nSample Output:\n0 0\n\nSample Input:\n6\n111001110101010\nSample Output:\n1 6\n\nSample Input:\n7\n111001110101010\nSample Output:\n1 6\n\nSample Input:\n8\n11111110011101010\nSample Output:\n2 7\n\nSample Input:\n9\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n10\n111111111110011101010\nSample Output:\n1 7\n\nSample Input:\n11\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n12\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n13\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n14\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n15\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n16\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n17\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n18\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n19\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n20\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n21\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n22\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n23\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n24\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n25\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n26\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n27\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n28\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n29\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n30\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n31\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n32\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n33\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n34\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n35\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n36\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n37\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n38\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n39\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n40\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n41\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n42\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n43\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n44\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n45\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n46\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n47\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n48\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n49\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n50\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n51\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n52\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n53\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n54\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n55\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n56\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n57\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n58\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n59\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n60\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n61\n111111111110011101010\nSample Output:\n0 0\n\nSample Input:\n62\n111111111110011101010"
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"01\") == \"2 1\"\nassert solution(\"1101010\") == \"2 4\"\nassert solution(\"1101010 1101010\") == \"2 4\"\nassert solution(\"1101010 1101010 1101010 1101010\") == \"2 4\"\n\nassert solution
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('01') == '2 1'\nassert solution('101') == '1 3'\nassert solution('110') == '2 2'\nassert solution('1101010') == '1 10'\nassert solution('1101010101010') == '1 21'\n"
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0 1'\nassert solution('0') == '0 1'\nassert solution('1') == '1 1'\nassert solution('10') == '0 1'\nassert solution('11') == '1 1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100101010\") == '2 1'\nassert solution(\"1001010101010\") == '2 1'\nassert solution(\"100101010101010\") == '2 1'\nassert solution(\"1011111\") == '3 1'\nassert solution(\"1001010101010\") == '2 1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"010\") == \"1 2\"\nassert solution(\"101010\") == \"3 5\"\nassert solution(\"1110111010\") == \"3 9\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"01\") == \"2 1\"\nassert solution(\"11\") == \"2 2\"\nassert solution(\"0111\") == \"2 2\"\nassert solution(\"111\") == \"1 3\"\nassert solution(\"1111\") == \"1 4\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n11101110\") == \"2 6\"\nassert solution(\"10000\\n10111110\") == \"1 1\"\nassert solution(\"100\\n11101110\") == \"1 1\"\n\nprint(\"Well done!\")\n\n\"\"\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n4 1\\n2123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\\n') == '4 3\\n2233\\n1111\\n2233\\n'"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1\\n2123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\\n') == '4 3\\n2123\\n1012\\n2123\\n'\nassert solution('5 1\\n1123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\\n') == '5 3\\n1113\\n1012\\n1113\\n'\n\"\"\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1') == '4 3'\nassert solution('3\\n2123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\\n') == '4 3\\n2233\\n1012'\n\n\"\"\""
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_data) == expected_result\nprint(solution(data))\n"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\n\"\"\") == \"\"\"\n4 3\n2123\n1012\n2123\n\"\"\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n6\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\n\"\"\"\n) == \"\"\"\n4 3\n2233\n2233\n1111\n\"\"\"\n\nassert solution(\n\"\"\"\n4\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\n\"\"\"\n) == \"\"\"\n4 3\n2233\n1012\n2233\n\"\"\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4 1\\n2123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\") == \"4 3\\n2233\\n1111\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4 1\\n2123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\\n\") == '4 3\\n2123\\n1012\\n2123\\n2233\\n1111'\n\"\"\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\n\"\"\") == \"4 3\\n2233\\n1111\"\n\nassert solution(\"\"\"\n3\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\n\"\"\") == \"4 3\\n2123\\n1012\"\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4 1\\n2123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\\n\") == \"4 3\\n2123\\n1012\\n2123\\n\"\nassert solution(\"5\\n1 3\\n34 1\\n12 2\\n3 2\\n2 2\\n31 2\\n32 2\\n3 3\\n4 3\\n2 3\\n\") == \"5 5\\n13412\\n1221\\n1342\\n3212\\n\"\nassert solution(\"5\\n1 2\\n3 2\\n2 2\\n31 2\\n32 2\\n3 3\\n4 3\\n2 3\\n\") == \"5 5\\n1234\\n1324\\n1234\\n\"\nassert solution(\"5\\n3 2\\n1 2\\n2 2\\n31 2\\n32 2\\n3 3\\n4 3\\n2 3\\n\") == \"5 5\\n1234\\n1324\\n1234\\n\"\nassert solution(\"7\\n1 2\\n3 2\\n2 2\\n31 2\\n32 2\\n3 3\\n4 3\\n2 3\\n\") == \"7 7\\n1234\\n1234\\n1324\\n1324\\n1234\\n1234\\n\"\n"
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'cannot be ordered'\nassert solution('\\n'.join([\n    '2',\n    'libattr libtiff',\n    'libtiff zlib',\n    'libattr libtiff zlib',\n    'zlib libattr libtiff',\n    'libtiff libattr libtiff',\n    'zlib libattr libtiff',\n    'libtiff libattr zlib',\n    'libtiff zlib libattr',\n    'libattr zlib libtiff',\n    'zlib libattr libtiff',\n    'zlib libattr libtiff',\n])) == '\\n'.join([\n    'libattr',\n    'libtiff',\n    'zlib',\n    'libattr libtiff',\n    'libtiff zlib',\n    'zlib libattr libtiff',\n    'libtiff libattr zlib',\n    'libtiff zlib libattr',\n    'libtiff libattr libtiff',\n    'zlib libattr libtiff',\n    'libattr zlib libtiff',\n    'zlib libattr libtiff',\n    'libtiff zlib libattr',\n    'libtiff libattr zlib',\n    'libattr libtiff zlib',\n    'zlib libattr libtiff',\n    'libtiff zlib libattr',\n    'zlib libattr libtiff',\n])\n"
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"14\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nfreetype\\n3\\nemacs xorg-x11 lisp\\nxorg-x11\\nlisp emacs\\n0\") == \"atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\nzlib\\nlibtiff\\npcre\\ngrep\\nvim-common\\nxorg-x11-libs\\nemacs\\nxorg-x11\\nvim-X11\\n\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List\n\n\nclass Solution:\n    \"\"\"\n    \u7528stack\uff0c\u5404\u4e2a\u70b9\u53ea\u5b58\u4e0a\u4e00\u4e2a\u62d3\u6251\uff0c\u7136\u540e\u67e5\u770b\u62d3\u6251\u662f\u5426\u5168\u90e8\u8bbf\u95ee\uff0c\u5982\u679c\u4e0d\u5168\u90e8\u8bbf\u95ee\uff0c\u5c31\u628a\u6bd4\u81ea\u5df1\u5c0f\u7684\u5165\u6808\n    \"\"\"\n    def solve(self, n: int, packages: List[str]) -> str:\n        packages = [x.split(' ') for x in packages]\n        package_dic = defaultdict(list)\n        for package in packages:\n            for dep in package[1:]:\n                package_dic[dep].append(package[0])\n        result = []\n        stack = []\n        visited = set()\n        for p in packages[0][1:]:\n            if p in visited:\n                return 'cannot be ordered'\n            else:\n                stack.append(p)\n                visited.add(p)\n        while stack:\n            if not all(i in visited for i in package_dic[stack[-1]]):\n                return 'cannot be ordered'\n            else:\n                result.append(stack.pop())\n        return''.join(result)\n"
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('14\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nfreetype\\n3\\nemacs xorg-x11 lisp\\nxorg-x11\\nlisp emacs\\n0') == 'atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\nzlib\\nlibtiff\\ngtk2\\nvim-common\\ngrep\\nxorg-x11-libs\\npango\\nvim-X11\\nlisp\\n'"
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''14\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0''') == \"atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\ngrep\\nvim-common\\nxorg-x11-libs\\npango\\nzlib\\nlibtiff\\ngtk2\\nvim-X11\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"14\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nfreetype\\n3\\nemacs xorg-x11 lisp\\nxorg-x11\\nlisp emacs\\n0\") == \"\"\"atk\nfreetype\nglib2\nlibattr\nlibjpeg\npcre\ngrep\nvim-common\nxorg-x11-libs\npango\nzlib\nlibtiff\ngtk2\nvim-X11\n\ncannot be ordered\"\"\"\n\n\"\"\"\nInput:\n14\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n\nOutput:\natk\nfreetype\nglib2\nlibattr\nlibjpeg\npcre\ngrep\nvim-common\nxorg-x11-libs\npango\nzlib\nlibtiff\ngtk2\nvim-X11\n\ncannot be ordered\n\"\"\"\n\n\"\"\"\nInput:\n14\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n\nOutput:\natk\nfreetype\nglib2\nlibattr\nlibjpeg\npcre\ngrep\nvim-common\nxorg-x11-libs\npango\nzlib\nlibtiff\ngtk2\nvim-X11\n\ncannot be ordered\n\"\"\""
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"14\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nfreetype\\n3\\nemacs xorg-x11 lisp\\nxorg-x11\\nlisp emacs\\n0\") == \"\"\"atk\nfreetype\nglib2\nlibattr\nlibjpeg\npcre\ngrep\nvim-common\nxorg-x11-libs\npango\nzlib\nlibtiff\ngtk2\nvim-X11\"\"\".replace('\\n', '\\n\\t')\n\n\"\"\"\nIn this solution, we maintain a set of uninstalled packages and a set of installed packages. For each package, we add it to the uninstalled set if it is not installed yet and we remove it from the uninstalled set if it is installed.\n\"\"\""
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"14\\nlibattr\\nvim-X11\\nvim-common gtk2\\nvim-common\\ngtk2\\nlibtiff\\nzlib\\nlibjpeg\\natk\\nxorg-x11-libs\\npango\\nzlib\\nlibjpeg\\nxorg-x11-libs\\ngrep\\npcre\\nfreetype\\n3\\nemacs\\nxorg-x11\\nlisp\\nxorg-x11-libs\\ngrep\\npcre\\nfreetype\\nfreetype\\n0\") == \"atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\ngrep\\nvim-common\\nxorg-x11-libs\\nzlib\\nvim-X11\\n\"\n\n---\n\nHere is the solution\n\n\"\"\"\n"
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('14\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nfreetype\\n3\\nemacs xorg-x11 lisp\\nxorg-x11\\nlisp emacs\\n0') == 'atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\ngrep\\nvim-common\\nxorg-x11-libs\\npango\\nzlib\\nlibtiff\\ngtk2\\nvim-X11\\n'\n\n-----Solution-----\n\nn = int(input())\n\np_dict = {}\nfor i in range(n):\n  p = input().split()\n  p_dict[p[0]] = set(p[1:])\n\nq = int(input())\ndep_list = []\nfor i in range(q):\n  dep_list.append(input().split())\n\ndp_dict = {}\nfor p in p_dict:\n  dp_dict[p] = set()\n  for dep in p_dict[p]:\n    dp_dict[p].update(dp_dict[dep])\n  dp_dict[p].add(p)\n\ndp_list = []\nfor dep_p in dep_list:\n  dp_list.append(dp_dict[dep_p[1]])\n\ndp_list = list(filter(lambda x: x, dp_list))\ndp_list = list(set.intersection(*dp_list))\n\ndp_list.sort()\n\nfor p in dp_list:\n  print(p)\n"
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"14\\n\"\n    \"libattr\\n\"\n    \"vim-X11 vim-common gtk2 libattr\\n\"\n    \"vim-common\\n\"\n    \"gtk2 libtiff atk pango glib2\\n\"\n    \"libtiff zlib libjpeg\\n\"\n    \"atk\\n\"\n    \"pango xorg-x11-libs freetype glib2\\n\"\n    \"glib2\\n\"\n    \"zlib\\n\"\n    \"libjpeg\\n\"\n    \"xorg-x11-libs grep freetype\\n\"\n    \"grep pcre\\n\"\n    \"pcre\\n\"\n    \"freetype\\n\"\n    \"3\\n\"\n    \"emacs xorg-x11 lisp\\n\"\n    \"xorg-x11\\n\"\n    \"lisp emacs\\n\"\n    \"0\"\n) == \"atk\\n\" + \"freetype\\n\" + \"glib2\\n\" + \"libattr\\n\" + \"libjpeg\\n\" + \"pcre\\n\" + \"grep\\n\" + \"vim-common\\n\" + \"xorg-x11-libs\\n\" + \"pango\\n\" + \"zlib\\n\" + \"libtiff\\n\" + \"gtk2\\n\" + \"emacs\\n\" + \"xorg-x11\\n\" + \"lisp\\n\"\n\n\n-----Problem-----\nHarry Potter is a kid who is a wizard who lives in a walled garden. He is a very smart boy who loves playing with magic. He always have a wand in hand and he will do anything for his friends. Harry Potter has one friend Ron, who is a simple boy who always fight his friends with his wand. It is said that his magical wand can do anything. Harry Potter likes Ron very much. But he also likes his friends, Ron hates Harry. Now Harry Potter has to tell Ron that Harry doesn't like him very much. But Ron is a very stubborn and careless boy. Therefore Harry will take help of him. Harry will have to tell Ron that Harry doesn't like Ron very much. But Harry has to know that Harry doesn't like Ron very much. But Harry is a very smart boy who always knows what to do. So he will help Ron to understand that Harry doesn't like Ron very much.\n\nHarry Potter wants to know that his friends Harry Potter always know that Harry Potter doesn't like Ron very much. Harry Potter will take help of Ron, and will help him to tell him that Harry Potter doesn't like Harry Potter very much.\n\nHarry Potter knows the following:\n\nHarry Potter knows that Ron is Harry Potter's friend, Harry Potter likes Ron and Harry Potter doesn't like Ron very much.\nHarry Potter knows that Ron hates Harry Potter, Harry Potter doesn't like Harry Potter very much.\nHarry Potter doesn't know that Harry Potter likes Harry Potter very much and Harry Potter doesn't like Harry Potter very much.\nHarry Potter doesn't know that Harry Potter likes Harry Potter very much and Harry Potter likes Harry Potter very much.\nHarry Potter knows that Harry Potter hates Harry Potter very much and Harry Potter likes Harry Potter very much.\n\nHarry Potter knows that Harry Potter likes Harry Potter very much, Harry Potter likes Harry Potter very much and Harry Potter likes Harry Potter very much.\n\nHarry Potter knows that Harry Potter hates Harry Potter very much and Harry Potter likes Harry Potter very much and Harry Potter likes Harry Potter very much.\n\nHelp Harry Potter to understand the reason why Harry Potter doesn't like Harry Potter very much.\n\n-----Problem Source-----\nhttps://codeforces.com/problemset/problem/1074/B\n\n------Solution------\n"
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''libattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3''') == 'atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\ngrep\\nvim-common\\nxorg-x11-libs\\npango\\nzlib\\nlibtiff\\ngtk2\\nvim-X11'\n\n'''\n"
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"32 20\") == \"16\"\nassert solution(\"32 1\") == \"2\"\n\nfrom collections import deque\nimport random\nimport math"
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"32 20\") == \"16\"\n\"\"\""
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''32 20''') == '16'\n\n'''\n\nfrom typing import List\nfrom math import log10"
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('32 20') == '16'\nassert solution('100 200') == '10'\nassert solution('100 101') == '11'\nassert solution('100 200 103 101') == '14'\nassert solution('100 101 103') == '11'\n"
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('32 20') == '16'\n\n\"\"\""
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"32 20\") == \"16\"\n\nimport re\n\ny, l = input().split()\ny = int(y)\nl = int(l)\n\nres = re.compile('[^0-9]')\n\nfor i in range(2, 37):\n    if res.search(str(y)) == None:\n        if y < 10 ** l:\n            print(i)\n            break\n        else:\n            continue\n    else:\n        break"
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('32 20') == '16'\nassert solution('20 10') == '10'\nassert solution('0 20') == '10'\n\"\"\"\n\n\"\"\"\nhint 1\n\nmy age is y\n\nthen y = a * 10^b, where a, b > 0\n\nand if b >= 10, then I can use a base 10 number a to interpret a number in base b\n\nhow many digits can y have in base b?\n\n2^b-1"
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(32, 20) == 16\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('32 20') == '16'\n\n-----Solution-----\n"
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"32 20\") == \"16\"\nprint(solution(\"32 20\"))\n\"\"\"\n\nimport sys\n\ny, l = sys.stdin.readline().strip().split(' ')\ny = int(y)\nl = int(l)\nans = 0\n\nfor base in range(2, 11):\n    while y > 1:\n        a = y % base\n        if a > 9:\n            break\n        y = y // base\n        ans = base * ans + a\n\nprint(ans)\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n..#\\n.#.\", \"5 13\") == \"3 7\\n3 5\"\n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 4\n...\n.#.#\n....''') == '5 13'\n\n-------Solution-------\n\na=[]\nb=[]\nfor i in range(int(stdin.split()[0])):\n    a.append(list(stdin.split()[1+i]))\nfor i in range(len(a)):\n    if '.' in a[i]:\n        for j in range(len(a)):\n            if a[i][j]=='.':\n                a[i][j]='1'\n            else:\n                a[i][j]='0'\nfor i in range(len(a)):\n    b.append(a[i][:])\nc=[]\nfor i in range(len(a)):\n    for j in range(len(a)):\n        if a[i][j]=='1':\n            for k in range(len(a)):\n                if a[i][k]=='1' and a[k][j]=='1':\n                    c.append([i,j])\n                    break\nfor i in range(len(b)):\n    for j in range(len(b)):\n        if [i,j] in c:\n            b[i][j]='1'\n        else:\n            b[i][j]='0'\nfor i in range(len(b)):\n    for j in range(len(b)):\n        if b[i][j]=='0':\n            b[i][j]=1\n        else:\n            b[i][j]=0\ncount=0\ncount1=0\nfor i in range(len(b)):\n    count+=sum(b[i])\ncount1=int(count/2)\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n...\\n.#.') == '5 13'\nprint(solution('3 4\\n...\\n.#.'))\n\n-----Constraints-----\n1 <= n, m <= 50\nThe chessboard is fully usable, i.e. for every broken cell there is an empty cell on the chessboard.\n'''\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"4 4\n....\n.#.#\n....\n.#.#\n\"\"\") == \"5 13\"\n\nassert solution(\"\"\"5 5\n.....\n...#.\n..##.\n....\n.#..\n\"\"\") == \"4 8\"\n\nassert solution(\"\"\"1 1\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n....\\n.#.#\\n....\") == \"5 13\"\n\"\"\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 4\n...\n.#.#\n...\n.#.#\n...\n''') == '5 13'\n\nassert solution('''5 5\n.....\n...##\n.#...\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n....\\n.#.#\\n....\") == \"5 13\"\nprint(solution(\"3 4\\n....\\n.#.#\\n....\"), \"5 13\")\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n...\") == \"5 13\"\nassert solution(\"3 4\\n....\\n.#.#\\n....\") == \"5 13\"\nassert solution(\"3 4\\n..#.\\n...\\n....\") == \"3 6\"\nassert solution(\"4 4\\n....\\n.#.#\\n....\\n....\") == \"4 4\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"4 4\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4\\n....\\n.#.#\\n....') == '5 13'\n\"\"\"\nimport collections\nimport itertools\nfrom typing import Dict, List, Tuple\n\nState = Tuple[List[int], Dict[Tuple[int, int], bool]]\n\nEMPTY = 0\nBROKEN = 1\n"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n.##\\n...\\n\") == \"5 13\"\n\"\"\""
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\\n') == '5\\n'\nprint(solution('3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\\n'))\n\n---Problem Description---\nIn the year 2120 there is a vast subway network under all of Lund, consisting of $N$ stations and $M$ tunnels. Each tunnel connects two stations and the stations are numbered $1$, $\\ldots $, $N$.\n\nErik has had enough of Sk\u00e5netrafiken\u2019s terrible route planning software and plans to build his own. To do this, he needs to know the length of each of the tunnels, but the subway map is incomplete in this regard. By looking out the window, Erik has noticed that some tunnels have special cables running alongside them, probably for providing power to the stations. The cables connect the stations so that every station is connected to the central station (the station numbered $1$). Knowing how greedy Sk\u00e5netrafiken is, he is certain that the cables are placed so that the total length of cable is minimized.\n\nErik knows the precise length of some tunnels, and which tunnels contain cables. Using this information he wants to find the minimum possible length for each tunnel with unknown length. Unfortunately, Erik\u2019s algorithm isn\u2019t efficient enough to process the enormous size of Lund\u2019s subway network. Can you help him by implementing a more efficient algorithm?\n\n-----Input-----\nThe first line of input contains two integers $N$ and $M$, where $2 \\leq N \\leq 10^5$ and $N - 1 \\leq M \\leq 2 \\cdot 10^5$, the number of stations and the number of tunnels, respectively. Each of the next $M$ lines contains the values $a_ i$, $b_ i$, $l_ i$ and $c_ i$. The integers $a_ i$ and $b_ i$, with $1 \\leq a_ i, b_ i \\leq N$ and $a_ i\\neq b_ i$, denote the two stations connected by the $i$th tunnel. The value $l_ i$ is either an integer satisfying $1 \\leq l_ i \\leq 10^9$, the length of the $i$th tunnel if it is known, or a question mark \u201c?\u201d. Finally, $c_ i$ is $1$ if the $i$th tunnel contains a cable, and $0$ if not.\n\nIt is guaranteed that there is at most one tunnel connecting the same pair of stations, and that it is possible to travel between any pair of stations using the subway. It is also guaranteed that there exists a path between any station and station number $1$ using only tunnels where $c_ i = 1$.\n\n-----Output-----\nFor each tunnel with $l_ i=\\texttt{?}$, output one line with a single integer, the minimum possible length for that tunnel. Tunnel lengths should be output in the same order as the tunnels are listed in the input.\n\n-----Sample Description-----\nIn the first sample case, the minimal distance for the unknown tunnel (between stations $3$ and $1$) is $5$. This is because, if the length were less than $5$, it would be more efficient for Sk\u00e5netrafiken to run cables through the second and third tunnels.\n\n-----Examples-----\nSample Input:\n3 3\n1 2 5 1\n2 3 3 1\n3 1? 0\nSample Output:\n5\n"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\\n') == '5'\nassert solution('4 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\\n4?? 0\\n') == '6'\n\"\"\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n\"\"\") == \"5\"\nassert solution(\"\"\"3 2\n1 2? 1\n2 1? 1\n1 2? 1\n\"\"\") == \"3\"\nassert solution(\"\"\"3 3\n1 2 5 1\n2 3 3 1\n3 1??\n\"\"\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\") == \"5\"\nprint(solution(\"3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\"))\n\n\"\"\"\nfrom typing import List, Set\n\n\"\"\"\nexample\n\n2 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n\n1\n\"\"\"\n\n\"\"\"\n[\n    (1,2,5),\n    (2,3,3),\n    (3,1,?)\n]\n\n\"\"\"\nfrom collections import defaultdict\nfrom functools import lru_cache\n"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 3\n1 2 5 1\n2 3 3 1\n3 1? 0''') == '5'\n\nassert solution('''5 5\n1 2 3 4 5\n1 2??\n1 3??\n1 4??\n1 5??\n2 3??\n2 4??\n2 5??\n3 4??\n3 5??\n4 5??\n''') == '9'\n\nassert solution('''5 5\n1 2 3 4 5\n1 2??\n1 3??\n1 4??\n1 5??\n2 3??\n2 4??\n2 5??\n3 4??\n3 5??\n4 5??\n''') == '10'\n\nassert solution('''6 5\n1 2 3 4 5 6\n1 2??\n1 3??\n1 4??\n1 5??\n1 6??\n2 3??\n2 4??\n2 5??\n2 6??\n3 4??\n3 5??\n3 6??\n4 5??\n4 6??\n5 6??\n''') == '11'\n\nassert solution('''5 5\n1 2 3 4 5\n1 2??\n1 3??\n1 4??\n1 5??\n2 3??\n2 4??\n2 5??\n3 4??\n3 5??\n4 5??\n4 5??\n''') == '12'"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == '5'\n\n-----Solution-----\n\nn, m = map(int, stdin.readline().split())\nb = [[0] * n for _ in range(n)]\nc = [[0] * n for _ in range(n)]\nfor _ in range(m):\n    a, b, c, d = map(int, stdin.readline().split())\n    b[a - 1][b - 1] = d\n    c[a - 1][b - 1] = 1\n    c[b - 1][a - 1] = 1\n\nfor k in range(n):\n    for i in range(n):\n        for j in range(n):\n            if i!= j and c[i][k] and c[k][j]:\n                c[i][j] = 1\n\nb = [[0] * n for _ in range(n)]\nfor i in range(n):\n    for j in range(n):\n        b[i][j] = b[j][i] = min(b[i][j], b[i][k] + b[k][j] for k in range(n) if c[i][k] and c[k][j])"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0') == '5'\n\n-----Problem-----\nYou have just finished testing your subway system, and the result is great! Unfortunately, the computer on the station is not compatible with the new software, so you cannot evaluate your subway system. However, you have learned that it is possible to brute-force this problem by solving the following problem:\n\nBrute-force the subway system by iterating through all possible combinations of stations, then running through every possible combination of unknown tunnels for each station pair, and keeping track of the total length of each tunnel.\n\nPlease note that you are not allowed to optimize your solution by removing unnecessary unknown tunnels.\n\n---\n\nNow that you have learned about the brute-force approach, can you think of a more efficient approach that will run in linear time?\n\nYou are given an integer $N$, the number of stations, and the following information:\n\nThe length of each tunnel is given in an array of length $N$, where each entry is an integer in the range $[1, 10^9]$ or \u201c?\u201d.\nFor each pair of stations $i$ and $j$ there exists exactly one tunnel between them, and it is possible to travel from $i$ to $j$ using only the tunnels where the length is known.\nThere exists at least one path from $1$ to $N$ using only the tunnels where the length is known.\nYou are given an array of length $N$, where each entry is an integer in the range $[1, 10^9]$ or \u201c?\u201d. The information is given in the same order as in the previous problem.\n\nThe length of the shortest path from $i$ to $j$ is stored in an array of length $N$, where each entry is an integer in the range $[1, 10^9]$ or \u201c?\u201d.\n\nIn this problem, you are to output the shortest path from $1$ to $N$. If there is no path from $1$ to $N$ return \u201cNO\u201d.\n\n----\n\nYour solution to this problem should use the brute-force approach discussed in the previous problem. You will need to keep track of the following:\n\nThe distance of the shortest path from $i$ to $j$;\nThe stations $i$ and $j$ that are part of the shortest path.\n\nWith this information you can determine which stations are part of the shortest path. If there is more than one shortest path, then you should output the shortest one. If there are no shortest paths then you should output NO.\n\n----\n\nYou will need to write a function that takes in two arrays as input and outputs a string. The first array is the array of known lengths for each tunnel. The second array is the array of distances for each station. The entry in the second array for a given station is the distance from that station to the central station (station $1$). The output should be the shortest path from station $1$ to station $N$ and should be formatted as a series of stations and then tunnels. If there is no path from $1$ to $N$ then return \"NO\".\n\nFor example, if the lengths array was [3, 2, 5, 1] and the distance array was [1, 3, 5, 7], then the shortest path from $1$ to $N$ would be $1-2-3-4-5-N$ with the number of stations being the length of the path.\n\nExplanation:\nThe following is a visual of the shortest path:\n\ndistance = [1, 3, 5, 7]\nlength = [3, 2, 5, 1]\n\nlengths array = [3, 2, 5, 1]\ndistance array = [1, 3, 5, 7]\n\nindex = 0\ndistance = [1, 3, 5, 7]\nindex = 1\ndistance = [1, 3, 5, 7]\nindex = 2\ndistance = [1, 3, 5, 7]\nindex = 3\ndistance = [1, 3, 5, 7]\n\nSince the distance array is strictly increasing, index $i$ of the shortest path from $1$ to $N$ is at index $i$ in the distance array. The station at this index (stored in the variable \"station\") is the first station of the shortest path.\n\nThere is more than one shortest path. In this example, the shortest path is $1-2-3-4-5-N$.\n\nIf the lengths array is empty then the shortest path is from $1$ to $N$.\n\nYou can also assume that the number of stations is equal to the length of the lengths array.\n\n----\n\nAuxiliary Data\n\nThe max possible length of a tunnel is 10^9.\n\nThere are at most 4 different length values in the input.\n\nThe input array of known lengths for each tunnel is guaranteed to be sorted.\n\n----\n\nSample Input:\n5\n2 1 5 1\n2 3 3 1\n2??\n3?\n4 1 5 1\n3??\n4 1 5 1\nSample Output:\n1-2-3-4-5\nExplanation:\nThe shortest path from station $1$ to station $N$ is $1-2-3-4-5$ with a length of 5.\n\n----\n\nSample Input:\n5\n2 1 5 1\n2 3 3 1\n2??\n3?\n4 1 5 1\n3??\n4 1 5 1\nSample Output:\nNO\nExplanation:\nThe shortest path from station $1$ to station $N$ is not connected.\n\n----\n\nSample Input:\n5\n1?\n2?\n3?\n4?\n5?\nSample Output:\nNO\nExplanation:\nThe shortest path from station $1$ to station $N$ is not connected"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\") == \"5\"\n\"\"\"\n\n\nfrom collections import defaultdict, deque\nfrom functools import reduce\nimport sys\nimport math\n"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2 3 2\\n3 1? 0\\n3 2 1 1') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2 5 1\\n2 3 3 1\\n3 1?\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n-1 0\\n-1 1\\n0 1\") == \"0\"\nassert solution(\"2 3\\n-1 0\\n-1 1\\n0 1\\n1 1\") == \"3\"\nassert solution(\"2 3\\n-1 0\\n-1 1\\n0 1\\n1 1\\n0 2\") == \"3\"\nassert solution(\"3 10\\n-1 0\\n0 1\\n0 2\\n0 3\\n1 2\\n1 3\\n2 3\") == \"0\"\nassert solution(\"3 10\\n-1 0\\n0 1\\n0 2\\n0 3\\n1 2\\n1 3\\n2 3\\n0 1\\n1 3\\n0 3\\n0 2\\n1 2\") == \"2\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n-1 0\\n-1 1\\n0 1\") == \"0\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 3\n-1 0\n-1 1\n0 1\n''') == '0'\nassert solution('''2 3\n-1 0\n-1 1\n0 1\n''') == '3'\n\"\"\"\n\nfrom collections import deque\nfrom math import sqrt\n\nclass Graph:\n    def __init__(self, n):\n        self.adj_mat = [[0 for _ in range(n)] for _ in range(n)]\n        self.n = n\n        self.adj_list = [set() for _ in range(n)]\n\n    def connect(self, u, v):\n        self.adj_mat[u][v] = 1\n        self.adj_mat[v][u] = 1\n        self.adj_list[u].add(v)\n        self.adj_list[v].add(u)\n\n    def disconnect(self, u, v):\n        self.adj_mat[u][v] = 0\n        self.adj_mat[v][u] = 0\n        self.adj_list[u].discard(v)\n        self.adj_list[v].discard(u)\n\n    def get_neighbors(self, u):\n        return self.adj_list[u]\n\n    def get_degree(self, u):\n        return len(self.adj_list[u])\n\nclass Solution:\n    def __init__(self):\n        self.seen = set()\n        self.graph = None\n        self.outside = None\n\n    def can_reach_outside(self, u):\n        self.seen.add(u)\n        if self.outside in self.graph.get_neighbors(u):\n            return True\n        for v in self.graph.get_neighbors(u):\n            if v not in self.seen:\n                if self.can_reach_outside(v):\n                    return True\n        return False\n\n    def get_max_degree_vertex(self):\n        # Find all vertices that have the maximum degree\n        max_degree = -1\n        vertex = None\n\n        for i in range(self.graph.n):\n            degree = self.graph.get_degree(i)\n            if degree > max_degree:\n                max_degree = degree\n                vertex = i\n\n        return vertex\n\n    def get_max_degree_connected_component(self):\n        # Find all vertices that have the maximum degree\n        max_degree = -1\n        max_connected_component = None\n\n        for i in range(self.graph.n):\n            degree = self.graph.get_degree(i)\n            if degree > max_degree:\n                max_degree = degree\n                max_connected_component = set()\n                max_connected_component.add(i)\n\n            elif degree == max_degree:\n                max_connected_component.add(i)\n\n        return max_connected_component\n\n    def get_max_degree_connected_components(self):\n        # Find all vertices that have the maximum degree\n        max_degree = -1\n        max_connected_components = []\n\n        for i in range(self.graph.n):\n            degree = self.graph.get_degree(i)\n            if degree > max_degree:\n                max_degree = degree\n                max_connected_components = []\n                max_connected_components.append(set())\n                max_connected_components[-1].add(i)\n\n            elif degree == max_degree:\n                max_connected_components.append(set())\n                max_connected_components[-1].add(i)\n\n        return max_connected_components\n\n    def get_max_degree_in_component(self, component):\n        max_degree = -1\n        max_connected_component = None\n\n        for i in component:\n            degree = self.graph.get_degree(i)\n            if degree > max_degree:\n                max_degree = degree\n                max_connected_component = set()\n                max_connected_component.add(i)\n\n            elif degree == max_degree:\n                max_connected_component.add(i)\n\n        return max_connected_component\n\n    def get_max_degree_in_components(self, components):\n        # Find all vertices that have the maximum degree\n        max_degree = -1\n        max_connected_components = []\n\n        for component in components:\n            degree = self.graph.get_degree(component)\n            if degree > max_degree:\n                max_degree = degree\n                max_connected_components = []\n                max_connected_components.append(set())\n                max_connected_components[-1].add(component)\n\n            elif degree == max_degree:\n                max_connected_components.append(set())\n                max_connected_components[-1].add(component)\n\n        return max_connected_components\n\n    def get_max_degree_path(self, start):\n        # Find all vertices that have the maximum degree\n        max_degree = -1\n        max_path = None\n        max_path_queue = deque()\n\n        max_path_queue.append((start, set()))\n\n        while len(max_path_queue) > 0:\n            current, path = max_path_queue.popleft()\n\n            for next in self.graph.get_neighbors(current):\n                if next == self.outside:\n                    if len(path) > max_degree:\n                        max_degree = len(path)\n                        max_path = path\n                else:\n                    max_path_queue.append((next, path | {next}))\n\n        return max_path\n\n    def get_max_degree_paths(self, start):\n        # Find all vertices that have the maximum degree\n        max_degree = -1\n        max_paths = []\n        max_path_queue = deque()\n\n        "
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n-1 0\\n-1 1\\n0 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n-1 0\\n-1 1\\n0 1\") == \"0\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(\"../assets/test_input_1.txt\", 'r').read()) == \"0\"\n\"\"\"\n\nimport math\nfrom collections import deque, defaultdict, Counter\n\nN, M = map(int, input().split())\nedges = [tuple(map(int, input().split())) for _ in range(M)]"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n-1 0\\n0 1\\n1 2\\n2 3\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n-1 0\\n-1 1\\n0 1\") == \"0\"\nprint(\"Exercise pass.\")\n\n\"\"\"\nimport math"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 3\n-1 0\n-1 1\n0 1\n''') == '0'\n"
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n9 6 2 4\") == \"6\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n9 6 2 4\") == 6\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n9 6 2 4\") == 6\n\"\"\"\n\nn = int(stdin.readline())\nnums = [int(i) for i in stdin.readline().split()]\n\nd = {k: 1 for k in nums}\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        x = gcd(nums[i], nums[j])\n        if x > 1:\n            d[x] += 1\nprint(len(d))\n"
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n9 6 2 4\") == \"6\"\n\"\"\""
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n9 6 2 4') == '6'"
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 6 2 4') == '6'\nassert solution('1 1 1 1') == '1'\nassert solution('3 9 7 5') == '4'\nassert solution('2 8 5 7') == '5'\n\n------Problem-----\nLothar Collatz studied the sequence $a_ i$, where $a_ i$ is the least common multiple of $i$, for various values of $i$. He observed that $a_ i$ is always of the form $4k + 3$ for some positive integer $k$. He then conjectured that $f$ must take on a different value for every $4k + 3$.\n\nWrite a program which takes as input a single line with a single integer $n$, the length of the sequence, and outputs the number of distinct values $f$ takes on.\n\n-----Constraints-----\n3 \u2264 n \u2264 5\u00b710^5\n-----Output-----\nThe number of distinct values $f$ takes on.\n\n\"\"\""
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n9 6 2 4') == '6'\nassert solution('1\\n1') == '1'\nassert solution('4\\n2 1 3') == '2'\n\"\"\""
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n9 6 2 4') == '6'\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n9 6 2 4\") == \"6\"\n\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 6 2 4\") == \"6\"\n\n\"\"\"\n\nimport sys\nimport collections\n\nMAX = 10 ** 18"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.00000000\"\nassert solution(\"2 5 1\") == \"1.999999\"\n\"\"\"\n\nx_s, y_s, s_s, r_i, r_f = [int(i) for i in input().split()]\nx_a, y_a, s_a = [int(i) for i in input().split()]\n\ncurrent_x = x_a\ncurrent_y = y_a\ncurrent_s = s_a\n\nmin_damage = 0\n\nwhile current_s > 0:\n    current_s -= 1\n    current_x += s_a\n    current_y += s_a\n    damage = (current_x - x_s) ** 2 + (current_y - y_s) ** 2\n    if damage <= r_i ** 2:\n        if current_s == 0:\n            damage += r_i ** 2\n        else:\n            damage += r_i ** 2 + (current_s + 1) ** 2\n    min_damage = max(min_damage, damage)\n    current_x -= s_a\n    current_y -= s_a\n\nprint(\"{:.6f}\".format(min_damage))\n"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 1 1 3 2''') == '2.000000'\nassert solution('''2 5 1''') == '1.000000'\nassert solution('''2 0 1 3 2''') == '2.000000'\nassert solution('''0 5 1''') == '0.000000'\nassert solution('''0 0 1 3 2''') == '0.000000'\n'''\nimport sys\nimport math\n\ns = list(map(int, sys.stdin.readline().split()))\na = list(map(int, sys.stdin.readline().split()))\n\nprint('%.6f' % ((s[3] * math.sqrt(math.pi) * a[2] - s[0] * math.sqrt(math.pi) * a[1]) / (s[2] * math.sqrt(math.pi) - s[1] * math.sqrt(math.pi))))\n'''"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1 3 2') == '2.0'\nassert solution('2 5 1') == '1.5'\nassert solution('2 1 1 3 2') == '2.0'\n\"\"\"\n\nx_s, y_s, s_s, r_i, r_f = map(float, input().split())\nx_a, y_a, s_a = map(float, input().split())"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '2 1 1 3 2'\n) == '2.000000'\n\"\"\"\n\nimport math\nimport sys\nimport unittest\n\n\nclass Solution:\n    def min_damage(self, xs: int, ys: int, s: int, ri: int, rf: int) -> float:\n        # O(1) time, O(1) space\n        # We're trying to find the min damage that the user will take\n        #\n        # Initially the player is at a location (x, y). Then we have a radius of ri. The player can travel\n        # at speed s for a second. We want to find the min damage that the player will take if the radius\n        # of the safety zone shrinks to rf.\n        #\n        # To do this we can observe that the player will travel at s meters for a second. If the radius\n        # of the safety zone is ri, then the player will travel at s meters. After that the radius of\n        # the safety zone will shrink by rf/s, and the player will travel at rf/s. Since the radius of\n        # the safety zone is a circle, we can calculate the area of the safety zone. The area of a\n        # circle is pi*r^2. From this, we can obtain the time it will take for the player to travel the\n        # whole radius and the player will be at the other end of the safety zone. We can use this\n        # information to find the min damage that the player will take.\n\n        # Step 1: Calculate the time and x, y coordinates that the player will be at when the radius\n        # of the safety zone shrinks to rf.\n        distance_to_rf = math.sqrt(ri * ri - rf * rf)\n        rf_x = xs + s * math.copysign(1, rf)\n        rf_y = ys - distance_to_rf / s\n\n        # Step 2: Calculate the time and x, y coordinates that the player will be at when the radius\n        # of the safety zone shrinks to ri.\n        distance_to_ri = math.sqrt(ri * ri - ri * ri)\n        ri_x = xs - distance_to_ri / s\n        ri_y = ys - distance_to_ri / s\n\n        # Step 3: Calculate the time and x, y coordinates that the player will be at when the radius\n        # of the safety zone shrinks to 0.\n        distance_to_zero = math.sqrt(ri * ri - 0 * 0)\n        zero_x = xs - distance_to_zero / s\n        zero_y = ys - distance_to_zero / s\n\n        # Step 4: Calculate the min damage that the user will take.\n        # the area of the safety zone is pi*ri^2.\n        # the area of the safety zone is pi*ri^2.\n        # the time that the user will be at the end of the safety zone is\n        # (pi*ri^2)/(s*s)\n        # so the min damage that the user will take is (pi*ri^2)/(s*s)\n        # (pi*ri^2)/(s*s) = (pi*ri^2)/(s^2) = ri^2/s^2\n        # so the min damage is ri^2/s^2\n        # and the min damage is pi * ri^2 / s^2\n        # so the min damage is pi*ri^2/s^2\n        #\n        # The area of the safety zone is equal to ri^2 * (2 * pi - 2 * s^2)\n        # and the area of the safety zone is equal to ri^2 * (2 * pi - 2 * s^2)\n        # so the min damage is pi*ri^2 * (2 * pi - 2 * s^2)\n        #\n        # So the min damage is\n        # (pi*ri^2*(2*pi - 2*s^2))/s^2\n        # (pi*ri^2*(2*pi - 2*s^2))/s^2\n        # (pi*ri^2*(2*pi - 2*s^2))/s^2\n        # (pi*ri^2*(2*pi - 2*s^2))/(s^2)\n        # (pi*ri^2*(2*pi - 2*s^2))/(s^2)\n        # (pi*ri^2*(2*pi - 2*s^2))/(s^2)\n        # (pi*ri^2*(2*pi - 2*s^2))/(s^2)\n        #\n        # So the min damage is pi*ri^2*(2*pi - 2*s^2)/s^2\n        #\n        # since ri is always positive, we can simplify the formula to\n        #\n        # pi*ri^2*(2*pi - 2*s^2)/s^2\n        # pi*ri^2*(2*pi - 2*s^2)\n        # pi*ri^2\n        #\n        # so the min damage is pi*ri^2\n        #\n        # since we want to find the min damage we can simplify the formula\n        # to\n        #\n        # pi*ri^2/(s^2)\n        #\n        # since ri is always positive, we can simplify the formula to\n        #\n        # pi*ri^2/(s^2)\n        # pi*ri^2\n        #\n        # so the min damage is pi*ri^2\n        #\n        # since we want to find the min damage we can simplify the formula\n        # to\n        #\n        # pi*ri^2/(s^2)\n        # pi*ri^2\n        #\n        # so the min damage is pi*ri^2\n        #\n        # since we want to find the min damage we can simplify the formula\n        # to\n        #\n        # pi*ri^2/(s^2)\n        # pi*ri^2\n        #\n        # so the min damage is pi*ri^2\n        #\n        # since we want to find the min damage we can simplify the formula\n        # to\n        #\n        # pi*ri^2/(s^2)\n        # pi*ri^2\n        #\n        # so the min damage is pi*ri^2\n        #\n        # So the answer is pi*ri^2/(s^2)\n        #\n        # which is\n        # pi/s\n\n        # Step 5:\n        # We can simplify the formula to\n        #\n        "
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1 3 2\\n2 5 1\") == '2.0'\n"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\n\"\"\"\nimport math\n\nx_s, y_s, s_s, r_i, r_f = map(int, input().split())\nx_a, y_a, s_a = map(int, input().split())\n\ndamage = 0\n\nfor _ in range(10000):\n    r_i -= s_s\n    r_f -= s_s\n    if r_i <= r_f:\n        damage += r_f - r_i\n        break\n    damage += 1\n\nprint(round(damage * (x_a - x_s)**2 + (y_a - y_s)**2, 6))\n"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 3 2\") == 2\n\"\"\"\n\n\"\"\"\nfrom decimal import Decimal\n\nstdin = open(0).read().splitlines()\ns = Decimal(stdin[0].split()[0])\na = Decimal(stdin[0].split()[1])\ns_ = Decimal(stdin[0].split()[2])\nr_i = Decimal(stdin[0].split()[3])\nr_f = Decimal(stdin[0].split()[4])\n\ns_ = abs(s_)\nr_i = abs(r_i)\nr_f = abs(r_f)\n\nprint(Decimal(str(r_f - r_i)).quantize(Decimal('10^-6'), rounding='ROUND_DOWN'))\n\"\"\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 1 3 2\\n2 5 1') == 2.0\nassert solution('2 1 1 3 2\\n2 5 3') == 1.0\nassert solution('2 1 1 3 2\\n2 5 10') == 1.0\nassert solution('2 1 1 3 2\\n2 5 20') == 1.0\nassert solution('2 1 1 3 2\\n2 5 30') == 2.0\n"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 1 1 3 2''') == '2.000000'\nassert solution('''2 5 1''') == '0.181818'\n'''\n\n'''\n"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 3 2\\n2 5 1\") == \"2.000000\"\n\nSample Input:\n2 1 1 3 2\n2 5 1\nSample Output:\n2.999999\n\nSolution:\n'''\nimport math\n"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\") == \"96\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n4 5\\n4 5\") == \"168\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 4\") == \"256\"\nassert solution(\"6\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 5\\n2 6\\n2 6\\n3 4\\n4 5\\n4 6\\n5 6\") == \"960\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == \"672\"\n-----Explanation-----\nThe network created by adding cable between computer 1 and computer 2 is shown below:\n\nNetwork $A$:\n\nCompute the transmission cost of network $A$: $4^2 + 3^2 = 96$.\n\nNetwork $B$:\n\nCompute the transmission cost of network $B$: $2^2 + 3^2 + 1^2 = 8 + 9 + 1 = 16$.\n\nNetwork $C$:\n\nCompute the transmission cost of network $C$: $4^2 + 3^2 + 1^2 = 96 + 16 = 96 + 96 = 128$.\n\nThe answer is 128.\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4') == '96'\n\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict\n\nclass Network:\n    def __init__(self, n: int):\n        self.size = n\n        self.graph = defaultdict(list)\n        self.cost = defaultdict(lambda: float('inf'))\n\n    def addEdge(self, u: int, v: int, w: int):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.cost[u, v] = min(self.cost[u, v], w)\n        self.cost[v, u] = min(self.cost[v, u], w)\n\n    def dijkstra(self, src: int):\n        q = [src]\n        self.cost[src] = 0\n        visited = set()\n        while q:\n            u = min([u for u in q if u not in visited], key=lambda x: self.cost[x])\n            q.remove(u)\n            visited.add(u)\n            for v in self.graph[u]:\n                if v not in visited and self.cost[u, v] < self.cost[v]:\n                    self.cost[v] = self.cost[u, v]\n                    q.append(v)\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        networkA, networkB = Network(int(stdin.readline())), Network(int(stdin.readline()))\n        nodes = set()\n        for u, v, w in [x.split(' ') for x in stdin.readlines()]:\n            networkA.addEdge(int(u), int(v), int(w))\n            networkB.addEdge(int(u), int(v), int(w))\n            nodes.add(int(u))\n            nodes.add(int(v))\n        networkA.dijkstra(1)\n        networkB.dijkstra(1)\n        networkC = Network(len(nodes))\n        for u, v, w in [x.split(' ') for x in stdin.readlines()]:\n            networkC.addEdge(int(u), int(v), int(w) + min(networkA.cost[int(u), int(v)], networkB.cost[int(u), int(v)]))\n        return str(min([networkC.cost[x, y] for x in nodes for y in nodes if x!= y]))"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\") == \"96\"\n\"\"\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\") == \"96\"\nassert solution(\"5\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\") == \"96\"\nassert solution(\"5\\n4\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\") == \"100\"\nassert solution(\"5\\n5\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\") == \"100\"\nassert solution(\"5\\n3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\") == \"110\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"96\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"144\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"256\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"288\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"576\"\n\"\"\""
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\"\"\") == \"96\"\n\nassert solution(\"\"\"3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\"\"\") == \"96\"\nassert solution(\"\"\"4\n2\n2\n1\n2\n2\n3\n2\n3\n2\n2\n1\n1\"\"\") == \"108\"\n\nassert solution(\"\"\"5\n2\n2\n3\n1\n2\n2\n3\n2\n2\n4\n2\n2\n3\n1\n4\n3\n4\n3\n4\n1\n1\"\"\") == \"144\"\n\nassert solution(\"\"\"3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\"\"\") == \"90\""
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 2\\n1 3\\n1 4') == '96'\n"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('0 1\\n') == '1'\nassert solution('0 2\\n0 1') == '1'\nassert solution('0 1\\n0 1\\n') == '2'\nassert solution('0 2\\n0 1\\n0 1\\n') == '2'\n'''\n\nimport sys\nimport itertools"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n2 3\\n4\") == \"96\"\nassert solution(\"1 2\\n2 3\\n4\") == \"96\"\nassert solution(\"3\\n2 1\\n4\") == \"16\"\nassert solution(\"5\\n3 2\\n4 1\\n3 4\") == \"120\"\n\"\"\"\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n\n    def dfs(self, source, destination, path):\n        if source == destination:\n            path.append(source)\n            return True\n        \n        for i in self.graph[source]:\n            path.append(i)\n            if self.dfs(i, destination, path):\n                return True\n            path.pop()\n\n    def findPath(self, u, v):\n        path = []\n        self.dfs(u, v, path)\n        return path\n\n    def getEdgeCost(self, path):\n        cost = 0\n        for i in range(len(path) - 1):\n            cost += (path[i] - path[i + 1]) ** 2\n        return cost"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\"\"\"\n\nfrom collections import deque\nfrom math import inf"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n0 0\n0 1\n1 0\n1 1''') == 3\nassert solution('''6\n0 0\n1 1\n2 2\n2 0\n3 3\n4 4''') == 4\nassert solution('''7\n0 0\n1 1\n1 0\n2 2\n3 3\n4 4\n5 5''') == 5\nassert solution('''6\n0 1\n0 2\n1 1\n1 0\n2 2\n3 3''') == 3\nassert solution('''5\n0 0\n0 1\n0 2\n2 0\n3 3\n''') == 3\n\n\"\"\"\n\nN = int(stdin.readline())\nedges = list()\nfor i in range(N):\n    x, y = map(int, stdin.readline().split())\n    edges.append([i, x, y])\nedges.sort(key=lambda x: x[2])\nweights = [float('inf') for i in range(N)]\nweights[0] = 0\nfor edge in edges:\n    i, x, y = edge\n    for j in range(N):\n        if i!= j:\n            if weights[j] > weights[i] + abs(x - y):\n                weights[j] = weights[i] + abs(x - y)\nfor weight in weights:\n    print(weight if weight!= float('inf') else -1)\n"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1'\nassert solution('1\\n2\\n3\\n4') == '2'\nassert solution('1\\n2\\n3\\n4\\n5') == '3'\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == '5'\n"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\nassert solution('4\\n0 0\\n0 1\\n1 0\\n1 2') == '2'\nassert solution('4\\n0 0\\n0 1\\n1 0\\n1 2\\n2 0\\n2 1') == '2'\nassert solution('4\\n0 0\\n0 1\\n1 0\\n1 2\\n2 0\\n2 1\\n3 0\\n3 1') == '3'\n\"\"\"\nfrom __future__ import annotations\nimport itertools"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\n\n'''\n"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1\\n') == 3\n\"\"\"\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\nassert solution('2\\n1 1\\n1 1') == '2'\nassert solution('1\\n1 1') == '0'\n\n\"\"\"\nimport sys\nfrom heapq import heappush, heappop"
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '3'\n\n---------------\n\nfrom itertools import combinations"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 8\\n3 1\\n1 4\") == \"10\"\n\"\"\""
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 4\") == \"10\"\nassert solution(\"3\\n2 8\") == \"10\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import Iterator\nfrom math import inf\n"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 8\\n3 1\\n1 4\") == \"10\\n10\\n9\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 8\\n3 1\\n1 4\") == \"10\\n10\\n9\"\nprint(solution(\"3\\n2 8\\n3 1\\n1 4\"))\n\nimport sys"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 8\\n3 1\\n1 4') == '10\\n10\\n9'\n"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 8\\n3 1\\n1 4\") == '10\\n10\\n9'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2\\n3\\n1\\n2\\n3') == '11'\nassert solution('3\\n2\\n3\\n1\\n2\\n3') == '9'\nassert solution('5\\n4\\n3\\n2\\n1\\n3\\n4\\n5\\n1\\n2\\n3\\n4') == '16'\nassert solution('6\\n5\\n4\\n3\\n2\\n1\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5') == '26'\nassert solution('7\\n6\\n5\\n4\\n3\\n2\\n1\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5') == '34'\n"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 8\\n3 1\\n1 4\") == \"10\"\nprint(solution(\"2 8\\n3 1\\n1 4\"))\n\n\"\"\"\nfrom typing import List\n\nN = int(input())\nA = []\nB = []\nfor i in range(N):\n    a, b = map(int, input().split())\n    A.append(a)\n    B.append(b)\n\ndp = [[0 for _ in range(len(B)+1)] for _ in range(len(A)+1)]\ndp[0][0] = 0\n\nfor i in range(1, len(A)+1):\n    a = A[i-1]\n    for j in range(1, len(B)+1):\n        b = B[j-1]\n        dp[i][j] = dp[i-1][j]\n        if a <= b:\n            dp[i][j] = max(dp[i][j], dp[i-1][j-1]+a*b)\n\nfor row in dp:\n    print(row[-1])\n"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 8\\n3 1\\n1 4\") == \"10\\n10\\n9\"\nprint(solution(\"3\\n2 8\\n3 1\\n1 4\"))\n\nSample Input:\n10\n1 14\n2 10\n3 21\n4 14\n5 6\n6 19\n7 22\n8 12\n9 10\n10 15\nSample Output:\n6\\n6\\n9\\n9\\n12\\n12\\n15\"\nassert solution(stdin) == stdout\n\nSample Input:\n5\n1 4\n2 9\n3 8\n4 6\n5 7\nSample Output:\n7\\n7\\n7\\n7\\n7\nassert solution(stdin) == stdout\n\nSample Input:\n3\n2 8\n3 1\n1 4\nSample Output:\n10\n10\n9\n\nSample Input:\n4\n1 6\n1 6\n1 6\n1 6\nSample Output:\n4\\n4\\n4\\n4\nassert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 8\\n3 1\\n1 4\") == \"10\\n10\\n9\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#..#\") == 3\n\"\"\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n####\\n#JF#\\n#..#\\n#..#') == '3'\nassert solution('4 4\\n#JF#\\n#..#\\n#..#') == 'IMPOSSIBLE'\nassert solution('4 4\\n#..#\\n#..#\\n#JF#') == '3'\nassert solution('4 4\\n#..#\\n#JF#\\n#..#') == 'IMPOSSIBLE'\nassert solution('4 4\\n#JF#\\n#..#\\n#..#') == '3'\n"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4 4\n####\n"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n####\\n#JF#\\n#..#\\n#..#') == '3'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"4 4\n####\n"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('\\n'.join([\n    '1 2',\n    '.#.',\n    '1 J2',\n    '.F.',\n    '2 2',\n    '....',\n])) == '2'\n\nassert solution('') == 'IMPOSSIBLE'\nassert solution('\\n'.join([\n    '1 2',\n    '#J.',\n    '1 J2',\n    '#F.',\n    '2 2',\n    '....',\n])) == '3'\n\nassert solution('') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#..#\") == 3\n"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#..#\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n####\\n#JF#\\n#..#\\n#..#') == '3'\nassert solution('4 4\\n#JF#\\n#..#\\n#..#') == 'IMPOSSIBLE'\nassert solution('4 4\\n####\\n#JF#\\n#JF#\\n#..#') == '3'\nassert solution('4 4\\n#JF#\\n#JF#\\n#JF#') == 'IMPOSSIBLE'\nassert solution('4 4\\n####\\n#JF#\\n#JF#\\n#JF#') == '3'\n"
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('.#.\\n####') == 'IMPOSSIBLE'\nassert solution('J#F.\\n####') == '3'\n\n------------------------------\nSample Input:\n4 4\n####\n"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(\"sample_input_2.txt\", \"r\").read()) == \"0.3333333333\"\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == \"0.33333333\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 2\\n2\\n1 1') == '0.3333333333'\nprint(solution(input()))"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 2\\n2\\n1 1') == '0.3333333333'\n"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == \"0.3333333333\"\n\n-----Solution-----\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 2\\n2\\n1 1') == '0.3333333333'\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == \"0.3333333333\"\nassert solution(\"1 2 2\\n2\\n3 3\") == \"0.5000\"\n\"\"\"\n\n\"\"\"\nLet P(n, m, d) denote the probability that Explosion removes all the opponent\u2019s minions, accurate up to an absolute error of $10^{-6}$. \n\nP(n, m, d) = P(n - 1, m, d) + P(n - 2, m, d) + P(n - 3, m, d) +... + P(n - 6, m, d) + P(n - 7, m, d) +... + P(n - 20, m, d) + P(n - 21, m, d) +... + P(n - 100, m, d)\n\nP(n, m, d) = sum(P(n - d + k + 1, m, d) for k in range(20)) for k in range(20)\n\nUsing the sum of four binomial coefficients (pascal's triangle), P(n, m, d) can be solved recursively as follows:\n\nP(n, m, d) = sum(P(n - d + k + 1, m, d) for k in range(20)) for k in range(20)\n\nP(n, m, d) = P(20, m, d) + P(19, m, d) + P(18, m, d) +... + P(1, m, d)\n\nP(n, m, d) = sum(P(n - d + k, m, d) for k in range(20)) for k in range(20)\n\nP(n, m, d) = sum(P(n - k - 1, m, d) for k in range(20)) for k in range(20)\n\nThe sum of 20 binomial coefficients equals comb(21, d + 1) = comb(100, d) = N(21, d).\n\nAs N(n, d) = N(100, d) = N(21, d) = N(20, d) + N(19, d) + N(18, d) +... + N(1, d) = 21N(20, d), we have that P(n, m, d) = N(21, d) * comb(20, d) = 21N(20, d) * comb(20, d) = 21N(20, d) * comb(20, d) = 21N(20, d) * 21N(20, d) * comb(20, d) = 21N(20, d) * N(21, d) * N(21, d) * comb(20, d) = N(21, d) * 21N(20, d) * N(21, d) * comb(20, d) = N(21, d) * 21N(20, d) * comb(20, d) = 21N(20, d) * comb(20, d) = 21N(20, d) * comb(20, d) = 21N(20, d) * comb(20, d) = 21N(20, d) * comb(20, d) = 21N(20, d) * comb(20, d) = 21 * comb(20, d) = 21 * comb(20, d) = 21 * comb(20, d) = 21 * comb(20, d) = 21 * comb(20, d) = 21 * comb(20, d) = 21 * comb(20, d) = 21 * comb(20, d) = 21 * comb(20, d) = comb(20, d) = 21 * comb(20, d) = 21 * 21 * comb(20, d) = N(21, d) * 21 * comb(20, d) = N(21, d) * 21 * comb(20, d) = N(21, d) * 21 * comb(20, d) = N(21, d) * comb(20, d) = N(21, d) * comb(20, d) = N(21, d) * 21 * comb(20, d) = N(21, d) * 21 * 21 * comb(20, d) = N(21, d) * N(21, d) * 21 * 21 * comb(20, d) = N(21, d) * N(21, d) * 21 * 21 * 21 * comb(20, d) = N(21, d) * N(21, d) * N(21, d) * 21 * 21 * 21 * comb(20, d) = N(21, d) * N(21, d) * N(21, d) * N(21, d) * 21 * 21 * 21 * comb(20, d) = N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) * 21 * 21 * 21 * comb(20, d) = N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) * comb(20, d) = N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) * comb(20, d) = N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) * comb(20, d) = N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) = N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) * comb(20, d) = N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) = N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) * comb(20, d) = N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) = N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) = N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) * N(21, d) = N(21,"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 2\\n2\\n1 1') == '0.33333333'"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 2\\n2\\n1 1') == '0.3333333333'\nassert solution('1 2 2\\n2\\n3 3') == '0.3333333333'\nassert solution('1 2 2\\n2\\n0 0') == '0.3333333333'\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce\nfrom fractions import Fraction\nfrom fractions import gcd"
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 2\\n2\\n1 1') == '0.3333333333'\nprint(solution('1 2 2\\n2\\n1 1'))\n"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(101) == 1023\n"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101\") == 1023\nassert solution(\"101010\") == 1023\nassert solution(\"10101101010\") == 1023\nassert solution(\"101010*101010\") == 1024\nassert solution(\"111111101010\") == 1024\n"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('101') == 1\nassert solution('1111') == 1023\nassert solution('101') == 1\nassert solution('1111') == 1023\nassert solution('101') == 1\n"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101') == 1\nassert solution('1111') == 1023\n\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter\n\nn = int(stdin.readline())\npattern = stdin.readline().strip()\n\nmax_count = 0\n\nfor i in range(2 ** n):\n    count = 0\n    substring = bin(i)[2:].zfill(n)\n    for j in range(n):\n        if pattern[j] == '*' and substring[j] == '1':\n            count += 1\n\n    if count == n:\n        max_count = max(max_count, count)\n\nprint(max_count)\n"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(101) == 1023\n\n\"\"\""
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == \"1023\"\nassert solution(\"1111\") == \"1023\"\nassert solution(\"1011\") == \"1024\"\nassert solution(\"10110\") == \"1024\"\nassert solution(\"10111\") == \"1023\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == 1023"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101') == '101'\nassert solution('1111') == '1111'\nassert solution('1011') == '1101'\n\nprint(solution('101'))\nprint(solution('1111'))\nprint(solution('1011'))\n\n-----\nSample Output 1:\n\n1101\n1111\n1101\n1101\n1101\n1101\n1101\n1101\n1101\n1111\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n101\n"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''101\n1*1\n''') == '1023'\n\nassert solution('''111\n1*1\n''') == '1023'\n\nassert solution('''101\n1*1\n''') == '1023'\n\nassert solution('''1\n1*1\n''') == '1023'\n\nassert solution('''1111111111\n1*1\n''') == '1023'"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"101\") == 1023\nassert solution(\"11010\") == 1023\nassert solution(\"11011\") == 1023\nassert solution(\"11101\") == 1023\nassert solution(\"1111010\") == 1023\n"
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2') == 6\nassert solution('3 3') == 18\nassert solution('4 4') == 37\nassert solution('8 8') == 313\nassert solution('5 3') == 29\n"
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n') == 6\n\"\"\""
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == 3\n\"\"\""
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('1 2\\n') == 2\nassert solution('2 1\\n') == 1\nassert solution('2 2\\n') == 0\nassert solution('3 3\\n') == 0\n"
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2') == 6\n\"\"\""
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == 6\nprint(solution(\"2 2\"))\n\"\"\""
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == 6\n\"\"\""
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == 6\nassert solution('2 1') == 0\nassert solution('1 1') == 1\n\"\"\"\n\nimport sys\n\nx, y = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n') == 6\n\"\"\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == 6\nassert solution(\"3 4\") == 29\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '2930'\nprint('test passed')\n"
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\n\"\"\""
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\n\"\"\""
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\nprint(\"Test 1\\n-----\\ncorrect!\")\n\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\nprint(\"Test 2\\n-----\\ncorrect!\")\n\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\nprint(\"Test 3\\n-----\\ncorrect!\")\n\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\nprint(\"Test 4\\n-----\\ncorrect!\")\n\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\nprint(\"Test 5\\n-----\\ncorrect!\")"
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == '2930'\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == 'Impossible'\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == 'Impossible'\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == 'Impossible'\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\\n\") == \"2930\"\n\n-----Note-----\nDo not use the sum() function in your solution.\n\"\"\"\n\nfrom itertools import combinations\n\nTEST_CASE_1 = \"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\\n\"\nTEST_CASE_2 = \"1000 2000 7\\n100\\n500\\n550\\n1000\\n1400\\n1500\\n\"\nTEST_CASE_3 = \"1000 2000 7\\n100\\n500\\n550\\n1100\\n1400\\n1500\\n\"\nTEST_CASE_4 = \"1000 2000 7\\n100\\n500\\n550\\n1100\\n1400\\n1500\\n\"\nTEST_CASE_5 = \"1000 2000 7\\n100\\n500\\n550\\n1000\\n1500\\n1600\\n1700\\n\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '2930'\nassert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\\n3200') == 'Impossible'\n\n\"\"\""
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('0 0 0') == 'Impossible'\nassert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '2930'\n'''\n\nimport sys\nimport math\n\nN = int(input())\nL1, L2 = map(int, input().split())\ntube_length = []\n\nfor i in range(N):\n    tube_length.append(int(input()))\n\ntube_length.sort()\n\ncount = 0\ncurr = 0\npairs = []\n\nfor i in range(N):\n    if curr < L1:\n        pairs.append(tube_length[i])\n        curr += tube_length[i]\n        count += 1\n    else:\n        break"
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\\n\") == \"2930\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(s) == e\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3\\n0\\n0\\n1') == '2'\nassert solution('1 2 3\\n0\\n0\\n1') == '3'\n"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n0\\n0\\n1\\n') == '2'\n'''"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test) == \"expected\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 0\\n0\\n1\\n') == '2'\nassert solution('4 1 6 1\\n0\\n0\\n0\\n1\\n') == '0'"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3\\n0\\n0\\n1') == '2'\n\"\"\"\n\n\"\"\"\nsolution \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694.\n\uacb0\uacfc\ub85c \uc22b\uc790\ub97c \ubc18\ud658\ud558\uc138\uc694.\n\nsolution \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\uc740 \ub450 \uac1c\uc758 \uc815\uc218\ub97c \uc785\ub825\uc73c\ub85c \ubc1b\uc2b5\ub2c8\ub2e4.\n\nsolution \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\uc740 \ub450 \uac1c\uc758 \uc815\uc218\ub97c \uc785\ub825\uc73c\ub85c \ubc1b\uc2b5\ub2c8\ub2e4.\n\uccab \ubc88\uc9f8 \uc815\uc218\ub294 \uc22b\uc790\ub97c \ud3ec\ud568\ud55c \uc804\uccb4 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \ub098\ud0c0\ub0b4\uba70, \ub450 \ubc88\uc9f8 \uc815\uc218\ub294 \uc22b\uc790\ub97c \ud3ec\ud568\ud55c \uc804\uccb4 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uc785\ub2c8\ub2e4.\n\ubc18\ud658\ud558\ub294 \ub450 \ubc88\uc9f8 \uc815\uc218\ub294 \ud574\ub2f9 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uac00 \ub429\ub2c8\ub2e4.\n\n-----\uc81c\ud55c\uc0ac\ud56d-----\nsolution \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\uc774 \ub450 \uac1c\uc758 \uc815\uc218\ub97c \uc785\ub825\uc73c\ub85c \ubc1b\uc2b5\ub2c8\ub2e4.\nsolution \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\uc774 \ub450 \uac1c\uc758 \uc815\uc218\ub97c \uc785\ub825\uc73c\ub85c \ubc1b\uc2b5\ub2c8\ub2e4.\n\uccab \ubc88\uc9f8 \uc815\uc218\ub294 \uc22b\uc790\ub97c \ud3ec\ud568\ud55c \uc804\uccb4 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \ub098\ud0c0\ub0b4\uba70, \ub450 \ubc88\uc9f8 \uc815\uc218\ub294 \uc22b\uc790\ub97c \ud3ec\ud568\ud55c \uc804\uccb4 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uc785\ub2c8\ub2e4.\n\uccab \ubc88\uc9f8 \uc815\uc218\ub294 \uc22b\uc790\ub97c \ud3ec\ud568\ud55c \uc804\uccb4 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \ub098\ud0c0\ub0b4\uba70, \ub450 \ubc88\uc9f8 \uc815\uc218\ub294 \uc22b\uc790\ub97c \ud3ec\ud568\ud55c \uc804\uccb4 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uc785\ub2c8\ub2e4.\n\ubc18\ud658\ud558\ub294 \ub450 \ubc88\uc9f8 \uc815\uc218\ub294 \ud574\ub2f9 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uac00 \ub429\ub2c8\ub2e4.\n\uc815\uc218\uac00 \ud558\ub098 \ubc16\uc5d0 \uc8fc\uc5b4\uc9c0\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\nsolution \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\uc774 \ub450 \uac1c\uc758 \uc815\uc218\ub97c \uc785\ub825\uc73c\ub85c \ubc1b\uc2b5\ub2c8\ub2e4.\nsolution \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\uc774 \ub450 \uac1c\uc758 \uc815\uc218\ub97c \uc785\ub825\uc73c\ub85c \ubc1b\uc2b5\ub2c8\ub2e4.\n\uccab \ubc88\uc9f8 \uc815\uc218\ub294 \uc22b\uc790\ub97c \ud3ec\ud568\ud55c \uc804\uccb4 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \ub098\ud0c0\ub0b4\uba70, \ub450 \ubc88\uc9f8 \uc815\uc218\ub294 \uc22b\uc790\ub97c \ud3ec\ud568\ud55c \uc804\uccb4 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uc785\ub2c8\ub2e4.\n\ubc18\ud658\ud558\ub294 \ub450 \ubc88\uc9f8 \uc815\uc218\ub294 \ud574\ub2f9 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uac00 \ub429\ub2c8\ub2e4.\n\uc815\uc218\uac00 \ud558\ub098 \ubc16\uc5d0 \uc8fc\uc5b4\uc9c0\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n\n-----\uc608\uc2dc \uc785\ub825-----\n4 2\n1\n1\n2\n3\n3\n2\n1\n1\n2\n2\n1\n3\n\n-----\uc608\uc2dc \ucd9c\ub825-----\n4\n\"\"\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\\n0\\n0\\n1\") == \"2\"\nassert solution(\"1 2 3\\n1\\n0\\n1\") == \"3\"\nassert solution(\"1 2 3\\n0\\n0\\n0\\n1\\n2\\n3\\n4\") == \"2\"\nassert solution(\"1 2 3\\n1\\n2\\n1\") == \"1\"\n\"\"\"\n\nimport collections\nimport math\n\nn, m, l = [int(s) for s in input().split(\" \")]\ncache = collections.deque()\naccess = collections.deque()\ncount = 0\nfor i in range(m):\n    access.append(int(input()))\naccess.append(l)\n\nfor i in range(m + 1):\n    if not access[i] in cache:\n        if len(cache) < n:\n            cache.append(access[i])\n        else:\n            cache.popleft()\n            cache.append(access[i])\n    else:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\\n0\\n0\\n1\") == \"2\"\nprint(solution(\"1 2 3\\n0\\n0\\n1\"))\n\n-----Explanation-----\nIn the first example, the monkey can choose to cache the first and third objects, and when the access is requested, it will have to read the first and third objects into the cache again.\n\nIn the second example, the monkey can choose to cache every object, and when the access is requested, it will have to read every object into the cache again.\n\nIn the third example, the monkey can not cache any object, so every access will have to be read into the cache.\n\nBecause the least number of times an object must be read into the cache is 2, the solution is 2.\n\nPrecondition:\n* 1 \u2264 c \u2264 100,000\n* 0 \u2264 a \u2264 100,000\n\n\"\"\""
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\\n0\\n0\\n1\") == \"2\"\n\nassert solution(\"1 2 3\\n0\\n0\\n1\") == \"2\"\n\nassert solution(\"1 2 3\\n0\\n0\\n1\") == \"2\"\n\nassert solution(\"1 2 3\\n0\\n0\\n1\") == \"2\"\n\nassert solution(\"1 2 3\\n0\\n0\\n1\") == \"2\""
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 1\nassert solution('1 2\\n') == 1\nassert solution('1\\n2\\n') == 2\nassert solution('1\\n1\\n') == 1\n"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a\\n') == 'a'\nassert solution('a\\nb') == 'ab'\nassert solution('a\\nbb') == 'aabb'\n"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\") == \"10\"\n\"\"\""
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\") == 10\n'''\nfrom math import sin, cos, sqrt, pi, asin"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\\n\") == \"10\"\nassert solution(\"3 4\\n-4 4 -4\\n1 2 1 2\\n1 4 -1\\n4 -4\\n\") == \"8\"\nassert solution(\"3 3\\n-5 2 -5\\n-1 -2 -1\\n4 4 -5\\n2 2\\n\") == \"10\"\n\"\"\"\n\nfrom copy import deepcopy"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n5 1 -5\\n0 -2 -1\\n4 5 -5\\n1 2\") == \"10\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n1 1') == '1\\n'\nassert solution('1 1\\n1 1') == '0\\n'\nassert solution('1 2\\n1 1\\n1 1') == '2\\n'\nassert solution('1 1\\n2 2\\n2 2') == '0\\n'\n"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2') == '10'\nassert solution('3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 5\\n2 2') == '0'\nassert solution('3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2') == '0'\nassert solution('3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 5\\n2 2\\n-5 2 -5\\n-1 -2 -1\\n5 4 5') == '0'"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\") == \"10\"\n\"\"\"\n\nimport numpy as np\nfrom copy import deepcopy\nfrom queue import PriorityQueue\n\nclass Node:\n    def __init__(self, val, depth, parent):\n        self.val = val\n        self.depth = depth\n        self.parent = parent"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3\\n3 4\\n-2 -2 -2\\n3\\n-1 -1 -1\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\n\"\"\""
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\n\"\"\"\nimport sys\n\nstdin = sys.stdin\n\n_n, _r = map(int, stdin.readline().split())\n_flights = {}\nfor _ in range(_r):\n    _a, _b, _c = map(int, stdin.readline().split())\n    _flights[(_a, _b)] = min(_c, _flights.get((_b, _a), _c))\n_f = int(stdin.readline())\n_additional_flights = [list(map(int, stdin.readline().split())) for _ in range(_f)]\n\n_flights_copy = _flights.copy()\n_f_cost = 0\nfor _ in range(1, _n + 1):\n    _a = _b = 1\n    _min_cost = None\n    while _a <= _n and _b <= _n:\n        if (_a, _b) in _flights.keys():\n            _min_cost = _flights_copy.get((_a, _b), float(\"inf\"))\n            break\n        _b += 1\n        if _b == _n + 1:\n            _a += 1\n            _b = _a + 1\n    _flights_copy[_a, _b] = float(\"inf\")\n    _f_cost += _min_cost\n\n_a = _b = 1\n_min_cost = None\nwhile _a <= _n and _b <= _n:\n    if (_a, _b) in _flights.keys():\n        _min_cost = _flights_copy.get((_a, _b), float(\"inf\"))\n        break\n    _b += 1\n    if _b == _n + 1:\n        _a += 1\n        _b = _a + 1\n\n_flights_copy[_a, _b] = float(\"inf\")\n_f_cost += _min_cost\n\n_a = _b = 1\n_min_cost = None\nwhile _a <= _n and _b <= _n:\n    if (_a, _b) in _flights.keys():\n        _min_cost = _flights_copy.get((_a, _b), float(\"inf\"))\n        break\n    _b += 1\n    if _b == _n + 1:\n        _a += 1\n        _b = _a + 1\n\n_flights_copy[_a, _b] = float(\"inf\")\n_f_cost += _min_cost\n\nprint(_f_cost)"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\n\"\"\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300''') == '3100'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300') == '3100'\n"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300') == '3100'\n"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300') == '3100'\n"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300') == '3100'\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300''') == '3100'\nassert solution('''6 5\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n2\n1 4 600\n5 6 800\n3\n1 4 200\n2 3 100\n2\n1 4 400\n3 5 300\n4''') == '5200'\n'''"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n0 1\") == 0\nassert solution(\"2 1\\n0 2\") == 0\nassert solution(\"3 2\\n0 1\\n0 2\") == 1\nassert solution(\"2 2\\n0 1\\n1 2\") == 0\nassert solution(\"5 5\\n0 1\\n0 2\\n1 2\\n3 4\\n2 3\") == 0\n"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n0 1\") == \"0\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == 0\n\"\"\"\nimport math\n\nclass Solution:\n    def solution(self, stdin):\n        N, M = stdin.split(' ')\n        N, M = int(N), int(M)\n        graph = self.construct_graph(N, M)\n        self.check_no_cycle(graph)\n        return str(len(graph.keys()))\n\n    def construct_graph(self, N, M):\n        graph = {}\n        for i in range(M):\n            x, y = map(int, stdin.readline().split(' '))\n            if x not in graph.keys():\n                graph[x] = [y]\n            else:\n                graph[x].append(y)\n            if y not in graph.keys():\n                graph[y] = [x]\n            else:\n                graph[y].append(x)\n        return graph\n\n    def check_no_cycle(self, graph):\n        self.visited = set()\n        self.res = 0\n        self.dfs(graph, 0)\n        return self.res\n\n    def dfs(self, graph, node):\n        self.visited.add(node)\n        if node in self.visited:\n            if node in graph.keys():\n                for nbr in graph[node]:\n                    if nbr in self.visited:\n                        self.visited.remove(nbr)\n                    self.res += 1\n                    self.dfs(graph, nbr)\n        else:\n            if node in graph.keys():\n                for nbr in graph[node]:\n                    self.dfs(graph, nbr)"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n0 1') == 0\n\"\"\"\n\nimport sys\nimport string\nimport numpy as np\nimport math"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n0 1\") == \"0\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n0 1\\n\") == \"0\"\n\n-----Additional Comments-----\nObviously, if all roads are new, then there are no new round trips.\n\nI can make two passes of the list of roads, one pass for the new roads and one pass for the existing roads. The new roads can be rejected, but the existing roads can be added to the set of round trips. I can then generate a second set of roads by doing the same thing with the existing roads and see if there are any new round trips.\n\nI should do it like this:\n\n1. Create the list of existing roads, R, with their original endpoints.\n2. Create the list of new roads, N, with the same endpoints.\n3. Do the same thing for the existing roads to create the list of new round trips, NR.\n4. Do the same thing for the new roads to create the list of new round trips, RN.\n5. If NR is empty, then the total number of round trips is equal to RN, otherwise it is equal to the maximum of RN and NR.\n\nI'm pretty sure that this is O(n^2) for n roads in total.\n\n=====\n\nimport sys"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\n0 1\\n') == 0\n\n'''"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n0 1') == '0'\n\"\"\"\n\n\"\"\"\nNotes\n- \n\"\"\"\n\nimport sys\nfrom functools import lru_cache\nfrom collections import defaultdict\n\nclass Solution:\n    def __init__(self, roads, roads_rev):\n        self.roads = roads\n        self.roads_rev = roads_rev\n        self.round_tours = defaultdict(list)\n        self.round_tours_rev = defaultdict(list)\n\n    @lru_cache(maxsize=None)\n    def count(self, towns):\n        total = 0\n        for x, y in self.roads:\n            if x in towns and y not in towns:\n                total += 1\n        for x, y in self.roads_rev:\n            if x not in towns and y in towns:\n                total += 1\n        return total\n\n    def run(self):\n        towns = set()\n        for x, y in self.roads:\n            towns.add(x)\n            towns.add(y)\n        towns = list(towns)\n        towns.sort()\n        max_round_tours = 0\n        for x, y in self.roads:\n            self.round_tours[x].append(y)\n            self.round_tours_rev[y].append(x)\n        for x, y in self.roads_rev:\n            self.round_tours_rev[y].append(x)\n            self.round_tours[x].append(y)\n        for x, y in self.roads:\n            if self.count([x] + towns) < self.count([y] + towns):\n                max_round_tours += 1\n        for x, y in self.roads_rev:\n            if self.count(towns + [x]) < self.count(towns + [y]):\n                max_round_tours += 1\n        print(max_round_tours)"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\n0 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n0 1\\n\") == 0\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '10'\nassert solution('1 2') == '0'\nassert solution('1 10') == '10'\nassert solution('1 10 1') == '0'\nassert solution('1 10 10') == '0'\n"
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 10\") == \"10\"\nassert solution(\"1 1000000000\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"0 3\") == \"0\"\nassert solution(\"5 32\") == \"3\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 10\") == \"10\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 10') == '10'\nassert solution('1 10') == '10'\n\"\"\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 10\") == 10\nassert solution(\"1 3\") == 0\nassert solution(\"7 9\") == 1\nassert solution(\"13 24\") == 2\nassert solution(\"3 5\") == 0\n"
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 10') == '10'\nassert solution('2 7') == '1'\nassert solution('1 10') == '10'\nassert solution('1 1000') == '10'\nassert solution('1 100') == '10'\n"
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 10') == 10\nassert solution('0 10') == 10\nassert solution('0 10') == 10\nassert solution('1 10') == 10\nassert solution('1 10') == 10\n"
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1 10) == 10\nassert solution('1 10') == 10\nassert solution('1 2') == 0\n\n------Problem-----\nYou are a computer engineer at the national science institute, working on a program that uses numbers. You are solving the problem of finding the Kth smallest number. The numbers are in the range [0, 2^64) and there are 2^64 numbers in total. You already have a function that generates the stream of numbers in the range [0, 2^64) in a binary format.\n\nYour task is to write a function that, given K and the stream of numbers, returns the Kth smallest number in the stream.\n\nAs it's not very important to you, we will give you all the necessary requirements and some examples.\n\n--Input--\nInput is the stream of numbers in binary format, where each number in the stream is a string of length 64. K is a number in the range [1, 2^64).\n\n--Output--\nThe Kth smallest number in the stream.\n\n--Constraints--\n1 \u2264 K \u2264 2^64\n\n--Examples--\n1)\n>>> solution
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\n\n\"\"\""
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 10\") == \"10\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 4\") == \"3\"\nassert solution(\"1 5\") == \"4\"\nassert solution(\"1 6\") == \"5\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '0'\nassert solution('5\\n-1000 -1000\\n1000 -1000\\n1000 1000\\n-1000 1000\\n0 0') == '1'\n\"\"\""
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nprint(solution('4\\n-20000 0\\n-20000 -1000\\n0 1000\\n1000 1000'))\n"
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '0'\n\"\"\""
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1000 0\\n0 1000\\n1000 1000') == '0'\n\n\"\"\"\n\nimport sys\n\nN = int(input())"
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '0'\n\"\"\"\n\nimport sys\nimport math\n\nn = int(sys.stdin.readline())\nspots = []\nfor i in range(n):\n    x, y = map(int, sys.stdin.readline().split())\n    spots.append((x, y))\n\nspots.sort()\n\ns = set(spots)\nmax_x = math.inf\nmin_x = -math.inf\n\nmax_y = -math.inf\nmin_y = math.inf\n\nfor x, y in spots:\n    if x > max_x:\n        max_x = x\n    if x < min_x:\n        min_x = x\n    if y > max_y:\n        max_y = y\n    if y < min_y:\n        min_y = y\n\nprint(max_x - min_x)\nprint(max_y - min_y)\n"
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '0'\n\"\"\""
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 0\\n1000 0\\n0 1000\\n1000 1000') == 0\n\n\"\"\"\n\nimport sys\n\nnum_of_spots = int(sys.stdin.readline().strip())\nspots = []\n\nfor i in range(num_of_spots):\n    spots.append(list(map(int, sys.stdin.readline().strip().split())))\n\nspots = sorted(spots, key=lambda x: x[0])"
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '0'\n"
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '0'\n\"\"\"\n\n\"\"\"\nN = int(input())\n\narr = [None] * N\n\nfor i in range(N):\n    arr[i] = list(map(int, input().split(' ')))\n\nmin_x = 10000\nmin_y = 10000\nmax_x = -10000\nmax_y = -10000\n\nfor i in range(N):\n    if arr[i][0] < min_x:\n        min_x = arr[i][0]\n    if arr[i][0] > max_x:\n        max_x = arr[i][0]\n    if arr[i][1] < min_y:\n        min_y = arr[i][1]\n    if arr[i][1] > max_y:\n        max_y = arr[i][1]\n\nfor i in range(N):\n    arr[i][0] -= min_x\n    arr[i][1] -= min_y\n\nmin_x = 10000\nmin_y = 10000\nmax_x = -10000\nmax_y = -10000\n\nfor i in range(N):\n    if arr[i][0] < min_x:\n        min_x = arr[i][0]\n    if arr[i][0] > max_x:\n        max_x = arr[i][0]\n    if arr[i][1] < min_y:\n        min_y = arr[i][1]\n    if arr[i][1] > max_y:\n        max_y = arr[i][1]\n\nfor i in range(N):\n    arr[i][0] += min_x\n    arr[i][1] += min_y\n\nmax_rad = 0\n\nfor i in range(N):\n    rad = math.sqrt(arr[i][0] ** 2 + arr[i][1] ** 2)\n    if rad > max_rad:\n        max_rad = rad\n\nrad = max_rad / 2\n\nans = 0\nfor i in range(N):\n    if arr[i][0] ** 2 + arr[i][1] ** 2 <= rad ** 2:\n        ans += 1\n\nprint(ans)\n\"\"\"\n\nimport math\n\nN = int(input())\n\narr = [None] * N\n\nfor i in range(N):\n    arr[i] = list(map(int, input().split(' ')))\n\nmax_x = -10000\nmin_x = 10000\nmax_y = -10000\nmin_y = 10000\n\nfor i in range(N):\n    if arr[i][0] < min_x:\n        min_x = arr[i][0]\n    if arr[i][0] > max_x:\n        max_x = arr[i][0]\n    if arr[i][1] < min_y:\n        min_y = arr[i][1]\n    if arr[i][1] > max_y:\n        max_y = arr[i][1]\n\nmin_x = math.ceil(min_x)\nmin_y = math.ceil(min_y)\nmax_x = math.floor(max_x)\nmax_y = math.floor(max_y)\n\narr_xy = []\n\nfor i in range(min_x, max_x + 1):\n    for j in range(min_y, max_y + 1):\n        arr_xy.append([i, j])\n\nfor i in range(N):\n    arr[i][0] -= min_x\n    arr[i][1] -= min_y\n\narr_rad = []\n\nfor i in range(N):\n    rad = math.sqrt(arr[i][0] ** 2 + arr[i][1] ** 2)\n    arr_rad.append(rad)\n\narr_rad.sort(reverse=True)\n\nans = 0\n\nfor i in range(N):\n    if arr_rad[i] <= arr_rad[ans]:\n        ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('0 0\\n1000 0\\n0 1000') == '0'\n\"\"\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n0 1 0.5\") == \"0.500000000 1.000000000\"\nassert solution(\"2 1\\n0 0.5\") == \"1.2500000000 1.2500000000\"\nassert solution(\"2 1\\n1 1 1\") == \"-1.2500000000\"\nassert solution(\"1 2\\n0 1 0.5\") == \"0.500000000 1.000000000\"\n\n---Problem:\nWe are given a string s consisting of lowercase letters. We will repeat the string 100 times, and for each position we choose a random letter from the original string and replace it with another letter.\n\nLet's consider the substring formed by the 100 copies s[:101]. After replacing these letters, what is the probability that this substring contains at least one occurrence of the word \"the\"?\n\nAs in the previous problem, we'll consider the answer to be -1 if the probability can't be determined.\n\n---Solution:\nIn this problem, the answer can be calculated only with a small amount of effort:\n\n1. As before, we count the total number of \"the\" in the substring and compute the probability of this number.\n2. If this probability is greater than 0.5, then it is enough to check that the substring contains at least one occurrence of \"the\".\n\nIf the probability is less than 0.5, we need to check for each position whether the substring contains \"the\" or not. For each position, we make the same check as in the previous problem.\n\nComplexity:\nO(N) time and space, N is the length of the string\n\n------\n"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n2 1\n0 1 0.5\n''') == '0.500000000 1.000000000'\n\nassert solution('''\n3 3\n0 1 0.1\n1 0 1.1\n0 1 0.5\n''') == '0.500000000 0.454545455 0.454545455'\n\nassert solution('''\n3 3\n0 1 0.5\n1 0 1.5\n0 1 0.5\n''') == '0.500000000 0.454545455 0.454545455'\n\nassert solution('''\n2 1\n0 1 0.1\n0 1 0.5\n''') == '0.500000000 0.454545455'\n\nassert solution('''\n4 4\n0 1 0.1\n0 2 0.2\n0 1 0.5\n0 3 0.2\n1 2 0.3\n2 3 0.1\n''') == '0.500000000 0.454545455 0.454545455 0.454545455'"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1\\n0 1 0.5') == '0.500000000 1.000000000'\n\n-----Note-----\nIt is very important to remember that while testing your solution, you should always use random test input.\n\nThis means that you should call `random.seed(0)` before generating random input and calling `random.seed(0)` before generating random tests.\n\nIn the examples above, this means that the probabilities are the same as shown, no matter which random seed is used.\n'''\n\nimport sys\nimport numpy as np\n\nclass Solution:\n    def __init__(self):\n        self.p = [0]*300\n\n    def read_input(self):\n        pass\n\n    def solve(self):\n        pass\n\n    def write_output(self):\n        pass\n\n    def test(self):\n        pass"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n0 1 0.5\\n') == '0.500000000 1.000000000'\n\n-----Explanation-----\nLuk\u00e1\u0161 climbs a mountain of 2 small cabins (numbered 0 and 1). There is only one piste, and the probability of falling along that piste is 0.5, but due to his lack of skiing skills, he has to walk down the mountain.\n\"\"\"\n\nimport sys\n\nN, M = [int(i) for i in sys.stdin.readline().split()]\npiste = [0] * (N + 1)\nfor i in range(M):\n    a, b, w = [int(j) for j in sys.stdin.readline().split()]\n    piste[a] += w\n    piste[b + 1] -= w\n\ndp = piste[:]\nfor i in range(1, N):\n    for j in range(i):\n        dp[i] = max(dp[i], dp[j] + piste[i])\n\nprint(*dp[1:])\n"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n0 1 0.5\\n\") == \"0.500000000 1.000000000\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n0 1 0.5') == '0.500000000 1.000000000'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n0 1 0.5\\n0 1 0.5\\n1 0 0.5\\n0 1 0.5\") == \"0.5 1 1\"\n\"\"\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n0 1 0.5') == '0.500000000 1.000000000'\n\"\"\"\nimport sys\nfrom itertools import permutations\n\nn, m = map(int, sys.stdin.readline().split())\nlines = [list(map(int, sys.stdin.readline().split())) for _ in range(m)]"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1\\n0 1 0\\n\") == \"0.5 0.5\"\n\"\"\""
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n0 1 0.5\") == \"0.500000000 1.000000000\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1\\n1 5') == '1'\nassert solution('6 1\\n1 5') == '5'\nassert solution('4 1\\n1 10') == '2'\nassert solution('4 1\\n1 10') == '2'\nassert solution('1 10\\n10 10') == '0'\n"
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n6\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10\n''') == '7'\n\n\"\"\"\n\nN = int(stdin.readline())\ncustomers = []\n\nfor _ in range(N):\n    customers.append(list(map(int, stdin.readline().split())))"
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n4 1\\n1 5\\n10 10\\n10 8\\n7 10\") == \"7\"\n\"\"\""
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\\n7 10') == '7'\nassert solution('4\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\\n7 10') == '7'\nassert solution('3\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\\n7 10') == '5'\n'''"
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8') == '7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n1 5\\n1 2\\n2 4\\n2 3\\n3 4\\n4 5\\n\") == \"3\"\nassert solution(\"6 1\\n1 5\\n1 2\\n2 4\\n2 3\\n3 4\\n4 5\\n\") == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 1\\n3 3\") == \"2\"\nassert solution(\"1 2\\n3 3\") == \"1\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n7\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10\n\"\"\") == \"7\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\\n7 10') == '7'\nassert solution('7\\n3 2\\n1 6\\n4 7\\n5 3\\n8 9\\n1 7') == '5'\nassert solution('7\\n1 2\\n5 3\\n8 9\\n5 3\\n2 8\\n7 8\\n1 9') == '3'\n'''\n\n\n\nimport sys\nimport numpy as np\nfrom scipy import optimize\nimport random"
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 1\\n1 2\") == \"1\"\nassert solution(\"3\\n2 1\\n2 2\") == \"2\"\nassert solution(\"3\\n0 1\\n1 2\\n2 1\") == \"2\"\nassert solution(\"3\\n0 1\\n1 1\\n2 0\") == \"1\"\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a b') == 'a'\nassert solution('a b c') == 'b'\nassert solution('a b c d') == 'c'\n"
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n2\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n0\n''') == '''\n9-b\n8-a\n'''\nprint('Test pass.')\n\n-----Explanation-----\nFor example, we may consider the case when the test case has two sequences of pieces:\n - one of them is $aab$ (note that the symbols in this example are ordered differently from the input)\n - the second one is $aba$.\n\nThe cost to assemble the first sequence is $5 + 6 = 11$. The cost to assemble the second one is $6 + 3 = 9$.\n\nSo, for $aba$, the minimum cost is $9$, and the type of the resulting piece is $b$.\n\nTherefore, the output is $9$-$b$.\n'''\n"
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\na ba') == '8-a\\n9-b'\nassert solution('2\\nb b\\n3-a 5-b\\n6-b 2-a\\n2\\naba') == '8-b\\n9-a'\n\"\"\""
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0\") == \"9-b 8-a\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ab\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0\\n') == '8-a\\n9-b\\n'\n"
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ab\\naa\\nb') == '9-b'\n\nassert solution('bb\\nba\\naa\\nb') == '8-a'\n\nassert solution('bb\\nba\\naa\\nb\\nbb\\nab\\nab\\na\\nb\\nab\\nba\\nab\\naa\\nab\\nb\\naa\\nab\\nb\\naa\\nba\\nab\\naa\\nbb\\nbb\\nba\\nab\\nba\\nba\\nab\\nbb\\nab\\naa\\nba\\nab\\nbb\\nbb\\nba\\nab\\nba\\nba\\nab\\nbb\\nab\\nbb\\n') == '9-b'\n\nassert solution('ab\\nb\\nb\\na\\nb\\nbb\\nba\\na\\nb\\nbb\\nab\\nab\\na\\nb\\nbb\\nba\\nab\\nbb\\nbb\\nab\\nbb\\nbb\\nab\\nbb\\nab\\na\\nb\\nbb\\nba\\nab\\nbb\\nbb\\nab\\nbb\\nbb\\nab\\nbb\\nbb\\nab\\nbb\\nab\\na\\nb\\nbb\\nba\\nab\\nbb\\nbb\\nab\\nbb\\nbb\\nab\\nbb\\nbb\\nab\\nbb\\nbb\\nab\\nbb\\n') == '8-a'\n\nassert solution('ab\\naa\\nb\\na\\nb\\nab\\na\\nb\\nab\\na\\nb\\nab\\na\\nb\\nab\\na\\nb\\nab\\na\\nb\\nab\\naa\\nab\\naa\\nba\\nab\\naa\\nab\\nab\\naa\\nab\\nab\\nab\\nab\\nab\\nab\\naa\\nab\\nab\\n') == '9-b'"
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\na\\nb\\n') == '8-a\\n9-b'\nassert solution('3\\nb 5-b\\n6-a 2-b\\n2\\na\\nb\\n') == '8-a\\n9-b'\n"
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\\nbba\") == \"9-b\\n8-a\"\nassert solution(\"aabb\\nbab\") == \"9-b\\n8-a\"\nassert solution(\"aaa\\nbba\") == \"9-b\\n8-a\"\nassert solution(\"aaba\\nbba\") == \"9-b\\n8-a\"\nassert solution(\"baba\\naab\") == \"9-b\\n8-a\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ab 5-a 3-b 3-a 2-a') == '8-a'\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0') == '9-b\\n8-a'\nassert solution('2\\nab\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0') == '8-a\\n8-a'\nassert solution('2\\nab\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbbb\\n0') == '8-a\\n8-b'\nassert solution('2\\nab\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbbb\\n0') == '8-b\\n8-a'\n\n\"\"\""
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\necho\\n1\\necho\") == \"3246R3246\"\nassert solution(\"1\\nap\\n1\\napp\") == \"R3\"\nassert solution(\"1\\napp\\n1\\nap\") == \"R3\"\nassert solution(\"1\\napp\\n1\\nap\\n1\\napp\") == \"R3\"\nassert solution(\"1\\napp\\n1\\nap\\n1\\napp\\n1\\nap\\n1\\nap\\n1\\napp\\n1\\nap\\n1\\nap\\n1\\nap\") == \"R3\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\necho\\n1\\nechoecho') == '3246R3246'\n\nassert solution('3\\nabcd\\n1\\nbcde\\n1\\nabde') == 'D2R2D2R2D2U3'\n\nassert solution('1\\nabc\\n1\\nabcd') == 'D2R2U2'\n\nassert solution('1\\nabcd\\n1\\nabcde') == 'D2R2U2D2U2'\n\nassert solution('1\\nabcde\\n1\\nbcdefg') == 'U3D2R2D2R2D2U3'"
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('echo') == '3246R3246'\nassert solution('echo\\necho') == '3246U2D1R3246'\nassert solution('echo\\necho\\necho') == '3246U2D1R3246'\n\nassert solution('') == ''\n"
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\necho\\n1\\necho\\n\") == \"3246R3246\"\nassert solution(\"1\\nechoechoechoechoechoecho\\n1\\necho\\n1\\nechoechoechoechoechoechoecho\\n
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n\"\n                \"echo\\n\"\n                \"3246R3246\") == \"3246R3246\"\nassert solution(\"3\\n\"\n                \"echo\\n\"\n                \"5678\") == \"1234U3R2\"\nassert solution(\"3\\n\"\n                \"echo\\n\"\n                \"5678\") == \"1234U3R2\"\nassert solution(\"3\\n\"\n                \"echo\\n\"\n                \"5678\") == \"1234U3R2\"\nassert solution(\"3\\n\"\n                \"echo\\n\"\n                \"5678\") == \"1234U3R2\"\n\nIn this case, the input is a dictionary of the most common words of English with the first line being the size of the dictionary (including the space for the digit) and the second line being the actual dictionary of the most common words of English. The third line is a word to type which will always be possible to type using the given dictionary. The fourth line is the word to type which may be possible to type using the given dictionary, but we are unsure if it exists in the dictionary.\n\nThe output is the optimal keypress solution, which is the most efficient way to type the word, given the current dictionary.\n\nThe algorithm used here is the one mentioned in the discussion of the problem. To account for the possibility of wrapping, we have two layers of the array, one for each digit. Each layer has its own size and the digits of the input (0-9) are assigned to these arrays in the order of the input dictionary, with the least common digit first. Then, we start filling the array from the back, going from the right to the left. For each word, we first push the last letter of the word into the array, then go through each character of the word and push the character into the array. Once all the words have been processed, we go through the array from the back, popping characters from the array to fill the word in reverse order.\n\"\"\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\necho\\n1\\nechoecho') == '32R3246'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\necho\\n1\\necho\\n1\") == \"3246R3246\"\nassert solution(\"1\\necho\\n1\\nechoecho\\n
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '222333'\nassert solution('echo') == '3246R3246'\nassert solution('echo echoecho') == '3246R3246'\nassert solution('echo echoechoechoecho') == '3246R3246'\nassert solution('echo echoechoechoechoechoechoecho') == '3246R3246'\n\"\"\"\n\nfrom collections import OrderedDict\nfrom functools import lru_cache\n\nclass Solution:\n    def __init__(self, dict_size, words, queries):\n        self.dict_size = dict_size\n        self.words = words\n        self.queries = queries\n\n    def solution(self):\n        dict_ = self.build_dict()\n        return '\\n'.join(self.solve_query(q, dict_) for q in self.queries)\n\n    @lru_cache(maxsize=None)\n    def solve_query(self, query, dict_):\n        mapping = {'R': 'R', 'U': 'U', 'D': 'D'}\n        result = []\n\n        query = [c for c in query]\n        while query:\n            if query[0] == 'R':\n                query.pop(0)\n                result.append(mapping['R'])\n            elif query[0] == 'U':\n                query.pop(0)\n                for i in range(query.pop(0)):\n                    result.append(mapping['U'])\n            else:\n                query.pop(0)\n                for i in range(query.pop(0)):\n                    result.append(mapping['D'])\n        result = ''.join(result)\n\n        result = dict_[result]\n        return result\n\n    def build_dict(self):\n        result = OrderedDict()\n        for word in self.words:\n            parts = []\n            for i in range(1, len(word)):\n                part = word[:i]\n                if part not in result:\n                    result[part] = len(result) + 1\n                if word not in result:\n                    result[word] = len(result) + 1\n                parts.append(result[part])\n            if parts:\n                parts.append(result[word])\n            result[word] = ''.join(str(x) for x in parts)\n        return result\n"
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1\necho\n1\nechoecho''') == '3246R3246'\nassert solution('''2\nzoo\n2\nzaoaz\n3\nzoo\n3\nzoo\n''') == 'D1DRRU1DRD1DRRU1DRD1DRDRRU1DRD1DRRU1DRD1DRRDRRU1DRD1DRDRRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDR"
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\n\"\"\""
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"YES\\n1 2\\n1 3\"\n\"\"\""
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"YES\\n1 2\\n1 3\"\n\"\"\"\nimport sys\nimport math\n\n\nclass Solution:\n    def __init__(self):\n        self.case = None\n        self.result = None\n        self.max_num = None\n        self.min_num = None\n        self.max_min = None\n\n    def solve(self):\n        n, k = [int(i) for i in self.case.split(' ')]\n        self.max_num = n\n        self.min_num = 1\n        self.max_min = n - 1\n\n        while self.max_num > self.min_num:\n            if (self.max_num // k) % 2 == 0 and (self.max_num // k) >= self.min_num:\n                self.min_num = (self.max_num // k) + 1\n                break\n            if self.max_num % k == 0:\n                self.min_num = self.max_num // k + 1\n                break\n            self.max_num -= 1\n\n        while self.max_num > self.min_num:\n            if (self.max_num // k) % 2!= 0 and (self.max_num // k) >= self.min_num:\n                self.max_num = (self.max_num // k) - 1\n                break\n            if self.max_num % k == 0:\n                self.max_num = self.max_num // k - 1\n                break\n            self.max_num -= 1\n\n        self.result = []\n        for i in range(self.min_num, self.max_num + 1):\n            if i % 2 == 0:\n                self.result.append([i, i + 1])\n        self.result.sort()\n        for i in range(k):\n            self.result.append([self.result[i][1], self.result[i][0]])\n        self.result = '\\n'.join([' '.join([str(i) for i in j]) for j in self.result])\n"
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == 'YES\\n1 2\\n1 3'\nassert solution('4 2') == 'NO'\nassert solution('2 4') == 'NO'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1') == 'YES\\n1 2\\n1 3'\n\n---\n\nSample Input:\n4 1\nSample Output:\nYES\n1 4\n2 3\n1 2\n\n---\n\nSample Input:\n2 2\nSample Output:\nNO\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'YES\\n1 2\\n1 3'\nassert solution('3 1') == 'NO'\nassert solution('1 2') == 'NO'\nassert solution('2 1') == 'YES\\n1 2\\n2 1'\nassert solution('3 3') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"YES\\n1 2\\n1 3\"\n\"\"\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 1\n1 2\n1 3''') == 'YES\\n1 2\\n1 3'"
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == 'YES\\n1 2\\n1 3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1') == 'YES\\n1 2\\n1 3'\n\"\"\"\n\nfrom math import floor\n\nn, k = [int(i) for i in stdin.split(' ')]\n\nd = {}\nfor _ in range(k):\n    m, e = [int(i) for i in stdin.split(' ')]\n    d[(m, e)] = True"
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1') == 'YES\\n1 2\\n1 3'\n"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '1316'\n\n'''"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n333333\") == \"176\"\nprint(solution(\"9\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n333333\"))\n\"\"\"\n\nimport numpy as np\n\nmin_light = int(input())\nceiling_height = int(input())\nclub_length = int(input())\nclub_width = int(input())\n\nclub = np.array(list(input() for _ in range(club_length)))\n\nlight_level = 0\nfor i in range(club_length):\n    for j in range(club_width):\n        light_level += club[i][j]\n\nlight_level = light_level / club_length / club_width\n\nfence_cost = 0\n\nfor i in range(club_length):\n    for j in range(club_width):\n        if abs(club[i][j] - light_level) > light_level * 0.3:\n            if club[i][j] > light_level:\n                if club[i - 1][j] < light_level or club[i][j - 1] < light_level or club[i + 1][j] < light_level or club[i][j + 1] < light_level:\n                    if (i - 1) % 2 == 1:\n                        if (j - 1) % 2 == 1:\n                            fence_cost += 10\n                        else:\n                            fence_cost += 33\n                    else:\n                        if (j - 1) % 2 == 1:\n                            fence_cost += 33\n                        else:\n                            fence_cost += 10\n            else:\n                if club[i - 1][j] > light_level or club[i][j - 1] > light_level or club[i + 1][j] > light_level or club[i][j + 1] > light_level:\n                    if (i - 1) % 2 == 1:\n                        if (j - 1) % 2 == 1:\n                            fence_cost += 10\n                        else:\n                            fence_cost += 33\n                    else:\n                        if (j - 1) % 2 == 1:\n                            fence_cost += 33\n                        else:\n                            fence_cost += 10\n\nprint(fence_cost)\n"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n333333\") == \"176\"\nprint(solution(\"9\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n333333\"))\n"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n'''                             _ooOoo_                                  \n'''                                                                           \n'''                                   _  _  _                                  \n'''                                    _oOoO0O_                                  \n'''                                   O0 / ||_                                  \n'''                                  /  _/| |_                                  \n'''                                  |  | '| |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  | |                                  \n'''                                  |  |  "
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n333333') == '176'\nprint(solution(input()))\n"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n333333\\n\") == \"176\"\n\"\"\"\n\nimport sys\n\nstdin = open('./input.txt', 'r').read()\n\nl, h = [int(i) for i in stdin.split('\\n')[:2]]\nr, c = [int(i) for i in stdin.split('\\n')[2:4]]\n\nlights = [[int(i) for i in stdin.split('\\n')[4 + i * c: 5 + i * c]] for i in range(r)]\n\nfence = 0\n\nfor y, line in enumerate(lights):\n    for x, elem in enumerate(line):\n        if y > 0 and x > 0:\n            fence += min(2 * elem + lights[y - 1][x] + lights[y][x - 1],\n                         2 * elem + lights[y - 1][x - 1] + lights[y][x])\n        elif y > 0:\n            fence += 2 * elem + lights[y - 1][x]\n        elif x > 0:\n            fence += 2 * elem + lights[y][x - 1]\n\nprint(fence * 11)\n"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''9\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n333333''') == '176'\n\n\"\"\""
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n333333\") == \"176\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == '0'\nassert solution('9\\n') == '0'\nassert solution('9\\n1\\n') == '11'\n"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n333333\\n\") == \"176\"\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"12\"\n\nassert solution(\"4\") == \"0123\"\n\nassert solution(\"16\") == \"2120\"\n\nassert solution(\"11\") == \"11010\"\n\nassert solution(\"23\") == \"23000\"\n\n\"\"\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n') == '12'\n\n-----Explanation-----\nThe 3 digits right before the trailing zeroes in $5!$ is $120$.\n\nSample Input:\n12\nSample Output:\n016\n"
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == '120'\nassert solution('12') == '016'\nassert solution('123') == '012'\nassert solution('90') == '09'\nassert solution('1234') == '013'\n"
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12!') == '012'\nassert solution('10!') == '1010'\n\"\"\""
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(12345) == \"531\"\nassert solution(1234) == \"023\"\nassert solution(123) == \"12\"\n\"\"\""
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n') == '12'\nassert solution('1\\n') == '01'\nassert solution('4\\n') == '010'"
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"12\"\nprint(solution(\"5\"))\nassert solution(\"12\") == \"012\"\nprint(solution(\"12\"))\nassert solution(\"100\") == \"900\"\nprint(solution(\"100\"))\nassert solution(\"1\") == \"0\"\nprint(solution(\"1\"))\nassert solution(\"11\") == \"101\"\nprint(solution(\"11\"))\n"
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n') == '12'\n\n\"\"\""
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n') == '12'\n\"\"\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n') == '12'\n\"\"\""
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"((()\") == '?'\nassert solution(\"(((()\")) == '?'\nassert solution(\"()())\") == '?'\nassert solution(\"(()))\") == '?'\nassert solution(\"(()(()))\") == '?'\n"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"((()\") == \"?\"\nassert solution(\"()()(()())\") == \"?\"\nassert solution
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"((()))\") == \"??\"\nassert solution(\"(()))\") == \"??\"\nassert solution(\"(()()))\") == \"??\"\nassert solution(\"(((())\") == \"??\"\nassert solution(\"(()()())\") == \"??\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('((()') == '?'\nassert solution('()((())(()))(())') == '1'\nassert solution('((()())()(()))(())') == '3'\n\"\"\""
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '?'\nassert solution('((()))') == '?'\nassert solution('(()') == -1\nassert solution('(()))') == -1\nassert solution('((())') == 0\n\"\"\"\n\nimport os\nimport sys\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"../../5\"))\nimport input_utils\n\npreviously_encountered = set()"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '?'\nassert solution('()') == 0\nassert solution('((()))') == 0\nassert solution('(()(()))') == 0\nassert solution('(())') == 1\n"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"((()))\") == \"?\"\nassert solution(\"()()())\") == \"?\"\nassert solution(\"(())()\") == \"??\"\nassert solution(\"(()))(\") == \"?\"\nassert solution(\"((())())\") == \"?\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"((()\") == '?'\nassert solution(\"()\") == 0\nassert solution(\"()()\") == 0\nassert solution(\"((()))\") == 0\nassert solution(\"((()))()\") == 0\n"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"((()))\") == \"?\"\n\"\"\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"((()))\") == \"?\"\nassert solution(\"((())())((()))\") == \"?\"\nassert solution(\"((()()))\") == \"?\"\nassert solution(\"(((())()())()())()()\") == \"?\"\nassert solution(\"(()(()))\") == \"?\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\") == \"2 4\\n5 6\\n7 8 9 10 11 12 13\"\nprint('Test pass.')"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"4\\n4\\n4\\n5\\n4\\n4\\n4\\n5\\n4\\n4\\n5\\n4\\n4\\n4\\n4\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n4\\n5\\n5\\n4\\n5\\n4\\n5\\n5\\n4\\n5\\n4\\n5\\n5\\n5\\n4\\n4\\n4\\n5\\n5\\n4\\n5\\n4\\n5\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12''') == '2 4\\n5 6\\n7 8 9 10 11 12 13'\n\n\"\"\"\nfrom itertools import groupby\nfrom math import prod"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\\n\") == \"2 4\\n5 6\\n7 8 9 10 11 12 13\"\n\"\"\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\\n\") == \"2 4\\n5 6\\n7 8 9 10 11 12 13\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12') == '2 4\\n5 6\\n7 8 9 10 11 12 13'\n"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\") == \"2 4\\n5 6\\n7 8 9 10 11 12 13\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n13\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n\"\"\") == \"\"\"\n2 4\n5 6\n7 8 9 10 11 12 13\n\"\"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\") == \"2 4\"\nassert solution(\"13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\") == \"2 4\"\n\"\"\""
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n4\\n5\\n3\\n2\\n2\\n2\\n2\\n4\\n2\\n1\\n2\\n3\\n1\\n4\\n2\\n4\\n1\\n5\\n5\\n4\\n3\\n3\\n3\\n3\\n4\\n3\\n3\\n3\\n3\\n4\\n3\\n4\\n4\\n4\\n4\\n3\\n3\\n3\\n3\\n4\\n3\\n3\\n4\\n2\\n5\\n4\\n3\\n4\\n3\\n4\\n2\\n5\\n5\\n5\\n5\\n3\\n4\\n3\\n4\\n4\\n4\\n4\\n2\\n4\\n2\\n4\\n2\\n5\\n5\\n5\\n5\\n4\\n4\\n4\\n4\\n5\\n5\\n5\\n5\\n4\\n4\\n5\\n4\\n3\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n4\\n4\\n4\\n4\\n2\\n5\\n5\\n5\\n3\\n4\\n4\\n5\\n4\\n3\\n4\\n2\\n5\\n5\\n5\\n5\\n4\\n4\\n4\\n5\\n5\\n5\\n4\\n5\\n5\\n5\\n3\\n5\\n3\\n4\\n3\\n4\\n4\\n4\\n5\\n5\\n3\\n4\\n5\\n4\\n5\\n4\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n4\\n4\\n4\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n4\\n5\\n4\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n4\\n4\\n4\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == '35 39 36 27 29'\n"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"35 39 36 27 29\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\\n\") == \"35 39 36 27 29\"\n\"\"\"\n\nimport sys\n\ninput_data = sys.stdin.readlines()\nn, m = [int(n) for n in input_data.pop(0).strip().split()]\n\ntunnels = []\nfor i in range(m):\n    tunnels.append([int(n) for n in input_data[i].strip().split()])\n\nres = []\nfor i in range(n):\n    res.append(sum(min(tunnels[j][0], tunnels[j][1]) for j in range(m)) // 10**9 + 7)\n\nprint(' '.join(str(n) for n in res))\n"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == '35 39 36 27 29'\n\"\"\"\n\nfrom sys import stdin\nimport math\n\nn, m = map(int, stdin.readline().strip().split())\nmatrix = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(m):\n    a, b, l = map(int, stdin.readline().strip().split())\n    matrix[a - 1][b - 1] = l\n    matrix[b - 1][a - 1] = l\n\ndp = [[0 for _ in range(n)] for _ in range(n)]\ndp[0][0] = matrix[0][0]\n\nfor i in range(1, n):\n    dp[0][i] = dp[0][i - 1] + matrix[0][i]\n    dp[i][0] = dp[i - 1][0] + matrix[i][0]\n\nfor i in range(1, n):\n    for j in range(1, n):\n        dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]\n\nprint(*[dp[n - 1][n - 1] % (10 ** 9 + 7) for _ in range(n)])\n"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2') == '35 39 36 27 29'\nassert solution('5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2') == '35 39 36 27 29'\nassert solution('5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2') == '35 39 36 27 29'\n"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n2 3 7\\n1 2 4\\n1 3 2\") == \"1 2 4 2\\n2 2 3 3\\n3 3 3 2\"\nassert solution(\"4 3\\n2 3 7\\n1 2 4\\n1 3 2\") == \"1 2 4 2\\n2 2 3 3\\n3 3 3 2\"\n\"\"\""
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"35 39 36 27 29\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"35 39 36 27 29\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"35 39 36 27 29\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == '35 39 36 27 29'\n"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n3 2 1\") == \"0 672\"\n\"\"\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n3 2 1') == '0 672'\nassert solution('5 6\\n5 5 4 4 3') == '0 3'\nassert solution('6 6\\n6 5 4 4 3 2') == '0 6'\n\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_a(self):\n        self.assertEqual(solution('3 3\\n3 2 1'), '0 672')\n\n    def test_b(self):\n        self.assertEqual(solution('5 6\\n5 5 4 4 3'), '0 3')\n\n    def test_c(self):\n        self."
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n3 2 1\") == \"0 672\"\nassert solution(\"6 10\\n3 5 1\\n3 3 1\") == \"2 2\"\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n3 2 1') == '0 672'\nassert solution('2 3\\n2 1 3') == '1 496'\nassert solution('1 5\\n3') == '2 1'\n\n\"\"\"\n\nfrom itertools import product\nfrom functools import reduce"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n3 2 1\") == \"0 672\"\n\n-----Problem-----\nBash is so good in painting, that it never forgets about the goal of the painting.\n\nNow he wonders, what is the minimum number of painted cells that Bash has to remember to paint the painting.\n\nPlease help Bash.\n\n------Solution------\nTime complexity: O(N * M)\n\nSolution:\n\nWe can easily count how many ways to paint the picture with blue and red cells with the following logic:\n\nLet $X$ denote the total number of cells that are painted blue in the painting.\nLet $Y_ m$ denote the number of painted cells that are painted red.\nTo paint the picture with blue and red cells, we use exactly one of the following two ways:\n\n- Paint the topmost and bottommost cells blue and red, respectively.\n- Paint the leftmost, rightmost, topmost and bottommost cells blue and red, respectively.\n\nWe can apply the above logic to paint a picture with blue and red cells by starting with an empty picture, which contains only blue cells. In the following we will call such picture with $X = 0$.\n\nThen, for each step, we choose a cell to paint in the following way:\n\n- For each painted cell, we paint it blue.\n- We paint the topmost and bottommost cells red.\n- We paint the leftmost and rightmost cells blue.\n\nSo, if we have painted the picture with blue and red cells, the number of painted cells is $Y_ m = X + M - 1$.\n\nThis can be proved by induction. For $X_0$ painted blue cells and $Y_ 0$ painted red cells, we know that the number of painted cells is $X_0 + Y_ 0 = Y_ 0 + X_ 0$. Then, we can just apply induction to compute $X_1$, $Y_ 1$, $X_ 2$, \u2026.\n\nAnd the answer is $X_ n \\cdot Y_ n - X_ n$.\n\nComplexity\nO(M * N)\n\n'''"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n3 2 1\") == \"0 672\"\n\"\"\""
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n3 2 1\") == '0 672'\nassert solution(\"4 4\\n2 1 2 1\") == '0 24'\nassert solution(\"5 5\\n2 2 3 2 3\") == '0 18'\nassert solution(\"5 5\\n1 1 1 1 1\") == '0 24'\n\"\"\"\n\nimport ast"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n3 2 1\") == \"0 672\"\nassert solution(\"1 1\\n1\") == \"0 1\"\nassert solution(\"7 8\\n1 2 3 4 5 6 7\") == \"2 0\"\nassert solution(\"7 8\\n7 8\") == \"0 0\"\n\"\"\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n3 2 1') == '0 672'\nassert solution('2 2\\n1 1') == '0 7'\nassert solution('1 1\\n1 1') == '0 0'\nassert solution('5 5\\n4 3 2 0') == '0 1234'\nassert solution('8 7\\n3 2 3 1 3 1') == '0 104970'\n"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n3 2 1\") == \"0 672\"\nassert solution(\"4 4\\n1 1 1 1\") == \"2 600\"\nassert solution(\"6 7\\n4 6 1 4 1 4 6\") == \"1 604\"\nassert solution(\"5 5\\n1 2 2 1 1\") == \"0 4\"\nassert solution(\"10 4\\n2 3 1 5 1 2 1 2\") == \"1 7873\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\nassert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"Impossible\"\nassert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\nassert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\nassert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\n\"\"\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500000'\n\"\"\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50''') == '2.500000'\n\nassert solution('''4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n''') == 'Impossible'\n'''\n\n\n'''\nimport sys\n"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\n\"\"\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\n\"\"\"\n\nfrom math import sqrt, inf\n\nN, M, R = map(int, input().split())\n\nstart, end = 0, inf\n\nfor i in range(M):\n    l, l_len, r = map(int, input().split())\n    start = max(start, l-r)\n    end = min(end, l+l_len+r)\n\nsafe_dist = start + (R-1)"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500000'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500000'\n\"\"\""
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n5 3 4''') == '3'\nassert solution('''5\n5 3 4''') == '3'\nassert solution('''5\n5 5 5''') == '1'\nassert solution('''2\n5 3 4''') == '2'\nassert solution('''5\n5 5 5''') == '0'\n\nimport sys\n"
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n5 3 4') == '3'\n\"\"\"\n\nN = int(input())\nstack = list(map(int, input().split()))\nstack.sort()\nstack_max = stack[-1]\nstack_sum = sum(stack)\n\nresult = 0\nwhile stack_sum!= 0:\n    if stack_sum < stack_max:\n        stack.pop()\n        stack_sum -= stack.pop()\n    else:\n        stack.pop()\n        stack_sum -= stack.pop()\n        result += 1\n\nprint(result)\n"
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n5 3 4''') == '3'\n\"\"\""
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5 3 4\") == \"3\"\n\nassert solution(\"5\\n3 5 4\") == \"8\"\n\nassert solution(\"3\\n4 5 6\") == \"6\"\n\nassert solution(\"3\\n4 5 6\\n7 3 4\") == \"9\"\n\nassert solution(\"5\\n3 5 4\\n7 3 4\") == \"13\""
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 4\\n3 4 1 3 2') == '3'\nassert solution('3 3 3\\n2 3 1') == '0'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\nmoves = 0\nfor i in range(len(arr)):\n    if arr[i] % n == 0:\n        continue\n    moves += n - arr[i] % n\nprint(moves)\n\n\n\"\"\"\nSolution 2\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5 3 4') == '3'\nassert solution('5\\n5 3 4') == '4'\nassert solution('6\\n5 4 3 3 2 1') == '5'\nassert solution('3\\n5 3 4') == '3'\n\nSample Input:\n5\n1 4 4 3 2\nSample Output:\n8\n"
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 4\") == \"3\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nstacks = list(map(int, sys.stdin.readline().strip().split(\" \")))\n"
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5 3 4\") == \"3\"\nassert solution(\"5\\n5 3 4\") == \"3\"\nassert solution(\"10\\n20 30 40 50 60\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 4\") == \"3\"\nassert solution(\"5 5 5\") == \"5\"\nassert solution(\"1 1 2\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 3 2\") == \"5\"\n\n-----Notes-----\n\n\"\"\""
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('2') == '2'\nassert solution('2 3 1') == '3'\nassert solution('2 3 3') == '2'\nassert solution('3 2 3') == '3'\n"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == 2\nassert solution(\"4 3 2\") == 1\n\"\"\""
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 1\\n') == 2\n\"\"\"\n\nN, X, Y = map(int, stdin.split())"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1\\n') == 2\n\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1\\n') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 1\\n') == '2'\n\n-----Problem-----\nYou're playing hopscotch! You start at the origin and your goal is to hop to the lattice point $(N, N)$. A hop consists of going from lattice point $(x_1, y_1)$ to $(x_2, y_2)$, where $x_1 < x_2$ and $y_1 < y_2$.\n\nYou dislike making small hops though. You\u2019ve decided that for every hop you make between two lattice points, the x-coordinate must increase by at least $X$ and the y-coordinate must increase by at least $Y$.\n\nCompute the number of distinct paths you can take between $(0, 0)$ and $(N, N)$ that respect the above constraints. Two paths are distinct if there is some lattice point that you visit in one path which you don\u2019t visit in the other.\n\nHint: The output involves arithmetic mod $10^9+7$. Note that with $p$ a prime like $10^9+7$, and $x$ an integer not equal to $0$ mod $p$, then $x(x^{p-2})$ mod $p$ equals $1$ mod $p$."
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1\\n\") == 2\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\") == 2"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('1 2 1') == 1\nassert solution('5 8 16') == 0\nassert solution('5 1 1') == 1\nassert solution('5 1 2') == 2\n"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\") == 2\n\"\"\"\nimport sys\n\nN, X, Y = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 1') == '2'\n\nassert solution('10 6 7') == '4'\n\nassert solution('100 6 7') == '10'\n\nassert solution('10000000 6 7') == '8'\n\n\"\"\""
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(\"sample_input.txt\", \"r\").read()) == open(\"sample_output.txt\", \"r\").read().strip()\nprint(\"Tests passed\")\n\n------\n\nSample Input:\n4\n12 7 5 1\nSample Output:\n20\n"
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 5') == '7'"
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 3 5') == '7'\n\"\"\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 5\") == \"7\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3 5') == '7'\n\n\"\"\""
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1 3 5''') == '7'\nassert solution('''4\n4 1 6 3''') == '3'\nassert solution('''5\n4 1 6 3 2''') == '5'\nassert solution('''1\n5''') == '5'\nassert solution('''2\n1 6''') == '6'\n"
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('11100011100') == '6'\nassert solution('11100011101111100') == '31'\nassert solution('1110001110111110011111111111011011110011011111110011111110011111110111111110111111100111111111111111111') == '115'\n'''\n\n\nfrom typing import List\n"
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 5\") == \"7\"\nprint(solution(\"1 3 5\"))\n\n-----Explanation-----\nGunnar\u2019s file contains the numbers 1, 3 and 5. The subset of numbers 1, 3 and 5 is {1, 3, 5}. The xor-sum of this subset is 7.\n\"\"\"\n\nimport sys\nfrom functools import reduce"
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 3 5') == '7'\nassert solution('3\\n1 2 3') == '4'\nassert solution('3\\n1 2 3\\n1 3 5') == '7'"
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 5\") == \"7\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \"Impossible.\\njetsons\\nrockets\"\nassert solution(\"2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \"Impossible.\\njets\\nrockets\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets') == 'Impossible.'\nassert solution('2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets') == 'john jets\\nruth rockets'\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n\") == 'fred jetsons\\njohn jets\\nruth rockets'\nassert solution(\"3\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n\") == 'Impossible.'\nassert solution(\"4\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n\") == 'Impossible.'\nassert solution(\"2\\n2\\nfred dinosaur 2 jets\\njohn rhinocerous 2 jets\\nruth platypus 1 rockets\\n\") == 'Impossible.'\nassert solution(\"2\\n2\\nfred dinosaur 2 jets\\njohn rhinocerous 2 jets\\nruth platypus 1 rockets\\n\") == 'Impossible.'\n"
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets') == 'impossible'\nassert solution('3\\njohn rhinocerous 2 jets rockets\\nruth platypus 1 rockets') == 'john rhinocerous rockets'\n\"\"\""
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3\\n2\\n1\\n2\\n3\\n1\\n3\\n2\") == 'Impossible.'\nassert solution(\"3\\n3\\n1\\n3\\n1\\n3\\n1\\n1\\n1\") == 'Impossible.'\nassert solution(\"4\\n3\\n2\\n2\\n1\\n2\\n3\\n1\\n2\\n1\") == 'Impossible.'\nassert solution(\"4\\n2\\n2\\n2\\n1\\n2\\n2\\n1\\n2\\n1\") == 'Impossible.'\nassert solution(\"4\\n2\\n1\\n2\\n1\\n2\\n1\\n1\\n1\\n1\") == 'Impossible.'\n"
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n\"\"\") == \"\"\"\nfred jetsons\njohn jets\nruth rockets\n\"\"\"\nassert solution(\"\"\"\n2\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n\"\"\") == \"\"\"\nImpossible.\n\"\"\"\n\nassert solution(\"\"\"\n2\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n\"\"\") == \"\"\"\nfred rhinocerous\njohn rhinocerous\nruth rockets\n\"\"\"\n\nassert solution(\"\"\"\n2\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n\"\"\") == \"\"\"\nImpossible.\n\"\"\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \"fred jetsons\\njohn jets\\nruth rockets\"\nassert solution(\"4\\nfred dinosaur 2 jets\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \"Impossible.\"\nassert solution(\"4\\nfred dinosaur 2 jets\\njohn rhinocerous 2 jets rockets\\njohn rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \"Impossible.\"\nassert solution(\"4\\nfred dinosaur 2 jets\\njohn rhinocerous 2 jets rockets\\njohn rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \"Impossible.\"\nassert solution(\"4\\nfred dinosaur 2 jets\\njohn rhinocerous 2 jets rockets\\njohn rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \"Impossible.\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \\\n    \"Impossible\\n\"\n\nassert solution(\n    \"2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \\\n    \"Impossible\\n\"\n\nassert solution(\n    \"2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \\\n    \"Impossible\\n\"\n\nassert solution(\n    \"2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \\\n    \"Impossible\\n\"\n\nassert solution(\n    \"2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\") == \\\n    \"Impossible\\n\""
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(solution) == expected\n"
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\"\"\") == \"\"\"fred jetsons\njohn jets\nruth rockets\"\"\"\n\nassert solution(\"\"\"4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n3\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\njohn rhinocerous 2 rockets\"\"\") == \"\"\"Impossible.\"\"\"\n\nassert solution(\"\"\"5\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\njames olivia 2 jetsons rockets\nsamuel rhinocerous 2 rockets\nmary rhinocerous 2 rockets\n3\njohn rhinocerous 2 rockets\njames olivia 2 rockets\nsamuel rhinocerous 2 rockets\njames olivia 2 rockets\"\"\") == \"\"\"mary rhinocerous rockets\njames olivia rockets\nImpossible.\"\"\"\n\n-----Problem-----\nSwap the value of the club's head representative from the member in the club.\n\n-----Solution-----\n\"\"\"\n\nimport os\nimport sys\nfrom typing import List"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n4 3\\n-10 9\\n-2 3\\n\") == '1 2 1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4 3\\n-10 9\\n-2 3\") == \"1 2 1\"\n\"\"\""
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4 3\\n-10 9\\n-2 3\") == \"1 2 1\"\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n'''\nimport sys\nfrom collections import Counter, defaultdict\nimport numpy as np"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n') == '1 2 1'\nassert solution('5\\n0 3\\n-1 5\\n-2 1\\n') == '0 2 0 1 0 1 2 2 1'\nassert solution('3\\n4 3\\n-10 9\\n-2 3\\n') == '1 2 1'\nassert solution('2\\n2\\n1 1\\n') == '1 1'\n"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n4 3\\n-10 9\\n-2 3') == '1 2 1'\n"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4 3\\n-10 9\\n-2 3\") == \"1 2 1\"\n\"\"\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n-10 9\\n-2 3\") == \"1 2 1\"\n\n----------------------"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n4 3\\n-10 9\\n-2 3') == '1 2 1'\n\"\"\""
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == '2.125'\nassert solution(\"6\\n5 1 4\\n6 10 10\") == '2.10714'\n\"\"\"\nimport math\nimport sys\nimport random\n"
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == \"2.125\"\nassert solution(\"4\\n5 1 4\\n6 10 10\") == \"1.5\"\n\"\"\"\n"
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == '2.125'\n\n'''"
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10') == '2.125'\nassert solution('5\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10') == '2.11214'\nassert solution('2\\n1 1 7\\n3 2 3') == '2.0'\nassert solution('4\\n1 1 7\\n3 2 3\\n5 1 4') == '2.10714'\n'''"
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == '2.125'\nassert solution(\"4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == '2.125'\n\"\"\""
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == \"2.125\"\nprint(solution(\"5\\n1 1 5\\n2 2 4\\n3 3 6\\n4 4 8\\n5 6 9\"))"
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == '2.125'\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nfrom itertools import accumulate\nfrom random import randrange\nfrom typing import List, Tuple\n\n\nclass Solution:\n    def __init__(self, lines: List[str]):\n        self.hearings = {}\n        self.total = 0\n        for line in lines:\n            start, _, end = line.split()\n            start, end = int(start), int(end)\n            self.hearings[start] = [0, end]\n            self.total += (end - start) // 2\n\n    def expected(self) -> str:\n        return str(self.total / (randrange(100) + 1))\n\n    def simulate(self, current: Tuple[int, int]) -> bool:\n        start, end = current\n        for i in range(start, end):\n            if self.hearings[i][0]:\n                return False\n            self.hearings[i][0] = 1\n        return True\n\n    def solve(self) -> str:\n        self.hearings[1][0] = 1\n        lens = sorted(self.hearings.keys())\n        delta = [x - y for x, y in zip(lens, lens[1:])]\n        delta = list(accumulate(delta, lambda x, y: max(x, y) // 2))\n        delta = [x - y for x, y in zip(delta, delta[1:])]\n        delta.insert(0, 0)\n        lengths = [self.hearings[i][1] for i in lens]\n        lengths.insert(0, 0)\n        lengths = [x - y for x, y in zip(lengths, lengths[1:])]\n        lengths.insert(0, 0)\n        for j in range(1, len(delta)):\n            i = randrange(1, j + 1)\n            while i < j:\n                if self.simulate((lens[i], lens[j])):\n                    i = j\n                i = randrange(1, j + 1)\n        return self.expected()\n"
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == \"2.125\"\n\"\"\"\n\n\n\"\"\"\nSolution Approach:\n\nThis problem can be solved with dynamic programming.\n\nSolution Approach is very similar to the knapsack problem, with a few differences:\n\n1. The items are meetings that are scheduled for a specific time, so the value is the duration of the meeting, rather than the number of meetings.\n\n2. Unlike knapsack, we don't need to sort the meetings, because we can keep track of the meetings in an order that can be used to solve the problem.\n\n3. This problem uses a table that stores the maximum value of a meeting for a given schedule, and a table that stores the minimum value of a meeting for a given schedule.\n\"\"\"\n"
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125'"
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10') == '2.125'\n'''\n"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('*.*') =='main.c\\na.out\\nreadme\\nyacc\\n'\n\"\"\"\n\n\nfrom fnmatch import fnmatchcase"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('*.*') =='main.c\\na.out\\nreadme\\nyacc\\n'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"*.c\") == \"main.c\\na.out\\nreadme\"\nassert solution(\"*.py\") == \"main.py\\nfoo.py\\nbar.py\"\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('*.*') =='main.c\\na.out\\nreadme\\nyacc\\n'\nassert solution('*.c') =='main.c\\na.out\\nreadme\\nyacc\\n'\nassert solution('*.*') =='main.c\\na.out\\nreadme\\nyacc\\n'\nassert solution('.*') =='main.c\\na.out\\nreadme\\nyacc\\n'\nassert solution('.c') =='main.c\\na.out\\nreadme\\nyacc\\n'\n\n\"\"\"\n\nimport sys\nimport re\n\npattern = sys.stdin.readline().rstrip()"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\", \"readme\", \"yacc\"]\nassert solution(\"*.c\") == [\"main.c\", \"a.out\"]\nassert solution(\"*.h\") == [\"main.h\", \"header.h\", \"a.out\", \"readme\"]\n\"\"\"\nimport re\n\nclass Solution:\n    def solve(self, stdin):\n        \n        pattern = re.compile(\"[.]*\")\n        matches = pattern.finditer(stdin)\n\n        for match in matches:\n            print(match[0])"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('*.*') =='main.c\\na.out\\nreadme\\nyacc'\nassert solution('*.c') =='main.c\\nyacc'\nassert solution('*.*') =='main.c\\na.out\\nreadme\\nyacc'\nassert solution('*.py') == 'a.out\\nreadme\\nyacc'\nassert solution('*.c') =='main.c\\nyacc'\n"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('*.*') =='main.c\\na.out\\nreadme\\nyacc'\nassert solution('*.c') =='main.c\\na.out\\nyacc'\nassert solution('*.py') =='main.py\\n'\nassert solution('*.c *.py') =='main.c\\na.out\\nreadme\\nyacc\\nmain.py\\n'\n"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('*.*') =='main.c\\na.out\\nreadme\\nyacc'\n\"\"\"\n"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('*.c') == ['main.c', 'a.out','readme']\nassert solution('*.*') == ['main.c', 'a.out','readme']\nassert solution('*.c') == ['main.c', 'a.out','readme']\nassert solution('*.*') == ['main.c', 'a.out','readme']\nassert solution('*') == ['main.c', 'a.out']\n"
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"*.c\") == \"main.c\\na.out\"\n\"\"\""
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n0.500000') == '0.500000'\nassert solution('2 3\\n0.2 1\\n0.4 0') == '0.4'\nassert solution('3 3\\n0.25 0.5 1\\n0.2 0.8 1\\n0.4 0') == '0.5'\nassert solution('5 10\\n0.1 0.2 0.3 0.4 0.5 1\\n0.3 0.4 0.5 0.6 0.7 1\\n0.2 0.4 0.6 0.8 0.9 1\\n0.1 0.3 0.5 0.7 0.9 1\\n0.2 0.3 0.5 0.7 0.9 1') == '0.3075'\nassert solution('10 20\\n0.1 0.2 0.3 0.4 0.5 1\\n0.3 0.4 0.5 0.6 0.7 1\\n0.2 0.4 0.6 0.8 0.9 1\\n0.1 0.3 0.5 0.7 0.9 1\\n0.2 0.3 0.5 0.7 0.9 1\\n0.1 0.3 0.5 0.7 0.9 1\\n0.2 0.3 0.5 0.7 0.9 1\\n0.1 0.3 0.5 0.7 0.9 1\\n0.2 0.3 0.5 0.7 0.9 1') == '0.6914'\n"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0 1\\n0.500000') == '0.500000'\nassert solution('0.5 1\\n0.500000') == '0.50000'\nassert solution('1 1\\n0.500000') == '0.500000'\nassert solution('1 1\\n0.492300') == '0.4923'\n"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 1\n0.500000''') == '0.500000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n0.500000') == '0.500000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n0.500000\") == \"0.500000\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0.5\\n0.5\\n\") == \"0.5\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n0.500000') == '0.500000'\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(50000)"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '0.500000'\nassert solution('1\\n0.500000') == '0.500000'\nassert solution('2\\n0.3') == '0.285714'\nassert solution('3\\n0.5') == '0.561429'\n"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n0.500000\") == \"0.500000\"\nassert solution(\"1 1\\n0.5\") == \"0.5\"\nassert solution(\"1 1\\n0.33333\") == \"0.33333\"\nassert solution(\"1 1\\n0.25\") == \"0.25\"\nassert solution(\"1 1\\n0.166667\") == \"0.166667\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n0.500000') == '0.500000'\n\nSample Input:\n10 10\n0.1\n0.1\n0.1\n0.1\n0.1\n0.1\n0.1\n0.1\n0.1\n0.1\n0.1\nSample Output:\n0.1\n\"\"\"\n"
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 49.9\") == \"0.0\"\n\"\"\""
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 49.9\") == \"0.0\"\n\"\"\"\n"
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 49.9\") == \"0.0\"\nassert solution(\"75 50.2\") == \"50.2\"\nassert solution(\"0 49.9\") == \"0.0\"\nassert solution(\"1 49.9\") == \"0.0\"\nassert solution(\"1 0.5\") == \"0.0\"\n\"\"\"\n\nx, p = [float(i) for i in input().split()]"
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 49.9\") == '0.0'\n\"\"\"\n\nimport re\nfrom collections import Counter\n"
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('0 0.5') == ''\nassert solution('0 49.9') == '0.0'\nassert solution('20 49.9') == '0.0'\nassert solution('0 49.99') == '0.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('0 20.0') == '0.0'\nassert solution('0 51.0') == '0.0'\nassert solution('0 49.9') == '0.0'\nassert solution('0 49.9') == '0.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 49.9') == '0.0'\n\"\"\""
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 49.9') == '0.0'\n\"\"\""
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '0 49.9'\n) == '0.0'\nassert solution(\n    '0 9.9'\n) == '0.0'\nassert solution(\n    '0 49.0'\n) == '0.0'\nassert solution(\n    '0 49.1'\n) == '0.0'\nassert solution(\n    '0 49.2'\n) == '0.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 49.9') == '0.0'\n'''\n"
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"4 1\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n4 7\") == \"4 7\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 6\") == \"7 6\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 1\") == \"1 7\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 1\\n1 6\\n2 5\\n3 4\") == \"1 6\""
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"4 1\\n2 1\\n3 2\\n1 3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"4 1\\n2 1\\n3 2\\n1 3\"\nassert solution(\"5\\n1 2\\n2 3\\n3 1\\n4 1\\n5 1\") == \"5 1\\n1 3\\n4 1\\n2 1\\n3 2\"\nassert solution(\"2\\n1 2\") == \"1 2\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\\n\") == \"4 1\\n2 1\\n3 2\\n1 3\"\n"
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\") == '4 1\\n2 1\\n3 2\\n1 3'\n\"\"\""
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n1 2\n2 3\n3 1\n4 1''') == '''4 1\n2 1\n3 2\n1 3'''\n\nassert solution('''5\n1 2\n2 3\n3 1\n4 1\n4 2''') == '''4 2\n3 1\n1 4\n2 4\n3 2'''\n\nassert solution('''4\n1 3\n2 4\n3 2\n4 2''') == '''3 2\n1 4\n2 3\n4 1'''\n\nassert solution('''4\n2 3\n3 1\n1 4\n4 1''') == '''1 3\n4 2\n2 3\n3 1'''\n\nassert solution('''5\n1 3\n2 4\n3 2\n4 2\n5 1''') == '''5 1\n2 3\n3 4\n4 2\n1 5'''"
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\\n\") == \"4 1\\n2 1\\n3 2\\n1 3\\n\"\nassert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\\n\") == \"4 1\\n2 1\\n3 2\\n1 3\\n\"\nassert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\\n\") == \"4 1\\n2 1\\n3 2\\n1 3\\n\"\n"
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n1 2\n2 3\n3 1\n4 1''') == \"4 1\\n2 1\\n3 2\\n1 3\\n\"\nassert solution('''4\n1 2\n2 3\n3 1\n4 1''') == \"4 1\\n2 1\\n3 2\\n1 3\\n\"\nassert solution('''4\n1 3\n2 3\n3 1\n4 1''') == \"4 1\\n1 3\\n2 3\\n1 2\\n\""
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"4 1\\n2 1\\n3 2\\n1 3\"\n\n\"\"\""
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n1 2\n2 3\n3 1\n4 1''') == '''4 1\n2 1\n3 2\n1 3'''\n\nassert solution('''5\n2 3\n3 4\n4 5\n1 2\n1 3\n1 4\n1 5''') == '''1 2\n1 4\n1 5\n3 2\n3 4\n4 5'''\n"
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 6 3 5 3\\n1 2 5 3 5\") == \"1\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5') == '1'\n\"\"\"\n\n\"\"\"\n\u041d\u0430 \u0443\u0434\u0438\u0432\u043b\u0435\u043d\u0438\u0435, \u044d\u0442\u043e \u0432\u0441\u0435 \u043f\u0440\u043e\u0441\u0442\u043e. \u041f\u0440\u043e\u0441\u0442\u043e \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043c\u0435\u043d\u044c\u0448\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043d\u0435\u0441\u0447\u0430\u0441\u0442\u043d\u043e\u0439 \u043f\u043e\u043f\u044b\u0442\u043a\u0438 \u0438 \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 0.\n\u0421\u0430\u043c\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u043e\u043b\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0441\u0442\u0438.\n\u0418\u0441\u0445\u043e\u0434\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043d\u0435\u0439. \u0414\u0430\u043b\u044c\u0448\u0435 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043d\u0435\u0441\u0447\u0430\u0441\u0442\u043d\u043e\u0439 \u043f\u043e\u043f\u044b\u0442\u043a\u0438.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0438\u0434\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0430, \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u0430\u044f \u0432\u0441\u0435\u043c\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438, \u0447\u0442\u043e \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u0441\u0447\u0430\u0441\u0442\u043d\u043e\u0439 \u043f\u043e\u043f\u044b\u0442\u043a\u043e\u0439.\n\u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0447\u0430\u0441\u0442\u0438\u0446\u0435 \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c.\n\u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0441\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0438\u043b\u0438 \u043d\u0435\u0442.\n\u0415\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u0430\u044f, \u0442\u043e \u043c\u044b \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0435\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0447\u0430\u0441\u0442\u0438\u0446\u0435, \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u044f\u0445 \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\u0438.\n\u0415\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u043d\u0435 \u0441\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u0430\u044f, \u0442\u043e \u043c\u044b \u0438\u0434\u0435\u043c \u0434\u0430\u043b\u044c\u0448\u0435 \u043f\u043e \u0441\u0442\u0440\u043e\u043a\u0435, \u0438 \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.\n\u0414\u0430\u043b\u0435\u0435 \u043c\u044b \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435. \u0415\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0431\u0443\u0434\u0435\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u0442\u043e\u0439, \u0447\u0442\u043e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0430\u044f, \u0442\u043e \u043c\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0441 0.\n\u0415\u0441\u043b\u0438 \u0436\u0435 \u0434\u043b\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0431\u043e\u043b\u044c\u0448\u0435, \u0442\u043e \u043c\u044b \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0435\u0435 \u0432\u0441\u0435 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0431\u0443\u043a\u0432 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043d\u043e\u0432\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438.\n\u0414\u0430\u043b\u0435\u0435 \u043c\u044b \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0431\u0443\u043a\u0432 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 "
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n2 1 6 3 5 3\") == \"1\"\n\"\"\"\n\nfrom typing import List, Tuple, Union"
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 6 3 5 3\\n1 2 5 3 5\") == \"1\""
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n2 1 6 3 5\\n1 2 5 3 5\") == \"1\"\n"
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5\\n2 1 6 3 5 3\\n1 2 5 3 5\") == '1'\nassert solution(\"1 1\\n1\") == 'forever'\nassert solution(\"3 3\\n1 1 1\") == 'forever'\nassert solution(\"2 5\\n2 2\") == '1'\nassert solution(\"8 9\\n1 2 3 4 5 6 7 8 9\") == 'forever'\n"
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n2 1 6 3 5 3\") == '1'\n\"\"\"\n\nm, k = [int(x) for x in stdin.split()]\nb = [int(x) for x in stdin.split()]\nb.sort()\n\nn = sum(b[:k])\nfor i in range(k + 1, m):\n    n += b[i] - b[i - k - 1]\nprint(n - b[k] * k)\n"
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 6 3 5 3\") == \"1\"\nassert solution(\"1 2 5 3 5\") == \"forever\"\nassert solution(\"1 2 5 3 5 6\") == \"forever\""
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n2 1 6 3 5 3\") == '1'\n\"\"\"\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 3 5 6\") == \"forever\"\nassert solution(\"5 4 6 4 6\") == \"forever\"\n\"\"\"\n\nimport os\nimport sys\nimport math\n\nDEBUG = True"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6') == '3'\n"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 10\\n0 1 1 2 6\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 1 10\n0 1 1 2 6''') == '3'\n\"\"\"\n\nfrom typing import List, Dict, Tuple\nfrom collections import deque, defaultdict\nfrom queue import PriorityQueue\n\nclass Graph:\n    def __init__(self) -> None:\n        self.graph = defaultdict(list)\n\n    def add_edge(self, u: int, v: int, w: int) -> None:\n        self.graph[u].append((v, w))\n    \n    def bfs(self, s: int) -> Tuple[List[int], Dict[int, List[Tuple[int, int]]]]:\n        dist = [float('inf') for i in range(len(self.graph))]\n        dist[s] = 0\n        prev = [None for _ in range(len(self.graph))]\n        visited = [False for _ in range(len(self.graph))]\n        q = deque()\n        q.append(s)\n        visited[s] = True\n        while len(q)!= 0:\n            u = q.popleft()\n            for v, w in self.graph[u]:\n                if not visited[v] and dist[u] + w < dist[v]:\n                    dist[v] = dist[u] + w\n                    prev[v] = u\n                    q.append(v)\n                    visited[v] = True\n        return dist, prev\n    \n    def shortest_path(self, s: int, e: int) -> Tuple[int, int, List[Tuple[int, int]]]:\n        dist, prev = self.bfs(s)\n        path = []\n        v = e\n        while v is not None:\n            path.append((v, dist[v]))\n            v = prev[v]\n        return dist[e], len(path) - 1, path\n    \n    def dijkstra(self, s: int) -> Tuple[List[int], List[Tuple[int, int]]]:\n        dist = [float('inf') for i in range(len(self.graph))]\n        prev = [None for _ in range(len(self.graph))]\n        q = PriorityQueue()\n        q.put((0, s))\n        dist[s] = 0\n        while not q.empty():\n            _, u = q.get()\n            for v, w in self.graph[u]:\n                if dist[v] > dist[u] + w:\n                    dist[v] = dist[u] + w\n                    q.put((dist[v], v))\n                    prev[v] = u\n        return dist, prev"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 10\\n0 1 1 2 6\") == \"3\"\n\"\"\"\n\nfrom typing import List\n\nstdin = \"\"\"2 1 10\n0 1 1 2 6\"\"\""
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 10\") == \"3\"\n\"\"\""
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 10\\n0 1 1 2 6\") == \"3\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6\\n') == '3'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\n\nn, m, s = map(int, input[0].split())\n\ntrains = [tuple(map(int, line.split())) for line in input[1:m + 1]]\n\ndist = [float('inf') for _ in range(n)]\n\nfor t0, p, d in trains:\n    dist[t0] = min(dist[t0], p)\n\nnow = min(s, dist[0])\n\nfor t1, p, d in trains:\n    for i in range(now, d + 1, p):\n        dist[t1] = min(dist[t1], i)"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 5\") == \"impossible\"\nassert solution(\"3 4 3\") == \"impossible\"\nassert solution(\"4 5 10\") == \"3\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"4 6 10\") == \"5\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 10\\n0 1 1 2 6\") == \"3\"\nassert solution(\"2 1 10\\n0 2 1 2 6\") == \"impossible\"\nassert solution(\"2 1 10\\n0 1 1 2 5\") == \"impossible\"\nassert solution(\"2 1 10\\n0 1 1 2 7\") == \"impossible\"\nassert solution(\"2 1 10\\n0 1 1 2 9\") == \"impossible\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 1 10\n0 1 1 2 6''') == '3'\nprint(solution(stdin))\n\n-----Notes-----\n\n'''\n"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 100\n99 1\n1 99''') == '2\\n1 2'\nassert solution('''3 100\n6 100\n2 100\n100 1\n100 1\n100 1\n100 1''') == '1\\n2 3'\nassert solution('''1 100\n100 1\n100 1\n100 1\n100 1''') == '1\\n'\n'''\nfrom itertools import combinations"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 100\\n99 1\\n1 99\") == \"2\\n1 2\"\n\"\"\""
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(example1) == '2'\nassert solution(example2) == '1'\n\"\"\""
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 100\\n99 1\\n1 99\\n\") == '2\\n1 2'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 100\\n99 1\\n1 99\\n') == '2\\n1 2'\n"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 100\\n99 1\\n1 99\") == \"2\\n1 2\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 100\\n99 1\\n1 99\") == \"2\\n1 2\"\n\"\"\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2 100\n99 1\n1 99\n\"\"\") == \"2\\n1 2\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2 100\n99 1\n1 99\n''') == '2\\n1 2'\n\"\"\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"H\", \"T\", 0.5) == 0.5\n\"\"\""
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('H' * 10 ** 10 + 'T' * 10 ** 10) == '0.5'\nassert solution('H' * 10 ** 9 + 'T' * 10 ** 9) == '0.5'\nassert solution('H' * 10 ** 9 + 'T' * 10 ** 9 + 'H' * 10 ** 5 + 'T' * 10 ** 5) == '0.5'\nassert solution('H' * 10 ** 6 + 'T' * 10 ** 6 + 'H' * 10 ** 4 + 'T' * 10 ** 4) == '0.5'\nassert solution('H' * 10 ** 5 + 'T' * 10 ** 5 + 'H' * 10 ** 3 + 'T' * 10 ** 3) == '0.5'\n"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"HTHTH\") == \"0.6666666666666666\"\nassert solution(\"HHTTH\") == \"0.6666666666666666\"\nassert solution(\"HHHTTH\") == \"0.6666666666666666\"\nassert solution(\"HTHHTH\") == \"1.0\"\nassert solution(\"THHTTH\") == \"0.6666666666666666\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('H') == 'H'\nassert solution('TH') == 'T'\nassert solution('HHT') == 'T'\nassert solution('TTH') == 'H'\n"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('H', 'T', 0.5) == '0.5'\n\nassert solution('H', 'T', 0.1) == '0.1'\n\nassert solution('H', 'T', 0.01) == '0.01'\n\nassert solution('H', 'T', 0.00) == '0.0'\n\nassert solution('H', 'T', 0.001) == '0.0'"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('HTHHTHT') == '0.2'\nassert solution('TTTTTH') == '0.2'\nassert solution('HHTTHHTH') == '0.8'\nassert solution('HHTHHTHTH') == '0.8'\nassert solution('HHTHHTHHH') == '0.8'\n\n\"\"\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"HTH\") == \"0.25\"\nassert solution(\"THT\") == \"0.75\"\nassert solution(\"TTH\") == \"0.5\"\nassert solution(\"HTHH\") == \"0.0\"\nassert solution(\"HTHHTH\") == \"0.5\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('H', 'T', 0.5) == '0.5'\nassert solution('H', 'TT', 0.5) == '0.0'\nassert solution('TT', 'T', 0.5) == '0.0'\nassert solution('HH', 'HH', 0.5) == '0.5'\nassert solution('HHT', 'HHT', 0.5) == '0.5'\n"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"H\", \"T\", 0.5) == 0.5\n\"\"\"\n\nfrom math import e\n\na = input()\nb = input()\np = float(input())\n\ncnt_a = 0\ncnt_b = 0\ncnt = 0\n\nwhile True:\n    cnt += 1\n    if cnt > 1000000000:\n        break\n    flip = random.random()\n    if flip <= p:\n        cnt_a += 1\n    else:\n        cnt_b += 1\n    if a in stdin and b in stdin:\n        break\n\nprint(cnt_a / (cnt_a + cnt_b))\n"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"H\", \"T\", 0.5) == 0.5\n\"\"\"\n\n\"\"\"\n\u0412 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0432\u0441\u0435\u043c \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u0430\u043d\u043d\u044b\u0439 \u0448\u043e\u043a\u043e\u043b\u0430\u0434\u043d\u044b\u0439 \u0431\u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0431\u0443\u043c\u0430\u0436\u043d\u044b\u0435 \u043f\u043e\u0434\u0430\u0440\u043a\u0438 \u0438\u0437 \u043f\u0440\u043e\u0434\u0430\u0436. \n\u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u0431\u043e\u0433\u0430\u0442\u044b\u0445 \u0431\u043e\u0442\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0431\u0438\u0440\u0430\u044e\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0448\u043e\u043a\u043e\u043b\u0430\u0434\u043d\u044b\u0435 \u043f\u043e\u0434\u0430\u0440\u043a\u0438, \u0438 \u043e\u0434\u0438\u043d \u0431\u0430\u0440\u0434\u0430\u043a \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u0441\u0435. \n\u041d\u0430 \u0432\u0441\u044f\u043a\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0438\u0433\u0440\u044b, \u0432\u0432\u0435\u0434\u044f \u043f\u0435\u0440\u0435\u0434 \u0438\u0433\u0440\u043e\u043a\u043e\u043c \u043f\u0430\u0440\u043e\u0441\u0438\u043c \u0432\u0432\u0435\u0441\u0442\u0438 \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \n\u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u0434\u043e\u0441\u0442\u0430\u0442\u044c.\n\n\u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432 \u0438\u043b\u0438 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \n\u0432\u044b\u0434\u0430\u0451\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043d\u043e\u0432\u0430.\n\n\u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432, \u043d\u043e \u0438\u0437 \u043d\u0438\u0445 \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432, \u0442\u043e \u0432\u044b\u0434\u0430\u0451\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \n\u043e \u0442\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u044b\u0445 \u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432 \u0438 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043d\u043e\u0432\u0430.\n\n\u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432, \u0442\u043e \u043e\u043d \u0438\u0441\u0447\u0435\u0440\u043f\u0430\u043b \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043f\u043e\u0434\u0430\u0440\u043a\u0438 \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \n\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u0441\u0447\u0435\u0440\u043f\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432.\n\n\u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u043d\u043e\u043b\u044c \u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432, \u043e\u043d \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442 \u0438\u0433\u0440\u0443 \u0438 \u0432\u044b\u0434\u0430\u0451\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u0441\u0447\u0435\u0440\u043f\u0430\u043d\u043d\u044b\u0445 \n\u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432.\n\n\u0421\u043a\u0430\u0436\u0435\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432, \u043e\u0434\u043d\u0430\u043a\u043e \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0448\u043e\u043a\u043e\u043b\u0430\u0434\u043d\u044b\u0445 \u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432 \n\u0440\u0430\u0432\u043d\u043e\u0439 \u043d\u0443\u043b\u044e, \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u044c \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0430\u0440\u043a\u0430, \u0438 \u0442\u0430\u043a\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c \u043e\u0442\u0432\u0435\u0442\u043e\u043c \u043f\u0440\u043e\u0448\u043b\u0430 \u0438\u0433\u0440\u0430 \u0438 \u043d\u0435 \u043f\u043e\u0431\u0435\u0434\u0438\u043b. \n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432 \u0440\u0430\u0432\u043d\u043e\u0435 5, \u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u043e\u043a\u043e\u043b\u0430\u0434\u043d\u044b\u0445 \u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432 \u0440\u0430\u0432\u043d\u043e \n0, \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442 \u0438\u0433\u0440\u0443 \u0438 \u043d\u0435 \u0434\u043e\u0441\u0442\u0430\u0451\u0442"
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '8\\n1 3 5 7 9 11 13 15'\n"
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"8\"\n\"\"\""
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"8\\n1 3 5 7 9 11 13 15\"\n\"\"\""
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '8'\nassert solution('4') == '14'"
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"8\"\n\"\"\""
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2\n''') == '0'\nassert solution('''\n3\n''') == '3'\nassert solution('''\n2\n''') == '0'\nassert solution('''\n1\n''') == '1'\nassert solution('''\n6\n''') == '16'\n"
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '8'\nassert solution('4') == '16'\n\"\"\""
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == 8\nassert solution(5) == 21\n\"\"\""
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '8'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open('input.txt', 'r').read()) == open('output.txt', 'r').read()\n"
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '3\\n1\\n0\\n'\n\"\"\""
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3\\n2\\n2\\n5\\n1\\n5\\n') == '1'\nassert solution('4\\n3\\n2\\n2\\n5\\n1\\n5\\n') == '3'\nassert solution('4\\n3\\n2\\n2\\n5\\n1\\n5\\n') == '0'\n\n\"\"\""
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\") == \"3\\n1\\n0\"\n\"\"\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\\n') == '3\\n1\\n0'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\\n') == '3\\n1\\n0\\n'\n"
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5') == '3\\n1\\n0'\n\n\"\"\"\nimport functools\n"
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\") == \"3\\n1\\n0\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5') == '3\\n1\\n0'\nprint(solution(stdin))\n"
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5') == '3\\n1\\n0'\n\"\"\"\n\nimport sys\nfrom collections import deque\n\n_K = int(input())\n_sequence = [int(x) for x in input().split()]\n_Q = int(input())\n_queries = [[int(x) for x in input().split()] for _ in range(_Q)]\n\n_xor_sequence = []\n\nfor i in range(0, _K + 1):\n    _xor_sequence.append(_sequence[i] if i == 0 else _sequence[i] ^ _sequence[i - 1])\n\n_deque = deque()\n_solution = []\n\nfor _ in range(_Q):\n    _deque.append(_queries[_][1])\n    _deque.append(_queries[_][0])\n    _solution.append(_xor_sequence[_deque[0]])\n    while len(_deque) > 1 and _deque[0] <= _deque[1]:\n        _deque.popleft()\n    while len(_deque) > 1 and _deque[1] <= _deque[0]:\n        _deque.popleft()\n\nsys.stdout.write('\\n'.join(_solution))\n"
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5') == '3\\n1\\n0'\nassert solution('2\\n1 3\\n1 3\\n1 2') == '0\\n2'\n"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n1 1 -2 0') == '0'\n\"\"\"\n\nw, n = [int(i) for i in input().split()]\nd = {}\nfor i in range(n):\n    x1, y1, x2, y2 = [int(i) for i in input().split()]\n    if x1 == x2:\n        if y1 > y2:\n            x1, y1, x2, y2 = x2, y2, x1, y1\n    elif y1 == y2:\n        if x1 > x2:\n            x1, y1, x2, y2 = x2, y2, x1, y1\n    elif (x1 * y2 - x2 * y1) == 0:\n        continue\n    elif (x1 * y2 - x2 * y1) < 0:\n        x1, y1, x2, y2 = x2, y2, x1, y1\n    key = str((x1, y1, x2, y2))\n    if key not in d:\n        d[key] = 0\n    d[key] += 1\n\nmax_count = max([v for v in d.values()])\nprint(max_count)\n"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n2 1\n1 1 -2 0\n''') == '0'\n\nassert solution('''\n4 2\n1 1 0 1 0\n0 1 0 0 1\n0 0 1 0 1\n0 0 0 1 1\n''') == '1'\n\nassert solution('''\n4 2\n-1 1 0 1 0\n0 1 0 0 1\n0 0 1 0 1\n0 0 0 1 1\n''') == '2'\n\nassert solution('''\n4 2\n0 0 1 0 1\n0 -1 0 0 1\n0 0 1 0 1\n0 0 0 1 1\n''') == '1'\n\nassert solution('''\n4 2\n0 -1 1 0 1\n0 0 1 0 1\n0 0 0 1 1\n0 0 0 1 1\n''') == '2'"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open('./input.txt').read()) == '1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 1\n1 1 -2 0\n''') == '0'\nassert solution('''2 1\n1 1 0 0\n''') == '1'\nassert solution('''2 1\n1 1 -2 -2\n''') == '1'\nassert solution('''2 1\n1 1 -1 0\n''') == '2'\nassert solution('''2 1\n1 1 0 0\n''') == '1'\n"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('4 1\\n1 1 -2 0\\n') == '1'\nassert solution('4 2\\n1 1 -2 0\\n') == '0'\nassert solution('4 2\\n1 1 0 -2 0\\n') == '1'\nassert solution('4 2\\n1 1 0 2 0\\n') == '1'\n"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n1 1 -2 0') == '0'\n\n-----Solution-----\n\"\"\"\n\nimport math\nimport sys\n\na = input()\n\nw, n = [int(x) for x in a.split(' ')]"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 2\n0 0 1 1\n0 0 1 0\n1 1 0 0\n1 0 1 1\n0 1 0 1\n1 1 0 1\n1 1 1 0\n1 1 1 1\n0 1 1 1\n0 0 1 1\n0 1 1 0\n0 0 1 1\n0 1 1 1\n0 0 1 1\n0 1 0 1\n0 0 1 1\n0 1 1 0\n0 1 1 1\n0 1 1 1\n0 1 1 1\n0 1 1 1\n0 1 1 1\n1 0 1 1\n1 0 1 1\n0 0 1 1\n0 1 1 1\n1 0 1 1\n0 1 0 1\n0 1 1 1\n0 0 1 1\n0 1 1 1\n1 1 1 1\n1 1 1 1\n1 0 1 1\n1 1 1 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n0 0 1 1\n1 1 1 1\n1 1 1 1\n0 1 1 1\n0 0 1 1\n0 1 1 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 1 1 1\n1 1 1 1\n0 1 1 1\n1 0 1 1\n0 0 1 1\n0 1 1 1\n0 0 1 1\n0 1 1 1\n1 1 1 1\n1 1 1 1\n1 0 1 1\n0 0 1 1\n0 0 1 1\n0 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n0 1 1 1\n1 0 1 1\n0 0 1 1\n1 1 1 1\n0 0 1 1\n0 0 1 1\n0 1 1 1\n1 1 1 1\n1 1 1 1\n1 0 1 1\n1 1 1 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n1 0 1 1\n1 0 1 1\n1 1 1 1\n1 1 1 1\n0 1 1 1\n0 1 1 1\n1 0 1 1\n0 1 1 1\n1 0 1 1\n0 0 1 1\n0 1 1 1\n0 0 1 1\n0 1 1 1\n0 0 1 1\n0 0 1 1\n1 1 1 1\n1 0 1 1\n1 1 1 1\n1 0 1 1\n0 0 1 1\n0 1 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n1 1 1 1\n0 0 1 1\n0 0 1 1\n0 1 1 1\n1 0 1 1\n1 0 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n1 0 1 1\n1 0 1 1\n1 1 1 1\n1 0 1 1\n0 0 1 1\n0 0 1 1\n1 1 1 1\n0 0 1 1\n0 0 1 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n0 1 1 1\n1 0 1 1\n0 1 1 1\n1 0 1 1\n1 0 1 1\n0 0 1 1\n0 1 1 1\n1 0 1 1\n0 0 1 1\n0 0 1 1\n1 0 1 1\n0 0 1 1\n0 0 1 1\n1 0 1 1\n1 1 1 1\n0 0 1 1\n1 0 1 1\n0 0 1 1\n0 0 1 1\n1 1 1 1\n1 1 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n0 1 1 1\n1 0 1 1\n1 1 1 1\n0 0 1 1\n1 0 1 1\n1 1 1 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n0 0 1 1\n0 1 1 1\n0 1 1 1\n0 1 1 1\n1 1 1 1\n0 1 1 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n1 1 1 1\n0 0 1 1\n1 1 1 1\n1 1 1 1\n0 0 1 1\n0 0 1 1\n0 1 1 1\n1 0 1 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n1 0 1 1\n0 1 1 1\n1 0 1 1\n1 0 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n1 0 1 1\n1 0 1 1\n1 0 1 1\n1 0 1 1\n1 0 1 1\n1 0 1 1\n1 1 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 1 1\n1 1 1 1\n0 0 1 1\n1 0 1 1\n0 0 1 1\n1 0 1 1\n0 0 1 1\n0 0 1 1\n0 1 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n1 0 1 1\n1 0 1 1\n0 1 1 1\n1 1 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n1 1 1 1\n0 0 1 1\n1 1 1 1\n1 0 1 1\n0 0 1 1\n0 1 1 1\n0 1 1 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 1 1\n0 0 1 1\n0 0 1 1\n0 1 1 1\n1 0 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n1 0 1 1\n0 0 1 1\n0 1 1 1\n1 0 1 1\n0 0 1 1\n1 0 1 1\n0 1 1 1\n1 0 1 1\n0 0 1 1\n0 0 1 1\n0 1 1 1\n0 0 1 1\n0 0 1 1\n1 1 1 1\n1 1 1 1\n1 0 1 1\n1 0 1 1\n1 0 1 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n0 0 1 1\n1 0 1 1\n0 1 1 1\n0 1 1 1\n0 0 1 1\n1 0 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n1 0 1 1\n0 0 1 1\n1 0 1 1\n0 0 1 1\n1 0 1 1\n0 0 1 1\n0 0 1 1\n1 0 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n1 0 1 1\n1 0 1 1\n0 1 1 1\n1 0 1 1\n1 0 1 1\n1 0 1 1\n0 0 1 1\n1 0 1 1\n1 0 1 1\n1 0 1 1\n0 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 1 1\n1 0 1 1\n1 0 1 1\n1 0 1 1\n1 0 1 1\n0 0 1 1\n0 0 1 1\n0 0 1 1\n1 0 1 1\n1 0 1 1\n1 0 1 1\n0 0 1"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n1 1 -2 0') == '0'\n"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 1 -2 0\") == \"0\"\nassert solution(\"2 1\\n2 2 0 -3\") == \"0\"\nassert solution(\"2 1\\n2 2 3 0\") == \"0\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n1 1 -2 0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\\n2019 10 18\") == \"194\"\nassert solution(\"2\\n2019 10 19\") == \"194\"\nassert solution(\"5\\n2019 10 16\\n2020 10 02\") == \"194\"\nassert solution(\"2\\n2019 10 16\\n2020 10 02\") == \"193\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23') == '194'\n\nassert solution('2\\n1\\n2019 10 18\\n1 2020 02') == '0'\n\nassert solution('3\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23') == '316'\n\nassert solution('2\\n1\\n2019 10 18\\n2 2020 02') == '10'\n\nassert solution('2\\n2\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23') == '170'"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23\\n\") == \"194\"\nassert solution(\"2\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23\\n\") == \"194\"\nassert solution(\"2\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23\\n\") == \"194\"\n\n\"\"\"\nimport datetime\nimport itertools\nimport math\n"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23\") == \"194\\n2019 10 25\\n2020 10 30\"\n\"\"\""
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n2\\n') == ''\nassert solution('1\\n2\\n1\\n') == '1\\n1\\n2\\n'\n"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23\") == \"194\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23') == '194'\nassert solution('2\\n5\\n2019 10 10\\n2019 10 10\\n2020 10 10\\n2020 10 10') == '1000'\n\"\"\""
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('3\\n4\\n6\\n4\\n7') == '12'\nassert solution('3\\n4\\n6\\n6\\n7') == '15'\nassert solution('3\\n4\\n6\\n6\\n7') == '16'\nassert solution('3\\n4\\n6\\n6\\n7') == '18'\n"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(int(input()))) == solution(int(input()))\nprint(solution(int(input())))\n"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23') == '194\\n2019 10 25\\n2020 10 30'\n\"\"\""
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a\\nbc\\nd') == 'a\\nbc\\nd'\n'''"
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 10 10 10 10 0\") == \"negative-infinity 0\"\nassert solution(\"5 10 10 5 10 0\") == \"5 12.5\"\nassert solution(\"6 10 10 10 10 0\") == \"negative-infinity -5\"\n\"\"\""
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10 10 10 10 0\\n5 10 10 5 10 0\") == \"negative-infinity 0\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 10 10 10 0\\n5 10 10 5 10 0\\n6 10 10 10 10 0\") == 'negative-infinity 0\\n5 12.5\\nnegative-infinity -5'\n\n\"\"\"\n\n\"\"\"\nSolution:\n1. Separate the input into the coordinates of the four mirrors.\n2. Find the largest x-coordinate of the mirrors.\n3. Compute the y-coordinate of the line passing through the mirrors.\n4. Intersect the y-coordinate of the line passing through the mirrors with the y-coordinate of the line from the other end of the mirrors to your position.\n\"\"\""
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == '''negative-infinity 0\n5 12.5\nnegative-infinity -5'''\nprint('Test pass.')\n\n-----Solution-----\n1. Try to find the equation for the line that separates the two mirrors.\n2. If the equation does not exist, the mirrors are parallel or vertical, so we must calculate the intersection of the line from the laser to the center of the mirrors and the line from the laser to the wall.\n3. If the intersection is not on the laser line, then the mirrors are parallel and we can ignore the intersection.\n4. If the intersection is on the laser line, then we can find the two coordinates that are on the laser line by solving the equation\ny = mx + b\nm = (x1-x0)(y2-y0) - (y1-y0)(x2-x0)\nb = (x1-x0)*y2 - (y1-y0)*x2\n5. Repeat this for other two mirrors\n6. If no intersection points were found, the mirrors are parallel and we need to find the intersection of the laser line and the wall.\n7. If no intersection points were found, the mirrors are parallel and we can ignore the intersection.\n8. If the intersection is on the laser line, then we can find the two coordinates that are on the laser line by solving the equation\ny = mx + b\nm = (x1-x0)(y2-y0) - (y1-y0)(x2-x0)\nb = (x1-x0)*y2 - (y1-y0)*x2\n9. Repeat this for other two mirrors\n10. If no intersection points were found, the mirrors are parallel and we need to find the intersection of the laser line and the wall.\n11. If no intersection points were found, the mirrors are parallel and we can ignore the intersection.\n12. If the intersection is on the laser line, then we can find the two coordinates that are on the laser line by solving the equation\ny = mx + b\nm = (x1-x0)(y2-y0) - (y1-y0)(x2-x0)\nb = (x1-x0)*y2 - (y1-y0)*x2\n13. Repeat this for other two mirrors\n14. If no intersection points were found, the mirrors are parallel and we need to find the intersection of the laser line and the wall.\n15. If no intersection points were found, the mirrors are parallel and we can ignore the intersection.\n16. If the intersection is on the laser line, then we can find the two coordinates that are on the laser line by solving the equation\ny = mx + b\nm = (x1-x0)(y2-y0) - (y1-y0)(x2-x0)\nb = (x1-x0)*y2 - (y1-y0)*x2\n17. Repeat this for other two mirrors\n18. If no intersection points were found, the mirrors are parallel and we need to find the intersection of the laser line and the wall.\n19. If no intersection points were found, the mirrors are parallel and we can ignore the intersection.\n20. If the intersection is on the laser line, then we can find the two coordinates that are on the laser line by solving the equation\ny = mx + b\nm = (x1-x0)(y2-y0) - (y1-y0)(x2-x0)\nb = (x1-x0)*y2 - (y1-y0)*x2\n21. Repeat this for other two mirrors\n22. If no intersection points were found, the mirrors are parallel and we need to find the intersection of the laser line and the wall.\n23. If no intersection points were found, the mirrors are parallel and we can ignore the intersection.\n24. If the intersection is on the laser line, then we can find the two coordinates that are on the laser line by solving the equation\ny = mx + b\nm = (x1-x0)(y2-y0) - (y1-y0)(x2-x0)\nb = (x1-x0)*y2 - (y1-y0)*x2\n25. Repeat this for other two mirrors\n26. If no intersection points were found, the mirrors are parallel and we need to find the intersection of the laser line and the wall.\n27. If no intersection points were found, the mirrors are parallel and we can ignore the intersection.\n28. If the intersection is on the laser line, then we can find the two coordinates that are on the laser line by solving the equation\ny = mx + b\nm = (x1-x0)(y2-y0) - (y1-y0)(x2-x0)\nb = (x1-x0)*y2 - (y1-y0)*x2\n29. Repeat this for other two mirrors\n30. If no intersection points were found, the mirrors are parallel and we need to find the intersection of the laser line and the wall.\n31. If no intersection points were found, the mirrors are parallel and we can ignore the intersection.\n32. If the intersection is on the laser line, then we can find the two coordinates that are on the laser line by solving the equation\ny = mx + b\nm = (x1-x0)(y2-y0) - (y1-y0)(x2-x0)\nb = (x1-x0)*y2 - (y1-y0)*x2\n33. Repeat this for other two mirrors\n34. If no intersection points were found, the mirrors are parallel and we need to find the intersection of the laser line and the wall.\n35. If no intersection points were found, the mirrors are parallel and we can ignore the intersection.\n36. If the intersection is on the laser line, then we can find the two coordinates that are on the laser line by solving the equation\ny = mx + b\nm = (x1-x0)(y2-y0) - (y1-y0)(x2-x0)\nb = (x1-x0)*y2 - (y1-y0)*x2\n37. Repeat this for other two mirrors\n38. If no intersection points were found, the mirrors are parallel and we need to find the intersection of the laser line and the wall.\n39. If no intersection points were found, the mirrors are parallel and we can ignore the intersection.\n40. If the intersection is on the laser line, then we can find the two coordinates that are on the laser line by solving the equation\ny"
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0''') == '''negative-infinity 0\n5 12.5\nnegative-infinity -5'''\n\nprint('Success')\n\n------\nfrom math import gcd"
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 10 10 10 0\\n5 10 10 5 10 0\\n6 10 10 10 10 0\") == \"0\\n12.5\\n-5\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1 1 0\\n2 1 1 1 1 0\\n3 1 1 1 1 0\\n4 1 1 1 1 0\\n5 1 1 1 1 0\\n6 1 1 1 1 0\") == \"negative-infinity -5\\n2 12.5\\nnegative-infinity -5\\nnegative-infinity -5\"\nassert solution(\"2 2 2 2 2 0\\n1 1 1 1 1 0\\n3 1 1 1 1 0\\n4 1 1 1 1 0\\n5 1 1 1 1 0\\n6 1 1 1 1 0\") == \"negative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\"\nassert solution(\"0 1 1 1 1 0\\n1 1 1 1 1 0\\n2 1 1 1 1 0\\n3 1 1 1 1 0\\n4 1 1 1 1 0\\n5 1 1 1 1 0\\n6 1 1 1 1 0\") == \"negative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\"\nassert solution(\"0 2 1 1 1 0\\n1 1 1 1 1 0\\n2 1 1 1 1 0\\n3 1 1 1 1 0\\n4 1 1 1 1 0\\n5 1 1 1 1 0\\n6 1 1 1 1 0\") == \"negative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\"\nassert solution(\"0 0 1 1 1 0\\n1 1 1 1 1 0\\n2 1 1 1 1 0\\n3 1 1 1 1 0\\n4 1 1 1 1 0\\n5 1 1 1 1 0\\n6 1 1 1 1 0\") == \"negative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 10 10 10 0\\n5 10 10 5 10 0\") == \"negative-infinity 0\\n5 12.5\\nnegative-infinity -5\"\n\"\"\""
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 10 10 10 0\") == \"negative-infinity 0\"\nassert solution(\"5 10 10 5 10 0\") == \"12.5\"\nassert solution(\"6 10 10 10 10 0\") == \"negative-infinity -5\"\n\nimport math"
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000\") == \"2\"\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\"\"\""
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(read_input()) == write_output()\n\"\"\""
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 30000 200 20000 300 10000 400 0 50 10000 75 20000 400 -40000\") == \"2\"\nassert solution(\"4 4\\n100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000\") == \"2\"\n\"\"\"\n\nimport sys\nimport unittest\nfrom collections import deque, defaultdict\n\n\"\"\"\nTODO: \n\n[x] Need to find a way to return 0 if the itinerary is impossible\n[x] Find the best order of itinerary\n[x] What if the points are arranged in a way that the best order is impossible?\n[ ] Find the minimum number of type of routes to cover the full itinerary?\n[ ] Think of a solution that can be used for \"many\" point sets\n\nIf we sort the points by increasing distance, the algorithm will be able to find the best order with the least amount of calls to the dispatcher.\n\nAfter ordering the points by increasing distance, the algorithm will greedily \"scan\" points on a given transport type (itinerary). After scanning the first point, the algorithm will first perform the first step of an itinerary (switch to a new transport type), and then the second step (switch to a new transport type), until the algorithm has seen all the points.\n\nAn edge case of this algorithm is that when the algorithm is scanning the last point, the distance between the point and the first point of the next itinerary might be too far, so we will have to call the dispatcher to complete the current itinerary, and then complete the next one.\n\"\"\"\n\n\nclass Solution:\n    def minTransportation(self, stdin: str):\n        print(\"Hello!\")\n        line = stdin.split(\"\\n\")[0]\n        num_modes = int(line.split(\" \")[0])\n        num_points = int(line.split(\" \")[1])\n        points = []\n        # (start, end, distance, heading)\n        for i in range(num_points):\n            points.append([int(j) for j in stdin.split(\"\\n\")[i + 1].split(\" \")])\n\n        # Sort points by distance, then by heading\n        points = sorted(points, key=lambda point: (point[1], point[3]))\n\n        # TODO: Make a way to return 0 if the itinerary is impossible\n\n        # The order of the itinerary is saved as a list of tuples: (transport, start, end)\n        itinerary = []\n\n        # Create a graph, where each edge is a unique transport, each point is a node, and each node has an edge to every other node\n        # TODO: Make this a more efficient graph structure (such as a binary search tree)\n        graph = defaultdict(list)\n        for i in range(num_points):\n            start, end, distance, heading = points[i]\n            for j in range(num_points):\n                if i!= j:\n                    if start == points[j][1]:\n                        graph[i].append((end, j, distance, heading))\n                    elif end == points[j][0]:\n                        graph[i].append((start, j, distance, heading))\n\n        # The distance traveled on a given transport (from start to end) is stored in the graph.\n        # We use this list to find the cheapest way to complete the itinerary\n        distance_traveled = [float(\"inf\")] * num_points\n\n        # TODO: Find the minimum number of times we have to call for a new type of transport to complete the itinerary\n        # If we have travelled less than the minimum distance, then we know we can't complete the itinerary.\n        for transport in graph:\n            itinerary.append(transport)\n            distance_traveled[transport] = 0\n            for start, end, distance, heading in graph[transport]:\n                distance_traveled[end] = min(distance_traveled[end], distance_traveled[transport] + distance)\n                distance_traveled[transport] = float(\"inf\")\n\n            # Find the points we want to switch to a new transport\n            transport_to_change = 0\n            while len(itinerary) < num_points:\n                for start, end, distance, heading in graph[transport_to_change]:\n                    if distance_traveled[start] + distance_traveled[end] + distance <= distance_traveled[transport_to_change]:\n                        distance_traveled[end] = distance_traveled[start] + distance_traveled[end]\n                        itinerary.append(end)\n                        itinerary.append(transport_to_change)\n                        distance_traveled[transport_to_change] = distance_traveled[start] + distance_traveled[end] + distance\n\n                transport_to_change += 1\n\n        return len(itinerary)\n"
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000\") == \"2\"\nassert solution(\"1 20000\\n1 -40000\\n2 20000\\n1 20000\\n2 -40000\") == \"IMPOSSIBLE\"\nassert solution(\"100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000\\n1 20000\\n1 -40000\\n2 20000\\n1 20000\\n2 -40000\") == \"2\"\nassert solution(\"1 20000\\n1 -40000\\n2 20000\\n1 20000\\n2 -40000\") == \"IMPOSSIBLE\"\nassert solution(\"1 20000\\n1 -40000\\n2 20000\\n1 20000\\n2 -40000\\n1 -40000\\n2 20000\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000\") == \"2\"\n\n-----Explanation-----\n - If we drive from point 1, we switch to the rickshaw.\n - If we drive from point 2, we switch to the car.\n - If we drive from point 3, we switch to the car.\n - If we drive from point 4, we switch to the rickshaw.\n\nSince we switch from the car to the rickshaw and then back to the car, we only need to switch once.\n\"\"\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000''') == '2'\n\nassert solution('''3 3\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000''') == 'IMPOSSIBLE'\n\nassert solution('''4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000''') == '2'\n\nassert solution('''4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000''') == '2'\n\nassert solution('''4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000''') == '2'"
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000') == '2'"
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n4\\n100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nn, m = [int(n) for n in stdin.readline().split()]"
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\\nrotS 2 1\\nnegR 2\"\n\"\"\""
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2\\nrotS 2 1\\nnegR 2'"
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\"\nprint(solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\"))\n"
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\\nrotS 2 1\\nnegR 2\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n\nNote:\nIf you copy the input from the stdin to stdout, it is preferable to use the \"with\" statement. The reason is that the \"with\" statement is more exception-safe, it will close the file automatically in the end of the block.\n\n'''"
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == '345 2\\nrotS 2 1\\nnegR 2'\n\nfrom random import randint\n"
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"345 2\\nrotS 2 1\\nnegR 2\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\\nrotS 2 1\\nnegR 2\""
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\"\nassert solution(\"2 5\\n-9 -7 0\\n1 -3 3\\n\") == \"12 10 1\"\nassert solution(\"3 3\\n1 -2 5 100\\n0 0 0\\n\") == \"345 2\"\nassert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\"\nassert solution(\"2 3\\n1 -2 5 100\\n0 0 0\\n\") == \"12 10 1\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100''') == '345 2\\nrotS 2 1\\nnegR 2'\n\nassert solution('''3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n-5 -8 2 1''') == '312 1\\nnegR 1\\nrotS 1 2\\nnegR 1\\nrotR 1 2\\nnegS 1'\n\nassert solution('''3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n0 10 5 0''') == '345 3\\nnegR 1\\nrotS 1 2\\nnegR 1\\nrotR 1 2\\nrotS 1 2\\nnegR 1'\n\nassert solution('''3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n0 10 5 -6''') == '346 2\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotR 2 1\\nnegR 1'\n\nassert solution('''3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n-1 9 -8 0''') == '347 4\\nnegR 2\\nnegR 2\\nnegS 2\\nnegS 1\\nrotR 1 2\\nnegR 1\\nnegR 2\\nnegS 1\\nnegS 1\\nrotS 1 2\\nnegR 1'"
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n3 1 1\") == \"0.5\"\n\"\"\""
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\nassert solution('1 1\\n2 2') == '0.5'\n\nassert solution('2 2\\n1 2 5\\n0.1') == '0.05'\n\nassert solution('3 2\\n1 1 2\\n0.1') == '0.15'\n\nassert solution('3 2\\n1 1 2\\n0.1\\n1 1 5') == '0.15'"
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 3 6 9\\n0') == '0.0'\n\"\"\"\n\nimport sys\n\n\"\"\"\n1\n3 2\n1 3 6 9\n0\n\"\"\"\n\"\"\"\n10^5\n1 10^6\n0\n\"\"\"\n"
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n3 1 1') == '0.5'\n\"\"\""
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n3 1 1') == '0.5'\nassert solution('4 2\\n3 1 1 2') == '1.0'\nassert solution('4 3\\n1 1 1 2 2') == '1.0'\nassert solution('4 3\\n1 1 1 3') == '0.0'\nassert solution('3 1\\n1 1 1') == '0.0'\n"
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n3 1 1\") == \"0.5\"\n\"\"\"\n\nfrom math import gcd\nfrom functools import reduce\nfrom fractions import Fraction"
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n3 1 1') == '0.5'\n\"\"\"\n\n\"\"\"\n7.\nGiven an array of integers and a positive integer n. Find all the unique subsets of given array with length exactly n.\n\n-----Input-----\nThe first line of input will contain T denoting the number of test cases. For each test case first line will contain an integer N denoting the size of array and second line will contain N space separated elements of array. (1<=T<=100, 1<=N<=10, 1<=A_i<=1000)\n\n-----Output-----\nPrint the subsets of array of length n in different lines. Subsets should be printed in the order they appear in the array. Every line will have 'n' space-separated integers. If no subset of array of length n is possible print \"-1\" (without quotes).\n\n-----Example-----\nInput:\n2\n4\n1 2 3 4\n4\n2 4 6 8\nOutput:\n1 2 3 4\n1 2 4 6\n\n-----Example-----\nInput:\n1\n4\n1 2 3 4\nOutput:\n1 2 3 4\n\"\"\"\n\n\"\"\"\n8.\nGiven an array of integers, return the sum of all the positive integers in the array.\n\n-----Input-----\nThe first and the only line of input contains an integer N denoting the size of the array. The next line contains N space separated integers denoting the elements of the array. (1<=N<=100, 1<=A_i<=1000)\n\n-----Output-----\nPrint the sum of all positive integers present in the array.\n\n-----Example-----\nInput:\n5\n1 2 3 -4 5\nOutput:\n9\n\n-----Example-----\nInput:\n4\n1 2 3 4\nOutput:\n0\n\n-----Example-----\nInput:\n2\n10 10\n1 1 1 1 1 1 1 1 1 1\nOutput:\n31\n\"\"\"\n\n\"\"\"\n9.\nGiven an array of integers and a positive integer k. Find the number of (i,j) pairs where i<j and ar[i] + ar[j] is divisible by k.\n\n-----Input-----\nThe first and the only line of input contains two integers n and k. (1<=n<=100, 1<=k<=1000)\n\n-----Output-----\nPrint the number of (i,j) pairs where i<j and ar[i] + ar[j] is divisible by k.\n\n-----Example-----\nInput:\n5 3\n1 2 3 4 5\nOutput:\n4\n\n-----Example-----\nInput:\n10 2\n1 2 3 4 5 6 7 8 9 10\nOutput:\n6\n\"\"\"\n\n\"\"\"\n10.\nGiven an array of integers and a positive integer k. Find the number of subarrays having product less than k.\n\n-----Input-----\nThe first and the only line of input contains an integer T denoting the number of test cases. The next T lines contain 2 space separated integers n and k. (1<=T<=100, 1<=n<=100, 1<=k<=1000)\n\n-----Output-----\nPrint the number of subarrays with product less than k.\n\n-----Example-----\nInput:\n3\n3 2\n2 5\n4 3\nOutput:\n4\n1\n1\n\"\"\"\n\n\"\"\"\n11.\nYou are given a string s, you need to print all palindromic substrings of it.\n\n-----Input-----\nThe first and the only line of input contains a string s. (1<=|s|<=1000)\n\n-----Output-----\nPrint all palindromic substrings of string s. Substring should be printed in the order they appear in the string. \nPrint one substring per line.\n\n-----Example-----\nInput:\naba\nOutput:\na\nb\na\n\n-----Example-----\nInput:\nabc\nOutput:\na\nb\nc\nab\nbc\nac\nabc\n\n-----Example-----\nInput:\naaa\nOutput:\na\na\na\na\na\na\naa\naa\naaa\naaaa\n\"\"\"\n\n\"\"\"\n12.\nYou are given a string s. Print all possible palindromes that can be made by removing exactly one character from the string.\n\n-----Input-----\nThe first and the only line of input contains a string s. (1<=|s|<=1000)\n\n-----Output-----\nPrint all possible palindromes that can be made by removing exactly one character from the string. \nPrint one palindrome per line.\n\n-----Example-----\nInput:\nabcbaba\nOutput:\na\na\nb\nb\nb\nc\nc\nb\nbb\nbb\nc\n\n-----Example-----\nInput:\naaba\nOutput:\na\na\na\nb\nb\na\n\n-----Example-----\nInput:\nd\nOutput:\nd\n\n-----Example-----\nInput:\nabbbabbb\nOutput:\nabbb\n\"\"\"\n\n\"\"\"\n13.\nGiven two strings, find the longest common subsequence (LCS).\n\n-----Input-----\nThe first and the only line of input contains two space separated strings. (1<=|s|<=1000)\n\n-----Output-----\nPrint the longest common subsequence of the two strings.\n\n-----Example-----\nInput:\nAGGTAB\nGXTXAYB\nOutput:\nGTAB\n\n-----Example-----\nInput:\nABCDGH\nAEDFHR\nOutput:\nADH\n\n-----Example-----\nInput:\nAGGTAB\nGXTXAYB\nOutput:\nGTAB\n\n-----Example-----\nInput:\nAGGTAB\nGXTXAYB\nOutput:\nGTAB\n\"\"\"\n\n\"\"\"\n14.\nGiven a string, find the length of the longest substring which has no repeating characters.\n\n-----Input-----\nThe first and the only line of input contains a string s. (1<=|s|<=10000)\n\n-----Output-----\nPrint the length of the longest substring with no repeating characters.\n\n-----Example-----\nInput:\nabcbde\nOutput:\n5\n\n-----Example-----\nInput:\naab\nOutput:\n2\n\"\"\"\n\n\"\"\"\n15.\nGiven a string, print all permutations of that string in lexicographic sorted order.\n\n-----Input-----\nThe first and the only line of input contains a string s. (1<=|s|<=1000)\n\n-----Output-----\nPrint all permutations of the string in lexicographic sorted order. \nPrint one permutation per line.\n\n-----Example-----\nInput:\naab\nOutput:\naab\naba\nbaa\n"
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n3 1 1') == '0.5'\nassert solution('5 5\\n3 2 5 9 9\\n4 0 6 1 3') == '0.3'\n"
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n3 1 1\\n\") == \"0.5\"\n"
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n3 1 1\") == \"0.5\"\n\n-----Test Case-----\n\"\"\"\n\nn, m = map(int, stdin.readline().strip().split())\nk = [int(i) for i in stdin.readline().strip().split()]\nE = [float(i) for i in stdin.readline().strip().split()]\nE.sort()\nmin_ = float(\"inf\")\nfor i in range(n):\n    temp = 0\n    for j in range(m):\n        temp += abs(k[i] / E[j] - (i - E[j]) ** 2)\n    if temp < min_:\n        min_ = temp\nprint(min_)\n"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n\"\"\") == \"\"\"1 4 5\n2 6 7\n\"\"\"\nassert solution(\"\"\"6 7\n2 3\n3 5\n1 4\n1 2\n1 5\n2 5\n5 4\n\"\"\") == \"\"\"1 4 5\n2 6 7\n\"\"\"\nassert solution(\"\"\"8 9\n4 5\n2 3\n3 1\n4 6\n1 3\n4 7\n4 8\n1 2\n1 5\n2 7\n5 6\n\"\"\") == \"\"\"1 4 5\n2 6 7\n\"\"\"\n\n\"\"\"\nIn this problem we will try to assign the cities to two collections.\n\nWe know that cities are connected to each other by roads.\nLet's define the city graph as a dictionary, where each key is a city, and the corresponding value is a set of its neighbours.\n\"\"\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n4\\n1 2\\n2 3\\n4 3') == '1 3'\nassert solution('2\\n1\\n1 2\\n2 3') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9''') == '1 4 5\\n2 6 7'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n3\") == \"impossible\"\nassert solution(\"1\\n2\\n1\\n2\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n3\\n2\\n2\\n3\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n3\\n2\\n3\\n\") == \"1 4 5\\n2 6 7\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n\"\"\") == \"\"\"\n1 4 5\n2 6 7\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\") == \"1 4 5\\n2 6 7\\n\"\n\"\"\"\nfrom collections import defaultdict, deque\nfrom functools import partial\nfrom itertools import permutations, combinations\nfrom typing import List, Callable, Iterator, Set, Tuple, Deque\n"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n3 2\\n2 3\\n1 3\") == '3 2'\nassert solution(\"4 2\\n1 2\\n2 3\\n1 3\") == '1 3'\nassert solution(\"3 2\\n1 2\\n2 3\") == '1 3'\nassert solution(\"4 3\\n1 2\\n2 3\\n1 3\") == '2 3'\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == '1 2 3 4'\n"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9\") == \"1 4 5\\n2 6 7\"\n\"\"\""
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\n11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9') == '1 4 5\\n2 6 7'\n\n------Problem link------\nhttps://www.codewars.com/kata/58632934d6fba21b3d000034/train/python\n\"\"\""
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9\\n\") == \"1 4 5\\n2 6 7\"\n\"\"\""
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000\") == \"13500\"\n\"\"\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('3 1') == '2'\nassert solution('3 1\\n2 3') == '2'\nassert solution('3 2\\n1 2\\n3 1') == '3'\n"
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000\\n\") == \"13500\"\nprint(\"Passed!\")\n"
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000') == '13500'\n\nassert solution('12 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000') == '13500'\n\nassert solution('2 1\\n12\\n18\\n6\\n5\\n9\\n8\\n7\\n4\\n3\\n2\\n1') == '9'\n\nassert solution('5 2\\n9\\n7\\n4\\n1\\n5\\n3\\n2\\n6') == '9'\n\nassert solution('3 1\\n1\\n2\\n3') == '1'"
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 2\\\\n12000\\\\n9000\\\\n4500\\\\n10000\\\\n12000\\\\n11000\\\\n12000\\\\n18000\\\\n10000\\\\n9000\\\\n12000\") == \"13500\"\n\"\"\""
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000') == '13500'\nassert solution('5 2\\n12000\\n10000\\n10000\\n10000\\n10000') == '13500'\n\n\"\"\"\n\nfrom heapq import heappush, heappop\nfrom typing import List\n"
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000\\n\") == \"13500\"\n\n\"\"\"\n\nimport os\nimport sys\nfrom math import inf"
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000''') == '13500'\n\"\"\"\n\nfrom typing import List, Union"
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000') == '13500'\nassert solution('11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000') == '13500'\nassert solution('11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000') == '13500'\nassert solution('11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000') == '13500'\nassert solution('11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000') == '13500'\n\n-----\n"
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000\\n\") == \"13500\"\nassert solution(\"11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000\\n\") == \"13500\"\n"
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\n2 2 2 2 2 2 2 2 2 4 4 4 4\") == \"Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\"\n\"\"\""
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\n2 2 2 2 2 2 2 2 2 4 4 4 4') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n\nassert solution('2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4\\n2 2 2 2 2 2 2 2 2 4 4 4 4') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n\nassert solution('2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4\\n2 2 2 2 2 2 2 2 2 4 4 4 4') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n\nassert solution('2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4\\n2 2 2 2 2 2 2 2 2 4 4 4 4') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n\nassert solution('2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4\\n2 2 2 2 2 2 2 2 2 4 4 4 4') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'"
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\n1 2 2 2 2 2 2 2 2 4 4 4 4') == \"\"\"Hot cross buns! = Hot cross buns! =\n____________Hot_cross_buns!=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!=\nHot___cross____buns!=________One_a_pen-_ny,_Two_a_pen-_ny,\n\"\"\"\n"
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\n2 2 2 2 2 2 2 2 2 4 4 4 4\") == \"\"\"Hot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n\"\"\"\n\nprint(solution(\"2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\n2 2 2 2 2 2 2 2 2 4 4 4 4\"))"
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\n1 1 1 1 1 1 1 1 4 4 4 4\") == \"\"\"Hot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\"\"\"\n\nassert solution(\"2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\n2 2 2 2 2 2 2 2 4 4 4 4\") == \"\"\"Hot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\nTwo_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________Two_a_pen-_ny,_Hot___cross____buns!_=\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\n----\n\nimport itertools\nimport re\n\nfor _ in range(int(input())):\n    m, d = map(int, input().split())\n    arr = [list(input().split()) for _ in range(m)]\n    l = len(arr[0][0])\n    indices = []\n    for i in range(m):\n        indices.append(set())\n        for j in range(len(arr[i][0])):\n            indices[i].add(arr[i][0][j] + \"0\" * (l - j - 1))\n    indices_dict = dict()\n    for i in range(m):\n        indices_dict[arr[i][0]] = i\n    for i in range(m - 1):\n        for j in range(i + 1, m):\n            if arr[i][1] > arr[j][1]:\n                indices[i].add(arr[j][0] + \"0\" * (l - 1))\n            else:\n                indices[j].add(arr[i][0] + \"0\" * (l - 1))\n    result = set()\n    for i in range(m):\n        for j in range(l):\n            if arr[i][1][j]!= \"_\" and arr[i][1][j]!= \"/\":\n                result.add(arr[i][1][j] + \"0\" * (l - j - 1))\n    for i in range(m):\n        for j in range(len(indices[i])):\n            if indices[i][j] in result:\n                result.remove(indices[i][j])\n    print(len(result))\n    print(\"\\n\".join(sorted(result, key=lambda x: (len(x), x))))\n\n\"\"\""
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 4 4 4 4\n''') == '''Hot cross buns! = Hot cross buns! =\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n'''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\n2 2 2 2 2 2 2 2 2 4 4 4 4') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n\nassert solution('2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\n2 2 2 2 2 2 2 2 2 4 4 4 4') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n\nassert solution('2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\n2 2 2 2 2 2 2 2 2 4 4 4 4') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n\nassert solution('2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\n2 2 2 2 2 2 2 2 2 4 4 4 4') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n\nassert solution('2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\n2 2 2 2 2 2 2 2 2 4 4 4 4') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'"
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\") == \"Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n\"\nprint(\"Passed!\")\n\n\"\"\"\n\nimport re\nimport sys\n\nL, D = [int(x) for x in sys.stdin.readline().split()]\nsong = sys.stdin.readlines()\n\nfor i in range(L):\n    song[i] = re.findall(\"\\S+\", song[i].rstrip())"
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 16\\n\" + \"Hot cross buns! = Hot cross buns! =\\n\" + \"4 4 4 4 4 4 4 4\\n\" + \"One a pen- ny, Two a pen- ny, Hot cross buns! =\\n\" + \"2 2 2 2 2 2 2 2 4 4 4 4\") == \"\"\"Hot cross buns!_=___Hot cross buns!_=\n____________________Hot cross buns!_=\nOne a pen- ny,_Two a pen- ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One a pen- ny,_Two a pen- ny,\n\"\"\"\n\nprint(solution(\"2 16\\n\" + \"Hot cross buns! = Hot cross buns! =\\n\" + \"4 4 4 4 4 4 4 4\\n\" + \"One a pen- ny, Two a pen- ny, Hot cross buns! =\\n\" + \"2 2 2 2 2 2 2 2 4 4 4 4\"))\nassert solution(\"2 16\\n\" + \"Hot cross buns! = Hot cross buns! =\\n\" + \"4 4 4 4 4 4 4 4\\n\" + \"One a pen- ny, Two a pen- ny, Hot cross buns! =\\n\" + \"2 2 2 2 2 2 2 2 4 4 4 4\") == \"\"\"Hot cross buns!_=___Hot cross buns!_=\n____________________Hot cross buns!_=\nOne a pen- ny,_Two a pen- ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One a pen- ny,_Two a pen- ny,\n\"\"\"\n\nprint(solution(\"2 16\\n\" + \"Hot cross buns! = Hot cross buns! =\\n\" + \"4 4 4 4 4 4 4 4\\n\" + \"One a pen- ny, Two a pen- ny, Hot cross buns! =\\n\" + \"2 2 2 2 2 2 2 2 4 4 4 4\"))\nassert solution(\"2 16\\n\" + \"Hot cross buns! = Hot cross buns! =\\n\" + \"4 4 4 4 4 4 4 4\\n\" + \"One a pen- ny, Two a pen- ny, Hot cross buns! =\\n\" + \"2 2 2 2 2 2 2 2 4 4 4 4\") == \"\"\"Hot cross buns!_=___Hot cross buns!_=\n____________________Hot cross buns!_=\nOne a pen- ny,_Two a pen- ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One a pen- ny,_Two a pen- ny,\n\"\"\"\n\nprint(solution(\"2 16\\n\" + \"Hot cross buns! = Hot cross buns! =\\n\" + \"4 4 4 4 4 4 4 4\\n\" + \"One a pen- ny, Two a pen- ny, Hot cross buns! =\\n\" + \"2 2 2 2 2 2 2 2 4 4 4 4\"))\nassert solution(\"2 16\\n\" + \"Hot cross buns! = Hot cross buns! =\\n\" + \"4 4 4 4 4 4 4 4\\n\" + \"One a pen- ny, Two a pen- ny, Hot cross buns! =\\n\" + \"2 2 2 2 2 2 2 2 4 4 4 4\") == \"\"\"Hot cross buns!_=___Hot cross buns!_=\n____________________Hot cross buns!_=\nOne a pen- ny,_Two a pen- ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One a pen- ny,_Two a pen- ny,\n\"\"\"\n\nprint(solution(\"2 16\\n\" + \"Hot cross buns! = Hot cross buns! =\\n\" + \"4 4 4 4 4 4 4 4\\n\" + \"One a pen- ny, Two a pen- ny, Hot cross buns! =\\n\" + \"2 2 2 2 2 2 2 2 4 4 4 4\"))\nassert solution(\"2 16\\n\" + \"Hot cross buns! = Hot cross buns! =\\n\" + \"4 4 4 4 4 4 4 4\\n\" + \"One a pen- ny, Two a pen- ny, Hot cross buns! =\\n\" + \"2 2 2 2 2 2 2 2 4 4 4 4\") == \"\"\"Hot cross buns!_=___Hot cross buns!_=\n____________________Hot cross buns!_=\nOne a pen- ny,_Two a pen- ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One a pen- ny,_Two a"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\") == \"33\"\n\"\"\"\nfrom collections import defaultdict\nimport heapq\n"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33') == '33'\n"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\") == \"33\"\nassert solution(\"2 1 0\\n1 2 1\\n2 3 5\") == \"0\"\n\n\"\"\"\n\n\nimport collections\nimport sys\n"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\") == '33'\n\"\"\"\n"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33') == '33'\n"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33''') == '33'\nprint('Hooray!')\n\n-------\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n3 15 34 32\nSample Output:\n34\nassert solution('''3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n3 15 34 32''') == '34'\nprint('Hooray!')\n\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n3 15 34 32\n4 24 5 5\nSample Output:\n34\nassert solution('''3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n3 15 34 32\n4 24 5 5''') == '34'\nprint('Hooray!')\n'''"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33''') == '33'\n\nimport itertools"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\") == \"33\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n7 7\\n30 0\") == \"405\"\n\"\"\""
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n7 7\\n30 0') == 405\n\"\"\""
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n7 7\\n30 0\") == \"405\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n20 15 10\n7 7\n30 0\"\"\") == \"405\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n7 7\\n30 0\") == \"405\"\n\"\"\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n7 7\\n30 0') == '405'\n\"\"\""
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n1\\n2\\n3') == 6\n\n'''\n\n'''\n"
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n7 7\\n30 0') == '405'\n"
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nprint(solution('1 2 3\\n4 5 6\\n7 8 9'))\nprint(solution('2 1\\n2 1'))\nprint(solution('2 1\\n0 1'))\nprint(solution('2 1\\n2 100'))\nprint(solution('2 1\\n10 5'))\nprint(solution('1 1000000000'))\nprint(solution('0 1\\n1 1'))\nprint(solution('10 1000000000'))\nprint(solution('3\\n0 1\\n1 2\\n2 3'))\nprint(solution('3\\n0 1\\n1 1\\n2 1'))\n"
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n20 15 10\\n7 7\\n30 0\") == 405\n"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 4 7\") == \"28 4 21 14.0\"\n\n\"\"\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2 4 7\") == \"28 4 21 14.0\"\n\"\"\"\n\n\"\"\"\n\u041e\u0431\u0437\u043e\u0440 \u0437\u0430\u0434\u0430\u0447\u0438:\n\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c, \u0447\u0442\u043e \u0432 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0438\u0437 10 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0442\u0430\u043a\u0436\u0435 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0440\u043e\u0435\u043a \u0438\u0437 3 \u0447\u0438\u0441\u0435\u043b \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440 \u0438\u0437 2 \u0447\u0438\u0441\u0435\u043b.\n\n\u0412\u044b\u0432\u043e\u0434 \u043a\u043e\u0434\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0442\u0430\u043a:\n\n\u0412 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0447\u0438\u0441\u0435\u043b 10 \u0442\u0430\u043a\u0436\u0435 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0440\u043e\u0435\u043a \u0438\u0437 3 \u0447\u0438\u0441\u0435\u043b \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440 \u0438\u0437 2 \u0447\u0438\u0441\u0435\u043b.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u0442\u0440\u043e\u0435\u043a \u0438\u0437 3 \u0447\u0438\u0441\u0435\u043b \u043d\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043e. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u043f\u0430\u0440 \u0438\u0437 2 \u0447\u0438\u0441\u0435\u043b \u043d\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043e.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u041c\u0430\u0441\u0441\u0438\u0432 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 3. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u0432\u043e\u0434\u0430 \u043d\u0435 \u0432\u0430\u0436\u0435\u043d.\n\nSample Input:\n5\n3 2 2 6 3 3 2 1 2 3 1\nSample Output:\n5 7 3\n\"\"\"\n\n\"\"\"\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435:\n\u0412\u0437\u044f\u0442\u044c \u0434\u043b\u0438\u043d\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432: 10 \u0438 2\n\u0414\u0430\u043b\u044c\u0448\u0435 \u0438\u0449\u0435\u043c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0442\u0440\u043e\u0439\u043a\u0438 \u0438\u0437 3 \u0447\u0438\u0441\u0435\u043b, \u0441\u0443\u043c\u043c\u0430 \u0447\u0438\u0441\u0435\u043b \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0441 \u0447\u0438\u0441\u043b\u043e\u043c 1:\n1 + 2 + 3 = 6\n1 + 3 + 2 = 6\n2 + 1 + 3 = 6\n2 + 3 + 1 = 6\n3 + 1 + 2 = 6\n3 + 2 + 1 = 6\n\u0414\u0430\u043b\u0435\u0435 \u0438\u0449\u0435\u043c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0430\u0440\u044b \u0438\u0437 2 \u0447\u0438\u0441\u0435\u043b:\n2 + 3 = 5\n3 + 2 = 5\n\u0412 \u043e\u0442\u0432\u0435\u0442 \u0437\u0430\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u0441\u0443\u043c\u043c\u044b \u0432 \u043e\u0434\u043d\u043e\u0439 \u0442\u0440\u043e\u0439\u043a\u0435 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u0432 \u043f\u0430\u0440\u0435 \u0438\u0437 2 \u0447\u0438\u0441\u0435\u043b:\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:\n\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u0432\u043e\u0434\u0430 \u043d\u0435 \u0432\u0430\u0436\u0435\u043d.\n\n\"\"\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 4 7\") == \"28 4 21 14.0\"\n\n\"\"\"\n\nn = int(input())\nweights = list(map(int, input().split()))"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 2\\n3\") == \"6\"\nassert solution(\"2\\n1 2\\n3\\n4\") == \"7\"\nassert solution(\"2\\n1 2\\n3\\n4\\n5\") == \"10\"\nassert solution(\"2\\n1 2\\n3\\n4\\n5\\n6\") == \"12\"\nassert solution(\"2\\n1 2\\n3\\n4\\n5\\n6\\n7\") == \"13\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 4 7') == '28 4 21 14.0'\nassert solution('4\\n1 2 3 4') == '6 4 4 3.0'\nassert solution('4\\n1 2 2 2') == '0 0 4 2.0'\nassert solution('4\\n1 2 3 5') == '16 1 16 3.0'\nassert solution('4\\n1 2 2 2') == '0 0 4 2.0'\n\n------Hints------\n1. Check the constraints on the input.\n2. Try to come up with a brute force solution using combinations of the input.\n3. Think about how you can eliminate some of the duplication in the input.\n4. Try to come up with a solution which will run in polynomial time.\n5. If you come up with a solution that is not polynomial time, come back to it later.\n6. Think about how to check if a solution is correct.\n7. For each distinct weight $w$, count the number of $4$-packs of that weight. You should end up with a dictionary which maps a weight to its number of occurences.\n8. You can then write a loop over the distinct weights to compute the expected weight of a $4$-pack.\n9. Remember to take into consideration that the weight of a $4$-pack should not be greater than $4$, and to take into consideration that the number of distinct weights should not be greater than $4$.\n10. Remember to round the expected weight to 4 decimal places.\n11. Use floating-point arithmetic to obtain a reasonably accurate value for the expected weight.\n12. Keep in mind that the weight of a $4$-pack should not be greater than $4$, and to take into consideration that the number of distinct weights should not be greater than $4$.\n\n\"\"\""
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 4 7\") == \"28 4 21 14.0\"\n\"\"\"\n\nN = int(input())\nlist_of_weights = list(map(int, input().split()))"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 4 7') == '28 4 21 14.0'\n"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 4 7\") == \"28 4 21 14.0\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 4 7') == '28 4 21 14.0'\n"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 4 7\") == \"28 4 21 14.0\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 2 3 4\\n2 3 4 1\\n') == 'yes'\nassert solution('4 2\\n1 2 3 4\\n2 3 4 1\\n') == 'yes'\nassert solution('4 2\\n1 2 3 4\\n2 3 4 1\\n') == 'yes'\nassert solution('4 2\\n1 2 3 4\\n2 3 4 1\\n') == 'yes'\nassert solution('4 2\\n1 2 3 4\\n2 3 4 1\\n') == 'yes'\n"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 2 3 4\\n2 3 4 1\\n') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3'\n"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n2 3 4\\n1 2 3\\n1 2 3\") == \"yes\"\nassert solution(\"3 2\\n2 3 4\\n1 2 3\\n1 2 3\") == \"no\"\nassert solution(\"1 2\\n3 4 5\\n1 2 3\\n1 2 3\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == 'yes'"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\nassert solution(\"4 4\\n1 2 3 4\\n2 3 4 1\\n1 2 4 3\\n4 3 2 1\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\nassert solution(\"5 5\\n1 2 3 4 5\\n2 3 4 5 1\\n3 4 5 1 2\\n4 5 2 1 3\\n5 1 2 3 4\") == \"yes\\n1 2 3 4 5\\n2 3 4 5 1\\n3 4 5 1 2\\n4 5 2 1 3\\n5 1 2 3 4\"\nassert solution(\"4 4\\n1 2 3 4\\n2 3 4 1\\n1 2 4 3\\n4 3 2 1\") == \"no\"\nassert solution(\"4 4\\n1 2 3 4\\n2 3 4 1\\n1 2 4 3\\n3 4 1 2\") == \"no\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 2 3 4\\n2 3 4 1\\n') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3'\n\"\"\"\nimport sys\n\nT = int(sys.stdin.readline().split()[0])\n\nfor _ in range(T):\n    n, k = map(int, sys.stdin.readline().split())\n    rows = [list(map(int, sys.stdin.readline().split())) for _ in range(k)]\n    nums = list(range(1, n+1))\n    for row in rows:\n        nums.remove(row[0])\n        nums.remove(row[-1])\n    nums = list(zip(*nums))\n    for col in nums:\n        nums.remove(col)\n    nums = zip(*nums)\n    for row in nums:\n        print(' '.join(map(str, row)))\n    print()\n"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n1 2\\n') == 'yes'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1') == 'yes'\nassert solution('4 4\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2') == 'yes'\nassert solution('5 2\\n1 1 1\\n2 2 2\\n3 3 3\\n4 4 4') == 'yes'\nassert solution('5 2\\n1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\\n5 5 5') == 'yes'\n"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\n\"\"\"\n\nfrom typing import List\nimport copy\n\nclass Sudoku:\n    def __init__(self, lines: List[List[str]]):\n        self.lines = lines\n        self.row_len = len(lines[0])\n        self.col_len = len(lines)\n        self.boxes = self.get_boxes()\n        self.board = self.parse_board()\n\n    def get_boxes(self):\n        boxes = []\n        for i in range(0, self.row_len, 3):\n            for j in range(0, self.col_len, 3):\n                boxes.append([])\n                for k in range(3):\n                    for m in range(3):\n                        boxes[-1].append(self.lines[i+k][j+m])\n        return boxes\n\n    def parse_board(self):\n        board = []\n        for i in range(self.row_len):\n            board.append([])\n            for j in range(self.col_len):\n                board[i].append(self.lines[i][j])\n        return board\n\n    def solve(self):\n        self.solve_row()\n        self.solve_col()\n        self.solve_box()\n\n        for i in range(self.row_len):\n            for j in range(self.col_len):\n                if self.board[i][j] == \"\":\n                    for n in range(1, 10):\n                        if self.is_valid(i, j, str(n)):\n                            self.board[i][j] = str(n)\n                            if self.solve():\n                                return True\n                            self.board[i][j] = \"\"\n                    return False\n        return True\n\n    def solve_row(self):\n        for row in self.board:\n            row_set = set()\n            for n in row:\n                if n!= \"\":\n                    row_set.add(n)\n            for n in range(1, 10):\n                if n not in row_set:\n                    for i in range(self.row_len):\n                        if self.board[i][row[i]] == \"\":\n                            self.board[i][row[i]] = str(n)\n                            if self.solve_row():\n                                return True\n                            self.board[i][row[i]] = \"\"\n                    return False\n\n    def solve_col(self):\n        for i in range(self.row_len):\n            col_set = set()\n            for j in range(self.col_len):\n                if self.board[i][j]!= \"\":\n                    col_set.add(self.board[i][j])\n            for n in range(1, 10):\n                if n not in col_set:\n                    for j in range(self.col_len):\n                        if self.board[i][j] == \"\":\n                            self.board[i][j] = str(n)\n                            if self.solve_col():\n                                return True\n                            self.board[i][j] = \"\"\n                    return False\n\n    def solve_box(self):\n        for i in range(self.row_len):\n            for j in range(self.col_len):\n                box = self.boxes[i//3*3 + j//3]\n                box_set = set()\n                for n in box:\n                    if n!= \"\":\n                        box_set.add(n)\n                for n in range(1, 10):\n                    if n not in box_set:\n                        self.board[i][j] = str(n)\n                        if self.solve_box():\n                            return True\n                        self.board[i][j] = \"\"\n                return False\n\n    def is_valid(self, i: int, j: int, n: str) -> bool:\n        if n in self.board[i]:\n            return False\n        for m in range(self.col_len):\n            if self.board[i][m] == n:\n                return False\n        for m in range(self.row_len):\n            if self.board[m][j] == n:\n                return False\n        for m in range(3):\n            for n in range(3):\n                if self.board[i//3*3+m][j//3*3+n] == n:\n                    return False\n        return True\n\nlines = [[str(x) for x in input().strip().split()] for _ in range(9)]\n\ns = Sudoku(lines)\ns.solve()\n\nfor line in s.board:\n    print(\" \".join(line))\n"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.0'\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict\n"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.0'\n\"\"\"\n\n\nimport sys\nimport math\nfrom collections import Counter\n"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n10 10 -10 -4 10\") == \"10.0\"\nassert solution(\"1000000\\n1\") == \"0.0\"\nassert solution(\"1000000\\n10 -10 -10 -10 -10 10\") == \"0.0\"\n\n\"\"\"\n\n\nimport collections\nimport functools\n\nfrom typing import List\n\nfrom icontract import require, ensure, DBC\n"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.0'\n\"\"\"\n\n\"\"\"\nIn this problem, we are dealing with a game of 'Stop counting'. The rules are as follows:\n\nThe player has an infinite supply of cards.\nAt any time before 'Stop counting' is called, one card is dealt from the deck.\nAt any time after 'Stop counting' is called, one card is dealt from the deck.\nOne card is counted if it is dealt before 'Stop counting' is called.\nAt any time after 'Stop counting' is called, one card is counted if it is dealt after 'Start counting' is called.\nA card is not counted if it is dealt before or after 'Stop counting' or 'Start counting' is called.\nThe player calls 'Stop counting' before the first card is dealt.\nThe player calls 'Start counting' after the last card is dealt.\nThe game ends when the player calls 'Stop counting' after the last card is dealt.\nThe payout for the game is the average value of the counted cards. That is, it is the sum of the counted cards divided by the number of counted cards.\nIf there are no counted cards, the payout is $0$.\nIf the deck of cards is infinite, you can construct a deck that contains all values from $-10^{9}$ to $10^{9}$ with no duplicates.\n\nHere is a description of the game 'Stop counting' from Wikipedia:\n\n\u201cStop counting\u201d is a card game in which the player has to count a total of some positive number of cards with the goal of stopping counting early.\n\nThe rules for the game are as follows:\n\nThe game starts with one card in a deck.\nAt any time before 'Stop counting' is called, one card is dealt from the deck.\nAt any time after 'Stop counting' is called, one card is dealt from the deck.\nOne card is counted if it is dealt before 'Stop counting' is called.\nAt any time after 'Stop counting' is called, one card is counted if it is dealt after 'Start counting' is called.\nA card is not counted if it is dealt before or after 'Stop counting' or 'Start counting' is called.\nThe game ends when the player calls 'Stop counting' after the last card is dealt.\nThe payout for the game is the average value of the counted cards. That is, it is the sum of the counted cards divided by the number of counted cards.\nIf there are no counted cards, the payout is $0$.\n\nGiven the input of the number of cards, your task is to determine the largest attainable payout.\n\nNote: the test cases contain very large input.\n\n-----Input-----\nThe first line of the input contains a single integer $1 \\leq N \\leq 100000$, the number of cards in the deck.\n\nThe second line of input contains $N$ space-separated integers, the values on the cards. The value of each card is in the range $[-10^{9}, 10^{9}]$. The cards are dealt in the same order they are given in the input.\n\n-----Output-----\nOutput the largest attainable payout. The answer is considered correct if the absolute error is less than $10^{-6}$, or the relative error is less than $10^{-9}$.\n\n-----Sample Explanation-----\nIn the first sample, the best strategy is to call 'Stop counting' after the first card is dealt, and then call 'Start counting' after the last card is dealt. Since no cards are counted, the payout is $0$.\n\nIn the second sample, the best strategy is to call 'Stop counting' before the first card is dealt, and then call 'Start counting' after the last card is dealt. Since no cards are counted, the payout is $0$.\n\"\"\"\n\nimport math"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.0'\nassert solution('5\\n10 10 -10 -4 10\\n10 10 10 10 -10') == '10.0'\nassert solution('5\\n10 10 -10 -4 10\\n10 10 10 10 10') == '10.0'\nassert solution('5\\n10 10 -10 -4 10\\n10 10 10 10 10\\n10 10 10 10 10') == '10.0'\nassert solution('5\\n10 10 -10 -4 10\\n10 10 10 10 10\\n10 10 10 10 10\\n10 10 10 10 10\\n10 10 10 10 10') == '10.0'\n\n----\n\nimport sys\n"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n10 10 -10 -4 10\") == \"10.000000000\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 -10 -4 10\") == \"10.000000000\"\n\"\"\"\n\nimport sys\nimport os\nimport math\n\nstdin = open(os.path.join(sys.path[0], \"input.in\"), \"r\")\nsys.stdin = stdin\n"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.000000000'"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n10 10 -10 -4 10\") == \"10.000000000\"\nassert solution(\"3\\n-9 -9 -9\") == \"0.000000000\"\nassert solution(\"1\\n10\") == \"10.0\"\n\"\"\"\n\nfrom sys import stdin\nimport math\n"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.0'\n\"\"\"\n\nn = int(input())\ncards = list(map(int, input().split()))"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n30\\n3\\n2\\n45\") == 1\nassert solution(\"4\\n4\\n2\\n45\\n1\") == 0\nassert solution(\"4\\n4\\n2\\n3\\n1\") == 1\nassert solution(\"4\\n4\\n2\\n3\\n2\") == 0\nassert solution(\"4\\n4\\n2\\n5\\n2\") == 0\n"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"30 3 2 45\") == 1\n\"\"\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\n-----Solution-----\n\"\"\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    3\n    2\n    2\n    4\n    \"\"\"\n) == \"1\"\n\n\"\"\"\n3 lines.\n\"\"\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == '1'\n\n-----Explanation-----\nGiven a student holding the numbers $30$, $2$, $45$.\n\nAll possible ways to stretch the crepes are listed below.\n\n30 can stretch to 30, as it does not have a factor other than $1$ that it can stretch to.\n30 can stretch to 45, as it can be stretched to the numbers $45$ and $3$ which have factors other than $1$.\n45 can stretch to 45, as it does not have a factor other than $1$ that it can stretch to.\n45 can stretch to 3, as it can be stretched to the number $2$, which has a factor other than $1$.\n2 can stretch to 3, but no other number in the range $[2,10^9]$ can.\n\nHence, there is exactly one way to stretch the crepes subject to Ms. Hall's rules."
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected_return\n\n'''\n\n'''"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == 1\n\n-----Note-----\nYou are not allowed to read any input from stdin/console.\nYou are not allowed to write any output to stdout/console.\nAllowed libraries/standard packages: math, sys, itertools, random, string, copy\n\"\"\"\n\nfrom itertools import combinations\n\nclass Solution:\n    def countCombos(self, n):\n        return sum(1 for x in range(2, n + 1) if n % x == 0)\n\n    def numberOfWays(self, n):\n        # make list of all pairs of the numbers\n        pairs = list(combinations(range(2, n + 1), 2))\n\n        # check if there is a path between any two pairs\n        for pair in pairs:\n            if self.checkPath(pair[0], pair[1]):\n                return 1\n\n        return 0\n\n    def checkPath(self, a, b):\n        # generate all combinations of factors of a and b\n        factors_a = self.factors(a)\n        factors_b = self.factors(b)\n\n        for factor in factors_a:\n            # check if b is divisible by a or b\n            if b % factor == 0:\n                return True\n\n        for factor in factors_b:\n            # check if a is divisible by b or a\n            if a % factor == 0:\n                return True\n\n        # otherwise check if a and b share a factor other than 1\n        if len(factors_a.intersection(factors_b)) == 1:\n            return True\n\n        return False\n\n    # def factors(self, n):\n    #     factors = set()\n    #     for i in range(1, n // 2 + 1):\n    #         if n % i == 0:\n    #             factors.add(i)\n    #             factors.add(int(n / i))\n\n    #     return factors\n\n    def factors(self, n):\n        return {i for i in range(1, int(n ** 0.5) + 1) if n % i == 0}"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n\") == 2\nassert solution(\"4\\n4\\n3\\n2\\n1\\n\") == 1\nassert solution(\"2\\n2\\n3\\n4\\n4\\n\") == 2\nassert solution(\"5\\n2\\n1\\n1\\n1\\n\") == 0\nassert solution(\"1\\n2\\n3\\n4\\n5\\n\") == 2\n"
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.0 0.0 1.360000000\\n0.0 0.0 1.000000000\\n0.0 -1.000000000 0.360000000\\n0.0 0.0 0.360000000\\n0.880000000 0.0 0.000000000\\n-0.880000000 -0.360000000 -0.360000000\"\n\n\"\"\""
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\n\n\"\"\"\n\nn, p, v, a = (int(i) for i in stdin.split())\n\ninf = float('inf')\n\nfrom collections import defaultdict\n\ng = defaultdict(lambda: defaultdict(lambda: inf))\n\nfor _ in range(p):\n    i, j, c = (int(i) for i in stdin.split())\n    g[i][j] = c\n    g[j][i] = c"
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\""
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\n\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\n\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\n\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\n\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\""
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == '0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897'\n-----Problem-----\n\nThe objective of this problem is to determine the maximum value of $F^a \\cdot W^{1-a}$ that can be achieved and how to route the Flubber and water to achieve it.\n\nA single pipe has two nodes: one at $j$ and one at $k$. The water flow is given by $W_{jk}$ and the Flubber flow is given by $F_{jk}$. The capacity of the pipe is $c$ (liters/second).\n\n$F^a \\cdot W^{1-a}$ is defined as:\n\n$$\nF^a \\cdot W^{1-a} = \\left| \\frac{v \\cdot F}{W} \\right|^a\n$$\n\nand is a function of the rate of water $W$ and the rate of Flubber $F$.\n\nA simple example is given below. We assume $a = 0.5$, so $F^0.5 \\cdot W^0.5$ has the same value as $F \\cdot W$ (note that $F$ is the only parameter that is defined when $a = 0.5$).\n\n$$\n\\left| \\frac{v \\cdot F}{W} \\right|^0.5 = \\frac{v \\cdot F}{W}\n$$\n\nWe can apply the function to all pairs of pipes:\n\n$$\n\\left| \\frac{v \\cdot F}{W} \\right|^a = \\left| \\frac{v \\cdot F}{W} \\right|^0.5 \\cdot \\left| \\frac{W}{F} \\right|^0.5\n$$\n\nIf $F = 0$ and $W = 0$, then the equation reduces to:\n\n$$\n\\left| \\frac{v \\cdot F}{W} \\right|^a = 0\n$$\n\nThis equation is undefined; for example, for $F=0$, if $W=0$ then the expression evaluates to $\\infty$.\n\nFor example, if $F = 3$ and $W = 1$, then:\n\n$$\n\\left| \\frac{v \\cdot F}{W} \\right|^0.5 \\cdot \\left| \\frac{W}{F} \\right|^0.5 = \\left| \\frac{v \\cdot F}{W} \\right|^0.5 = \\frac{3}{1} = 3\n$$\n\nLet $F = v W$. Then:\n\n$$\n\\left| \\frac{v \\cdot F}{W} \\right|^0.5 \\cdot \\left| \\frac{W}{F} \\right|^0.5 = \\left| \\frac{v \\cdot F}{W} \\right|^0.5 = \\frac{v}{W}\n$$\n\nThus, if $F = v W$, then $W$ can be"
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.0 0.0\\n0.0 1.0\\n0.0 -1.0\\n0.0 0.0\\n0.88 0.0\\n-0.88 -0.0\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '''\n0.000000000 1.360000000\n0.000000000 1.000000000\n0.000000000 -1.000000000\n0.000000000 0.360000000\n0.880000000 0.000000000\n-0.880000000 -0.360000000\n1.02037965897\n'''\n\nassert solution('''\n2 6 8\n3 6 5\n''') == '''\n0.000000000 1.000000000\n0.000000000 -1.000000000\n0.000000000 0.360000000\n0.880000000 0.000000000\n-0.880000000 -0.360000000\n1.02037965897\n'''\n\nassert solution('''\n4 5 5\n1 5 7\n3 5 3\n4 5 2\n''') == '''\n0.000000000 1.000000000\n0.000000000 -1.000000000\n0.000000000 0.360000000\n0.880000000 0.000000000\n-0.880000000 -0.360000000\n1.02037965897\n'''\n\nassert solution('''\n1 5 7\n3 5 3\n4 5 2\n''') == '''\n0.000000000 1.000000000\n0.000000000 -1.000000000\n0.000000000 0.360000000\n0.880000000 0.000000000\n-0.880000000 -0.360000000\n1.02037965897\n'''\n\nassert solution('''\n2 6 8\n3 6 5\n3 6 2\n''') == '''\n0.000000000 1.000000000\n0.000000000 -1.000000000\n0.000000000 0.360000000\n0.880000000 0.000000000\n-0.880000000 -0.360000000\n1.02037965897\n'''"
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\n\"\"\"\n\n\nimport networkx as nx\nimport matplotlib.pyplot as plt"
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == '0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897'\n"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\") == \"4\"\nassert solution(\"4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n0 0\\n1 1\\n2 2\") == \"4\"\n\n\"\"\"\nimport re\nimport sys\nimport math"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\") == '4'\nassert solution(\"4\\n0 0\\n0 3\\n3 3\\n3 0\\n5\\n0 1\\n1 2\\n2 2\\n3 3\\n4 0\\n2\\n3 2\\n0 2\\n3 1\\n2 2\\n4 0\\n1 1\") == '3'\nassert solution(\"6\\n0 0\\n0 4\\n3 4\\n3 0\\n7\\n0 0\\n4 3\\n3 4\\n7 0\\n2 4\\n4 4\\n1 0\\n5 0\\n2 4\\n0 4\\n1 0\\n3 3\\n2 0\\n7\\n0 0\\n4 0\\n5 2\\n2 0\\n5 0\\n2 3\\n3 0\\n7\\n0 0\\n3 3\\n2 0\\n7\\n0 0\\n4 3\\n0 4\\n3 3\\n0 0\\n7\\n0 0\\n2 4\\n4 4\\n1 0\\n5 0\\n0 0\\n7\\n0 0\\n4 0\\n0 4\\n5 0\\n2 0\\n3 0\\n6 2\\n0 0\\n7\\n0 0\\n3 0\\n2 4\\n0 0\\n6 0\\n0 0\\n5 3\\n2 0\\n6 0\\n0 0\\n5 0\\n0 0\\n2 0\\n2 0\\n2 4\\n1 0\\n6 2\\n0 0\\n5 0\\n0 0\\n2 0\\n2 3\\n0 0\\n4 0\\n0 0\\n5 3\\n0 0\\n6 0\\n0 0\\n5 0\\n0 0\\n2 3\\n0 0\\n6 2\\n0 0\\n5 0\\n0 0\\n2 0\\n2 4\\n0 0\\n6 0\\n0 0\\n5 3\\n0 0\\n6 0\\n0 0\\n5 0\\n0 0\\n2 0\\n2 4\\n0 0\\n6 0\\n0 0\\n5 3\\n0 0\\n6 0\\n0 0\\n5 0\\n0 0\\n2 3\\n0 0\\n6 0\\n0 0\\n5 0\\n0 0\\n2 0\\n2 0\\n2 4\\n0 0\\n6 2\\n0 0\\n5 0\\n0 0\\n2 0\\n2 3\\n0 0\\n4 0\\n0 0\\n5 3\\n0 0\\n6 0\\n0 0\\n5 0\\n0 0\\n2 0\\n2 0\\n2 4\\n0 0\\n6 2\\n0 0\\n5 0\\n0 0\\n2 0\\n2 3\\n0 0\\n4 0\\n0 0\\n5 3\\n0 0\\n6 0\\n0 0\\n5 0\\n0 0\\n2 0\\n2 4\\n0 0\\n6 2\\n0 0\\n5 0\\n0 0\\n2 0\\n2 3\\n0 0\\n4 0\\n0 0\\n5 3\\n0 0\\n6 0\\n0 0\\n5 0\\n0 0\\n2 0\\n2 4\\n0 0\\n6 2\\n0 0\\n5 0\\n0 0\\n2 0\\n2 3\\n0 0\\n4 0\\n0 0\\n5 3\\n0 0\\n6 0\\n0 0\\n5 0\\n0 0\\n2 0\\n2 4\\n0 0\\n6 2\\n0 0\\n5 0\\n0 0\\n2 0\\n2 3\\n0 0\\n4 0\\n0 0\\n5 3\\n0 0\\n6 0\\n0 0\\n5 0\\n0 0\\n2 0\\n2 4\\n0 0\\n6 2\\n0 0\\n5 0\\n0 0\\n2 0\\n2 3\\n0 0\\n4 0\\n0 0\\n5 3\\n0 0\\n6 0\\n0 0\\n5 0\\n0 0\\n2 0\\n2 4\\n0 0\\n6 2\\n0 0\\n5 0\\n0 0\\n2 0\\n2 3\\n0 0\\n4 0\\n0 0\\n5 3\\n0 0\\n6 0\\n0 0\\n5 0\\n0 0\\n2 0\\n2 4\\n0 0\\n6 2\\n0 0\\n5 0\\n0 0\\n2 0\\n2 3\\n0 0\\n4 0\\n0 0\\n5 3\\n0 0\\n6 0\\n0 0\\n5 0\\n0 0\\n2 0\\n2 4\\n0 0\\n6 2\\n0 0\\n5 0\\n0 0\\n2 0\\n2 3\\n0 0\\n4 0\\n0 0\\n5 3\\n0 0\\n6 0\\n0 0\\n5 0\\n0 0\\n2 0\\n2 4\\n0 0\\n6 2\\n0 0\\n5 0\\n0 0\\n2 0\\n2 3\\n0 0\\n4 0\\n0 0\\n5 3\\n0 0\\n6 0\\n0 0\\n5 0\\n0 0\\n2 0\\n2 4\\n0 0\\n6 2\\n0 0\\n5 0\\n0 0\\n2 0\\n2 3\\n0 0\\n4 0\\n0 0\\n5 3\\n0 0\\n6 0\\n0 0\\n5 0\\n0 0\\n2 0\\n2 4\\n0 0\\"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2') == '4'\nassert solution('4\\n0 0\\n0 3\\n3 3\\n3 0\\n3\\n1 1\\n2 2') == '2'\n"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('1 2 3 4') == 'a'\nassert solution('1 2') == 'a'\nassert solution('1 2\\n2 3') == 'a'\n"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_solution\nprint(solution(input))\n\n----\n4\n1 1\n2 2\n3 3\n0 0\n3\n1 1\n2 2\nSample Output:\n0\n"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == '4'\n\nassert solution(\n'''\n4\n1 1\n1 2\n1 1\n1 1\n1 1\n1 1\n1 2\n1 1\n1 1\n''') == '4'\n\nassert solution(\n'''\n3\n1 1\n1 2\n1 1\n1 1\n1 1\n1 2\n1 1\n2 2\n''') == '3'\n\nassert solution(\n'''\n3\n0 0\n0 1\n0 0\n1 1\n1 1\n2 2\n1 1\n2 2\n''') == '3'\n\nassert solution(\n'''\n6\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == '6'"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(    \"4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\\n\") == \"4\"\nassert solution(    \"5\\n0 0\\n0 3\\n3 3\\n3 0\\n4\\n1 1\\n2 2\\n\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n\"\"\") == \"4\"\n\n-----Example 2-----\nSample Input:\n6\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n1 3\n3 4\n5 1\n2 2\n3 3\nSample Output:\n6\n"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\\n\") == \"4\"\nassert solution(\"4\\n0 0\\n0 3\\n3 3\\n3 0\\n3\\n2\\n1 1\\n2 2\\n\") == \"4\"\nassert solution(\"4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n2\\n1 1\\n2 2\\n\") == \"4\"\n\"\"\"\n\n\"\"\"\nThe first line of input contains a single positive integer $N$$(3 \\le N \\le 2 \\cdot 10^5)$.\n\nThe next $N$ lines each contain $2$ integers $x_ i$, $y_ i$ \u2014 the coordinates of the $i$-th vertex of the polygon $A$. The vertices are listed in either clockwise or counterclockwise order. It is guaranteed that the polygon $A$ is convex.\n\nThe next line contains a single positive integer $K$ $(1 \\le K \\le 10^5)$.\n\nThe next $K$ lines, each line contains $2$ integers $x_ i$, $y_ i$ \u2014 the coordinates of a sighting of Celery $(-10^9 \\le x_ i, y_ i \\le 10^9)$. All points are guaranteed to be inside the polygon $A$ and no points are on the border of $A$.\n\nThe last line contains a single positive integer $L$$(1 \\le L \\le 10^5)$.\n\nOutput a single integer \u2014 the smallest number of vertices of polygon $Z$.\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\npoints = [tuple(map(int, sys.stdin.readline().strip().split())) for _ in range(n)]\npoints.append(points[0])\nk = int(sys.stdin.readline().strip())\npoints = [tuple(map(int, sys.stdin.readline().strip().split())) for _ in range(k)]"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\") == \"4\"\nassert solution(\"4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\") == \"4\"\n\"\"\"\n\nimport math\nimport sys\nfrom typing import Dict, List\n"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 0\\n0 1\\n0 2\\n0 3\") == \"2\\n3 2\\n3 1\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 0\\n0 1\\n0 2\\n0 3') == \"2\\n3 2\\n3 1\"\n\nassert solution('4 1\\n0 1\\n0 2\\n0 3') == \"1\\n2\\n3 1\"\n\nassert solution('5 0\\n0 1\\n0 2\\n1 3\\n1 4\\n4 2\\n2 5\\n0 5') == \"2\\n4 1\\n5 0\"\n\nassert solution('5 1\\n0 1\\n0 2\\n1 3\\n1 4\\n4 2\\n2 5\\n0 5') == \"0\\n4 1\\n5 0\"\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 0\\n0 1\\n0 2\\n0 3\") == '2'\nassert solution(\"4 1\\n0 1\\n1 2\\n2 3\") == '2'\nassert solution(\"4 2\\n0 1\\n1 2\\n2 3\") == '2'\nassert solution(\"4 3\\n0 1\\n0 2\\n0 3\") == '1'\nassert solution(\"4 4\\n0 1\\n1 2\\n2 3\\n3 4\") == '0'\n"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 0\\n0 1\\n0 2\\n0 3\") == \"2\\n3 2\\n3 1\"\n\"\"\""
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 0\\n0 1\\n0 2\\n0 3\") == \"2\\n3 2\\n3 1\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0\\n0 1\\n0 2\\n0 3\\n\") == \"2\\n3 2\\n3 1\"\n\"\"\"\n\n\nfrom sys import stdin\n\nstdin = open(__file__.replace('.py', '.input'))\n"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 0\\n0 1\\n0 2\\n0 3\\n\") == \"2\\n3 2\\n3 1\"\nassert solution(\"4 0\\n0 1\\n1 2\\n0 3\\n\") == \"2\\n3 2\\n3 1\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 0\\n0 1\\n0 2\\n0 3') == '2\\n3 2\\n3 1'\nassert solution('3 4\\n0 1\\n0 2\\n1 3') == '0\\n3 1\\n3 2'\n\n-----Notes-----\n\n\"\"\""
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'ok'\nassert solution('0 1.5 0') == 'ok'\nassert solution('1.0 1.5 0') == 'ok'\nassert solution('0.5 1.5 0') == 'ok'\nassert solution('0 1.5 1.5 0') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'ok'\nassert solution('\\n') == 'crash'\nassert solution('\\n1.0 1.0 2.0') == 'ok'\nassert solution('\\n1.0 -1.0 2.0') == 'crash'\nassert solution('\\n1.0 0.5 2.0') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0 0 0\\n0 1.5 0\") == \"ok\"\nassert solution(\"3\\n-0.1 0.2 0.1\\n0.1 0.2 0.1\\n0.0 0.3 0.1\") == \"ok\"\nassert solution(\"2\\n-0.1 0.2 0.1\\n0.0 0.3 0.1\") == \"crash\"\nassert solution(\"2\\n-0.1 0.2 0.1\\n0.0 0.3 0.1\") == \"crash\"\n\n\"\"\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0.0 0.0 0.0\\n0.0 1.5 0.0\") == \"ok\"\nassert solution(\"0.0 0.0 0.0\\n0.0 1.0 0.0\") == \"ok\"\nassert solution(\"0.0 0.0 0.0\\n0.0 0.0 0.0\") == \"ok\"\nassert solution(\"0.0 0.0 0.0\\n0.0 1.0 0.0\\n0.0 1.0 0.0\") == \"ok\"\nassert solution(\"0.0 0.0 0.0\\n0.0 1.5 0.0\\n0.0 1.5 0.0\") == \"ok\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1.5 1.5 0\\n0 1.5 0\") == \"ok\"\nassert solution(\"2\\n-1 -1 -0.9999999999999\\n0 1 1\") == \"crash\"\nassert solution(\"2\\n1.5 1.5 -0.9999999999999\\n0 1 1\") == \"ok\"\n\n'''\n"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n0 0 0\\n0 1.5 0') == 'ok'\nassert solution('2\\n0 0 0\\n0 1.5 0') == 'ok'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n0 0 0\\n0 1.5 0') == 'ok'\nassert solution('2\\n0 0.0 0\\n0 1.5 0') == 'ok'\nassert solution('3\\n-0.1 -0.1 0\\n-0.1 0.1 0') == 'ok'\nassert solution('3\\n0.1 0.1 0\\n0.1 0.1 0') == 'ok'\nassert solution('3\\n0.1 -0.1 0\\n0.1 0.1 0') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n0 0 0\\n0 1.5 0\") == \"ok\"\nassert solution(\"3\\n0 0 0\\n0 1.5 0\\n0 1.5 1.5\") == \"ok\"\nassert solution(\"4\\n0 0 0\\n0 1.5 0\\n0 1.5 1.5\\n0 1.5 2.0\") == \"ok\"\nassert solution(\"5\\n0 0 0\\n0 1.5 0\\n0 1.5 1.5\\n0 1.5 2.0\\n0 2.0 3.0\") == \"ok\"\nassert solution(\"6\\n0 0 0\\n0 1.5 0\\n0 1.5 1.5\\n0 1.5 2.0\\n0 2.0 3.0\\n0 3.0 4.5\") == \"ok\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0\\n0 1.5 0\") == \"ok\"\nassert solution(\"0 0 0\\n-1 -1.5 0\") == \"ok\"\nassert solution(\"0 0 0\\n1 1.5 0\") == \"crash\"\nassert solution(\"0 0 0\\n0 1.5 1\") == \"crash\"\nassert solution(\"0 0 0\\n0 1.5 1\") == \"crash\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 0 0\\n0 1.5 0\") == \"ok\"\nassert solution(\"2\\n0 0 0\\n0 1.5 0\") == \"crash\"\nassert solution(\"2\\n0 0 0\\n0 1.5 1.5\") == \"crash\"\nassert solution(\"2\\n0 0 0\\n1.5 0 0\") == \"crash\"\nassert solution(\"2\\n0 0 0\\n1.5 1.5 1.5\") == \"crash\"\n\n\"\"\""
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\") == \"2\\nR 0\\nG 2\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4''') == '''2\nR 0\nG 2'''\n\nassert solution('''7 5\n0 3\n1 2\n2 4\n4 6\n5 7\n0 1\n1 2\n2 4\n2 5\n2 6\n3 5\n3 7\n3 6\n4 5\n4 7\n5 6\n''') == '''7\nR 0\nG 3\nG 2\nR 1\nR 2\nG 4\nG 5\nR 6\nG 7'''\n\nassert solution('''7 7\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n0 3\n1 4\n2 5\n3 6\n4 7\n0 2\n1 3\n2 4\n3 5\n2 6\n3 7\n2 6\n3 7\n0 3\n1 4\n2 5\n3 6\n4 7\n0 2\n1 3\n2 4\n3 5\n2 6\n3 7\n0 3\n1 4\n2 5\n3 6\n4 7\n''') == '''7\nR 0\nR 1\nR 2\nR 3\nR 4\nR 5\nG 6\nG 7\nR 0\nG 1\nG 2\nR 1\nR 2\nG 4\nG 5\nR 3\nG 6\nR 4\nG 7'''\n\nassert solution('''3 5\n0 3\n1 4\n2 5\n0 3\n1 4\n2 5\n0 3\n1 4\n2 5\n''') == '''5\nG 1\nG 2\nR 3\nR 1\nR 2'''\n\nassert solution('''5 5\n0 3\n1 4\n2 5\n4 6\n5 7\n0 4\n2 5\n3 6\n4 7\n0 4\n2 5\n3 6\n4 7\n''') == '''5\nR 0\nG 1\nR 2\nG 3\nG 4\nG 5\nR 3\nR 2\nR 1\nG 4\nG 5\nR 4\nG 6\nR 5\nG 7'''"
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n\") == \"2\\nR 0\\nG 2\"\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\") == \"2\\nR 0\\nG 2\"\nprint(solution(\"5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\"))\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"R 0 G 1\"\nassert solution(\"6 4\") == \"G 0 G 1\"\nassert solution(\"1 1\") == \"R 0\"\nassert solution(\"2 3\") == \"R 1 G 2\"\nassert solution(\"3 2\") == \"R 0 G 1\"\n\"\"\"\n\nn, m = list(map(int, input().split()))\n\nmatrix = []\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\nprint(\"R\", end=\" \")\n\nfor i in range(m):\n    #pairs = list(map(int, input().split()))\n    #matrix[pairs[0]][pairs[1]] = matrix[pairs[1]][pairs[0]] = 1\n    matrix[i][i] = 1\n    print(\"G\", i, end=\" \")\n\nprint(\"\")\n"
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n\") == \"2\\nR 0\\nG 2\"\n\"\"\""
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\") == \"2\\nR 0\\nG 2\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\") == \"2\\nR 0\\nG 2\"\nassert solution(\"6 5\\n0 1\\n0 3\\n1 2\\n2 4\\n3 5\\n0 4\\n1 5\\n3 4\") == \"4\\nG 0\\nG 1\\nG 3\\nR 2\\nG 5\"\nassert solution(\"6 7\\n0 1\\n0 3\\n1 2\\n2 4\\n3 5\\n4 6\\n0 6\\n1 6\\n3 6\") == \"1\\nR 0\\nG 2\\nG 3\\nG 4\\nG 5\\nR 6\\nG 6\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4''') == '''2\nR 0\nG 2'''\n\nassert solution(\n'''5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4''') == '''2\nR 0\nG 2'''\n\nassert solution(\n'''7 8\n0 1\n0 2\n0 4\n1 3\n1 5\n2 6\n3 7''') == '''3\nG 0\nG 1\nR 1\nR 3\nG 2\nG 5\nG 6\nR 7'''\n\nassert solution(\n'''8 8\n0 1\n0 2\n0 4\n1 3\n1 5\n2 6\n3 7\n3 8''') == '''3\nG 0\nG 1\nR 1\nR 3\nG 2\nG 5\nR 7\nG 8'''\n\nassert solution(\n'''8 8\n0 1\n0 2\n0 4\n1 3\n1 5\n2 6\n3 7\n3 8\n4 5''') == '''3\nG 0\nG 1\nR 1\nR 3\nG 2\nG 5\nR 7\nG 8\nR 4'''"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F\") == 2\n"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n\"\"\") == \"2\"\n\n\"\"\"\nAll the states will have some raw material sites, some factories and some transportation companies.\nYou are allowed to contract only one supplier per state and one factory per state. \nThe supply of raw materials must be a strict subset of the supply of factories.\n\nIf you have two suppliers that supply to the same factory, then the supply of raw materials is a strict subset of the supply of factories.\n\nIf you have two suppliers that supply to the same factory and the raw materials, then the supply of raw materials is a strict subset of the supply of factories.\n\nIf you have two factories that supply to the same supplier, then the supply of raw materials is a strict subset of the supply of factories.\n\nIf you have two factories that supply to the same supplier and the raw materials, then the supply of raw materials is a strict subset of the supply of factories.\n\"\"\"\n\"\"\"\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n\nSupply is:\nA: 3\nB: 2\nC: 1\nD: 0\nE: 3\nF: 2\nG: 0\n\"\"\"\n\n\"\"\"\n6 2 2 2\nA B\nB D\nA E\nE C\nA F\nB G\n\nSupply is:\nA: 2\nB: 2\nD: 1\nE: 2\nC: 1\nF: 2\nG: 1\n\"\"\"\n\"\"\"\n6 3 2 1\nA B C\nD E F\n3 A E G\n\nSupply is:\nA: 3\nB: 3\nC: 1\nD: 0\nE: 2\nF: 2\nG: 0\n\"\"\"\n\n\"\"\"\n8 4 3 1\nA B C D\nE F G H\n3 A E G\n4 A D E\n3 A E H\n\nSupply is:\nA: 4\nB: 4\nC: 4\nD: 4\nE: 2\nF: 1\nG: 1\nH: 1\n\"\"\"\n\n\"\"\"\n4 4 2 1\nA B C D\nE F G H\n3 A E G\n4 A D E\n3 A E H\n\nSupply is:\nA: 4\nB: 4\nC: 4\nD: 4\nE: 2\nF: 1\nG: 1\nH: 1\n\"\"\"\n\"\"\"\n4 4 2 1\nA B C D\nE F G H\n3 A E G\n4 A D E\n3 A E H\n\nSupply is:\nA: 4\nB: 4\nC: 4\nD: 4\nE: 2\nF: 1\nG: 1\nH: 1\n\"\"\"\n\"\"\"\n4 4 2 1\nA B C D\nE F G H\n3 A E G\n4 A D E\n3 A E H\n\nSupply is:\nA: 4\nB: 4\nC: 4\nD: 4\nE: 2\nF: 1\nG: 1\nH: 1\n\"\"\"\n\n\"\"\"\n4 4 2 1\nA B C D\nE F G H\n3 A E G\n4 A D E\n3 A E H\n\nSupply is:\nA: 4\nB: 4\nC: 4\nD: 4\nE: 2\nF: 1\nG: 1\nH: 1\n\"\"\"\n\n\"\"\"\n4 4 2 1\nA B C D\nE F G H\n3 A E G\n4 A D E\n3 A E H\n\nSupply is:\nA: 4\nB: 4\nC: 4\nD: 4\nE: 2\nF: 1\nG: 1\nH: 1\n\"\"\"\n\"\"\"\n4 4 2 1\nA B C D\nE F G H\n3 A E G\n4 A D E\n3 A E H\n\nSupply is:\nA: 4\nB: 4\nC: 4\nD: 4\nE: 2\nF: 1\nG: 1\nH: 1\n\"\"\"\n\n\"\"\"\n4 4 2 1\nA B C D\nE F G H\n3 A E G\n4 A D E\n3 A E H\n\nSupply is:\nA: 4\nB: 4\nC: 4\nD: 4\nE: 2\nF: 1\nG: 1\nH: 1\n\"\"\"\n\"\"\"\n4 4 2 1\nA B C D\nE F G H\n3 A E G\n4 A D E\n3 A E H\n\nSupply is:\nA: 4\nB: 4\nC: 4\nD: 4\nE: 2\nF: 1\nG: 1\nH: 1\n\"\"\"\n\"\"\"\n4 4 2 1\nA B C D\nE F G H\n3 A E G\n4 A D E\n3 A E H\n\nSupply is:\nA: 4\nB: 4\nC: 4\nD: 4\nE: 2\nF: 1\nG: 1\nH: 1\n\"\"\"\n\"\"\"\n4 4 2 1\nA B C D\nE F G H\n3 A E G\n4 A D E\n3 A E H\n\nSupply is:\nA: 4\nB: 4\nC: 4\nD: 4\nE: 2\nF: 1\nG: 1\nH: 1\n\"\"\"\n\"\"\"\n4 4 2 1\nA B C D\nE F G H\n3 A E G\n4 A D E\n3 A E H\n\nSupply is:\nA: 4\nB: 4\nC: 4\nD: 4\nE: 2\nF: 1\nG: 1\nH: 1\n\"\"\"\n\"\"\"\n4 4 2 1\nA B C D\nE F G H\n3 A E G\n4 A D E\n3 A E H\n\nSupply is:\nA: 4\nB: 4\nC: 4\nD: 4\nE: 2\nF: 1\nG: 1\nH: 1\n\"\"\"\n\"\"\"\n4 4 2 1\nA B C D\nE F G H\n3 A E G\n4 A D E\n3 A E H\n\nSupply"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F\") == 2\n\nassert solution(\"7 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F\") == 2\n\n-----Explanation-----\nSuppose that each transportation company is allowed to contract with at most one factory and at most one raw material site. This implies that no factory can be supplied with more raw material than its own, nor can a raw material site be supplied with more than one factory.\n\nThus, the maximum number of factories that can be supplied with raw materials is the maximum number of raw material sites and the maximum number of factories. These two values, $r$ and $f$, determine the number of states.\n\nSuppose that you contract the following three transportation companies: firm $1$ can transport between states A, E and G; firm $2$ can transport between states A, C and E; and firm $3$ can transport between states B, D and F.\n\nIn this case, you can supply at most two factories: factory E can be supplied from supplier A using firm $1$, and factory F can be supplied from supplier B using firm $3$.\n\nWe can also conclude that there are at most four states, one for each raw material site, and at most three factories.\n\"\"\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\n\nassert solution('''1 1 1 1\nA\n''') == '0'\n\nassert solution('''5 1 3 4\nA\n''') == '3'\n\nassert solution('''7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\n\nassert solution('''7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '3'"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F\") == 2\n"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F\\n\") == \"2\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F') == '2'\n\"\"\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F\\n') == '2'\n"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\nprint('All tests passed.')\n"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\nYYY\\nNYY\\nYNY') == '2\\n1 2 3'\nassert solution('4\\nYYYY\\nYNYY\\nYNYY\\nYNYY') == '2\\n1 2 3 4'\nassert solution('5\\nYYYYY\\nYNYYY\\nYNYYY\\nYNYYY\\nYNYYY') == '3\\n1 2 3 4 5'\nassert solution('6\\nYYYYY\\nYNYYY\\nYNYYY\\nYNYYY\\nYNYYY\\nYNYYY\\nYNYYY') == '3\\n1 2 3 4 5 6'\nassert solution('7\\nYYYYY\\nYNYYY\\nYNYYY\\nYNYYY\\nYNYYY\\nYNYYY\\nYNYYY\\nYNYYY') == '3\\n1 2 3 4 5 6 7'\n"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('\\n'.join([\n    '3',\n    'YYY',\n    'NYY',\n    'YNY',\n])) == '2\\n1 2 3'\nassert solution('\\n'.join([\n    '3',\n    'YYY',\n    'NYY',\n    'YNY',\n])) == '2\\n1 2 3'\nassert solution('\\n'.join([\n    '5',\n    'YYY',\n    'YNY',\n    'YYY',\n    'NYY',\n    'NYY',\n])) == '2\\n1 2 3\\n3 1 2'\nassert solution('\\n'.join([\n    '5',\n    'YYY',\n    'YNY',\n    'YNY',\n    'YYY',\n    'NYY',\n    'YNY',\n])) == '0'\nassert solution('\\n'.join([\n    '4',\n    'NYY',\n    'NYY',\n    'YYY',\n    'YNY',\n    'NYY',\n    'YNY',\n])) == '3\\n3 1 2'\n"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\nYYY\\nNYY\\nYNY') == '2\\n1 2 3'\nassert solution('4\\nNNY\\nNYY\\nYYY\\nNNY') == '0'\nassert solution('4\\nNNY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY') == '1\\n1 2 3'\nassert solution('4\\nNNY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY') == '2\\n1 2 3'\nassert solution('4\\nNNY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nNNY\\nYYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYYY\\nNYY\\nYYY\\nNNY\\nYY"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\nYYY\\nNYY\\nYNY') == '2\\n1 2 3'\nassert solution('2\\nNYY\\nYNY') == '2\\n3 1 2'\nassert solution('2\\nYYY\\nNYY') == '1\\n2 3'\nassert solution('1\\nY') == '0'\nassert solution('2\\nYYY\\nYNY') == '1\\n1 2'\n\n-----Instructions-----\nYou have been given a single test case to solve.\n\nYou can make use of a function named f.\n\nYou can make use of the statement 'pass'.\n\nYou can make use of the built-in function int().\n\nYou can make use of the statement '"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nYYY\\nNYY\\nYNY\\n') == '2\\n1 2 3\\n3 1 2'\nassert solution('4\\nYYYY\\nNYYY\\nYNYY\\nYYYY\\nYNYY\\n') == '3\\n1 2 3 4\\n2 3 1 4\\n3 4 1 2'\nassert solution('7\\nYYYYY\\nNYYNY\\nYNYNY\\nYYYYY\\nYNYYY\\nYYYYY\\nYNYYY\\n') == '5\\n1 2 3 4 5 6 7\\n1 3 5 7 2 4\\n1 4 7 2 3 6\\n1 5 2 7 6 3\\n1 6 3 7 2 5'\nassert solution('10\\nYYYYYY\\nNYYYNY\\nYNYNYY\\nYYYYYY\\nYNYYYY\\nYYYYYY\\nYNYYYY\\nYYYYYY\\nYNYYYY\\n') == '4\\n1 2 3 4 5 6 7 8 9 10\\n1 3 5 7 9 10 2 4\\n1 4 9 10 2 3 6\\n1 5 2 9 6 3 7\\n1 6 3 9 7 2 5\\n1 7 5 9 2 6 3\\n1 8 2 9 3 7 5\\n1 9 3 8 5 7 2\\n1 10 4 8 2 9 6'\nassert solution('12\\nYYYYYYY\\nNYYYNYY\\nYNYNYYY\\nYYYYYYY\\nYNYYYYY\\nYYYYYYY\\nYNYYYYY\\nYYYYYYY\\nYNYYYYY\\nYYYYYYY\\nYNYYYYY\\n') == '5\\n1 2 3 4 5 6 7 8 9 10 11\\n1 3 5 7 9 10 11 2 4\\n1 4 9 10 2 11 3 6\\n1 5 2 9 6 3 11 7\\n1 6 3 9 7 2 11 5\\n1 7 5 9 2 6 3 11\\n1 8 2 9 3 7 5 11\\n1 9 3 8 5 7 2 11\\n1 10 4 8 2 9 6 11'\n\n\"\"\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('NYY') == '1 2 3'\n"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(example_input_1) == example_output_1\n\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin: str) -> str:\n        pass\n\nexample_input_1 = \"\"\nexample_output_1 = \"\""
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('YYY\\nNYY\\nYNY\\n') == '2\\n1 2 3'\nassert solution('YYY\\nNYY\\nYNY\\nYYY\\nYNY\\nYNY\\nYYY\\n') == '0'\nassert solution('YYY\\nNYY\\nYNY\\nYYY\\nYNY\\nYNY\\n') == '0'\nassert solution('YYY\\nYYY\\nYNY\\nYYY\\nYNY\\nYNY\\n') == '0'\nassert solution('YYY\\nYYY\\nYNY\\nYYY\\nYNY\\nYNY\\n') == '0'"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nYYY\\nNYY\\nYNY\") == \"2\\n1 2 3\"\nprint(solution(\"3\\nYYY\\nNYY\\nYNY\"))\nassert solution(\"2\\nNYY\\nYYY\") == \"0\\n1 2\"\nprint(solution(\"2\\nNYY\\nYYY\"))\n\"\"\"\n"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2''') == '4 0 5'\n\"\"\"\n"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n....\\n...x\\n...x\\n...\") == \"0 0 0\"\nassert solution(\"3 3\\n....\\n...x\\nx...\\n...\") == \"1 1 2\"\nassert solution(\"3 3\\n....\\n...x\\n..x.\\n...\") == \"1 0 1\"\nassert solution(\"3 3\\n....\\nx...\\n...x\\n...\") == \"1 1 2\"\nassert solution(\"3 3\\n....\\n...x\\n..x.\\n...\") == \"1 0 1\"\n"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n'''\n\nrows, columns = [int(x) for x in stdin.split()]\ngarden = []\nfor _ in range(rows):\n    garden.append(list(stdin.readline().strip()))\napples = []\nfor _ in range(int(stdin.readline())):\n    apples.append([int(x) for x in stdin.readline().split()])"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n..\\n...\\n...\\n3\\n1 3\\n1 1\\n3 2\") == \"4\\n0\\n5\"\nassert solution(\"4 3\\n.x.\\n.x.\\nx.\\n3\\n1 2\\n2 2\\n3 2\") == \"0\\n4\\n4\"\nassert solution(\"4 3\\n.x.\\n.x.\\n.x.\\n3\\n1 1\\n2 2\\n3 3\") == \"5\\n5\"\n\n---------------\nfrom sys import stdin\n\nR, S = map(int, stdin.readline().strip().split())\nmatrix = [stdin.readline().strip() for _ in range(R)]\n\nG = int(stdin.readline().strip())\nrow_idx, col_idx = [], []\n\nfor _ in range(G):\n    r, c = map(int, stdin.readline().strip().split())\n    row_idx.append(r - 1)\n    col_idx.append(c - 1)\n\nfrom itertools import product\n\nresults = []\nfor indices in product(range(R), range(S)):\n    if indices in (row_idx, col_idx):\n        continue\n    distance = sum((r - indices[0])**2 + (s - indices[1])**2 for r, s in zip(row_idx, col_idx))\n    results.append(distance)\n\nfor result in sorted(results):\n    print(result)\n"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n...\\n...\\n...\\n3\\n1 3\\n1 1\\n3 2') == '4\\n0\\n5'\n\nassert solution('3 3\\n...\\n...\\n...\\n3\\n3 1\\n3 2') == '0\\n0\\n1'\n\nassert solution('5 5\\n...\\n...\\n...\\n...\\n...\\n3 2') == '2\\n0\\n2\\n0\\n0\\n0'\n\nassert solution('5 5\\n...\\n...\\n...\\n...\\n...\\n3 1') == '1\\n0\\n1\\n0\\n0\\n0'\n\nassert solution('7 7\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n3 2') == '1\\n1\\n2\\n0\\n0\\n0\\n0\\n0'"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n..\\n...\\n...\\n3\\n1 3\\n1 1\\n3 2\") == \"4 0 5\"\nprint(\"Passed\")\n\n----"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n...\\n...\\n...\\n3\\n1 3\\n1 1\\n3 2\\n\") == \"4\\n0\\n5\"\n\"\"\""
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(input()))\n\n----\n\nIt is often heard that the apple doesn't fall far from the tree. But is that really so?\n\nThe National Statistics Department has tracked the falling of apples in a fruit garden for $G$ consecutive years. The fruit garden can be represented as a matrix with dimensions $R \\times S$. Each field of the matrix can contain more than one apple tree.\n\nInterestingly enough, each year there was exactly one apple fall, so the Department decided to write down $G$ pairs of numbers $(r_ i, s_ i)$ that denote the row and column of the location where the apple fell during the $i$-th year. Moreover, by next year, a new tree grew at that location.\n\nYour task is to determine the squared distance between the nearest tree and the apple that fell, measured in unit fields of the matrix (we assume it is that tree from which the apple fell).\n\nThe distance between fields $(r_1, s_1)$ and $(r_2, s_2)$ in the matrix are calculated as\\begin{equation*} d((r_1, s_1),(r_2, s_2)) = \\sqrt {(r_1-r_2)^2 + (s_1-s_2)^2} \\end{equation*}\n\n-----Input-----\nThe first line of input contains two integers, $R$ and $S$ ($1 \\leq R, S \\leq 500$), the number of rows and columns of the matrix.\n\nEach of the following $R$ lines contains $S$ characters \u2019x\u2019 or \u2019.\u2019. The character \u2019.\u2019 denotes an empty field, and the character \u2019x\u2019 denotes a field with at least one tree.\n\nThe fruit garden will initially contain at least one tree.\n\nAfter that, an integer $G$ ($1 \\leq G \\leq 10^5$) follows, the number of years the fruit garden has been under observation.\n\nEach of the following $G$ lines describes the falls of the apples. Each line contains a pair of space-separated integers $r_ i$, $s_ i$ that denote the row and column of the location where the apple fell in the $i$-th year ($1 \\leq r_ i \\leq R$, $1 \\leq s_ i \\leq S$).\n\n-----Output-----\nOutput $G$ numbers, the required squared distances from the task, each in its own line.\n\n-----Examples-----\nSample Input:\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\nSample Output:\n4\n0\n5\n"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\nx..\\n...\\n...\\n3\\n1 3\\n1 1\\n3 2') == '4\\n0\\n5'\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n...\\nx.\\n...\\nx.\\n1 3\\n1 1\\n3 2\") == '0\\n5'\nassert solution(\"3 3\\n...\\nx.\\n...\\nx.\\n3 2\\n1 1\\n3 2\") == '0\\n0\\n0'\nassert solution(\"4 4\\n...\\nx.\\n...\\nx.\\n3 2\\n1 1\\n3 2\") == '0\\n0'\nassert solution(\"3 2\\n.x\\n..\\n..\\n1 1\") == '2'\nassert solution(\"3 3\\nx..\\n...\\nx.\\n3 2\\n1 1\\n3 2\") == '0\\n0\\n0'\n\n\"\"\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1\\n1\") == \"1.414 -1.414\"\nassert solution(\"4\\n2\\n3\\n4\\n5\\n5\\n5\\n2\\n3\") == \"5.000 3.000\"\nassert solution(\"6\\n3\\n1\\n4\\n6\\n3\\n1\\n5\\n2\\n2\") == \"4.004 -2.751\"\n\n-----Explanation-----\n\nEach line in the input file represents the length of a segment of the arm. The first line is the number of segments.\n\nFor each line of the input file, the solution function computes the tip coordinates of each segment and then calculates the absolute error between the distance to the target point and the minimum possible distance to the target point. The absolute error is defined as the sum of the differences in the x and y coordinates.\n\nThe minimum possible distance to the target is the distance between the origin of the arm and the target point.\n\nThe first example returns the coordinates of the tip of the arm, which is the tip of the last segment of the arm. Since the distance from the origin of the arm to the tip of the last segment is 5, the minimum possible distance to the target is 5. Therefore, the absolute error is 5.\n\nThe second example returns the coordinates of the tip of the arm, which is the tip of the last segment of the arm. Since the distance from the origin of the arm to the tip of the last segment is 4, the minimum possible distance to the target is 4. Therefore, the absolute error is 4.\n\nThe third example returns the coordinates of the tip of the arm, which is the tip of the last segment of the arm. Since the distance from the origin of the arm to the tip of the last segment is 6, the minimum possible distance to the target is 6. Therefore, the absolute error is 6.\n\n-----Input-----\nThe first line of input contains an integer $N$ indicating the number of segments.\n\nEach line of the rest of the input contains two integers $L_ i$ and $x_ i$ indicating the length of the $i$th segment and the x coordinate of its tip, respectively.\n\nThe second line contains two integers $x$, $y$ indicating the x coordinate of the target point and the y coordinate of the target point, respectively.\n\n-----Constraints-----\n\n$1$\n\n$\\leq $\n\n$N$\n\n$\\leq $\n\n$1000$\n\nLength of the $i$th segment\n\n$-20000$\n\n$\\leq $\n\n$x_ i$\n\n$\\leq $\n\n$20000$\n\nTarget coordinates to attempt to reach\n\n-----Output-----\nThe output should contain $N$ lines, each containing two real numbers $x_ i$, $y_ i$ indicating the coordinates of the tip of the $i$th segment.\n\nThe length of the $i$th segment computed from the solution and input $L_ i$ may not differ by more than $0.01$. Similarly, the absolute error between the solution\u2019s distance to the target and the minimum possible distance to the target cannot exceed $0.01$.\n\nNote that, in general, there are many solutions. Your program may output any of them.\n\n-----Explanation for Sample Input 1-----\nThe sample output for sample input 1 is shown above.\n\nSample output 1 corresponds to the drawing on the left:\n\nThe drawing on the right corresponds to the following, equally acceptable output for sample input 1:\n\n4.114 -2.842\n6.297 -0.784\n5.000 3.000\n\n-----Explanation-----\n\nThe solution function determines the tip coordinates of each segment and then calculates the absolute error between the distance to the target point and the minimum possible distance to the target point. The absolute error is defined as the sum of the differences in the x and y coordinates.\n\nThe minimum possible distance to the target is the distance between the origin of the arm and the target point.\n\nThe first example returns the coordinates of the tip of the arm, which is the tip of the last segment of the arm. Since the distance from the origin of the arm to the tip of the last segment is 5, the minimum possible distance to the target is 5. Therefore, the absolute error is 5.\n\nThe second example returns the coordinates of the tip of the arm, which is the tip of the last segment of the arm. Since the distance from the origin of the arm to the tip of the last segment is 4, the minimum possible distance to the target is 4. Therefore, the absolute error is 4.\n\nThe third example returns the coordinates of the tip of the arm, which is the tip of the last segment of the arm. Since the distance from the origin of the arm to the tip of the last segment is 6, the minimum possible distance to the target is 6. Therefore, the absolute error is 6.\n\n-----Sample Input 2-----\n3\n5\n3\n4\n5 3\nSample Output:\n4.114 -2.842\n6.297 -0.784\n5.000 3.000\n-----Explanation-----\n\nEach line of the input file represents the length of a segment of the arm. The first line is the number of segments.\n\nFor each line of the input file, the solution function computes the tip coordinates of each segment and then calculates the absolute error between the distance to the target point and the minimum possible distance to the target point. The absolute error is defined as the sum of the differences in the x and y coordinates.\n\nThe minimum possible distance to the target is the distance between the origin of the arm and the target point.\n\nThe first example returns the coordinates of the tip of the arm, which is the tip of the last segment of the arm. Since the distance from the origin of the arm to the tip of the last segment is 5, the minimum possible distance to the target is 5. Therefore, the absolute error is 5.\n\nThe second example returns the coordinates of the tip of the arm, which is the tip of the last segment of the arm. Since the distance from the origin of the arm to the tip of the last segment is 4, the minimum possible distance to the target is 4. Therefore, the absolute error is 4.\n"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\"\nprint(solution(\"3\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\")"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == '1.0 0.0'\nassert solution('4\\n2.0 3.0\\n2.0 3.0\\n1.0 2.0\\n1.0 2.0\\n1.0 2.0\\n1.0 2.0') == '1.0 2.0'\nassert solution('4\\n3.0 4.0\\n2.0 3.0\\n2.0 3.0\\n1.0 2.0\\n1.0 2.0\\n1.0 2.0') == '2.0 2.0'\n"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5\\n3\\n4\\n5 3') == '4.114 -2.842\\n6.297 -0.784\\n5.000 3.000'\nprint(solution('3\\n5\\n3\\n4\\n5 3'))\n\n-----Solution-----\n\"\"\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\n\"\"\"\n\nimport math\n\nN = int(input())\n\nL = []\nfor i in range(N):\n    L.append(float(input()))\n\nx, y = map(int, input().split())\n\nx -= 1\ny -= 1"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\""
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\nprint(solution(\"3\\n5\\n3\\n4\\n5 3\"))\n\nassert solution(\"3\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\nprint(solution(\"3\\n5\\n3\\n4\\n5 3\"))\n\n-----Problem-----\n\nJo\u00e3o \u00e9 um programador desempregado que gostaria de se alistar na junta militar. Ele \u00e9 at\u00e9 aprovado em sua escola militar e j\u00e1 mede um sal\u00e1rio fixo, mais de R$ 15.000,00.\n\nO aposentadoria do militar segue a seguinte regra: o aposentadoria \u00e9 liberada aos seis primeiros anos do servi\u00e7o. \u00c9 poss\u00edvel concluir que, em cada ano, o alistamento \u00e9 liberado de acordo com as seguintes regras:\n\nSe ele tem menos de 1/3 do sal\u00e1rio, o aposentadoria deve ser liberada no ano que ocorre o alistamento.\nSe ele tem entre 1/3 e 1/2 do sal\u00e1rio, o aposentadoria deve ser liberada no ano que ocorre o alistamento, mais 5 anos ap\u00f3s o ano em que ele concluiu o servi\u00e7o militar.\nSe ele tem mais de 1/2 do sal\u00e1rio, o aposentadoria deve ser liberada no ano que ocorre o alistamento, mais 10 anos ap\u00f3s o ano em que ele concluiu o servi\u00e7o militar.\nO aposentadoria do militar se repete cada quatro anos at\u00e9 o ano de alistamento.\nNo qual ano o aposentadoria foi liberada?\n\n-----Input-----\nUm \u00fanico inteiro $N$ indicando o n\u00famero de anos de anos de servi\u00e7o no Ex\u00e9rcito Brasileiro. Em seguida, um inteiro $N$ indicando o sal\u00e1rio bruto mensal.\n\n-----Output-----\nUm \u00fanico inteiro $N$, em qual ano o aposentadoria foi liberada.\n\n-----Exemplos de Entrada-----\n7\n150000\n\n-----Exemplos de Sa\u00edda-----\n2\n\n5\n\n7\n\n-----Exemplos de Entrada-----\n15\n15000\n\n-----Exemplos de Sa\u00edda-----\n1\n\n4\n\n8\n\n-----Exemplos de Entrada-----\n11\n150000\n\n-----Exemplos de Sa\u00edda-----\n5\n\n6\n\n7\n\n8\n\n-----Exemplos de Entrada-----\n7\n25000\n\n-----Exemplos de Sa\u00edda-----\n1\n\n4\n\n5\n\n6\n\n7\n\n-----Exemplos de Entrada-----\n9\n25000\n\n-----Exemplos de Sa\u00edda-----\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n-----Exemplos de Entrada-----\n12\n25000\n\n-----Exemplos de Sa\u00edda-----\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n-----Exemplos de Entrada-----\n15\n25000\n\n-----Exemplos de Sa\u00edda-----\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n-----Exemplos de Entrada-----\n18\n25000\n\n-----Exemplos de Sa\u00edda-----\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\") == \"3\\n5\\n8\\n10\\n13\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n\") == '3\\n5\\n8\\n10\\n13\\n'\n"
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8') == '3\\n5\\n8\\n10\\n13'\n\nSolution:\nn, q = [int(x) for x in stdin.readline().split()]\nenergies = [int(x) for x in stdin.readline().split()]\nfor i in range(q):\n    print(min(x + y for x in energies for y in energies if x + y <= n))\n"
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n\") == \"3\\n5\\n8\\n10\\n13\"\n\"\"\""
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n') == '3\\n5\\n8\\n10\\n13'\nprint('Hooray!')\n"
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n') == '3\\n5\\n8\\n10\\n13\\n'\nassert solution('4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n') == '3\\n5\\n8\\n10\\n13\\n'\nassert solution('4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n') == '3\\n5\\n8\\n10\\n13\\n'\n\n\"\"\""
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\") == '3\\n5\\n8'\n\"\"\""
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\") == \"3\\n5\\n8\\n10\\n13\"\n\"\"\"\n\nn, q = map(int, input().split())\na = list(map(int, input().split()))\nfor _ in range(q):\n    k = int(input())\n    if k <= n:\n        print(a[k - 1])\n    else:\n        total = 0\n        for i in range(n):\n            for j in range(i + 1, k):\n                if i + j == k:\n                    total += a[i] * a[j]\n        print(total)\n"
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n\") == \"3\\n5\\n8\\n10\\n13\"\n\"\"\"\n\nfrom math import inf\n\nn, q = [int(i) for i in input().split()]\n\nn_list = [int(i) for i in input().split()]\n\nenergy_list = [0] * n\n\nfor _ in range(q):\n    k = int(input())\n    for i in range(n):\n        if n_list[i] <= k:\n            energy_list[i] += n_list[i] * n_list[i]\n            k -= n_list[i]\n        if k == 0:\n            break\n        elif k > 0:\n            if i == n - 1:\n                energy_list[i + 1] += k * k\n            else:\n                energy_list[i + 1] += k * k\n                k -= n_list[i + 1]\n\nprint(' '.join(map(str, energy_list)))\n"
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\") == \"3\\n5\\n8\\n10\\n13\"\n\"\"\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 4\n0 1\n1 2\n2 3\n0 2\n''') == '0'\nassert solution('''4 5\n0 1\n1 2\n2 3\n3 4\n4 4\n''') == '1'\nassert solution('''5 5\n0 1\n1 2\n2 3\n3 4\n4 5\n''') == '0'\nassert solution('''6 4\n0 1\n1 2\n2 3\n3 4\n4 4\n''') == '1'\nassert solution('''2 2\n0 1\n1 1\n''') == '0'\n\n'''\nfrom itertools import combinations\n"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '0'\nassert solution('6 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n2 2\\n3 3') == '1'\n\"\"\"\nfrom typing import List, Dict, Set, Optional\n\nclass Solution:\n    def __init__(self, num_pigs: int, num_wogs: int, graph: List[List[int]]) -> None:\n        self.num_pigs: int = num_pigs\n        self.num_wogs: int = num_wogs\n        self.graph: Dict[int, Set[int]] = {}\n        for edge in graph:\n            u, v = edge\n            if u not in self.graph:\n                self.graph[u] = set()\n            if v not in self.graph:\n                self.graph[v] = set()\n            self.graph[u].add(v)\n            self.graph[v].add(u)\n\n    def can_escape(self, vertex: int) -> bool:\n        if len(self.graph[vertex]) == 1:\n            return True\n        for u in self.graph[vertex]:\n            if len(self.graph[u]) == 1:\n                return False\n        return True\n\n    def solve(self) -> int:\n        # First, get a list of leaves\n        leaves: Set[int] = set()\n        for vertex in self.graph:\n            if len(self.graph[vertex]) == 1:\n                leaves.add(vertex)\n\n        # Now, look for a \"subtree\" of a leaf vertex\n        # Subtree here means the set of vertices in the graph that are connected to this leaf via only one edge.\n        # We look for a \"subtree\" of a leaf, and then we know which leaves need to have a wolf removed.\n        # We then look for a vertex which is only connected to one other vertex in the subtree,\n        # and we know that we can take that vertex out of the subtree and it will still allow all the leaves to have a wolf removed.\n        while leaves:\n            subtree = set()\n            for leaf in leaves:\n                if self.can_escape(leaf):\n                    subtree.add(leaf)\n            if len(subtree) == 1:\n                return len(self.graph) - len(subtree)\n            for vertex in self.graph:\n                if len(self.graph[vertex]) == 1 and vertex not in subtree:\n                    subtree.add(vertex)\n            leaves = subtree\n\n        return len(self.graph) - len(leaves)\n"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5 3\\n0 1\\n1 2\\n1 2\\n0 4') == '0'\n'''\n"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(out)"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\") == '0'\nassert solution(\"1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n1 3 5\\n1 4 5\\n1 5\") == '2'\nassert solution(\"1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n1 3 5\\n1 4 5\\n1 5\") == '1'\n"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '0'\n\"\"\"\n\n\nfrom collections import defaultdict, deque\nimport sys\n"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\") == \"0\"\n\n-----Notes-----\nThe graph is given as an input as an undirected, connected, and tree.\n\"\"\"\n\nimport math\nfrom collections import deque"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4\\n0 1\\n1 2') == '0'\n\nprint(solution(stdin=input.txt))\n\"\"\""
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n6 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5\n''') == '0'\n\nassert solution('''\n4 4\n0 1\n1 2\n2 3\n2 4\n''') == '4'\n\nassert solution('''\n6 2\n0 1\n2 5\n1 4\n2 3\n2 4\n''') == '2'\n\nassert solution('''\n8 1\n0 1\n0 2\n2 3\n3 4\n3 5\n3 6\n4 7\n''') == '0'\n\nassert solution('''\n7 4\n0 2\n0 1\n1 4\n1 5\n3 6\n3 7\n''') == '2'"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"4 4\") == \"0\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"5 1\") == \"0\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 5 C1 L1 C100 U1 C1\") == \"107\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import List, Dict\n\n\nclass Task:\n    def __init__(self, base_priority: int, start_time: int, instructions: List[str]):\n        self.base_priority = base_priority\n        self.start_time = start_time\n        self.instructions = instructions\n\n    def __repr__(self):\n        return str(self.__dict__)\n\n    def run(self, current_priority: int, current_time: int):\n        if self.start_time > current_time:\n            return\n\n        for instruction in self.instructions:\n            if instruction == \"C\":\n                current_priority = current_priority + 1\n            elif instruction == \"L\":\n                current_priority = max(current_priority, self.base_priority)\n            elif instruction == \"U\":\n                current_priority = current_priority - 1\n\n        return current_priority\n"
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\") == '106\\n107\\n71'\nprint(solution(stdin))\n\n\"\"\"\n\nfrom typing import Dict, List, Tuple\n\nINSTRUCTION_PREFIXES = [\"C\", \"L\", \"U\"]\nINSTRUCTION_TO_OPERATION = {\"C\": \"compute\", \"L\": \"lock\", \"U\": \"unlock\"}\n"
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\") == '106 107\\n71'\n\nassert solution(\"3 1\\n1 1 5 C1 L1 C1 U1 C1\\n70 3 1 C1\") == '106\\n71'\n\nassert solution(\"3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\") == '106 107\\n71'\n\nassert solution(\"3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\") == '106 107\\n71'\n\nassert solution(\"3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\") == '106 107\\n71'"
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\") == \"106\\n107\\n71\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == \"\"\"\\\n>>> solution('''\\\n... 3 1\n... 50 2 5 C1 L1 C1 U1 C1\n... 1 1 5 C1 L1 C100 U1 C1\n... 70 3 1 C1\n... ''')\n106\n107\n71\n\"\"\""
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n\"\"\"\n) == \"\"\"\n106\n107\n71\n\"\"\"\n\nassert solution(\n\"\"\"\n3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n\"\"\"\n) == \"\"\"\n106\n107\n71\n\"\"\"\n\nassert solution(\n\"\"\"\n2 1\n50 2 5 L1 U1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n\"\"\"\n) == \"\"\"\n106\n107\n71\n\"\"\"\n\nassert solution(\n\"\"\"\n2 1\n50 2 5 C1 L1 U1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n\"\"\"\n) == \"\"\"\n106\n107\n71\n\"\"\"\n\nassert solution(\n\"\"\"\n3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n\"\"\"\n) == \"\"\"\n106\n107\n71\n\"\"\""
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\") == \"106\\n107\\n71\"\n\"\"\""
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\") == \"106\\n107\\n71\"\n\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\") == \"10610701\"\n"
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('AA') == 51\nassert solution('ABC') == 4862\n\"\"\"\nimport itertools"
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AA\") == 51\nassert solution(\"AB\") == 0\nassert solution(\"AAB\") == 10\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AA\") == 51\nassert solution(\"AB\") == 0\nassert solution(\"ZY\") == 0\nassert solution(\"ZZ\") == 0\nassert solution(\"BB\") == 1\n"
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('A') == 1\nassert solution('AB') == 1\nassert solution('AA') == 1\nassert solution('BB') == 1\n"
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin), end=\"\")\n"
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AA\") == 51\n\"\"\"\nimport math"
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AA\") == 51\nassert solution(\"ABC\") == 63\nassert solution(\"ABBC\") == 63\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import Dict, List\n"
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('A') == '1'\nassert solution('AB') == '2'\nassert solution('AA') == '3'\nassert solution('ABA') == '5'\n"
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AA') == 51\nassert solution('ABBA') == 5018\n\"\"\""
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AA\") == 51\nassert solution(\"ABA\") == 102\nassert solution(\"AAABAABAA\") == 1032\nassert solution(\"AAABAABA\") == 34\n\nassert solution(\"BCBCBCBBBCBCBCBCBC\") == 169425\n"
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71') == '1 2'\nassert solution('2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n14 23 39 59 63\\n8 17 35 55 61\\n15 26 42 53 71\\n10 25 31 57 64') == '1 2'\n\"\"\""
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 29 45 56 68\") == '1 2'\nassert solution(\"3 29 45 56 68\") == 'no ties'\nassert solution(\"3 29 45 56 68\\n1 19 43 50 72\") == '1 2'\nassert solution(\"3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\") == '1 2'\nassert solution(\"3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\") == '1 2'\n"
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n\") == \"1 2\"\n\n\"\"\"\n\nimport sys\n\n\nclass Cards:\n    def __init__(self, cards):\n        self.cards = cards\n\n    def __str__(self):\n        return str(self.cards)\n\n    def __repr__(self):\n        return str(self.cards)\n\n    def check_card(self):\n        for i in range(len(self.cards)):\n            for j in range(len(self.cards[i])):\n                if (i == 0) and (j == 0):\n                    if (len(self.cards[i]) == 5) and (len(self.cards[j]) == 5):\n                        if self.cards[i][j] == self.cards[i + 1][j + 1] == self.cards[i + 2][j] == self.cards[i + 2][j + 1] == self.cards[i + 2][j + 2]:\n                            return self.cards[i][j], self.cards[i + 1][j + 1], self.cards[i + 2][j]\n                        elif self.cards[i][j] == self.cards[i + 1][j + 2] == self.cards[i + 2][j] == self.cards[i + 2][j + 1] == self.cards[i + 2][j + 2]:\n                            return self.cards[i][j], self.cards[i + 1][j + 2], self.cards[i + 2][j]\n                        elif self.cards[i][j] == self.cards[i + 2][j + 1] == self.cards[i + 2][j] == self.cards[i + 2][j + 2] == self.cards[i + 2][j + 3]:\n                            return self.cards[i][j], self.cards[i + 2][j + 1], self.cards[i + 2][j]\n                elif (i == 0) and (j!= 0) and (j!= len(self.cards[i]) - 1):\n                    if self.cards[i][j] == self.cards[i][j + 1] == self.cards[i + 1][j] == self.cards[i + 1][j + 1] == self.cards[i + 1][j + 2]:\n                        return self.cards[i][j], self.cards[i][j + 1], self.cards[i + 1][j]\n                    elif self.cards[i][j] == self.cards[i][j + 2] == self.cards[i + 1][j] == self.cards[i + 1][j + 1] == self.cards[i + 1][j + 2]:\n                        return self.cards[i][j], self.cards[i][j + 2], self.cards[i + 1][j]\n                    elif self.cards[i][j] == self.cards[i + 1][j] == self.cards[i + 1][j + 1] == self.cards[i + 1][j + 2] == self.cards[i + 1][j + 3]:\n                        return self.cards[i][j], self.cards[i + 1][j], self.cards[i + 1][j + 1]\n                elif (i == 0) and (j!= 0) and (j == len(self.cards[i]) - 1):\n                    if self.cards[i][j] == self.cards[i][j + 1] == self.cards[i + 1][j] == self.cards[i + 1][j + 1] == self.cards[i + 1][j + 2]:\n                        return self.cards[i][j], self.cards[i][j + 1], self.cards[i + 1][j]\n                    elif self.cards[i][j] == self.cards[i + 1][j] == self.cards[i + 1][j + 1] == self.cards[i + 1][j + 2] == self.cards[i + 1][j + 3]:\n                        return self.cards[i][j], self.cards[i + 1][j], self.cards[i + 1][j + 1]\n                elif (i!= 0) and (i!= len(self.cards) - 1) and (j == 0):\n                    if self.cards[i][j] == self.cards[i - 1][j + 1] == self.cards[i + 1][j] == self.cards[i + 1][j + 1] == self.cards[i + 1][j + 2]:\n                        return self.cards[i][j], self.cards[i - 1][j + 1], self.cards[i + 1][j]\n                    el"
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n\") == \"1 2\"\nassert solution(\"1 19 43 50 72\\n9 23 31 58 63\\n11 25 40 49 61\\n4 27 42 54 71\\n\") == \"1 2\"\nassert solution(\"1 19 43 50 72\\n9 23 31 58 63\\n11 25 40 49 61\\n4 27 42 54 71\\n\") == \"1 2\"\nassert solution(\"1 19 43 50 72\\n9 23 31 58 63\\n11 25 40 49 61\\n4 27 42 54 71\\n\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\") == \"1 2\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 29 45 56 68\\\\n1 19 43 50 72\\\\n11 25 40 49 61\\\\n9 23 31 58 63\\\\n4 27 42 54 71\") == \"1 2\"\n\n\"\"\"\n\n\nimport itertools\n"
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 29 45 56 68\\\\1 19 43 50 72\\\\11 25 40 49 61\\\\9 23 31 58 63\\\\4 27 42 54 71\") == \"1 2\"\nassert solution(\"3 29 45 56 68\\\\1 19 43 50 72\\\\11 25 40 49 61\\\\9 23 31 58 63\\\\4 27 42 54 71\\\\8 17 35 55 61\") == \"1 3\"\n\"\"\""
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str_input) == str_expected\nprint(solution(str_input))\n"
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 29 45 56 68\") == \"1 2\"\nassert solution(\"1 19 43 50 72\") == \"1 1\"\nassert solution(\"11 25 40 49 61\") == \"1 1\"\nassert solution(\"9 23 31 58 63\") == \"1 1\"\nassert solution(\"4 27 42 54 71\") == \"1 1\""
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 29 45 56 68\") == \"1 2\"\nassert solution(\"2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\") == \"1 2\"\nassert solution(\"2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n14 23 39 59 63\\n8 17 35 55 61\\n15 26 42 53 71\\n10 25 31 57 64\\n6 20 44 52 68\") == \"1 2\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3 2 1\\n1 2 3\\n1 2 3\") == '0'\n\"\"\""
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 1 4 3\\n3 1 2\\n3 2 4') == '1'\n\nassert solution('4\\n3 1 2 4\\n3 2 1\\n3 2 4') == '2'\n\nassert solution('4\\n3 1 2 4\\n3 3 1 2\\n3 3 2 4') == '0'\n\nassert solution('4\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3\\n4 1 2 3') == '2'\n\nprint('Test finished.')\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\na = sys.stdin.readline().split()\nb = sys.stdin.readline().split()\nc = sys.stdin.readline().split()\n\ncount = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        for k in range(j + 1, N):\n            if a[i] < a[j] < a[k] or a[j] < a[i] < a[k] or a[k] < a[i] < a[j]:\n                if b[i] < b[j] < b[k] or b[j] < b[i] < b[k] or b[k] < b[i] < b[j]:\n                    if c[i] < c[j] < c[k] or c[j] < c[i] < c[k] or c[k] < c[i] < c[j]:\n                        count += 1\n\nprint(count)\n"
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\\n1 2 3\\n1 2 3\") == \"0\"\n\"\"\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n2\n1 1\n1 2\n\"\"\") == '0'\nassert solution(\n\"\"\"\n5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n\"\"\") == '1'\nassert solution(\n\"\"\"\n5\n4 5 3 2 1\n2 3 1 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n\"\"\") == '0'\nassert solution(\n\"\"\"\n6\n1 2 1\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n\"\"\") == '0'\nassert solution(\n\"\"\"\n10\n3 1 2 1\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n\"\"\") == '1'\n\"\"\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n3 2 1') == '0'\n\nimport math\nfrom collections import Counter\n"
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3\\n1 2 3\\n1 2 3') == '0'\n"
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\\n1 2 3\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n3 2 1\\n1 2 3\\n1 2 3\\n') == '0'\n\n-----Hints-----\n- What happens if we put the same camels in the same order in all bets?\n\"\"\""
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n3 2 1\\n1 2 3\\n1 2 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571'\nprint(solution(stdin))\n"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\") == \"0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571\"\n"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571'\n\"\"\"\n\nimport sys\nimport numpy as np\nimport time\nimport random\n"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571'\nassert solution('4\\n5 3 2\\n2 3 4\\n3 2 5\\n7 1 2') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571'\nassert solution('4\\n5 4 2\\n5 4 2\\n5 4 2\\n5 4 2') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571'\nassert solution('4\\n3 3 2\\n2 3 4\\n3 2 5\\n7 1 2') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571'\n\n-----Challenge-----\n\nEdit the program so that it can handle multiple traffic lights. You should also adjust the output so that it shows the probability that this light will be the first red light and the probability that an \u201cideal\u201d car makes it all the way without stopping.\n\nSample Input:\n2\n1 2 3\n6 2 3\n10 2 3\n16 3 4\nSample Output:\n0.4 0\n0 0.2 0.171428571429 0.228571428571\n0.4 0\n0 0.2 0.171428571429 0.228571428571\n-----Extra-----\n\nThe traffic light cycle can be visualized as a graph. For a particular light, its green portion is in the interval $[0, g]$, and its red portion is in the interval $[r, 2r+g]$. You can see how the red portion is split up in the following way:\n\nTime $0$: light is red, so it lasts $0$ seconds\nTime $r$: light is green, so it lasts $r$ seconds, then it turns red\nTime $2r$: light is red, so it lasts $2r$ seconds\nTime $2r+g$: light is green, so it lasts $g$ seconds, then it turns red\nTime $r+2g$: light is red, so it lasts $r+2g$ seconds\nTime $r+2g+r$: light is green, so it lasts $2r+g$ seconds, then it turns red\nTime $r+2g+r+g$: light is red, so it lasts $3r+2g+r+g$ seconds\nTime $3r+2g+r+g$: light is green, so it lasts $2g+r+g$ seconds, then it turns red\nTime $3r+2g+r+g+g$: light is red, so it lasts $3r+2g+r+g+g$ seconds\nTime $r+3g+r+g+g$: light is green, so it lasts $2r+2g+r+g+g$ seconds, then it turns red\nTime $r+3g+r+g+g+g$: light is red, so it lasts $r+3g+r+g+g+g$ seconds\nTime $r+3g+r+g+g+g+g$: light is green, so it lasts $2r+2g+r+g+g+g+g$ seconds, then it turns red\nTime $r+3g+r+g+g+g+g+g$: light is red, so it lasts $r+3g+r+g+g+g+g+g$ seconds\nTime $r+3g+r+g+g+g+g+g+g$: light is green, so it lasts $2r+2g+r+g+g+g+g+g+g$ seconds, then it turns red\nTime $r+3g+r+g+g+g+g+g+g+g$: light is red, so it lasts $r+3g+r+g+g+g+g+g+g+g$ seconds\nTime $r+3g+r+g+g+g+g+g+g+g+g$: light is green, so it lasts $2r+2g+r+g+g+g+g+g+g+g+g$ seconds, then it turns red\nTime $r+3g+r+g+g+g+g+g+g+g+g+g$: light is red, so it lasts $r+3g+r+g+g+g+g+g+g+g+g+g$ seconds\nTime $r+3g+r+g+g+g+g+g+g+g+g+g+g$: light is green, so it lasts $2r+2g+r+g+g+g+g+g+g+g+g+g+g$ seconds, then it turns red\nTime $r+3g+r+g+g+g+g+g+g+g+g+g+g+g$: light is red, so it lasts $r+3g+r+g+g+g+g+g+g+g+g+g+g+g$ seconds\nTime $r+3g+r+g+g+g+g+g+g+g+g+g+g+g+g$: light is green, so it lasts $2r+2g+r+g+g+g"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\\n\") == \"0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571\"\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\") == \"0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571\"\n\"\"\"\n"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\\n\") == \"0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571\\n\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\\n\") == \"\"\"0.4\n0\n0.2\n0.171428571429\n0.228571428571\n\"\"\"\n\"\"\"\nIt is possible that multiple cars will pass through each traffic light in a given time, but in practice this does not happen. If you did manage to make it through all the lights, what should your answer be? The light that was furthest to the right when you entered the traffic light should be the one you hit first.\n\nThe probability that a car will make it through all of the traffic lights is the probability that at least one car will make it past the first light. If a car will make it past all of the lights, then it will make it past the last light. You know that every car that makes it past the last light will be caught in a traffic jam, so there are fewer possible cars that can make it past the last light, and thus the probability that at least one car will make it past the last light is lower. In order to compute this probability, you need to consider whether cars that pass the last traffic light will be caught in a traffic jam.\n\nFor all other lights, you know that cars that pass the light will be caught by another car. Therefore, the probability that no cars will make it past the last light is the probability that no cars pass the last light, which is the probability that no cars pass any light. In other words, the probability that no cars pass the last light is the same as the probability that no cars pass any light. Since the probability that no cars pass the last light is the probability that no cars pass any light, you can compute the probability that no cars pass the last light by computing the probability that no cars pass any light.\n\nYou can use this formula to compute the probability that no cars pass the last light:\n\nprob(no cars passing) = prob(no cars passing any light) = prob(no cars passing any light) = 1 - prob(at least one car passing)\nThe probability that no cars pass any light is the same as the probability that no cars pass the last light. The probability that no cars pass the last light is the same as the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars pass any light, which is the probability that no cars"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\") == \"0.4\\n0\\n0.2\\n0.171428571429\""
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'"
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\\n\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\n\"\"\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\n\nprint(solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\"))\n"
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\n\n\"\"\"\n\nimport sys\nimport itertools\n\nn = int(input())\nnum_array = []\nfor _ in range(n):\n    num_array.append([int(i) for i in input().split()])\nfor num in list(itertools.product(*num_array)):\n    if len(set(num)) == n:\n        res = ''\n        for i in range(n):\n            if i!= 0:\n                res +='+ '\n            if num[i] < 0:\n                res += '-'\n            res += str(abs(num[i]))\n        print(res +'='+ str(sum(num)))"
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\n\nassert solution(\"2\\n-3 0\") == \"impossible\"\nassert solution(\"1\\n0 0\") == \"impossible\"\nassert solution(\"1\\n2 -1\") == \"2 - 1 = 1\"\nassert solution(\"1\\n1 1\") == \"1 + 1 = 2\""
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\n\n-----How to test-----\nFor an example solution, go to the folder with the program and check the output with the following code:\n\npython3 -m unittest solution.py\nor\npython3 solution.py\n\n\"\"\"\n\nimport unittest\nimport sys\n\nn = int(sys.stdin.readline())\n\nresult = []\nfor i in range(n):\n    l, r = list(map(int, sys.stdin.readline().split()))\n    result.append([l, r, \"+\"])\n    result.append([l, r, \"-\"])\n    result.append([l, r, \"*\"])\n\nresult.sort(key=lambda x: x[0])\nresult.sort(key=lambda x: x[1], reverse=True)\n\nlast = {}\nfor x in result:\n    if x[0] in last:\n        last[x[0]].append(x)\n    else:\n        last[x[0]] = [x]\n\nfor i in range(1, n + 1):\n    if i in last:\n        for x in last[i]:\n            print(i, x[2], x[1], \"=\", x[0], sep=\"\")\n    else:\n        print(\"impossible\")\n"
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\""
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\n\"\"\""
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\") == \"4\\n1\\n4\\n6\\n0\"\n\"\"\"\n\nfrom typing import Tuple, List, Dict, Iterator\n\nfrom collections import Counter\n\nfrom utils import read_input_separated_by_empty_lines\n\n\nclass Sensor:\n    def __init__(self, x1: int, x2: int, y: int):\n        self.x1: int = x1\n        self.x2: int = x2\n        self.y: int = y\n\n    def __repr__(self):\n        return f\"Sensor(x1={self.x1}, x2={self.x2}, y={self.y})\"\n\n    def __str__(self):\n        return f\"Sensor(x1={self.x1}, x2={self.x2}, y={self.y})\"\n\n\nclass SensorMap:\n    def __init__(self):\n        self.sensors: List[Sensor] = []\n\n    def __iter__(self) -> Iterator[Sensor]:\n        return iter(self.sensors)\n\n    def __getitem__(self, idx: int) -> Sensor:\n        return self.sensors[idx]\n\n    def add_sensor(self, x1: int, x2: int, y: int):\n        self.sensors.append(Sensor(x1, x2, y))\n\n    def get_sensors_with_point(self, x: int, y: int) -> Tuple[Sensor,...]:\n        \"\"\"\n        Get all sensors that contains a point at (x, y)\n        \"\"\"\n        return tuple(sensor for sensor in self.sensors if sensor.x1 <= x <= sensor.x2 and sensor.y <= y <= sensor.y)\n\n    def get_sensors_with_overlap(self, x1: int, x2: int, y1: int, y2: int) -> Tuple[Sensor,...]:\n        \"\"\"\n        Get all sensors that have a region of at least one point at (x1, y1) and (x2, y2)\n        \"\"\"\n        return tuple(sensor for sensor in self.sensors if sensor.x1 <= x1 <= sensor.x2 and sensor.y1 <= y1 <= sensor.y2)\n\n    def __len__(self):\n        return len(self.sensors)\n\n\nclass Droplet:\n    def __init__(self, x: int, y: int):\n        self.x: int = x\n        self.y: int = y\n\n    def __repr__(self):\n        return f\"Droplet(x={self.x}, y={self.y})\"\n\n    def __str__(self):\n        return f\"Droplet(x={self.x}, y={self.y})\"\n\n\nclass DropletMap:\n    def __init__(self):\n        self.droplets: List[Droplet] = []\n\n    def __iter__(self) -> Iterator[Droplet]:\n        return iter(self.droplets)\n\n    def __getitem__(self, idx: int) -> Droplet:\n        return self.droplets[idx]\n\n    def add_droplet(self, x: int, y: int):\n        self.droplets.append(Droplet(x, y))\n\n    def get_droplets_with_overlap(self, x1: int, x2: int, y1: int, y2: int) -> Tuple[Droplet,...]:\n        \"\"\"\n        Get all droplets that have a region of at least one point at (x1, y1) and (x2, y2)\n        \"\"\"\n        return tuple(droplet for droplet in self.droplets if droplet.x1 <= x1 <= droplet.x2 and droplet.y1 <= y1 <= droplet.y2)\n\n    def __len__(self):\n        return len(self.droplets)\n\n\nclass DropCount:\n    def __init__(self):\n        self.count: Counter[Droplet] = Counter()\n\n    def __iter__(self) -> Iterator[Droplet]:\n        return iter(self.count)\n\n    def __getitem__(self, droplet: Droplet) -> int:\n        return self.count[droplet]\n\n    def add_droplet(self, droplet: Droplet):\n        self.count[droplet] += 1\n\n\nclass DropCountMap:\n    def __init__(self):\n        self.drop_counts: Dict[Sensor, DropCount] = {}\n\n    def __getitem__(self, sensor: Sensor) -> DropCount:\n        return self.drop_counts[sensor]\n\n    def add_drop_count(self, sensor: Sensor, droplet: Droplet):\n        self.drop_counts[sensor] = self.drop_counts.get(sensor, DropCount())\n        self.drop_counts[sensor].add_droplet(droplet)\n"
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '4\\n1\\n4\\n6\\n0'\n\"\"\""
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\\n') == '4\\n1\\n4\\n6\\n0\\n'\n\nassert solution('5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\\n') == '4\\n1\\n4\\n6\\n0\\n'\n\nassert solution('4 5\\n1 1\\n1 1\\n1 1\\n1 1\\n') == '0\\n0\\n0\\n0\\n'\n\nassert solution('3 4\\n1 2\\n3 4\\n5 6\\n') == '0\\n0\\n0\\n0\\n'\n\nassert solution('5 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n') == '0\\n0\\n0\\n0\\n0\\n0\\n0\\n'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('abc') == 'abc'\nassert solution('ab\\nc') == 'ac'\nassert solution('1\\n2\\n3\\n') == '1\\n2\\n3\\n'\n"
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '4\\n1\\n4\\n6\\n0'\nassert solution('6 4\\n3 2\\n2 5\\n3 2\\n3 3\\n4 5\\n1 1\\n2 4\\n2 2\\n3 3') == '4\\n0\\n3\\n0\\n0\\n1\\n2\\n0\\n0\\n0'\nassert solution('5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '4\\n1\\n4\\n6\\n0'\nassert solution('6 4\\n3 2\\n2 5\\n3 2\\n3 3\\n4 5\\n1 1\\n2 4\\n2 2\\n3 3') == '4\\n0\\n3\\n0\\n0\\n1\\n2\\n0\\n0\\n0'\n\"\"\"\n\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        assert solution(\"5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\") == '4\\n1\\n4\\n6\\n0'\n"
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == '''\nYou can not find solution\n'''\nprint(solution(data))\n\n---"
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '4\\n1\\n4\\n6\\n0'\nassert solution('5 3\\n2 3\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '0\\n0\\n0\\n0\\n0'\nassert solution('5 3\\n2 3\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '0\\n0\\n0\\n0\\n0'\nassert solution('5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '4\\n1\\n4\\n6\\n0'\nassert solution('5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '0\\n0\\n0\\n0\\n0'\n"
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n\"\"\") == \"\"\"\n4\n1\n4\n6\n0\n\"\"\""
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\\n') == '4\\n1\\n4\\n6\\n0\\n'\n\"\"\"\n"
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 2\\n3 2\\n2"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4') == 4\n'''\n\nn = int(input())\nl = list(map(int, input().split()))\n\ndict = {}\nfor i in range(n):\n    for j in range(i + 1, n):\n        for k in range(j + 1, n):\n            if l[i] + l[j] == l[k]:\n                if (l[i], l[j], l[k]) not in dict:\n                    dict[(l[i], l[j], l[k])] = 1\n                else:\n                    dict[(l[i], l[j], l[k])] += 1\n\nprint(len(dict))\n"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2 3\") == \"4\"\n'''\n\nN = int(input())\nnum = list(map(int, input().split()))"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 4') == 4\n'''"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4') == 4\nassert solution('7\\n4 3 1 6 2 1 8') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\") == 4\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 2 3') == '4'\nassert solution('4 -5 -6 7') == '1'\nassert solution('4 -5 0 7') == '0'\nassert solution('0 -5 -6 7') == '1'\n\nimport sys\nassert sys.maxsize > 2 ** 32\n"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4') == '4'\nassert solution('4\\n1 2 3 4\\n1 2 3 4') == '4'\nassert solution('4\\n1 2 3 4\\n2 3 4 1') == '2'\nassert solution('4\\n1 2 3 4\\n2 3 4 5') == '0'\n\"\"\"\n\nn = int(input())\nnumbers = list(map(int, input().split()))\n\ndistinct_numbers = set(numbers)\ntriple_numbers = list()\n\nfor number in distinct_numbers:\n    for second_number in distinct_numbers:\n        for third_number in distinct_numbers:\n            if number + second_number == third_number:\n                triple_numbers.append((number, second_number, third_number))"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 3 4') == '4'\n\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('2 2 3 3') == '0'\nassert solution('1 1 1 1') == '1'\n\"\"\""
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 31 2\\n20 60\\n50 90') == '4 3'\n"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 31 2\\n20 60\\n50 90\") == \"4 3\"\n\"\"\""
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 31 2\\n20 60\\n50 90') == '4 3'\n\nassert solution('1 32 1\\n20 60\\n50 90') == '4 4'\n\nassert solution('1 32 2\\n20 60\\n50 90') == '4 3'\n\nassert solution('1 31 3\\n20 60\\n50 90') == '4 4'\n\nassert solution('1 32 1\\n20 60\\n50 90') == '4 3'"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 31 2\\n20 60\\n50 90\\n') == '4 3'\nassert solution('1 31 2\\n50 60\\n20 90\\n') == '1 1'\nassert solution('1 31 2\\n50 90\\n20 60\\n') == '0 0'\nassert solution('1 31 2\\n10 10\\n20 60\\n') == '0 1'\nassert solution('1 31 2\\n10 10\\n20 90\\n') == '1 1'\n"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 31 2\\\\n20 60\\\\n50 90\\\\n\") == \"4 3\"\n\"\"\"\n\n\"\"\"\nfor each minute:\n    min\n    1. find all cheerleaders who are still active in that minute, from both teams\n    2. then, determine which team can score more goals\n    3. once we know the team that scores more goals, increment appropriate goal count\n    4. reset cheerleaders active in that minute\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 31 2\\n20 60\\n50 90\\n') == '4 3'\n\"\"\"\n\nimport collections\nimport itertools\nimport functools\nimport operator\nimport math\nfrom typing import List\n"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 31 2\\\\n20 60\\\\n50 90') == '4 3'\n"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\\n4 6\") == \"1 2 3\"\nassert solution(\"1 1\\n0 10\") == \"1 1\"\nassert solution(\"1 2\\n10 20\") == \"0 0\"\nassert solution(\"2 2\\n10 20\\n15 30\") == \"3 1\"\n\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nlines = [line.split() for line in open(sys.argv[1]).readlines()]\n\nn, t, m = (int(x) for x in lines.pop(0))\nintervals = [tuple(map(int, line)) for line in lines]\n\nschedule = sorted([(interval[0], interval[1]) for interval in intervals])\ncheer_count = 0\ngoals_count = 0\nfor i in range(len(schedule)):\n    if schedule[i][0] > t:\n        continue\n    cheer_count += 1\n    if schedule[i][1] < t:\n        goals_count += cheer_count\n        schedule[i] = (schedule[i][1], t)\n        cheer_count = 0\n\nschedule = sorted([(interval[1], interval[0]) for interval in intervals])\ncheer_count = 0\ngoals_count = 0\nfor i in range(len(schedule)):\n    if schedule[i][0] > t:\n        continue\n    cheer_count += 1\n    if schedule[i][1] < t:\n        goals_count += cheer_count\n        schedule[i] = (t, schedule[i][1])\n        cheer_count = 0\n\nschedule = sorted([(interval[1], interval[0]) for interval in intervals])\ncheer_count = 0\ngoals_count = 0\nfor i in range(len(schedule)):\n    if schedule[i][0] > t:\n        continue\n    cheer_count += 1\n    if schedule[i][1] < t:\n        goals_count += cheer_count\n        schedule[i] = (schedule[i][0], t)\n        cheer_count = 0\n\nintervals = sorted([(interval[0], interval[1]) for interval in schedule])\ncheer_count = 0\ngoals_count = 0\nfor i in range(len(intervals)):\n    if intervals[i][0] > t:\n        continue\n    cheer_count += 1\n    if intervals[i][1] < t:\n        goals_count += cheer_count\n        intervals[i] = (intervals[i][0], t)\n        cheer_count = 0\n\nintervals = sorted([(interval[0], interval[1]) for interval in schedule])\ncheer_count = 0\ngoals_count = 0\nfor i in range(len(intervals)):\n    if intervals[i][0] > t:\n        continue\n    cheer_count += 1\n    if intervals[i][1] < t:\n        goals_count += cheer_count\n        intervals[i] = (t, intervals[i][1])\n        cheer_count = 0\n\nintervals = sorted([(interval[0], interval[1]) for interval in schedule])\ncheer_count = 0\ngoals_count = 0\nfor i in range(len(intervals)):\n    if intervals[i][0] > t:\n        continue\n    cheer_count += 1\n    if intervals[i][1] < t:\n        goals_count += cheer_count\n        intervals[i] = (intervals[i][0], t)\n        cheer_count = 0\n\nintervals = sorted([(interval[0], interval[1]) for interval in schedule])\ncheer_count = 0\ngoals_count = 0\nfor i in range(len(intervals)):\n    if intervals[i][0] > t:\n        continue\n    cheer_count += 1\n    if intervals[i][1] < t:\n        goals_count += cheer_count\n        intervals[i] = (t, intervals[i][1])\n        cheer_count = 0\n\nintervals = sorted([(interval[1], interval[0]) for interval in schedule])\ncheer_count = 0\ngoals_count = 0\nfor i in range(len(intervals)):\n    if intervals[i][0] > t:\n        continue\n    cheer_count += 1\n    if intervals[i][1] < t:\n        goals_count += cheer_count\n        intervals[i] = (intervals[i][1], t)\n        cheer_count = 0\n\nintervals = sorted([(interval[1], interval[0]) for interval in schedule])\ncheer_count = 0\ngoals_count = 0\nfor i in range(len(intervals)):\n    if intervals[i][0] > t:\n        continue\n    cheer_count += 1\n    if intervals[i][1] < t:\n        goals_count += cheer_count\n        intervals[i] = (intervals[i][0], t)\n        cheer_count = 0\n\nintervals = sorted([(interval[1], interval[0]) for interval in schedule])\ncheer_count = 0\ngoals_count = 0\nfor i in range(len(intervals)):\n    if intervals[i][0] > t:\n        continue\n    cheer_count += 1\n    if intervals[i][1] < t:\n        goals_count += cheer_count\n        intervals[i] = (t, intervals[i][1])\n        cheer_count = 0\n\nintervals = sorted([(interval[1], interval[0]) for interval in schedule])\ncheer_count = 0\ngoals_count = 0\nfor i in range(len(intervals)):\n    if intervals[i][0] > t:\n        continue\n    cheer_count += 1\n    if intervals[i][1]"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 31 2\\n20 60\\n50 90\") == \"4 3\"\n\nSample Input:\n2 9 5\n35 45\n45 55\nSample Output:\n0 3\n2 0\n3 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 31 2\\n20 60\\n50 90') == '4 3'"
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 1\") == '3'\nassert solution(\"2 3 1\") == '2'\nassert solution(\"8 4 2\") == '0'\n\"\"\""
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 1\") == \"3\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"1 1 2\") == \"0\"\nassert solution(\"2 0 1\") == \"0\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2 2 1') == '3'\nassert solution('1 1 2') == '6'\nassert solution('1 2 1') == '2'\n\"\"\""
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1\") == 3\nassert solution(\"2 2 3\") == 6\n\"\"\""
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 1\") == \"3\"\n\"\"\"\n\nR, W, d = input().split()\nR, W, d = int(R), int(W), int(d)\n\nprint(((R - d) * (W - d) + (R - d) + (W - d)) % (10 ** 9 + 7))"
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 1\") == \"3\"\nassert solution(\"1 1 1\") == \"6\"\nassert solution(\"4 4 3\") == \"0\"\nassert solution(\"5 5 6\") == \"0\"\nassert solution(\"3 3 3\") == \"0\"\n"
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2, 2, 1) == 3\nassert solution(1, 2, 1) == 1\nassert solution(1, 1, 1) == 0\nassert solution(2, 1, 1) == 1\nassert solution(3, 1, 1) == 1\n"
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 2 1''') == '3'\nassert solution('''2 2 2''') == '1'\nassert solution('''5 5 1''') == '9'\nassert solution('''3 2 1''') == '6'\nassert solution('''5 5 5''') == '0'\n"
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 1\") == '3'\nassert solution(\"5 5 2\") == '6'\nassert solution(\"100 100 1\") == '42'\nassert solution(\"4 4 1\") == '0'\nassert solution(\"3 3 3\") == '1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 1\") == \"3\"\n\nassert solution(\"1 1 1\") == \"0\"\n\nassert solution(\"2 2 3\") == \"0\"\n\"\"\"\n\nfrom math import factorial\n\n\"\"\"\nWe can create a list of wine piles with their values, sort it by the values and then find all the arrangements of that list.\n\nThe number of arrangements can be found by the combination formula\n\nFor example, if the input is 2 2 1, we can consider the first value to be red and the second value to be white. We can then consider all possible orders to arrange the white wine first, all the red wine in the remaining space and all the white wine at the end of the line. There are 3 ways to arrange that, 1 red and 2 white, 2 red and 1 white and 1 white.\n\nThe overall number of arrangements is then 3*2 = 6.\n\"\"\"\n\n\"\"\"\nThis method runs in O(n ln n) time and space, where n is the length of the input\n\"\"\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1341 2412 1200 3112 2391\") == \"3 1\"\n\n-----Notes-----\n1. The input is valid.\n2. If you want to change the input string, you can use input() twice.\n3. If you want to change the test string, you can also change the input string.\n\n----- Hints -----\n1. Think of two sums: one of pillars 0 and 1, and another one of pillars n-1 and n.\n2. This is easy to implement if you know the formulae for two sums, and the fact that the formula for sum of $n$ numbers is sum of $n$ numbers minus the sum of $(n-1)$ numbers.\n3. To solve this task, you can use dynamic programming.\n4. For example, if we have the tower of height 3 with pillars of given supports, we will need two pillars of support with height 2 and one pillar of support with height 1, so the tower can support a total of 3+2+1=7 total pillars.\n\n\"\"\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1341 2412 1200 3112 2391\") == \"3 1\"\n\"\"\"\n\n\nimport heapq\n"
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1341 2412 1200 3112 2391\") == \"3 1\"\n\"\"\""
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1341 2412 1200 3112 2391\") == \"3 1\"\n\"\"\""
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1614 5481 5496 1415') == '4 3'\n"
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3\\n3\\n3\") == (\"0 0\\n0 1\\n1 1\\n1 0\")\nassert solution(\"5\\n3003 3003 3003 3003 3003\") == (\"0 0\\n0 1\\n1 1\\n2 2\\n2 0\")\nassert solution(\"5\\n1341 2412 1200 3112 2391\") == (\"0 0\\n1 2\\n2 0\")\nassert solution(\"4\\n1341 2412 1132 2391\") == (\"0 0\\n1 1\\n2 0\")\n\"\"\""
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1341 2412 1200 3112 2391\") == '3 1'\n\nSample Input:\n5\n1324 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1324 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n3 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n5 1\n\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n"
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1341 2412 1200 3112 2391') == '3 1'\nassert solution('7\\n83769 16346 10999 8188 9761 6551') == '2 0'\nassert solution('7\\n120000 100000 90000 80000 70000') == '0 2'\nassert solution('7\\n120000 100000 90000 80000 70000') == '0 2'\nassert solution('7\\n120000 100000 90000 80000 70000') == '0 2'\n"
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1341 2412 1200 3112 2391\") == \"3 1\"\n\"\"\""
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1341 2412 1200 3112 2391') == '3 1'\n\"\"\"\n\nfrom operator import itemgetter"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\") == \"6\"\n\"\"\"\n\na, b = map(int, stdin.split())\nn, m = map(int, stdin.split())\nroads = [[0, 0, 0] for _ in range(n)]\nfor _ in range(m):\n    u, v, t = map(int, stdin.split())\n    roads[u - 1][0] += 1\n    roads[v - 1][0] += 1\n    roads[u - 1][1] = t\n    roads[v - 1][1] = t\n    roads[u - 1][2] = v\n    roads[v - 1][2] = u\n\nbest_path = []\nbest_time = float('inf')\nfor start in range(n):\n    visited = [start + 1]\n    time = 0\n    while True:\n        for road in roads:\n            if road[0] == 0 and road[1] == start:\n                time += road[2]\n                start = road[2]\n                break\n        else:\n            break\n        visited.append(start)\n        start = roads[start - 1][2]\n        if start in visited:\n            break\n    if time < best_time:\n        best_time = time\n        best_path = visited\nprint(best_time)\nprint(best_path)\n"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"10 20\\n\"\n    \"3 5\\n\"\n    \"1 3 7\\n\"\n    \"2 1 1\\n\"\n    \"2 3 2\\n\"\n    \"2 3 5\\n\"\n    \"3 2 4\") == \"6\"\n\nassert solution(\n    \"10 20\\n\"\n    \"3 5\\n\"\n    \"1 3 7\\n\"\n    \"2 1 1\\n\"\n    \"2 3 2\\n\"\n    \"2 3 5\\n\"\n    \"3 2 4\") == \"6\"\n\nassert solution(\n    \"10 20\\n\"\n    \"3 5\\n\"\n    \"1 3 7\\n\"\n    \"2 1 1\\n\"\n    \"2 3 2\\n\"\n    \"2 3 5\\n\"\n    \"3 2 4\") == \"6\"\n\n-----Explanation-----\nRichard and Janet will meet at home in an average of $1$ + $\\frac{1}{2}$ = $0.5$ minutes. The average waiting time is calculated as $0.5 * \\left(b - a\\right)$, so the worst case waiting time is $0.5 * (b - a) = 6$ minutes.\n\n=====\n'''\n"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5') == '6'\n\"\"\"\nimport sys\nfrom collections import defaultdict\nfrom math import inf"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n\") == \"6\"\nassert solution(\"10 1000000000\\n1 1 1\\n1 2 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\") == \"6\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\") == \"6\"\n\"\"\"\n\n\n\"\"\"\nThe input is a directed graph of a neighbourhood.\nThe program finds the shortest path to the target, and then adds a waiting time to it.\nThe output is the waiting time of the shortest path.\n\nExample:\n    a b\n    1 2\n    2 3\n    1 2\n    a -> b -> c -> d\n    a -> c -> d\n    b -> c -> d\n    a -> b -> d\n\n\"\"\"\n\n\n\nclass Node:\n    def __init__(self, id):\n        self.id = id\n        self.children = []\n\nclass Graph:\n    def __init__(self):\n        self.nodes = {}\n    \n    def addNode(self, id):\n        node = Node(id)\n        self.nodes[id] = node\n    \n    def addEdge(self, fromId, toId):\n        if fromId not in self.nodes:\n            self.addNode(fromId)\n        if toId not in self.nodes:\n            self.addNode(toId)\n        self.nodes[fromId].children.append(self.nodes[toId])\n"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4') == '6'\n\"\"\"\n\nimport sys\nimport math\n\na, b = [int(i) for i in sys.stdin.readline().split()]\nstdin = sys.stdin.readlines()\n\nn, m = [int(i) for i in stdin[0].split()]\n\nroad = {}\nfor i in range(1, n + 1):\n    road[i] = {}\n\nfor i in range(1, m + 1):\n    u, v, t = [int(j) for j in stdin[i].split()]\n    road[u][v] = t\n    road[v][u] = t\n\nmin_dist = math.inf\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        if i!= j:\n            distance = road[i][j]\n            if i == 1 and j == n:\n                distance += road[n][1]\n            if distance < min_dist:\n                min_dist = distance\n\nprint(min_dist)\n"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\") == \"6\"\n\"\"\"\n\nimport sys\nimport math\n\nsys.setrecursionlimit(1500)"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5') == '6'\n\"\"\""
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 ab b\\n1 b\") == \"0 1\"\nassert solution(\"2 ab b\\n4 aa bb\") == \"0 1\"\nassert solution(\"2 ab b\\n3 aa a\") == \"0 1\"\n\n\"\"\"\n\nimport collections\nfrom typing import List"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\nab\\nb\\n\") == \"0 1\"\n\"\"\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 ab b\\n1 b\") == \"0 1\"\nassert solution(\"2 ab b\\n1 a\") == \"1 0\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 ab b\\n1 b\") == '0 1'\nassert solution(\"2 ab b\\n1 bb\") == '-1 0'\nassert solution(\"2 ab b\\n3 bb\") == '-1 -1'\nassert solution(\"2 ab b\\n2 b\") == '-1 -1'\nassert solution(\"2 ab b\\n3 a\") == '-1 -1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 ab b\\n1 b\\n\") == \"0 1\\n-1 0\\n\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab\\nba\") == \"0 1\"\nassert solution(\"ba\\nab\") == \"-1 0\"\nassert solution(\"bab\\nbab\") == \"1 2\"\nassert solution(\"bab\\nab\\nab\") == \"0 2\"\nassert solution(\"ab\\nbc\\na\\nbc\\nbc\\nbc\\nbc\\nbc\") == \"-1 3\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\nab\\nb') == '0 1'\nassert solution('2\\nab\\nb') == '0 1'\n\"\"\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\n\nprint(solution(stdin))\n\n\"\"\"\nimport sys\nimport itertools\n"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ab b\\n1 b') == '0 1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n2 ab b\n1 b\n\"\"\") == \"0 1\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\") == \"3\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\") == \"3\"\nassert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\") == \"8\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 2\\n2\\n1 1 2\") == \"3\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\n1 1 2\n2\n1 1 2\n''') == '''\n1\n2\n'''\n\nassert solution('''\n3 5\n1 1 2\n2\n2 1 3\n3\n1 1 2\n1 2 2\n3\n1 1 2\n2\n3\n1 2 1\n''') == '''\n3\n2\n3\n'''\n\nassert solution('''\n5 3\n1 1 2\n2\n2 1 3\n3\n1 1 2\n1 2 2\n3\n1 1 2\n2\n3\n1 2 1\n''') == '''\n4\n6\n1\n'''\n\nprint(solution(input()))\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4\\n1 1 2\\n2\\n1 1 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n\n-----Problem-----\nPokenom is about to start their journey. Bash\u2019s college teacher decided to drop out of the university to pursue his childhood dream of becoming the best Pokenom trainer. Bash gave his students tasks to solve. Now, Bash has $N$ lines of code. Each line contains exactly one query. Each query can be one of the following $2$ types:\n - Pokenom trains a new Pokenom trainer.\n - Pokenom asks Bash to find $E(A)$.\n\nLet $A$ be the number of black boxes after the train. The Pokenom trainer who is training Bash now finds $B$ such that the expected value of $A$ can be represented as an irreducible fraction $B$.\n\nBash will only drop out of his university if he can answer all queries correctly. But now all Bash can think of is Pokenom. Please help him!\n\n-----Input-----\nThe first line of input contains exactly $2$ positive integers $N$ and $Q$. $(1 \\le N, Q \\le 10^5)$.\n\n$Q$ lines follow, each line contains exactly one query. As explained, a query can be one of the following $2$ types:\n - $1 \\; u \\; v$: Pokenom trains a new Pokenom trainer.\n - $2$: Pokenom asks Bash to find $E(A)$.\n\n-----Output-----\nIt can be proved that the expected value can be represented as an irreducible fraction $B$. For each query of type $2$, print one line containing the value $A \\times B^{-1}$ modulo $10^{9} + 7$. The given input guarantees that $B$ is not a multiple of $10^{9} + 7$.\n\n-----Examples-----\nSample Input:\n3 2\n1 1 2\n2\n1 1 2\n2\nSample Output:\n2\n1\n1\n\n-----Solution-----\n\n```python\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 1 2\\n2\\n1 1 2') == '2'\nassert solution('1 3\\n1 1 2\\n2\\n2 2 3') == '3'\nassert solution('2 6\\n1 1 2\\n2\\n2 1 1\\n2 1 3') == '3'\nassert solution('2 7\\n1 1 2\\n2\\n2 1 1\\n2 1 3\\n2 1 5') == '7'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4\\n1 1 2\\n2\\n1 1 2') == '3'\n\n-----Problem-----\nPokenom Go has just been released. Pokenom trainers can now travel the world, capture Pokenom in the wild and battle each other! Bash \u2014 the Pokenom trainer \u2014 has decided to drop out of his university to pursue his childhood dream of becoming the best Pokenom trainer!\n\nLinux puts $N$ black boxes on a straight line. The black boxes are numbered from $1$ to $N$ from left to right. Initially, all black boxes are empty. Then Linux gives Bash $Q$ queries. Each query can be one of the following $2$ types:\n\n1) Linux puts exactly one stone inside exactly one box between $u$-th box and $v$-th box, inclusive, with equal probability. $(1 \\le u \\le v \\le N)$.\n2) Let $a_ i$ be the number of stones in black box numbered $i$. Let $A = \\sum _{i=1}^{N}{a_ i^2}$. Bash has to calculate the expected value $E(A)$.\n\nBash can only drop out of his university if he can answer all queries correctly. But now all Bash can think of is Pokenom. Please help him!\n\n-----Input-----\nThe first line of input contains exactly $2$ positive integers $N$ and $Q$. $(1 \\le N, Q \\le 10^5)$.\n\n$Q$ lines follow, each line contains exactly one query. As explained, a query can be one of the following $2$ types:\n\n1) Linux puts exactly one stone inside exactly one box between $u$-th box and $v$-th box, inclusive, with equal probability. $(1 \\le u \\le v \\le N)$.\n2) Let $a_ i$ be the number of stones in black box numbered $i$. Let $A = \\sum _{i=1}^{N}{a_ i^2}$. Bash has to calculate the expected value $E(A)$.\n\n-----Output-----\nIt can be proved that the expected value can be represented as an irreducible fraction $\\dfrac {A}{B}$. For each query of type $2$, print one line containing the value $A \\times B^{-1}$ modulo $10^{9} + 7$. The given input guarantees that $B$ is not a multiple of $10^{9} + 7$.\n\n-----Explanation for examples-----\n - In the first example: With a probability of $0.5$, two stones are in different squares. Hence, the answer to the fourth query is $0.5 \\times (1^{2} + 1^{2}) + 0.5 \\times 2^{2} = 3$.\n - In the second example: With a probability of $\\frac{2}{3}$, two stones are in different squares. Hence, the answer to the fourth query is $\\frac{2}{3} \\times 2 + \\frac{1}{3} \\times 4 = \\frac{8}{3}$.\n\n-----Examples-----\nSample Input:\n2 4\n1 1 2\n2\n1 1 2\n2\nSample Output:\n1\n3\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 1 2\\n2\\n1 1 2\\n2\") == \"1\\n1\"\nassert solution(\"4 4\\n1 1 2\\n2\\n1 1 2\\n2\") == \"1\\n3\"\nassert solution(\"5 10\\n1 1 2\\n2\\n1 1 2\\n2\\n1 1 2\\n2\\n1 1 2\\n2\") == \"1\\n5\"\nassert solution(\"5 10\\n1 1 2\\n2\\n1 1 2\\n2\\n1 1 2\\n2\\n1 1 2\\n2\") == \"1\\n1\"\n\"\"\""
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\") == \"1\"\nassert solution(\"3 5\\n1 1 2\\n2\\n1 1 2\") == \"0\"\nassert solution(\"2 2\\n1 1 2\\n2\\n1 1 2\") == \"0.5\"\nassert solution(\"3 2\\n1 1 2\\n2\\n1 1 2\") == \"0.5\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 5 2\\n5 0 4\\n2 4 0\\n\") == 7\n\n---\n\nWe are given a sequence of flights of size N. The flights are labelled from 1 to N. For each flight we know its duration. The first flight of the sequence has duration 0, and the last flight has duration N. If i is the departure city and j is the arrival city, then duration[i][j] is the duration of the flight from city i to city j.\n\nOur goal is to find the shortest possible sequence of flights that visits all the cities once and only once, and for which the total duration is minimized. A sequence is a feasible solution if:\n\neach city is visited exactly once;\neach city is visited exactly once in the beginning and in the end;\nthe total duration of the sequence is minimized.\nGiven N, find the sequence with the smallest total duration.\n\nExample:\n\nIn the following example, the shortest sequence that visits each city exactly once has the following duration = 12:\n\n[0, 1, 2, 3, 2, 0, 1, 2, 3, 3, 3, 2]\n\nSample Input:\n\n3\n0 5 2\n5 0 4\n2 4 0\n\nSample Output:\n\n7\n\nhttps://www.hackerearth.com/practice/notes/beautiful-solution-to-travelling-salesman-problem/\n\nhttps://www.youtube.com/watch?v=8B0g7nIuV1A\n\n\"\"\""
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n0 5 2\\n5 0 4\\n2 4 0') == '7'\nassert solution('2\\n0 5 2\\n5 0 4') == '7'\n\"\"\"\n\nimport sys\n\nfrom utils import timed"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1\\n0\\n1\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n0\\n1\") == \"1\\n\"\nassert solution(\"2\\n0\\n1\\n0\") == \"1\\n\"\nassert solution(\"3\\n0\\n2\\n2\\n1\\n0\") == \"3\\n\"\n\nSample Input:\n3\n1 2 3\n2 3 0\n1 2 3\nSample Output:\n3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 5 2\\n5 0 4\\n2 4 0\") == \"7\"\n\"\"\"\n\nimport sys\nimport itertools\n\nN = int(sys.stdin.readline())\n\nedges = [[int(x) for x in line.strip().split()] for line in sys.stdin]\n\nsorted_edges = sorted(edges)\n\nmin_cost = sys.maxsize\n\nfor seq in itertools.permutations(range(1, N + 1)):\n    cost = 0\n    for i in range(N - 1):\n        a, b = seq[i], seq[i + 1]\n        cost += sorted_edges[a - 1][b - 1]\n    min_cost = min(min_cost, cost)\n\nprint(min_cost)\n"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"3\n0 5 2\n5 0 4\n2 4 0\"\"\"\n) == \"7\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 5 2\\n5 0 4\\n2 4 0\") == \"7\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 5 2\\n5 0 4\\n2 4 0\") == \"7\"\nassert solution(\"1 0 0\\n3 0 4\\n2 4 0\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 5 2\\n5 0 4\\n2 4 0\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1099511627776') == '8'\n\n-------------\n\nSolution:"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('10000') == '0'\nassert solution('8') == '0'\nassert solution('10111010111010') == '3'\n"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1099511627776\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1099511627776') == 8\n"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1099511627776\") == \"8\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1099511627776') == 8\n"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1099511627776') == '8'\n\"\"\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1099511627776\") == 8\n"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1099511627776') == '8'\nassert solution('10') == '1'\n\"\"\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1099511627776\") == \"8\"\n\"\"\"\n\nX = int(input())\nk = 0\nwhile X > 0:\n    X = X // 2\n    k += 1\nprint(k)\n"
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3') == '0'\nassert solution('xxx') == '0'\nassert solution('1\\n2\\nx') == '0'\nassert solution('1\\n2\\n2') == '1'\n"
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\nx..\n.x.\nx.x\n''') == 2\n\nassert solution('''\n3 3\nx..\n.x.\nx.x\n''') == 2\n\nassert solution('''\n3 3\nx..\nx.x\nx.x\n''') == 1\n\nassert solution('''\n3 3\nx.x\nx.x\nx.x\n''') == 1\n\nassert solution('''\n3 3\n..x\nx.x\nx.x\n''') == 1"
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\nx..\\n.x.\\nx.x') == 2\n\"\"\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\nx..\\n.x.\\nx.x') == '2'\n\nprint(solution(input()))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\nx..\\n.x.\\nx.x\") == 2\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\nx..\\n.x.\\nx.x') == '2'\nassert solution('3 3\\nx..\\n.x.\\nx.x') == '2'\nassert solution('3 3\\n.x.\\n.x.\\n.x.') == '0'\nassert solution('3 3\\n.x.\\n.x.\\nx.x') == '1'\n\"\"\"\n\nr, c = map(int, stdin.readline().split())\n\ngrid = [stdin.readline().strip() for _ in range(r)]\ndp = [[0] * (c + 1) for _ in range(r + 1)]\ndp[0][0] = 1\n\nfor i in range(r):\n    for j in range(c):\n        if grid[i][j] == 'x':\n            dp[i + 1][j + 1] = 0\n        else:\n            dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1]\n\nprint(dp[-1][-1] // 2)\n"
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\nx..\\n.x.\\nx.x\\n') == 2\nassert solution('4 5\\nxx..\\nxx.x\\nxxx.x\\nxxx.x\\n') == 3\nassert solution('1 1\\nx.\\n') == 0\nassert solution('5 5\\nx.x\\nx.x\\nx.x\\nx.x\\nx.x\\n') == 1\n\"\"\""
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\nprint('PASSED')\n\"\"\""
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\nx..\\n.x.\\nx.x\") == \"2\"\nassert solution(\"3 3\\n.x.\\nx.x\\n.x.\\nx.x\") == \"2\"\nassert solution(\"3 3\\nx..\\nx.x\\nx.x\") == \"0\"\nassert solution(\"3 3\\n.x.\\nx.x\\n.x.\\nx.x\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\nx..\\n.x.\\nx.x') == 2\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"\"\"9\n-1\n5\n6\n\"\"\"\n\nassert solution(\"\"\"4\n1 0 3\n2 1 0\n3 2 1\n4 0 1\n\"\"\") == \"\"\"9\n-1\n4\n4\n\"\"\"\n\nassert solution(\"\"\"7\n0 2 1\n2 0 0\n3 2 1\n4 1 1\n5 1 1\n6 1 1\n7 0 2\n\"\"\") == \"\"\"12\n7\n7\n8\n7\n9\n9\n7\n\"\"\"\n\nassert solution(\"\"\"3\n0 0 1\n0 0 1\n2 1 0\n\"\"\") == \"\"\"2\n2\n2\n\"\"\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == \"9\\n-1\\n5\\n6\"\n\nassert solution(\"1 2 1\\n2 0 0\\n3 1 1\") == \"2\\n1\"\n\nassert solution(\"1 1 1\\n2 0 0\\n3 1 1\") == \"2\\n1\"\n\nassert solution(\"1 3 2\\n2 1 1\\n3 0 0\\n4 1 1\") == \"9\\n5\\n6\"\n\nassert solution(\"1 3 2\\n2 4 2\\n3 0 0\\n4 2 4\") == \"9\\n8\\n7\""
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == '9\\n-1\\n5\\n6'\n\n\"\"\""
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0 1 0\\n1 0 0\") == \"1\"\n\"\"\"\n\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    5\n    1 3 2\n    2 5 2\n    3 0 0\n    4 2 4\n    5 3 0\n    \"\"\"\n    ) == \"\"\"\n    9\n    -1\n    5\n    6\n    \"\"\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3 1\\n2 4 1\") == \"6\\n4\"\nassert solution(\"4\\n0 1 5\\n1 1 5\\n2 1 5\\n3 1 5\") == \"4\\n-1\"\n\n\"\"\""
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == \"9\\n-1\\n5\\n6\"\nassert solution(\"7\\n1 6 0\\n2 3 4\\n3 0 0\\n4 1 4\\n5 0 0\\n6 2 4\") == \"10\\n-1\\n8\\n7\\n9\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == \"9\\n-1\\n5\\n6\"\n\"\"\""
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == \"9\\n-1\\n5\\n6\"\nassert solution(\"2\\n1 4 1\\n0 5 0\") == \"6\"\nassert solution(\"5\\n1 4 1\\n0 5 0\\n1 2 1\\n0 4 0\\n1 4 1\") == \"9\\n-1\\n5\\n6\"\nassert solution(\"7\\n1 3 1\\n2 1 2\\n3 0 0\\n4 1 3\\n5 5 5\\n6 0 0\\n7 0 0\") == \"15\\n-1\\n7\\n8\"\nassert solution(\"3\\n1 2 1\\n0 0 0\") == \"1\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == \"9\\n-1\\n5\\n6\"\n\n\"\"\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 40 30 20 10') == '91'\nassert solution('3 1 95 95 95 10') == '91'\nassert solution('2 1 95 50 30 20') == '105'\n"
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == \"91\"\n\n\"\"\""
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 1 50 50 10\\n1 1 45 45 10\") == \"9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == '91'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(2500)\n"
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == \"91\"\n\n-----Notes-----\nIf there are multiple shortcut items that can be used to beat a level, it is the one with the minimum completion time to use.\n\n\"\"\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == '91'\n\"\"\"\n\nclass Solution:\n    def __init__(self, input):\n        self.lines = input.split('\\n')\n        self.time_shortcuts = {}\n        self.time_rules = {}\n        self.remaining_time = {}\n        self.shortcut_items = {}\n        self.rule_items = {}\n        self.n = 0\n\n    def get_shortcut(self, level):\n        if level not in self.time_shortcuts:\n            time = int(self.lines[level].split(' ')[1])\n            self.time_shortcuts[level] = time\n            self.shortcut_items[level] = 0\n            self.remaining_time[level] = time\n        return self.time_shortcuts[level]\n\n    def get_rule(self, level):\n        if level not in self.time_rules:\n            time = int(self.lines[level].split(' ')[1])\n            self.time_rules[level] = time\n            self.rule_items[level] = 0\n            self.remaining_time[level] = time\n        return self.time_rules[level]\n\n    def get_shortcut_item(self, level):\n        if level not in self.shortcut_items:\n            self.shortcut_items[level] = 0\n        return self.shortcut_items[level]\n\n    def get_rule_item(self, level):\n        if level not in self.rule_items:\n            self.rule_items[level] = 0\n        return self.rule_items[level]\n\n    def get_items(self):\n        for i in range(1, self.n + 1):\n            self.get_shortcut_item(i)\n            self.get_rule_item(i)\n\n    def get_shortcut_time(self):\n        for i in range(1, self.n + 1):\n            self.get_shortcut(i)\n\n    def get_time(self):\n        for i in range(1, self.n + 1):\n            self.get_rule(i)\n\n    def get_diff(self):\n        for i in range(1, self.n + 1):\n            self.get_rule(i)\n            self.get_shortcut(i)\n\n    def get_remaining_time(self):\n        self.get_time()\n        self.get_diff()\n\n    def get_shortcut_dict(self):\n        for i in range(1, self.n + 1):\n            self.get_shortcut_item(i)\n            self.get_rule_item(i)\n\n    def get_time_dict(self):\n        for i in range(1, self.n + 1):\n            self.get_rule(i)\n            self.get_shortcut_item(i)\n\n    def get_diff_dict(self):\n        for i in range(1, self.n + 1):\n            self.get_rule(i)\n            self.get_shortcut_item(i)\n            self.get_rule_item(i)\n            self.get_shortcut_item(i)\n\n    def solution(self):\n        self.n = int(self.lines[0])\n        self.get_items()\n        self.get_remaining_time()\n        self.get_shortcut_dict()\n        self.get_time_dict()\n        self.get_diff_dict()\n        return min(self.remaining_time.values())"
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == \"91\"\n\"\"\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == \"91\"\n\"\"\"\n\nimport sys\nfrom itertools import product\nfrom functools import reduce\n\nn = int(sys.stdin.readline())\nm = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n\nfor i in range(1, n):\n    m[i][0] += min(m[i - 1][1:])\n\nprint(min(m[-1][0], reduce(lambda x, y: min(x, y), m[-1][1:])))\n"
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20') == '91'\n\"\"\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == \"91\"\nprint(solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\"))\nassert solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == \"91\"\nprint(solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\"))\nassert solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == \"91\"\nprint(solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\"))\nassert solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == \"91\"\nprint(solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\"))\nassert solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\") == \"91\"\nprint(solution(\"3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\"))\n"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2\n15 20\n0\n1 1''') == \"15\"\nassert solution('''1\n10\n0\n1 1''') == \"10\"\n\n\"\"\""
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n15 20\\n0\\n1 1') == '15'\nassert solution('4\\n1 2\\n3 4\\n2 1') == '4'\nassert solution('10\\n1 2 3\\n2 3 4\\n2 1\\n3 5\\n2 4\\n5 6\\n1 4\\n6 7\\n4 7\\n3 8\\n5 8\\n8 9\\n5 1\\n9 10\\n1 3\\n3 1\\n7 8\\n1 5\\n5 3\\n3 7\\n7 4\\n4 6\\n6 9\\n9 1\\n1 2\\n2 9\\n3 8\\n8 2\\n5 7\\n7 5\\n7 1\\n9 5\\n1 8\\n3 9\\n9 8\\n1 4\\n8 2\\n1 8\\n9 8\\n5 8\\n4 8\\n1 9\\n9 8\\n5 7\\n5 1\\n7 3\\n3 9\\n9 5\\n1 3\\n5 7\\n5 5\\n7 1\\n1 9\\n9 8\\n8 1\\n1 8\\n4 7\\n7 4\\n1 2\\n1 8\\n9 8\\n5 8\\n4 8\\n1 3\\n3 9\\n9 8\\n1 1\\n1 4\\n9 5\\n8 1\\n3 9\\n9 8\\n5 8\\n1 9\\n5 1\\n9 8\\n5 8\\n5 7\\n5 1\\n1 8\\n5 1\\n3 7\\n3 9\\n9 8\\n1 4\\n1 8\\n9 8\\n4 8\\n3 9\\n9 5\\n8 1\\n9 8\\n9 8\\n1 9\\n1 8\\n9 8\\n9 8\\n3 9\\n1 4\\n1 2\\n5 8\\n1 9\\n5 1\\n3 8\\n9 8\\n1 3\\n1 9\\n9 5\\n1 9\\n5 8\\n1 5\\n5 8\\n9 8\\n1 4\\n1 4\\n9 5\\n3 9\\n9 8\\n1 3\\n1 9\\n9 8\\n1 9\\n9 8\\n5 1\\n1 9\\n1 2\\n5 8\\n1 2\\n9 5\\n3 7\\n3 9\\n3 7\\n9 5\\n9 8\\n5 8\\n5 7\\n1 9\\n5 7\\n5 5\\n7 1\\n1 9\\n9 8\\n1 3\\n1 9\\n9 8\\n5 8\\n5 7\\n5 1\\n1 9\\n5 7\\n5 5\\n7 1\\n5 5\\n1 9\\n9 8\\n1 5\\n1 8\\n9 8\\n1 5\\n1 8\\n9 8\\n5 8\\n9 8\\n1 5\\n9 8\\n5 7\\n1 9\\n9 8\\n1 8\\n9 8\\n5 8\\n1 9\\n9 8\\n1 8\\n9 8\\n5 7\\n5 7\\n1 9\\n9 8\\n5 8\\n1 9\\n9 8\\n5 8\\n1 9\\n9 8\\n1 8\\n9 8\\n5 8\\n5 7\\n5 1\\n1 8\\n1 9\\n1 5\\n3 8\\n5 7\\n1 9\\n1 8\\n9 8\\n5 7\\n1 9\\n5 7\\n1 7\\n1 9\\n1 5\\n9 5\\n9 8\\n5 7\\n9 7\\n9 7\\n1 2\\n3 5\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1 4\\n5 6\\n5 6\\n1"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 12\\n0\\n1\\n1\\n2\\n3\\n3\\n1\\n0\") == \"20\"\nassert solution(\"7 12\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n1\\n1\\n1\\n0\\n0\") == \"10\""
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"15 20\\n0\\n1 1\") == \"15\"\nassert solution(\"15 20\\n0\\n1 1\\n1 1\") == \"0\"\nassert solution(\"15 20\\n0\\n1 1\\n1 1\\n0\") == \"20\"\nassert solution(\"15 20\\n0\\n1 1\\n1 1\\n1 1\") == \"15\"\nassert solution(\"15 20\\n0\\n1 1\\n1 1\\n1 1\\n1 1\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 15\\n0\\n1\\n0\\n1\\n0\\n2\\n0\\n1\\n0\\n2\\n1\\n0\\n2\\n1\\n0\\n2\\n2\\n0\\n2\\n2\\n0\\n2\\n1\\n0\\n1\\n1\\n0\\n1\\n0\\n0\\n2\\n0\\n0\\n2\\n0\\n0\\n2\\n0\\n0\\n2\\n1\\n0\\n0\\n1\\n0\\n0\\n1\\n0\\n0\\n2\\n0\\n0\\n0\\n2\\n2\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n2\\n2\\n0\\n0\\n0\\n0\\n0\\n2\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n2\\n0\\n0\\n2\\n0\\n2\\n2\\n2\\n0\\n2\\n2\\n0\\n2\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n2\\n0\\n0\\n2\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n2\\n0\\n0\\n2\\n0\\n2\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n15 20\\n0\\n1 1') == 15\n'''"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\nprint(solution('0\\n1 1\\n0'))"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n15 20\\n0\\n1 1\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(expected_output)\n"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15 20\") == 15\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98\") == \"impossible\"\n\"\"\"\n\nfrom collections import defaultdict\n\nn, m = input().split()\nn, m = int(n), int(m)\n\nfriends = defaultdict(list)\n\nfor i in range(m):\n    p, q, c = input().split()\n    p, q, c = int(p), int(q), int(c)\n    friends[p].append((q, c))\n    friends[q].append((p, c))"
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2 3\\n2 3 4\\n3 4 5\\n4 4 6') == 'impossible'\nassert solution('5 5\\n1 2 716\\n2 3 716\\n3 4 716\\n4 5 716\\n5 5 716') == 'impossible'\n'''"
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98\") == \"impossible\"\nassert solution(\"5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98\\n1 4 716\\n5 4\\n2 1 0\\n4 1 0\\n3 1 0\\n3 4 0\") == \"7440\"\n-----Explanation-----\n\nIn the first case, there is only one group of friends, so the total amount of carbon dioxide that will be emitted if they are in a group together is: 3 * 375 = 750. However, the students in John\u2019s class are not friends with each other, so they are not allowed to meet up with friends.\n\nIn the second case, the students in John\u2019s class are friends with each other, so they are allowed to meet up with each other. In this case, the total amount of carbon dioxide that will be emitted if they are in a group together is:\n\n(375 + 283) * 2 = 748\n(716 + 98) * 2 = 764\n(750 + 764) = 1474\nIn this case, the minimum total amount of carbon dioxide that will be emitted if the students are in groups of two friends is: 7440.\n\nIn the third case, the students in John\u2019s class are not friends with each other, so they are not allowed to meet up with friends.\n\nIn the fourth case, the students in John\u2019s class are friends with each other, so they are allowed to meet up with each other. In this case, the total amount of carbon dioxide that will be emitted if they are in a group together is:\n\n(375 + 716) * 2 = 748\n(283 + 716) * 2 = 764\n(98 + 764) * 2 = 772\n(716 + 772) = 1474\nIn this case, the minimum total amount of carbon dioxide that will be emitted if the students are in groups of two friends is: 7440.\n\nIn the last case, the students in John\u2019s class are not friends with each other, so they are not allowed to meet up with friends.\n\n-----Constraints-----\n1 <= n, m <= 200\n0 <= p, q, r <= n\n0 <= c <= 10^6\n-----Bibliography-----\n\nThe first algorithm is due to C. Lindner, who was able to solve this problem by using a similar procedure to a famous algorithm due to Donald Knuth. He describes a dynamic programming approach (which is now implemented in the function solve_knapsack below). In his algorithm, he describes a sub-problem which consists of choosing a subset of the remaining n elements, such that the sum of the weights in the subset is less than or equal to the given weight m.\n\nThe second algorithm is due to Ian Bell, who uses the idea of finding the longest increasing subsequence to solve the problem.\n\nThe third algorithm is due to Kevin H. Burke, who described a linear-time algorithm due to Donald Knuth that solves the problem using a greedy strategy.\n\"\"\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 1\\n2 2\\n3 3\\n4 4') == 'impossible'\nassert solution('5 4\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5') == '10304'\nassert solution('5 4\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n1 2\\n3 4\\n5 1\\n3 2') == '250'\nassert solution('6 5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n1 2\\n3 4\\n5 1\\n3 2\\n4 5') == '8014'\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List\nimport operator\n\n\nclass Solution:\n    def __init__(self) -> None:\n        self.friends = defaultdict(list)\n        self.carbon = defaultdict(int)\n\n    def read_input(self, n: int, m: int) -> List[int]:\n        for _ in range(m):\n            p, q, c = map(int, input().split())\n            self.friends[p].append(q)\n            self.friends[q].append(p)\n            self.carbon[p, q] = c\n\n    def solve(self) -> str:\n        # # find out how many groups we have\n        # groups = set(self.friends.keys())\n        # for p in self.friends:\n        #     groups &= set(self.friends[p])\n        # groups = len(groups)\n        # if groups!= 1:\n        #     return 'impossible'\n        # # traverse through all the friendships and update the carbon\n        # for p in self.friends:\n        #     for q in self.friends[p]:\n        #         self.carbon[p, q] += (groups * self.carbon[p, q] +\n        #                               len(self.friends[p]) *\n        #                               len(self.friends[q]))\n        # return str(sum(self.carbon.values()))\n\n        # traverse through all the friendships and update the carbon\n        for p, q in self.friends:\n            self.carbon[p, q] += (len(self.friends[p]) *\n                                  len(self.friends[q]) *\n                                  self.carbon[p, q])\n        # convert the carbon to string and return\n        return str(sum(self.carbon.values()))\n"
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 1 1\\n3 4 5\\n1 2 5\\n1 3 1\\n2 3 3') == 'impossible'\nassert solution('4\\n2 1 1\\n3 4 5\\n1 2 5\\n1 3 1\\n2 3 3') == '4'\nassert solution('2\\n1 1 2\\n1 1 2') == '2'\nassert solution('2\\n1 1 2\\n1 1 2') == '2'\nassert solution('4\\n3 1 3\\n2 1 2\\n3 1 2\\n1 2 3\\n1 3 3\\n2 1 2\\n1 3 1\\n2 1 2') == '2'\n"
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n1 1 1\\n2 3 2') == 'impossible'\n\"\"\"\n\nimport sys\nimport heapq\nimport math"
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 2 400\\n2 3 500') == '400'\nassert solution('4 3\\n1 2 3000\\n2 3 2000') == '2000'\nassert solution('4 3\\n1 2 2000\\n2 3 2000') == '4000'\nassert solution('4 3\\n1 2 2000\\n2 3 2000') == '4000'\nassert solution('4 3\\n1 2 2000\\n2 3 2000') == '4000'\n"
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98') == 'impossible'\n\"\"\""
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98\") == \"impossible\"\n\n\"\"\""
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98') == 'impossible'\n\"\"\"\n\n\"\"\"\nn, m = [int(i) for i in stdin.readline().split()]\ng = {}\nfor i in range(m):\n    a, b, c = [int(i) for i in stdin.readline().split()]\n    g[(a, b)] = c\n    g[(b, a)] = c\n\nimport heapq\n"
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '1.000000000'\n\"\"\"\n\nfrom fractions import Fraction"
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1.0\"\nassert solution(\"1000\") == \"1.0\"\nassert solution(\"1.1\") == \"1.1\"\nassert solution(\"1.001\") == \"1.001\"\nassert solution(\"1.0001\") == \"1.0001\"\n"
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1.0\"\nassert solution(\"2\") == \"1.33333333\"\nassert solution(\"3\") == \"1.5\"\nassert solution(\"4\") == \"2.0\"\nassert solution(\"5\") == \"2.2\"\n\"\"\""
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1.0\"\n\"\"\""
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1) == '1.0'\nassert solution(2) == '1.33333333'\nassert solution(5) == '2.5'\nassert solution(1000) == '18.5'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1.000000000'\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1.0\"\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline().rstrip())"
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1) == 1\n\n\"\"\""
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '1.0'\nassert solution('8') == '4.0'\nassert solution('10') == '9.333333333'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100 3 10\\n15 99 98\\n40 3 2\\n90 10 9') == '115.0'\n\"\"\"\n\nfrom typing import List\n\nimport sys\n\nclass Solution:\n\n    def get_max_live_time(self, n: int, p: int, c: int, all_pill_info: List) -> int:\n        all_pill_info.sort(key=lambda x: x[0])\n        res = 0\n        cur_live_time = n\n        cur_pill = 0\n        for i in range(p):\n            cur_pill_time, x, y = all_pill_info[i]\n            if cur_pill == 0:\n                # \u53ea\u6709\u4e00\u4e2apill\uff0c\u548c\u53ea\u6709no_pill\u7684\u60c5\u51b5\u6bd4\u8f83\n                if x == y:\n                    cur_live_time = cur_live_time + x\n                    res = max(res, cur_live_time)\n                else:\n                    if cur_pill_time < c:\n                        cur_pill = 1\n                        cur_live_time = cur_live_time + y\n                        res = max(res, cur_live_time)\n                    else:\n                        cur_pill = 0\n                        cur_live_time = n\n        return res\n"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 3 10\\n15 99 98\\n40 3 2\\n90 10 9\") == \"115.0\"\nprint(solution(\"100 3 10\\n15 99 98\\n40 3 2\\n90 10 9\"))\n"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''100 3 10\n15 99 98\n40 3 2\n90 10 9''') == 115.0\n'''\n\nfrom sys import stdin"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 3 10\\n15 99 98\\n40 3 2\\n90 10 9\") == \"115.0\"\n\"\"\"\n\nn, p, c = map(int, stdin.readline().split())\npills = [list(map(int, stdin.readline().split())) for _ in range(p)]\npills.sort(key=lambda x: x[0], reverse=True)\nans = 0\ni = 0\nwhile i < p:\n    start, x, y = pills[i]\n    if i < p - 1 and start == pills[i + 1][0]:\n        i += 1\n    elif i < p - 1 and pills[i + 1][0] - c < start:\n        i += 1\n    elif i == p - 1 and start + c < pills[i][0]:\n        break\n    ans = max(ans, start + x * y)\n    i += 1\nprint(ans)\n"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(read_input()) == read_expected()\n\n\"\"\"\n"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '100 3 10\\n15 99 98\\n40 3 2\\n90 10 9'\n) == '115.0'\nassert solution(\n    '8 2 10\\n10 3 5\\n5 1 3\\n10 2 6'\n) == '12.0'\nassert solution(\n    '4 2 10\\n2 1 4\\n2 2 6\\n10 2 6'\n) == '13.0'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 1\nassert solution('10\\n') == 10\nassert solution('10 2 3\\n') == 10\nassert solution('5 2 3\\n') == 6\n"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 3 10\\n15 99 98\\n40 3 2\\n90 10 9\") == \"115.000000000\"\n\"\"\"\n"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100 3 10\\n15 99 98\\n40 3 2\\n90 10 9') == '115.0'\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"2\\n100 1 1\\n100 1 1.5\"\n) == \"199.500000\"\nprint(solution(input))"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.500000'\nassert solution('1\\n100 1 1\\n100 1 1.5') == '199.500000'\nassert solution('0\\n1 1 1\\n100 1 1.5') == '199.500000'\nassert solution('0\\n1 1 1\\n1 1 1.5') == '199.500000'\nassert solution('0\\n1 1 1\\n100 1 1.5') == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.500000'\n\"\"\"\n\n\n\"\"\"\nWe are given N points on the plane, (x_1, y_1), \u2026, (x_N, y_N), and the order of points defines the order on the plane, as well as the order in the sequence of parameters of your code. The first line contains the integer N. The second line contains the N space-separated real numbers x_1, y_1, \u2026, x_N, y_N.\n\nThe set of points is the convex hull of the points. Your code should output the maximum distance between the points.\n\nExample\n\nInput:\n\n2\n\n1.0 1.0\n\n1.0 1.5\nOutput:\n\n1.500000\n\"\"\"\n\nimport math"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2\n100 1 1\n100 1 1.5\n''') == '199.500000'\n\"\"\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('foo') == 'foo'\nassert solution('   foo  ') == 'foo'\nassert solution('bar     ') == 'bar'\nassert solution('    bar') == 'bar'\n"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 0\") == \"0.000000\"\nassert solution(\"1 2 1\") == \"1.000000\"\nassert solution(\"3 10 0.5 1\") == \"5.000000\"\nassert solution(\"4 0.5 1 1\") == \"1.000000\"\nassert solution(\"5 3 3.14159 0.125 1\") == \"11.917527\"\n"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 1 1\\n100 1 1.5\") == \"199.500000\"\n\"\"\"\n\nimport math\n\nclass Star:\n    def __init__(self, T, s, a):\n        self.T = T\n        self.s = s\n        self.a = a\n\nN = int(input())\nstars = [Star(*list(map(float, input().split()))) for _ in range(N)]"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.50000'\nassert solution('2\\n100 1 1\\n100 1 1.500000') == '199.500000'\nassert solution('2\\n100 1 1\\n100 1 1.499998') == '199.499998'\n'''\n\nimport sys\nimport math"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n100 1 1\n100 1 1.5\n\"\"\") == \"199.500000\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n3\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n1 2 3') == '1'\nassert solution('3 5\\n6 8 1 2 3 4 5') == '3'\nassert solution('4 4\\n1 2 3 4 5 6 7 8 9') == '1'\nassert solution('2 3\\n1 2 4') == '1'\nassert solution('2 3\\n5 10 1 2') == '4'\n"
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2 3\") == \"1\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\n1 2 3\n''') == '1'\n\"\"\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 2 3\") == \"1\"\nassert solution(\"2 3\\n1 2 4\") == \"1\"\nassert solution(\"2 3\\n1 2 3\\n1 2 3\") == \"0\"\nassert solution(\"2 3\\n1 2 3\\n1 2 3\\n1 2 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 2 3\") == '1'\nassert solution(\"2 3\\n1 2 4\") == '1'\nassert solution(\"2 3\\n1 2 6\") == '1'\nassert solution(\"2 3\\n1 7 10\") == '3'\nassert solution(\"2 3\\n2 7 10\") == '2'\n"
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\nassert solution('''\n3 3\n4 5 6 7 8 9 10 11 12\n''') == '0'\n'''"
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\n\nassert solution('''\n3 2\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '0'\n\nassert solution('''\n2 3\n10 11 12\n''') == '3'\n\nassert solution('''\n3 2\n10 20 30\n''') == '1'\n\nassert solution('''\n3 2\n10 11 12\n''') == '0'"
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 2 3') == '1'\n"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13\") == \"5\"\nassert solution(\"11\") == \"Impossible\"\nassert solution(\"11\") == \"Impossible\"\nassert solution(\"11\") == \"Impossible\"\nassert solution(\"11\") == \"Impossible\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13') == '5'\nassert solution('3 2 1 1') == 'Impossible'\nassert solution('1 2 1 1') == 'Impossible'\nassert solution('1 0 1 0') == 'Impossible'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4 1 1') == 'Impossible'\nassert solution('2 4 2 1') == '4'\nassert solution('2 4 1 2') == 'Impossible'\nassert solution('5 4 1 1') == '3'\nassert solution('5 4 2 1') == '4'\n"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\\n3 2 1 1\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13') == '5'\nassert solution('20') == 'Impossible'\nassert solution('10') == '3'\nassert solution('12345') == 'Impossible'\nassert solution('100') == '10'\n"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13\") == \"Impossible\"\nassert solution(\"12\") == \"6\"\nassert solution(\"11\") == \"4\"\nassert solution(\"10\") == \"3\"\nassert solution(\"9\") == \"2\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n13\n3 2 1 1\n''') == '5'\n\nassert solution('''\n100000\n1 0 0 0\n''') == 'Impossible'\n\nassert solution('''\n12\n0 1 1 1\n''') == '4'\n\nassert solution('''\n12\n1 1 1 1\n''') == 'Impossible'\n\nassert solution('''\n12\n0 0 0 1\n''') == '4'"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13\\n3 2 1 1') == '5'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 1 1\\n') == 'Impossible'\nassert solution('0\\n1 1 1 1') == 'Impossible'\nassert solution('8\\n1 1 1 1') == '5'\n\"\"\""
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13\\n3 2 1 1') == '5'\n\"\"\"\n"
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aabcad\") == \"yes\"\nassert solution(\"aba\") == \"yes\"\nassert solution(\"acd\") == \"no\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    'aabcad'\n) == 'yes'\nassert solution(\n    'aba'\n) == 'yes'\nassert solution(\n    'acd'\n) == 'no'\nassert solution(\n    'abc'\n) == 'no'\nassert solution(\n    'abcba'\n) == 'no'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == \"no\"\nassert solution(a1) == \"yes\"\nassert solution(a2) == \"yes\"\nassert solution(a3) == \"no\"\nassert solution(a4) == \"yes\"\n\"\"\""
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aabcad\") == \"yes\"\nassert solution(\"aba\") == \"yes\"\nassert solution(\"acd\") == \"no\"\nassert solution(\"aa\") == \"no\""
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aabcad\") == \"yes\"\nassert solution(\"aba\") == \"yes\"\nassert solution(\"acd\") == \"yes\"\nassert solution(\"aa\") == \"no\"\nassert solution(\"aaa\") == \"no\"\n"
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'yes'\nassert solution('acd') == 'no'\nassert solution('abcde') == 'no'\nassert solution('a') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'yes'\nassert solution('acd') == 'yes'\nassert solution('abab') == 'no'\nassert solution('aabcda') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aabcad\") == \"yes\"\nassert solution(\"aba\") == \"yes\"\nassert solution(\"acd\") == \"no\"\nprint('All tests passed.')\n\n'''"
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcad\") == \"yes\"\nassert solution(\"aabcad\") == \"yes\"\nassert solution(\"aba\") == \"yes\"\nassert solution(\"abca\") == \"no\"\n\nimport sys"
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aabcad\") == \"yes\"\nassert solution(\"aba\") == \"yes\"\nassert solution(\"acd\") == \"yes\"\nassert solution(\"abc\") == \"no\"\nassert solution(\"ad\") == \"no\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n') == '5'\nassert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n') == '5'\nassert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n') == '5'\nassert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n') == '5'\nassert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n') == '5'\n"
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(sample_input) == sample_output\n\"\"\"\n\n\"\"\"\n###\n\nGiven input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n\n1: 5, 8, 9, 10\n2: 4, 6\n3: 1, 2, 7\n4: 1, 3, 4\n\nAnswer is max(5, 4, 1, 1) = 5\n\n\"\"\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_0) == '5'\n\"\"\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\") == \"5\"\n\"\"\"\n\nN, L, B = list(map(int, input().split()))\nstart, end = map(int, input().split())"
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\") == \"5\"\n\nimport sys; sys.setrecursionlimit(10000)\nimport functools\nimport collections\n\nclass Deque(collections.deque):\n  def remove(self, x):\n    self.pop()"
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 3\\n2 1 1 5\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\") == \"5\""
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9''') == '5'\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5') == '5'\n\n\"\"\"\n\nrooms = 0\nlocks = 0\nbadges = 0\n\nS = int(stdin.readline())\nD = int(stdin.readline())\n\nl = []\n\nfor i in range(0, int(stdin.readline())):\n    a, b, x, y = [int(i) for i in stdin.readline().split()]\n    l.append((a, b, x, y))\n    rooms += 1\n\nfor a, b, x, y in l:\n    badges += (y - x + 1)\n\nfor a, b, x, y in l:\n    if a == S and b == D:\n        locks = (x - 1)\n\nprint(badges - (S - 1 + D - 1) - locks)\n\n\"\"\"\n\nB, L, N = [int(i) for i in stdin.readline().split()]\n\nfor i in range(0, int(stdin.readline())):\n    s, d, x, y = [int(i) for i in stdin.readline().split()]\n    if s <= N <= d:\n        print(y - x + 1)\n        break\n\n\"\"\""
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('0 1') == '0'\nassert solution('1 1 1 1') == '1'\nassert solution('1 0 1 1 1 1') == '1'\n\n'''\nimport itertools"
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same') == '4'\nassert solution('4 3\\n2 3 same\\n3 4 same') == '0'\n\"\"\""
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 1 same\") == \"4\"\n\"\"\"\n\n\"\"\"\nIntuition\n\nLet's write a function f(k, n, c) to count the number of possible answer sequences satisfying k hints, given n questions, where c is a character, either 'T' or 'F'.\n\nSince there are a total of n different possible answers, there are at most n^k different possible answer sequences.\n\nIf the hint is valid, then we can always flip the answer in one of the n^(k-1) answer sequences.\n\nHow many new valid answer sequences can we get from flipping the answer in the n^(k-1) answer sequences?\n\nIf the answer sequence is not valid, we can always flip the answer in all n^(k-1) answer sequences.\n\nHow many new valid answer sequences can we get from flipping the answer in the n^(k-1) answer sequences?\n\nBoth of the above can be formulated as a binomial coefficient.\n\nIn order to count the number of valid answer sequences, we need to first find out how many valid answer sequences exist using the first (k-1) hints.\n\nHow many valid answer sequences exist using the first (k-1) hints?\n\nIt's easy to see that the number of valid answer sequences can be calculated as the binomial coefficient, n!/(k!(n-k)!), where n! is the factorial of n.\n\nIn the following code, I compute the factorials using dynamic programming, which is a very efficient method for calculating factorials."
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n2 4 same\\n3 5 same\") == \"4\"\nassert solution(\"5 2\\n2 4 different\\n3 5 same\") == \"0\"\nassert solution(\"5 2\\n2 4 same\\n3 5 different\") == \"1\"\n\n-----Problem Source-----\nMindCoding\n\n-----Solution------\n\"\"\"\n\nn, m = [int(i) for i in input().split()]\nfor _ in range(m):\n    l, r, *args = input().split()\n    print(args.count(\"same\") + args.count(\"different\"))\n"
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n2 4 same\\n3 5 same\") == \"4\"\n\"\"\""
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same') == '4'\n\"\"\"\n"
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 same\\n1 3 same\\n1 4 same\\n1 5 same') == 4\nassert solution('1 2 different\\n1 3 different\\n1 4 same\\n1 5 different') == 0\nassert solution('1 2 same\\n1 3 different\\n1 4 same\\n1 5 different') == 0\nassert solution('1 2 different\\n1 3 same\\n1 4 different\\n1 5 same') == 0\nassert solution('1 2 different\\n1 3 different\\n1 4 same\\n1 5 different') == 0\n"
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4 same') == '12\\n'\nassert solution('7 4 different') == '0\\n'\nassert solution('10 4 different') == '10\\n'\nassert solution('10 4 same') == '1\\n'\nassert solution('7 5 same') == '8\\n'\n"
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same') == '4'\n\"\"\"\n"
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a b') == 'ab'\nassert solution('a b c d') == 'ab cd'\nassert solution('a b c d e f') == 'abc de f'\n\"\"\""
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 1\\n0 2\") == 1\nassert solution(\"3\\n0 1\\n2 1\\n2 3\") == 2\nassert solution(\"10\\n1 3\\n5 6\\n6 3\\n3 6\\n2 4\\n8 7\\n8 4\\n9 5\\n5 2\\n0 2\\n9 0\\n2 5\") == 3\nassert solution(\"1\\n0\\n0\") == 0\nassert solution(\"2\\n1 1\\n0 1\") == 1\n"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n0\\n0\\n') == '3', 'error'\n\"\"\"\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.vertex = [0 for _ in range(n)]\n        self.neighbors = [[] for _ in range(n)]\n    def connect(self, a, b):\n        self.neighbors[a].append(b)\n        self.neighbors[b].append(a)\n    def add(self, a, b):\n        self.connect(a, b)\n        self.connect(b, a)\n    def disconnect(self, a, b):\n        for idx in range(len(self.neighbors[a])):\n            if self.neighbors[a][idx] == b:\n                self.neighbors[a].pop(idx)\n                break\n        for idx in range(len(self.neighbors[b])):\n            if self.neighbors[b][idx] == a:\n                self.neighbors[b].pop(idx)\n                break\n    def get_connections(self, a):\n        return self.neighbors[a]\n    def get_path_len(self, a, b):\n        neighbors = self.neighbors\n        path = []\n        def dfs(node, path):\n            path.append(node)\n            if node == b:\n                return True\n            if len(neighbors[node]) == 0:\n                return False\n            for child in neighbors[node]:\n                if dfs(child, path):\n                    return True\n            path.pop()\n        dfs(a, path)\n        return len(path)\n    def get_path_len_dfs(self, a, b):\n        if a == b:\n            return 0\n        neighbors = self.neighbors\n        seen = [False for _ in range(self.n)]\n        def dfs(node):\n            if node == b:\n                return True\n            if seen[node]:\n                return False\n            seen[node] = True\n            for child in neighbors[node]:\n                if dfs(child):\n                    return True\n            return False\n        return dfs(a)\n    def get_path_len_bfs(self, a, b):\n        if a == b:\n            return 0\n        neighbors = self.neighbors\n        start = a\n        end = b\n        queue = [start]\n        path = 0\n        while len(queue) > 0:\n            curr = queue.pop(0)\n            for child in neighbors[curr]:\n                if child == end:\n                    return path + 1\n                queue.append(child)\n            path += 1\n        return -1\n    def get_path_len_bfs_helper(self, a, b, visited):\n        if a == b:\n            return 0\n        neighbors = self.neighbors\n        start = a\n        end = b\n        queue = [start]\n        path = 0\n        while len(queue) > 0:\n            curr = queue.pop(0)\n            visited[curr] = True\n            for child in neighbors[curr]:\n                if child == end:\n                    return path + 1\n                if not visited[child]:\n                    queue.append(child)\n            path += 1\n        return -1\n    def get_path_len_bfs_helper_wrapper(self, start):\n        if start == start:\n            return 0\n        visited = [False for _ in range(self.n)]\n        return self.get_path_len_bfs_helper(start, start, visited)\n\nclass UnionFind:\n    def __init__(self, n):\n        self.parent = [i for i in range(n)]\n        self.rank = [0 for _ in range(n)]\n    def union(self, a, b):\n        pa = self.find(a)\n        pb = self.find(b)\n        if pa == pb:\n            return\n        if self.rank[pa] > self.rank[pb]:\n            self.parent[pb] = pa\n        elif self.rank[pa] < self.rank[pb]:\n            self.parent[pa] = pb\n        else:\n            self.parent[pa] = pb\n            self.rank[pb] += 1\n    def find(self, a):\n        while self.parent[a]!= a:\n            self.parent[a] = self.parent[self.parent[a]]\n            a = self.parent[a]\n        return a\n    def connected(self, a, b):\n        return self.find(a) == self.find(b)"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n6 4\n0 1\n0 2\n3 4\n3 5\n''') == '3'\n"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''6 4\n0 1\n0 2\n3 4\n3 5''') == '3'\n\nassert solution('''4 5\n0 1\n0 2\n3 4\n2 4''') == '3'\n\nassert solution('''5 6\n0 1\n1 2\n1 3\n1 4\n1 5''') == '2'\n\nassert solution('''6 6\n0 1\n1 2\n1 3\n1 4\n1 5\n2 6''') == '1'\n\nassert solution('''9 9\n0 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9''') == '1'\n"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3 3\n0 1\n0 2\n1 2\n1 3\n2 3\n\"\"\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 6\n0 1\n0 2\n1 3\n1 4\n2 3\n2 4\n3 4\n3 5\n4 5\n4 6\n''') == '3'\nassert solution('''2 1\n0 1\n''') == '1'\nassert solution('''1 2\n0 1\n''') == '0'\nassert solution('''2 2\n0 1\n1 2\n''') == '0'\nassert solution('''3 4\n0 1\n0 2\n2 3\n1 2\n''') == '2'\n"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n0 1\\n2 0\\n3 0\\n3 1\") == \"3\"\nassert solution(\"6 4\\n0 1\\n0 2\\n3 4\\n3 5\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 4\\n0 1\\n0 2\\n3 4\\n3 5\\n') == '3'\n\"\"\"\n\nc,l = [int(c) for c in stdin.split()]\ncables = [[int(c) for c in stdin.split()] for l in range(l)]\n\nfrom collections import defaultdict\ngraph = defaultdict(dict)\n\nfor node in range(c):\n    graph[node] = defaultdict(list)\n\nfor cb1,cb2 in cables:\n    graph[cb1][cb2].append(1)\n    graph[cb2][cb1].append(1)\n\n\nmax_hops = 0\n\nfor node in range(c):\n    hops = defaultdict(int)\n\n    for node2 in range(c):\n        if node2!= node and len(graph[node2]) > 0:\n            hops[node2] = len(graph[node][node2])\n            max_hops = max(max_hops, hops[node2])\n\nprint(max_hops)\n\n\"\"\"\nSolution 2\n\nfrom collections import defaultdict\ngraph = defaultdict(dict)\n\nfor _ in range(int(input())):\n    node1, node2 = map(int, input().split())\n    graph[node1][node2] = 1\n    graph[node2][node1] = 1\n\nmax_hops = 0\n\nfor node in range(int(input())):\n    hops = defaultdict(int)\n    for node2 in range(int(input())):\n        if node2 not in graph[node] and len(graph[node2]) > 0:\n            hops[node2] = len(graph[node][node2])\n            max_hops = max(max_hops, hops[node2])\n\nprint(max_hops)\n\"\"\"\n"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\n\na, b = map(int, stdin.readline().split())\nfor line in stdin:\n    ...\n\n\"\"\""
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n0 1\\n1 2') == 1\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \"cat\" \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u0434\u0432\u0430 \u0440\u0430\u0437\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:\n\u0421\u0447\u0438\u0442\u0430\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430 \u0432\u0432\u043e\u0434\u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0430\u043a\n\nimport sys\n\nfor line in sys.stdin:\n    line = line.rstrip()\n    # process line\n\n\nSample Input:\n\ncatcatcatcat\ncat and cat\ncatac\ncat\nccaatt\nSample Output:\n\ncatcatcatcat\ncat and cat\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    line = line.rstrip()\n    if line.count('cat') >= 2:\n        print(line)\n\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0434\u0432\u0435 \u0431\u0443\u043a\u0432\u044b \"z\ufeff\", \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0440\u043e\u0432\u043d\u043e \u0442\u0440\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430.\n\nSample Input:\n\nzabcz\nzzz\nzzxzz\nzz\nzxz\nzzxzxxz\nSample Output:\n\nzabcz\nzzxzz\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    line = line.rstrip()\n    if line.count('z') >= 2 and line[line.find('z')+1:line.find('z')+3] == 'z':\n        print(line)\n\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u0435\u0448 \"\\\ufeff\".\n\nSample Input:\n\n\\dir\\\n\\work\\\nSample Output:\n\n\\work\\\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    line = line.rstrip()\n    if line.find('\\\\') >= 0:\n        print(line)\n\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0441\u043b\u043e\u0432\u043e, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 \u0434\u0432\u0443\u0445 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0447\u0430\u0441\u0442\u0435\u0439 (\u0442\u0430\u043d\u0434\u0435\u043c\u043d\u044b\u0439 \u043f\u043e\u0432\u0442\u043e\u0440).\n\nSample Input:\n\nblabla is a tandem repetition\n123123 is too easy\ngo go\naaa\nSample Output:\n\nblabla is a tandem repetition\n123123 is too easy\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    line = line.rstrip()\n    if len(line) >= 3 and line[0:3] == line[0:3][::-1]:\n        print(line)\n\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u0435\u0448 \"\\\ufeff\".\n\nSample Input:\n\n\\dir\\\n\\work\\\nSample Output:\n\n\\work\\\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    line = line.rstrip()\n    if line.find('\\\\') >= 0:\n        print(line)\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0441\u043b\u043e\u0432\u043e, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 \u0434\u0432\u0443\u0445 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0447\u0430\u0441\u0442\u0435\u0439 (\u0442\u0430\u043d\u0434\u0435\u043c\u043d\u044b\u0439 \u043f\u043e\u0432\u0442\u043e\u0440).\n\nSample Input:\n\nblabla is a tandem repetition\n123123 is too easy\ngo go\naaa\nSample Output:\n\nblabla is a tandem repetition\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    line = line.rstrip()\n    if len(line) >= 3 and line[0:3] == line[0:3][::-1]:\n        print(line)\n\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u0435\u0448 \"\\\ufeff\" \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0432 \u0437\u0430\u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 split()\n\nSample Input:\n\n\\dir\\\n\\work\\\nSample Output:\n\n\\work\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    line = line.rstrip()\n    if line.find('\\\\') >= 0 or line.count('\\\\') >= 2:\n        print(line)\n\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\nLUR') == '9.0\\n6.5\\n2.5'\nassert solution('10\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1\\n10 1\\nLUR') == '5.0\\n5.0\\n5.0\\n5.0\\n5.0\\n5.0\\n5.0\\n5.0\\n5.0\\n5.0\\n5.0'\n\"\"\""
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR\") == \"9.0\\n6.5\\n2.5\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 4\n2 2\n4 1\n3 5\n5 3\nLUR''') == '9.0 6.5 2.5'\n\n---\n\nMirko found a wooden board and $N$ nails in his attic. Mirko hammered the nails into the board as fast as possible. The board can be modeled by a coordinate plane and the nails as points in it. No two nails have the same $x$- or the same $y$-coordinate.\n\nIn order to keep having fun, Mirko stole his sister\u2019s elastic hair band, spread it over all nails and then let go. The elastic, naturally, tightened around the nails.\n\nMirko then repeats these steps while there are at least three nails in the board:\n - Write down the area of the shape enclosed by the hair band.\n - Picks the leftmost, rightmost, topmost or bottommost nail in the board.\n - Remove the chosen nail from the board; the elastic tightens again around the remaining nails.\n\nWrite a program that calculates the numbers written in step 1 of each iteration, if we know the nail Mirko picks in step 2 of each iteration.\n\n-----Input-----\nThe first line contains the integer $N$ $(3 \\leq N \\leq 300000)$, the number of nails.\n\nEach of the following $N$ lines contains two integers separated by a space, the coordinates of a nail. All coordinates will be between 1 and $1000000000$. No two nails will share the same $x$- or $y$-coordinate. The next line contains $N-2$ letters \u2019L\u2019, \u2019R\u2019, \u2019U\u2019 or \u2019D\u2019. The letters represent the nails Mirko picked in order:\n - \u2019L\u2019 for the leftmost nail (smallest $x$-coordinate),\n - \u2019R\u2019 for the rightmost nail (largest $x$-coordinate),\n - \u2019U\u2019 for the topmost nail (largest $y$-coordinate),\n - \u2019D\u2019 for the bottommost nail (smallest $y$-coordinate).\n\n-----Output-----\nOutput $N-2$ numbers, each on a separate line. The numbers are, in order, the areas that Mirko wrote down. Output numbers with one digit after the decimal point.\n\n-----Examples-----\nSample Input:\n5\n1 4\n2 2\n4 1\n3 5\n5 3\nLUR\nSample Output:\n9.0\n6.5\n2.5\n"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\nLUR\") == '9.0\\n6.5\\n2.5'\n\nassert solution(\"3\\n1 2\\n2 3\") == '1.5'\n\nassert solution(\"10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\nULD\") == '2.5\\n0.0\\n4.5\\n1.0\\n1.5\\n1.0\\n2.25\\n0.0\\n4.0'\n\nassert solution(\"4\\n1 2\\n2 3\\n4 4\\nULD\") == '1.5'\n\nassert solution(\"9\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\nULDR\") == '2.5\\n0.0\\n4.0\\n1.0\\n1.5\\n1.0\\n2.25\\n0.0\\n4.5'\n\n\"\"\"\n\n\n\"\"\"\nimport math"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\") == '9.0\\n6.5\\n2.5\\n'\n"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR\") == \"9.0\\n6.5\\n2.5\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR\") == \"9.0\\n6.5\\n2.5\"\nassert solution(\"7\\n4 3\\n1 2\\n3 6\\n4 6\\nLDRUUDUUUUUULDRLRRRDD\") == \"9.0\\n8.0\\n6.0\\n8.0\\n4.0\"\nassert solution(\"10\\n5 6\\n4 1\\n3 1\\n9 4\\n5 3\\nRDDDUDUUDUDLDRLUDLDRDRRDRDDRDRDRRDRRRRDRRDRRDRRDRRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDR"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR') == '9.0\\n6.5\\n2.5\\n'\n\nassert solution('2\\n1 1\\n1 1\\nLDR') == '2.0\\n0.0\\n'\nassert solution('1\\n10 10000\\nLDR') == '1.0\\n'\nassert solution('3\\n10000 10000\\nUURD') == '3.0\\n0.0\\n'\nassert solution('10\\n10000 10000\\n
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3') == '9.0\\n6.5\\n2.5'\n\n\"\"\"\n\nimport re\n\nN = int(input())\nlines = [tuple(map(int, line.split())) for line in input().splitlines()]\nremoved = {(x, y) for x, y in lines}\narea = 0\nl, r, t, b = None, None, None, None\n\nfor i in range(N - 1):\n    for j in range(i + 1, N):\n        x1, y1 = lines[i]\n        x2, y2 = lines[j]\n        if x1 == x2 or y1 == y2:\n            continue\n        elif x1 < x2:\n            if l is None or x1 < l[0]:\n                l = (x1, y1, x2, y2)\n        else:\n            if r is None or x2 < r[0]:\n                r = (x1, y1, x2, y2)\n        if y1 < y2:\n            if t is None or y1 < t[1]:\n                t = (x1, y1, x2, y2)\n        else:\n            if b is None or y2 < b[1]:\n                b = (x1, y1, x2, y2)\n    area += (x2 - x1) * (y2 - y1)\n\npattern = re.compile(r'(?P<l>L)?(?P<r>R)?(?P<u>U)?(?P<d>D)?', re.I)\nfor match in pattern.finditer(input()):\n    removed.discard(match.groupdict().get('l') or match.groupdict().get('r') or match.groupdict().get('u') or match.groupdict().get('d'))\n\nprint(*(area - (x[2] - x[0]) * (y[3] - y[1]) for x, y in zip((l, r, t, b), (l or r or t or b)) if x is not None), sep='\\n')\n"
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR\") == '9.0\\n6.5\\n2.5\\n'\n\nassert solution(\"7\\n1 10\\n2 13\\n3 2\\n4 8\\n5 5\\n6 1\\n7 4\\n8 10\\n9 8\\nLUR\") == '111.0\\n849.5\\n111.0\\n'\n\nassert solution(\"10\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1\\n10 1\\nLUR\") == '10.0\\n'\n\nassert solution(\"10\\n1 1000000000\\n2 1000000000\\n3 1000000000\\n4 1000000000\\n5 1000000000\\n6 1000000000\\n7 1000000000\\n8 1000000000\\n9 1000000000\\n10 1000000000\\nLUR\") == '100000000000.0\\n'\n\nassert solution(\"10\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1\\n10 1\\nLUR\") == '1.0\\n'"
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('A') == 'a'\nassert solution('abc') == 'abc'\nassert solution('ABC') == 'abc'\n"
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 2\\nB 1 2\\nB 2 3\\nR 3 1') == '1'\n\"\"\"\n\nfrom queue import Queue"
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 2\\nR 1 2\\nR 2 3\\nB 3 1') == '1'\n\nassert solution('2 1 1\\nB 1 2\\nR 1 2') == '1'\n\nassert solution('2 3 2\\nB 1 2\\nR 2 1\\nR 3 2') == '1'\n\nassert solution('3 2 2\\nB 1 2\\nR 2 1\\nR 2 3') == '1'\n\nassert solution('2 2 1\\nR 1 2\\nR 2 1') == '1'"
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 2\\nR 1 2\\nB 2 3\") == \"1\"\nassert solution(\"3 3 2\\nR 1 2\\nB 2 3\\nR 3 1\") == \"0\""
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2\\nB 1 2\\nB 2 3\\nR 3 1\") == \"1\"\n\"\"\"\n\n\"\"\"\nThis solution is not the most efficient."
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 2\\nR 1 2\\nR 2 3\\nB 3 1') == '1'\nassert solution('3 3 2\\nB 1 2\\nB 2 3\\nR 3 1') == '0'\nassert solution('3 3 1\\nB 1 2\\nB 2 3\\nR 3 1') == '1'\nassert solution('4 5 3\\nB 1 3\\nB 2 3\\nR 4 2\\nB 3 4\\nR 1 4') == '1'\nassert solution('4 4 3\\nB 1 3\\nB 2 3\\nR 4 1\\nB 3 4\\nR 1 4') == '0'\n\n\"\"\""
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2\\nB 1 2\\nB 2 3\\nR 3 1\") == '1'\n\n\"\"\""
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 3 2\\nB 1 2\\nB 2 3\\nR 3 1\"\n) == \"1\"\n\"\"\"\nfrom typing import List, Set, Tuple, Union, Optional, Dict\n\nfrom itertools import combinations\nfrom functools import reduce\nfrom graph import Graph\nfrom math import prod\n\nNode = int\nEdge = Tuple[Node, Node]\nEdges = Set[Edge]\nColoredEdges = Dict[Edge, str]\nColoredEdgesMap = Dict[Node, ColoredEdges]\nCost = Union[int, float]\nCosts = List[Cost]"
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2\\nB 1 2\\nB 2 3\\nR 3 1\") == \"1\"\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 2\\nB 1 2\\nB 2 3\\nR 3 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7\\n\") == \"88\\n5\\n5\\n7\"\n\"\"\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7\") == \"88\"\n\"\"\""
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7\\n\") == \"88\"\n\"\"\""
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7\") == \"88\"\n\"\"\"\n\n\"\"\"\nSolution Approach:\n\nBrute Force:\n\n1. Create a dictionary, and for each value in the array, add it to the dictionary with value 1\n\n2. For each value in the input, do a for loop through it and for each value do the following:\n    a. Get the values from the dictionary and multiply the values with the t value\n    b. Update the value in the dictionary with the new value\n    c. Return the max of the values\n\"\"\"\n\nn = int(input())\nd = {i: 0 for i in range(1, n + 1)}\nfor i in range(1, n + 1):\n    a, b, t = map(int, input().split())\n    d[i] = t * a - ((t - 1) ** 2) * b\nprint(max(d.values()))"
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7\") == \"88\"\nassert solution(\"2\\n5 0 5\\n7 0 7\\n4\\n5\\n6\\n7\") == \"5\"\nassert solution(\"2\\n5 0 5\\n7 0 7\\n4\\n5\\n6\\n7\") == \"5\"\n\"\"\""
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n0 5 5\n7 0 7\n4\n88\n5\n6\n7\n\"\"\") == '88'\nprint(\"PASSED\")\n"
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7\\n') == '88'\nassert solution('2\\n5 0 5\\n7 0 7\\n4\\n5\\n6\\n7\\n') == '5'\nassert solution('2\\n5 0 5\\n7 0 7\\n4\\n7\\n6\\n7\\n') == '5'\nassert solution('2\\n5 0 5\\n7 0 7\\n4\\n7\\n6\\n7\\n') == '7'\n\"\"\"\n\n\nfrom itertools import combinations"
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7\") == \"88\"\nassert solution(\"2\\n5 0 5\\n7 0 7\\n4\\n8\\n5\\n6\\n7\") == \"5\"\nassert solution(\"2\\n5 0 5\\n7 0 7\\n4\\n8\\n5\\n6\\n7\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7') == '88'\nassert solution('2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7') == '5'\nassert solution('2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7') == '5'\nassert solution('2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7') == '5'\nassert solution('2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7') == '5'\n"
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open(\"test.in\", \"r\").read()) == open(\"test.out\", \"r\").read()\nprint(\"Test completed.\")\n"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\\n\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\\n\") == 5\n\"\"\"\n\nfrom sys import stdin\n\nn, m, k, w = map(int, stdin.readline().split())\ngraph = [[] for _ in range(n)]\nfor _ in range(m):\n    a, b, c = map(int, stdin.readline().split())\n    graph[a - 1].append([b - 1, c])\n    graph[b - 1].append([a - 1, c])\n\ndp = [[float('inf') for _ in range(w + 1)] for _ in range(k + 1)]\n\nfor i in range(k):\n    for j in range(w):\n        if i == 0 and j == 0:\n            dp[i + 1][j + 1] = 0\n        else:\n            for p, c in graph[i]:\n                if j + 1 - c >= 0:\n                    dp[i + 1][j + 1] = min(dp[i + 1][j + 1], dp[i][j + 1 - c] + c)"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3''') == '5'\nassert solution('''3 3 1 2\n1\n1 2 2\n1 3 1\n2 3 3''') == '-1'\nassert solution('''3 3 1 2\n1\n1 2 2\n2 3 1\n2 3 3''') == '-1'\nassert solution('''3 3 1 2\n1\n1 2 2\n1 3 1\n2 3 3\n3 2 1''') == '-1'\nassert solution('''3 3 1 2\n1\n1 2 2\n1 3 1\n2 3 3\n3 2 1''') == '7'\n"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3') == 5\n\"\"\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3') == 5\n\"\"\""
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3''') == 5\nassert solution('''3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3''') == -1\nassert solution('''3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3''') == 6\nassert solution('''3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n2\n1 2 3\n1 3 2\n3 1 2\n2 1 3''') == 5\nassert solution('''3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n2\n1 2 3\n1 3 2\n3 1 2\n2 1 3''') == -1"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\") == 5\n\"\"\"\n\nimport sys\nimport math\n\nsys.stdin = open(\"input.txt\", \"r\")\ninput = sys.stdin.readline"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\") == 5\n\"\"\"\n\nimport math\n\nn, m, k, w = [int(x) for x in input().split()]\nspecial = set([int(x) for x in input().split()])\npotential = set([int(x) for x in input().split()])\n\nedges = set()\nfor i in range(m):\n    x, y, c = [int(x) for x in input().split()]\n    edges.add((x, y))\n\nedges = sorted(list(edges), key=lambda x: x[0])"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 1 2\\n2\\n1 2 2\\n1 3 1\\n2 3 3\\n\") == \"5\"\nprint('Hooray!')\n"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution(' ') ==''\n\"\"\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nprint(solution(\"mirkovC4nizCC44\"), \"mirkovniz\")\n"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\n\"\"\"\n\nstring = input()\nexplosion = input()"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'\nassert solution('mirkovC4nizCC444') == 'FRULA'\nassert solution('mirkovC44nizCC44') =='mirkovC4nizCC44'\n\"\"\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"ivjb6Xz7\") == \"vj\"\nassert solution(\"a1b2\") == \"a1b2\"\n\"\"\"\n\n\"\"\"\nimport sys\nfrom collections import OrderedDict\nfrom typing import List\nfrom collections import OrderedDict\nfrom typing import List\nfrom typing import Dict\nfrom collections import OrderedDict\nfrom typing import Dict\nfrom typing import OrderedDict"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"C4\") == \"FRULA\"\n\"\"\"\n\nstdin = input().split()\nexplosion = input()\n\nstring = stdin[0]\nexplosions = [chr(ord('a') + i) for i in range(36)]\nexplosions = list(set(explosions) - set(explosion))\n\nexplosions = explosions[::-1]\n\nwhile explosions:\n    i = 0\n    while string.find(explosions[i]) >= 0:\n        string = string.replace(explosions[i],'')\n        i += 1\n\n    explosions = explosions[:i]\n\nprint(string.replace(' ', ''))"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'\nassert solution('mirkovC4nizC44') =='mirkovC4nizC44'\nassert solution('mirkovC4nizCC44') =='mirkovniz'\nassert solution('mirkovC4nizC44') =='mirkovC4nizC44'\n\n-----Input-----\nabcde\nW7\n-----Output-----\nabcde\n-----Input-----\nabcd\nZ5\n-----Output-----\nabcd\n'''\nimport re\nfrom itertools import chain, combinations\nfrom collections import Counter\n"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"mirkovC4nizCC44C4\") == \"mirkovniz\"\nassert solution(\"mirkovC4nizCC44C4C4\") == \"mirkovniz\"\nassert solution(\"mirkovC4nizCC44C4C4C4\") == \"frula\"\nassert solution(\"mirkovC4nizCC44C4C4C4C4C4\") == \"frula\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"cc11a1\") == \"11a1\"\nassert solution(\"22\") == \"2\"\nassert solution(\"2222\") == \"FRULA\"\nassert solution(\"11a1\") == \"11a1\"\n\"\"\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"niz\"\nassert solution(\"C4\") == \"FRULA\"\n\"\"\"\n\n\"\"\"\n\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e solution(s), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 s \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0451 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u0434 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u0421\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u043d\u0430 \u0432\u0445\u043e\u0434\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \"s4k2y5h3n7i8o9p\" \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043a\u0430\u043a \"s2k3y5h7n8i9o9p\".\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u043e\u0434\u0430 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\u041d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0439 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u0432 \u043d\u0435\u0439 \u043d\u0435 \u0431\u044b\u043b\u043e \u043b\u0438\u0448\u043d\u0438\u0445 \u0441\u043a\u043e\u0431\u043e\u043a \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043e\u0448\u0438\u0431\u043e\u043a.\n\nSample Input 1:\nd4rk5ge5t6e6\nSample Output 1:\nt6e6d4rk5ge5\nSample Input 2:\nqwertzuiop\nSample Output 2:\nuiopzqwert\nSample Input 3:\nqwertyuiopzxcvbnm\nSample Output 3:\nzxcvbnmwqertyuiop\n\"\"\""
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 65\\n45 10\\n60 25\") == \"32\"\n\n\"\"\"\n\n\"\"\"\nThe following solution is optimal.\nLet us consider the following example:\n\nWe have 3 trucks. They start at entrances 1, 3 and 5 respectively.\n\nNow, we will construct a table of 2*10^6\n\nThe index represents the entrance and\nthe value represents the exit.\n\nThen we will build a \"toll collection table\" for every truck,\nat the entrance of each truck, we add all the tolls to the current truck's collection table,\nafter leaving the truck, we subtract the tolls from the collection table.\n\nWe will also keep a \"toll collection table\" for the total tolls.\nThis table will be reset each time we enter a new truck.\n\nThen, we will iterate from the first entrance to the last entrance, and iterate from the first exit to the last exit.\nEach time we iterate, we update the minimum tolls.\n\nThe time complexity is O(N) since we visit every entry and every exit once.\nThe space complexity is O(2*10^6) since we maintain a table of 10^6 * 10^6.\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solution(self, stdin):\n        total_tolls = 0\n        truck_count = int(stdin.readline())\n        truck_toll_collection_table = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n        for i in range(truck_count):\n            entrance, exit = map(int, stdin.readline().split())\n            truck_toll_collection_table[i][entrance] += exit\n            truck_toll_collection_table[i][exit] -= entrance\n        for entrance_num in range(1, len(truck_toll_collection_table[0])):\n            for exit_num in range(1, len(truck_toll_collection_table[1])):\n                toll = truck_toll_collection_table[0][entrance_num] - truck_toll_collection_table[1][exit_num]\n                total_tolls = min(total_tolls, toll)\n        print(total_tolls)\n        return\n"
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 65\\n45 10\\n60 25') == 32\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 65\\n45 10\\n60 25') == 32\n\nassert solution('2 2\\n1 2\\n2 1') == 0\n\"\"\"\n\nN = int(input())\n\ntrucks = {}\n\nfor i in range(N):\n    a, b = [int(i) for i in input().split()]\n    trucks[a] = b\n\ntrucks = sorted(trucks.items())\n\nprint(sum([abs(a - b) for a, b in trucks]))\n"
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n65\\n45\\n60\\n25') == 32\n\"\"\""
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 65\\n45 10\\n60 25\") == 32\n\"\"\"\n\nn = int(stdin.readline())\n\nentrances, exits = [], []\nfor _ in range(n):\n    a, b = map(int, stdin.readline().split())\n    entrances.append(a)\n    exits.append(b)\n\nans = 0\nfor i in range(n):\n    ans += max(entrances[i] - exits[i], 0)\nprint(ans)"
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 65\\n45 10\\n60 25\") == \"32\"\n\"\"\""
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(42)\n\n-----Solution-----\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\ntrucks = []\n\nfor i in range(n):\n    truck = [int(x) for x in sys.stdin.readline().strip().split(' ')]\n    trucks.append(truck)\n\ntrucks = sorted(trucks, key=lambda x: (x[0], x[1]))\n\ntrucks = [trucks[0]]\n\nfor i in range(1, n):\n    if trucks[-1][0] == trucks[i][0]:\n        continue\n    trucks.append(trucks[-1] + [trucks[i][1]])\n\ntrucks = sorted(trucks, key=lambda x: x[1])\n\ntotal_tolls = 0\n\nfor i in range(len(trucks)):\n    total_tolls += abs(trucks[i][0] - trucks[i][1])\n\nprint(total_tolls)\n"
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\") == 0\nassert solution(\"3\\n65\\n45 10\") == 32\nassert solution(\"3\\n65\\n45 10\\n60 25\") == 32\n\n------Problem Source------\nhttps://codeforces.com/gym/10862/problem/A\n\"\"\""
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n65\\n45 10\\n60 25\") == \"32\"\n\"\"\"\n\nn = int(stdin.readline())\ntolls = [0] * n\nfor i in range(n):\n    entrance, exit = map(int, stdin.readline().split())\n    tolls[i] += abs(entrance - exit)\n\nprint(min(tolls))\n"
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 65\\n45 10\\n60 25') == 32\n\"\"\"\n\nN = int(input())\nentrance_exit_pair = []\nfor i in range(N):\n    entrance, exit = [int(x) for x in input().split()]\n    entrance_exit_pair.append((entrance, exit))\n\nentrance_exit_pair.sort()\nres = 0\nfor i in range(len(entrance_exit_pair)):\n    entrance, exit = entrance_exit_pair[i]\n    if entrance == exit:\n        res += abs(exit - entrance)\n    else:\n        res += max(0, entrance - exit)\n\nprint(res)\n"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '3\\n2\\n'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().strip().split()))\n\npre_key = A[0]\ncur_key = A[0]\nmax_key = 0\nfor key in A:\n    if key > cur_key:\n        max_key += 1\n    elif key < pre_key:\n        max_key -= 1\n    pre_key = key\nprint(max_key)"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 0 3 1\") == \"3\\n2\"\nassert solution(\"10\\n5 4 3 2 1\") == \"5\\n3\"\nassert solution(\"10\\n9 8 7 6 5\") == \"6\\n4\"\nassert solution(\"10\\n5 4 3 2 1\") == \"3\\n2\"\nassert solution(\"10\\n9 8 7 6 5\") == \"6\\n4\"\n"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 0 3 1\") == \"3\\n2\"\nassert solution(\"10\\n2 6 0 2 3 8 6 7 1\") == \"2\\n7\"\n"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 0 3 1\\n\") == \"3\\n2\"\n\nimport sys; input = sys.stdin.readline\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        res = max(res, res * j + j)\n    print(res)\n\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        if j > res:\n            res = res * j + j\n        elif j < res:\n            res = res * j + j - 1\n    print(res)\n\nimport sys; input = sys.stdin.readline\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        if j > res:\n            res = res * j + j\n        elif j < res:\n            res = res * j + j - 1\n    print(res)\n\nimport sys; input = sys.stdin.readline\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        res = max(res, res * j + j)\n    print(res)\n\nimport sys; input = sys.stdin.readline\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        if j > res:\n            res = res * j + j\n        elif j < res:\n            res = res * j + j - 1\n    print(res)\n\nimport sys; input = sys.stdin.readline\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        res = max(res, res * j + j)\n    print(res)\n\nimport sys; input = sys.stdin.readline\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        if j > res:\n            res = res * j + j\n        elif j < res:\n            res = res * j + j - 1\n    print(res)\n\nimport sys; input = sys.stdin.readline\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        res = max(res, res * j + j)\n    print(res)\n\nimport sys; input = sys.stdin.readline\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        if j > res:\n            res = res * j + j\n        elif j < res:\n            res = res * j + j - 1\n    print(res)\n\nimport sys; input = sys.stdin.readline\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        res = max(res, res * j + j)\n    print(res)\n\nimport sys; input = sys.stdin.readline\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        if j > res:\n            res = res * j + j\n        elif j < res:\n            res = res * j + j - 1\n    print(res)\n\nimport sys; input = sys.stdin.readline\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        res = max(res, res * j + j)\n    print(res)\n\nimport sys; input = sys.stdin.readline\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        if j > res:\n            res = res * j + j\n        elif j < res:\n            res = res * j + j - 1\n    print(res)\n\nimport sys; input = sys.stdin.readline\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        res = max(res, res * j + j)\n    print(res)\n\nimport sys; input = sys.stdin.readline\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        if j > res:\n            res = res * j + j\n        elif j < res:\n            res = res * j + j - 1\n    print(res)\n\nimport sys; input = sys.stdin.readline\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        res = max(res, res * j + j)\n    print(res)\n\nimport sys; input = sys.stdin.readline\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        if j > res:\n            res = res * j + j\n        elif j < res:\n            res = res * j + j - 1\n    print(res)\n\nimport sys; input = sys.stdin.readline\nfor i in range(int(input())):\n    res = 0\n    for j in map(int, input().split()):\n        res = max(res, res * j + j)\n    print(res)\n\nimport sys; input = sys.stdin.readline\n"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 0 3 1\") == \"3\"\nassert solution(\"4\\n1 2 3 0\") == \"1\"\n\"\"\"\n\nn = int(stdin.readline())\nseq = list(map(int, stdin.readline().split()))\n\nprev = None\nans = 0\nfor i in range(n):\n    if prev is None or seq[i] > prev:\n        ans += 1\n        prev = seq[i]\nprint(ans)\n\nprev = None\nans = 0\nfor i in range(n):\n    if prev is None or seq[i] < prev:\n        ans += 1\n        prev = seq[i]\nprint(ans)\n\nprev = None\nans = 0\nfor i in range(n):\n    if prev is None or seq[i] == prev:\n        ans += 1\n        prev = seq[i]\nprint(ans)\n"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 2 3') == '3'\nassert solution('5\\n1 2 0 3 1') == '2'\n\"\"\"\n\nn = int(stdin.readline())\nnums = list(map(int, stdin.readline().split()))\n\ncount = [0] * n\ncount[0] = 1\n\nfor i in range(1, len(nums)):\n    count[i] = max(count[i], count[i - 1])\n    if nums[i] > nums[i - 1]:\n        count[i] = max(count[i], count[i - 1] + 1)\n    elif nums[i] < nums[i - 1]:\n        count[i] = max(count[i], count[i - 1] - 1)\n\nprint(count[-1])"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n1 2 0 3 1''') == '3\\n2'\n\nassert solution('''10\n1 2 0 3 1 4 5 6 7 8 9''') == '7\\n8'\n\nassert solution('''100\n1 2 0 3 1 4 5 6 7 8 9 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1''') == '70\\n76'\n'''\n'''\n"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('10\\n') == '10'\nassert solution('11\\n') == '10'\n"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"2\"\nassert solution(\"6\\n1 2 0 3 1\") == \"2\"\nassert solution(\"6\\n1 2 0 0 3 1\") == \"3\"\nassert solution(\"6\\n1 2 0 3 1 1\") == \"1\"\nassert solution(\"6\\n1 2 0 3 1 2\") == \"3\"\n"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 1\") == \"2\\n1\"\n\"\"\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"2\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n\") == \"2\"\n\n\"\"\"\nimport math\nfrom collections import defaultdict\n"
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"2\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n\") == \"2\"\nassert solution(\"4 4 3\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n\") == \"0\"\nassert solution(\"2 2 2\\n+ 1 1\\n- 1 2\\n+ 1 1\\n- 1 2\\n\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input) == output\n\n----"
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"2\"\nassert solution(\"1 1 10\\n+ 1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n3\\n4\\n') == '6'\nassert solution('1\\n2\\n3\\n4\\n5\\n') == '10'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == '20'\n"
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == 2\n\"\"\"\n\nimport math\nimport itertools"
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str([\n    \"2 3 2\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"- 1 3\",\n    \"- 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"- 1 3\",\n    \"- 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4\",\n    \"+ 1 1\",\n    \"+ 1 2\",\n    \"+ 1 3\",\n    \"+ 1 4"
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n1 2 1\\n') == '6\\n'\nassert solution('4\\n1 1 2 3\\n1 1 3\\n2 2 4\\n2 3 4\\n3 1 5\\n3 3 5\\n') == '1\\n'\nassert solution('2\\n1 1\\n1 2\\n') == '1\\n'\nassert solution('3\\n1 1\\n1 2\\n1 3\\n') == '1\\n'\nassert solution('3\\n1 1\\n1 2\\n2 3\\n') == '1\\n'\n"
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1000000000 0\\n1000000000 1\") == \"500000004\"\n\"\"\""
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n1') == '1\\n'\nassert solution('2\\n1 1000000000 0') == '1\\n'\nassert solution('3\\n1 1000000000 0\\n1 1000000000 1') == '1\\n'\nassert solution('4\\n1 1000000000 0\\n1 1000000000 1\\n1 1000000000 2') == '1\\n'\nassert solution('5\\n1 1000000000 0\\n1 1000000000 1\\n1 1000000000 2\\n1 1000000000 3') == '0\\n'\n"
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 0 1\\n1 0 2\") == '1'\n\"\"\""
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n1 2 1') == '0'\nassert solution('2 1\\n1 2 1') == '1'\nassert solution('3 2\\n1 1 1\\n1 2 1') == '1'\nassert solution('3 3\\n1 2 1\\n1 2 1\\n1 3 1') == '1'\n\nSample Case:\nCase #1: Sample Input 1\n\n1\n1\nSample Output 1:\n\n1\nCase #2: Sample Input 2\n\n3\n1 1000000000 1\n1 1000000000 1\nSample Output 2:\n\n0\nCase #3: Sample Input 3\n\n4\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\nSample Output 3:\n\n500000004\n'''"
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 1000000000 0\n2 1000000000 1\n3 1000000000 2\n\"\"\") == '300000006'\n\nassert solution(\"\"\"\n4\n1 1000000000 0\n2 1000000000 1\n3 1000000000 2\n4 1000000000 3\n\"\"\") == '300000006'\n\nassert solution(\"\"\"\n5\n1 1000000000 0\n2 1000000000 1\n3 1000000000 2\n4 1000000000 3\n5 1000000000 4\n\"\"\") == '300000006'\n\nassert solution(\"\"\"\n6\n1 1000000000 0\n2 1000000000 1\n3 1000000000 2\n4 1000000000 3\n5 1000000000 4\n6 1000000000 5\n\"\"\") == '300000006'\n\nassert solution(\"\"\"\n6\n1 1000000000 0\n2 1000000000 1\n3 1000000000 2\n4 1000000000 3\n5 1000000000 4\n6 1000000000 5\n\"\"\") == '300000006'"
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 1000000000 1\\n\") == \"500000004\"\n\"\"\"\n\nimport collections\nimport math"
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\\\n1 2 3 4\\\\n2 1 1\\\\n3 1 2\\\\n4 1 2\\\\n3 3 3\\\\n3 4 5\\\\n3 3 3\\\\n4 4 2\\\\n4 2 3\") == \"3236111\\\\n3236111\"\nassert solution(\"4\\\\n1 2 3 4\\\\n2 1 1\\\\n3 1 2\\\\n4 1 2\\\\n3 3 3\\\\n3 4 5\\\\n3 3 3\\\\n4 4 2\\\\n4 2 3\") == \"3236111\\\\n3236111\"\nassert solution(\"4\\\\n1 2 3 4\\\\n2 1 1\\\\n3 1 2\\\\n4 1 2\\\\n3 3 3\\\\n3 4 5\\\\n3 3 3\\\\n4 4 2\\\\n4 2 3\") == \"3236111\\\\n3236111\"\nassert solution(\"4\\\\n1 2 3 4\\\\n2 1 1\\\\n3 1 2\\\\n4 1 2\\\\n3 3 3\\\\n3 4 5\\\\n3 3 3\\\\n4 4 2\\\\n4 2 3\") == \"3236111\\\\n3236111\"\n\"\"\"\n\nimport sys\nimport random\n"
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000000000 0\\n1000000000 1') == '500000004'\nassert solution('10000 1\\n10000 2') == '1'\nassert solution('100 2\\n100 3') == '0'\n"
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('2\\n1 0') == '500000004'\n\n'''"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24\") == 12\n"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24\\n\") == \"12\"\nprint('Hooray!')\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n2 1 10\\n1 3 11\\n1 2 9\\n3 5 12') == '12'\nassert solution('6 2\\n3 1 12\\n1 3 15\\n3 4 16\\n4 5 19\\n1 2 7\\n2 3 8') == '25'\nassert solution('3 4\\n3 1 12\\n1 3 15\\n3 4 16') == '25'\nassert solution('4 3\\n3 1 12\\n1 3 15\\n3 4 16') == '25'\n\n-----Input-----\n\nSample Input:\n5 7\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n\n-----Output-----\n\nSample Output:\n26\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24') == '12'\nprint(solution(stdin))\n"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24\") == \"12\"\n\"\"\"\n\nimport sys\nimport itertools\n\nsys.setrecursionlimit(2 ** 16)\n\nn, m = map(int, input().split())\n\ntbl = [None] * n\nfor _ in range(m):\n    a, b, s, e = map(int, input().split())\n    tbl[a - 1] = (b - 1, s - 1, e)\n\ntbl.append((None, None, None))\n\ncost = [0] * n"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24\\n\") == \"12\"\nassert solution(\"5 3\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24\\n\") == \"27\"\n\"\"\""
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2 1 3\\n2 1 2\") == 3\nassert solution(\"2 2\\n1 2 1 3\\n1 2 2\") == 1\nassert solution(\"3 3\\n1 2 1 3\\n2 1 2\\n3 1 3\") == 1\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24''') == '12'\n"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24\") == '12'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"15 5 3\\n12 4 4\\n20 10 5\") == '3'\nassert solution(\"15 5 3\\n12 4 4\\n20 10 5\") == '3'\nassert solution(\"15 5 3\\n12 4 4\\n20 10 5\") == '3'\n\n\"\"\""
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 19\\n15 5 3\\n12 4 4\\n20 10 5\\n') == 3\n"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('foo') == 'foo'\n'''\n\n\n\n\n\n\n\n\n\n\n\n'''\nGiven a matrix of integers A of size N x 2 describing dimensions of N rectangular \nopen areas, where A[i][0] is length of area i and A[i][1] is width of area i. \nFind the total area covered by all N areas. Since the answer can be large, \nreturn it modulo 109 + 7.\n\n-----\nFirst, consider an example for which the solution is trivial. \nAssume that the area covered by the two rectangles is $5 \\times 4$. \nThe answer is $5 \\times 4$. \nNow, assume that the area covered by the two rectangles is $5 \\times 4$ and the area covered by the third rectangle is $4 \\times 3$. \nThe sum of the areas covered by the three rectangles is $5 \\times 4 + 4 \\times 3 = 17$. \nWe can see that the sum is larger than the answer, $17 > 5 \\times 4$. \nSince $17 > 5 \\times 4$ we should consider a larger number. \nFor example, assume that the area covered by the two rectangles is $5 \\times 4$, \nthe area covered by the third rectangle is $4 \\times 3$ and the area covered by the fourth rectangle is $3 \\times 2$. \nThe sum of the areas covered by the four rectangles is $5 \\times 4 + 4 \\times 3 + 3 \\times 2 = 26$. \nThis is larger than $5 \\times 4$, which means the answer is larger than $5 \\times 4$.\n\nConsider an example where the solution is trivial. Assume that the area covered by \nthe first rectangle is $5 \\times 4$. The area covered by the second rectangle is \n$4 \\times 3$. The area covered by the third rectangle is $3 \\times 2$. The sum of the \nareas covered by the three rectangles is $5 \\times 4 + 4 \\times 3 + 3 \\times 2 = 17$. \nSince $17 < 5 \\times 4$, the answer is $5 \\times 4$.\n\nIn general, if the area covered by the i-th rectangle is $A_i$ and the area \ncovered by the (i+1)-th rectangle is $A_{i+1}$ then the sum of the areas covered \nby the two rectangles is $A_i + A_{i+1}$.\n\nWe can see that the solution is the maximum of the two numbers: the maximum \nof $5 \\times 4$ and $5 \\times 4 + 5 \\times 3 + 5 \\times 2 + 5 \\times 1 = 19$.\n\nNow we can use the following recurrence relation to generate the solutions.\n\nLet $S(A, B)$ be the solution for the covering of a rectangle of area $A \\times B$. \nThen $S(A, B) = S(A - 1, B) + S(A - 1, B - 1) + S(A - 1, B - 2) +... + S(A - 1, B - A + 1)$ \nwhere the last term is the term of the generating function for the binomial \ncoefficients and the other terms are the solutions of the previous terms.\n\nConsider an example. Assume that the area covered by the rectangle is $6 \\times 6$. \nThen the solution is the maximum of the solution for $3 \\times 6$, $3 \\times 5$ \nand $3 \\times 4$. We can see that the answer is $3 \\times 6$.\n\n-----\nTHE ORDER OF THE TERMS IN THE GENERATOR FUNCTION\n\nIn the recurrence relation for the binomial coefficients, the order of the terms \nis very important. The first two terms are $1$ and $1$, which is correct since \nwe can only have one rectangle. The next term is $1$, since we cannot have \nmore than one rectangle. After this, we have $1$, and then we have $1$, and \nthen $1$, and then $1$, and so on.\n\n-----\nRECURSION RELATION\n\nLet $S(A, B)$ be the solution for the covering of a rectangle of area $A \\times B$. \nThen $S(A, B) = S(A - 1, B) + S(A - 1, B - 1) + S(A - 1, B - 2) +... + S(A - 1, B - A + 1)$.\n\nFor example, consider the covering of a rectangle of area $4 \\times 4$. \nThe solution is the same as for the covering of a rectangle of area $4 \\times 3$. \nThe solution is the same as for the covering of a rectangle of area $3 \\times 3$. \nSo the recurrence relation for the covering of a rectangle is:\n\n$S(A, B) = S(A - 1, B) + S(A - 1, B - 1) + S(A - 1, B - 2) +... + S(A - 1, B - A + 1)$\n\nfor $A \\geq B$.\n\nGiven the value of $S(A, B)$, we can obtain the value of $S(A - 1, B)$, \nsince we know the value of $S(A, B)$. Then we obtain the value of $S(A - 1, B - 1)$, \nsince we know the value of $S(A, B)$. And so on.\n\nTherefore, the recurrence relation for the covering of a rectangle is:\n\n$S(A, B) = S(A - 1, B) + S(A - 1, B - 1) + S(A - 1, B - 2) +... + S(A - 1, B - A + 1)$\n\nfor $A \\geq B$.\n\n-----\nTHE DIVISION BY ZERO\n\nThe recurrence relation for the binomial coefficients is:\n\n$C_n^k = k! \\cdot (n - k)! \\cdot C_{n - k}^k$\n\nwhere $C_n^k$ is the binomial coefficient $n$ choose $k$.\n\nFor example, the binomial coefficient of $10$ and $2$ is $10! \\cdot 2! \\cdot 5!"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 19\\n15 5 3\\n12 4 4\\n20 10 5\") == \"3\"\nprint(solution(stdin=input()))"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1\") == 1\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 19\\n15 5 3\\n12 4 4\\n20 10 5') == '3'\n"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 19\\n15 5 3\\n12 4 4\\n20 10 5') == '3'\n"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15\\n5\\n3\") == \"3\"\n\"\"\"\n\nn, d = (int(i) for i in input().split())\n\nlw, w, h = [], 0, 0\nfor _ in range(n):\n    l, w, h = (int(i) for i in input().split())\n    if l + w > w:\n        w = l + w\n    if l + h > h:\n        h = l + h\n\nprint(d / (w + h))"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 19\\n15 5 3\\n12 4 4\\n20 10 5\") == 3\nprint(solution(stdin))\n"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 19\\n15 5 3\\n12 4 4\\n20 10 5') == 3\nassert solution('3 19\\n15 5 3\\n12 4 4\\n20 10 5') == 3\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n\") == \"1\"\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == b\n\"\"\""
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n1 1') == '1'\nassert solution('2\\n1 1\\n1 1') == '2'\nassert solution('3\\n1 1\\n2 1\\n1 1') == '4'\nassert solution('5\\n1 1\\n2 1\\n3 1\\n2 1\\n3 1') == '7'\nassert solution('5\\n1 1\\n2 1\\n3 1\\n4 1\\n4 1') == '14'\n\n'''"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '1'\nassert solution('5 5 5 6 7') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n\") == \"1\"\n\"\"\"\n\nfrom math import comb"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n1 1') == '1'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1 1\") == 1\nassert solution(\"2 2\") == 1\nassert solution(\"1 2\") == 0\nassert solution(\"2 1\") == 0\n"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n3 4') == '1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 2\\n1 1\\n2 2\\n') == '2'\nassert solution('2 3\\n1 1\\n2 2\\n3 3\\n') == '2'\nassert solution('4 4\\n1 2\\n2 3\\n3 4\\n4 1\\n') == '2'\nassert solution('2 3\\n1 1\\n2 2\\n3 3\\n') == '1'\n"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RGGR\\nGBGB\\nBYBY\\nYRYR\") == 3\n\"\"\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RGGR') == 'RGRG'\nassert solution('GBGB') == 'GBGB'\nassert solution('BYBY') == 'BYBY'\nassert solution('YRYR') == 'YRYR'\n\"\"\"\n\nfrom collections import deque\nfrom itertools import permutations\n\nclass Node:\n    def __init__(self, current_node, parent, move):\n        self.current_node = current_node\n        self.parent = parent\n        self.move = move\n        self.g = 0\n        self.h = 0\n        self.f = 0\n        self.children = []\n        self.possible_moves = [\n            (0, 1), (0, -1), (-1, 0), (1, 0)\n        ]\n\n    def __eq__(self, other):\n        return self.current_node == other.current_node\n\n    def __lt__(self, other):\n        return self.f < other.f\n\n    def __str__(self):\n        return f\"{self.current_node}\"\n\n    def get_path_to_root(self):\n        path = deque()\n        current_node = self\n        while current_node:\n            path.appendleft(current_node)\n            current_node = current_node.parent\n        return path"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RGGR\") == \"3\"\nassert solution(\"GBGB\") == \"3\"\nassert solution(\"BYBY\") == \"3\"\nassert solution(\"YRYR\") == \"3\"\n\"\"\""
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RGGR\") == \"3\"\nassert solution(\"GBGB\") == \"3\"\nassert solution(\"BYBY\") == \"3\"\nassert solution(\"YRYR\") == \"3\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RGGR\") == 3\nassert solution(\"GBGB\") == 3\nassert solution(\"BYBY\") == 3\nassert solution(\"YRYR\") == 3\n"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RGGR\") == 3\nassert solution(\"GBGB\") == 3\nassert solution(\"BYBY\") == 3\nassert solution(\"YRYR\") == 3\n\nprint(solution(\"RGGR\"))\nprint(solution(\"GBGB\"))\nprint(solution(\"BYBY\"))\nprint(solution(\"YRYR\"))\n\"\"\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RGGR') == '3'\nassert solution('GBGB') == '3'\nassert solution('BYBY') == '3'\nassert solution('YRYR') == '3'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RGGR\") == 3\nassert solution(\"GBGB\") == 3\nassert solution(\"BYBY\") == 3\nassert solution(\"YRYR\") == 3\n\"\"\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RRYGGRYBGRBYY') == '13'\nassert solution('RGYBBRY') == '8'\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RGGR\") == 3\nassert solution(\"GBGB\") == 3\nassert solution(\"BYBY\") == 3\nassert solution(\"YRYR\") == 3\n\n\"\"\"\n\nimport sys\nimport os\nimport math\nimport time\n\n\"\"\"\n\nMonochromatic means the given color is repeated in each row.\n\nStretching means that the outer edges of the grid are connected.\n\nTherefore we can model the grid as a torus.\n\nI need to do the following:\n\n1. For each cell in the grid, I need to know the color of each cell in the row above, on the left and on the right.\n\n2. Once I have that info, I can see if the grid is a valid 3D grid.\n\n3. If the grid is a valid 3D grid, I can compute the minimum number of moves needed to solve the puzzle.\n\n\"\"\"\n\n\"\"\"\n\nFor each cell in the grid, I need to know the color of each cell in the row above, on the left and on the right.\n\nEach cell (cell_id) can be viewed as a 3D point (x, y, z) in the 3D grid, where:\n\ncell_id = [y, x, z]\n\nSo:\n\n- x is the row number\n- y is the column number\n- z is the cell number\n\nz is zero for the top row\nz is zero for the left column\nz is the same as the cell number for the remaining rows\nz is the same as the cell number for the remaining columns\n\nI can create a list (grid_list) of lists (cell_list) of lists (color_list) where:\n\n- the first index is the y coordinate\n- the second index is the x coordinate\n- the third index is the z coordinate\n\nAnd each cell (cell_id) can be viewed as a 3D point (x, y, z) in the 3D grid, where:\n\ncell_id = [y, x, z]\n\nSo:\n\n- x is the row number\n- y is the column number\n- z is the cell number\n\nz is zero for the top row\nz is zero for the left column\nz is the same as the cell number for the remaining rows\nz is the same as the cell number for the remaining columns\n\n\"\"\""
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'A'\nassert solution('a') == 'A'\nassert solution('ab') == 'AB'\nassert solution('aba') == 'ABA'\nassert solution('abba') == 'ABBA'\n\nSample Input:\n3\n-2 -1 0 1 2\n2 1 0 -1 -2\n3 1 0 -1 -3\nSample Output:\nAB\nA\n'''"
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 0 -1 -2\") == \"AAAAA\"\n\n\"\"\""
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\") == \"AAAAA\"\n\"\"\"\n\n\nclass Solution:\n    def solve(self, N: int, a: int, b: int) -> str:\n        # n = 3\n        # a = [-2, -1, 0, 1, 2]\n        # b = [2, 1, 0, -1, -2]\n\n        # n = 5\n        # a = [-2, -1, 0, 1, 2]\n        # b = [2, 1, 0, -1, -2]\n\n        # n = 100\n        # a = [-100, -100, -100,..., 100]\n        # b = [100, 100, 100,..., -100]\n\n        # n = 10\n        # a = [-10, -10, -10,..., 10]\n        # b = [10, 10, 10,..., -10]\n\n        # n = 100\n        # a = [-100, -100, -100,..., 100]\n        # b = [100, 100, 100,..., -100]\n\n        n = N\n        a = a\n        b = b\n\n        left_a = sum(a)\n        right_b = sum(b)\n        left_b = 0\n        right_a = 0\n\n        diff_left = left_a - right_b\n        diff_right = right_a - left_b\n\n        while True:\n            left_a -= 1\n            right_a += 1\n            diff_left = left_a - right_b\n            diff_right = right_a - left_b\n            if diff_left < 0 and diff_right < 0:\n                break\n\n        if diff_left > diff_right:\n            left_a -= 1\n            right_b += 1\n            diff_left = left_a - right_b\n            diff_right = right_a - left_b\n\n        return \"A\" * (n // 2) + \"B\" * (n // 2) + \"A\" * (n % 2) + \"B\" * (n % 2) if diff_left <= diff_right else \"B\" * (n // 2) + \"A\" * (n // 2) + \"B\" * (n % 2) + \"A\" * (n % 2)\n"
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"-2 -1 0 1 2\\n2 1 0 -1 -2\") == \"AAAAA\"\nassert solution(\"5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\") == \"BBBBB\"\nassert solution(\"7\\n-2 -1 0 1 2\\n2 1 0 -1 -2\") == \"BBABA\"\nassert solution(\"9\\n-2 -1 0 1 2\\n2 1 0 -1 -2\") == \"ABBBB\"\nassert solution(\"-2 -1 0 1 2\\n2 1 0 -1 -2\\n2 1 0 -1 -2\") == \"ABBBB\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n2 1 0 -1 -2\n2 1 0 -1 -2\n''') == 'AAAAA'\nprint('OK')\n\n------Solution-----\nn = int(stdin.readline())\na = list(map(int, stdin.readline().strip().split()))\nb = list(map(int, stdin.readline().strip().split()))\nans = ''\n\ni = 0\nj = 0\nwhile i < n and j < n:\n    if a[i] * b[i] > a[j] * b[j]:\n        ans += 'A'\n        i += 1\n    elif a[i] * b[i] < a[j] * b[j]:\n        ans += 'B'\n        j += 1\n    else:\n        ans += 'A'\n        ans += 'B'\n        i += 1\n        j += 1\n\nwhile i < n:\n    ans += 'A'\n    i += 1\n\nwhile j < n:\n    ans += 'B'\n    j += 1\n\nprint(ans)\n\"\"\""
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n-2 -1 0 1 2\\n2 1 0 -1 -2') == 'AAAAA'\n\n-----Problem-----\nHalloween was passed recently. As usual, the trick-or-treaters gave out candies.\n\nNow the trick-or-treaters want to find out which trick-or-treaters have the most candies. To do this, they go to the candy shop and count how many candies are on each trick-or-treater\u2019s list. They report how many candies each trick-or-treater has.\n\nNote: there is only one trick-or-treater and the candies are all positive integers.\n\n-----Solution-----\nAlgorithm:\nCalculate the total number of candies for each trick-or-treater.\nSort the trick-or-treaters by candies in descending order.\nReturn the trick-or-treater with the highest number of candies.\n\nclass Solution:\n    def solve(self, a):\n        pass"
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\") == \"AAAAA\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n-2 -1 0 1 2\\n2 1 0 -1 -2') == 'AAAAA'\n"
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\") == 'AAAAA'\n\nprint(solution(stdin))\n'''"
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n-2 -1 0 1 2\n2 1 0 -1 -2''') == 'AAAAA'\n\"\"\"\nimport itertools"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\\n2 3\\n4 0\\n0 2\\n6 1\") == \"IMPOSSIBLE\"\n\"\"\"\n\nfrom typing import List, NamedTuple, Tuple\n\nfrom math import hypot\nfrom functools import reduce\n\nclass Point(NamedTuple):\n    x: int\n    y: int"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n0 0\\n6 0\\n1 1\\n4 4\") == \"IMPOSSIBLE\"\nassert solution(\"2 3\\n0 0\\n6 0\\n1 1\") == \"IMPOSSIBLE\"\nassert solution(\"6 5\\n0 0\\n6 0\\n0 0\\n0 0\") == \"6\"\nassert solution(\"5 3\\n0 0\\n6 0\\n1 1\\n4 4\") == \"6\"\nassert solution(\"1 1\\n4 4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6 3\n2 3\n4 0\n0 2\n6 1''') == 'IMPOSSIBLE'\n\nassert solution('''6 3\n2 3\n4 0\n0 2\n6 1\n0 4\n2 3\n4 1''') == '3'\n\nassert solution('''6 3\n2 3\n4 0\n0 2\n6 1\n0 4\n2 3\n4 1\n0 5\n5 0\n0 1\n4 2\n0 5\n3 1\n1 2\n3 4\n3 3\n3 2\n4 1\n2 3\n3 4\n2 4\n5 1\n4 4\n1 1\n3 2\n3 3\n5 1\n4 4\n2 1\n4 3\n3 3\n2 1\n4 4\n2 1\n3 1\n3 1\n1 1\n2 4\n1 3\n1 2\n2 3\n3 2\n4 2\n1 4\n1 3\n1 4\n1 1\n3 3\n4 4\n2 2\n2 3\n1 2\n2 4\n2 3\n2 4\n3 1\n2 4\n4 1\n1 3\n3 1\n2 1\n3 1\n4 4\n3 1\n3 3\n2 2\n2 3\n3 1\n4 4\n3 4\n3 4\n1 1\n1 2\n1 2\n1 1\n3 4\n3 3\n4 1\n3 3\n4 2\n4 4\n3 4\n4 2\n4 1\n3 2\n3 1\n4 2\n1 4\n2 1\n1 4\n1 1\n1 2\n1 3\n1 4\n2 1\n1 2\n3 1\n4 1\n3 2\n2 1\n1 4\n2 1\n1 3\n2 1\n3 2\n3 1\n2 4\n2 3\n2 4\n1 1\n3 1\n3 4\n1 3\n2 3\n3 1\n1 1\n4 2\n1 4\n2 3\n3 1\n1 1\n1 1\n1 3\n3 3\n2 4\n2 3\n3 1\n4 3\n1 3\n3 1\n3 2\n1 2\n3 3\n1 2\n2 4\n1 3\n1 2\n4 4\n3 1\n1 1\n3 1\n3 2\n2 2\n2 3\n3 1\n2 1\n1 3\n3 2\n2 2\n3 1\n4 4\n4 4\n1 1\n2 4\n1 3\n1 2\n2 3\n2 2\n1 1\n1 4\n2 1\n3 4\n4 3\n2 2\n3 3\n4 1\n1 1\n2 1\n1 3\n1 3\n2 3\n2 1\n2 4\n2 2\n3 1\n4 1\n1 1\n3 1\n1 1\n4 4\n4 4\n4 4\n1 2\n2 3\n4 1\n1 4\n2 1\n3 1\n2 1\n2 1\n3 2\n1 1\n1 1\n2 2\n3 1\n1 1\n3 1\n1 1\n1 1\n3 1\n2 4\n1 1\n1 2\n1 1\n2 4\n1 1\n3 3\n2 1\n1 3\n2 1\n1 2\n1 1\n1 1\n2 1\n2 4\n2 4\n1 3\n3 4\n3 4\n4 1\n2 1\n2 4\n3 1\n4 1\n1 4\n1 1\n1 3\n1 4\n2 1\n3 4\n1 1\n1 3\n3 3\n2 1\n4 4\n1 4\n1 2\n2 2\n2 4\n1 4\n1 4\n3 1\n1 1\n1 1\n1 2\n1 2\n3 2\n1 2\n1 2\n1 1\n1 1\n3 2\n2 1\n2 1\n1 4\n1 3\n2 1\n2 1\n3 2\n2 4\n3 2\n1 1\n1 3\n3 2\n2 4\n2 3\n2 4\n2 4\n2 2\n1 2\n3 2\n3 2\n2 4\n2 3\n3 2\n2 2\n1 2\n1 2\n1 2\n3 2\n1 4\n2 3\n3 3\n2 3\n2 1\n1 1\n3 3\n1 4\n3 1\n1 4\n1 3\n3 3\n1 1\n1 1\n1 1\n1 1\n1 1\n4 4\n1 2\n2 2\n1 1\n1 2\n4 4\n2 2\n1 2\n1 1\n1 1\n1 2\n2 2\n1 3\n1 1\n1 1\n1 1\n2 2\n1 2\n1 4\n1 1\n3 2\n1 4\n2 1\n1 3\n2 1\n2 1\n1 1\n1 1\n2 1\n1 4\n2 3\n2 3\n1 4\n3 3\n3 1\n3 2\n2 1\n1 2\n1 2\n1 1\n1 3\n2 2\n3 3\n3 1\n3 3\n2 2\n1 3\n1 2\n2 1\n1 2\n1 1\n2 1\n1 1\n1 4\n2 4\n2 3\n2 4\n3 2\n2 4\n1 2\n1 1\n1 4\n1 4\n1 1\n2 4\n1 2\n1 2\n2 4\n1 2\n1 4\n1 2\n1 2\n2 2\n3 2\n4 3\n3 3\n1 1\n1 4\n2 2\n2 1\n2 2\n3 2\n2 1\n1 2\n2 1\n1 4\n2 1\n2 2\n2 2\n1 3\n3 2\n1 2\n2 4\n2 1\n1 2\n1 4\n1 1\n1 1\n2 2\n2 2\n1 1\n2 4\n2 1\n2 1\n2 1\n1 4\n2 2\n1 1\n1 3\n1 1\n2 1\n1 1\n2 1\n2 1\n1 3\n2 4\n1 3\n1 2\n2 4\n2 1\n1 4\n2 1\n1 1\n1 2\n1 3\n3 2\n2 1\n2 1\n1 4\n1 2\n2 1\n1 1\n1 1\n1 1\n1 1\n1 3\n1 1\n2 1\n2 1\n3 1\n2 3\n1 2\n2 2\n1 1\n1 2\n1 1\n1 2\n1 4\n2 2\n1 2\n1 1\n1 3\n1 1\n1 3\n1 4\n1 1\n3 1\n1 2\n3 2\n4 2\n3 1\n4 2\n1 1\n1 2\n1 2\n1 2\n3 1\n1 2\n1 3\n1 3\n1 3\n2 4\n3 4\n1 1\n1 2\n3 1\n1 4\n1 3\n2 3\n2 3\n3 3\n3 2\n3 4\n2 2\n1 3\n3 1\n2 1\n1 2\n1 1\n2 2\n1 2\n2 2\n1 2\n1 4\n1 1\n1 3\n1 2\n2 1\n1 2\n1 1\n1 1\n1 4\n1 4\n3 4\n1 2\n1 2\n1 3\n1 1\n1 1\n2 1\n2 1\n3 1\n1 2\n2 1\n1 4\n1 1\n2 2\n1 2\n1 2\n1 1\n1 1\n1 1\n1 2\n1 1\n2 1\n1 2\n1 2\n1 1\n3 3\n2 1\n2 4\n1 4\n3 3\n4 4\n2 3\n1"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3\\n2 3\\n4 0\\n0 2\\n6 1\") == \"IMPOSSIBLE\"\nassert solution(\"6 3\\n2 3\\n4 0\\n0 2\\n6 1\\n3 2\\n8 1\") == \"12\"\n\n-----Constraints-----\n$N$ and $M$ will be between 2 and 100.\n\"\"\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2\\n0 0\") == \"IMPOSSIBLE\"\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n\"\"\"\n\nn, m = [int(x) for x in stdin.split()]\npoints = [tuple([int(x) for x in stdin.split()]) for _ in range(4)]"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n5 3\n2 3\n4 0\n0 2\n6 1\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\n\"\"\"\n5 3\n2 3\n4 0\n0 2\n6 1\n\"\"\") == \"6\"\n\nassert solution(\n\"\"\"\n2 3\n2 3\n4 0\n0 2\n6 1\n\"\"\") == \"2\"\n\nassert solution(\n\"\"\"\n5 3\n2 3\n4 0\n0 2\n6 1\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\n\"\"\"\n5 3\n2 3\n4 0\n0 2\n6 1\n\"\"\") == \"2\""
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3\\n2 3\\n4 0\\n0 2\\n6 1\") == \"IMPOSSIBLE\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n2 3\\n0 1\\n6 1\") == \"2\\n2\\n0\\n6\\n2\\n1\"\n\n----\n\nclass Point:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 1\\n1 0\") == \"IMPOSSIBLE\"\nassert solution(\"3 3\\n2 0\\n0 2\\n1 1\") == \"IMPOSSIBLE\"\nassert solution(\"3 2\\n1 1\\n1 2\") == \"2\"\nassert solution(\"3 3\\n0 2\\n1 2\\n0 0\\n1 1\") == \"2\"\nassert solution(\"3 3\\n2 0\\n0 2\\n0 2\") == \"2\"\n\n-----Constraints-----\n$N$ will be between 2 and 100 inclusively.\n$M$ will be between 2 and 100 inclusively.\n$A_1$ and $A_2$ will be different and lie on the grid.\n$A_1$ and $A_2$ will not lie on the same row or column.\n$B_1$ and $B_2$ will be different and lie on the grid.\n$B_1$ and $B_2$ will not lie on the same row or column.\n\n------Hints------\nThink of walking a wire from one point to another along the grid.\n\"\"\"\n\nfrom typing import Tuple"
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\") == \"12\\n4\\n11\\n3\\n2\\n\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx') == '12\\n4\\n11\\n3\\n2\\n2'\n\"\"\"\n\nimport sys\n\nword_count = int(sys.stdin.readline())\n\ndictionary = {}\nfor _ in range(word_count):\n    word = sys.stdin.readline().strip()\n    if word in dictionary:\n        dictionary[word] += 1\n    else:\n        dictionary[word] = 1\n\ninput_count = int(sys.stdin.readline())\n\nfor _ in range(input_count):\n    line = sys.stdin.readline().strip()\n    count = 0\n    words = []\n    prev_char = None\n    for c in line:\n        if c!= '\\t' and prev_char!= '\\b':\n            count += 1\n        elif c == '\\t' and prev_char!= '\\b':\n            words.append(line[:count])\n            count = 0\n        prev_char = c\n    words.append(line[:count])\n    if len(words) > 1 and words[-2] not in dictionary:\n        print(len(line))\n    else:\n        print(sorted([dictionary[word] if word in dictionary else -1 for word in words], reverse=True)[0] + len(words[0]))\n"
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\") == \"12\\n4\\n11\\n3\\n2\\n\"\n\n\"\"\"\n\n\nfrom collections import Counter, OrderedDict\nfrom typing import NamedTuple\nimport sys\n\nclass Autocorrect(NamedTuple):\n    probs: Counter\n    words: OrderedDict"
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\") == \"12\\n4\\n11\\n3\\n2\\n\""
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"austria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\") == '12\\n4\\n11\\n3\\n2\\n'"
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"austria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\") == \"12\\n4\\n11\\n3\\n2\\n\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\") == \"12\\n4\\n11\\n3\\n2\"\n\n-----Test 2-----\nSample Input:\n5 5\naustria\naustria\nautocorrect\naustrian\nautocorrelation\nprogram\nautocorrelation\ncompetition\nzyx\naustrian\nSample Output:\n15\n15\n14\n10\n8\n\n\"\"\"\n\n\"\"\"\n\u8fd9\u9053\u9898\u548cLeetCode 1691\u9898\u5f88\u50cf\n\"\"\"\n\n\"\"\"\n\u7531\u4e8e\u53ea\u80fd\u4f7f\u7528tab\u548cbackspace\uff0c\u56e0\u6b64\u53ea\u80fd\u7ef4\u62a4\u4e00\u4e2a\u6700\u8fd1\u4f7f\u7528\u7684char stack\uff0c\u53ef\u80fd\u5305\u542b\u672a\u7ed3\u675f\u7684\u5355\u8bcd\uff0c\u8fd9\u4e2achar stack\u5177\u6709\u4e00\u4e2a\u5177\u4f53\u7684\u6700\u5927\u957f\u5ea6\n\n\u8fd9\u4e2astack\u7684\u5177\u4f53\u5b9a\u4e49\uff0c\u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e0d\u5728stack\u4e2d\uff0c\u5219\u76f4\u63a5\u6dfb\u52a0\uff0c\u5982\u679c\u5728stack\u4e2d\uff0c\u5219\u6dfb\u52a0\u4e4b\u524d\uff0c\u9700\u8981\u5148\u5224\u65ad\u5f53\u524d\u5b57\u7b26\u5728stack\u4e2d\u662f\u5426\u8fd8\u6709\u8fde\u7eed\u7684\u5b57\u7b26\uff0c\u9700\u8981\u5148pop\u51fa\u4e00\u4e2a\u5b57\u7b26\uff0c\n\u7136\u540e\u628a\u5f53\u524d\u5b57\u7b26\u6dfb\u52a0\uff0c\u9700\u8981\u5148\u628a\u5f53\u524d\u5b57\u7b26pop\u51fa\u6765\uff0c\u518d\u628a\u5f53\u524d\u5b57\u7b26\u6dfb\u52a0\u8fdbstack\u4e2d\n\n\u5982\u679c\u5f53\u524d\u5b57\u7b26\u5df2\u7ecf\u5728stack\u4e2d\uff0c\u90a3\u4e48\u76f4\u63a5\u6dfb\u52a0\u5373\u53ef\n\n\"\"\"\n\nclass Solution:\n    def minimumDeleteSum(self, s1: str, s2: str) -> int:\n        stack1 = []\n        stack2 = []\n        for i in range(len(s1)):\n            char1 = s1[i]\n            if char1 not in stack1:\n                stack1.append(char1)\n            else:\n                pop_count = stack1.index(char1)\n                while len(stack1) > pop_count + 1:\n                    stack1.pop()\n                stack1.append(char1)\n        \n        for i in range(len(s2)):\n            char2 = s2[i]\n            if char2 not in stack2:\n                stack2.append(char2)\n            else:\n                pop_count = stack2.index(char2)\n                while len(stack2) > pop_count + 1:\n                    stack2.pop()\n                stack2.append(char2)\n        \n        l1 = len(stack1)\n        l2 = len(stack2)\n        ret = 0\n        if l1 > l2:\n            l1, l2 = l2, l1\n            stack1, stack2 = stack2, stack1\n        for i in range(l1):\n            if i >= l2:\n                continue\n            if stack1[i]!= stack2[i]:\n                ret += min(ord(stack1[i]), ord(stack2[i]))\n        \n        return ret"
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\") == \"12\\n4\\n11\\n3\\n2\\n\"\nassert solution(\"3 3\\napple\\npeach\\npear\") == \"2\\n1\\n1\\n\"\n\n\"\"\"\n\nimport collections\nimport sys\n\ndictionary = collections.defaultdict(list)\n\nfor line in sys.stdin:\n    word = line.strip()\n    dictionary[len(word)].append(word)"
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\") == \"12\\n4\\n11\\n3\\n2\\n\"\nprint(solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\"))\n\"\"\""
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\") == \"12\\n4\\n11\\n3\\n2\"\nassert solution(\"5 5\\nautocorrelation\\nprogramming\\ncomputer\\nautocorrect\\nprogram\\nzyx\") == \"12\\n4\\n11\\n3\\n2\"\n"
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 1 1\") == \"3\"\n\"\"\"\n\n\"\"\"\nSolution for 7.2\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0 1 2 3 4\\n0 0 1 1 0\") == '4'\nassert solution(\"3\\n0 1 1\\n0 0 1\") == '2'\nassert solution(\"1\\n0\") == '1'\nassert solution(\"2\\n0 0\\n0 0\") == 'impossible'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 1 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n0 1 1\n''') == '3'\n\nassert solution('''4\n0 1 1\n''') == '4'\n\nassert solution('''5\n0 1 1 2\n''') == 'impossible'\n\nassert solution('''6\n0 1 1 2\n''') == '4'\n\nassert solution('''7\n0 1 1 2\n''') == '6'"
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 1 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 1 1\") == \"3\"\nassert solution(\"4\\n0 1 2 3\") == \"3\"\nassert solution(\"5\\n0 1 2 3 4\") == \"4\"\nassert solution(\"6\\n0 1 2 3 4 5\") == \"5\"\nassert solution(\"7\\n0 1 2 3 4 5 6\") == \"7\"\n"
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"3\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nmin_ = n\n\nfor i in range(n + 1):\n    if sum(a[i:]) < min_:\n        min_ = sum(a[i:])\n\nprint(min_) if min_ <= 12 else print('impossible')\n"
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 1 1\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 0 1\\n2 3 1') == '3'\n\"\"\"\n\nn = int(input())\narr = [int(i) for i in input().split()]\n\nm = max(arr)\n"
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 1 1\") == \"3\"\nassert solution(\"4\\n0 1 1 1\") == \"3\"\nassert solution(\"3\\n0 2 1\") == \"3\"\nassert solution(\"3\\n0 1 1\") == \"3\"\nassert solution(\"4\\n0 2 1\") == \"3\"\n"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == 'Pre Post In Post In Pre'\n\"\"\"\n\nimport typing\nfrom typing import List\n\nimport pytest\n"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH\") == \"Pre Post In Post In Pre\\nHFBJCDEGIA\\nBIGEDCJFAH\\nIGEDCJBAFH\"\nassert solution(\"AJYFBCLWN\\nAKJEDLFXN\\nAKJEDLFXN\") == \"Pre Post In Post In Pre\\nHFBJCDEGIA\\nBIGEDCJFAH\\nIGEDCJBAFH\"\n\n\"\"\""
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH\") == \"\"\"Pre Post In Post In Pre\nHFBJCDEGIA\nBIGEDCJFAH\nIGEDCJBAFH\"\"\"\nassert solution(\"AEGNOPRSU\\nVEHNMLKJI\\nVEHNMLKJI\") == \"\"\"Pre Post In Post In Pre\nAEGNOPRSU\nVEHNMLKJI\nAEGNOPRUV\nVEHNMLKJIF\nVEHNMLKJIH\nAEGNOPRSTU\nVEHNMLKJID\"\"\"\nassert solution(\"DEGNPOPRSU\\nVEHNMLKJI\\nVEHNMLKJI\") == \"\"\"Pre Post In Post In Pre\nDEGNPOPRSU\nVEHNMLKJI\nDEGNOPRSTU\nVEHNMLKJID\"\"\"\nassert solution(\"NGNPOPRSU\\nVEHNMLKJI\\nVEHNMLKJI\") == \"\"\"Pre Post In Post In Pre\nNGNPOPRSU\nVEHNMLKJI\nNGNOPRSTU\nVEHNMLKJID\"\"\"\nassert solution(\"BENOPRSU\\nVEHNMLKJI\\nVEHNMLKJI\") == \"\"\"Pre Post In Post In Pre\nBENOPRSU\nVEHNMLKJI\nBENOPRSTU\nVEHNMLKJID\"\"\"\n"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('HFBJCDEGIA') == 'HFBJCDEGIA'\nassert solution('BIGEDCJFAH') == 'BIGEDCJFAH'\nassert solution('HFBIGEDCJA') == 'BIGEDCJFAH'\nassert solution('HFBJCDEGIAHFBIGEDCJABIGEDCJFAH') == 'HFBJCDEGIA'\n"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH') == 'Pre Post In Post In Pre'\nassert solution('HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH\\nHFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH') == 'Pre Post In Post In Pre'\n\"\"\"\n"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH') == 'Pre Post In Post In Pre'\n\"\"\"\n\nimport sys\nfrom collections import namedtuple\n\nTree = namedtuple('Tree', 'left right value')"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"HFBIGEDCJA\") == \"Pre Post In Post In Pre\"\nassert solution(\"BIGEDCJFAH\") in [\"HFBJCDEGIA\", \"IGEDCJBAFH\"]\nassert solution(\"BIGEDCJFAH\") == \"HFBJCDEGIA\""
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH') == 'HFBJCDEGIA\\nBIGEDCJFAH\\nIGEDCJBAFH\\n'\n\"\"\"\n"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\nHFBIGEDCJA\nBIGEDCJFAH\nBIGEDCJFAH\n'''.strip()) == '''\nPre Post In Post In Pre\nHFBJCDEGIA\nBIGEDCJFAH\nIGEDCJBAFH\n'''.strip()\nassert solution('''\nFABJDKLOP\nFBJCDEGIA\nJCDEGIAFB\n'''.strip()) == '''\nPre In In Post Post\nFJFDGKLOA\nFJCBDPGIA\nFDGIAJKLO\n'''.strip()\nassert solution('''\nVXXRPXCOW\nXPXVRCOW\nVXRPVRCOW\nXWPVRCOW\nXVWRPCOW\nXPWRVRCOW\nXPVWRPCOW\nVWRPVRCOW\nVWRPCOWX\n'''.strip()) == '''\nPre In In Post Post\nVXLXRPCOW\nXWRPCOWX\nVXRPVRCOW\nVXRPCOWX\nXVWRPCOW\nVWRPVRCOW\nXWRVRCOW\nVWRPCOWX\nXVWRPCOW\n'''.strip()\n\n\"\"\"\n\nimport copy\n"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH\") == \"Pre Post In Post In Pre\\nHFBJCDEGIA\\nBIGEDCJFAH\\nIGEDCJBAFH\"\nassert solution(\"BEQOADMFGA\\nEFJYWPHWX\\nZMDUYAVOC\") == \"Pre In In Post In Pre\\nBJMUDIAPO\\nBKFWPEZAPO\\nZMDCBAPOJ\"\nassert solution(\"BIGEDCJFAH\\nBIGEDCJFAH\\nBIGEDCJFAH\") == \"In In In In In In\\nBIGEDCJFAH\\nBIGEDCJFAH\\nBIGEDCJFAH\"\nassert solution(\"LJOBCDEBFY\\nLJOBCDEBFY\\nLJOBCDEBFY\") == \"In In In In In In\\nLJOBCDEBFY\\nLJOBCDEBFY\\nLJOBCDEBFY\"\nassert solution(\"IZQOTADEMU\\nIZQOTADEMU\\nIZQOTADEMU\") == \"In In In In In In\\nIZQOTADEMU\\nIZQOTADEMU\\nIZQOTADEMU\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2\\n10 0\\n3 1 1\\n1\\n4 1 0\") == \"10\"\nassert solution(\"1\\n1\") == \"1\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline"
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n10 0\\n3 1 1\\n1\\n4 1 0\") == \"10\"\n\"\"\"\n\n\"\"\"\nstdin:\n\n2\n2\n10 0\n3 1 1\n1\n4 1 0\n\nstdout:\n\n10\n\"\"\""
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"1\n2\n10 0\n3 1 1\n1\n4 1 0\n\"\"\") == \"10\"\n\"\"\"\n\nn = int(input())\n\nfor _ in range(n):\n    p = int(input())\n    lens = []\n    for _ in range(p):\n        l, k, *dep = map(int, input().split())\n        lens.append(l)\n    print(min(lens))\n\n\"\"\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n10 0\\n3 1 1\\n1\\n4 1 0\") == \"10\"\nassert solution(\"3\\n1\\n1\\n1\\n4 1 0\") == \"8\"\nassert solution(\"4\\n1\\n1\\n1\\n4 1 0\") == \"7\"\nassert solution(\"5\\n1\\n1\\n1\\n4 1 0\") == \"6\"\nassert solution(\"6\\n1\\n1\\n1\\n4 1 0\") == \"5\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n10 0\\n3 1 1\\n1\\n4 1 0\") == \"10\"\n\n\"\"\"\n\nimport math\nimport sys\n\ninput_lines = []\nfor line in sys.stdin:\n    input_lines.append(line.rstrip('\\n'))\n\nn = int(input_lines[0])\n\nmin_length = 10 ** 6\nfor i in range(1, n + 1):\n    current_length = 0\n    num_proofs = int(input_lines[i])\n    proof_lens = []\n    for j in range(num_proofs):\n        proof_lens.append(int(input_lines[i + j + 1]))\n    for proof_len in proof_lens:\n        current_length += proof_len\n    if current_length < min_length:\n        min_length = current_length\n\nprint(min_length)\n"
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n2\\n10 0\\n3 1 1\\n1\\n4 1 0\\n') == '10'\n\"\"\"\n\nimport io\nimport sys\nfrom typing import List"
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n10 0\\n3 1 1\\n1\\n4 1 0\") == \"10\"\n\"\"\""
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2\n2\n10 0\n3 1 1\n1\n4 1 0\n''') == 10\n\nassert solution('''\n3\n3\n10 0\n10 1 1\n4 1 0\n''') == 10\n\nassert solution('''\n2\n2\n1 0\n2 0\n''') == 0\n\nassert solution('''\n2\n2\n1 0\n1 2 1\n''') == 0\n\nassert solution('''\n1\n2\n1 0\n''') == 0"
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('1\\n2\\n') == 3\nassert solution('1\\n3\\n') == 4\nassert solution('1\\n2\\n3\\n') == 7\nassert solution('1\\n2\\n3\\n4\\n5\\n') == 13\n"
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n2\\n10 0\\n3 1 1\\n1\\n4 1 0') == '10'\n\"\"\"\n\nfrom typing import List, Set\n"
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n0 0 100 100\\n30 30 60 60') == '10000.0'\nassert solution('1\\n0 0 100 100') == '100.0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2\n0 0 100 100\n30 30 60 60''') == '10000.00'\nprint('Hooray!')\n\n\"\"\""
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"2\n0 0 100 100\n30 30 60 60\"\"\") == '10000.00'\n\n\"\"\"\nLong Answer\n\"\"\"\n"
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n100 200 300 500\n1 1 1 2 2\n1 1 1 3 3\n2 4 5 6 8''') == '22.00'"
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n0 0 1 1\\n0 0 1 1\") == \"4.00\"\nassert solution(\"1\\n0 0 1 1\") == \"0.50\"\nassert solution(\"2\\n100 100 100 100\") == \"1000.00\"\n\"\"\"\n"
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n0 0 100 100\\n30 30 60 60\") == \"10000.00\"\n\n\"\"\"\n"
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 0 100 100\\n30 30 60 60\") == \"10000.00\"\nprint(solution(\"2\\n0 0 100 100\\n30 30 60 60\"))\n"
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(case.input) == case.output"
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n0 0 100 100\\n30 30 60 60') == '10000.0'\n\"\"\""
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 0 100 100\\n30 30 60 60\") == \"10000.00\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open('input.txt', 'r').read()) == open('output.txt', 'r').read()\nprint('Hooray!')\n\n\"\"\"\n\nimport math\nimport sys\nfrom pathlib import Path\n\nimport pytest\n"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 3\\n4 5\\n2 4\") == \"5\"\nassert solution(\"5 10\\n1 3\\n1 3\\n1 3\\n1 3\") == \"1\"\nassert solution(\"5 10\\n1 3\\n1 2\\n1 3\\n1 2\") == \"0\"\n\n\"\"\"\n\nimport unittest\nimport sys\nimport math"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n1 3\\n4 5\\n2 4') == '5'\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 3\n1 3\n4 5\n2 4''') == 5\n'''\n"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 3\\n4 5\\n2 4\") == 5\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 3\\n4 5\\n2 4\") == \"5\"\n\nassert solution(\"5 3\\n1 3\\n4 5\\n2 4\\n4 4\") == \"0\"\n\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import permutations, combinations"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 3\\n4 5\\n2 4\") == \"5\"\n\"\"\"\n\nimport sys\nimport os\nimport math"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n2 4\\n3 3') == '5'\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 3\\n4 5\\n2 4\\n\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n1 3\\n4 5\") == \"5\"\nassert solution(\"4 5\\n4 5\") == \"1\"\n\n\"\"\"\n\nfrom collections import defaultdict, Counter"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\n\"\"\"\n\nfrom sys import stdin\nfrom math import gcd\n\nlines = stdin.read().split('\\n')\n\na, b, c, d = map(int, lines[0].split())\ne, f, g, h = map(int, lines[1].split())\ni, j, k, l = map(int, lines[2].split())\n\nm = [a, b, c]\nx = [e, f, g]\ny = [i, j, k]\nz = [d, h, l]"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\n\"\"\""
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"11 13 17\\n\"\n\"5 2 4\\n\"\n\"0 0 0\"\n) == \"2095\"\n\"\"\"\n\nimport itertools\nfrom typing import List\n\nfrom helpers import chronometric\nfrom helpers import iterate_typed\n"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\nassert solution(\"11 13 17\\n5 2 4\\n5 5 6\") == \"1006\"\nassert solution(\"11 13 17\\n5 2 4\\n10 10 10\") == \"30\"\n\"\"\"\n\na, b, c, d, e, f = [int(i) for i in input().split()]\n\na = pow(a, f, c)\nb = pow(b, f, c)\nc = pow(c, f, c)\nd = pow(d, f, c)\ne = pow(e, f, c)\n\nprint(a * b * c * d + e)\n"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"11 13 17\\n\"\n    \"5 2 4\\n\"\n    \"0 0 0\"\n) == \"2095\"\n\"\"\"\n\nfrom sys import stdin\nfrom itertools import chain\n"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\n\"\"\"\n\nfrom math import gcd\nfrom typing import List\n"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"var a = 'Gon';\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\\n\") == \"My name is Gon\\nMy name is Gon\\n\"\nassert solution(\"var a = 'Gon';\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\\n\") == \"My name is Gon\\nMy name is Gon\\n\"\n\nassert solution(\"var a = 'Gon';\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\\n\") == \"My name is Gon\\nMy name is Gon\\n\"\nassert solution(\"var a = 'Gon';\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\\n\") == \"My name is Gon\\nMy name is Gon\\n\"\n\nassert solution(\"var a = 'Gon';\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\\n\") == \"My name is Gon\\nMy name is Gon\\n\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\\nend.\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\\nend.\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\\nend.\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\\nend.\"\n\n-----Constraints-----\n1 <= <name> <= 10\n1 <= <value> <= 10^4\n<name> is not used before declaration\n<expr> is not empty and contains at most one dollar sign, or all of them are at the start of the expression\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n\"\"\"\n) == \"My name is Gon\\nMy name is Gon\\n\"\n\n-------\nvar\u00a0a\u00a0=\u00a0\"Gon\";\nvar\u00a0b\u00a0=\u00a0a;\nvar\u00a0c\u00a0=\u00a0`My\u00a0name\u00a0is\u00a0${a}`;\nprint\u00a0c;\nprint\u00a0`My\u00a0name\u00a0is\u00a0${b}`;\nend.\n\"\"\"\n\nimport re"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = \\\"Gon\\\";\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = \\\"Gon\\\";\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = \\\"Gon\\\";\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"var a = \\\"Gon\\\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.\") == \\\n    \"My name is Gon\\nMy name is Gon\\n\"\n\nassert solution(\"var a = \\\"Gon\\\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.\") == \\\n    \"My name is Gon\\nMy name is Gon\\n\"\n\nassert solution(\"var a = \\\"Gon\\\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.\") == \\\n    \"My name is Gon\\nMy name is Gon\\n\"\n\nassert solution(\"var a = \\\"Gon\\\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.\") == \\\n    \"My name is Gon\\nMy name is Gon\\n\"\n\nassert solution(\"var a = \\\"Gon\\\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.\") == \\\n    \"My name is Gon\\nMy name is Gon\\n\""
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"var a = \\\"Gon\\\";var b = a;var c = `My name is ${a}`;print c;print `My name is ${b}`;end.\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"var a = \\\"Gon\\\";var b = a;var c = `My name is ${a}`;print c;print `My name is ${b}`;end.\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"var a = \\\"Gon\\\";var b = a;var c = `My name is ${a}`;print c;print `My name is ${b}`;end.\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"var a = \\\"Gon\\\";var b = a;var c = `My name is ${a}`;print c;print `My name is ${b}`;end.\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"var a = \\\"Gon\\\";var b = a;var c = `My name is ${a}`;print c;print `My name is ${b}`;end.\") == \"My name is Gon\\nMy name is Gon\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;end.\\n\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;end.\\n\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;end.\\n\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;end.\\n\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;end.\\n\") == \"My name is Gon\\nMy name is Gon\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\"\n\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\"\n\nassert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"var a = \\\"Gon\\\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"var a = \\\"Gon\\\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.\") == \"My name is Gon\\nMy name is Gon\"\n\n-----Explanation-----\nThe first two lines are variable declarations, where a, b and c are variable names and they have values \u201cGon\u201d, \u201cGon\u201d and \u201cMy name is Gon\u201d, respectively.\n\nThe third line is a print request, where we want to print the value of the expression \u201cc\u201d which is equal to \u201cMy name is ${a}\u201d. Since the variable \u201ca\u201d is not defined, we need to use the template literal, so the result of this expression is \u201cMy name is ${b}\u201d.\n\nThe fourth line is another print request, where we want to print the value of the expression \u201cb\u201d which is equal to \u201cGon\u201d. Here we use a template literal, so the result of this expression is \u201cMy name is ${b}\u201d.\n\nSince we have finished the execution of the code, we can conclude that the value of variable b is equal to the value of variable a, which is \u201cGon\u201d.\n\nThe last line is end of input, so we can conclude that the value of variable c is equal to \u201cMy name is ${a}\u201d.\n\n----Constraints----\n1 <= variable name <= 10\n1 <= value of the variable <= 10^4\n1 <= variable name <= 10\n1 <= value of the variable <= 10^4\n\"\"\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon\\nMy name is Gon'\nassert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nvar d = \"Gon\";\nvar e = d;\nprint `My name is ${e}`;\nend.\n''') == 'My name is Gon\\nMy name is Gon\\nMy name is Gon'\n'''\n\n\n\n-------------------------------\nSample Input:\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nvar d = \"Gon\";\nvar e = d;\nprint `My name is ${e}`;\nend.\nSample Output:\nMy name is Gon\nMy name is Gon\nMy name is Gon\n'''\n\n\n\n'''\n\n\n\n---------------------------\n\nSample Input:\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nvar d = \"Gon\";\nvar e = d;\nprint `My name is ${e}`;\nend.\nSample Output:\nMy name is Gon\nMy name is Gon\nMy name is Gon\n\nSample Input:\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nvar d = \"Gon\";\nvar e = d;\nprint `My name is ${e}`;\nend.\nSample Output:\nMy name is Gon\nMy name is Gon\nMy name is Gon\n\nSample Input:\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nvar d = \"Gon\";\nvar e = d;\nprint `My name is ${e}`;\nvar f = \"Gon\";\nvar g = f;\nprint `My name is ${g}`;\nend.\nSample Output:\nMy name is Gon\nMy name is Gon\nMy name is Gon\nMy name is Gon\n\nSample Input:\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nvar d = \"Gon\";\nvar e = d;\nprint `My name is ${e}`;\nvar f = \"Gon\";\nvar g = f;\nprint `My name is ${g}`;\nvar h = \"Gon\";\nvar i = h;\nprint `My name is ${i}`;\nend.\nSample Output:\nMy name is Gon\nMy name is Gon\nMy name is Gon\nMy name is Gon\nMy name is Gon\nMy name is Gon\nMy name is Gon\n\n\nSample Input:\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nvar d = \"Gon\";\nvar e = d;\nprint `My name is ${e}`;\nvar f = \"Gon\";\nvar g = f;\nprint `My name is ${g}`;\nvar h = \"Gon\";\nvar i = h;\nprint `My name is ${i}`;\nend.\nSample Output:\nMy name is Gon\nMy name is Gon\nMy name is Gon\nMy name is Gon\nMy name is Gon\nMy name is Gon\nMy name is Gon\n\n\nSample Input:\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nvar d = \"Gon\";\nvar e = d;\nprint `My name is ${e}`;\nvar f = \"Gon\";\nvar g = f;\nprint `My name is ${g}`;\nvar h = \"Gon\";\nvar i = h;\nprint `My name is ${i}`;\nend.\nSample Output:\nMy name is Gon\nMy name is Gon\nMy name is Gon\nMy name is Gon\nMy name is Gon\nMy name is Gon"
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n7 8\\n10') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0'"
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n7 8\n10\"\"\") == \"\"\"\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\n\"\"\"\n\nassert solution(\"\"\"\n1\n1\"\"\") == \"\"\"\ndiscard 1\n\"\"\"\n\nassert solution(\"\"\"\n2\n10\n5\n\"\"\") == \"\"\"\nfill 2\nfill 2\ndiscard 1\ndiscard 1\n\"\"\"\n\nassert solution(\"\"\"\n2\n10\n5\n2\n7\n\"\"\") == \"\"\"\nfill 2\nfill 2\nfill 2\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\n\"\"\"\n\nassert solution(\"\"\"\n2\n10\n5\n2\n7\n3\n\"\"\") == \"\"\"\nfill 2\nfill 2\nfill 2\ndiscard 1\nfill 2\nfill 2\ndiscard 1\nfill 2\ndiscard 1\ndiscard 1\n\"\"\""
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2\n7 8\n10''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\"\nassert solution('''2\n7 8\n10''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\"\nassert solution('''4\n9 10 11 12\n3''') == \"fill 2\\nfill 3\\ntransfer 2 0\\nfill 3\"\n'''\n---\n'''\nimport math\n"
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n7 8\\n10\") == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1'\nassert solution(\"2\\n8 10\\n7\") == 'discard 1\\nfill 2\\ntransfer 2 1'\nassert solution(\"2\\n8 10\\n3\") == 'fill 2\\ntransfer 2 1\\ntransfer 2 0'\n\nprint(solution(\"2\\n7 8\\n10\"))\n\"\"\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 7\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\"\nassert solution(\"2 8\") == \"impossible\"\nassert solution(\"3 9\") == \"impossible\"\nassert solution(\"4 9\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 8\\n10\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\"\n\nassert solution(\"2\\n7\\n10\") == \"discard 1\\nfill 2\\ntransfer 2 1\"\n\nassert solution(\"2\\n7\\n10\\n5\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\"\n\nassert solution(\"2\\n7\\n10\\n5\\n5\") == \"discard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\"\n\nassert solution(\"2\\n7\\n10\\n5\\n5\\n1\") == \"discard 1\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\""
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n7 8\\n10') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ntransfer 2 0'\n\n-----Hint-----\nTry to come up with a graph-based solution.\n\"\"\"\n\nn = int(stdin.readline())\nvolumes = list(map(int, stdin.readline().strip().split()))\nT = int(stdin.readline())\n\nstack = [0]\n\nfor v in volumes:\n    while stack and stack[-1] < v:\n        stack.pop()\n\n    if not stack or stack[-1] < v:\n        stack.append(v)\n    else:\n        stack[-1] -= v\n\nmoves = []\nwhile stack:\n    moves.append('fill'+ str(stack.pop()))\n\nwhile len(moves) < 100000:\n    moves.append('discard 0')\n    moves.append('transfer 0 1')\n    moves.append('transfer 0 0')\n    moves.append('discard 0')\n\nprint('\\n'.join(moves))\n"
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n7 8\\n10\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\"\n\"\"\"\nfrom typing import List\n\n\nclass IceCreamMix:\n    def __init__(self, N: int, v: List[int]):\n        self.N = N\n        self.v = v\n        self.build()\n\n    def build(self):\n        self.build_v()\n        self.build_target()\n        self.build_transfer_from_source()\n        self.build_transfer_to_target()\n        self.build_empty_source()\n\n    def build_v(self):\n        self.v = sorted(self.v)\n\n    def build_target(self):\n        self.target = self.v[0]\n\n    def build_transfer_from_source(self):\n        self.source_from = [0]\n        self.transfer_from = []\n        for i in range(self.N):\n            current = self.v[i]\n            if current < self.target:\n                self.source_from.append(current)\n            else:\n                self.transfer_from.append(current)\n\n    def build_transfer_to_target(self):\n        self.transfer_to_target = self.v[:]\n\n    def build_empty_source(self):\n        self.empty_source = [False] * self.N\n\n    def mix(self, T: int) -> str:\n        result = []\n        self.t = T\n        self.build_transfer_from_source()\n        if self.is_possible():\n            for i in range(self.N):\n                if i == 0:\n                    result.append(self.get_move(i))\n                elif i == self.N - 1:\n                    result.append(self.get_move(i))\n                elif self.source_from[i] == self.source_from[i - 1] == self.source_from[i + 1]:\n                    result.append(self.get_move(i))\n                elif self.source_from[i] < self.target:\n                    result.append(self.get_move(i))\n                else:\n                    result.append(self.get_move(i))\n                    result.append(self.get_move(i))\n            return \"\\n\".join(result)\n        else:\n            return \"impossible\"\n\n    def is_possible(self) -> bool:\n        for i in range(self.N):\n            if self.source_from[i] < self.target:\n                return True\n        return False\n\n    def get_move(self, i: int) -> str:\n        if self.source_from[i] == self.target:\n            return \"discard {}\".format(i)\n        elif i == 0:\n            return \"fill {}\".format(i)\n        elif i == self.N - 1:\n            return \"discard {}\".format(i)\n        else:\n            return \"transfer {} {}\".format(i, 0)\n"
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 8\\n10\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ntransfer 2 1\\ntransfer 2 0\"\nprint(solution(\"7 8\\n10\"))\n"
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n7 8\\n10\\n\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 4 3') == '27'\nassert solution('10 6 3') == '26'\nassert solution('10 7 3') == '24'\nassert solution('10 10 3') == '3'\nassert solution('10 10 10') == '0'"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('4 3 3') == '27'\n\n'''"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 4 3''') == '27'\nassert solution('''10 1 3''') == '27'\nassert solution('''10 2 4''') == '20'\nassert solution('''10 10 10''') == '0'\nassert solution('''10 1 10''') == '0'\n"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 4 3') == '27'\n\n\"\"\""
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1\\n1\\n') == '0'\nassert solution('2\\n2\\n2\\n2\\n') == '2'\nassert solution('10\\n4\\n3\\n') == '27'\nassert solution('10\\n10\\n3\\n') == '27'\n"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4 3\") == \"27\"\nassert solution(\"10 10 10\") == \"0\"\nassert solution(\"10 5 2\") == \"18\"\nassert solution(\"10 10 10\") == \"0\"\nassert solution(\"10 10 10\") == \"0\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 4 3') == '27'\nassert solution('5 4 2') == '15'\nassert solution('1 1 1') == '1'\nassert solution('1 2 1') == '2'\nassert solution('1 2 3') == '9'\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''10 4 3''') == '27'\n\"\"\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 4 3') == '27'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 4 3') == '27'\nassert solution('9 4 2') == '29'\nassert solution('5 3 1') == '14'\nassert solution('4 3 1') == '9'\n\nassert solution('9 4 2') == '29'\n"
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '''3\n-1\n4'''\n\nassert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '''4\n-1\n4'''\n\nassert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '''3\n-1\n4'''\n\nassert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '''4\n-1\n4'''\n\nassert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '''3\n-1\n4'''"
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\") == \"3\\n-1\\n4\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1') == '4\\n-1\\n4'\n\n\"\"\""
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\\n\") == \"3\\n-1\\n4\\n\""
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1') == '3\\n-1\\n4'\nassert solution('4 3 5\\n2 3 1 2\\n2\\n1 1 3') == '4\\n-1\\n4'\n"
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\\n') == '3\\n-1\\n4\\n'\n\"\"\"\n\n\n\"\"\"\nYou are given an array of integers.\n\nYou should find the sum of the integers with even indexes (0th, 2nd, 4th...).\n\nThen multiply this summed number and the final element of the array together.\n\nDon't forget that the first element has an index of 0.\n\nFor an empty array, the result will always be 0 (zero).\n\nInput: A list of integers.\n\nOutput: The number as an integer.\n\nExample:\n\ncheckio([0, 1, 2, 3, 4, 5]) == 30\ncheckio([1, 3, 5]) == 30\ncheckio([6]) == 36\ncheckio([]) == 0\n1\n2\n3\n4\n5\n6\n\nHow it is used: Indexes and slices are important elements of coding. This will come in handy down the road!\n\nPrecondition: 0 \u2264 len(array) \u2264 20\nall(isinstance(x, int) for x in array)\nall(-100 < x < 100 for x in array)\n\"\"\""
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\") == '4\\n-1\\n4'\n\"\"\""
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1''') == '''3\n-1\n4'''\nprint(solution(stdin))\n"
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1''') == '''3\n-1\n4'''\n\nassert solution('''5 4 3\n1 3 1 4 1\n2\n1 4 1\n2\n1 4 2\n3\n1 5 3\n2\n1 3 3\n2\n1 4 3\n2\n1 4 5\n3\n1 5 4\n2\n1 3 3\n2\n1 3 4\n2\n1 3 5\n3\n1 4 3\n2\n1 3 3\n2\n1 4 5\n3\n1 4 4\n2\n1 3 3\n2\n1 4 3\n2\n1 3 4\n2\n1 4 4\n2\n1 3 5\n3\n1 4 3\n2\n1 3 3\n2\n1 4 3\n2\n1 3 4\n2\n1 3 5\n3\n1 5 4\n2\n1 3 3\n2\n1 4 5\n3\n1 5 4\n2\n1 3 4\n2\n1 3 4\n2\n1 3 4\n2\n1 3 5\n3\n1 5 4\n2\n1 3 3\n2\n1 4 5\n3\n1 5 4\n2\n1 3 3\n2\n1 4 3\n2\n1 3 3\n2\n1 4 5\n3\n1 5 4\n2\n1 3 3\n2\n1 4 3\n2\n1 3 4\n2\n1 3 5\n3\n1 5 4\n2\n1 3 3\n2\n1 4 3\n2\n1 3 5\n3\n1 5 4\n2\n1 3 3\n2\n1 4 5\n3\n1 5 4\n2\n1 3 3\n2\n1 4 5\n3\n1 5 4\n2\n1 3 4\n2\n1 3 5\n3\n1 5 4\n2\n1 3 4\n2\n1 3 4\n2\n1 3 5\n3\n1 5 4\n2\n1 3 3\n2\n1 4 3\n2\n1 3 5\n3\n1 5 4\n2\n1 3 3\n2\n1 4 5\n3\n1 5 4\n2\n1 3 3\n2\n1 4 5\n3\n1 5 4\n2\n1 3 4\n2\n1 3 5\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 5 3\n2\n1 5 3\n3\n1 5 4\n2\n1 3 5\n2\n1 5 3\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3\n1 5 4\n2\n1 3 5\n2\n1 5 4\n3"
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 3000 1000') == '533.3333333333'\nassert solution('1000 30000 100') == '5131.3'\n\"\"\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1000 3000 1000''') == '533.3333333333'\n\"\"\"\nfrom math import sqrt,pi,log"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 100 50') == '233.33'\n"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 3000 1000') == '533.3333333333'\n\"\"\"\n\nfrom math import ceil, floor, sqrt, pi"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 3000 1000\") == \"533.3333333333\"\n\n\"\"\""
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000 3000 1000\\n') == '533.3333333333'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '0'\nassert solution('1 0 1') == '1'\nassert solution('1 1 1') == '1'\nassert solution('0 1 1') == '1'\n"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000 3000 1000\\n') == '533.3333333333'\n\"\"\"\n\nD, W, C = input().split()\nD = int(D)\nW = int(W)\nC = int(C)\n\ns = 0\n\nn = 1\nm = 1\np = 0\n\nwhile n >= 1:\n    while m >= 1:\n        s += (m*W)/C\n        m -= 1\n    n -= 1\n    m = (n*C)/D\n    n = int((m+p)/D)\n    p += (m+n*C)/D\n    \nprint(s)\n"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 3000 1000\") == \"533.3333333333\"\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 3000 1000') == '533.3333333333'\n\n\"\"\"\n\nimport math\nimport sys\n\ninput_array = sys.stdin.readlines()\n\ndistance, max_weight, max_containers = list(map(int, input_array[0].strip().split()))"
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 0\\n10 0\\n10 10') == '14.14'\n\"\"\"\n\nn, m = map(int, input().split())\n\ntoys = []\ntrees = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    toys.append((x, y))\nfor i in range(m):\n    x, y = map(int, input().split())\n    trees.append((x, y))\n\ntoys = sorted(toys)\ntrees = sorted(trees)\n\nleash_length = 0\ndist = 0\nfor i in range(len(trees)):\n    for j in range(len(toys)):\n        x_1, y_1 = toys[j]\n        x_2, y_2 = trees[i]\n        dist = abs(x_1 - x_2) + abs(y_1 - y_2)\n        if dist > 0.001:\n            leash_length += dist\n            toys.pop(j)\n            break\n    else:\n        continue\n    break\n\nprint(round(leash_length, 2))\n"
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 0\\n10 0\\n10 10\") == \"14.14\"\n\"\"\"\n\nn, m = map(int, input().split())\n\ntoys = []\ntrees = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    toys.append((x, y))\n\nfor i in range(m):\n    x, y = map(int, input().split())\n    trees.append((x, y))\n\nx_min, x_max, y_min, y_max = 10001, -10001, 10001, -10001\nfor t in toys:\n    x_min = min(x_min, t[0])\n    x_max = max(x_max, t[0])\n    y_min = min(y_min, t[1])\n    y_max = max(y_max, t[1])\n\nfor t in trees:\n    x_min = min(x_min, t[0])\n    x_max = max(x_max, t[0])\n    y_min = min(y_min, t[1])\n    y_max = max(y_max, t[1])\n\nx_min, x_max, y_min, y_max = int(x_min), int(x_max), int(y_min), int(y_max)\n\ndist = lambda x, y: ((x_max - x_min) ** 2 + (y_max - y_min) ** 2) ** 0.5\n\nleash = 0\nfor i in range(n):\n    t = toys[i]\n    x, y = t\n    for t in toys[i + 1:]:\n        x_, y_ = t\n        leash = max(leash, dist(x, y) + dist(x_, y_) - min(dist(x, y), dist(x_, y_)))\nprint(leash)\n"
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"2.41\"\nassert solution(\"5 5\") == \"1.73\"\n\"\"\"\n\nimport math\nimport collections"
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2 0\n10 0\n10 10\n''') == '14.14'\n"
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(sample_input_for_tasks)) == str(sample_output_for_tasks)\n----\n\n\n'''\n"
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0\\n10 0\\n10 10\") == \"14.14\"\n\"\"\"\n\nimport collections\nimport math"
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 0\\n10 0\\n10 10\") == \"14.14\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('3 10\\n6 7\\n2 3\\n3 6\\n7 7\\n9 9') == '12.75'\nassert solution('''Sample Input:\n2 0\n10 0\n10 10\nSample Output:\n14.14\n''') == '12.75'\nassert solution('3 10\\n6 7\\n2 3\\n3 6\\n7 7\\n9 9') == '12.75'\n'''\n\n\n\n'''\n\n\n\n'''\n\nimport sys"
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 0\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n2 1') == '3.14'\nassert solution('3 0\\n2 3\\n3 2\\n4 1') == '9.18'\nassert solution('4 0\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n2 1') == '7.71'\nassert solution('5 0\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n2 1') == '8.59'\nassert solution('4 0\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n2 1') == '9.09'\n"
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 0\\n10 0\\n10 10') == '14.14'\nassert solution('2 0\\n5 5\\n10 10') == '9.00'\nassert solution('2 0\\n10 10\\n5 5') == '10.10'\nassert solution('2 0\\n5 5\\n5 5') == '0.00'\nassert solution('2 0\\n10 10\\n10 10') == '0.00'\n"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\ntest_input = '''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n'''.strip()\n\ntest_output = '''\n123457 0\n0 2\n123458 1\n'''.strip()\n\nimport sys"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456\\n123458\\n123457\") == \"123457 0\\n0 2\\n123458 1\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n\"\"\") == \"\"\"123457 0\n0 2\n123458 1\n\"\"\"\n\nprint(solution(\"\"\"3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n\"\"\"))\n\"\"\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(0).read()) == open(1).read()\n"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456\\n123458\\n123457') == '123457 0\\n0 2\\n123458 1'\n\n----------------------------\n    def test_solution(capsys):\n        solution('123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456\\n123458\\n123457')\n        captured = capsys.readouterr()\n        assert captured.out == '123457 0\\n0 2\\n123458 1'\n        print('Tests passed!')"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n'''\n) == '''123457 0\n0 2\n123458 1\n'''\n\nassert solution(\n'''3 2\n123456 1700000\n123458 41412\n123457 15221\n123456\n123458\n123457\n'''\n) == '''123457 1\n0 2\n123458 0\n'''\n\nassert solution(\n'''3 1\n123456 1800000\n123457 41412\n123458 0\n123457\n123458\n123457\n'''\n) == '''123457 0\n0 2\n123457 0\n'''\n\nassert solution(\n'''1 1\n123456 1800000\n'''\n) == '''0\n'''\n\nassert solution(\n'''1 1\n123456 1800000\n'''\n) == '''0\n'''"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456\\n123458\\n123457\") == \"123457 0\"\nassert solution(\"1 1\\n2\\n3\") == \"3 1\"\n\"\"\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457''') == '''123457 0\n0 2\n123458 1'''\nassert solution('''3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457''') == '''123457 0\n0 2\n123458 1'''\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456\\n123458\\n123457\") == \"123457 0\"\nassert solution(\"3 2\\n123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456\\n123458\\n123457\") == \"0 2\"\nassert solution(\"3 2\\n123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456\\n123458\\n123457\") == \"123457 0\"\nassert solution(\"3 2\\n123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456\\n123458\\n123457\") == \"0 2\"\nassert solution(\"3 2\\n123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456\\n123458\\n123457\") == \"123457 0\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n123521 45626 15222\\n123521\\n123521\\n123521\") == \"123521 1\\n0 1\\n123521 0\"\nassert solution(\"4 3\\n123521 45626 15222\\n123521\\n123521\\n123521\") == \"123521 0\\n0 1\\n123521 1\"\nassert solution(\"4 3\\n123521 45626 15222\\n123521\\n123521\\n123521\") == \"123521 0\\n0 1\\n123521 2\"\nassert solution(\"4 3\\n123521 45626 15222\\n123521\\n123521\\n123521\") == \"123521 0\\n0 1\\n123521 2\"\nassert solution(\"4 3\\n123521 45626 15222\\n123521\\n123521\\n123521\") == \"123521 0\\n0 1\\n123521 2\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3 5 10 2 5\\n2 4 5 1 3') == 90\n'''"
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5 3 1 4\") == \"90\"\nassert solution(\"2 5 10 2 5\") == \"90\"\nassert solution(\"10 5 3 1 4\") == \"150\"\nassert solution(\"10 5 3 1 5\") == \"180\"\nassert solution(\"10 5 3 2 4\") == \"120\"\n\"\"\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 4 5 1 3\") == 90\n\"\"\""
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(6)) == 36\n\n----\n\nThe amount of chaos is equal to the number of passengers in the train, rounded up to the nearest multiple of $10$.\n\nTo calculate the amount of chaos in the train, we loop over the passengers, and at each passenger, we multiply the number of passengers in the train by 10 and then add the number of passengers.\n\n----"
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 4 5 1 3\") == \"90\"\nassert solution(\"3\\n5 10 2 5\") == \"110\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"25\""
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(r\"\"\"5\n3 5 10 2 5\"\"\") == '90'\nassert solution(r\"\"\"5\n2 4 5 1 3\"\"\") == '90'\nassert solution(r\"\"\"5\n2 4 5 1 3\n5 1 3 4 2\"\"\") == '90'\nassert solution(r\"\"\"5\n2 4 5 1 3\n4 1 3 5 2\"\"\") == '180'\nassert solution(r\"\"\"5\n4 3 5 2 1\n5 3 1 4 2\"\"\") == '180'\n"
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5 10 3') == '90'\nassert solution('4 5 10 2 5') == '90'"
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3 5 10 2 5\\n2 4 5 1 3') == '90'\n\"\"\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 4 5 1 3\\n1 2 3 4 5') == 90\nassert solution('3\\n2 4 5') == 9\n\"\"\""
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 4 5 1 3\\n\") == \"90\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\\n1 2 6\\n0 4 3\\n0 8 2\") == \"6.000000\"\nassert solution(\"1 1\\n1 1\") == \"2.000000\"\nassert solution(\"3 10\\n1 2 6\\n0 4 3\\n0 8 2\\n1 2 6\") == \"10.000000\"\n\"\"\""
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\\n1 2 6\\n0 4 3\\n0 8 2\\n\") == \"6.000000\"\nassert solution(\"2 10\\n1 3 6\\n0 4 3\\n0 8 2\\n\") == \"3.333333\"\nassert solution(\"4 10\\n1 3 6\\n0 4 3\\n0 8 2\\n\") == \"8.000000\"\n\n\"\"\""
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n2\n2 10\n0 5\n0 10\n\"\"\"\n) == \"8.000000\"\nassert solution(\n\"\"\"\n3\n0 10\n0 6\n0 5\n\"\"\"\n) == \"11.000000\"\n\"\"\"\n\nn=int(input())\nd=int(input())\nx=0\nh=0\nk=0\ny=0\nwhile x<d:\n    x=int(input())\n    y=x+h\n    k=x\n    h=y\n"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '2'\nassert solution('0 1 2 3 4 5') == '1'\nassert solution('0 1 1 1 1 1') == '0'\n'''\n\n'''\n\n'''\n\n\n'''\n\u041c\u0410\u041b\u0415\u041d\u042c \u0421\u041b\u041e\u0412\u0410\u042f \u0421\u0422\u0420\u041e\u041a\u0410\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 \u0441\u043b\u043e\u0432, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432 \u043d\u0435\u0439 \u0441\u043b\u043e\u0432 \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0432\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0431\u0443\u043a\u0432\u044b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0441\u043b\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0431\u0443\u043a\u0432\u044b.\n\nSample Input:\n\n\u042f \u043f\u043e\u043a\u043e\u0440\u043c\u0438\u043b \u0434\u044f\u0434\u044e \u043e\u0431\u0435\u0437\u044c\u044f\u043d\u0443 \u0438 \u0434\u044f\u0434\u044e \u043a\u043e\u0442\u043e\u0432.\n\nSample Output:\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0441\u043b\u043e\u0432: 3\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0431\u0443\u043a\u0432\u044b: 2\n'''\n\n'''\n\u0421\u041b\u041e\u0412\u0410\u042f \u0421\u0422\u0420\u041e\u041a\u0410\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 \u0441\u043b\u043e\u0432, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432 \u043d\u0435\u0439 \u0441\u043b\u043e\u0432, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0432 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0431\u0443\u043a\u0432\u044b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0441\u043b\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0431\u0443\u043a\u0432\u044b.\n\nSample Input:\n\n\u042f \u043f\u043e\u043a\u043e\u0440\u043c\u0438\u043b \u0434\u044f\u0434\u044e \u043e\u0431\u0435\u0437\u044c\u044f\u043d\u0443 \u0438 \u0434\u044f\u0434\u044e \u043a\u043e\u0442\u043e\u0432.\n\nSample Output:\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0441\u043b\u043e\u0432: 3\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0431\u0443\u043a\u0432\u044b: 2\n'''\n\n'''\n\n'''\n\n\n'''\n\u041c\u0410\u041b\u0415\u041d\u042c \u0421\u041b\u041e\u0412\u0410\u042f \u0421\u0422\u0420\u041e\u041a\u0410\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 \u0441\u043b\u043e\u0432, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u0445 \u0440\u0430\u0437\u043c\u0435\u0440.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443 \u0442\u0435\u043a\u0441\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 \u043e\u0442\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043f\u0440\u043e\u0431\u0435\u043b\u0430.\n\nSample Input:\n\n\u042f \u043f\u043e\u043a\u043e\u0440\u043c\u0438\u043b \u0434\u044f\u0434\u044e"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10\\n1 2 6\\n0 4 3\\n0 8 2\") == \"6.000000\"\n\"\"\"\n\n\nfrom typing import List\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        \"\"\"\n            #1\n            #2 3 4\n            #5 6 7\n            #8 9 10\n            #\n            #0 1 0\n            #0 0 1\n            #0 0 0\n            #\n            #1 2 3\n            #4 5 6\n            #7 8 9\n        \"\"\"\n        stdin = stdin.splitlines()\n        n = int(stdin[0])\n        m = int(stdin[1])\n        d = int(stdin[2])\n\n        # [index, is_x, index, is_x,...]\n        buildings = [[int(i) for i in stdin[2 + i].split()] for i in range(n)]\n        buildings.sort()\n\n        x = buildings[0][0]\n        covered = 0\n        for i in range(n):\n            if x >= buildings[i][1]:\n                covered += buildings[i][3] - buildings[i][2]\n                x = buildings[i][0] + buildings[i][3]\n            else:\n                break\n\n        return \"{0:.3f}\".format(covered)\n"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\\n1 2 6\\n0 4 3\\n0 8 2\") == \"6.000000\"\n\"\"\"\n"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(input_stdin.readlines()))\n\nfrom __future__ import annotations\nfrom typing import Callable, Iterator, NamedTuple, Tuple\nfrom itertools import islice, zip_longest\nfrom functools import reduce"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 10\\n1 2 6\\n0 4 3\\n0 8 2') == '6.000000'\n\"\"\""
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3 10\n1 2 6\n0 4 3\n0 8 2\n''') == '6.000000'\n\n\"\"\"\n\n\nfrom math import ceil\n"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 0\\n0 0\\n1.\\n..\\n0\\n\") == \"2\\n1.\\n..\\n0\\n\"\nassert solution(\"2\\n0 0\\n0 0\\n0 0\\n1.\\n..\\n0\\n\") == \"2\\n0 0\\n1.\\n..\\n0\\n\"\nassert solution(\"2\\n0 0\\n0 0\\n0 0\\n0 0\\n1.\\n..\\n0\\n\") == \"2\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n\"\nassert solution(\"2\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n1.\\n..\\n0\\n\") == \"2\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n1.\\n\"\nassert solution(\"2\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n1.\\n..\\n0\\n\") == \"2\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n1.\\n\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1\n\"\"\"\n\nfrom copy import deepcopy\nimport numpy as np\n\nclass GameState:\n    def __init__(self, map_size):\n        self.map_size = map_size\n        self.game_state = np.zeros((map_size, map_size), dtype=int)\n        self.time_to_rush = 0\n        self.zerglings = []\n        self.configurations = []\n        self.run_instructions()\n\n    def run_instructions(self):\n        for line in self.game_state:\n            print(line)\n        print()\n        for instruction in self.stdin:\n            if instruction.split()[0] == \"Rush\":\n                self.rush(int(instruction.split()[1]))\n            else:\n                self.attack(int(instruction.split()[0]), int(instruction.split()[1]))\n        print()\n\n        for line in self.game_state:\n            print(line)\n        print()\n\n    def attack(self, x, y):\n        \"\"\"\n        Attack the enemy with the specified coordinate\n        \"\"\"\n        self.game_state[y,x] -= 1\n        print(\"Attack at \", x, \" \", y)\n\n        # check if any zerglings are dead\n        for i, zergling in enumerate(self.zerglings):\n            if self.game_state[zergling[0],zergling[1]] <= 0:\n                self.zerglings.pop(i)\n\n        # check if any zerglings can be regenerated\n        for i, zergling in enumerate(self.zerglings):\n            if self.game_state[zergling[0],zergling[1]] <= 0 and self.game_state[zergling[0],zergling[1]] + 35 < 35:\n                self.game_state[zergling[0],zergling[1]] += 1\n                self.zerglings[i] = (zergling[0],zergling[1])\n\n        # check if any zerglings can move\n        for i, zergling in enumerate(self.zerglings):\n            if self.game_state[zergling[0],zergling[1]] == 1:\n                for j, zergling_ in enumerate(self.zerglings):\n                    if self.game_state[zergling_[0],zergling_[1]] == 1 and zergling[0] == zergling_[0] and zergling[1] == zergling_[1] and (zergling[0], zergling[1]) not in self.zerglings and self.game_state[zergling_[0],zergling_[1]] > 0:\n                        self.zerglings.pop(i)\n                        self.zerglings.insert(j, (zergling[0],zergling[1]))\n                        break\n\n        # check if any zerglings can attack\n        for i, zergling in enumerate(self.zerglings):\n            for j, zergling_ in enumerate(self.zerglings):\n                if self.game_state[zergling_[0],zergling_[1]] == 1 and zergling[0] == zergling_[0] and zergling[1] == zergling_[1] and (zergling[0], zergling[1]) not in self.zerglings and self.game_state[zergling[0],zergling[1]] > 0:\n                    if self.game_state[zergling_[0],zergling_[1]] < self.game_state[zergling[0],zergling[1]] - self.configurations[0][0][1]:\n                        self.zerglings.pop(i)\n                        self.zerglings.insert(j, (zergling[0],zergling[1]))\n                        break\n\n        # check if any zerglings can move again\n        for i, zergling in enumerate(self.zerglings):\n            if self.game_state[zergling[0],zergling[1]] == 1:\n                for j, zergling_ in enumerate(self.zerglings):\n                    if self.game_state[zergling_[0],zergling_[1]] == 1 and zergling[0] == zergling_[0] and zerg"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2 0\\n1 1 2\\n1 1 2\") == \"2\\n..\\n..\\n1 1 2\"\n\"\"\""
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2\\n0 0\\n0 0\\n1.\\n..\\n0\\n\") == \"1.\\n..\\n\"\nassert solution(\"2\\n2\\n0 0\\n0 0\\n0 0\\n0 1\\n\") == \"0\\n0\\n0\\n0\\n0\\n0\\n\"\nassert solution(\"2\\n2\\n0 0\\n0 0\\n0 0\\n1.\\n..\\n0\\n\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\"\nassert solution(\"2\\n2\\n0 0\\n0 0\\n0 0\\n0 0\\n0 1\\n\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n1.\\n..\\n0\\n2\\n2\\n1.\\n\") == \"1.\\n..\\n0\\n2\\n2\\n1.\\n\"\n\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n0 0\\n0 0\\n1\\n..\\n0\\n') == '1\\n..\\n'\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(aoc_03.read_input('test_input.txt', str)) == aoc_03.read_output('test_input.txt', str)\n\"\"\"\n\n\nfrom copy import deepcopy\nfrom operator import itemgetter\nimport sys\nimport numpy\n"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n0\\n0\\n1.\") == \"1.\\n..\"\nassert solution(\"2\\n2\\n1\\n2\\n2.\") == \"2.\\n22\\n2.\\n22\"\nassert solution(\"2\\n2\\n0\\n0\\n1.\") == \"1.\\n..\"\nassert solution(\"2\\n2\\n0\\n0\\n1.\") == \"1.\\n..\"\nassert solution(\"4\\n1\\n0\\n0\\n1\\n1\\n1\\n0\\n0\\n2.\") == \"21.\\n2222\\n2.\\n2222\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n0 0\\n0 0\\n1.\\n..\\n0\\n') == '1.\\n..\\n'\n\"\"\"\n\nfrom math import ceil\nfrom typing import List\n\nfrom numpy import array, argwhere, logical_and\n\n\nclass Grid:\n    \"\"\"A 2D grid.\"\"\"\n    def __init__(self, rows, columns):\n        self._rows = rows\n        self._columns = columns\n        self._cells = array([['.' for _ in range(self._columns)] for _ in range(self._rows)])\n        self._cells[0, :] = '1'\n        self._cells[-1, :] = '2'\n\n    def __getitem__(self, idx):\n        return self._cells[idx]\n\n    def __setitem__(self, idx, item):\n        self._cells[idx] = item\n\n    def __len__(self):\n        return self._rows\n\n    def __str__(self):\n        return '\\n'.join(''.join(row) for row in self._cells)\n\n    def __repr__(self):\n        return str(self)\n\n    def __eq__(self, other):\n        return self._cells == other._cells\n\n    def __hash__(self):\n        return hash(self._cells)\n\n    @property\n    def cells(self):\n        \"\"\"Return the grid of cells.\"\"\"\n        return self._cells\n"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '1\\n1\\n'\n\nassert solution('''\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '1\\n1\\n'\n\nassert solution('''\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '1\\n1\\n'\n\nassert solution('''\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '1\\n1\\n'\n\nassert solution('''\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '1\\n1\\n'"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\na\\nabc\\nabc\") == '1'\n\"\"\"\n"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"3\\na\\nbc\\nabc\\n3\\n1 abca\\n2 1\\n2 3\"\n) == \"1\"\n\nassert solution(\n\"3\\na\\nbc\\nabc\\n3\\n1 abca\\n2 1\\n2 3\"\n) == \"1\"\n\nassert solution(\n\"3\\na\\nbc\\nabc\\n3\\n1 abca\\n2 1\\n2 3\"\n) == \"1\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open('input.txt', 'r').read()) == open('output.txt', 'r').read()"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '1\\n1\\n'"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nabc\\nabc\\n1 2\") == \"1\\n1\"\n"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n    \"\"\") == \"1\\n1\\n1\"\nassert solution(\"\"\"6\na\nbc\nabc\nd\ne\nf\n6\n1 abcde\n2 1\n2 2\n2 3\n2 4\n2 5\n3 1\n3 2\n3 3\n3 4\n3 5\n4 1\n4 2\n4 3\n4 4\n4 5\n4 6\n5 1\n5 2\n5 3\n5 4\n5 5\n5 6\n6 1\n6 2\n6 3\n6 4\n6 5\n6 6\n\"\"\") == \"1\\n1\\n1\\n1\\n1\\n1\"\n    \"\"\")\n"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == 'a'\nassert solution('ab') == 'a'\nassert solution('abc') == 'c'\nassert solution('abcd') == 'c'\n"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\\nbc\\nabc\") == \"1\"\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\na\\nb\\nabc\\n3\\n1 abca\\n2 1\\n2 3\") == \"1\\n1\\n1\"\nprint('The code ran Correctly')\n\n\"\"\""
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 1 1 0') == 'NO'\nassert solution('0 0 0 0') == 'YES'\nassert solution('1 1 1 1') == 'NO'\nassert solution('5 1 4 3') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"1 2 1 1\") == \"NO\"\nassert solution(\"1 1 1 2\") == \"NO\"\nassert solution(\"10 1 1 10\") == \"NO\"\nassert solution(\"10 1 10 1\") == \"YES\"\n"
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 1 1 2') == 'NO'\nassert solution('3 3 3 3') == 'NO'\nassert solution('1 1 1 0') == 'YES'\nassert solution('3 3 3 1') == 'YES'\n"
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('2 2 1 0') == 'YES'\nassert solution('2 2 2 1') == 'NO'\nassert solution('0 0 0 0') == 'NO'\nassert solution('0 0 0 1') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 1\") == \"YES\"\n\nassert solution(\"2 3 4 5\") == \"NO\"\n\nassert solution(\"1 1 1 1\") == \"YES\"\n\nassert solution(\"3 2 2 10\") == \"NO\"\n\nassert solution(\"2 3 4 5\") == \"NO\""
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('2 2 3 2') == 'NO'\nassert solution('5 10 10 10') == 'YES'\nassert solution('10 10 10 5') == 'NO'\nassert solution('5 10 10 1') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'YES'\nassert solution('1 1 1 1') == 'YES'\nassert solution('1 1 1 4') == 'NO'\nassert solution('1 1 1 2') == 'NO'\nassert solution('1 1 1 3') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 1 1 4') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('2 2 3 2') == 'NO'\nassert solution('1 1 1 100') == 'NO'"
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 1 2 1') == 'NO'\nassert solution('1 1 1 10') == 'YES'\nassert solution('0 2 0 0') == 'NO'\nassert solution('1 1 1 0') == 'YES'\n\n'''\n\nW, S, C, K = map(int, input().split())"
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000') == '80.57'\n\"\"\"\n\nN, T = map(int, stdin.readline().split())\nlines = [list(map(float, line.split())) for line in stdin]"
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000') == '80.5696'\n\"\"\""
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5') == '11.3464'\n\"\"\""
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000\") == \"80.5696\"\n\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000') == '80.5696'\n\"\"\"\nimport sys\nimport os\nimport argparse"
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\") == \"80.57\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000') == '80.5696'\n\"\"\"\n\nN, T = [int(c) for c in input().split()]\nA = [0] * N\nfor i in range(N):\n    a, b, c = [float(c) for c in input().split()]\n    A[i] = (a, b, c)\n"
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000') == '80.5696000000'\n\"\"\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 96') == '80.5696000000'\n\"\"\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('0.0909 0.0909 0.0909') == '9.0909'\nassert solution('0.0080 1.5417 25.0000 -0.0080 1.5417 25.0000') == '80.5696'\nassert solution('0.0080 1.5417 25.0000 -0.0080 1.5417 25.0000 0.0000 0.0000 0.0000') == '80.5696'\n"
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\n\"\"\"\n\nimport math\n\nn = int(input())\nholes = list(map(int, input().split()))"
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 0 1 1 1 0 0 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\nassert solution(\"4 -1 -1 1 1 1 0 0 1\") == \"0\"\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\n\nprint(solution(input()))"
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1') == '2'\n"
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 0 0 1 1 1 0 0 1''') == '2'\n"
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1') == '2'\n\"\"\""
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 0 0 1 1 1 1 1 0 0 1\") == \"2\""
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open('./input.txt', 'r').read()) == '2370'\nprint(solution(open('./input.txt', 'r').read()))\n"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150') == '1400'\n\"\"\"\n\nn, m, k = [int(x) for x in input().split()]"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150\") == \"1400\"\n\n\"\"\"\n\nn, m, k = [int(x) for x in stdin.readline().split()]\n\nx = [[int(x) for x in stdin.readline().split()] for _ in range(n)]\ny = [[int(y) for y in stdin.readline().split()] for _ in range(m)]\n\nans = None\n\nfor i in range(n):\n    for j in range(n):\n        for t in range(m):\n            for xi, yi, hi in y:\n                if (x[i][0] - xi) ** 2 + (x[i][1] - yi) ** 2 <= hi ** 2:\n                    ans = min(ans, abs(x[j][0] - x[i][0]) + abs(x[j][1] - x[i][1])) if ans is not None else abs(x[j][0] - x[i][0]) + abs(x[j][1] - x[i][1])\n                    if ans is None:\n                        ans = 0"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150\") == \"1400\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150\") == \"1400\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'impossible'\nassert solution('2\\n0 0 400\\n1000 0 400') == '0'\nassert solution('3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150') == '1400'\n\"\"\"\n\nimport sys\nimport math\nimport bisect"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150\") == \"1400\"\n\"\"\""
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150') == '1400'\nassert solution('4 2 2\\n0 0 1\\n100 0 1\\n200 0 1\\n300 0 2') == 'impossible'\n'''\n\nn, m, k = [int(x) for x in input().split()]\nxis = []\nyis = []\nr = []\nh = []\nfor _ in range(n):\n    xi, yi, ri, hi = [int(x) for x in input().split()]\n    xis.append(xi)\n    yis.append(yi)\n    r.append(ri)\n    h.append(hi)\nx0, y0, r0, h0 = [int(x) for x in input().split()]\nxis.append(x0)\nyis.append(y0)\nr.append(r0)\nh.append(h0)"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n4 5 6\\n7 8 9') == 'Impossible'\nassert solution('4 2 1\\n0 0 400\\n0 0 200\\n2000 0 400') == '0'\nassert solution('3 2 1\\n0 0 200\\n2000 0 400') == '0'"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150\\n\") == \"1400\"\n\"\"\"\n\nfrom collections import defaultdict\nimport math\n\nn, m, k = [int(x) for x in input().split(\" \")]\n\nx = defaultdict(list)\ny = defaultdict(list)\nr = defaultdict(list)\nh = defaultdict(list)\nfor _ in range(n):\n    x[input()], y[input()], r[input()] = [int(x) for x in input().split(\" \")]\nfor _ in range(m):\n    x[input()], y[input()], h[input()] = [int(x) for x in input().split(\" \")]\n\nx_max, x_min = max(x.values()), min(x.values())\ny_max, y_min = max(y.values()), min(y.values())\nr_max, r_min = max(r.values()), min(r.values())\nh_max, h_min = max(h.values()), min(h.values())\n\nmin_x = math.ceil(x_min / k)\nmax_x = math.floor(x_max / k)\nmin_y = math.ceil(y_min / k)\nmax_y = math.floor(y_max / k)\nmin_r = math.ceil(r_min / k)\nmax_r = math.floor(r_max / k)\nmin_h = math.ceil(h_min / k)\nmax_h = math.floor(h_max / k)\n\nx_max, x_min = max_x * k, min_x * k\ny_max, y_min = max_y * k, min_y * k\nr_max, r_min = max_r * k, min_r * k\nh_max, h_min = max_h * k, min_h * k"
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\ncopenhagen amsterdam 622\\nhelsinki berlin 1107\\nlondon amsterdam 356\\nberlin amsterdam 575\\nlondon dublin 463\\nreykjavik dublin 1498\\nreykjavik oslo 1748\\nlondon brussels 318\") == '3907'\nprint(solution(input()))\n\"\"\"\nimport heapq\nimport math"
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\ncopenhagen amsterdam 622\\nhelsinki berlin 1107\\nlondon amsterdam 356\\nberlin amsterdam 575\\nlondon dublin 463\\nreykjavik dublin 1498\\nreykjavik oslo 1748\\nlondon brussels 318\\nbrussels amsterdam 173') == '3907'\nassert solution('8 2\\naz\\nzz\\n23\\n27\\ntt\\n') == '14'\nassert solution('8 10\\naz\\nzz\\n23\\n27\\ntt\\n') == '6'\nassert solution('5 15\\naz\\nzz\\n23\\n27\\ntt\\n') == '15'\nassert solution('5 2\\naz\\nzz\\n23\\n27\\ntt\\n') == '2'\n"
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2\\nstockholm\\namsterdam\\n') == ''\nassert solution('3\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 846\\nstockholm helsinki 382\\noslo london\\noslo copenhagen 864\\nstockholm copenhagen 414\\ncopenhagen berlin\\nberlin amsterdam 830\\nstockholm amsterdam\\noslo london\\noslo copenhagen 593\\nstockholm copenhagen 489\\ncopenhagen berlin\\nberlin amsterdam 758\\nstockholm amsterdam\\noslo london\\noslo copenhagen 814\\nstockholm copenhagen 513\\ncopenhagen berlin\\nberlin amsterdam 728\\nstockholm amsterdam\\noslo london\\noslo copenhagen 468\\nstockholm copenhagen 16\\nstockholm helsinki\\n') == '3907'\nassert solution('4\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\nstockholm\\n"
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"10 15\\n\"\n\"stockholm\\n\"\n\"amsterdam\\n\"\n\"london\\n\"\n\"berlin\\n\"\n\"copenhagen\\n\"\n\"oslo\\n\"\n\"helsinki\\n\"\n\"dublin\\n\"\n\"reykjavik\\n\"\n\"brussels\\n\"\n\"oslo stockholm 415\\n\"\n\"stockholm helsinki 396\\n\"\n\"oslo london 1153\\n\"\n\"oslo copenhagen 485\\n\"\n\"stockholm copenhagen 522\\n\"\n\"copenhagen berlin 354\\n\"\n\"copenhagen amsterdam 622\\n\"\n\"helsinki berlin 1107\\n\"\n\"london amsterdam 356\\n\"\n\"berlin amsterdam 575\\n\"\n\"london dublin 463\\n\"\n\"reykjavik dublin 1498\\n\"\n\"reykjavik oslo 1748\\n\"\n\"london brussels 318\\n\"\n\"brussels amsterdam 173\") == \"3907\"\nprint(\"Check solution 1:\", solution(\n    \"10 15\\n\"\n    \"stockholm\\n\"\n    \"amsterdam\\n\"\n    \"london\\n\"\n    \"berlin\\n\"\n    \"copenhagen\\n\"\n    \"oslo\\n\"\n    \"helsinki\\n\"\n    \"dublin\\n\"\n    \"reykjavik\\n\"\n    \"brussels\\n\"\n    \"oslo stockholm 415\\n\"\n    \"stockholm helsinki 396\\n\"\n    \"oslo london 1153\\n\"\n    \"oslo copenhagen 485\\n\"\n    \"stockholm copenhagen 522\\n\"\n    \"copenhagen berlin 354\\n\"\n    \"copenhagen amsterdam 622\\n\"\n    \"helsinki berlin 1107\\n\"\n    \"london amsterdam 356\\n\"\n    \"berlin amsterdam 575\\n\"\n    \"london dublin 463\\n\"\n    \"reykjavik dublin 1498\\n\"\n    \"reykjavik oslo 1748\\n\"\n    \"london brussels 318\\n\"\n    \"brussels amsterdam 173\"))\nprint(\"=\" * 20)\nassert solution(\n\"4\\n\"\n\"oslo\\n\"\n\"berlin\\n\"\n\"amsterdam\\n\"\n\"oslo berlin\") == \"3827\"\nprint(\"Check solution 2:\", solution(\n    \"4\\n\"\n    \"oslo\\n\"\n    \"berlin\\n\"\n    \"amsterdam\\n\"\n    \"oslo berlin\"))\nprint(\"=\" * 20)\nassert solution(\n\"4\\n\"\n\"london\\n\"\n\"berlin\\n\"\n\"amsterdam\\n\"\n\"oslo\") == \"1258\"\nprint(\"Check solution 3:\", solution(\n    \"4\\n\"\n    \"london\\n\"\n    \"berlin\\n\"\n    \"amsterdam\\n\"\n    \"oslo\"))\nprint(\"=\" * 20)\nassert solution(\n\"4\\n\"\n\"oslo\\n\"\n\"berlin\\n\"\n\"amsterdam\\n\"\n\"oslo berlin\") == \"0\"\nprint(\"Check solution 4:\", solution(\n    \"4\\n\"\n    \"oslo\\n\"\n    \"berlin\\n\"\n    \"amsterdam\\n\"\n    \"oslo berlin\"))\nprint(\"=\" * 20)\nassert solution(\n\"4\\n\"\n\"oslo\\n\"\n\"berlin\\n\"\n\"amsterdam\\n\"\n\"oslo berlin\\n\"\n\"oslo london\") == \"2865\"\nprint(\"Check solution 5:\", solution(\n    \"4\\n\"\n    \"oslo\\n\"\n    \"berlin\\n\"\n    \"amsterdam\\n\"\n    \"oslo berlin\\n\"\n    \"oslo london\"))\nprint(\"=\" * 20)\n"
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(aoc_17_12_input) == \"3907\"\n\naoc_17_12_input = \"\"\"10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\nreykjavik dublin\nbrussels helsinki\"\"\"\n\nassert solution(aoc_17_12_input) == \"3907\"\n\"\"\"\n\nfrom collections import defaultdict\n\nlines = [line.strip() for line in open('input/17_12.txt')]"
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\ncopenhagen amsterdam 622\\nhelsinki berlin 1107\\nlondon amsterdam 356\\nberlin amsterdam 575\\nlondon dublin 463\\nreykjavik dublin 1498\\nreykjavik oslo 1748\\nlondon brussels 318\") == '3907'\n\"\"\"\nimport sys"
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 15\\nstockholm\\namsterdam\\n\\nlondon\\nberlin\\ncopenhagen\\noslo\\n\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\ncopenhagen amsterdam 622\\nhelsinki berlin 1107\\nlondon amsterdam 356\\nberlin amsterdam 575\\nlondon dublin 463\\nreykjavik dublin 1498\\nreykjavik oslo 1748\\nlondon brussels 318\") == \"3907\"\n\nprint(solution(\"10 15\\nstockholm\\namsterdam\\n\\nlondon\\nberlin\\ncopenhagen\\noslo\\n\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\n\\namsterdam helsinki 1107\\n\\nlondon amsterdam 356\\n\\nberlin amsterdam 575\\n\\nlondon dublin 463\\n\\nreykjavik dublin 1498\\n\\nreykjavik oslo 1748\\n\\nlondon brussels 318\"))\n\nprint(solution(\"10 15\\nstockholm\\namsterdam\\n\\nlondon\\nberlin\\ncopenhagen\\noslo\\n\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\n\\namsterdam helsinki 1107\\n\\nlondon amsterdam 356\\n\\nberlin amsterdam 575\\n\\nlondon dublin 463\\n\\nreykjavik dublin 1498\\n\\nreykjavik oslo 1748\\n\\nlondon brussels 318\"))\n\nprint(solution(\"10 15\\nstockholm\\namsterdam\\n\\nlondon\\nberlin\\ncopenhagen\\noslo\\n\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\n\\namsterdam helsinki 1107\\n\\nlondon amsterdam 356\\n\\nberlin amsterdam 575\\n\\nlondon dublin 463\\n\\nreykjavik dublin 1498\\n\\nreykjavik oslo 1748\\n\\nlondon brussels 318\"))\n\nprint(solution(\"10 15\\nstockholm\\namsterdam\\n\\nlondon\\nberlin\\ncopenhagen\\noslo\\n\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\n\\namsterdam helsinki 1107\\n\\nlondon amsterdam 356\\n\\nberlin amsterdam 575\\n\\nlondon dublin 463\\n\\nreykjavik dublin 1498\\n\\nreykjavik oslo 1748\\n\\nlondon brussels 318\"))\n\nprint(solution(\"10 15\\nstockholm\\namsterdam\\n\\nlondon\\nberlin\\ncopenhagen\\noslo\\n\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\n\\namsterdam helsinki 1107\\n\\nlondon amsterdam 356\\n\\nberlin amsterdam 575\\n\\nlondon dublin 463\\n\\nreykjavik dublin 1498\\n\\nreykjavik oslo 1748\\n\\nlondon brussels 318\"))\n\nprint(solution(\"10 15\\nstockholm\\namsterdam\\n\\nlondon\\nberlin\\ncopenhagen\\noslo\\n\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\n\\namsterdam helsinki 1107\\n\\nlondon amsterdam 356\\n\\nberlin amsterdam 575\\n\\nlondon dublin 463\\n\\nreykjavik dublin 1498\\n\\nreykjavik oslo 1748\\n\\nlondon brussels 318\"))\n\nprint("
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\ncopenhagen amsterdam 622\\nhelsinki berlin 1107\\nlondon amsterdam 356\\nberlin amsterdam 575\\nlondon dublin 463\\nreykjavik dublin 1498\\nreykjavik oslo 1748\\nlondon brussels 318\") == \"3907\"\n\n\"\"\""
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\ncopenhagen amsterdam 622\\nhelsinki berlin 1107\\nlondon amsterdam 356\\nberlin amsterdam 575\\nlondon dublin 463\\nreykjavik dublin 1498\\nreykjavik oslo 1748\\nlondon brussels 318\") == \"3907\"\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\nclass Solution:\n    def solve(self, stdin):\n        pass"
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\ncopenhagen amsterdam 622\\nhelsinki berlin 1107\\nlondon amsterdam 356\\nberlin amsterdam 575\\nlondon dublin 463\\nreykjavik dublin 1498\\nreykjavik oslo 1748\\n' + 'london brussels 318\\nbrussels amsterdam 173\\nstockholm amsterdam\\noslo london\\nreykjavik dublin\\nbrussels helsinki') == '3907'\nprint(solution('10 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\n' + 'copenhagen amsterdam 622\\nhelsinki berlin 1107\\n' + 'london amsterdam 356\\n' + 'berlin amsterdam 575\\n' + 'london dublin 463\\n' +'reykjavik dublin 1498\\n' +'reykjavik oslo 1748'))\n"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"2\"\nassert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"1\"\nassert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"2\"\nassert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"1\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"2\\n1\\n2\\n1\\n\"\nassert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"2\\n1\\n2\\n1\\n\"\nassert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"2\\n1\\n2\\n1\\n\"\nassert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"2\\n1\\n2\\n1\\n\"\nassert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"2\\n1\\n2\\n1\\n\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n') == '2\\n1\\n2\\n1\\n'\n\n\"\"\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n') == '2\\n1\\n2\\n1\\n'\n"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"2\\n1\\n2\\n1\\n\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"2\\n1\\n2\\n1\\n\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n') == '2\\n1\\n2\\n1\\n'\n\nassert solution('5 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n') == '2\\n1\\n2\\n1\\n'\n\n\"\"\"\n\nfrom collections import deque\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"2\\n1\\n2\\n1\\n\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"2\\n1\\n2\\n1\\n\"\nassert solution(\"4 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"1\\n2\\n1\\n2\\n\"\n\n'''"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"2\\n1\\n2\\n1\\n\"\n\n\"\"\"\n\nn, m = [int(x) for x in stdin.readline().split(' ')]\nx = [int(x) for x in stdin.readline().split(' ')]\nhut = []\nfor i in range(n):\n    hut.append(x[i])\nhut.append(0)\nans = []\nfor i in range(m):\n    n1, n2 = [int(x) for x in stdin.readline().split(' ')]\n    s = hut[n1 - 1:n2]\n    s.sort()\n    ans.append(str(s[0]))\nans.append(hut[n])\nprint(\"\\n\".join(ans))\n"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 5\n10111\n11100\n10111''') == '10110'\nassert solution('''3 5\n01001\n11100\n10111''') == '10110'\n\n-----Note-----\nThe characters may have duplicate features in different positions.\n\n'''\n"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('1 1') == '1'\nassert solution('0 0') == '0'\nassert solution('0 1') == '0'\n"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n01001\\n11100\\n10111\") == \"1010\"\n\n------------------------------------\n\nfrom collections import defaultdict\n\nn, k = map(int, stdin.readline().split())\n\nfeatures = defaultdict(int)\nfor i in range(n):\n    features = defaultdict(int, {int(j): 1 for j in stdin.readline().split()})\n\nanswer = \"0\" * k\n\nfor j in range(k):\n    answer = max(answer, \"\".join([str(1 ^ features[j])] * k))\n\nprint(answer)\n\n------------------------------------\n\nfrom collections import defaultdict\n\nn, k = map(int, stdin.readline().split())\n\nfeatures = defaultdict(int)\n\nfor i in range(n):\n    features = defaultdict(int, {int(j): 1 for j in stdin.readline().split()})\n\nanswer = [0] * k\n\nfor j in range(k):\n    for l in range(k):\n        if (j ^ features[l]) == 0:\n            answer[j] = max(answer[j], l)\n\nprint(\"\".join([str(answer[j]) for j in range(k)]))\n\n------------------------------------\n\nfrom collections import defaultdict\n\nn, k = map(int, stdin.readline().split())\n\nfeatures = defaultdict(int)\n\nfor i in range(n):\n    features = defaultdict(int, {int(j): 1 for j in stdin.readline().split()})\n\nanswer = \"\"\n\nfor j in range(k):\n    if answer[j] == \"0\":\n        for l in range(k):\n            if (j ^ features[l]) == 0:\n                answer = max(answer, str(l), key=lambda x: (len(x), x))\n\nprint(answer)\n\n------------------------------------\n\nfrom collections import defaultdict\n\nn, k = map(int, stdin.readline().split())\n\nfeatures = defaultdict(int)\n\nfor i in range(n):\n    features = defaultdict(int, {int(j): 1 for j in stdin.readline().split()})\n\nanswer = \"\"\n\nfor j in range(k):\n    if answer[j] == \"0\":\n        for l in range(k):\n            if (j ^ features[l]) == 0:\n                answer = max(answer, str(l), key=lambda x: (len(x), x))\n\nprint(answer)\n\n------------------------------------\n\nfrom collections import defaultdict\n\nn, k = map(int, stdin.readline().split())\n\nfeatures = defaultdict(int)\n\nfor i in range(n):\n    features = defaultdict(int, {int(j): 1 for j in stdin.readline().split()})\n\nanswer = \"\"\n\nfor j in range(k):\n    if answer[j] == \"0\":\n        for l in range(k):\n            if (j ^ features[l]) == 0:\n                answer = max(answer, str(l), key=lambda x: (len(x), x))\n\nprint(answer)\n\n------------------------------------\n\nfrom collections import defaultdict\n\nn, k = map(int, stdin.readline().split())\n\nfeatures = defaultdict(int)\n\nfor i in range(n):\n    features = defaultdict(int, {int(j): 1 for j in stdin.readline().split()})\n\nanswer = \"\"\n\nfor j in range(k):\n    if answer[j] == \"0\":\n        for l in range(k):\n            if (j ^ features[l]) == 0:\n                answer = max(answer, str(l), key=lambda x: (len(x), x))\n\nprint(answer)\n\n------------------------------------\n\nfrom collections import defaultdict\n\nn, k = map(int, stdin.readline().split())\n\nfeatures = defaultdict(int)\n\nfor i in range(n):\n    features = defaultdict(int, {int(j): 1 for j in stdin.readline().split()})\n\nanswer = \"0\" * k\n\nfor j in range(k):\n    if answer[j] == \"0\":\n        for l in range(k):\n            if (j ^ features[l]) == 0:\n                answer = max(answer, str(l), key=lambda x: (len(x), x))\n\nprint(answer)\n\n------------------------------------\n\nfrom collections import defaultdict\n\nn, k = map(int, stdin.readline().split())\n\nfeatures = defaultdict(int)\n\nfor i in range(n):\n    features = defaultdict(int, {int(j): 1 for j in stdin.readline().split()})\n\nanswer = [0] * k\n\nfor j in range(k):\n    if answer[j] == 0:\n        for l in range(k):\n            if (j ^ features[l]) == 0:\n                answer[j] = max(answer[j], l)\n\nprint(\"\".join([str(answer[j]) for j in range(k)]))\n\n------------------------------------\n\nfrom collections import defaultdict\n\nn, k = map(int, stdin.readline().split())\n\nfeatures = defaultdict(int)\n\nfor i in range(n):\n    features = defaultdict(int, {int(j): 1 for j in stdin.readline().split()})\n\nanswer = [0] * k\n\nfor j in range(k):\n    if answer[j] == 0:\n        for l in range(k):\n            if (j ^ features[l]) == 0:\n                answer[j] = max(answer[j], l)\n\nprint(\"\".join([str(answer[j]) for j in range(k)]))\n\n------------------------------------\n\nfrom collections import defaultdict\n\nn, k = map(int, stdin.readline().split())\n\nfeatures = defaultdict(int)\n\nfor i in range(n):\n    features = defaultdict(int, {int(j): 1 for j in stdin.readline().split()})\n\nanswer = [0] * k\n\nfor j in range(k):\n    if answer[j] == 0:\n        for l in range(k):\n            if (j ^ features[l]) == 0:\n                answer[j] = max(answer[j], l)\n\nprint(\"\".join([str(answer[j]) for j in range(k)]))\n\n------------------------------------\n\nfrom collections import defaultdict\n\nn, k = map(int, stdin.readline().split())\n\nfeatures = defaultdict(int)\n\nfor i in range(n):\n    features = defaultdict(int, {int(j): 1 for j in stdin.readline().split()})\n\nanswer = [0] * k"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n01001\\n11100\\n10111\") == \"10110\"\n\"\"\""
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\n01001\\n11100\\n10111') == '00010'\nassert solution('2 3\\n10\\n11') == '110'\nassert solution('3 4\\n010\\n101\\n110') == '1010'\n\nn, k = [int(x) for x in stdin.readline().split(' ')]\ncharacters = [stdin.readline().strip() for _ in range(n)]\nfeatures = [len(set(char) - {'0'}) for char in characters]\nprint(*min(zip(features, characters), key=lambda x: x[0]))"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5\\n01001\\n11100\\n10111') == '10110'\n\"\"\""
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 5\n01001\n11100\n10111''') == '00010'\nassert solution('''3 5\n10111\n11100\n01001''') == '10010'\n\nassert solution('''5 5\n10000\n11110\n11010\n11110\n10111''') == '10010'\nassert solution('''5 5\n11110\n11010\n11110\n10111\n10000''') == '11110'\n\nassert solution('''5 5\n10111\n11110\n11010\n11110\n10000''') == '10000'\n"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5\\n01001\\n11100\\n10111') == '10110'\n"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n01001\\n11100\\n10111\") == \"1010\"\n\nimport fileinput\n\nn, k = [int(i) for i in fileinput.input()[0].split()]\n\nfeatures = {\n    \"0\": set(),\n    \"1\": set(),\n    \"2\": set(),\n    \"3\": set(),\n    \"4\": set(),\n    \"5\": set(),\n    \"6\": set(),\n    \"7\": set(),\n    \"8\": set(),\n    \"9\": set(),\n}\n\nfor i in range(n):\n    features[fileinput.input()[i]]\n\nstdin = []\nfor i in range(n):\n    stdin.append(input())"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5\\n01001\\n11100\\n10111') == '00010'\n"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n6 2\\n0 4\\n6 12\") == \"possible\"\n\"\"\"\n"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n6 2\\n0 4\\n6 12') == 'possible'\nassert solution('1\\n6 2\\n0 4\\n6 12\\n6 12\\n6 12\\n6 12\\n6 12') == 'impossible'\n\n\"\"\"\n\nimport re\nfrom itertools import chain\nfrom math import ceil\n"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n6 2\\n0 4\\n6 12\") == \"possible\"\nassert solution(\"1\\n6 2\\n0 4\\n6 12\\n0 3\\n6 12\\n0 3\") == \"impossible\"\nassert solution(\"1\\n6 2\\n0 4\\n6 12\\n0 3\\n6 12\\n0 3\\n6 12\") == \"impossible\"\nassert solution(\"1\\n6 2\\n0 4\\n6 12\\n0 3\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\") == \"impossible\"\nassert solution(\"1\\n6 2\\n0 4\\n6 12\\n0 3\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6 12\\n0 2\\n6 12\\n0 3\\n6"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n6 2\\n0 4\\n6 12\") == \"possible\"\n\"\"\"\n\nfrom collections import deque\nfrom itertools import combinations"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n6 2\\n0 4\\n6 12\") == \"possible\"\n\"\"\"\n\nimport sys\n\nnum_freq = int(sys.stdin.readline())\nfreq_info = []\nfor _ in range(num_freq):\n    freq_info.append(list(map(int, sys.stdin.readline().strip().split())))\n\nfor freq in freq_info:\n    if freq[1] > 1000:\n        print(\"impossible\")\n        sys.exit()\n\nfreq_status = {}\nfor freq in freq_info:\n    for t in range(freq[0], freq[0] + freq[1]):\n        freq_status[t] = freq_status.get(t, []) + [freq[0]]\n\nfor t in range(0, 1000):\n    if not freq_status.get(t, []):\n        continue\n    for idx in range(len(freq_status[t])):\n        if freq_status[t][idx] + freq_info[idx][0] > 1000:\n            print(\"impossible\")\n            sys.exit()\n        freq_status[t + freq_info[idx][0]].append(freq_info[idx][0])\n\nprint(\"possible\")\n"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2\\n0 4\\n6 12') == 'possible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n6 2\\n0 4\\n6 12\") == \"possible\"\n\"\"\"\n"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n0\\n1\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(string_to_stdin(test_cases[0][0])) == test_cases[0][1]\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n6 2\\n0 4\\n6 12\") == \"possible\"\nassert solution(\"1\\n6 2\\n0 4\\n6 12\\n6 0\\n0 4\") == \"possible\"\nassert solution(\"1\\n6 2\\n0 4\\n6 12\\n6 0\\n0 4\\n6 0\\n0 4\") == \"impossible\"\nassert solution(\"1\\n6 2\\n0 4\\n6 12\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n0 4\\n6 0\\n"
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\") == \"2\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n5 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1''') == '2'\n\nassert solution('''6\n1 0 1\n1 0 1\n0 0 1\n0 -1 1\n-1 0 1\n-1 0 1\n1 0 1''') == '0'\n\nassert solution('''5\n-3 1 1\n-1 3 1\n1 -1 1\n-2 2 2\n-2 -1 1\n-2 3 1\n3 -1 1\n-3 -3 1\n-3 -1 1\n2 -2 1\n2 2 2\n1 1 1\n1 3 1\n1 -3 1\n-1 -3 1\n-1 2 1\n-1 -2 1\n-2 -2 1\n-3 -2 1\n-3 3 1\n3 -2 1\n-3 -3 1\n2 -2 1\n2 -2 1\n-3 2 1\n-2 -3 1\n3 -3 1\n''') == '3'\n\nassert solution('''5\n-1 5 1\n2 -5 1\n3 -5 1\n-4 5 1\n2 -5 1\n''') == '2'\n\nassert solution('''6\n-1 5 1\n3 -5 1\n-3 5 1\n-2 5 1\n0 -5 1\n-1 5 1\n0 -5 1\n0 2 1\n-2 -5 1\n-1 5 1\n0 2 1\n''') == '0'"
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"0 0 0 1\") == \"1\"\nassert solution(\"1 2 3 0 0 0 0 1\") == \"4\"\nassert solution(\"1 2 3 1 2 3 1 2 3 0\") == \"5\"\nassert solution(\"1 2 3 0 0 0 1\") == \"0\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n5 0 1\\n10 0 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1') == 2\n\n\"\"\""
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n5 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n\"\"\"\n) == \"2\"\n\"\"\"\nTime Limit Exceeded\nYour program timed out.\n\"\"\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\") == \"2\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 0 1\\n0 0 1\\n0 1 1\\n-1 0 1\") == \"2\"\nassert solution(\"1\\n-1 0 1\") == \"1\"\nassert solution(\"2\\n-1 0 1\\n0 0 1\") == \"2\"\nassert solution(\"1\\n-1 0 1\") == \"2\"\nassert solution(\"1\\n0 0 1\") == \"1\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\") == \"2\"\nassert solution(\"2\\n5 0 1\\n5 -5 1\") == \"1\"\n\"\"\"\n\nn = int(input())\ncircles = [[float(x), float(y), float(r)] for _ in range(n) for x, y, r in [input().split()]]"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\") == \"Plot Error\\n3 Just A Dream\\nYes\"\n\nprint(solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\"))\n\n\"\"\""
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n') == 'Plot Error\\n3 Just A Dream\\nYes\\nPlot Error\\n'\n\n-----Explanation-----\nIn example 1: The first D line has a value of 4, so the 3rd event in the first scenario (in chronological order) is a \u201cbobby_died\u201d event. However, the next event in the first scenario (in chronological order) is a \u201cbusiness_as_usual\u201d event, so the scenario is not possible. The second D line has a value of 4, so the 3rd event in the second scenario (in chronological order) is a \u201cbobby_died\u201d event. However, the next event in the second scenario (in chronological order) is a \u201cbusiness_as_usual\u201d event, so the scenario is not possible.\n\nIn example 2: In the first scenario, the 3rd event is not a \u201cbobby_died\u201d event, so the scenario is possible. In the second scenario, the 3rd event is also not a \u201cbobby_died\u201d event, so the scenario is possible.\n'''\n"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(sample_input_1) == 'Yes'\nassert solution(sample_input_2) == 'No'\nassert solution(sample_input_3) == 'No'\nassert solution(sample_input_4) == '3 Just A Dream'\nassert solution(sample_input_5) == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n\") == \"Plot Error\\n3 Just A Dream\\nYes\\nPlot Error\\n\"\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\"\"\") == \"\"\"3 Just A Dream\nYes\nPlot Error\"\"\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n\") == \"Plot Error\\n3 Just A Dream\\nYes\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Plot Error\\n3 Just A Dream\\nYes\\nPlot Error'\nassert solution('''10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == '3 Just A Dream\\nYes'\nassert solution('''10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == '3 Just A Dream\\nYes'\n\n'''\n\uccab \uc904\uc758 \uc218\ub294 \ubb38\uc7a5\uc758 \uc218\n\ub450\ubc88 \uc904\ubd80\ud130\ub294 \ucc98\uc74c\ubd80\ud130 \ub05d\uae4c\uc9c0 \uc218\uc2dd\uc774 \uc8fc\uc5b4\uc9c4\ub2e4\n\uc218\uc2dd\uc740 \uc54c\ud30c\ubcb3\uc744 \uc0ac\uc6a9\ud558\uace0 _\ub97c \uc0ac\uc6a9\ud55c\ub2e4\n\uc218\uc2dd \uc0ac\uc774\uc5d0\ub294 \uc904\ubc14\uafc8\uc774 \ub4e4\uc5b4\uac04\ub2e4\n\n\uc218\uc2dd\uc774 E\uc778\uacbd\uc6b0\ub294 \ubb38\uc7a5\uc758 \ub9c8\uc9c0\ub9c9\uc5d0 \uc8fc\uc5b4\uc9c4\ub2e4\nE\ub294 \uc774\ubbf8 \ubc1c\uc0dd\ud588\ub358 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4\n\nD\ub294 \uc55e\uc5d0 \ubc1c\uc0dd\ud55c \uc218\uc2dd\uc774 \uc8fc\uc5b4\uc9c4\ub2e4\nD\ub294 \uc774\ubbf8 \ubc1c\uc0dd\ud55c \uac83\uc73c\ub85c \uc778\uc2dd\ud558\ub294\ub370 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc558\ub358 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4\n\nS\ub294 \uc218\uc2dd\uc774 \uc8fc\uc5b4\uc9c4\ub2e4\nS\ub294 \uc8fc\uc5b4\uc9c0\ub294 \uc218\uc2dd\uc744 \uc758\ubbf8\ud55c\ub2e4\n\uc218\uc2dd\uc758 \uc55e\uc5d0 \uc5b8\uae09\ub418\uc9c0 \uc54a\uc740!\ub294 \uc544\uc9c1 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc740 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4\n\n\uc608\uc2dc\uc5d0\uc11c\ub294 \ub450\ubc88\uc9f8 \uc904\uc5d0\uc11c 2\ubc88\uc9f8\uc904\uc5d0\uc11c \uc138\ubc88\uc9f8\uc904\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 \uac83\uc740 \uc804\uccb4 \uc2dc\ud589\uc5d0\uc11c \uc544\ubb34\uac83\ub3c4 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc558\ub2e4\ub294 \ub9d0\uc774\ub2e4\n\uc138\ubc88\uc9f8\uc904\uc740 \uccab\ubc88\uc9f8 \ubb38\uc7a5\uc758 \uacb0\uacfc\uc5d0 \uc131\ub9bd\ud558\ub294 \uc218\uc2dd\uc774 \ub4e4\uc5b4\uc788\ub2e4\n\uadf8\ub9ac\uace0 \ufffd"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\") == \"Plot Error\\n3 Just A Dream\\nYes\"\n\n\"\"\"\n\nimport re\n\nfrom collections import defaultdict"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(example1) == 'Yes'\nassert solution(example2) == '3 Just A Dream'\nassert solution(example3) == 'No'\nassert solution(example4) == 'No'\nassert solution(example5) == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n\") == \"Plot Error\\n3 Just A Dream\\nYes\"\nprint(solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n\"))\n\nSample Input 2:\n10\nE busy\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies busy\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\nSample Output 2:\nNo\n1 Just A Dream\nYes\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('24 5 8 7') == '+------------------------+\\n|exercitation ullamco    |^\\n|laboris nisi ut aliquip    |\\n|ex ea commodo consequat    |X\\n|Duis aute irure dolor in    |\\n|reprehenderit in        |v\\n+------------------------+'\n\n\"\"\"\n\nfrom collections import deque\nimport re"
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"24 5 8 7\") == \"\"\"\nLorem ipsum dolor sit amet consectetur adipisicing elit\nsed do eiusmod tempor incididunt ut labore et dolore\nmagna aliqua Ut enim ad minim veniam quis nostrud\nexercitation ullamco laboris nisi ut aliquip ex ea\ncommodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore\neu fugiat nulla pariatur Excepteur sint occaecat\ncupidatat non proident sunt in culpa qui officia\ndeserunt mollit anim id est laborum\n\"\"\"\n\nassert solution(\"24 5 8 7\") == \"\"\"\n+------------------------+\n|exercitation ullamco    |\n|laboris nisi ut aliquip |\n|ex ea commodo consequat |\n|Duis aute irure dolor in|\n|reprehenderit in        |\n+------------------------+\n\"\"\"\n\"\"\"\nSUBTRACT H FROM L GIVING DENOMINATOR.\nSUBTRACT 3 FROM H.\nMULTIPLY F BY H GIVING NUMERATOR.\nDIVIDE NUMERATOR BY DENOMINATOR GIVING T REMAINDER Left-Over.\n\"\"\""
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('24 5 8 7') == 'Lorem ipsum dolor sit amet consectetur adipisicing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur Excepteur sint occaecat cupidatat non proident sunt in culpa qui officia deserunt mollit anim id est laborum'\nassert solution('4 5 8 7') == 'Lorem ipsum dolor sit amet consectetur adipisicing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur Excepteur sint occaecat cupidatat non proident sunt in culpa qui officia deserunt mollit anim id est laborum'\n\"\"\""
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"24 5 8 7\") == \"\"\"+------------------------+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n|Duis aute irure dolor in| |\n|reprehenderit in        |v|\n+------------------------+\"\"\"\nassert solution(\"25 5 8 7\") == \"\"\"+------------------------+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n+------------------------+\"\"\"\nassert solution(\"25 5 8 7\") == \"\"\"+------------------------+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n+------------------------+\"\"\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('24 5 8 7\\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur Excepteur sint occaecat cupidatat non proident sunt in culpa qui officia deserunt mollit anim id est laborum') == '+------------------------+\\n|exercitation ullamco    |\\n|laboris nisi ut aliquip    |\\n|ex ea commodo consequat    |\\n|Duis aute irure dolor in    |\\n|reprehenderit in        |\\n+------------------------+'\n"
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"24 5 8 7\") == \"+-----------------------------------------------+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip    |X|\\n|ex ea commodo consequat    | |\\n|Duis aute irure dolor in        |v|\\n+-----------------------------------------------+\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"24 5 8 7\") == \"Lorem ipsum dolor sit amet consectetur adipisicing elit sed do\\neiusmod tempor incididunt ut labore et dolore magna aliqua\\nUt enim ad minim veniam quis nostrud exercitation ullamco\\nlaboris nisi ut aliquip ex ea commodo consequat\\nDuis aute irure dolor in reprehenderit in\\nvoluptate velit esse cillum dolore eu fugiat nulla\\npariatur Excepteur sint occaecat cupidatat non proident\\nsunt in culpa qui officia deserunt mollit anim id est\\nlaborum\")\nassert solution(\"3 2 4 3\") == \"Exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat\\nDuis aute irure dolor in reprehenderit in\\nvoluptate velit esse cillum dolore eu fugiat nulla\\npariatur Excepteur sint occaecat cupidatat non proident\\nsunt in culpa qui officia deserunt mollit anim id est\\nlaborum\"\n\"\"\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n----\n"
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('24 5 8 7') == '+-------+-----+-+---\\n|exercitation| | |\\n|ullamco    |X| |\\n|laboris nisi| | |\\n|ut aliquip ex| | |\\n|ea commodo  | | |\\n|duis aute ir|v| |\\n|rure dolor in| | |\\n+-------+-----+-+---'\n\n\"\"\"\n\nW, H, F, N = map(int, stdin.split(' '))\n"
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"24 5 8 7\") == \"+------------------------+---------------+\\n|exercitation ullamco    |^             |\\n|laboris nisi ut aliquip | X             |\\n|ex ea commodo consequat |             |\\n|Duis aute irure dolor in| v             |\\n+------------------------+---------------+\"\n\"\"\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0''') == 'possible'\nassert solution('''4 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0''') == 'impossible'\nassert solution('''4 10\n2 1 0 2\n1 3 2 0\n0 3 1 3\n3 0 1 3''') == 'possible'\nassert solution('''4 10\n1 3 2 0\n0 3 1 3\n2 1 0 2\n3 0 1 3''') == 'impossible'\nassert solution('''4 10\n1 3 2 0\n0 3 1 3\n3 0 1 3\n2 1 0 2''') == 'possible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0''') == 'possible'\n\n'''\n\n----SOLUTION----\n\n'''"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0''') == 'possible'\n\nassert solution('''4 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0''') == 'impossible'\n'''\n\nfrom collections import deque"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'impossible'\nassert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\nassert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'impossible'\nassert solution('4 10\\n0 1 2 3\\n1 0 1 2\\n2 3 0 1\\n3 0 1 3') == 'possible'\nassert solution('4 10\\n0 1 2 3\\n1 0 1 2\\n2 3 0 1\\n3 0 1 3') == 'impossible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\nassert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'impossible'\nassert solution('2 10\\n0 1\\n1 0') == 'impossible'\nassert solution('3 10\\n0 1\\n1 2\\n2 0') == 'possible'\nassert solution('2 10\\n0 1\\n1 2') == 'impossible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\nassert solution('4 10\\n1 3 2 0\\n3 0 1 3\\n2 1 0 2\\n0 3 2 1') == 'impossible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\") == \"possible\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\n\"\"\"\n\nN, L = list(map(int, input().split(' ')))\n\nd = [list(map(int, input().split(' '))) for _ in range(N)]\n\nd = {(i, j): min(d[i][k] + d[k][j] for k in range(N) if i!= k) for i in range(N) for j in range(i)}\n\nd = {i: d[i, i] for i in range(N)}\n\nprint(\"possible\" if sum(d.values()) == L else \"impossible\")\n"
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10\") == \"possible\"\n\"\"\""
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 1\\n1\\n2') == '1'"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\\n1\\n2\") == \"1.00000000\"\n\n------------\nSample Input:\n7 2 7\n1 1 1 1 1 1 2\n1 2 2 2 2 2 3\nSample Output:\n2.8333333\n"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1\\n1\\n2\") == \"1.00000000\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1\\n1\\n2\\n\") == \"1\"\nprint(solution(\"2 1 1\\n1\\n2\\n\"))\n\n-----Explanation-----\nThe first line of the input tells us that there are $2$ balls. The second line of the input tells us that Cesar will only pick number $1$ in the first round, so he wins.\n\"\"\"\n\n\"\"\"\nUsing the probability that a number in the box will be selected, we can calculate the number of rounds until the game is over.\n\"\"\"\n\nfrom math import comb"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\\n1\\n2\") == \"1\"\n\"\"\""
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 1\\n1\\n2') == '1.0'\n"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\") == \"1.00000000\"\nassert solution(\"5 5 10\") == \"1.0\"\nassert solution(\"3 3 3\") == \"0.666666667\"\nassert solution(\"10 50 10\") == \"0.833333333\"\nassert solution(\"3 5 3\") == \"0.583333333\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1\\n1\\n2\") == 1\n\n---Problem 2 ---\nThe number of patterns that match the target word is equal to the number of different ways you can construct the target word by rearranging the letters of the alphabet.\n\nFor example, the number of patterns that match the target word \"ANAGRAM\" is equal to the number of different ways you can construct the word \"GRAHAM\" (capital letters are not important):\n\n- \"ANAGRAM\"\n- \"GRAHAM\"\n- \"RAMAN\"\n- \"AENGRA\"\n- \"AMGRAH\"\n- \"GHAMRA\"\n- \"RAHAMG\"\n\nIf the target word consists of $n$ letters and there are $r$ different letters, then there are $r^n$ possible target words.\n\nGiven the target word and the number $n$ of letters in the alphabet, return the number of patterns that match the target word.\n\n-----Task-----\nGiven the target word and the number $n$ of letters in the alphabet, find the number of patterns that match the target word.\n\n-----Input-----\nThe first line of the input consists of two space separated integers: $n$, $n$ is the number of letters in the alphabet, and $t$ is the target word.\n\n-----Constraints-----\n\n$n \\leq 10000$\n\n$t \\leq n^5$\n\nThe target word consists of lowercase English letters only.\n\n-----Explanation for Sample Input 1-----\nThe alphabet is {a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z}.\n\nThe target word is \"ANAGRAM\".\n\nThe number of patterns that match the target word is equal to the number of different ways you can construct the word \"GRAHAM\" (capital letters are not important):\n\n- \"ANAGRAM\"\n- \"GRAHAM\"\n- \"RAMAN\"\n- \"AENGRA\"\n- \"AMGRAH\"\n- \"GHAMRA\"\n- \"RAHAMG\"\n\nIf the target word consists of $n$ letters and there are $r$ different letters, then there are $r^n$ possible target words.\n\nIn this case the number of patterns that match the target word is equal to $r^n$.\n\nSample Input:\n3\nANAGRAM\nSample Output:\n2\n"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 1\\n1\\n2\\n') == '1.00000000'\n"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 1\\n1\\n2') == '1'\nassert solution('2 1 1\\n2\\n1') == '1'\nassert solution('2 1 1\\n2\\n2') == '0'\nassert solution('2 1 1\\n2\\n1') == '1'\n\n\"\"\""
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\nimport sys"
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 3\\n1 1\\n2 4') == '1\\n1\\n3\\n0'\nassert solution('5\\n4 4 4 4 2\\n3 3\\n1 1\\n2 4') == '2\\n2\\n1\\n0'\nassert solution('5\\n3 3 3 3 2\\n3 3\\n1 1\\n2 4') == '2\\n2\\n1\\n0'\nassert solution('5\\n3 3 3 3 2\\n3 3\\n1 1\\n2 4') == '2\\n2\\n1\\n0'\n\n\"\"\""
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 3 3 2\") == \"2\"\nassert solution(\"5 1 3 2 3 3 2 4 5 1 2 1 2 1 3 1 1 2 2 1 1 4 5 5 5 4\") == \"4\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5 4 3 3 2') == '2'\nassert solution('4\\n5 4 3 3 2\\n1 2\\n1 1\\n2 4\\n') == '3'\n\"\"\"\n\n\"\"\"\nfrom collections import Counter\n\nN = int(input())\narr = list(map(int, input().split()))\n\nq = int(input())\nqueries = [tuple(map(int, input().split())) for _ in range(q)]\n\nmax_count = 0\ncnt_dict = Counter(arr)\n\nfor l, r in queries:\n    if l in cnt_dict:\n        max_count = max(max_count, cnt_dict[l])\n    if r+1 in cnt_dict:\n        max_count = max(max_count, cnt_dict[r+1])\n    if l in cnt_dict:\n        cnt_dict[l] -= 1\n    if r+1 in cnt_dict:\n        cnt_dict[r+1] -= 1\n    \nprint(max_count)\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\") == \"2\\n1\\n3\"\nprint('Hooray!')\n\nimport os\nimport io\nimport sys"
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4 1 1 2') == '2'\n"
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2 1\") == \"2 1 1 1\"\nassert solution(\"2 1 4\") == \"1 1 1 1\"\nassert solution(\"5 4 3 3 2\") == \"2 1 1 1 1\"\n\n\"\"\""
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n') == '2\\n1\\n3\\n'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n') == '2\\n1\\n3\\n'\nprint('The local tests are done. Click on \"Check\" for more details.')"
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n') == '2\\n1\\n3\\n'\n\"\"\"\n\nfrom collections import defaultdict\nfrom bisect import bisect_left\n"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n0 1\\n1 2\\n0 2\") == \"never meet\"\nassert solution(\"2 3\\n0 1\\n1 2\\n0 2\") == \"never meet\"\nassert solution(\"3 1\\n0 1\\n2 0\\n1 0\") == \"1\"\nassert solution(\"3 1\\n0 1\\n2 0\\n1 0\") == \"1\"\nassert solution(\"3 2\\n0 1\\n1 2\\n0 2\") == \"never meet\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n0 1\\n1 2\\n0 2\") == \"1\"\nassert solution(\"3 2\\n0 1\\n2 1\\n0 2\") == \"never meet\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n0 1\\n1 2\\n0 2\") == \"never meet\"\nassert solution(\"3 2\\n0 1\\n1 2\\n0 2\\n0 1\") == \"never meet\"\n\"\"\"\nfrom queue import Queue\nfrom random import randint, random\n\nassert solution(\"3 2\\n0 1\\n1 2\\n0 2\") == \"never meet\"\nassert solution(\"3 2\\n0 1\\n1 2\\n0 2\\n0 1\") == \"never meet\"\n\"\"\"\n\nT = int(stdin.readline())\nfor _ in range(T):\n    n, m = [int(x) for x in stdin.readline().strip().split()]\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    alice, bob = arr[0], arr[1]\n\n    # Build the adjacency list\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = [int(x) for x in stdin.readline().strip().split()]\n        graph[u].append(v)\n        graph[v].append(u)\n\n    # BFS\n    q = Queue()\n    q.put((alice, bob))\n    visited = set()\n    visited.add((alice, bob))\n    while not q.empty():\n        u, v = q.get()\n        for v1 in graph[u]:\n            if (v, v1) not in visited:\n                visited.add((v, v1))\n                q.put((v, v1))\n\n    # Check if we ever met\n    if (alice, bob) in visited:\n        print(\"never meet\")\n    else:\n        print((visited.__len__() - 1) * 2)\n"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n0 1\\n0 2') == '1'\nassert solution('2 2\\n0 1\\n1 2') == 'never meet'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n0 1\\n1 2\\n0 2') == 'never meet'\nassert solution('3 2\\n0 1\\n1 2\\n0 2\\n0 2') == 'never meet'\n\nfrom math import factorial\nimport copy"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n0 1\\n1 2\\n0 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n0 1\\n1 2\\n0 2\") == \"1\"\n\"\"\"\n\nfrom operator import itemgetter\nimport itertools\nimport math\n"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1') == 'never meet'\nassert solution('1 2') == 'never meet'\nassert solution('0 1') == 'never meet'\nassert solution('0 2') == 'never meet'\n'''\n\nfrom random import randint\nfrom math import sqrt"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n0 1\\n1 2\\n0 2') == 'never meet'\n\"\"\"\n\nn, m = map(int, stdin.readline().strip().split())\nneighbours = [[] for _ in range(n)]\nfor _ in range(m):\n    u, v = map(int, stdin.readline().strip().split())\n    neighbours[u].append(v)\n    neighbours[v].append(u)\n\nalice, bob = map(int, stdin.readline().strip().split())\n\nans = 0\nvisited = [False] * n\nqueue = [alice]\nwhile queue:\n    temp = queue.pop(0)\n    visited[temp] = True\n    if visited[bob]:\n        break\n    for next in neighbours[temp]:\n        if not visited[next]:\n            queue.append(next)\n    ans += 1"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n0 1\\n1 2\\n0 2\") == \"never meet\"\nassert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n0 2\\n0 1\") == \"never meet\"\nassert solution(\"3 2\\n0 1\\n0 2\") == \"1\"\nassert solution(\"3 2\\n0 1\\n1 2\") == \"never meet\"\nassert solution(\"5 5\\n3 5\\n4 5\\n1 5\\n2 5\\n0 2\\n0 4\\n0 3\\n1 4\") == \"never meet\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4 2\") == \"14500000001\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4 2\\n') == '14500000001'\nassert solution('1 1 1\\n') == '11'\nassert solution('1 5 5\\n') == '11'\nassert solution('1 100 1\\n') == '11'\nassert solution('1 100 100\\n') == '11'\n\"\"\"\n\nfrom collections import defaultdict\nfrom fractions import gcd\nfrom functools import reduce\nfrom math import gcd\nimport math\n"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4 2\\n') == '14500000001'\n"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"5 4 2\"\n) == '14500000001'\nassert solution(\n\"7 10 2\"\n) == '259918'\nassert solution(\n\"11 21 3\"\n) == '2855'\n\"\"\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 2\") == \"14500000001\"\nassert solution(\"1 3 2\") == \"11\"\nassert solution(\"1 0 1\") == \"11\"\n\"\"\"\n\nR, C, K = map(int, input().split())"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4 2\") == \"14500000001\"\n\"\"\""
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4 2\\n') == '14500000001'\n\"\"\"\n\nfrom fractions import Fraction"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 1') == '1', 'Error'\nassert solution('3 5 3') == '0', 'Error'\nassert solution('7 5 1') == '1', 'Error'\nassert solution('4 6 5') == '1', 'Error'\nassert solution('5 5 3') == '1', 'Error'\n"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4 2\\n') == '14500000001'\n"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4 2\\n') == '14500000001'"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 4\\n3 7\\n1 6\\n2 6') == '0\\n1\\n1\\n2'\n"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 4\\n3 7\\n1 6\\n2 6\") == \"0\\n1\\n1\\n2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 4\\n3 7\\n1 6\\n2 6\") == \"0\\n1\\n1\\n2\"\n\"\"\"\nfrom typing import List, Tuple, Set"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 4\\n3 7\\n1 6\\n2 6') == '0\\n1\\n1\\n2'\n"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 4\\n3 7\\n1 6\\n2 6') == '0\\n1\\n1\\n2'\n"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n1 4\n3 7\n1 6\n2 6''') == '''0\n1\n1\n2'''\n\nassert solution('''4\n4 6\n4 6\n4 6\n4 6''') == '''0\n0\n0\n0'''\n\nassert solution('''4\n1 4\n2 7\n1 5\n2 7''') == '''0\n0\n1\n2'''\n\nassert solution('''4\n1 2\n3 4\n1 3\n2 4''') == '''0\n0\n0\n1'''\n"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\nassert solution('1 2\\n3 4') == ''\nassert solution('1 2\\n3 4\\n5 6') == ''\nassert solution('1 2\\n3 4\\n5 6\\n7 8') == ''\n"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 4\\n3 7\\n1 6\\n2 6\") == \"0\\n1\\n1\\n2\""
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 4\\n3 7\\n1 6\\n2 6\") == '0\\n1\\n1\\n2'\nassert solution(\"5\\n2 3\\n5 6\\n1 7\\n4 8\\n3 9\") == '2\\n2\\n1\\n1\\n0'\n\n----Problem----\nIn a far away planet, strange plants with two stems can be found. Every plant on the planet can be described by three numbers: the x-coordinates L and R of the two stems, and the height H at which the stems are connected. The following image depicts a plant with L=2, R=5 and H=4.\n\nEvery day a new plant grows on the planet. The plant that grows on day 1 is of height 1, and every subsequent plant is one higher than the previous one.\n\nWhen a stem of a new plant intersects the horizontal segment of another plant, a small flower grows (if one was not there already). If segments merely touch in a point, a flower will not grow there.\n\nThe following images are a visualization of the first sample input. \u2003  \u2003  \u2003 \n\nWrite a program that, given the coordinates of all plants, calculates the number of new flowers every day.\n\n-----Input-----\nThe first line contains an integer N, the number of days.\n\nThe following N lines describe the coordinates of the plants. Each line contains two integers L and R, the x-coordinates of the two stems, and the height H of the plant, respectively.\n\n-----Output-----\nOutput N integers, the number of new flowers after each day.\n\n-----Examples-----\nSample Input:\n4\n1 4\n3 7\n1 6\n2 6\nSample Output:\n0\n1\n1\n2\n\n-----Solution------\n'''\n"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 4\\n3 7\\n1 6\\n2 6\") == \"0\\n1\\n1\\n2\"\nprint(\"Test pass.\")\n\n----\n\nThe first line contains an integer $N$ ($1 \\le N \\le 100000$), the number of days.\n\nEach of the following $N$ lines contains two integers $L$ and $R$ ($1 \\le L < R \\le 100000$). The $i$\u2019th of these lines describes the coordinates of the plant that grows on day $i$.\n\nWrite 5 lines of code to test the correctness of solution:\nOn a faraway planet, strange plants with two stems can be found. Every plant on the planet can be described by three numbers: the $x$-coordinates $L$ and $R$ of the two stems, and the height $H$ at which the stems are connected. The following image depicts a plant with $L=2$, $R=5$ and $H=4$.\n\nEvery day a new plant grows on the planet. The plant that grows on day $1$ is of height $1$, and every subsequent plant is one higher than the previous one.\n\nWhen a stem of a new plant intersects the horizontal segment of another plant, a small flower grows (if one was not there already). If segments merely touch in a point, a flower will not grow there.\n\nThe following images are a visualization of the first sample input. \u2003  \u2003  \u2003 \n\nWrite a program that, given the coordinates of all plants, calculates the number of new flower every day.\n\n-----Input-----\nThe first line contains an integer $N$ ($1 \\le N \\le 100000$), the number of days.\n\nEach of the following $N$ lines contains two integers $L$ and $R$ ($1 \\le L < R \\le 100000$). The $i$\u2019th of these lines describes the coordinates of the plant that grows on day $i$.\n\n-----Output-----\nOutput $N$ lines, the number of new flowers after each plant grows.\n\n-----Examples-----\nSample Input:\n4\n1 4\n3 7\n1 6\n2 6\nSample Output:\n0\n1\n1\n2\n\n----\n\nThe first line contains an integer $N$ ($1 \\le N \\le 100000$), the number of days.\n\nEach of the following $N$ lines contains two integers $L$ and $R$ ($1 \\le L < R \\le 100000$). The $i$\u2019th of these lines describes the coordinates of the plant that grows on day $i$.\n\nWrite 5 lines of code to test the correctness of solution:\nOn a faraway planet, strange plants with two stems can be found. Every plant on the planet can be described by three numbers: the $x$-coordinates $L$ and $R$ of the two stems, and the height $H$ at which the stems are connected. The following image depicts a plant with $L=2$, $R=5$ and $H=4$.\n\nEvery day a new plant grows on the planet. The plant that grows on day $1$ is of height $1$, and every subsequent plant is one higher than the previous one.\n\nWhen a stem of a new plant intersects the horizontal segment of another plant, a small flower grows (if one was not there already). If segments merely touch in a point, a flower will not grow there.\n\nThe following images are a visualization of the first sample input. \u2003  \u2003  \u2003 \n\nWrite a program that, given the coordinates of all plants, calculates the number of new flower every day.\n\n-----Input-----\nThe first line contains an integer $N$ ($1 \\le N \\le 100000$), the number of days.\n\nEach of the following $N$ lines contains two integers $L$ and $R$ ($1 \\le L < R \\le 100000$). The $i$\u2019th of these lines describes the coordinates of the plant that grows on day $i$.\n\n-----Output-----\nOutput $N$ lines, the number of new flowers after each plant grows.\n\n-----Examples-----\nSample Input:\n4\n1 4\n3 7\n1 6\n2 6\nSample Output:\n0\n1\n1\n2\n\n----\n\nThe first line contains an integer $N$ ($1 \\le N \\le 100000$), the number of days.\n\nEach of the following $N$ lines contains two integers $L$ and $R$ ($1 \\le L < R \\le 100000$). The $i$\u2019th of these lines describes the coordinates of the plant that grows on day $i$.\n\nWrite 5 lines of code to test the correctness of solution:\nOn a faraway planet, strange plants with two stems can be found. Every plant on the planet can be described by three numbers: the $x$-coordinates $L$ and $R$ of the two stems, and the height $H$ at which the stems are connected. The following image depicts a plant with $L=2$, $R=5$ and $H=4$.\n\nEvery day a new plant grows on the planet. The plant that grows on day $1$ is of height $1$, and every subsequent plant is one higher than the previous one.\n\nWhen a stem of a new plant intersects the horizontal segment of another plant, a small flower grows (if one was not there already). If segments merely touch in a point, a flower will not grow there.\n\nThe following images are a visualization of the first sample input. \u2003  \u2003  \u2003 \n\nWrite a program that, given the coordinates of all plants, calculates the number of new flower every day.\n\n-----Input-----\nThe first line contains an integer $N$ ($1 \\le N \\le 100000$), the number of days.\n\nEach of the following $N$ lines contains two integers $L$ and $R$ ($1 \\le L < R \\le 100000$). The $i$\u2019th of these lines describes the coordinates of the plant that grows on day $i$.\n\n-----Output-----\nOutput $N$ lines, the number of new flowers after each plant grows.\n\n-----Examples-----\nSample Input:\n4\n1 4\n3 7\n1 6\n2 6\nSample Output:\n0\n1\n1\n2\n\n----\n\nThe first line contains an integer $N$ ($1 \\le N \\le 100000$), the number of days.\n\nEach of the following $N$ lines contains two integers $L$ and $R$ ($1 \\le L < R \\le 100000$). The $i$\u2019th of these lines describes the coordinates of the plant that grows on day $i$.\n\nWrite 5 lines of code to test the correctness of solution:\nOn a faraway planet, strange plants with two stems can be found. Every plant on the planet can be described by three numbers: the $x$-coordinates $L$ and $R$ of the two stems, and the height $H$ at which the stems are connected. The following image depicts a plant with $L=2$, $R=5$ and $H=4$.\n\nEvery day a new plant grows on the planet. The plant that grows on day $1$ is of height $1$, and every subsequent plant is one higher than the previous one.\n\nWhen a stem of a new plant intersects the horizontal segment of another plant, a small flower grows (if one was not there already"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300') == '3100'\n"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n1 1') == '0'\nassert solution('1\\n2 3') == '2'\nassert solution('1\\n1 1\\n1 2 3') == '2'\nassert solution('1\\n1 1\\n2 3') == '2'\n"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\\n\") == \"3100\"\n\"\"\"\n\n\"\"\"\nThere are N airports in total, numbered from 1 to N. \n\nThe price of the flight from airport a to b is given by a[b] (if a[b] is undefined, it means there is no flight from a to b).\n\nYou are also given R pairs of flights (a, b) and (b, a), which means that you can go from a to b and from b to a, \nbut not both ways. You are also given F additional pairs of flights (a, b), (b, c) and (c, a) (you can go from a to b, \nfrom b to c and from c to a, but not both ways).\n\nYour task is to calculate the minimum price of a flight from the city with number 1 to the city with number N. \nNote that you can return to the starting city.\n\nInput\nThe first line contains an integer T (1 \\leq T \\leq 1000), the number of test cases.\n\nThe next T lines each contain an integer N (1 \\leq N \\leq 15) and a sequence of R integers a1, a2,..., aR (1 \\leq a_i \\leq N, 0 \\leq a_i \\leq a_{i+1}) separated by a single space.\n\nThe last line contains an integer F (1 \\leq F \\leq 250) and a sequence of F pairs of integers a1, a2,..., aF (1 \\leq a_i \\leq N, 1 \\leq a_i+1 \\leq N, 0 \\leq a_i, a_i+1 \\leq a_{i+1} \\leq a_i+2 \\leq N, 0 \\leq a_{i+1}, a_{i+2} \\leq N), where a1, a2,..., aF are unique.\n\nOutput\nFor each test case print the minimum price of a flight from the city with number 1 to the city with number N.\n\nExample\nInput:\n2\n2\n2 1 1000\n2 3 1000\n4\n1 4 300\n3 5 300\n2 4 300\n4 5 300\n4\n1 4 300\n3 5 300\n2 4 300\n4 5 300\n2 3 1000\n3 1 1000\n4 1 1000\nSample Output:\n1000\n3100\n\"\"\"\n\nT = int(input())\nfor test in range(1, T+1):\n    N, R = [int(x) for x in input().split()]\n    airport = {}\n    airports = {}\n    for i in range(R):\n        a, b, c = [int(x) for x in input().split()]\n        if a not in airport:\n            airport[a] = c\n            airports[a] = a\n        else:\n            airport[a] = min(c, airport[a])\n        airport[b] = c\n        airports[b] = b\n    F = int(input())\n    for i in range(F):\n        a, b = [int(x) for x in input().split()]\n        airport[a] = min(airport[a], b)\n        airport[b] = min(airport[b], a)\n        airports[a] = a\n        airports[b] = b\n    airport[1] = 0\n    airport[N] = 0\n    airport[airports[1]] = 0\n    airport[airports[N]] = 0\n    q = [[1, N]]\n    while q:\n        airport_a, airport_b = q.pop(0)\n        if airport_a == 1 and airport_b == N:\n            break\n        for a in range(airport_a, airport_b):\n            if airport[a]!= 0:\n                if airport[a] + airport[a+1] < airport[airport_b]:\n                    q.append([a, a+1])\n                    airport[a+1] = airport[a] + airport[a+1]\n                    airport[a] = 0\n                    airport[a+1] = 0\n    print(airport[1])\n"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300''') == '3100'\n\n'''\n@Time: O(R + NlogR + NlogN)\n@Space: O(1)\n@Given n cities and m flight connections, find the minimum cost to travel from city 1 to city 2. Each flight connection is associated with a cost.\nWe are able to travel from any city to any other city and the cost of travel from city 1 to city 2 is the sum of costs of all the flight connections between city 1 and city 2.\n\nExample:\n1 -> 2 -> 3 -> 5\n1 -> 2 -> 4 -> 5\n1 -> 3 -> 4 -> 5\n1 -> 3 -> 5\n3 -> 4 -> 5\n2 -> 4 -> 5\nThe minimum cost to travel from city 1 to city 2 is obtained by travelling the following paths:\n1 -> 2 -> 3 -> 4 -> 5 -> 2 -> 4 -> 5\n1 -> 2 -> 3 -> 5 -> 4 -> 5\n1 -> 2 -> 3 -> 4 -> 5\n\nSolution:\n1. BFS\n2. Union Find\n3. Dijkstra\n\n'''\n\nfrom collections import deque\n\nclass Solution:\n    def minimumCostToConnectAllCities(self, n: int, m: int, connections: List[List[int]]) -> int:\n        # BFS solution\n        # Time Complexity: O(N)\n        # Space Complexity: O(N)\n        if n == 1: return 0\n        connections.sort(key=lambda x: x[2])\n        parent = [i for i in range(n)]\n        self.cost = 0\n        for city1, city2, cost in connections:\n            self.cost += cost\n            # find root for city1 and city2\n            city1_root, city2_root = self.find(parent, city1), self.find(parent, city2)\n            # merge two roots\n            if city1_root!= city2_root:\n                self.merge(parent, city1_root, city2_root)\n        return self.cost\n\n\n    def find(self, parent, city):\n        while parent[city]!= city:\n            city = parent[city]\n        return city\n\n    def merge(self, parent, city1, city2):\n        parent[city1] = city2\n"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1, 2, 3) == 6\n\n\"\"\"\n\nimport sys\nimport numpy as np\n\nfrom typing import Union\nfrom itertools import combinations"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == '3100'\n\"\"\""
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\n\"\"\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300') == '3100'\n\"\"\"\n\n\nimport sys\n\ninput_str = sys.stdin.read()\ninput_list = list(map(int, input_str.split()))\n\nn_airports = input_list[0]\nn_reviews = input_list[1]\n\nairport_dict = {\n    '1': 0\n}\n\nfor i in range(1, n_airports + 1):\n    airport_dict[str(i)] = 0\n\nfor _ in range(n_reviews):\n    origin_airport, destination_airport, price = map(int, input().split())\n    airport_dict[str(origin_airport)] += price\n    airport_dict[str(destination_airport)] += price\n\nreview_list = [int(input()) for _ in range(input_list[-1])]\nreview_price = 0\n\nfor i in review_list:\n    if i in airport_dict:\n        review_price += airport_dict[str(i)]\n\nprint(review_price)\n"
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\""
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13\") == \"5.25\"\n\"\"\"\n\nh, w = [int(x) for x in input().split()]\na, b = [int(x) for x in input().split()]\nn = [int(x) for x in input().split()]"
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 2\n2 5\n2 9\n7 13''') == '5.25'\nprint('Test pass.')\n\n-------------------------------\n\nCode:\nimport ast"
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 8\\n6 5\\n2 5\\n2 9') == '5.250000000'\n\"\"\"\nimport math"
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == expected_result\nprint(solution(stdin))"
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''5 4\n1 8\n6 5\n2 5\n2 9''') == '5.250000000'"
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"4 2\n1 8\n6 5\n2 5\n2 9\n7 13\"\"\") == \"5.250000000\"\n\n\"\"\"\n\n\"\"\"\nimport math\n\nw, h = [int(i) for i in input().split()]\na, b = [int(i) for i in input().split()]\n\nt = math.ceil(w/a) * math.ceil(h/b)\nprint(t)\n\n\"\"\"\n\nimport math\n\nh, w = [int(i) for i in input().split()]\na, b = [int(i) for i in input().split()]\n\nt = math.ceil(w/a) * math.ceil(h/b)\nprint(t)\n"
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 8\\n6 5\\n2 5\\n2 9') == '5.25'\n\"\"\"\n\nimport math\n\nn, m = map(int, input().split())\n\narea = []\nfor _ in range(n):\n    area.append(list(map(int, input().split())))\n\na, b = map(int, input().split())\n\nans = 0\nfor i in range(n):\n    for j in range(m):\n        ans += math.ceil(area[i][j] * a * b / m / n)\nprint(ans)\n"
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open(\"sample/4.in\", \"r\").read()) == \"5.25\"\n\"\"\"\nimport math"
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13\") == '5.25'\nprint(\"Test finished.\")\n"
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13') == '5.250000000'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2 3 1 2 1 1\") == '7\\n2\\n2\\n0\\n4'\nassert solution(\"5\\n1 3 1 2 3\") == '5\\n2\\n2\\n0\\n4'\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == '8\\n2\\n2\\n0\\n4'\nassert solution(\"2\\n1 2\") == '2\\n2'\nassert solution(\"4\\n1 1 1 1\") == '4\\n4'\n\nprint(\"Successfully solved!\")\n\"\"\""
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 1') == ''\nassert solution('1 1 1 1') == ''\nassert solution('1 2 3 1 2 1 1') == '2'\n"
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2') == '7\\n2\\n2\\n0\\n4'\nassert solution('7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2') == '7\\n2\\n2\\n0\\n4'\nassert solution('7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2') == '7\\n2\\n2\\n0\\n4'\nassert solution('7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2') == '7\\n2\\n2\\n0\\n4'\n\nSample Input:\n10\n1 2 3 1 2 1 1 2 3 1 2 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\nSample Output:\n7\n2\n2\n0\n4"
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2') == '7\\n2\\n2\\n0\\n4'\n\"\"\"\n\n\"\"\"\nSolution (0)\n\nComplexity: O(n)\n\"\"\"\nn = int(stdin.readline().strip())\na = list(map(int, stdin.readline().strip().split()))\nq = int(stdin.readline().strip())\n\ns = [0] * n\n\nfor i in range(n):\n    if a[i] == a[i - 1] + 1:\n        s[i] = s[i - 1] + 1\n    else:\n        s[i] = 0\n\nfor _ in range(q):\n    i, j = map(int, stdin.readline().strip().split())\n    if a[i - 1] == a[j - 1]:\n        print(s[j - 1])\n    else:\n        print(s[j - 1] - s[i - 1])\n"
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1 2 3 1 2 1 1\") == \"7\"\nassert solution(\"7\\n1 2 3 1 2 1 1\") == \"7\"\n\"\"\"\n\nimport unittest\nfrom unittest.mock import patch\nfrom sys import stdin\n"
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2\") == \"7\\n2\\n2\\n0\\n4\"\n\nassert solution(\"7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2\") == \"7\\n2\\n2\\n0\\n4\"\n\nassert solution(\"7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2\") == \"7\\n2\\n2\\n0\\n4\"\n\nassert solution(\"7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2\") == \"7\\n2\\n2\\n0\\n4\"\n\nassert solution(\"7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2\") == \"7\\n2\\n2\\n0\\n4\""
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2 3 1 2 1 1') == '1'\nassert solution('1 2 3 1 2 1 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2\") == \"7\\n2\\n2\\n0\\n4\"\nassert solution(\"7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2\") == \"7\\n2\\n2\\n0\\n4\"\n\n-----Challenge-----\nSample Input:\n6\n1 2 3 1 2 1\n5\n1 2 3 1 3\n1 3 1 2\n1 2 3 1 2\n3 2 1 2\n4 2 1 2\nSample Output:\n5\n0\n2\n0\n0\n0\n\n\"\"\""
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 2 2 3\") == \"4\"\nassert solution(\"4\\n2 3 1 2\") == \"4\"\nassert solution(\"4\\n2 3 3 2\") == \"4\"\nassert solution(\"4\\n2 2 1 2\") == \"4\"\nassert solution(\"7\\n2 3 1 2 3 1 2 1\") == \"7\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2\\n1 3 1 2 3\") == \"2\"\nassert solution(\"3\\n3\\n1 2 1 2\") == \"0\"\n\"\"\"\nfrom typing import Iterator"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2\") == \"32.6405451448\"\n\"\"\"\nimport random"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2') == '32.6405451448'\n\n\"\"\"\n\nfrom random import random"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2\") == \"32.6405451448\"\n\n\"\"\""
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2') == '32.6405451448'\n\n\"\"\""
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\") == \"32.6405451448\"\nSolution for 4\n0.45\n0.45\n0.45\n0.45\n0.45\n0.3\n0.3\n0.3\n0.3\n0.3\n0.2\n0.2\n0.2\n0.2\n32.6405451448\n-----Problem-----\nWe define the $H$-th row of the triangular distribution as follows. Let $C = \\{ 0, \\dots, H-1 \\}$. Then $H$-th row is given by the probability distribution $\\{ P(X = x) : x \\in C \\}$.\n\nLet $P(X = x)$ be the probability of getting the following distribution $P_x$, starting with $x = 0$. We observe that $P_x$ are actually ordered by the $x$ in $C$, so we can solve the problem by using dynamic programming.\n\nLet $S(H, X)$ be the probability that the machine ends with $X$ balls in its $H$-th row. Then $S(H, X)$ is proportional to\n\n$$\n\\sum_{k=0}^{H-1} \\binom{H}{k} \\cdot P(X = x) S(H - 1, x - k)\n$$\n\nNote that $S(H, X)$ can be computed from $S(H - 1, X)$, so the recursion can be further reduced to a loop:\n\n$$\nS(H, X) = \\sum_{k=0}^{H-1} \\binom{H}{k} \\cdot P(X = x) S(H - 1, x - k)\n$$\n\nIn fact, the problem is exactly the same as the $K$-th problem, the $K$-th row of the triangular distribution. We don't have to check every $k$ in $C$, so we can first compute $S(1, X)$, $S(2, X)$,..., $S(K, X)$. Then we could compute $S(H, X)$ directly using $S(K, X)$ and $S(H-1, X)$.\n\nIt's easy to see that $S(H, X)$ is always less than or equal to $S(H, X)$, but it's not necessarily true for $S(H-1, X)$. So we only need to check the last $K$ balls in $C$ when we compute $S(H, X)$.\n\n$$\nS(H, X) = \\sum_{k=0}^{K} \\binom{K}{k} \\cdot P(X = x) S(H - 1, x - k)\n$$\n\nNote that $S(H, X)$ is proportional to\n\n$$\n\\sum_{k=0}^{K} \\binom{K}{k} \\cdot P(X = x) S(H - 1, x - k)\n$$\n\nSo we can modify the $K$-th problem to compute $S(H, X)$ instead of $S(H, X)$. Then we don't need to check every $k$ in $C$, and we don't need to compute $S(H - 1, X)$ at all.\n\nIt's also easy to verify that $S(H, X)$ will be a valid $K$-th row of the triangular distribution.\n\n$$\nS(H, X) = \\sum_{k=0}^{K} \\binom{K}{k} \\cdot P(X = x) S(H - 1, x - k)\n$$\n\nIt's easy to see that $S(H, X)$ will always be less than or equal to $S(H, X)$.\n\nHere is the $H$-th row of the triangular distribution, $P_x$, starting with $x = 0$.\n\n$$\nP(X = 0) = \\frac{1}{2}\n$$\n\n$$\nP(X = 1) = \\frac{1}{3}\n$$\n\n$$\nP(X = 2) = \\frac{1}{4}\n$$\n\n$$\nP(X = 3) = \\frac{1}{5}\n$$\n\n$$\nP(X = 4) = \\frac{1}{6}\n$$\n\n$$\nP(X = 5"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n40 30 30 40 20 40 50 30 30 50') == '32.6405451448'\nprint(solution(stdin.strip()))\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n40 30 30 40 20 40 50 30 30 50''') == '32.6405451448'\n\nassert solution('''4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2''') == '32.6405451448'\n\n'''\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c $1 \\le N \\le 32$ \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f $N (N+1) / 2$ \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b $v_1, \\ v_2,..., v_H$, \u0433\u0434\u0435 $v_i$ \u2014 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442\u043a\u0430\u0442\u0430 \u043a \u0441\u043e\u0441\u0435\u0434\u043d\u0435\u043c\u0443 \u0432\u044b\u0431\u0440\u043e\u0441\u0443, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u043f\u0440\u0438\u043f\u0430\u0440\u043a\u043e\u0432\u0430\u043d \u043f\u0435\u0440\u0432\u044b\u043c \u0438\u0433\u0440\u043e\u043a\u043e\u043c.\n\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0447\u0438\u0441\u043b\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438, \u0447\u0442\u043e \u0438\u0433\u0440\u043e\u043a, \u0432\u044b\u043f\u0430\u0432\u0448\u0438\u0439 \u043a\u0430\u043c\u0435\u043d\u044c, \u0441\u0442\u0430\u043d\u0435\u0442 \u0432\u044b\u0438\u0433\u0440\u044b\u0432\u0430\u0442\u044c \u0438\u0433\u0440\u0443 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0438\u043b\u0438 \u043f\u043e\u043f\u0430\u0434\u0435\u0442 \u0432 \u0433\u0438\u043b\u044c\u0437\u0443. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b \u0438 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0442 $1$. \u0412 \u0438\u0442\u043e\u0433\u0435, \u0447\u0442\u043e\u0431\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0438\u0433\u0440\u043e\u043a\u0443 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0442\u043a\u0430\u0442\u0430, \u043d\u0443\u0436\u043d\u043e \u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u0438\u0433\u0440\u044b \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0442\u043a\u0430\u0442\u0430 \u0432 \u043d\u0438\u0445. \u0415\u0441\u043b\u0438 \u0438\u0433\u0440\u043e\u043a \u043f\u043e\u043f\u0430\u0434\u0435\u0442 \u0432 \u0433\u0438\u043b\u044c\u0437\u0443, \u0442\u043e \u0432\u044b\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u0442 \u043e\u043d. \u0414\u0430\u043d\u043d\u044b\u0435 \u043e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044f\u0445 \u0441\u0442\u043e\u044f\u0442 \u0441 \u043c\u0438\u043d\u0443\u0441\u043e\u043c \u0438 \u0438\u043c\u0435\u044e\u0442 \u0434\u043b\u0438\u043d\u0443 \u0447\u0438\u0441\u043b\u0430 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u043d\u0443\u043b\u0435\u0432\u044b\u0435. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u0430 \u0432\u0438\u0434\u0430 $v_1, \\ v_2,..., v_H$, \u0442\u043e \u0438\u0433\u0440\u043e\u043a \u0441\u0442\u0430\u043d\u0435\u0442 \u0432\u044b\u0438\u0433\u0440\u044b\u0432\u0430\u0442\u044c \u0432 \ufffd"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n40 30 30 40 20 40 50 30 30 50') == '32.6405451448'\nassert solution('4\\n0.0 0.0 0.45 0.45 0.1') == '0.0'\n\n\"\"\"\n\nimport random\nimport numpy as np\nimport sys\n\nclass Machine:\n    def __init__(self, N, H, P):\n        self.H = H\n        self.P = P\n        self.probs = []\n        self.first = N / 2\n        for p in P:\n            if p == 0:\n                continue\n            # create probabilites for each row\n            row = []\n            for j in range(len(self.H)):\n                if j < self.first:\n                    row.append(p)\n                else:\n                    row.append(p / (2 - self.first + 1))\n            self.probs.append(row)\n\n    def test(self):\n        runs = 100000\n        balls = 100\n        for r in range(runs):\n            curr_run = []\n            for b in range(balls):\n                row = np.random.choice(self.H, p=self.probs[r])\n                curr_run.append(row)\n            curr_run.sort()\n            # print(curr_run)\n            if curr_run[0] == 0:\n                if curr_run[-1] == 0:\n                    continue\n                else:\n                    print(curr_run)\n                    print(r)\n                    return(r)\n        return(runs)\n\n    def expectedPayout(self):\n        exp_out = 0\n        for p in self.P:\n            if p == 0:\n                continue\n            exp_out += p * (1 - p)\n        return(exp_out / 2)"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\") == '32.6405451448'\n\n---\n\nWe draw the machine.\n\nThe machine consists of $H$ holes (denoted by the red arrows) arranged in a triangular shape. The $h^{\\textrm{th}}$ hole is located in the $h^{\\textrm{th}}$ row and contains a ball (denoted by the blue dot) that will fall into the machine. Each row starts with hole number $h (h-1) / 2 + 1$ and contains exactly $h$ holes.\n\nWe assume that the ball will fall into the machine until it reaches one of the holes.\n\nWe randomly choose a ball and set the probability of falling into each hole as shown in the table below.\n\n![](./images/problem_52_pic.png)\n\nIf the ball falls into a hole, the game is over, and we don't consider the probability of that happening.\n\nIf the ball does not fall into a hole, we consider the probabilities of bouncing to each of its neighbors (denoted by the red arrows).\n\nIf the ball reaches one of its neighbors (denoted by the red arrows), we randomly choose a hole and set the probability of bouncing to that hole as shown in the table below.\n\n![](./images/problem_52_pic.png)\n\nIf the ball reaches a hole, the game is over, and we don't consider the probability of that happening.\n\nIf the ball does not reach a hole, we consider the probabilities of bouncing to each of its neighbors (denoted by the red arrows).\n\nIf the ball reaches one of its neighbors (denoted by the red arrows), we randomly choose a hole and set the probability of bouncing to that hole as shown in the table below.\n\n![](./images/problem_52_pic.png)\n\nIf the ball reaches a hole, the game is over, and we don't consider the probability of that happening.\n\nIf the ball does not reach a hole, we consider the probabilities of bouncing to each of its neighbors (denoted by the red arrows).\n\nIf the ball reaches one of its neighbors (denoted by the red arrows), we randomly choose a hole and set the probability of bouncing to that hole as shown in the table below.\n\n![](./images/problem_52_pic.png)\n\nIf the ball reaches a hole, the game is over, and we don't consider the probability of that happening.\n\nIf the ball does not reach a hole, we consider the probabilities of bouncing to each of its neighbors (denoted by the red arrows).\n\nIf the ball reaches one of its neighbors (denoted by the red arrows), we randomly choose a hole and set the probability of bouncing to that hole as shown in the table below.\n\n![](./images/problem_52_pic.png)\n\nIf the ball reaches a hole, the game is over, and we don't consider the probability of that happening.\n\nIf the ball does not reach a hole, we consider the probabilities of bouncing to each of its neighbors (denoted by the red arrows).\n\nIf the ball reaches one of its neighbors (denoted by the red arrows), we randomly choose a hole and set the probability of bouncing to that hole as shown in the table below.\n\n![](./images/problem_52_pic.png)\n\nIf the ball reaches a hole, the game is over, and we don't consider the probability of that happening.\n\nIf the ball does not reach a hole, we consider the probabilities of bouncing to each of its neighbors (denoted by the red arrows).\n\nIf the ball reaches one of its neighbors (denoted by the red arrows), we randomly choose a hole and set the probability of bouncing to that hole as shown in the table below.\n\n![](./images/problem_52_pic.png)\n\nIf the ball reaches a hole, the game is over, and we don't consider the probability of that happening.\n\nIf the ball does not reach a hole, we consider the probabilities of bouncing to each of its neighbors (denoted by the red arrows).\n\nIf the ball reaches one of its neighbors (denoted by the red arrows), we randomly choose a hole and set the probability of bouncing to that hole as shown in the table below.\n\n![](./images/problem_52_pic.png)\n\nIf the ball reaches a hole, the game is over, and we don't consider the probability of that happening.\n\nIf the ball does not reach a hole, we consider the probabilities of bouncing to each of its neighbors (denoted by the"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n40 30 30 40 20 40 50 30 30 50\") == \"32.6405451448\"\n\"\"\"\nfrom numpy import random, multiply"
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5'\nassert solution('1\\n2') == '1 2'\n\"\"\""
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2 1 4 3') == '2 3 4 1'\nassert solution('3 1 2 4') == '1 2 3 4'\n'''"
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 1 4 3') == '2 3 4 1'\n\n---Problem---\nGiven a matrix of characters with rows and columns, determine the number of characters that are different in two rows, two columns, or a combination of the two.\n\nThe matrix will always have at least two rows and two columns.\n\n-----Notes------\n\n-----Implementation details-----\n\n\"\"\"\n\nimport sys\nimport ast"
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 1 4 3\") == \"2 3 4 1\"\n\"\"\"\n\nn = int(stdin.readline().rstrip())\nls = list(map(int, stdin.readline().rstrip().split(\" \")))\n\ndic = {}\nfor i in range(n):\n    dic[i] = ls[i]\n\nanswer = sorted(dic.keys(), key=lambda x: (dic[x], x))\nprint(\" \".join(map(str, answer)))"
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2\n1 4\n''') == '1 4'\nassert solution('''3\n1 2 3\n''') == '2 1 3'\nassert solution('''4\n1 4\n''') == '1 4'\nassert solution('''1\n4\n''') == '4'\nassert solution('''2\n1 4\n''') == '1 4'\n"
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 1 4 3') == '2 3 4 1'\nassert solution('4\\n2 1 4 3') == '2 3 4 1'\nassert solution('4\\n2 1 4 3') == '2 3 4 1'\n\n-----Test Case-----\nTime Limit: 2 sec\nMemory Limit: 512 MB\n\n-----Beware-----\nYou are not allowed to use any data structure from Python library (dict, list, set, etc.)\nYour code can only use the following standard API:\n- input(): single string\n- print(answer)\n\"\"\""
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 1 4 3\") == \"2 3 4 1\"\n\"\"\"\n"
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n'''\n\nfrom math import sqrt\n\nclass Node:\n    def __init__(self, number: int, parent: int, parent_weight: int) -> None:\n        self.number = number\n        self.parent = parent\n        self.parent_weight = parent_weight\n    \n    def __repr__(self) -> str:\n        return f'{self.number} {self.parent_weight}'"
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 1 4 3\") == \"2 3 4 1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 1 4 3\") == \"2 3 4 1\"\n\"\"\"\n\nimport sys\nfrom typing import Tuple, List\nfrom collections import defaultdict\n\nfrom my.int_to_str import int_to_str\nfrom util import print_assert\n"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1\\n'\nassert solution('2\\n1 1\\n2 2\\n') == '7.656854249492381\\n'\nassert solution('3\\n1 1\\n2 2\\n3 3\\n') == '7.656854249492381\\n'\nassert solution('4\\n1 1\\n2 2\\n3 3\\n4 4\\n') == '7.656854249492381\\n'\n"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1') == '7.656854249492381'\nassert solution('5\\n1 1\\n1 3\\n2 4\\n3 3') == '7.656854249492381'\n\"\"\"\n"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5') == '1.87082829774'\nassert solution('6\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6') == '3.46410161513776'\nassert solution('2\\n1 1\\n1 2') == '1.4142135623730951'\nassert solution('3\\n1 1\\n1 2\\n2 3') == '1.7320508075688772'\nassert solution('4\\n1 1\\n1 2\\n1 3\\n2 3') == '1.0'"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2\\n2 1\") == '2.23606797749979'\nassert solution(\"6\\n1 2\\n2 3\\n3 1\\n3 4\\n3 5\\n4 5\\n4 2\") == '8.660254037844387'\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n4 3\") == '6.283185307179586'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\") == \"7.656854249492381\"\n\"\"\"\n"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\") == \"7.656854249492381\"\n\nsolution(\"4\\n2 1\\n1 2\\n3 2\\n2 1\") == \"2.8284271247461903\"\n\nsolution(\"1\\n3 3\\n\") == \"6.283185307179586\"\n\nsolution(\"5\\n1 1\\n2 2\\n3 3\\n4 4\\n\") == \"12.566370614359172\"\n\nsolution(\"6\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n\") == \"13.247422680412393\"\n\n-----Problem-----\nHappy Frogs\n\nA happy frog wants to cross a river. Initially, the frog is on one bank of the river (position $0$) and wants to jump to the other bank (position $x \\geq 0$). The frog can jump between the two banks $x$ times. Each time the frog jumps, it lands on a new position and wants to continue jumping. When the frog lands at a particular position, it cannot jump to any position that is greater than this.\n\nHelp the frog find the earliest position at which he can land such that he is able to jump to the other bank.\n\n-----Input Format-----\nThe first line of input contains a single integer $x$ denoting the number of times that the frog can jump. The second line contains $x$ integers $(a_ 1, a_ 2, \\ldots, a_ x)$, each an integer, denoting the earliest position that the frog can jump to.\n\n-----Output Format-----\nPrint a single integer denoting the earliest position that the frog can jump to.\n\n-----Sample Input-----\n3\n0 1 1\n\n-----Sample Output-----\n1\n\n-----Explanation-----\nThe frog starts at position $0$, and can jump to positions $1, 2, 3, 4, 5, 6$, where position $5$ is the earliest position that the frog can reach.\n\nIf he did not start at position $1$, he would have reached position $5$, and if he did not start at position $2$, he would have reached position $6$.\n\nTo avoid this, we must start at position $1$ and not at $2$.\n\nThus, the earliest position at which the frog can reach the other bank is $1$.\n\n\"\"\""
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\") == \"7.656854249492381\"\n\"\"\"\n\n\nimport math\n\nn = int(input())"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\") == \"7.656854249492381\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n3 1\\n3 4\") == \"7.656854249492381\"\nassert solution(\"2\\n0 1\\n0 0\") == \"3.0000000000000004\"\nassert solution(\"3\\n1 2\\n1 2\\n1 1\") == \"3.0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == \"2\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\\n\") == \"2\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\") == 2\n\"\"\"\n\nfrom __future__ import annotations\nimport sys\nfrom typing import List, Tuple, Union, Iterator, Set\n\nimport pytest\n\nDataType = Tuple[Tuple[int, int],...]\nCoordinate = Tuple[int, int]\n"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\") == \"2\"\nprint(solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\"))\n"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == 2\n\"\"\"\n\nimport os\nimport sys\nimport math\nimport collections"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == 2\n\"\"\"\n\nimport collections\nimport functools\nimport heapq\nimport itertools\nimport re\nimport sys"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s) == e\n"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == 2\n\"\"\"\n\nimport math"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == \"2\"\n\"\"\"\n\nN, M, K = map(int, input().split())\nL = [tuple(map(int, input().split())) for _ in range(N)]\nA = [tuple(map(int, input().split())) for _ in range(M)]\n"
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == 9\n\"\"\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1') == 9\n"
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"9\"\nprint(solution(\"2 1\"))\n"
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"9\"\n\n\nassert solution(\"1 1\") == \"1\"\n\nassert solution(\"2 2\") == \"1\"\n\nassert solution(\"1 1\") == \"1\"\n\nassert solution(\"2 3\") == \"6\""
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n-----Problem-----\nGiven $m$ and $k$, determine the maximum number of bags for which you can determine the fake bag in $m$ weighings, modulo the large prime $998244353$.\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"9\"\nprint(solution(\"2 1\"))\n"
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"9\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"5 10\") == \"10\"\nassert solution(\"10000000 1\") == \"99999797979798797979\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('0 1') == '0'\nassert solution('0 2') == '0'\nassert solution('0 1 2') == '1'\nassert solution('0 1 2 3') == '1'\n"
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"9\"\n\"\"\""
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2\\n3\\n5\\n7\\n12\\n') == '12'\n\"\"\"\n\nfrom typing import List, Dict"
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2\\n3\\n5\\n7\\n12\\n') == '12'\nassert solution('5\\n2\\n3\\n5\\n7\\n12\\n') == '12'\nassert solution('5\\n2\\n3\\n5\\n7\\n12\\n') == '12'\nassert solution('5\\n2\\n3\\n5\\n7\\n12\\n') == '12'\nassert solution('5\\n2\\n3\\n5\\n7\\n12\\n') == '12'\n\n\"\"\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2\\n3\\n5\\n7\\n12') == '12'\n\"\"\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2\\n3\\n5\\n7\\n12\\n\") == \"12\"\n\nassert solution(\"4\\n2\\n3\\n5\\n7\\n12\\n\") == \"12\"\n\nassert solution(\"4\\n2\\n3\\n5\\n7\\n12\\n\") == \"12\"\n\nassert solution(\"4\\n2\\n3\\n5\\n7\\n12\\n\") == \"12\"\n\nassert solution(\"4\\n2\\n3\\n5\\n7\\n12\\n\") == \"12\""
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2\\n3\\n5\\n7\\n12') == '12'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2\n3\n5\n7\n12''') == '12'\nassert solution('''5\n2\n3\n5\n7\n12\n''') == 'no solution'\nassert solution('''5\n2\n3\n5\n7\n12\n''') == 'no solution'\nassert solution('''5\n2\n3\n5\n7\n12\n''') == '12'\nassert solution('''5\n2\n3\n5\n7\n12\n''') == '12'\n"
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2\\n3\\n5\\n7\\n12\") == \"12\"\n\"\"\"\n\n\n\"\"\"\nRuntime: O(n)\nSpace: O(n)\n\"\"\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n2\n3\n5\n7\n12''') == '12'\nassert solution('''4\n0\n2\n5\n3''') == '2'\nassert solution('''9\n9\n9\n9\n9''') == ''\nassert solution('''0\n1\n3\n5\n7\n9\n11\n13\n15''') == '13'\nassert solution('''9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\n800\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812\n813\n814\n815\n816\n817\n818\n819\n820\n821\n822\n823\n824\n825\n826\n827\n828\n829\n830\n831\n832\n833\n834\n835\n836\n8"
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2\\n3\\n5\\n7\\n12\\n\") == \"12\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2\\n3\\n5\\n7\\n12\") == \"12\"\n"
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\nassert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == -1\nassert solution('1') == '0'\nassert solution('0') == '1'\nassert solution('01') == '01'\nassert solution('101') == '100'\n"
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == '11'\nassert solution('11')!= '10'\nassert solution('11')!= '01'\nassert solution('01')!= '11'\n\nassert solution('11') == solution('11')\n"
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"00\\n01\\n10\\n110\\n111\") == \"11\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('011') == '10'\nassert solution('101010') == '11'\nassert solution('101') == '0'\nassert solution('1010') == '10'\n"
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"\".join([\n        \"5\",\n        \"00\",\n        \"01\",\n        \"10\",\n        \"110\",\n        \"111\"\n    ])\n) == \"11\"\n\nassert solution(\n    \"\".join([\n        \"3\",\n        \"010\",\n        \"100\",\n        \"101\",\n        \"110\",\n        \"111\"\n    ])\n) == \"110\"\n\nassert solution(\n    \"\".join([\n        \"4\",\n        \"1010\",\n        \"1011\",\n        \"1100\",\n        \"1101\",\n        \"1110\"\n    ])\n) == \"1110\"\n\nassert solution(\n    \"\".join([\n        \"10\",\n        \"101\",\n        \"110\",\n        \"111\",\n        \"100010\",\n        \"100011\"\n    ])\n) == \"110\"\n\nassert solution(\n    \"\".join([\n        \"13\",\n        \"101101\",\n        \"111111\",\n        \"101010\",\n        \"101011\",\n        \"101110\",\n        \"111011\",\n        \"111110\",\n        \"111011\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\",\n        \"111111\",\n        \"111110\","
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100110110\") == \"11\"\n\"\"\"\n\nimport sys\nfrom typing import List\nfrom collections import defaultdict, Counter, deque\nfrom collections.abc import Iterable\nfrom heapq import heapify, heappop, heappush\n\nDEBUG = False\ndata = sys.stdin.read().split(\"\\n\\n\")"
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"010\") == \"10\"\nassert solution(\"11110\") == \"110\"\nassert solution(\"101010\") == \"101010\"\nassert solution(\"101011\") == \"11110\"\nassert solution(\"101101\") == \"11110\"\n"
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"010\\n\") == '11'\nassert solution(\"101010\\n\") == '11'\nassert solution(\"101010\\n101010\\n\") == '11'\nassert solution(\"110110111111010\\n10101010101010\\n1010101010\\n101010101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2\\n20 100\\n100 10\\n1\\n150 50\\n1\\n150 100\\n\") == \"100 250 320\"\nSolution with total shares"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport os\nimport sys\nimport math"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n3 4\\n2 3\\n\") == \"110 200\\n\"\nassert solution(\"1 2\\n3 4\\n2 3\\n\") == \"110 200\\n\"\nassert solution(\"1 2\\n3 4\\n2 3\\n\") == \"110 200\\n\"\nassert solution(\"1 2\\n3 4\\n2 3\\n\") == \"110 200\\n\"\nassert solution(\"1 2\\n3 4\\n2 3\\n\") == \"110 200\\n\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2\\n20 100\\n100 10\\n1\\n150 50\\n1\\n150 100\\n\") == \"100 250 320\"\nassert solution(\"4\\n3\\n20 10 30\\n100 10\\n1\\n150 50\\n1\\n150 100\\n\") == \"100 230 50 320\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('2\\n3') == '3'\nassert solution('4\\n5') == '5'\nassert solution('10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '20'\n\n''''\nNote:\nThe first line of input contains an integer $C$ ($1 \\le C \\le 20$), the total number of companies of which you hold shares.\n\nNext $C$ blocks of input will be given, each of which will contain an integer $K$ ($1 \\le K \\le 50$), indicating how many records you have kept for this company.\n\nThen $K$ lines of input will be given, each of which will contain two integers $N$ ($1 \\le N \\le 1000$) and $D$ ($1 \\le D \\le 365$), indicating that you held $N$ shares of this company on day $D$.\n\nOutput\nOn a single line, print the total number of shares held on each day in increasing order of the trading day.\n\nConstraints\n$1 \\le C \\le 20$\n$1 \\le K \\le 50$\n$1 \\le N \\le 1000$\n$1 \\le D \\le 365$\n\nExamples\nSample Input\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\nSample Output\n100 250 320\n''''"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n'''.strip()) == '''\n100 250 320\n'''.strip()\n\n-----Notes-----\nThe number of companies may not exceed 20.\nThe number of records may not exceed 50.\n\n'''.strip()\n"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n2\\n') == '2'\nassert solution('3\\n1\\n2\\n') == '1\\n3'\nassert solution('5\\n1\\n2\\n3\\n') == '1\\n2\\n3'\n"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2\\n20 100\\n100 10\\n1\\n150 50\\n1\\n150 100\") == '100 250 320'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3\\n20 100\\n100 10\\n1\\n150 50\\n1\\n150 100') == '100 250 320'"
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == expected\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\n\"\"\"\n\nfrom typing import List\nimport sys\n\nsys.setrecursionlimit(3000)\n\nnum_input = list(map(int, input().split()))\nl = num_input[0]\nr = num_input[1]\n\ncount_digits = [0] * 9"
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\nprint(solution(stdin))\n"
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\n\"\"\"\n\n\n\n\"\"\"\nThe problem can be solved by taking the product of each digit. The product of a number is the product of all its digits. For example, the product of $8$ is $8 \\cdot 8 = 64$.\n\nThis can be understood by the following recursive formula:\n\n$$\n\\text{product}(x) = \\text{product}(x - x % 10) x % 10\n$$\n\nIn the recursive formula, we do some operations:\n\n$$\n\\text{product}(x) = x * \\text{product}(x - x % 10)\n$$\n\nand\n\n$$\n\\text{product}(x) = \\text{product}(x / 10)\n$$\n\nThen, we need to solve the following problem: for each integer $x$, find all numbers $y$ such that $1 \\leq y \\leq x$ and $\\text{product}(y) = x$.\n\nThe solution is to use the following brute force method:\n\n1. For each integer $x$, find its digits $x_1, x_2,..., x_n$ and compute the product $\\text{product}(x) = x_1 \\cdot x_2 \\cdot... \\cdot x_n$.\n\n2. Now, for each number $y$ satisfying 1 $\\leq y \\leq x$ and $\\text{product}(y) = x$, add $y$ to the list of solutions.\n\n3. At this point, we have the list of all solutions.\n\nA more efficient solution would be to first sort the list in ascending order of the values of the numbers in the list. Then, for each element $y$ of the list, for each value $k$ between $1$ and $9$ compute $\\text{product}(y) = y \\cdot k$. Add $y$ to the list of solutions if the product equals $x$.\n\nThe list of solutions will be in the range of $[1, x]$. So, we can use the following operations on the list:\n\n1. Insert the smallest element at the beginning of the list.\n\n2. Insert the largest element at the end of the list.\n\n3. Sort the list in descending order.\n\n4. For each element $y$ of the list, for each value $k$ between $1$ and $9$ compute $\\text{product}(y) = y \\cdot k$. Add $y$ to the list of solutions if the product equals $x$.\n\nThen, the list of solutions will have elements in the range of $[1, x]$.\n\n\"\"\""
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 8 3\") == \"4 1 2 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"1 1\") == \"10\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"808 200\") == \"3 1 6 6 0\"\nassert solution(\"1234 9999\") == \"1 1 3 0 0 0 0 0 0 0 0 0\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\n"
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1) == (3)\nassert solution(2) == (0)\nassert solution(3) == (4)\nassert solution(4) == (5)\nassert solution(5) == (0)\n"
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"50 100\") == \"3 7 4 6 5 7 2 15 2\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100 200') == '7 3 4 6 5 7 2 15 2'\n\"\"\""
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 0\\n0 14\\n15 14\\n15 0') == '40.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 0\\n0 14\\n15 14\\n15 0\") == \"40.0000000000\"\n\"\"\""
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7\") == \"40.0000000000\"\n\"\"\""
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 0\\n0 14\\n15 14\\n15 0') == '40.0000000000'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7\") == '40.0'\n\n-----Explanation-----\nGiven input:\na = 4\nA = {(0, 0), (0, 14), (15, 14), (15, 0)}\n\nb = 4\nB = {(8, 3), (4, 6), (7, 10), (11, 7)}\n\nWe draw a line that cuts the left part of the second polygon off the first polygon.\n\nThe cost of the line is the length of the cut: 0.\n\nWe draw a line that cuts the left part of the second polygon off the first polygon.\n\nThe cost of the line is the length of the cut: 14.\n\nWe draw a line that cuts the left part of the second polygon off the first polygon.\n\nThe cost of the line is the length of the cut: 14.\n\nWe draw a line that cuts the left part of the second polygon off the first polygon.\n\nThe cost of the line is the length of the cut: 14.\n\nWe draw a line that cuts the left part of the second polygon off the first polygon.\n\nThe cost of the line is the length of the cut: 14.\n\nWe draw a line that cuts the left part of the second polygon off the first polygon.\n\nThe cost of the line is the length of the cut: 14.\n\nWe draw a line that cuts the left part of the second polygon off the first polygon.\n\nThe cost of the line is the length of the cut: 14.\n\nThe minimum cost to cut the second polygon out of the first polygon is the length of the last line: 14.\n\nThe answer is the sum of all costs: 0+14+14+14+14=40.\n\nThe answer is 40.0 because of the relative error.\n\nWe can represent the answer in a more Pythonic way:\n\nfrom math import sqrt"
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '2'\nassert solution('2\\n1\\n2') == '0'\nassert solution('2\\n1\\n2\\n2\\n1\\n2') == '0'\nassert solution('1\\n1\\n0\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n1\\n1\\n0\\n0\\n1') == '5'\n"
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7') == '40.0000000000'\n\n-----Notes-----\nAssume that polygon $A$ is convex and polygon $B$ is strictly contained within $A$.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n0 0\\n0 14\\n15 14\\n15 0') == '40.0'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 0\\n0 14\\n15 14\\n15 0\") == \"40.0\"\n\"\"\"\n"
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 0\\n0 14\\n15 14\\n15 0') == '40.0'\nassert solution('4\\n0 0\\n0 14\\n15 14\\n15 0') == '40.0'\nassert solution('4\\n0 0\\n0 14\\n15 14\\n15 0') == '40.0'\n\nimport math"
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 1 3 4\\n3 3 3 2\\n\") == \"3\"\n\"\"\"\n\nfrom collections import Counter\nimport sys"
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n3\\n2 1 3') == '1\\n1'"
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 1 3\\n') == '1\\n1'\n\"\"\"\nimport sys\nsys.stdin = open('test.txt', 'r')"
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5\\n2 3 4 5 5\\n1 1 2 2 3') == '1\\n1\\n1\\n1\\n0'\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import List"
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n') == '2\\n'\nassert solution('1\\n1\\n1\\n') == '0\\n'\nassert solution('1\\n1\\n1\\n1\\n') == '0\\n'\nassert solution('1\\n2\\n1\\n') == '1\\n1\\n'\nassert solution('1\\n2\\n1\\n1\\n') == '0\\n'\n"
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n3\\n2 1 3') == '1\\n1'\n"
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n3\\n2 1 3\") == \"1\\n1\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 1 3 4\\n5 3 7 9\") == \"3\"\n\nimport collections\n"
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2\n3\n1 2 1\n''') == \"1\"\n\nassert solution('''\n3\n3\n2 1 1\n''') == \"0\"\n\nassert solution('''\n3\n3\n3 1 1\n''') == \"0\"\n\nassert solution('''\n2\n1\n3 1\n''') == \"0\"\n\nassert solution('''\n2\n2\n2 1\n''') == \"0\""
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"725.85 1.71 2.38\") == \"199 162\"\n\"\"\""
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"725.85 1.71 2.38\") == \"199 162\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"725.85 1.71 2.38\") == \"199 162\"\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def __init__(self, input_str):\n        self.input_str = input_str\n        self.profit = []\n        self.pita = []\n        self.pizza = []\n        self.p_t = []\n        self.p_1 = []\n        self.p_2 = []\n        self.max_profit = 0\n        self.total = 0\n        self.count = 0\n        self.index = 0\n        self.final_list = []\n        self.check_list = []\n        self.combinations = []\n        self.count_p = 0\n        self.count_pita = 0\n        self.count_pizz = 0\n        self.count_p_t = 0\n        self.count_p_1 = 0\n        self.count_p_2 = 0\n\n    def solution(self):\n        for i in self.input_str.split():\n            self.profit.append(int(i))\n        for i in range(0, len(self.profit), 3):\n            self.p_t.append(self.profit[i])\n        for i in range(1, len(self.profit), 3):\n            self.p_1.append(self.profit[i])\n        for i in range(2, len(self.profit), 3):\n            self.p_2.append(self.profit[i])\n        self.total = self.p_t[0]\n        self.count_p = self.p_t[0]\n        self.count_p_t = self.p_t[0]\n        self.count_p_1 = self.p_1[0]\n        self.count_p_2 = self.p_2[0]\n        self.pizza_combinations()\n        self.index = 0\n        self.check_list.append(self.combinations[0])\n        self.final_list.append(self.combinations[0])\n        self.count_p_1_index = 0\n        self.count_p_1_count = 0\n        self.count_p_1_count_pita = 0\n        self.count_p_1_count_pizza = 0\n        for i in range(0, len(self.combinations)):\n            for j in range(len(self.check_list)):\n                if self.combinations[i] == self.check_list[j]:\n                    self.index = j\n                    break\n            if self.index!= i:\n                continue\n            else:\n                for k in range(i, len(self.combinations)):\n                    if self.combinations[i] == self.combinations[k]:\n                        continue\n                    else:\n                        if self.combinations[i][0] == self.combinations[k][0]:\n                            if self.combinations[i][1] > self.combinations[k][1]:\n                                self.count_p_1_count_pita += 1\n                                self.count_p_1_count_pizza += 1\n                                self.final_list[self.index].append(self.combinations[i])\n                                self.final_list[self.index].append(self.combinations[k])\n                            else:\n                                self.count_p_1_count_pita += 1\n                                self.count_p_1_count_pizza += 1\n                                self.final_list[self.index].append(self.combinations[k])\n                                self.final_list[self.index].append(self.combinations[i])\n                        else:\n                            if self.combinations[i][0] > self.combinations[k][0]:\n                                self.count_p_1_count_pita += 1\n                                self.count_p_1_count_pizza += 1\n                                self.final_list[self.index].append(self.combinations[i])\n                                self.final_list[self.index].append(self.combinations[k])\n                            else:\n                                self.count_p_1_count_pita += 1\n                                self.count_p_1_count_pizza += 1\n                                self.final_list[self.index].append(self.combinations[k])\n                                self.final_list[self.index].append(self.combinations[i])\n                self.count_p_1_count = self.count_p_1_count + 1\n                self.count_p_1_count_pita = self.count_p_1_count_pita + 1\n                self.count_p_1_count_pizza = self.count_p_1_count_pizza + 1\n                self.index += 1\n                self.check_list.append(self.combinations[i])\n                self.final_list.append([])\n                self.count_p_1_index += 1\n                self.count_p_1_count = 0\n                self.count_p_1_count_pita = 0\n                self.count_p_1_count_pizza = 0\n                for m in range(0, len(self.combinations)):\n                    if self.combinations[m] == self.check_list[self.index]:\n                        self.index = m\n                        break\n        for i in range(0, len(self.final_list)):\n            if len(self.final_list[i]) == 0:\n                continue\n            else:\n                self.count_p_2 = self.final_list[i][0][1]\n                self.count_p_1 = self.final_list[i][0][0]\n                self.count_p_2_count = 0\n                self.count_p_2_count_pita = 0\n                self.count_p_2_count_pizza = 0\n                for j in range(0, len(self.final_list[i])):\n                    for k in range(0, len(self.final_list[i])):\n                        if j!= k:\n                            if self.final_list[i][j][1] == self.final_list[i][k][1]:\n                                self.count_p_2_count_pita += 1\n                                self.count_p_2_count_pizza += 1\n                                continue\n                            else:\n                                if self.final_list[i][j][0] == self.final_list[i][k][0]:\n                                    self.count_p_2_count_pita += 1\n                                    self.count_"
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('725.85 1.71 2.38') == '199 162'\nassert solution('12.05 0.67 1.26') == 'none'\nassert solution('6.8 5.3 4.9') == '1 1'"
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('725.85 1.71 2.38') == '199 162'\n\"\"\"\n"
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"725.85 1.71 2.38\") == \"199 162\""
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('725.85 1.71 2.38') == '199 162'\n"
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"725.85 1.71 2.38\"\"\") == \"\"\"199 162\"\"\"\n\"\"\"\n@test.describe(\"Fixed Tests\")\n"
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('725.85 1.71 2.38') == '199 162'\n\"\"\""
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('725.85 1.71 2.38') == '199 162'\n\"\"\""
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 -1 2 1 1 3 3 0\") == \"16\"\nprint(solution(\"2 3 -1 2 1 1 3 3 0\"))\n\n---\n\nclass Domino:\n    def __init__(self, v, h):\n        self.v = v\n        self.h = h\n\n    def flip(self):\n        tmp = self.v\n        self.v = self.h\n        self.h = tmp\n\nclass Board:\n    def __init__(self, rows, columns):\n        self.rows = rows\n        self.columns = columns\n        self.size = rows * columns\n\n    def is_valid(self, v):\n        return 0 <= v <= self.size - 1\n\n    def place(self, domino):\n        if not self.is_valid(domino.v):\n            return False\n        if not self.is_valid(domino.h):\n            return False\n        return True\n\n    def place_all(self, dominoes):\n        placed = 0\n        while placed < len(dominoes):\n            if not self.place(dominoes[placed]):\n                return False\n            placed += 1\n        return True\n\n    def cover(self, dominoes):\n        max_length = 0\n        for domino in dominoes:\n            if domino.v > max_length:\n                max_length = domino.v\n            if domino.h > max_length:\n                max_length = domino.h\n        return max_length * 2\n\nclass Dominoes:\n    def __init__(self, stdin):\n        self.rows = int(stdin.readline().strip())\n        self.columns = int(stdin.readline().strip())\n        self.dominoes = []\n\n    def solve(self):\n        board = Board(self.rows, self.columns)\n        for i in range(self.rows):\n            dominoes = list(map(int, stdin.readline().strip().split()))\n            for domino in dominoes:\n                board.dominoes.append(Domino(domino, domino))\n        board.dominoes.sort(key=lambda x: x.h * x.v, reverse=True)\n        if not board.place_all(board.dominoes):\n            return \"IMPOSSIBLE\"\n        return str(board.cover(board.dominoes))"
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\") == 16\n\"\"\""
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nprint(solution('\\n'.join([\n    '5 3',\n    '2 1 -1',\n    '1 3 2',\n    '0 2 3',\n    '2 1 1',\n    '3 3 0',\n])))\n"
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 3 2\\n0 2 3') == '16'\n\"\"\""
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0') == 16\n\n-----Solution-----\n\n\"\"\"\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\n\ncount = 0\ns = 0\n\nfor _ in range(N):\n    x, y, z = map(int, sys.stdin.readline().split())\n    s += max(x, y)\n    count += 1\n    if count == K:\n        break\n\nprint(s * 2 - min(x, y))\n"
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0') == '16'\nassert solution('3 3\\n2 1 -1\\n1 3 2\\n0 2 3') == '18'\nassert solution('3 1\\n2 1 -1\\n1 3 2\\n0 2 3') == '7'\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0''') == '16'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\") == 16\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 3 2\\n0 2 3\") == \"16\"\nassert solution(\"3 2\\n1 2 3\\n0 2 3\") == \"14\"\nassert solution(\"3 2\\n1 1 3\\n0 2 3\") == \"12\"\nassert solution(\"3 2\\n1 2 3\\n0 2 3\") == \"12\"\nassert solution(\"3 2\\n0 1 3\\n1 2 3\") == \"12\"\n\n\"\"\"\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\nO 3\\nE 1\\nO 1\\nE 2\\nI 3\\nO 4\\nE 4\\nI 1\\nO 1\\nE 3\\nE 2\\nI 2\\nE 1\\nO 2\\nI 1\\nO 3\\nE 1\\nO 1\\nI 1\\nO 1\\nE 1\\nE 1\\nO 1\\nE 2\\nI 1\\nO 2\\nE 1\\nO 1\\nE 1\\nE 1\\nO 1\\nE 2\\nI 1\\nO 2\\nE 1\\nO 1\\nE 1\\nO 1\\nE 2\\nI 1\\nO 1\\nE 1\\nE 1\\nO 1\\nE 1\\nO 1\\nE 2\\nO 1\\nO 1\\nE 1\\nE 1\\nO 1\\nE 2\\nO 1\\nO 1\\nE 1\\nE 1\\nO 1\\nE 1\\nO 1\\nE 1\\nO 1\\nE 1\\nO 1\\nI 1\\nO 2\\nE 2\\nI 1\\nO 2\\nO 1\\nE 1\\nO 2\\nO 1\\nI 1\\nE 1\\nO 1\\nO 1\\nE 1\\nO 1\\nO 1\\nO 1\\nE 1\\nE 1\\nO 1\\nO 1\\nE 1\\nE 1\\nO 1\\nE 1\\nE 1\\nO 1\\nE 1\\nE 1\\nO 1\\nE 1\\nE 1\\nO 1\\nO 1\\nE 1\\nE 1\\nI 1\\nE 1\\nO 1\\nO 1\\nO 1\\nI 1\\nE 1\\nO 1\\nO 1\\nE 1\\nO 1\\nO 1\\nO 1\\nO 1\\nI 1\\nE 1\\nO 1\\nO 1\\nO 1\\nO 1\\nE 1\\nO 1\\nO 1\\nO 1\\nO 1\\nI 1\\nE 1\\nO 1\\nO 1\\nE 1\\nO 1\\nO 1\\nE 1\\nO 1\\nO 1\\nO 1\\nI 1\\nO 1\\nO 1\\nO 1\\nO 1\\nI 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nE 1\\nO 1\\nE 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nE 1\\nE 1\\nO 1\\nO 1\\nO 1\\nO 1\\nE 1\\nO 1\\nO 1\\nE 1\\nE 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nE 1\\nE 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1\\nO 1"
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\nO 4\\nI 2\\nE 1') == '2 1 4'\n"
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Odd\"\n\nsolution()\n'''\nimport sys\n\nstdin = sys.stdin.read()"
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nO 10\") == \"Even 1\"\n\nassert solution(\"15\\nE 15\") == \"Ingmariay 0\"\n\nassert solution(\"16\\nI 16\") == \"Odd 1\"\n"
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'Odd 1 Even 2'\nassert solution('3\\nO 1\\nE 2\\nI 3') == 'Odd 1 Even 2'\nassert solution('3\\nI 1\\nO 2\\nE 3') == 'Even 2 Odd 1'\nassert solution('7\\nE 1\\nI 3\\nE 5\\nO 2\\nE 3\\nI 1\\nE 5\\nE 4\\nO 4\\nO 1\\nI 4\\nE 5\\nE 1\\nI 5\\nE 3\\nE 4\\nI 4') == 'Even 3 Odd 1'\nassert solution('9\\nE 1\\nI 3\\nE 5\\nO 2\\nE 3\\nI 1\\nE 5\\nE 4\\nO 4\\nO 1\\nI 4\\nE 5\\nE 1\\nI 5\\nE 3\\nE 4\\nI 4') == 'Even 3 Odd 1'\n"
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nO 1\\nI 2\\nE 3\\nO 4\") == \"1 3 4\"\nassert solution(\"1\\nO 1\\nE 2\\nE 3\\nI 4\") == \"3 3 3\"\nassert solution(\"5\\nO 4\\nI 2\\nE 3\\nE 4\") == \"3 3 3\"\nassert solution(\"3\\nE 1\\nI 2\\nE 3\\nE 4\\nO 5\") == \"3 3 3\"\nassert solution(\"5\\nE 3\\nE 2\\nI 1\\nE 4\\nI 5\") == \"3 3 3\"\n"
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n2\nO 10\nE 6\n''') == '2 1 4'\n\nassert solution('''\n2\nO 5\nE 2\n''') == '1 1 4'\n\nassert solution('''\n2\nI 2\nE 6\n''') == '2 1 4'\n\nassert solution('''\n3\nO 5\nE 6\nI 10\n''') == '1 1 4'\n\nassert solution('''\n1\nE 3\n''') == '1 1 3'"
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1\nO 4\nE 6\nE 2\nO 3\nI 2\nI 3\nE 5\nI 3\nE 6\nI 3\nE 7\nI 3\nE 5\nI 3\nE 6\nO 4\nO 6\nO 4\nE 6\nE 5\nE 5\nO 2\nE 2\nI 4\nO 2\nO 3\nO 3\nE 1\nO 5\nO 6\nO 7\nE 3\nE 3\nE 4\nO 1\nE 1\nE 3\nO 4\nE 2\nO 1\nE 4\nE 2\nO 1\nO 5\nI 4\nE 4\nO 1\nO 5\nE 4\nE 6\nE 5\nO 5\nO 2\nE 1\nO 3\nE 2\nO 4\nE 1\nO 1\nE 2\nO 5\nE 4\nO 1\nO 6\nE 4\nO 1\nO 6\nE 4\nO 3\nE 1\nO 2\nO 1\nE 3\nE 5\nO 1\nO 3\nE 3\nO 3\nE 2\nE 3\nE 4\nE 4\nE 6\nE 6\nE 1\nO 1\nO 3\nE 4\nO 1\nO 2\nI 4\nE 5\nO 4\nI 3\nO 6\nO 5\nE 6\nO 1\nE 1\nO 5\nE 6\nO 3\nO 3\nO 1\nE 6\nO 4\nO 4\nE 3\nO 4\nO 1\nO 5\nO 2\nI 2\nO 3\nO 4\nO 1\nO 1\nO 5\nO 5\nO 3\nE 3\nE 1\nE 6\nO 2\nO 2\nE 2\nO 4\nO 1\nO 5\nE 2\nO 4\nO 2\nO 1\nO 5\nE 6\nE 4\nE 1\nE 6\nE 3\nE 4\nO 3\nE 4\nI 2\nO 4\nO 4\nE 4\nO 6\nI 1\nO 1\nE 5\nO 5\nO 3\nO 1\nI 3\nO 4\nO 5\nO 3\nO 1\nO 6\nE 1\nI 3\nE 2\nE 2\nE 2\nO 5\nO 3\nI 1\nE 2\nO 3\nE 2\nE 3\nI 4\nO 1\nO 3\nE 2\nO 4\nO 5\nO 6\nO 4\nE 3\nO 4\nO 1\nO 5\nO 1\nO 2\nO 5\nO 4\nO 3\nO 2\nO 4\nE 1\nO 2\nO 5\nO 3\nO 2\nI 1\nO 5\nO 1\nE 1\nO 3\nI 1\nO 4\nO 6\nO 5\nO 5\nO 1\nO 4\nO 1\nO 1\nE 2\nE 3\nE 1\nO 1\nO 3\nO 1\nO 6\nO 5\nO 5\nE 1\nO 1\nO 2\nO 5\nO 4\nO 3\nO 3\nO 4\nI 4\nO 4\nO 3\nO 4\nO 4\nO 5\nE 6\nO 2\nO 3\nE 6\nE 5\nE 3\nE 3\nI 1\nO 2\nE 5\nO 5\nE 1\nO 1\nO 4\nO 1\nE 1\nO 6\nE 1\nO 5\nE 1\nO 4\nO 1\nO 6\nO 6\nO 2\nO 3\nO 5\nE 4\nO 5\nE 1\nO 6\nO 3\nO 6\nE 3\nO 4\nO 2\nO 2\nO 5\nE 3\nE 5\nO 4\nO 4\nO 4\nO 1\nE 3\nO 4\nO 4\nO 1\nO 4\nO 6\nE 1\nO 1\nO 1\nO 6\nO 1\nE 5\nE 4\nO 6\nO 4\nO 4\nO 6\nO 3\nO 1\nO 3\nE 4\nO 3\nE 5\nO 1\nO 6\nO 5\nO 2\nE 2\nO 6\nE 2\nO 1\nO 6\nO 1\nO 4\nE 5\nO 4\nO 1\nO 4\nE 4\nO 6\nO 5\nO 1\nO 5\nO 2\nO 1\nO 1\nO 3\nE 3\nO 4\nO 1\nE 3\nO 1\nO 5\nO 5\nO 2\nO 1\nE 3\nO 5\nO 4\nE 2\nO 5\nO 1\nO 5\nO 4\nO 6\nO 4\nE 2\nO 1\nO 3\nE 1\nO 5\nO 4\nO 4\nO 6\nO 4\nE 1\nO 5\nO 1\nO 5\nO 3\nO 1\nO 5\nO 4\nO 2\nO 4\nO 4\nE 5\nE 1\nO 4\nO 6\nO 4\nO 1\nO 4\nO 3\nO 1\nO 1\nO 3\nO 2\nE 3\nE 6\nO 5\nO 3\nO 1\nO 6\nO 5\nO 2\nO 2\nO 3\nE 2\nO 2\nO 5\nE 6\nO 5\nE 1\nO 1\nO 1\nO 5\nO 4\nO 3\nE 1\nO 5\nO 4\nE 3\nO 5\nE 1\nO 2\nE 4\nO 3\nO 4\nO 1\nO 4\nO 4\nO 1\nO 5\nO 1\nO 1\nO 4\nE 1\nO 4\nO 4\nO 2\nO 3\nO 2\nO 4\nO 3\nO 3\nO 1\nO 5\nO 1\nO 5\nO 3\nO 5\nO 1\nO 1\nO 3\nO 5\nO 3\nO 3\nO 1\nE 6\nO 1\nO 1\nO 5\nO 3\nO 5\nO 1\nE 5\nO 1\nO 5\nO 3\nO 2\nO 5\nO 1\nO 4\nO 1\nO 5\nO 1\nO 2\nO 5\nO 4\nO 2\nO 5\nO 1\nO 5\nO 6\nO 2\nO 5\nO 6\nE 3\nO 4\nO 1\n"
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"15\\nO 8\\nE 4\\nI 1\\n\") == \"2 1 4\"\nassert solution(\"1\\nO 1\\n\") == \"0 1 0\"\nassert solution(\"15\\nE 8\\nE 4\\nI 1\\n\") == \"1 0 4\"\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\nO 4\") == \"2 1 4\"\nassert solution(\"2\\nE 5\\nO 2\\nI 3\\nE 4\") == \"4 1 2\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14\") == \"4\"\n\"\"\"\n\nimport sys\nimport math\n\ninput = sys.stdin.readline\n\nrooms = []\nfor _ in range(5):\n    rooms.append(list(map(int, input().split())))\n\np1, p2 = map(int, input().split())"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n''') == '4'\n"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14''') == '4'\n\n'''\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8\") == \"4\"\nassert solution(\"5 8\") == \"4\"\nassert solution(\"10 10\") == \"8\"\nassert solution(\"5 8\") == \"4\"\nassert solution(\"5 8\") == \"4\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14\\n') == '4'\n\n\"\"\"\nfrom numpy import ceil"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14\") == '4'\n\"\"\"\n\nfrom functools import lru_cache"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14') == '4'\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14\") == 4\n\"\"\"\n\nimport itertools\n\nr, l = map(int, input().split())\nlayout = []\nfor _ in range(r):\n    layout.append(list(map(int, input().split())))\n\nl1 = []\nfor y in range(r):\n    for x in range(r):\n        if x < r - 1:\n            l1.append((layout[y][x], layout[y][x + 1]))\n        if y < r - 1:\n            l1.append((layout[y][x], layout[y + 1][x]))\nl2 = []\nfor x in range(r):\n    for y in range(r):\n        if x < r - 1:\n            l2.append((layout[y][x], layout[y][x + 1]))\n        if y < r - 1:\n            l2.append((layout[y][x], layout[y + 1][x]))\n\nans = 0\n\nfor x, y in itertools.combinations(l1, 2):\n    a, b = min(x), max(x)\n    c, d = min(y), max(y)\n    if a < c and b < d:\n        ans += 1\n\nfor x, y in itertools.combinations(l2, 2):\n    a, b = min(x), max(x)\n    c, d = min(y), max(y)\n    if a < c and b < d:\n        ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14') == '4'\n\"\"\"\n\nfrom math import gcd, atan2, degrees"
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"-99.99 99.99 9999.99\") == '9.5850835'\nassert solution(\"99 9 999 9999\") == '9.585069'\n\"\"\"\n\nimport numpy as np\nfrom math import erf, sqrt, pi\nfrom scipy.special import gamma, gammainc\nfrom sympy import Poly, Interval\nfrom sympy.functions import sign\n"
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('-99.99 99.99 9999.99\\n99 9 999 9999\\n9 99 9 99 9\\n') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-99.99 99.99 9999.99\") == \"9.585073\"\nassert solution(\"99 9 999 9999\") == \"9.585073\"\nassert solution(\"9 99 9 99 9\") == \"9.585073\"\n\"\"\"\n"
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"-99.99 99.99 9999.99\") == '9.585073'\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-99.99 99.99 9999.99\\n99 9 999 9999\") == \"9.585073\"\nassert solution(\"-99.99 99.99 9999.99\\n1 2 3 4 5\") == \"0.499\"\n\"\"\"\n\nimport math\nfrom math import sqrt\nfrom math import erf\nfrom math import sin\nfrom math import cos\nfrom math import pi\nfrom math import floor\nfrom math import log\n"
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585072999999999'\n"
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"-99.99 99.99 9999.99\") == \"9.585073\"\n\"\"\"\nfrom decimal import *\n\nA, B, C, T1, T2, T3, T4, N, K, R, S, L = map(int, stdin.split())\ngetcontext().prec = 6"
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"-9.99 9.99 9999.99 9 9 999 9 999 9\") == \"9.585073\"\nassert solution(\"99 9 999 9999 99 9 999 9 999 9\") == \"9.585073\"\nassert solution
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-9.99 99.99 9999.99\\n99 9 999 9999\\n9 99 9 99 9\\n9 99 9 99 9\\n1 1 1 1 1\") == \"9.585073\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '-99.99 99.99 9999.99\\n99 9 999 9999\\n9 99 9 99 9\\n') == '9.585073'\n"
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20 30\\n2 10 20 2 24 18 28 10') == '12.74 127.83'\nassert solution('20 30\\n2 10 20 2 24 18 28 10') == '12.74 127.83'\n\"\"\""
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 30\\n2 10 20 2 24 18 28 10\") == \"12.74 127.83\"\n\"\"\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 30\\n2 10 20 2 24 18 28 10\\n\") == \"12.74 127.83\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 30\\n2 10 20 2 24 18 28 10\") == \"12.74 127.83\"\nassert solution(\"20 30\\n2 4 10 4 10 12 20\") == \"12.74 187.48\"\nassert solution(\"20 30\\n2 10 20 2 24 18 28 10\") == \"12.74 127.83\"\nassert solution(\"20 30\\n2 12 10 4 10 12 20\") == \"12.74 187.48\"\nassert solution(\"20 30\\n2 10 10 10 10 10 10 20\") == \"12.74 187.48\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20 30\\n2 10 20 2 24 18 28 10') == '12.74 127.83'\n"
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 30\\n2 10 20 2 24 18 28 10\") == \"12.74 127.83\""
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20 30\\n2 10 20 2 24 18 28 10') == '12.74 127.83'\nassert solution('20 30\\n1 5 15 4 6 9 20 1') == 'impossible'\nassert solution('20 30\\n2 10 20 2 24 18 28 10\\n5 1 9 3 2 4 1') == '31.17 180.0'\n"
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 30\\n2 10 20 2 24 18 28 10\") == \"12.74 127.83\"\n\n------Notes------\nFor the cases you may encounter where the cue ball has to pass over a ball, the formula that I used is the following:\n\nThe cue ball travels a distance d over the line, with a speed equal to the distance over the line.\nThe cue ball travels a distance d over the line, with a speed equal to the distance over the line.\nThe cue ball travels a distance d over the line, with a speed equal to the distance over the line.\nThe cue ball travels a distance d over the line, with a speed equal to the distance over the line.\nThe cue ball travels a distance d over the line, with a speed equal to the distance over the line.\nThe cue ball travels a distance d over the line, with a speed equal to the distance over the line.\n\nSo, d = 2h, where h is the distance between the dashed line and the front of the table.\n\nYou can also use:\n\nd = 2h\nd = 4h\nd = 6h\nd = 8h\nd = 10h\n\nTo further explain, if you set d to 10, then the cue ball will travel 10 units over the line (unless the cue ball passes over a ball, in which case the cue ball will travel only 9 units, as the cue ball is bounced off). If you set d to 8, it will travel 8 units and so on, until d = 6 and d = 4.\n\nI used the following website as a reference for some of the equations used.\n\nhttps://www.mathsisfun.com/algebra/vector-addition-cross-product.html\n\nThe website was in German, so I used https://translate.google.com to translate to English:\n\nhttps://www.tutorialspoint.com/vector-geometry-in-physics/vector-geometry-in-physics_translating-from-arabic-to-english\n\n\"\"\"\n\nw, l = [int(x) for x in input().split()]\nr, x1, y1, x2, y2, x3, y3, h = [int(x) for x in input().split()]\n\na = (x2 - x1) ** 2 + (y2 - y1) ** 2\nb = (x3 - x2) ** 2 + (y3 - y2) ** 2\nc = (x1 - x3) ** 2 + (y1 - y3) ** 2\ns = (a + b + c) ** 0.5"
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 30\\n2 10 20 2 24 18 28 10\") == \"12.74 127.83\"\n\"\"\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20 30\\n2 10 20 2 24 18 28 10') == '12.74 127.83'\n\"\"\"\nimport math"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('110\\n6') == '0116'\n\"\"\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('110') == '0116'\nassert solution('6') == '0116'\nassert solution('1110') == '0116'\nassert solution('000') == '0'\n"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n110\\n6') == '0116'\n\"\"\"\n\n\"\"\"\nOn a bar, there is a 20% discount for the whiskey. The price of a single whiskey is $5$.\n\nA customer can buy multiple types of whiskey, and only one glass of whiskey can be bought at a time.\n\nOn a given day, at the bar there are 1000 bottles of whiskey, and each one costs $2$. \n\nWrite a function that takes in the number of bottles purchased by the customer on that day, and returns the total cost of all the whiskey bought by the customer.\n\n-----Examples-----\nSample Input:\n2\nSample Output:\n8\n"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"110\\n6\") == \"0116\"\nassert solution(\"110\\n36\") == \"036\"\nassert solution(\"110\\n9\") == \"9\"\nassert solution(\"110\\n6\\n110\\n9\\n7\") == \"069\\n9\"\nassert solution(\"110\\n6\\n110\\n9\\n7\\n0\") == \"069\\n9\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1, f\"Expected: {test_output_1}\\nReceived: {solution(test_input_1)}\"\n\nassert solution(test_input_2) == test_output_2, f\"Expected: {test_output_2}\\nReceived: {solution(test_input_2)}\"\n\nprint(\"Hooray! The solution matched the expected output!\")\n\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter\n"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('110\\n6') == '0116'\nassert solution('110\\n0022') == '0022'\nassert solution('110\\n1111') == '1111'\nassert solution('110\\n9999') == '9999'\nassert solution('110\\n0001') == '0001'\n"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"110\\n6\") == \"0116\"\n\"\"\"\nimport unittest\nimport re\nfrom typing import List, Dict, Set\n\nclass Test(unittest.TestCase):\n\n    def test_solution1(self):\n        self.assertEqual(solution(\"110\\n6\"), \"0116\")\n    def test_solution2(self):\n        self.assertEqual(solution(\"11111111\\n22222222\"), \"11111\")\n    def test_solution3(self):\n        self.assertEqual(solution(\"11111111\\n22222222\\n11111111\"), \"11111\")\n    def test_solution4(self):\n        self.assertEqual(solution(\"11\\n111111\\n111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"110\\n6\") == \"0116\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"110\\n6\") == \"0116\"\nassert solution(\"2\\n11\\n9\") == \"2109\"\nassert solution(\"1\\n3\\n5\\n7\\n9\\n10\") == \"0532\"\nassert solution(\"1\\n1\\n1\\n9\") == \"09\"\nassert solution(\"1\\n1\\n1\\n9\\n9\") == \"099\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"110\\n6\") == \"0116\"\nassert solution(\"110\\n6\\n0\") == \"0\"\nassert solution(\"110\\n6\\n0\\n5\") == \"05\"\nassert solution(\"110\\n6\\n0\\n5\\n0\\n9\\n0\\n1\") == \"9\"\nassert solution(\"110\\n6\\n0\\n5\\n0\\n9\\n0\\n1\") == \"9\"\n\"\"\"\n\nfrom typing import NamedTuple\nfrom collections import deque\nfrom itertools import permutations\nimport time\n\n\nclass Magnet(NamedTuple):\n    cost: int\n    combi: str\n    _idx: int = None\n"
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\\n4 4 4\") == '0 2 4'\n\"\"\""
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 3\\n4 4 4') == '0 2 4'\n\"\"\""
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\") == '0 0 0 0 2 2'\nassert solution(\"1 1\") == '0 0 1'\nassert solution(\"5 3\") == '0 0 1 1 0'\nassert solution(\"3 4\") == '0 0 0 1 1 1'\nassert solution(\"6 5\") == '0 0 0 0 1 0 1'\n\"\"\"\n\nT, N = [int(i) for i in stdin.split()]\nlst = [int(i) for i in stdin.split()][1:]\n\nbreaks = {i: lst[i] for i in range(N)}\n\nrem = N\nfor i in breaks:\n    breaks[i] = breaks[i] - min(breaks[i], T - rem)\n    rem -= breaks[i]\n\nbreaks = sorted(breaks.items(), key=lambda x: x[1])\n\nprint(*[i[1] for i in breaks[:N - 1]])\n"
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\\n4 4 4\") == \"0 2 4\"\n\"\"\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 3\\n4 4 4') == '0 2 4'\n"
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4 4\\n4') == '0 2 4'\n\"\"\"\n\nT, N = map(int, input().split())\nlengths = [int(x) for x in input().split()]\n\nmin_time = min(lengths)\nmax_time = max(lengths)\n\nprint(max_time - min_time)\n"
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\nassert solution('a\\nb\\nc\\n') == 'a\\nb\\nc\\n'\n\nassert solution('a\\nb\\n\\nc\\n') == 'a\\n\\n\\nb\\n\\n\\nc\\n'\n\nassert solution('a\\nb\\nc') == 'a\\n\\n\\nb\\n\\n\\n\\n'\n\nassert solution('a\\nb\\nc\\n\\n\\t\\n\\n') == 'a\\n\\n\\t\\n\\n\\n\\n\\nb\\n\\n\\t\\n\\n\\n\\n\\n\\n\\n'"
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 3\\n4 4 4') == '0 2 4'\nassert solution('8 3\\n2 2 2') == '0 2 2'\nassert solution('8 3\\n1 1 1') == '0 1 1'\n"
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3\\n4 4 4') == '0 2 4'\n\nimport sys\n\n_, T, N = sys.stdin.readline().strip().split()\nT, N = int(T), int(N)\n\n_, A = sys.stdin.readline().strip().split()\nA = [int(a) for a in A]\n\nA.sort()\n\ni, k, cnt = 0, 0, 0\nwhile k < N and i < N:\n    cnt = max(cnt, A[i] + k)\n    k += 1\n    i += 2\n\nreturn cnt\n\nassert solution('8 3\\n4 4 4') == '0 2 4'\n\nimport sys\n\n_, T, N = sys.stdin.readline().strip().split()\nT, N = int(T), int(N)\n\n_, A = sys.stdin.readline().strip().split()\nA = [int(a) for a in A]\n\nA.sort()\n\ni, k, cnt = 0, 0, 0\nwhile k < N and i < N:\n    cnt = max(cnt, A[i] + k)\n    k += 1\n    i += 2\n\nreturn cnt\n\nassert solution('8 3\\n4 4 4') == '0 2 4'\n\nimport sys\n\n_, T, N = sys.stdin.readline().strip().split()\nT, N = int(T), int(N)\n\n_, A = sys.stdin.readline().strip().split()\nA = [int(a) for a in A]\n\nA.sort()\n\ni, k, cnt = 0, 0, 0\nwhile k < N and i < N:\n    cnt = max(cnt, A[i] + k)\n    k += 1\n    i += 2\n\nreturn cnt\n\nassert solution('8 3\\n4 4 4') == '0 2 4'\n\nimport sys\n\n_, T, N = sys.stdin.readline().strip().split()\nT, N = int(T), int(N)\n\n_, A = sys.stdin.readline().strip().split()\nA = [int(a) for a in A]\n\nA.sort()\n\ni, k, cnt = 0, 0, 0\nwhile k < N and i < N:\n    cnt = max(cnt, A[i] + k)\n    k += 1\n    i += 2\n\nreturn cnt\n\nassert solution('8 3\\n4 4 4') == '0 2 4'\n\nimport sys\n\n_, T, N = sys.stdin.readline().strip().split()\nT, N = int(T), int(N)\n\n_, A = sys.stdin.readline().strip().split()\nA = [int(a) for a in A]\n\nA.sort()\n\ni, k, cnt = 0, 0, 0\nwhile k < N and i < N:\n    cnt = max(cnt, A[i] + k)\n    k += 1\n    i += 2\n\nreturn cnt"
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n4 3 4') == '0 2 4'\n\"\"\"\n\nT, N = input().split()\nN = int(N)\nA = list(map(int, input().split()))\n\nA = sorted(A)\nsum_b = 0\ni = 0\nwhile sum_b < int(T):\n    sum_b += A[i]\n    i += 1\n\nprint(' '.join(map(str, A[:i])))\n"
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5') == 'impossible'\n\nSample Input:\n5\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\nSample Output:\npossible\n\n\"\"\"\n\n\"\"\"\nWe need to make a map where the intersection is the key and the list of intersections it's connected to is the value. We will keep doing this recursively for each connected component. When we're done with all components, we will have a map where each intersection is a key, and the value is the number of connected components this intersection is a part of.\n\nNow we just need to count how many connected components there are.\n\nFirst, we build a graph of intersection and it's neighbours.\n\nThen we find all components, and for each component we make a recursive call.\n\nOnce we are done with all components, we count how many components we have.\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\nassert solution(\"4\\n8\\n2 3 4 5 6 7\\n3 3 5 6 7\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"possible\"\nassert solution(\"4\\n8\\n1 2 2 5 7\\n3 3 5 6 7\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\""
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7') == 'impossible'\nassert solution('4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5') == 'possible'\n\"\"\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\nassert solution(\"4\\n6\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\nassert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"possible\"\n\n\"\"\""
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5') == 'impossible'\nassert solution('4\\n6\\n2 2 3\\n2 3 4\\n2 4 6\\n2 1 4\\n4 2 5\\n4 3 5\\n4 4 6\\n4 1 6\\n4 1 2\\n2 1 3\\n2 1 5\\n4 2 5\\n4 3 5\\n4 4 5\\n4 3 6') == 'impossible'\nassert solution('4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\\n4 6 7\\n4 7 6\\n4 6 5\\n4 2 5\\n4 1 2\\n2 1 3\\n2 1 5\\n4 2 5\\n4 3 5\\n4 4 5\\n4 3 6\\n4 4 6\\n4 1 6\\n4 1 2\\n2 1 3\\n2 1 5\\n4 2 5\\n4 3 5\\n4 4 5\\n4 3 6') == 'possible'\nassert solution('3\\n7\\n2 2 3\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1 2\\n4 1 5\\n4 1 6\\n4 1"
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == 'impossible'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\nassert solution(\"7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"possible\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 0\\n0 10\\n2\\n4 10\\n4 0') == '4.00000'\nassert solution('0 0\\n0 10\\n2\\n4 10\\n4 0') == '4.00000'\nassert solution('0 0\\n0 10\\n2\\n4 10\\n4 0') == '4.00000'\nassert solution('0 0\\n0 10\\n2\\n4 10\\n4 0') == '4.00000'\nassert solution('0 0\\n0 10\\n2\\n4 10\\n4 0') == '4.00000'\n"
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n0 0\\n0 10\\n2\\n4 10\\n4 0') == '4.00000'\n\n\"\"\"\n\nimport math\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n10 10\\n0 0\\n0 10\\n5 5\\n') == 'impossible'\nassert solution('3\\n10 10\\n5 5\\n') == '5.00000'\nassert solution('4\\n10 10\\n10 0\\n10 10\\n0 0\\n') == '9.00000'\nassert solution('4\\n10 10\\n10 0\\n10 10\\n0 0\\n') == '9.00000'\nassert solution('4\\n0 0\\n10 10\\n10 0\\n10 10\\n0 0\\n') == '9.00000'"
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0\\n0 10\\n2\\n4 10\\n4 0\") == \"4.00000\"\n\"\"\"\n\nimport os\nimport sys\nimport math"
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0\\n0 10\\n2\\n4 10\\n4 0\") == \"4.00000\"\nassert solution(\"0 0\\n0 10\\n2\\n4 10\\n4 0\\n0 10\\n0 0\") == \"impossible\"\nassert solution(\"0 0\\n0 10\\n2\\n4 10\\n4 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0 0\\n0 10\\n0"
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n10 0\\n1 1\\n0 0\\n1 1') == '4.00000'\n\"\"\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 0\\n0 10\\n2\\n4 10\\n4 0\\n\") == \"4.00000\"\n\"\"\""
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0\\n0 10\\n2\\n4 10\\n4 0\") == \"4.00000\"\n\"\"\"\n\nimport numpy as np\n\nT = int(input())"
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == '4.00000'\nassert solution(\"\"\"0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == 'impossible'\nassert solution(\"\"\"0 0\n0 10\n3\n5 15\n7 10\n\"\"\") == '3.50000'\nassert solution(\"\"\"0 0\n0 10\n5\n7 10\n\"\"\") == '5.00000'\nassert solution(\"\"\"0 0\n0 10\n6\n7 10\n\"\"\") == '6.00000'\n\n\"\"\""
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == \"4.00000\"\nassert solution(\"\"\"0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == \"impossible\"\n\n-----Solution-----\n\n```python\n"
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2') == '1'\nassert solution('3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n4 3') == '0'\n\"\"\"\n\nn, r, k = map(int, stdin.readline().strip().split())\ngrid = [list(map(int, stdin.readline().strip().split())) for _ in range(k)]"
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\") == \"1\"\nassert solution(\"3 2 3\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\") == \"0\"\nassert solution(\"3 2 3\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n3 2\") == \"0\""
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\") == 1\n\"\"\""
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\") == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 1\nassert solution('5 2 4\\n1 1\\n1 3\\n3 1\\n3 3') == 1\n'''\n\nimport sys"
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('1\\n') == 0\nassert solution('2\\n') == 1\nassert solution('3\\n') == 0\nassert solution('1 2\\n') == 1\n"
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 5\\n1 1\\n1 3\\n3 1\\n3 3\") == 1\n\"\"\""
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('1 2\\n') == 0\nassert solution('3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n') == 1\nassert solution('3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n4 4\\n5 5\\n') == 1\nassert solution('3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n4 4\\n5 5\\n6 6\\n') == 0\n"
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'impossible'\nassert solution('0 0') == 'impossible'\nassert solution('1 1') == 'impossible'\nassert solution('0 1\\n1 0') == 'impossible'\nassert solution('1 1\\n1 2') == 'impossible'\n"
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3') == '5 3\\n1 0\\n2 4'\nassert solution('4 5\\n0 1\\n0 2\\n1 3\\n2 3') == 'impossible'\nassert solution('4 5\\n0 1\\n0 2\\n1 3\\n2 3\\n0 3') == 'impossible'\nassert solution('4 5\\n0 1\\n0 2\\n1 2\\n2 2\\n0 3') == 'impossible'\nassert solution('4 5\\n0 1\\n0 2\\n1 2\\n2 2\\n3 3') == 'impossible'\n"
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2\\n1 0') == '2 1'\nassert solution('4\\n1 0\\n2 3\\n4 3') == '4 1'\nassert solution('6\\n1 0\\n1 1\\n4 2\\n5 3\\n6 3') == '6 2'\nassert solution('4\\n1 0\\n1 2\\n3 3') == 'impossible'\n"
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\") == \"4 3\"\nassert solution(\"3 3\\n0 1\\n0 2\\n1 1\\n1 2\\n2 2\\n0 1\\n1 2\") == \"Impossible\"\nassert solution(\"4 2\\n0 1\\n0 2\\n1 1\\n1 2\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\") == \"5 3\\n1 0\\n2 4\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3') == '5 3\\n1 0\\n2 4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3') == '5 3\\n1 0\\n2 4'\n\"\"\"\n\nfrom math import ceil\n\nN, M = [int(x) for x in input().split()]\nA = []\nfor i in range(M):\n    a = [int(x) for x in input().split()]\n    A.append(a)\n\nvisited = set()\nstdin = set()\nstdout = set()"
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n0 1\\n2 3\\n1 2\\n3 4') == '5 3'\nassert solution('1 2\\n1 3') == 'impossible'\nassert solution('3 3\\n0 1\\n0 2\\n0 3') == '1 2\\n2 3'\nassert solution('3 3\\n0 1\\n0 2\\n1 3') == 'impossible'\nassert solution('5 5\\n0 1\\n1 3\\n2 3\\n3 2\\n3 4') == '5 3'\n"
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\") == \"5\\n3 0\\n3 4\"\nassert solution(\"5 2\\n0 1\\n0 2\\n1 3\\n2 3\\n4 3\") == \"impossible\"\nassert solution(\"5 5\\n0 1\\n0 2\\n1 3\\n2 3\\n4 3\") == \"impossible\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3''') == '''5 3\n1 0\n2 4'''\nassert solution('''7 5\n0 1\n1 2\n0 2\n1 3\n2 4\n1 5\n2 6\n2 4\n4 5\n5 6\n0 4\n0 3\n1 2\n2 3\n3 4\n4 6\n5 6\n''') == '''5 4\n2 0\n3 5\n2 1\n3 4'''\nassert solution('''7 6\n0 1\n0 2\n1 3\n2 3\n0 2\n2 1\n4 3\n4 1\n0 4\n0 5\n1 5\n2 6\n2 4\n3 6\n4 6\n5 6\n''') == '''1 4\n2 3\n3 5\n'''\nassert solution('''7 6\n0 1\n0 2\n1 3\n2 3\n0 2\n2 1\n4 3\n4 1\n0 4\n0 5\n1 5\n2 6\n2 4\n3 6\n4 6\n5 6\n''') == '''impossible'''\n\n-----Problem-----\nT-shirt names have a special property: when you split the name into two halves, the first half and the second half, taken in ascending order, are equal. For instance, the first half of \"ABCDEF\" is \"ABC\" and the second half is \"DEF\"; the first half of \"ABCD\" is \"ABC\" and the second half is \"D\". Note that this property is different from the property that when you split a word into two halves, the two halves taken in descending order are equal. For instance, the first half of \"GHIJKL\" is \"GHIJ\" and the second half is \"KL\".\n\nT-shirts are in huge demand, so your company wants to create a large number of T-shirts, each with a unique name. You have come up with a program to help you. You are given a list of $N$ names, each of which consists of exactly two words. You want to generate $2^N$ T-shirt names with unique names. You will do this by creating the cartesian product of the two words in each name in the list.\n\nNote that the first half of each word in the name will be lexicographically smaller than the second half.\n\nWrite a program to generate all possible T-shirt names.\n\n-----Solution-----"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0\\n0 1\\n1 0\\n1 1\") == \"2\\n1 2\"\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solve(self, stdin: List[str]) -> str:\n        pass"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1\\n0 0\\n0 1\\n1 0\\n1 1') == '2\\n1 2'\nassert solution('3 1\\n0 0\\n1 1\\n2 2') == '2\\n1 2'\n\"\"\""
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n0 0\\n0 1\\n1 0\\n1 1\") == \"2\\n1 2\"\nprint(\"Test 1 OK.\")\n\nassert solution(\"4 1\\n0 0\\n0 1\\n1 0\\n1 1\") == \"3\\n1 2\"\nprint(\"Test 2 OK.\")\n\nassert solution(\"5 1\\n0 0\\n0 1\\n1 0\\n1 1\\n4 3\") == \"4\\n1 2\"\nprint(\"Test 3 OK.\")\n\nassert solution(\"6 1\\n0 0\\n0 1\\n1 0\\n1 1\\n1 2\\n2 0\\n2 2\") == \"4\\n2 4\"\nprint(\"Test 4 OK.\")\n\nassert solution(\"7 1\\n0 0\\n0 1\\n1 0\\n1 1\\n1 2\\n2 0\\n2 2\\n2 3\\n3 0\\n3 3\") == \"4\\n1 2 3\"\nprint(\"Test 5 OK.\")"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 1\n0 0\n0 1\n1 0\n1 1''') == '2\\n1 2'\n\nassert solution('''4 2\n1 1\n1 0\n0 0\n1 1''') == '1\\n1 3'\n\nassert solution('''4 3\n0 0\n0 1\n1 0\n1 1''') == '1\\n1 3'\n\nassert solution('''4 4\n0 0\n0 1\n0 0\n0 1\n1 1\n1 1\n0 1\n0 1\n1 1''') == '1\\n1 3'\n\nassert solution('''4 4\n0 0\n0 1\n1 0\n1 1\n0 0\n1 1\n0 1\n1 1\n0 1\n0 1\n0 1\n1 1''') == '1\\n2 4'"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_cases.TEST_CASE_1) == \"3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"1\\n\"\n\"1 1\\n\") == \"1\\n1\"\nassert solution(\n\"2\\n\"\n\"0 0\\n\"\n\"0 1\\n\"\n) == \"1\\n0\"\nassert solution(\n\"2\\n\"\n\"1 2\\n\"\n\"1 0\\n\"\n) == \"1\\n1\"\nassert solution(\n\"2\\n\"\n\"1 1\\n\"\n\"2 2\\n\"\n) == \"1\\n1\"\nassert solution(\n\"2\\n\"\n\"0 0\\n\"\n\"1 1\\n\"\n\"2 2\\n\"\n) == \"1\\n1\"\n"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n0 0\\n0 1\\n1 0\\n1 1\") == \"2\\n1 2\""
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1\\n0 0\\n0 1\\n1 0\\n1 1') == '2\\n1 2'\nassert solution('4 1\\n0 0\\n0 1\\n1 0\\n1 1') == '1\\n1'\nassert solution('4 1\\n0 0\\n0 1\\n1 0\\n1 1') == '1\\n1'\nassert solution('4 1\\n0 0\\n0 1\\n1 0\\n1 1') == '1\\n1'\nassert solution('4 1\\n0 0\\n0 1\\n1 0\\n1 1') == '1\\n1'\n"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '2\\n1 2\\n'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n3 4') == '2'\nassert solution('1 2\\n3 2') == '0'\nassert solution('1 2\\n4 2') == '-1'\nassert solution('1 2\\n5 2') == '-1'\n\nprint(solution(input()))"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 2\\n1 3 5 7 9 11 13 15 17 16') == '1'\n"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 3 5 7\") == \"1\"\nassert solution(\"4 2\\n1 3 5 7\\n1 2 4 6\") == \"0\"\nassert solution(\"4 2\\n1 3 5 7\\n1 2 4 6\\n1 3 5 7\\n1 2 4 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5 1\n1 2 3 4 5\n''') == '0'\n\nassert solution('''\n7 2\n1 3 5 7 9 11 13\n''') == '0'\n\nassert solution('''\n3 1\n1 2 3\n''') == '0'\n\nassert solution('''\n4 3\n1 2 3 4\n''') == '0'\n\nassert solution('''\n7 6\n1 2 3 4 5 6 7\n''') == '0'"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 2\\n1 3 5 7 9 11 13 15 17 16') == '1'\n\"\"\"\n\na, b = list(map(int, input().split()))\nnums = list(map(int, input().split()))\nnums.sort()\ndif = nums[-b] - nums[b-1]\n\nfor i in range(b-1, -1, -1):\n    if nums[i] - nums[i+1] < dif:\n        dif = nums[i] - nums[i+1]\n\nprint(dif)"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 2\\n1 3 5 7 9 11 13 15 17 16') == '1'\n\n-----Problem-----\nTask\nGiven two integers n and k, find the minimal distance between any pair of exactly n integers. All the integers are distinct, and each integer is in the range [1, 2n].\n\nInput Format\nThe input consists of two lines. The first line contains an integer n, denoting the number of integers, and the second line contains n space-separated integers describing the n integers.\n\nConstraints\n1 <= n <= 100\n1 <= k <= n\n1 <= a_i <= 2n\nOutput Format\nOutput the minimum distance between any two integers.\n\nSample Input 0\n5\n1 3 2 6 5\nSample Output 0\n2\n\n-----\n10 2\n1 3 5 7 9 11 13 15 17 16\n\n1\n-----\n5 3\n1 3 2 6 5\n\n1\n-----\n3 2\n1 3 2\n\n0\n-----\n3 2\n1 2 3\n\n1\n\n-----\n4 4\n1 2 3 4\n\n0\n\n-----\n4 3\n1 2 3 4\n\n0\n\n-----\n5 4\n1 2 3 4 5\n\n0\n\n-----\n3 2\n1 2 3\n\n1\n\n-----\n4 2\n1 2 3 4\n\n2\n\n-----\n4 2\n1 2 3 4\n\n0\n\n-----\n3 2\n1 2 3\n\n1\n\n-----\n5 3\n1 2 3 4 5\n\n2\n\n-----\n5 4\n1 2 3 4 5\n\n0\n\n-----\n2 3\n1 2 3\n\n2\n\n-----\n5 4\n1 2 3 4 5\n\n0\n\n-----\n6 4\n1 2 3 4 5 6\n\n4\n\n-----\n7 4\n1 2 3 4 5 6 7\n\n0\n\n-----\n7 5\n1 2 3 4 5 6 7\n\n0\n\n-----\n8 6\n1 2 3 4 5 6 7 8\n\n6\n\n-----\n9 7\n1 2 3 4 5 6 7 8 9\n\n6\n\n-----\n10 8\n1 2 3 4 5 6 7 8 9 10\n\n0\n\n-----\n9 9\n1 2 3 4 5 6 7 8 9 10\n\n0\n\n-----\n5 5\n1 2 3 4 5\n\n0\n\n-----\n5 5\n1 2 3 4 5\n\n0\n\n-----\n5 5\n1 2 3 4 5\n\n0\n\n-----\n10 10\n1 2 3 4 5 6 7 8 9 10\n\n0\n\n-----\n5 5\n1 2 3 4 5\n\n0\n\n-----\n5 5\n1 2 3 4 5\n\n0\n\n-----\n7 7\n1 2 3 4 5 6 7\n\n0\n\n-----\n7 7\n1 2 3 4 5 6 7\n\n0\n\n-----\n7 7\n1 2 3 4 5 6 7\n\n0\n\n-----\n7 7\n1 2 3 4 5 6 7\n\n0\n\n-----\n5 5\n1 2 3 4 5\n\n0\n\n-----\n6 6\n1 2 3 4 5 6\n\n0\n\n-----\n5 6\n1 2 3 4 5 6\n\n0\n\n-----\n5 6\n1 2 3 4 5 6\n\n0\n\n-----\n5 6\n1 2 3 4 5 6\n\n0\n\n-----\n7 7\n1 2 3 4 5 6 7\n\n0\n\n-----\n5 5\n1 2 3 4 5\n\n0\n\n-----\n7 7\n1 2 3 4 5 6 7\n\n0\n\n-----\n8 8\n1 2 3 4 5 6 7 8\n\n0\n\n-----\n9 9\n1 2 3 4 5 6 7 8 9\n\n0\n\n-----\n10 10\n1 2 3 4 5 6 7 8 9 10\n\n0\n\n-----\n4 4\n1 2 3 4\n\n0\n\n-----\n4 3\n1 2 3 4\n\n0\n\n-----\n4 3\n1 2 3 4\n\n0\n\n-----\n4 4\n1 2 3 4\n\n0\n\n-----\n4 4\n1 2 3 4\n\n0\n\n-----\n4 3\n1 2 3 4\n\n0\n\n-----\n4 3\n1 2 3 4\n\n0\n\n-----\n3 2\n1 2 3\n\n2\n\n-----\n3 2\n1 2 3\n\n1\n\n-----\n3 2\n1 2 3\n\n1\n\n-----\n4 3\n1 2 3 4\n\n0\n\n-----\n3 2\n1 2 3\n\n1\n\n-----\n3 2\n1 2 3\n\n1\n\n-----\n3 2\n1 2 3\n\n1\n\n-----\n3 2\n1 2 3\n\n0\n\n-----\n4 3\n1 2 3 4\n\n2\n\n-----\n4 4\n1 2 3 4 5\n\n2\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2 3 4 5\n\n0\n\n-----\n4 4\n1 2"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 2\\n1 3 5 7 9 11 13 15 17 16') == '1'\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\nheights = sorted(map(int, stdin.readline().split()))\n\nmin_diff = 100000000000000\nfor i in range(n - k + 1):\n    min_diff = min(min_diff, heights[i + k - 1] - heights[i])\n\nprint(min_diff)\n"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n1 3 5 7 9') == '1', 'Incorrect solution for input 5 2'\nassert solution('3 2\\n1 2 3') == '0', 'Incorrect solution for input 3 2'\n\"\"\"\n\n\n\nfrom typing import List, Set, Tuple, Dict, Callable, Optional\n"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 2\\n1 3 5 7 9 11 13 15 17 16') == '1'\n\n\"\"\"\n\n\n\n\"\"\"\nn, k = map(int, stdin.readline().split())\nheights = list(map(int, stdin.readline().split()))\n\nh_min = heights[0]\nh_max = heights[0]\nfor i in range(1, n):\n    if heights[i] < h_min:\n        h_min = heights[i]\n    if heights[i] > h_max:\n        h_max = heights[i]\n\nresult = h_max - h_min\nfor i in range(k - 1):\n    h_min = min(h_min, heights[i])\n    h_max = max(h_max, heights[i + k - 1])\n    result = min(result, h_max - h_min)\n\nprint(result)\n\"\"\""
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 2\\n1 3 5 7 9 11 13 15 17 16') == '1'\n\"\"\"\n\nimport sys\n\nn, k = list(map(int, sys.stdin.readline().split()))\na = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"7 4\"\n\n-----Test 0-----\nTest1:\nInput:\n3 3\nBAC\n3 6\n1 5\nOutput:\n6 6\nTest2:\nInput:\n2 5\nABB\n3 6\n1 5\nOutput:\n5 5\nTest3:\nInput:\n3 3\nABC\n3 6\n1 5\nOutput:\n5 6\nTest4:\nInput:\n4 1\nABCD\n1 4\n1 5\nOutput:\n5 6\n\"\"\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"7 4\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7') == '7 4'\n\"\"\""
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"7 4\"\nassert solution(\"7 5\\nBACD\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"7 1\"\nassert solution(\"7 5\\nACDB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"7 9\"\nassert solution(\"7 5\\nACD\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"6 9\"\nassert solution(\"7 5\\nABD\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"8 7\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == '7 4'\nprint(solution(\"7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\"))"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7') == '7 4'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"7 4\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 \u00ab\u0420\u0430\u0437\u0440\u0443\u0448\u0438\u0442\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u0443\u00bb\n\u0422\u0440\u0438 \u0434\u0440\u0443\u0433\u0430 \u0434\u0435\u043b\u0430\u044e\u0442 \u0432 \u043e\u0434\u0438\u043d \u0432\u044b\u0431\u043e\u0440. \u0418\u0437\u0432\u0435\u0441\u0442\u043d\u044b \u0432\u0435\u0441\u0430 \u0442\u0440\u0435\u0445 \u0434\u0440\u0443\u0437\u0435\u0439. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u043a\u0430\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0439 \u0434\u0440\u0443\u0433, \u0447\u0442\u043e\u0431\u044b \u0432 \u0441\u0443\u043c\u043c\u0435 \u043e\u043d\u0438 \u0432\u0437\u044f\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430. \u0427\u0438\u0441\u043b\u0430 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 100 \u0438 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\u0412\u0432\u043e\u0434    \u0412\u044b\u0432\u043e\u0434\n3 3\n2 2\n1 3\n\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 2\n\"\"\""
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\\n\") == '7 4'\n\nimport sys\nassert solution(sys.stdin.read()) == sys.stdout.read()\n"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(read()) == expected\n\n----\n\n\"\"\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5') == '5 5'\n\"\"\""
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 LET A = 1\\n2 PRINT A\") == '1'\nassert solution(\"1 LET A = 1\\n2 PRINT A\\n3 LET B = 2\\n4 PRINT A\\n5 PRINT B\") == '2'\n\"\"\""
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 LET A = 1') == 'A = 1'\nassert solution('2 PRINT \"HELLO THERE \"') == 'HELLO THERE '\nassert solution('3 PRINTLN A') == 'A'\nassert solution('4 LET A = A + 1') == 'A = 2'\n"
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\") == \"\"\"\nHELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nHELLO THERE 4\nHELLO THERE 5\nDONE\n\"\"\"\n\nassert solution(\"\"\"\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\") == \"\"\"\nHELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nHELLO THERE 4\nDONE\n\"\"\"\n\nassert solution(\"\"\"\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\") == \"\"\"\nHELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nDONE\n\"\"\"\n\n\"\"\"\n- \n\n**Cool stuff:**\n\n- If you want to make a list of numbers, you can use `range()`\n\n```python\nrange(10)\n"
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\") == \"\"\"10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\"\n\n\"\"\"\nA = 1\nPRINT \"HELLO THERE \"\nPRINTLN A\n\na = 1\nb = 1\nPRINTLN a\nPRINTLN b\n\"\"\""
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\"\n) == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\") == (\n\"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\")\n\"\"\"\n\nimport sys\n\ninp = sys.stdin.readlines()\n\nd = dict()\nfor i, line in enumerate(inp):\n    label, command, *arg = line.split()\n    d[label] = i\n\np = [0]\nline = 0\nwhile line < len(inp):\n    line = p[0]\n    if inp[line][0].isnumeric():\n        p[0] += int(inp[line].strip())\n    elif inp[line][0] == 'L':\n        if inp[line][2] == 'G':\n            if inp[line][4] == 'O':\n                print('GOTO', inp[line][6:])\n            else:\n                print('GOTO', int(inp[line][4:]))\n        else:\n            if inp[line][4] == 'O':\n                print('LET', inp[line][6:].strip())\n            else:\n                print('LET', int(inp[line][4:]))\n    elif inp[line][0] == 'I':\n        if inp[line][2] == 'F':\n            if inp[line][4] == 'T':\n                print('IF', inp[line][6:].strip(), 'THEN GOTO', inp[line][10:])\n            else:\n                print('IF', inp[line][6:].strip(), 'THEN GOTO', int(inp[line][10:]))\n        else:\n            if inp[line][4] == 'O':\n                print('IF', inp[line][6:].strip(), 'THEN GOTO', inp[line][9:])\n            else:\n                print('IF', inp[line][6:].strip(), 'THEN GOTO', int(inp[line][9:]))\n    elif inp[line][0] == 'P':\n        if inp[line][2] == 'R':\n            if inp[line][4] == 'O':\n                print('PRINT', inp[line][6:].strip())\n            else:\n                print('PRINT', int(inp[line][4:]))\n        else:\n            if inp[line][4] == 'O':\n                print('PRINTLN', inp[line][6:].strip())\n            else:\n                print('PRINTLN', int(inp[line][4:]))\n    elif inp[line][0] == 'D':\n        if inp[line][2] == 'O':\n            print('PRINTLN', int(inp[line][4:]))\n        else:\n            print('PRINT', int(inp[line][4:]))\n    elif inp[line][0] == 'S':\n        print('LET', int(inp[line][2:]))\n    elif inp[line][0] == 'G':\n        print('GOTO', int(inp[line][2:]))\n    elif inp[line][0] == 'C':\n        print('LET', int(inp[line][2:]))\n    p[0] += 1\n"
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\") == \"\"\"\nHELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nHELLO THERE 4\nHELLO THERE 5\nDONE\n\"\"\".lstrip()\n\n\nassert solution(\n\"\"\"\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\") == \"\"\"\nHELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nHELLO THERE 4\nDONE\n\"\"\".lstrip()\n\nassert solution(\n\"\"\"\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\") == \"\"\"\nHELLO THERE 1\nDONE\n\"\"\".lstrip()\n\n\"\"\"\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n''') == '''\nHELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nHELLO THERE 4\nHELLO THERE 5\nDONE\n'''\n\nassert solution('''\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n''') == '''\nHELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nHELLO THERE 4\nDONE\n'''\n\nassert solution('''\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n''') == '''\nHELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nHELLO THERE 4\nDONE\n'''\n\nassert solution('''\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n''') == '''\nHELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nDONE\n'''\n\nassert solution('''\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n''') == '''\nHELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nDONE\n'''"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n0 1\n''') == '3'\nassert solution('''4\n0 1\n''') == '1'\nassert solution('''4\n0 1\n1 1\n''') == '0'\nassert solution('''5\n0 1\n2 1\n1 1\n''') == '1'\nassert solution('''7\n0 1\n0 1\n2 1\n1 1\n1 1\n''') == '0'\n"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n'''\n\nimport math"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3 0 1\") == \"3\"\n\"\"\"\n\nimport sys\nimport functools\n\nsys.setrecursionlimit(100000000)"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 1') == '3'\n\"\"\"\n\n\"\"\"\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u043e $N$ \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u043b \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 $N$ \u0447\u0438\u0441\u0435\u043b, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 $10^9$, \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0443\u043b\u044f. \u0422\u0440\u0435\u0442\u044c\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 $N-1$ \u0447\u0438\u0441\u0435\u043b, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 $10^9$, \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0443\u043b\u044f.\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0434\u0435\u043b. \u0418\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0447\u0442\u043e \u0434\u0435\u043b\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0434\u0435\u043b. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f $1 \\to 1$ \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0434\u0435\u043b\u043e \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438.\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0434\u0435\u043b, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 $10^9$. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0433\u043e \u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\nSample Input 1:\n2\n1 0\nSample Output 1:\n1\nSample Input 2:\n3\n3 0 1\n0 1\nSample Output 2:\n3\nSample Input 3:\n5\n4 2 4 2 4\n2 3 1 4 3\nSample Output 3:\n2\n\"\"\"\n\nn = int(input())\ndiff1 = list(map(int, input().split()))\ndiff2 = list(map(int, input().split()))\ndiff3 = list(map(int, input().split()))\n\nsum1 = sum(diff1)\nsum2 = sum(diff2)\nsum3 = sum(diff3)\n\nprint(sum1*sum2*sum3)"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 1\\n0 1\") == \"3\"\n"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 0 1\\n0 1') == '3'"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 0 1\\n0 1') == '3'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict, Counter\n\nn = int(sys.stdin.readline())\n\ntasks = defaultdict(int)\ntasks[1] = 0\ntasks[2] = 0\n\nfor i in range(1, n):\n    tasks[i + 1] += sum(tasks.values())\n    tasks[i] += tasks[i - 1]\n\nprint(tasks[n])\n"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\n------Solution------\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 0 1\\n0 1\") == 3\nassert solution(\"3 0 1\\n0 1\\n1 0\") == 3\nassert solution(\"3 0 1\\n0 1\\n1 0\\n2 0\") == 5\nassert solution(\"3 0 1\\n0 1\\n1 0\\n2 0\\n2 1\") == 7\nassert solution(\"3 0 1\\n0 1\\n1 0\\n2 0\\n2 1\\n3 0\") == 7\n"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 0 1') == '3'\n\"\"\""
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\") == \"LLRRRRLL\"\n\nassert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\") == \"impossible\"\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4') == 'LLRRRRLL'\nassert solution('4\\n1 2\\n2 3\\n2 4') == 'RRRR'\nassert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4') == 'impossible'\nassert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n2 4') == 'impossible'\nassert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n2 4\\n1 3\\n2 4') == 'RRRRRLL'\n"
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3''') == 'LLRRRRLL'\nassert solution('''6\n1 2\n1 3\n2 4\n3 5\n3 6\n4 6\n5 6\n1 3\n4 6\n2 5\n3 4\n5 6\n1 2\n2 3\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6\n1 2\n2 3\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6''') == 'impossible'\nassert solution('''5\n1 2\n2 3\n1 3\n3 4\n4 5\n1 2\n2 3\n3 4\n4 5\n3 4\n1 2\n3 4\n2 3\n4 5\n1 2\n3 4\n2 3\n3 4\n4 5''') == 'LLLLRLRRLR'\nassert solution('''10\n2 1\n2 10\n4 1\n4 10\n6 1\n6 10\n8 1\n8 10\n2 10\n2 4\n4 10\n4 6\n6 10\n8 10\n6 2\n8 10\n8 4\n6 2\n10 6\n6 10\n10 8\n10 10\n10 2\n6 10\n6 2\n4 6\n6 10\n4 8\n4 10\n10 10\n2 1\n6 2\n6 10\n2 4\n4 6\n6 2\n6 10\n4 8\n4 10\n10 10\n6 10\n6 10\n6 2\n10 10\n10 2\n10 10\n2 4\n4 10\n10 10\n4 6\n6 2\n10 6\n6 10\n10 10\n2 4\n4 6\n6 2\n6 10\n2 10\n2 4\n4 6\n10 10\n10 2\n10 6\n2 10\n4 4\n4 6\n6 10\n8 10\n10 10\n10 10\n2 4\n4 6\n6 2\n6 10\n10 10\n6 10\n2 4\n4 6\n4 10\n6 10\n6 10\n6 10\n6 2\n6 2\n10 10\n10 10\n2 4\n4 6\n4 10\n6 10\n2 10\n2 10\n10 10\n6 10\n10 10\n10 10\n6 10\n2 10\n10 10\n10 10\n10 10\n2 4\n4 6\n4 10\n6 10\n6 10\n6 10\n2 10\n2 4\n4 6\n10 10\n10 10\n6 10\n10 10\n10 10\n6 10\n2 4\n4 6\n10 10\n10 10\n10 10\n6 10\n10 10\n6 10\n10 10\n10 10\n6 10\n2 4\n4 6\n10 10\n10 10\n10 10\n10 10\n10 10\n2 10\n4 10\n10 10\n6 10\n10 10\n10 10\n6 10\n2 10\n10 10\n10 10\n10 10\n10 10\n10 10\n6 10\n10 10\n6 10\n10 10\n10 10\n10 10\n10 10\n10 10\n6 10\n10 10\n6 10\n10 10\n10 10\n10 10\n10 10\n2 10\n4 10\n6 10\n8 10\n10 10\n10 10\n10 10\n6 10\n10 10\n2 10\n10 10\n10 10\n10 10\n2 10\n6 10\n10 10\n10 10\n10 10\n10 10\n6 10\n10 10\n2 10\n10 10\n10 10\n10 10\n10 10\n2 10\n10 10\n10 10\n10 10\n10 10\n6 10\n10 10\n10 10\n10 10\n10 10\n10 10\n6 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n2 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n6 10\n10 10\n10 10\n10 10\n10 10\n2 10\n10 10\n10 10\n10 10\n2 10\n10 10\n10 10\n10 10\n10 10\n2 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n6 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n6 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10"
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3''') == 'LLRRRRLL'\nassert solution('''5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3''') == 'impossible'"
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\") == 'LLRRRRLL'\nassert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\") == 'impossible'\n\"\"\""
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\") == 'LLRRRRLL'\nassert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\") == 'LLRRRRLL'\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n\") == \"LLRRRRLL\"\nassert solution(\"1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n\") == \"impossible\"\nassert solution(\"1 2\\n2 3\\n1 3\\n3 4\\n1 4\\n4 5\\n3 5\\n\") == \"impossible\"\nassert solution(\"1 2\\n2 3\\n1 3\\n3 4\\n1 4\\n4 5\\n3 5\\n\") == \"impossible\"\nassert solution(\"1 2\\n2 3\\n1 3\\n3 4\\n1 4\\n4 5\\n3 5\\n\") == \"impossible\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3''') == 'LLRRRRLL'\n"
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\") == 'LLRRRRLL'\nassert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\") == 'impossible'\n\"\"\"\nimport sys\nimport collections\nfrom typing import List\n"
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"5\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\") == \"LLRRRRLL\"\nassert solution(\"1\\n2\") == \"impossible\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"impossible\"\nassert solution(\"5\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\") == \"LLRRRRLL\"\n\"\"\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5 6 7 8') == '1 2 3 4 5 6 7 8'\n\nfrom collections import deque\nimport unittest\nimport random\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        pass"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1009\\n2011\\n1017\") == \"1\\n2011\"\nprint(\"Test Completed\")\n"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1009 2011\") == \"2011\"\nassert solution(\"1017 2011\") == \"2011\"\n\nSample Input:\n3\n1 10\n3 10\n6 10\nSample Output:\n1\n1\n3\n1\n1\n2\n1\n\nSample Input:\n2\n1009 2011\n1017 2011\nSample Output:\n1\n2011\n\n-----Notes-----\n\"\"\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1009 2011\\n1017 2011\") == \"1\\n2011\"\n\n-------------\n1) The first line of input contains an integer $1 \\le m \\le 10000$, the number of teams. The following $m$ lines each contain two integers, $i,j$ separated by a space, being the employee IDs of the two employees in that team (the first one is from Stockholm and the second one is from London). Stockholm employees have IDs in the range $1000$ to $1999$ and London employees have IDs in the range $2000$ to $2999$. An employee can be a member of several teams, but there cannot be several teams consisting of the same pair of employees. Your friend has ID $1009$.\n\n2) Your friend has ID $1009$.\n\n3) The line containing the number $m$ is followed by $m$ lines, one for each team. Each of these lines contains two integers, $i,j$ separated by a space, being the employee IDs of the two employees in that team (the first one is from Stockholm and the second one is from London).\n\n--------------\nInput\n3\n1000 2000\n1000 2010\n2000 2010\n3\n1000 2000\n1000 2010\n1000 2010\n1000 2011\n2\n1000 2000\n2001 2002\n\nOutput\n1\n2010\n2\n1000 2000\n1000 2010\n\"\"\"\n\nfrom collections import defaultdict\n\nstdin = open(\"input.txt\", \"r\")\n\nm = int(stdin.readline())\n\nteams = defaultdict(set)\nfor _ in range(m):\n    a, b = map(int, stdin.readline().split())\n    teams[a].add(b)\n    teams[b].add(a)\n\nk = int(stdin.readline())\n\nstdin.readline()\n\ninvitees = set()\nfor _ in range(k):\n    a, b = map(int, stdin.readline().split())\n    if a in teams and b in teams[a]:\n        invitees.add(b)\n    elif b in teams and a in teams[b]:\n        invitees.add(a)\n    else:\n        invitees.add(a)\n        invitees.add(b)\n\nprint(len(invitees))\nprint(*sorted(invitees))\n"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1009 2011') == '1\\n1009'\nassert solution('2\\n1009 2011\\n1009 2011') == '1\\n1009'\nassert solution('2\\n1009 2011\\n1009 2011\\n1009 2011') == '2\\n1009'\nassert solution('2\\n1009 2011\\n1009 2011\\n1009 2011\\n1009 2011') == '2\\n1009'\nassert solution('2\\n1009 2011\\n1009 2011\\n1009 2011\\n1009 2011\\n1009 2011') == '1\\n1009'\n"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1009 2011\\n1017 2011\") == \"1\\n2011\"\nassert solution(\"4\\n1001 1001 1001 1001\\n1010 1010 1010 1010\") == \"0\\n1010\\n1010\\n1010\"\nassert solution(\"5\\n1009 2010\\n1008 2010\\n1010 2010\\n1011 2010\\n1012 2010\") == \"1\\n2010\\n1010\\n1011\\n1012\"\nassert solution(\"3\\n1009 2011\\n1011 2011\\n1012 2011\") == \"0\\n1011\\n1012\"\n\nassert solution(\"3\\n1009 2011\\n1011 2011\\n1012 2011\\n1013 2011\") == \"2\\n1009 2011\\n1011 2011\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1009\\n1017\") == \"1\\n2011\"\nprint('Hooray!')\n\n\"\"\""
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('100') == '100'\nassert solution('1009') == '1009'\nassert solution('1009 2011') == '2011'\n"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1009 2011\n1017 2011\n''') == '''\n1\n2011\n'''\nassert solution('''\n3\n1009 2011\n1017 2011\n1001 2012\n1017 2012\n''') == '''\n2\n1009\n2012\n'''\nassert solution('''\n4\n1009 2011\n1017 2011\n1001 2012\n1017 2012\n1009 2012\n1017 2013\n''') == '''\n1\n2012\n'''\n"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n1009 2011\n1017 2011\n\"\"\") == \"1\\n2011\"\nassert solution(\"\"\"\n1\n1009\n\"\"\") == \"0\\n1009\"\nassert solution(\"\"\"\n4\n1009 2000\n1000 2000\n1009 2001\n1009 2000\n\"\"\") == \"2\\n1009\"\nassert solution(\"\"\"\n2\n1009 2011\n1017 2011\n\"\"\") == \"1\\n2011\"\nassert solution(\"\"\"\n2\n1009 2011\n1017 2011\n\"\"\") == \"1\\n2011\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n\") == \"0 3\"\n\"\"\""
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n\") == \"0 3\"\n\"\"\"\n\nimport sys\nimport heapq\nfrom collections import defaultdict\n\nINFINITY = 2**31 - 1\n"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2 3 1') == '0 1 2'\n'''\n\n'''\n[3,1]\n\n{(0,0): 1, (0,1): 100, (1,2): 100, (2,3): 100, (3,3): 100}\n\n'''"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n\") == \"0 3\"\n\"\"\""
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n0\\n0\\n2\\n1\\n1\\n1\\n0\\n0\\n1\\n0\\n1\\n0\\n0\\n1\\n0\\n1\\n0\\n1\\n0\\n1\\n0\\n1\\n1\\n1\\n0\\n0\\n0\\n1\\n0\\n1\\n1\\n0\\n0\\n0\\n1\\n0\\n1\\n0\\n1\\n0\\n1\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str([[0, 1, 100],\n                    [0, 2, 100],\n                    [1, 3, 100],\n                    [2, 3, 100]])) == '0 3'\nassert solution(str([[0, 1, 100],\n                    [1, 3, 100],\n                    [2, 3, 100]])) == '0 3'\n"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n0 1\") == '0 3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n\") == \"0 3\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n') == '0 3'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == test_output_1\nprint(solution(input()))\n\n\n\n'''\n"
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\nSolution:\nimport numpy as np\n\nt, a = map(float, stdin.split())\n\nn, m = map(int, stdin.split('\\n')[:2])\n\nw, h = map(int, stdin.split('\\n')[2:4])\n\nd = np.array([list(map(int, stdin.split('\\n')[i+3].split())) for i in range(h)])\n\nw, h = d.shape\n\ns = [int(stdin.split('\\n')[i].split()[0]) for i in range(4,4+w*h)]\n\nfor j in range(h):\n    for i in range(w):\n        if abs(s[j*w+i] - d[j,i]) > 1:\n            print(-1)\n            return\n\nprint(np.sqrt((w/2 - 0)**2 + (h/2 - 0)**2)*2*np.pi*a*t)\n"
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2.0 10.0\\n3 3 0 0\\n2001 1000 100\\n1001 10000 200\\n100 0 0') == \"20\"\n\n\"\"\"\n\na, m = map(float, stdin.readline().split())\n\nw, h, x, y = map(int, stdin.readline().split())\n\nsurvey = []\n\nfor i in range(h):\n    survey.append(list(map(int, stdin.readline().split())))"
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2.0 10.0\\n3 3 0 0\\n2001 1000 100\\n1001 10000 200\\n100 0 0\") == \"20\""
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2.0 10.0\\n3 3 0 0\\n2001 1000 100\\n1001 10000 200\\n100 0 0\") == '20'\n\"\"\"\nimport math\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport numpy as np"
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\nassert solution('''2.0 10.0\n3 3 0 0\n1001 1000 100\n2001 10000 200\n100 0 0''') == '10'\nassert solution('''2.0 10.0\n3 3 0 0\n1001 1000 100\n1001 10000 200\n100 0 0''') == '10'\nassert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\n\nassert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'"
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2.0 10.0\\n3 3 0 0\\n2001 1000 100\\n1001 10000 200\\n100 0 0\") == '20'\n\n---\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\nSample Input:\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\nSample Input:\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\nSample Input:\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n\n2.0 10.0\n3 3 0 0\n2000 1000"
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2.0 10.0\\n3 3 0 0\\n2001 1000 100\\n1001 10000 200\\n100 0 0') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2.0 10.0\\n3 3 0 0\\n2001 1000 100\\n1001 10000 200\\n100 0 0') == '20'\n"
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n0 1\\n1 2\\n0 2') == '4'"
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n4\\n3\\n1\\n2\\n0\\n3\\n2\\n2\\n0\\n2\\n0\\n1\\n0\\n0\\n1\\n0\\n1') == '4'\nassert solution('3\\n0\\n1\\n2\\n2\\n2\\n1\\n1\\n2\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0') == '0'\nassert solution('2\\n0\\n1\\n1\\n2\\n0\\n1\\n0\\n2\\n0\\n0\\n2\\n0\\n1\\n2\\n0\\n1') == '0'\nassert solution('2\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n2\\n1\\n1\\n1\\n1\\n0\\n0\\n1') == '0'\n\"\"\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\") == \"4\"\nassert solution(\"6\\n0 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\") == \"4\"\nassert solution(\"6\\n0 1 2 3 4 5 6\\n0 1 2 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\") == \"4\"\nassert solution(\"6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\") == \"5\"\nassert solution(\"6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\") == \"5\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\") == \"4\"\n\"\"\"\n\n\"\"\"\nSolution:\n\n\"\"\"\n\n################################################################\n\"\"\"\nSolution:\n\"\"\"\n\n################################################################"
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n0 1 3 4 5 6\\n0 1 2 3 4 5 6\\n0 1 3 4 5 6 2 1\\n1 3 4 5 6 2 0 1\\n2 3 4 5 6 0 1 1\\n\") == \"4\"\nassert solution(\"8\\n0 1 3 4 5 6 7 8\\n0 1 2 3 4 5 6 7 8\\n0 1 2 3 4 5 6 7 8\\n0 1 2 3 4 5 6 7 8\\n0 1 2 3 4 5 6 7 8\\n0 1 2 3 4 5 6 7 8\\n0 1 2 3 4 5 6 7 8\\n0 1 2 3 4 5 6 7 8\\n0 1 2 3 4 5 6 7 8\\n\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5') == '4'\n\"\"\"\n\nimport sys\nimport heapq"
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4\\n2 1 3 4') == '4'\nassert solution('3\\n1 2 3\\n2 3 1') == '3'\nassert solution('6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5') == '4'\nassert solution('7\\n6 5 4 7 3 2 1\\n4 7 3 6 2 1\\n2 7 1 6 3 4\\n1 6 2 4 7 3\\n5 1 4 7 2 3\\n3 4 1 7 6 2\\n2 3 7 1 5 4\\n0 3 2 6 1 7\\n0 2 1 5 4 7 3\\n6 5 7 4 3 1 2\\n1 2 4 5 7 6 3\\n2 1 6 3 5 7 4') == '7'\nassert solution('15\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == '15'\n"
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2\n0 1\n1 2\n''') == '4'\n\nassert solution('''\n3\n0 1\n0 2\n1 1\n''') == '0'\n\nassert solution('''\n5\n0 2 3 4 6\n0 1 3 4 5\n1 2 4 3 5\n2 3 5 4 6\n2 1 3 4 5\n''') == '1'\n\nassert solution('''\n6\n0 1\n0 2\n1 1\n1 2\n1 3\n2 2\n2 3\n''') == '3'\n\nassert solution('''\n7\n0 1\n0 2\n1 1\n1 2\n1 3\n2 3\n3 3\n3 4\n''') == '0'"
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5') == '4'\n\n\"\"\""
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\") == \"4\"\nassert solution(\"7\\n0 4 1 3 5 2\\n0 1 3 5 4 2\\n1 1 5 3 4 2\\n1 5 4 3 2 1\\n2 2 3 4 1 5\\n3 0 1 2 4 5\\n0 2 4 3 5 1\") == \"0\"\nassert solution(\"7\\n0 4 1 3 5 2\\n0 1 3 5 4 2\\n1 1 5 3 4 2\\n1 5 4 3 2 1\\n2 2 3 4 1 5\\n3 0 1 2 4 5\\n0 2 4 3 5 1\") == \"0\"\nassert solution(\"7\\n0 4 1 3 5 2\\n0 1 3 5 4 2\\n1 1 5 3 4 2\\n1 5 4 3 2 1\\n2 2 3 4 1 5\\n3 0 1 2 4 5\\n0 2 4 3 5 1\") == \"0\"\nassert solution(\"7\\n0 4 1 3 5 2\\n0 1 3 5 4 2\\n1 1 5 3 4 2\\n1 5 4 3 2 1\\n2 2 3 4 1 5\\n3 0 1 2 4 5\\n0 2 4 3 5 1\") == \"0\"\n\n'''"
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == \"4\"\nprint(solution(stdin_lines))\n\n-----Explanation-----\nOur grasshopper starts at the first flower at $(1, 1)$ and wants to visit the largest number of flowers.\nThe best way to get to the next flower is to move one row and one column.\nThe fourth flower at $(3, 4)$ can't be visited, because the grasshopper can't jump over the flower at $(3, 3)$\n\"\"\""
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == 4\n\"\"\""
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == 4\n\n-----Notes-----\n\n-----Source-----\n\n\"\"\""
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7') == '4'\n\n-----------------------"
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7''') == 4\nassert solution('''4\n2 3 4 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7''') == 8\nassert solution('''5\n3 2 3 2 2\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\n4 5 6 7 8''') == 7\n\nprint(solution(input()))"
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == 4\n\n\"\"\""
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == 4\n\"\"\""
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == \"4\"\n\"\"\"\nimport math\nimport itertools"
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7') == 4\nassert solution('4\\n1 1\\n1 2 3\\n2 3 4\\n3 4 5') == 4\nassert solution('4\\n1 1\\n1 2 3\\n2 3 4\\n3 4 5') == 5\nassert solution('4\\n1 1\\n1 2 3\\n2 3 4\\n3 4 5') == 5\nassert solution('4\\n1 1\\n1 2 3\\n2 3 4\\n3 4 5') == 5\n"
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == \"4\"\nassert solution(\"3\\n1 1\\n1 2 3\\n2 3 4\") == \"3\"\nassert solution(\"2\\n1 1\\n1 2\") == \"1\"\n\nimport re\nfrom typing import List"
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport unittest\nfrom math import sqrt\nfrom typing import List, Set, Tuple\n\n\nclass Solution:\n    def solve(self, n: int, towers: List[Tuple[float, float]]) -> int:\n        \"\"\"\n        :type n: int\n        :type towers: List[Tuple[float, float]]\n        :rtype: int\n        \"\"\"\n\n        def distance(a: Tuple[float, float], b: Tuple[float, float]) -> float:\n            return sqrt((b[0] - a[0]) ** 2 + (b[1] - a[1]) ** 2)\n\n        # 1. build the graph\n        graph = {i: set() for i in range(1, n + 1)}\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                if distance(towers[i - 1], towers[j - 1]) <= 1:\n                    graph[i].add(j)\n                    graph[j].add(i)\n\n        # 2. find start and end node\n        start, end = None, None\n        for i, s in graph.items():\n            if len(s) == 1:\n                start, end = i, s.pop()\n\n        # 3. BFS\n        visited = set()\n        stack = [start]\n        while stack:\n            node = stack.pop()\n            if node not in visited:\n                visited.add(node)\n                stack.extend(graph[node] - visited)\n        return len(visited)\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(Solution().solve(n=5, towers=\n            [(1.0, 1.0), (3.1, 1.0), (1.0, 3.1), (3.1, 3.1), (4.2, 3.1)]), 6)\n"
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\nassert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"6\"\n\"\"\""
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == 6\n\"\"\""
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\nassert solution('5\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '3'\nassert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '4'\nassert solution('5\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '3'\nassert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '4'\n"
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4.2 3.1\\n1.0 1.0\\n3.1 1.0\\n4.2 3.1') == '6'\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple\n\nsys.stdin = open('solution_interview_test.in', 'r')\nsys.stdout = open('solution_interview_test.out', 'w')"
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"6\"\n\"\"\""
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"6\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"6\"\nprint(\"Passed!\")\n\n-----Note-----\nThis problem is a slightly modified version of the problem \"Maximum number of different sports\" in the tech interview track.\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2\\n2\\n2\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2\\n2\\n2') == '5'\n\"\"\"\n\nimport sys\nfrom typing import List\nfrom itertools import combinations\n"
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2\\n2\\n2\") == \"5\"\n\"\"\"\n\nn = int(input())\n\narr = []\nfor i in range(n):\n    arr.append(int(input()))\n\narr.sort()\narr = [0] + arr + [8]\n\nans = [1] * 8\nfor i in range(len(arr) - 1):\n    ans[arr[i]] += arr[i + 1] - arr[i] - 1\n\nprint(max(ans))\n"
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2\\n2\") == \"5\"\n\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import Optional\nfrom operator import itemgetter\nimport sys\nfrom collections import Counter\n\n\nclass Solution:\n    def __init__(self, input: str, output: Optional[str]):\n        self.input = input\n        self.output = output\n\n    def execute(self) -> None:\n        input = self.input\n        output = self.output\n        self.get_allergens(input, output)\n\n    def get_allergens(self, input: str, output: str) -> None:\n        try:\n            cnt = 0\n            max_cnt = int(input.strip())\n            while cnt < max_cnt:\n                cnt += 1\n                input, output = self.get_allergens_internal(input, output)\n        except Exception as e:\n            print(e)\n            sys.exit(1)\n        print(output)\n\n    def get_allergens_internal(self, input: str, output: str) -> str:\n        input = input.split(\"\\n\")\n        allergens = input[0].split()\n        allergens_cnt = len(allergens)\n        allergens_dict = dict()\n        for i in range(allergens_cnt):\n            allergens_dict[allergens[i]] = int(input[i + 1])\n        allergens_sorted_by_val = sorted(allergens_dict.items(), key=itemgetter(1), reverse=True)\n        allergens_sorted = [k for k, v in allergens_sorted_by_val]\n        output = \"\".join(allergens_sorted)\n        return \"\\n\".join(input), output\n"
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"3\\n2\\n2\\n2\"\n) == \"5\"\n"
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2\\n2\\n2') == '5'\nassert solution('3\\n2\\n4\\n2') == '4'\nassert solution('5\\n2\\n5\\n3\\n2') == '3'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\") == \"5\"\n\"\"\""
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\") == '5'\n\n-----Test Case Format-----\nYou can submit multiple test cases.\n\nThe first line of each test case is an integer $n$ ($1 \\leq n \\leq 100$) the length of the input.\n\nThe second line of each test case contains $n$ integers $1,\\dots, n$ describing the input array.\n\nSample Input:\n4\n1 2 3 4\nSample Output:\n2\n\"\"\"\n\"\"\"\n\u6700\u77ed\u6642\u9593\u3067\u5168\u3066\u306e\u30a2\u30ec\u30eb\u30b2\u30f3\u3092\u884c\u3063\u3066\u30821\u3064\u3067\u3082\u30a2\u30ec\u30eb\u30b2\u30f3\u304c\u8d77\u304d\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308b\u3068\u8003\u3048\u3089\u308c\u308b\u3002\n\u3042\u308b\u8a08\u753b\u304c\u4e00\u5b9a\u306e\u9577\u3055\u3067\u7d42\u4e86\u3059\u308b\u307e\u3067\u5168\u3066\u306e\u30a2\u30ec\u30eb\u30b2\u30f3\u3092\u884c\u3063\u3066\u307f\u308b\u306e\u304c\u6700\u77ed\u6642\u9593\u306e\u8a08\u753b\u3068\u8003\u3048\u308b\n\"\"\"\n"
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2\\n2\\n2\") == 5\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2\\n1\\n1\\n2\\n3\") == \"5\"\nassert solution(\"4\\n1\\n2\\n1\\n2\\n2\") == \"3\"\nassert solution(\"4\\n1\\n2\\n2\\n2\\n3\") == \"2\"\nassert solution(\"4\\n2\\n2\\n2\\n3\") == \"2\"\nassert solution(\"4\\n2\\n3\\n2\\n3\") == \"3\"\n\n-----Explanation-----\n4 allergen tests are planned:\n- Allergen test 1 lasts 2 days,\n- Allergen test 2 lasts 1 day,\n- Allergen test 3 lasts 1 day,\n- Allergen test 4 lasts 2 days.\n\nAs there are 2 active allergens, the test ends 2 days after the last test.\n\n5 days are required.\n\"\"\"\n"
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"1 3\\n\"\n\"2 2 2 1\"\n) == \"1 1\"\n\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\\n2 2 2 1\") == \"1 1\"\n"
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n1 2 1\") == \"1 1\"\n\"\"\"\nimport sys\n\n_, t = [int(n) for n in sys.stdin.readline().strip().split()]\nn = [int(n) for n in sys.stdin.readline().strip().split()]\n\nn_mod_t = n[-1] % t\nfor i in range(len(n)-1, -1, -1):\n    n[i] = n[i] + n_mod_t\n    n[i] %= t\n    n_mod_t = (n_mod_t + n[i]) % t\n\nprint(max(n), min(n))\n"
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 2 2 1\") == '1 1'\nassert solution(\"1 3\\n1 2 2 1\") == '1 1'\nassert solution(\"3 3\\n1 2 2 1\") == '1 2'\nassert solution(\"5 10\\n1 1 2 3 2 4\") == '3 2'"
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3\\n2 2 2 1') == '1 1'\n"
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\\n2 2 2 1\") == \"1 1\"\n\"\"\""
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\\n2 2 2 1\") == \"1 1\"\n\"\"\""
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\\n2 2 2 1\") == \"1 1\"\n\n\"\"\""
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3\\n2 2 2 1') == '1 1'\nassert solution('2 10\\n2 3 5 1') == '1 9'\nassert solution('1 10\\n2 10 1') == '1 10'\nassert solution('2 10\\n3 10 3') == '1 10'\nassert solution('2 10\\n2 10 1') == '1 10'\n"
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 10\\n2 2 1') == '1 1'\nassert solution('1 6\\n1 1 1 1') == '0 0'\nassert solution('1 12\\n2 2 2 1') == '2 1'\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 10\n\n\"\"\"\n\nfrom math import floor, ceil, sqrt\n"
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == 10\n\"\"\"\n\nimport sys\nimport os\nfrom io import BytesIO, IOBase\nimport math\nfrom collections import Counter\n"
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == 10\nassert solution('2') == 43\nassert solution('3') == 39\nassert solution('4') == 144\nassert solution('5') == 325\n"
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '55'\nassert solution('3') == '55'\nassert solution('4') == '55'\nassert solution('5') == '55'\n"
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 10\nassert solution('2') == 20\nassert solution('3') == 20\n\n\"\"\""
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == 10\nassert solution(\"2\") == 8\nassert solution(\"3\") == 7\nassert solution(\"4\") == 7\nassert solution(\"5\") == 6\n"
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 10\n\"\"\""
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 10\nassert solution('1') == 1\nassert solution('10') == 1\nassert solution('123') == 123\n\n\"\"\"\n"
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '4'\nassert solution('6') == '2'\nassert solution('8') == '1'\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 10\n\"\"\""
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n1000 1 0\\n1 1000 1') == '0.001'\nprint(solution(stdin))\n"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 1 0\\n1 1000 1') == 0.001\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 1 0\\n1 1000 1\") == \"0.001\"\n\"\"\"\n\nimport sys\n\nimport itertools\n\nfrom itertools import combinations\n\na, b = [int(x) for x in sys.stdin.readline().split()]\n\ncandidates = [\n    (int(x[1]), int(x[2]), int(x[0]))\n    for x in sys.stdin.readlines()\n]\n\nresult = 0\n\nfor x in combinations(candidates, a):\n    if sum(x[1]) > b:\n        continue\n    if x[0][0]!= 1:\n        continue\n    if sum(x[2]) <= b:\n        result = max(result, sum(x[1]) / sum(x[2]))\n\nprint(result)\n"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n1000 1 0\\n1 1000 1\") == \"0.001\"\n"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n1000 1 0\\n1 1000 1\") == \"0.001\"\n"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n1000 1 0\\n1 1000 1') == 0.001\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n2 2\n1000 1 0\n1000 1 0\n\"\"\"\n) == '0.001'\n\"\"\""
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n1000 1 0\\n1 1000 1') == '0.001'\n\n\"\"\"\n\nimport sys\nfrom typing import List\nimport math\n"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n1000 1 0\\n1 1000 1\\n\") == \"0.001\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n1000 1 0\\n1 1000 1\\n\") == \"0.001\"\n\n\"\"\""
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 2 10000\\n1 2\\n2 3\\n3 1') == '0'\n\n----Problem-----\nFor example, given the following graph:\n\n0 1 1\n0 2 1\n1 2 0\n1 3 1\n2 3 0\n2 4 1\n3 4 0\n4 5 1\n5 0 1\n\nThis graph can be coloured in exactly two ways.\n\nThe two ways to colour it are:\n\n0 1 2\n0 1 3\n0 2 3\n0 3 4\n1 2 4\n2 3 5\n2 4 5\n3 4 6\n3 5 6\n4 5 7\n4 6 7\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 2 10000\\n1 2\\n2 3\\n3 1') == 0\n"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 2 10000\\n1 2\\n2 3\\n3 1') == '0'\n"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 2 10000\\n1 2\\n2 3\\n3 1') == '0'\n\"\"\"\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2 10000\\n1 2\\n2 3\\n3 1\") == \"0\"\nassert solution(\"3 3 2 100\\n1 2\\n2 3\\n3 1\") == \"0\"\nassert solution(\"3 3 2 100\\n1 2\\n2 3\\n3 1\\n2 1\") == \"1\"\nassert solution(\"3 3 2 100\\n1 2\\n2 3\\n3 1\\n1 3\") == \"0\"\nassert solution(\"3 3 2 100\\n1 2\\n2 3\\n3 1\\n3 1\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 2 10000\\n1 2\\n2 3\\n3 1') == 0\nprint(solution(stdin))\n\n---Problem Solution(Diging deeper with recursion)---\n\n[Time limit] 5000ms\n\n[Sample input] 3 3 2 10000\n1 2\n2 3\n3 1\n\nSample Output\n0\n\nLet us see what the graph looks like in our picture:\n\n![Graph](https://i.imgur.com/bJnS7jh.png)\n\nWe will represent a graph by the dictionary where the keys are the nodes and the values are the neighbouring nodes:\n\n![graph representation](https://i.imgur.com/JQoAoX1.png)\n\nSo the given graph can be represented as follows:\n\ngraph = {\n    1: [2],\n    2: [1, 3],\n    3: [2]\n}\n\nWe can also interpret the graph as a list of edges:\n\ngraph = [[1, 2],\n         [2, 3],\n         [3, 1]]\n\nWe can represent our graph as a set of edges and then convert this set to a dictionary:\n\ngraph = {(1, 2): 1,\n         (2, 3): 1,\n         (3, 1): 1}\n\nWe can then convert it to a list of edges:\n\ngraph = [[1, 2, 1],\n         [2, 3, 1],\n         [3, 1, 1]]\n\nNow let's examine the k-colouring problem: we need to colour the graph using exactly $k$ colours. There are $k$ possibilities for the first colour: we can color the nodes with colors $1$, $2$,..., $k$; or, we can skip colours $1$, $2$,..., $k$, and start with a new color $0$. If we colour the graph by two colours, then there are $k - 1$ possibilities: we can color the nodes with colors $1, 2,..., k$, or we can color the nodes with colors $0, 1,..., k$. If we color the graph by three colours, then there are $k - 2$ possibilities: we can color the nodes with colors $1, 2,..., k$, or we can color the nodes with colors $0, 1,..., k - 1$, or with colors $0, 1,..., k$.\n\nSo how many ways can we colour the graph using exactly $k$ colours?\n\nWe can represent the number of ways to colour the graph using exactly k colours as a Fibonacci sequence:\n\n(base) realpython.com [Python3]\n\n![](https://i.imgur.com/4Wjm1nU.png)\n\n$k$ is always even: we can colour the graph with either $k / 2$ or $k - 1$ colours.\n\nSo, for instance, if we are given the graph defined by the list of edges and we need to colour it with two colours, then the number of ways to colour it is equal to the number of ways to colour the graph with $k = 2$ colours, where the first colour is determined by the graph itself, $k / 2$ of them. If we colour it with three colours, then the number of ways to colour it is equal to the number of ways to colour the graph with $k = 2$ colours, where the first colour is determined by the graph itself, $k / 2$ of them.\n\nIf we are given the graph defined by the list of edges and we need to colour it with three colours, then the number of ways to colour it is equal to the number of ways to colour the graph with $k = 3$ colours, where the first colour is determined by the graph itself, $k / 2$ of them.\n\nWe can represent Fibonacci numbers in the form of lists:\n\n![](https://i.imgur.com/PfjhXku.png)\n\n$F_n = [F_{n-1} + F_{n-2}$] where $F_0 = 0, F_1 = 1$\n\nWe can represent the numbers we need to count by a Fibonacci sequence:\n\n![](https://i.imgur.com/NyVz4ex.png)\n\n$F_k = [F_{k-1} + F_{k-2} + F_{k-3} + \\dots + F_{k - (k - 1)} + F_{k - (k - 1) + 1} + F_{k - (k - 1) + 2} + \\dots + F_{k - 1}]$\n\nLet's calculate how many ways to colour the graph with $k = 2$ colours:\n\n![](https://i.imgur.com/qpS9tzY.png)\n\n![](https://i.imgur.com/NyVz4ex.png)\n\n$F_k = [F_{k-1} + F_{k-2}$] where $F_0 = 0, F_1 = 1$\n\n![](https://i.imgur.com/rV0YxQp.png)\n\nThe number of ways to colour the graph with two colours is equal to $F_{k/2}$ where $F_{k/2}$ is the number of ways to colour the graph with $k/2$ colours, where the first colour is determined by the graph itself, $k/2$ of them.\n\n![](https://i.imgur.com/QRbEQF9.png)\n\nThe number of ways to colour the graph with two colours is equal to $F_{k/2}$ where $F_{k/2}$ is the number of ways to colour the graph with $k/2$ colours, where the first colour is determined by the graph itself, $k/2$ of them.\n\nTo sum up, the number of ways to colour the graph with two colours is equal to the number of ways to colour the graph with $k - 1$ colours, where the first colour is determined by the graph itself, $k - 1$ of them.\n\nTo sum up, the number of ways to colour the graph with two colours is equal to the number of ways to colour the graph with $k - 1$ colours, where the first colour is determined by the graph itself, $k - 1$ of them.\n\nTo sum up, the number of ways to colour the graph with two colours is equal to the number of ways to colour the graph with $k - 1$ colours, where the first colour is determined by the graph itself, $k - 1$ of them.\n\nTo sum up, the number of ways to colour the graph with two colours is equal to the number of ways to colour the graph with $k - 1$ colours, where the first colour is determined by the graph itself, $k - 1$ of them.\n\nTo sum up, the number of ways to colour the graph with two colours is equal to the number of ways to colour the graph with $k - 1$ colours, where the first colour is determined by the graph itself, $k - 1$ of them.\n\nTo sum up, the number of ways to colour the graph with two colours is equal to the number of ways to colour the graph with $k - 1$ colours, where the first colour is determined by the graph itself, $k - 1$ of them.\n\nTo sum up, the number of ways to colour"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2 10000\\n1 2\\n2 3\\n3 1\\n\") == \"0\"\n"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2 10000\\n1 2\\n2 3\\n3 1\") == \"0\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2 10000\\n1 2\\n2 3\\n3 1\") == \"0\"\nassert solution(\"5 4 6 10000\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"4\"\nassert solution(\"5 1 3 10000\\n1 2\\n1 3\\n2 3\\n2 5\\n3 4\") == \"2\"\n\n-----Explanation-----\nIn this problem, we have an undirected graph with $N$ nodes and $M$ edges. Let $G(v)$ denote the number of neighbours of node $v$. Each node is connected to at most $2G(v) + 2$ nodes. The graph has the special property that any connected component of size $s$ contains no more than $s + 2$ edges.\n\nEach edge is given as two integer values $A$ and $B$ ($1 \\leq A, B \\leq N$), describing a directed edge in the graph connecting nodes $A$ and $B$. Let $G(v)$ denote the number of neighbours of node $v$.\n\nThe number of ways to colour the graph into $k$-colours is given by the binomial coefficient $(N - 1) \\choose {(G(v) - 1)}$, where $(N - 1)$ is the number of nodes and $(G(v) - 1)$ is the number of nodes which have no colour. We can take advantage of the special property that any connected component of size $s$ contains no more than $s + 2$ edges.\n\nAll possible colourings of the graph can be grouped into $k - 1$ equivalence classes. There are $k - 1$ possible colourings, and for each colouring, we can find a corresponding equivalence class, since each equivalence class corresponds to one possible colouring.\n\nThe colouring can be described by the number of colours used for each node. The equivalence class of a colouring can be described by the colouring itself. This problem then becomes the problem of finding the number of equivalence classes of colourings with $k - 1$ colours.\n\nLet $U(k, s)$ denote the number of equivalence classes of $k - 1$ colourings with $s$ colours.\n\nWe then consider the following cases:\n\nIf $G(v) = 1$ then there are no edges from $v$, so the number of ways to colour the graph into $k$ - 1 colours is 0.\n\nIf $G(v) = 2$ then the number of ways to colour the graph into $k$ - 1 colours is $2^{G(v) - 1}$.\n\nIf $G(v) = 3$ then the number of ways to colour the graph into $k$ - 1 colours is $2^{G(v) - 1}$.\n\nIf $G(v) \\geq 4$ then the number of ways to colour the graph into $k$ - 1 colours is $2^{G(v) - 1} + 2^{G(v) - 2}$.\n\nFinally, let $U(k, s) \\equiv \\sum_{v = 1}^N U(k, s)$.\n\nIf $G(v) = 1$ then $U(k, s) = 0$.\n\nIf $G(v) = 2$ then $U(k, s) = \\sum_{v = 1}^N \\binom{G(v)}{k - 1} * 2^{G(v) - 1}$.\n\nIf $G(v) = 3$ then $U(k, s) = \\sum_{v = 1}^N \\binom{G(v)}{k - 1} * 2^{G(v) - 1} + \\sum_{v = 1}^N \\binom{G(v)}{k - 2} * 2^{G(v) - 2}$.\n\nIf $G(v) \\geq 4$ then $U(k, s) = \\sum_{v = 1}^N \\binom{G(v)}{k - 1} * 2^{G(v) - 1} + \\sum_{v = 1}^N \\binom{G(v)}{k - 2} * 2^{G(v) - 2} + 2^{G(v) - 3}$.\n\nNote that $U(k, s) \\geq 1$.\n\nSince we have $k - 1$ colours, there is one way to colour each node in a graph with $k - 1$ colours, where the first colour is used for the node itself.\n\nLet $U(k, s)$ be the number of ways to colour the graph into $k$ - 1 colours.\n\nNote that $U(k, s) \\geq 1$.\n\nUsing the above cases, the number of ways to colour the graph into $k$ - 1 colours is $U(k, s) - 1$.\n\nWe now calculate the number of ways to colour the graph into $k$ colours, modulo $P$, using the binomial coefficient $\\binom{N}{k}$.\n\nWe then group the colourings into $k - 1$ equivalence classes and calculate the number of ways to colour the graph into $k$ colours in each equivalence class.\n\nFinally, the number of ways to colour the graph into $k$ colours is the sum of the number of ways to colour each equivalence class into $k$ colours.\n\nWe then return the answer modulo $P$.\n\"\"\"\n\nimport math"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n\"\"\""
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\") == \"26\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0') == 26\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\") == 26\n\"\"\"\n\nimport collections\nimport itertools"
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\") == 26\n\"\"\"\n"
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\\n\") == \"26\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n1 2\\n3 4\\n2 2\\n') == 10\nassert solution('1 1\\n2 2\\n2 2\\n2 2\\n') == 5\n\"\"\"\n"
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\") == 26\n\n\"\"\""
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0''') == '26'\n\n\"\"\"\n"
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\") == \"26\"\n\"\"\"\n\n\"\"\"\nBFS\n\n- bfs\n- avoid cycle\n\nstandard bfs\n\"\"\"\n\nclass Solution:\n    def solve(self, n, colors):\n        color_set = set()\n        for i in range(n):\n            for j in range(n):\n                color_set.add(colors[i][j])\n        color_set = list(color_set)\n        color_set.sort()\n        \n        # color_dict = {}\n        # for i in range(n):\n        #     for j in range(n):\n        #         color_dict[(colors[i][j], False)] = (i, j)\n        \n        # for color in color_set:\n        #     q = []\n        #     visited = [[False] * n for _ in range(n)]\n        #     q.append((color, False))\n        #     visited[0][0] = True\n        #     while q:\n        #         color, visited = q.pop(0)\n        #         if color == 0:\n        #             return 1\n        #         for i, j in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n        #             new_i = i + color_dict[color][0]\n        #             new_j = j + color_dict[color][1]\n        #             if 0 <= new_i < n and 0 <= new_j < n and not visited[new_i][new_j] and not (colors[new_i][new_j] == 0 and color == color_dict[color][0]):\n        #                 q.append((colors[new_i][new_j], visited))\n        \n        color_dict = {}\n        for i in range(n):\n            for j in range(n):\n                if (colors[i][j], False) not in color_dict:\n                    color_dict[(colors[i][j], False)] = (i, j)\n        \n        for color in color_set:\n            q = []\n            visited = [[False] * n for _ in range(n)]\n            q.append((color, False))\n            visited[0][0] = True\n            while q:\n                color, visited = q.pop(0)\n                if color == 0:\n                    return 1\n                for i, j in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    new_i = i + color_dict[color][0]\n                    new_j = j + color_dict[color][1]\n                    if 0 <= new_i < n and 0 <= new_j < n and not visited[new_i][new_j] and not (colors[new_i][new_j] == 0 and color == color_dict[color][0]):\n                        q.append((colors[new_i][new_j], visited))\n        \n        return 0\n\nclass Solution2:\n    def solve(self, n, colors):\n        color_set = set()\n        for i in range(n):\n            for j in range(n):\n                color_set.add(colors[i][j])\n        color_set = list(color_set)\n        color_set.sort()\n        \n        color_dict = {}\n        for i in range(n):\n            for j in range(n):\n                if (colors[i][j], False) not in color_dict:\n                    color_dict[(colors[i][j], False)] = (i, j)\n        \n        for color in color_set:\n            q = []\n            visited = [[False] * n for _ in range(n)]\n            q.append((color, False))\n            visited[0][0] = True\n            while q:\n                color, visited = q.pop(0)\n                if color == 0:\n                    return 1\n                for i, j in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    new_i = i + color_dict[color][0]\n                    new_j = j + color_dict[color][1]\n                    if 0 <= new_i < n and 0 <= new_j < n and not visited[new_i][new_j] and not (colors[new_i][new_j] == 0 and color == color_dict[color][0]):\n                        q.append((colors[new_i][new_j], visited))\n        \n        return 0\n\nclass Solution3:\n    def solve(self, n, colors):\n        color_set = set()\n        for i in range(n):\n            for j in range(n):\n                color_set.add(colors[i][j])\n        color_set = list(color_set)\n        color_set.sort()\n        \n        color_dict = {}\n        for i in range(n):\n            for j in range(n):\n                if (colors[i][j], False) not in color_dict:\n                    color_dict[(colors[i][j], False)] = (i, j)\n        \n        color_dict2 = {}\n        for color in color_set:\n            q = []\n            visited = [[False] * n for _ in range(n)]\n            q.append((color, False))\n            visited[0][0] = True\n            while q:\n                color, visited = q.pop(0)\n                if color == 0:\n                    return 1\n                for i, j in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    new_i = i + color_dict[color][0]\n                    new_j = j + color_dict[color][1]\n                    if 0 <= new_i < n and 0 <= new_j < n and not visited[new_i][new_j] and not (colors[new_i][new_j] == 0 and color == color_dict[color][0]):\n                        q.append((colors[new_i][new_j], visited))\n                \n        return 0\n\n\"\"\"\nDFS\n\n- standard dfs\n\"\"\"\n\nclass Solution4:\n    def solve(self, n, colors):\n        color_set = set()\n        for i in range(n):\n            for j in range("
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0') == 26\n\"\"\"\nimport sys\nfrom typing import Set, Tuple, Dict, List, Optional, IO\n\nfrom collections import defaultdict"
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n20 20 20 40\\nX.X\\nT.T') == '0.333333333\\n0.666666667'\nassert solution('4 4\\n100 100 100 100\\nXX.X\\nT.T\\nTT.T\\nTT.T') == '0.25\\n0.75'\nassert solution('4 2\\n100 100 100 100\\nXX.X\\nT.T\\nTT.T\\nTT.T') == '0.25\\n0.75'\n\"\"\""
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n20 20 20 40') == '0.3333333333333333333333333333\\n0.6666666666666666666666666667'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n20 20 20 40\\nX.X\\nT.T') == '0.333333333\\n0.666666667'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n20 20 20 40\\nX.X\\nT.T') == '0.333333333\\n0.666666667'\n\nassert solution('3 2\\n20 20 20 40\\n..T.T\\n..X..\\nX.T.') == '0.25\\n0.75'\n\nassert solution('3 2\\n20 20 20 40\\n.T.T\\n..X..\\nX.T.') == '0.25\\n0.75'\n\nassert solution('3 2\\n20 20 20 40\\n.T.T\\n..T.\\nX.X.') == '0.25\\n0.75'\n\nassert solution('3 2\\n20 20 20 40\\n.T.T\\n..X.\\nX.X.') == '0.25\\n0.75'"
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n20 20 20 40\\nX.X\\nT.T\") == \"0.3333333333333333 0.6666666666666666\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n20 20 20 40\\nX.X\\nT.T') == '0.333333333\\n0.666666667'\nprint('PASSED')\n\n-----Notes-----\n  * This problem is similar to the probability of a coin flip on a table of 2 heads and 2 tails.\n  * Think about the edges of the grid. What happens if the ball bounces off a space that is the edge of the grid?\n\n\"\"\"\n\nimport math\nimport sys\nfrom typing import Any, List\n"
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2\n20 20 20 40\nX.X\nT.T\n
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n20 20 20 40\\nX.X\\nT.T') == '0.333333333\\n0.666666667'\nprint(solution(stdin))\n\n'''"
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n20 20 20 40\\nX.X\\nT.T\") == \"0.333333333\\n0.666666667\"\n\"\"\""
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n20 20 20 40\\nX.X\\nT.T\") == \"0.3333333333333333\\n0.6666666666666666\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\nassert solution(\"45 45 45 45\") == \"0.8888888888888888\"\n\nassert solution(\"45 45 45 45\") == \"0.8888888888888888\"\nassert solution(\"45 45 45 45\") == \"0.8888888888888888\"\n\nassert solution(\"45 45 45 45\") == \"0.8888888888888888\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\n\"\"\"\n\nfrom math import pi\na, b, c, d = [float(x) for x in stdin.split()]\narea = (a * b) / 2"
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('45 45 0 0') == '0.75'\n\"\"\"\n\nfrom typing import Dict\nimport math\nimport collections"
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('45 45 0 0') == '0.75'\nassert solution('45 45 90 45') == '0.8571428571428571428571428571429'\nassert solution('45 45 90 45 45 45') == '0.868181818181818181818181818182'\nassert solution('45 45 90 45 45 45 45 45') == '0.868181818181818181818181818182'\n"
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\nassert solution(\"45 45 45 45\") == \"1.0\"\nassert solution(\"45 45 45 45\") == \"1.0\"\nassert solution(\"45 45 45 45\") == \"1.0\"\n\"\"\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('45 45 0 0') == '0.75'\n\"\"\"\nimport math\n\na, b, c, d = [float(x) for x in stdin.split()]"
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('45 45 0 0') == '0.75'\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\nassert solution(\"45 45 45 45\") == \"1.0\"\n\"\"\"\n\nfrom math import cos, sin, pi\n"
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\nassert solution(\"30 45 30 0\") == \"0.5\"\n\"\"\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\\n') == '4'\n\"\"\"\n\n\"\"\"\n\u6570\u636e\u89c4\u6a21\uff1a\n    1 <= n, m <= 100000\n    0 <= u_i, v_i, d_i <= n\n    u_i!= v_i\n    d_i <= 12\n    \n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\n    O(nm)\n\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\n    O(nm)\n\n\u601d\u8def:\n    \u8bbe\u4e00\u4e2a\u6700\u77ed\u8def\u5f84\u957f\u5ea6f[i][j]\uff0c\u8868\u793a\u7b2ci\u4e2acabin\u5230\u7b2cj\u4e2acabin\u6700\u77ed\u7684\u8def\u5f84\u957f\u5ea6\n    \u5bf9\u4e8ef[i][j]\u7684\u8ba1\u7b97\uff1a\n        \u5f53\u524dcabin\u5230\u5176\u4ed6\u6240\u6709cabin\u7684\u8def\u5f84\u957f\u5ea6\u90fd\u8ba1\u7b97\u5b8c\u6210\u4e4b\u540e\uff0c\u624d\u80fd\u77e5\u9053\u81ea\u5df1\u5230\u5176\u4ed6\u6240\u6709cabin\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\n        \u56e0\u6b64\uff0c\u53ea\u9700\u8981\u8ba1\u7b97\u4e00\u6b21f[i][j]\u5373\u53ef\uff0c\u5728\u8fdb\u884c\u8ba1\u7b97\u4e2d\uff0c\u53ea\u9700\u8981\u4fdd\u5b58\u6700\u5c0f\u8def\u5f84\u957f\u5ea6\u5373\u53ef\n    f[i][j] = min{f[i][k] + f[k][j] + d_ik}(1 <= k <= j)\n    \n    \u6700\u7ec8\uff0c\u5230\u8fbe\u76ee\u7684cabin\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u4e3af[0][n-1]\n\"\"\"\nfrom typing import *\nimport itertools\n\nclass Solution:\n    def solve(self, stdin: List[str]) -> int:\n        n, m = list(map(int, stdin[0].split()))\n        graph = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(m):\n            u, v, d = list(map(int, stdin[i + 1].split()))\n            graph[u][v] = d\n        # for i in range(n):\n        #     for j in range(n):\n        #         print(graph[i][j], end ='')\n        #     print()\n        \n        # \u83b7\u53d6\u6240\u6709\u7684\u8def\u5f84\n        allPaths = []\n        for i in range(n):\n            paths = []\n            self.__dfs(graph, i, 0, paths)\n            allPaths.append(paths)\n        \n        # \u8ba1\u7b97\u6bcf\u4e2acabin\u5230\u5176\u4ed6\u6240\u6709cabin\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\n        f = [[float('inf') for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            f[i][i] = 0\n            for paths in allPaths:\n                if len(paths) > 0:\n                    for path in paths:\n                        f[i][path[1]] = min(f[i][path[1]], f[i][path[0]] + path[2])\n        \n        # \u627e\u51fa\u6700\u77ed\u8def\u5f84\u957f\u5ea6\n        return min(f[0][n - 1], f[n - 1][0])\n    \n    def __dfs(self, graph, i, steps, paths):\n        if steps > 12:\n            return\n        if i == len(graph) - 1:\n            paths.append([i, i, steps])\n            return\n        for j in range(len(graph[i])):\n            if graph[i][j] == 0:\n                continue\n            self.__dfs(graph, j, steps + graph[i][j], paths)"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\") == \"4\"\nassert solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\") == \"4\"\nassert solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\") == \"4\"\n\nprint(solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\"))\nprint(solution(\"7 8\\n0 3 2\\n0 4 8\\n1 3 10\\n1 4 2\\n2 4 9\\n3 5 7\\n3 6 4\\n4 6 13\\n5 6 9\\n5 7 9\\n6 7 11\\n6 8 6\\n7 8 2\\n8 9 10\\n8 10 9\\n9 10 8\\n9 11 12\\n9 12 4\\n11 12 3\\n11 13 1\\n12 13 6\\n13 0 7\\n13 1 4\")\nprint(solution(\"7 8\\n0 3 2\\n0 4 8\\n1 3 10\\n1 4 2\\n2 4 9\\n3 5 7\\n3 6 4\\n4 6 13\\n5 6 9\\n5 7 9\\n6 7 11\\n6 8 6\\n7 8 2\\n8 9 10\\n8 10 9\\n9 10 8\\n9 11 12\\n9 12 4\\n11 12 3\\n11 13 1\\n12 13 6\\n13 0 7\\n13 1 4\"))\n"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9') == '4'\n"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9''') == '4'\nprint(solution(stdin))\n'''"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('0 0\\n0 1\\n1 1\\n2 1\\n0 1') == '0'\nassert solution('5 1\\n0 2\\n1 2\\n2 3\\n0 3') == '0'\nassert solution('6 6\\n0 1\\n0 2\\n1 3\\n1 4\\n2 4\\n3 5\\n3 6') == '3'\nassert solution('5 2\\n0 1\\n1 2\\n2 3\\n2 4\\n0 1') == '0'\n"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9') == '4'\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\n\ndist = {0:0}\ncabs = [[int(x) for x in input().split()] for i in range(m)]\n\nfor cab in cabs:\n    dist[cab[1]] = max(dist.get(cab[1], 0), cab[2])\n\nprev = dist[n-1]\n\nfor key in range(n):\n    if key not in dist:\n        dist[key] = prev + dist[key]\n    else:\n        dist[key] = max(dist[key], prev + dist[key])\n    prev = dist[key]\n\nprint(max(dist.values()))\n"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('2\\n1\\n1\\n1') == '0'\nassert solution('5\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9') == '4'"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '0'\nassert solution('1\\n2') == '-1'\nassert solution('1\\n0') == '-1'\nassert solution('0\\n0') == '0'\n"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9') == '4'\n\nassert solution('5 7\\n0 1 2\\n0 3 7\\n1 2 3\\n2 3 7\\n2 4 2\\n4 3 7') == '12'\n\"\"\""
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n10 10 0 5') == '100'\n"
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5') == '5'\n\"\"\""
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n1 2 0 2\\n\") == \"2\"\nassert solution(\"1\\n1 2 0 2\\n\") == \"2\"\nassert solution(\"1\\n1 2 0 2\\n\") == \"2\"\nassert solution(\"1\\n1 2 0 2\\n\") == \"2\"\nassert solution(\"1\\n1 2 0 2\\n\") == \"2\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 1 0 5\\n4 10 1 10\\n2 20 5 10\\n3 0 4 5\\n1 1 1 1\\n3 0 4 5\\n2 20 5 10\\n4 1 1 1\") == \"100\"\nassert solution(\"7 1 0 5\\n4 10 1 10\\n2 20 5 10\\n3 0 4 5\\n1 1 1 1\") == \"25\"\nassert solution(\"7 1 0 5\\n4 10 1 10\\n2 20 5 10\\n3 0 4 5\\n1 1 1 1\") == \"25\"\nassert solution(\"7 1 0 5\\n4 10 1 10\\n2 20 5 10\\n3 0 4 5\\n1 1 1 1\") == \"25\"\nassert solution(\"7 1 0 5\\n4 10 1 10\\n2 20 5 10\\n3 0 4 5\\n1 1 1 1\") == \"25\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\n\n\"\"\"\nfrom collections import deque\nimport sys"
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 0 5\") == \"100\"\nassert solution(\"1 10 0 5\") == \"5\"\nassert solution(\"1 1 0 5\") == \"5\"\n\n'''\n\n\nimport math\nfrom collections import namedtuple\n"
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3 0 6\\n7 3 0 6\\n7 3 0 6\\n') == '100'\nassert solution('1 9 0 8\\n9 1 0 8\\n') == '20'\nassert solution('5 1 0 5\\n1 1 0 5\\n5 1 0 5\\n1 1 0 5\\n5 1 0 5') == '30'\n\n\"\"\"\n\nfrom typing import List\n\n\"\"\"\nLet's do the problem in O(N^2) complexity.\n\nFirst we'll count the total population by year.\nFor every year we'll look up the increase of population\nfor every species and multiply this number by the population \nof the species in that year.\n\nThen we'll store the total population for each year.\n\nFinally, we'll look up the population for the year after \nthe last year and multiply it by the maximum population.\n\nThe total population for the last year will be the max of \nthe population for the year after that, and the population \nfor the year before the last year.\n\"\"\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport unittest\nfrom collections import namedtuple\n\nclass Node:\n    def __init__(self, name, parent=None):\n        self.name = name\n        self.parent = parent\n        self.children = []\n        self.ancestors = []\n        self.descendants = []\n    def add_child(self, child_name):\n        if self.children is None:\n            self.children = []\n        self.children.append(child_name)\n        child_node = Node(child_name, parent=self)\n        self.children.append(child_node)\n        return child_node\n    def add_ancestor(self, ancestor_name):\n        if self.ancestors is None:\n            self.ancestors = []\n        self.ancestors.append(ancestor_name)\n        ancestor_node = Node(ancestor_name, parent=self)\n        self.ancestors.append(ancestor_node)\n        return ancestor_node\n    def add_descendant(self, descendant_name):\n        if self.descendants is None:\n            self.descendants = []\n        self.descendants.append(descendant_name)\n        descendant_node = Node(descendant_name, parent=self)\n        self.descendants.append(descendant_node)\n        return descendant_node"
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8\") == \"1\""
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8') == '1'\n"
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8') == '1'\n"
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0 2 2\\n1 1 3 4\\n5 7 6 8') == '1'\n\"\"\""
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3\n0 0 2 2\n1 1 3 4\n5 7 6 8\"\"\") == \"1\"\nassert solution(\"\"\"3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n0 1 4 1\"\"\") == \"0\"\nassert solution(\"\"\"3\n0 0 2 2\n0 1 4 1\n5 7 6 8\"\"\") == \"1\"\nassert solution(\"\"\"3\n1 1 3 4\n0 1 4 1\n5 7 6 8\"\"\") == \"0\"\nassert solution(\"\"\"3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n2 2 3 4\"\"\") == \"0\"\n\n\"\"\"[Advent of Code 2020](https://adventofcode.com/2020)"
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8\") == \"1\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8\") == \"1\"\n\n-----Notes-----\nAs in problem 133, the rectangles are defined by their lower left and upper right points (x1, y1) and (x2, y2).\n\"\"\"\n"
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8\") == \"1\"\n\"\"\""
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 1 3 4\\n5 7 6 8') == '1'\nprint(solution(\"2\\n1 1 3 4\\n5 7 6 8\"), '1')\nprint(solution(\"2\\n1 1 3 4\\n5 7 6 8\\n1 2 2 5\"), '1')\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 0 2 2\\n1 1 3 4\") == 1\nassert solution(\"2\\n0 0 1 1\\n1 1 2 2\") == 0"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\") == 17\n\"\"\"\n"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S') == '17'\n\nimport numpy as np"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 2 3 4 5\\n0 0 0 0 0\\n-1 -1 -1 -1 -1\\n0 0 0 0 0\") == \"17\"\nassert solution(\"4 4\\n1 2 3 4 5\\n0 0 0 0 0\\n-1 -1 -1 -1 -1\\n0 0 0 0 0\") == \"9\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\") == \"17\"\n\n\"\"\""
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n\"\"\") == \"17\"\n\nassert solution(\"\"\"\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n4 4\nE E E E\n1 2 3 4\n5 5 5 5\nE E E E\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2 2\n1 2\n1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 4\nE E E E\n1 2 3 4\n5 5 5 5\nE E E E\n\"\"\") == \"0\""
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\\n\") == \"17\"\n-----Problem-----\nYou are a professional rock climber. You want to deep-water solo a rock climbing cliff over the ocean. Deep-water soloing (DWS) is a form of solo rock climbing that relies solely upon the presence of water at the base of the climb to protect against injury from falling.\n\nRock climbing is very exhausting and takes lots of energy. Since you are not very flexible, you can only move $1$ unit in any of the four directions: Up, Down, Left, and Right. Traveling to a different square will decrease your energy by the amount on that square. Note that the amount of energy on a square can be negative. In this case, you will gain energy.\n\nIf you\u2019re out of energy, you will fall into the water.\n\nYou don't want to get wet, so you ask the questions.\n\nWrite a function solution(grid: List[List[int]]) -> int, where grid is a grid of numbers. The function should return the minimum initial amount of energy necessary to complete the climb without falling.\n\n-----Solution-----\nThe solution is to solve the following dynamic programming problem:\nLet dp[i][j] be the minimum amount of energy needed to complete a route to the bottom row, starting from the point (i,j). For each square of the grid, we either have to go up, down, left, or right. We only want to go up or down, so we can ignore left and right.\n\nThe base case is dp[0][j] = grid[0][j] (where 0 is the top row) because the path from this point is just moving directly downward.\n\nWe can see that this problem is a dynamic programming problem, so we can use the dynamic programming approach. To find the minimum of dp[i][j], we need to find the minimum of dp[i-1][j] and dp[i][j-1]. If we go left, then the minimum of dp[i-1][j] is dp[i][j-1], and if we go up, the minimum of dp[i][j-1] is dp[i-1][j].\n\nOnce we have these two numbers, we take the minimum of these two numbers.\n\n-----Test Case-----\nSample Input:\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\nSample Output:\n17\n-----Solution-----\n"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S') == '17'\n\"\"\"\n\nimport numpy"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\") == \"17\"\nassert solution(\"5 5\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\") == \"18\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9''') == '17'\n\n\"\"\"\n\nR,C = map(int, stdin.readline().strip().split())\nm = [stdin.readline().strip() for i in range(R)]\nn = [stdin.readline().strip() for i in range(R)]\nk = stdin.readline().strip()\n\na = [list(map(int, i.split())) for i in n]\nb = [list(map(int, i.split())) for i in m]\n\nfor i in b:\n    for j in range(C):\n        i[j] = abs(i[j] - a[0][j])\n\nfor i in range(R):\n    for j in range(C):\n        if b[i][j] < a[i][j]:\n            print(-1)\n            exit()\n\nprint(sum(b[0]))"
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S') == '17'"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\"\n\"\"\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\"\nassert solution(\"5\\n3 2 3 1 1\")!= \"2 3 5 1 4\"\nassert solution(\"5\\n5 3 2 3 1\") == \"impossible\"\n\n\"\"\""
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\nassert solution('5\\n3 1 3 2 1') == 'impossible'\nassert solution('4\\n2 3 4 1') == '2 3 1 4'\nassert solution('3\\n3 1 2') == 'impossible'\nassert solution('3\\n1 3 2') == 'impossible'\n"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == '1 4 3 5 2'\n"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == '1 4 3 5 2'\nassert solution(\"5\\n3 2 3 1 1\") == 'impossible'\n\n-----Problem-----\nAlan works for a company specialising in computer security. He recently came up with what he thinks is a great public key cryptosystem, in which the private key consists of two permutations $\\pi $ and $\\sigma $ of $\\{ 1, \\dots, n\\} $. The public key $(a_1, \\dots, a_ n)$ is then given by $a_ i \\equiv \\pi _ i + \\sigma _ i \\pmod{n}$ for $1 \\leq i \\leq n$. The expression $x \\equiv y \\pmod n$ means that $x$ and $y$ have the same remainder after division by $n$.\n\nAs an example with $n = 5$, consider\\begin{align*} \\pi & = (3,1,5,2,4), \\\\ \\sigma & = (5,1,3,4,2), \\text {and} \\\\ a & = (3,2,3,1,1). \\end{align*}\n\nHere, for example, $a_5 \\equiv 1 \\equiv 4 + 2 \\equiv \\pi _5 + \\sigma _5 \\pmod{5}$, and all the entries in $\\pi $ and $\\sigma $ respectively are $\\{ 1, \\dots, 5\\} $, each number occurring exactly once.\n\nAlan\u2019s coworkers have some doubts about this system being secure, since finding any private key corresponding to the public key would break the system. Your task is to help them out. Given $n$ and a sequence $a = (a_1, \\dots, a_ n)$, determine whether there are two permutations $\\pi $ and $\\sigma $ such that $\\pi _ i + \\sigma _ i = a_ i \\pmod{n}$ for each $i$. If there are more such pairs, print any of them.\n\n-----Input-----\nThe first line contains the length $n$ of the sequence and the permutation is written. The second line contains integers $a_1, \\dots, a_ n$, satisfying $1 \\leq a_ i \\leq n$. The length $n$ satisfies $1 \\leq n \\leq 1000$.\n\n-----Output-----\nIf there is no solution, output \u201cimpossible\u201d. If there is a solution, output any of them, writing the two permutations on one line each.\n\n-----Examples-----\nSample Input:\n5\n3 2 3 1 1\nSample Output:\n1 4 3 5 2 \n2 3 5 1 4\n\nSample Input:\n6\n5 2 6 1 1 3\nSample Output:\nimpossible\n\"\"\""
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\nassert solution('7\\n1 2 3 6 5 4 7') == '1 6 4 2 5 7 3'\nassert solution('8\\n4 2 5 1 3 6 1 1') == 'impossible'\nassert solution('4\\n4 4 2 1 2') == 'impossible'\nassert solution('3\\n1 1 2') == 'impossible'\n"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\nassert solution('5\\n3 2 3 1 1') == 'impossible'\n\n-----Test Input-----\n6\n3 2 3 1 1\n5\n4 5 2 2 5\n4\n2 1 2 4\n6\n3 1 3 4 6\n7\n4 1 2 2 5\nSample Output:\nimpossible\n3 4 1 2 5\nimpossible\n1 4 5 3 2\n1 2 5 4 3\n2 3 5 4 1\n2 3 5 1 4\n\n-----Problem Statement-----\nGiven the sequence of integers in a line, the program must determine whether there are two permutations $\\pi $ and $\\sigma $ such that $\\pi _i + \\sigma _i = a_i \\pmod{n}$ for each $i$ (1 $\\leq i \\leq n$). If there are more such pairs, print any of them.\n\nInput\nThe first line contains the length $n$ of the sequence and the permutation is written. The second line contains integers $a_1, \\dots, a_ n$, satisfying $1 \\leq a_ i \\leq n$. The length $n$ satisfies $1 \\leq n \\leq 1000$.\n\nOutput\nIf there is no solution, output \u201cimpossible\u201d. If there is a solution, output any of them, writing the two permutations on one line each.\n\nExample\nInput\n\n5\n3 2 3 1 1\n5\n4 5 2 2 5\n4\n2 1 2 4\n6\n3 1 3 4 6\n7\n4 1 2 2 5\n\nOutput\n\n1 4 3 5 2\n2 3 5 1 4\n\"\"\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'impossible'\nassert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\nassert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\nassert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\nassert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\n"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\nassert solution('3\\n3 1 2') == 'impossible'\n"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1\\n1 3\\n4 2\\n6 5\\n6 0') == '0.4125'\n\nassert solution('5 1\\n1 3\\n4 2\\n6 5\\n6 0') == '0.4125'\n\nassert solution('5 1\\n1 3\\n4 2\\n6 5\\n6 0') == '0.4125'\n\nassert solution('5 1\\n1 3\\n4 2\\n6 5\\n6 0') == '0.4125'\n\nassert solution('5 1\\n1 3\\n4 2\\n6 5\\n6 0') == '0.4125'"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2 0 1\\n3 4') == '0.5'\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 0 1\\n1 4\\n\") == '0.76772047'\n\"\"\"\n\nfrom math import *"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n3 0 1\\n1 4') == '0.76772047'"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n1 4') == '0.76772047'\n"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n3 0 1\\n1 4') == '0.76772047'\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    trees = list(map(int, line.strip().split()))\n    b, d = trees[-2:]\n    trees = trees[:2]\n    areas = [b * (tree ** 2) for tree in trees]\n    overlap = 0\n    for i, area in enumerate(areas):\n        if overlap + area > d ** 2:\n            break\n        overlap += area\n    print(1 - overlap / d ** 2)\n"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"1\n3 0 1\n1 4\n\"\"\") == '0.76772047'\n\nassert solution(\"\"\"2\n2 2 1\n4 0 2\n\"\"\") == '0.927295218001612'\n\nassert solution(\"\"\"6\n5 0 5\n7 2 3\n8 5 4\n4 5 2\n6 0 6\n3 0 1\n\"\"\") == '0.8'\n\nassert solution(\"\"\"1\n3 0 1\n1 4\n\"\"\") == '0.76772047'\n\nassert solution(\"\"\"1\n3 0 1\n1 4\n\"\"\") == '0.76772047'"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n3 0 1\\n1 4\") == \"0.76772047\"\nassert solution(\"2\\n5 0 1\\n4 2\") == \"0.57390625\"\nassert solution(\"2\\n4 0 1\\n3 4\") == \"0.4296875\"\n\n\"\"\"\n"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 0 1\\n1 4\") == \"0.76772047\"\n\"\"\""
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n3 0 1\\n1 4\") == \"0.76772047\"\n\"\"\"\nfrom math import pi, cos, sin\nimport sys"
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('hello teams') == '27'\n\"\"\""
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"hello teams\") == 27\n\"\"\""
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('hello teams') == 27\n\n\"\"\""
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('hello teams') == '27'\nassert solution('goodbye') == '5'\nassert solution('mazda') == '4'\nassert solution('bbdddbbbb') == '1'\nprint('all tests passed')\n\"\"\"\n"
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"hello teams\") == \"27\"\nassert solution(\"bbdddbbbb\") == \"3\"\n\"\"\""
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"hello teams\") == \"27\"\n\nassert solution(\"hemp gddlw\") == \"12\"\n\nassert solution(\"bbdddbbbb\") == \"0\"\n\nassert solution(\"helmp\") == \"27\"\n\nassert solution(\"teams\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"hello teams\") == \"27\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('hello teams') == 27\nassert solution('heljlo tmns') == 18\n\"\"\"\n\nimport numpy as np\nfrom collections import Counter"
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"hello teams\") == 27\nassert solution(\"hello ffffffff\") == 2\nassert solution(\"hello ffffffff\") == 2\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('hello teams') == '27'\n\"\"\"\n\n\nfrom typing import List\nfrom collections import Counter\nfrom itertools import permutations\n"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"6 3\\n1 8\\n5 4\\n7 7\\n9 2\\n16 6\\n17 10\\n4 7 2\\n6 3 1\\n12 6 3\"\n) == 2\n"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 8\\n5 4\\n7 7\\n9 2\\n16 6\\n17 10\\n4 7 2\\n6 3 1\\n12 6 3\") == \"2\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n2 1\\n1 1') == '1'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n3 4\\n5 6\") == \"1 2\\n3 4\\n5 6\"\nassert solution(\"10 20\\n15 16\\n20 15\\n21 16\\n20 20\\n21 15\\n19 10\\n15 20\\n21 18\\n17 14\\n21 14\\n21 15\\n15 10\\n15 11\\n19 20\\n21 11\\n20 17\\n20 20\\n20 20\\n21 19\\n15 10\\n20 14\\n21 15\\n17 10\\n20 16\\n20 15\\n21 15\\n20 19\\n21 15\\n19 11\\n20 17\\n21 12\\n16 11\\n19 10\\n15 16\\n20 14\\n20 20\\n21 19\\n19 16\\n21 12\\n20 20\\n19 18\\n16 11\\n20 16\\n21 16\\n20 20\\n21 13\\n21 10\\n19 20\\n19 12\\n21 12\\n20 20\\n21 19\\n17 19\\n21 13\\n20 14\\n20 16\\n21 12\\n20 16\\n19 16\\n20 16\\n20 16\\n20 20\\n21 20\\n21 20\\n21 13\\n21 14\\n19 20\\n21 18\\n19 16\\n21 18\\n20 16\\n19 11\\n20 12\\n20 15\\n19 13\\n21 19\\n19 18\\n21 12\\n21 10\\n19 10\\n21 12\\n21 10\\n20 10\\n19 14\\n21 19\\n21 12\\n20 15\\n20 18\\n21 19\\n20 19\\n19 11\\n19 16\\n21 18\\n21 16\\n21 16\\n21 16\\n21 18\\n21 12\\n21 16\\n21 13\\n20 20\\n21 14\\n21 13\\n21 10\\n19 16\\n20 16\\n21 12\\n21 13\\n20 16\\n19 16\\n21 18\\n21 16\\n21 13\\n21 10\\n21 16\\n21 16\\n21 16\\n21 12\\n21 14\\n21 10\\n21 18\\n21 16\\n19 20\\n21 14\\n21 14\\n21 16\\n19 16\\n21 18\\n21 16\\n21 14\\n21 19\\n19 18\\n21 12\\n21 10\\n20 10\\n19 18\\n19 18\\n19 18\\n19 18\\n21 18\\n21 18\\n21 18\\n21 18\\n21 19\\n21 19\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\n21 10\\"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n0 1\\n1 1\\n1 1\\n3 1\\n5 1\\n4 3\\n0 1\") == '2'\nassert solution(\"5 3\\n0 2\\n1 1\\n1 2\\n3 2\\n2 0\\n0 1\\n0 1\") == '2'\nassert solution(\"2 2\\n1 1\\n0 0\\n0 1\") == '0'\nassert solution(\"6 3\\n0 4\\n1 4\\n2 4\\n3 4\\n4 0\\n0 1\\n0 1\\n0 1\") == '3'\n\"\"\""
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3\\n1 8\\n5 4\\n7 7\\n9 2\\n16 6\\n17 10\\n4 7 2\\n6 3 1\\n12 6 3\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n3 4\\n3 5\") == \"1\"\nassert solution(\"3 3\\n5 5\\n2 2\\n3 3\\n2 4\") == \"0\"\nassert solution(\"1 2\\n3 4\\n3 5\") == \"0\"\n\n------Solution------\n\"\"\"\n\nfrom __future__ import print_function\nimport sys\nimport collections\nimport math\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\"\"\") == \"2\"\n\nassert solution(\"\"\"6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\"\"\") == \"2\"\n\nassert solution(\"\"\"6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\"\"\") == \"2\"\n\n\"\"\"\nFrom each beacon, we can see the beacons of that row and the peaks above and below that beacon. There is no possible way that the beacons of a row are all lit, unless all peaks are within sight of all beacons. So the number of messages is the maximum number of beacons that are lit.\n\nTo calculate the number of beacons that are lit, we can do the following:\n\nWe start by considering the leftmost beacon on the row. If it's not lit, we know that it can never be lit.\n\nThen we consider every beacon in the row itself, including the rightmost beacon. If it's not lit, we know that it can never be lit.\n\nThen we consider every beacon on the row above the current one. If it's not lit, we know that it can never be lit.\n\nFinally, we consider every beacon on the row below the current one. If it's not lit, we know that it can never be lit.\n\nThis gives us the number of beacons that are lit:\n\nleftmost beacon light if it is\nbeacon light if it's not\nbeacon light if it's not\nbeacon light if it's not\nbeacon light if it's not\nbeacon light if it's not\n\nTherefore, the number of beacons that are lit is equal to the maximum of the number of beacons in the row plus the number of beacons in the row above plus the number of beacons in the row below.\n\"\"\""
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3\\n1 8\\n5 4\\n7 7\\n9 2\\n16 6\\n17 10\\n4 7 2\\n6 3 1\\n12 6 3\") == 2\n\n-----Notes-----\n\n\"\"\"\n\n\nimport collections\nimport sys\nfrom collections import defaultdict\nfrom typing import List, DefaultDict, Dict"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n2 1\\n5 3\\n4 1\\n3 2\\n1 4\\n4 5') == '6'\n\"\"\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\nabc\\nacd\\nbcd\\nabd\") == \"26\"\nassert solution(\"2 4\\nab\\ncd\\nba\") == \"3\"\nassert solution(\"1 2\\nab\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\na\\nb\\nc\\nd\\ne\\nf\\n') == 'c'\nassert solution('7 3\\nab\\naac\\naad\\naba\\nabb\\nacc\\nadd\\n') == 'd'\nassert solution('5 3\\nab\\naba\\nabb\\nabc\\nabd\\n') == 'd'\nassert solution('7 5\\nab\\naba\\nabb\\nabc\\nabd\\nacd\\n') == 'c'\nassert solution('5 5\\nab\\naba\\nabb\\nabc\\nabd\\nacd\\n') == 'd'\n"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\nij\\nk\\nl\\nm\\nn\\no\\np\\nq\\nr\\ns\\nt\\nu\\nv\\nw\\nz\\nx\\n') == '1'\n\nassert solution('a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\nij\\nk\\nl\\nm\\nn\\no\\np\\nq\\nr\\ns\\nt\\nu\\nv\\nw\\nz\\nx\\n') == '2'\n\nassert solution('a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\nij\\nk\\nl\\nm\\nn\\no\\np\\nq\\nr\\ns\\nt\\nu\\nv\\nw\\nz\\nx\\n') == '4'\n\nassert solution('a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\nij\\nk\\nl\\nm\\nn\\no\\np\\nq\\nr\\ns\\nt\\nu\\nv\\nw\\nz\\nx\\n') == '6'\n\nassert solution('a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\nij\\nk\\nl\\nm\\nn\\no\\np\\nq\\nr\\ns\\nt\\nu\\nv\\nw\\nz\\nx\\n') == '10'"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\na\\nb\\nc\\nd\\ne\\ncad\") == 26\n\"\"\"\n\nimport sys\nimport collections\nimport itertools\n\nsys.setrecursionlimit(1000000)\n\n\"\"\"\nnk = [int(n) for n in stdin.readline().split()]\nstring = stdin.readline()\n\"\"\"\n\nnk = [int(n) for n in sys.stdin.readline().split()]\nstring = sys.stdin.readline()"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\na\\nb\\nc\\nd\\ne\\ncad\") == 26\n\"\"\"\n\nimport sys\nimport bisect\nimport itertools"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\nabcde\\nbcde\\nbcde\\nbcde\\nbcde\\n') == '12'\nassert solution('5 2\\nabcde\\nbcde\\nbcde\\nbcde\\nbcde\\n') == '12'\nassert solution('5 2\\nabcde\\nbcde\\nbcde\\nbcde\\nbcde\\n') == '12'\nassert solution('5 3\\nabcde\\nbcde\\nbcde\\nbcde\\nbcde\\n') == '26'\nassert solution('5 3\\nabcde\\nbcde\\nbcde\\nbcde\\nbcde\\n') == '26'\n"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\na\\nb\\nc\\nd\\ne\\ncad') == '26'\n\"\"\"\n\nimport unittest\nimport heapq\n"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 3\na\nb\nc\nd\ne\ncad''') == '26'\nassert solution('''5 3\na\nb\nc\nd\ne\ncad\nd''') == '26'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\na\\nb\\nc\\nd\\ne\\ncad') == 26\nassert solution('5 1\\na\\nb\\nc\\nd\\ne\\nca') == 1\nassert solution('5 4\\na\\nb\\nc\\nd\\ne\\nca\\nd\\n') == 7\nassert solution('5 3\\nabc\\nd\\ne\\ncad') == 26\nassert solution('5 2\\na\\nb\\nc\\nd\\ne\\nca') == 1\n"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n a\\n b\\n c\") == \"1\"\n\"\"\""
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10 30\\n10 5 3 1 3\") == \"3 5 2 1 4\"\nassert solution(\"4 5 11\\n3 1 5 4\") == \"impossible\"\nassert solution(\"1 3\\n1 2\") == \"1 2\"\n\"\"\"\n\nimport sys\n\nn, m, k = map(int, sys.stdin.readline().split())\ncritic_scores = map(int, sys.stdin.readline().split())\n\ncritic_scores = sorted(critic_scores, reverse=True)"
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 20 10\") == \"impossible\"\nassert solution(\"4 10 20 10\") == \"4 1 3 2\"\n\"\"\""
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10 30\\n10 5 3 1 3\") == \"3 5 2 1 4\"\nassert solution(\"5 10 3\\n5 5 3 1 3\") == \"impossible\"\nassert solution(\"5 10 1\\n1 5 3 1 3\") == \"impossible\"\nassert solution(\"5 10 30\\n5 5 3 1 3\") == \"impossible\"\n\"\"\"\nimport itertools"
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 10 30\n10 5 3 1 3''') == '3 5 2 1 4'\nassert solution('''4 6 7\n5 3 1 4''') == 'impossible'\n\n\"\"\""
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10 30\\n10 5 3 1 3\") == \"3 5 2 1 4\"\n\"\"\""
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10 30\\n10 5 3 1 3\") == \"3 5 2 1 4\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 30\\n10 5 3 1 3\") == \"3 5 2 1 4\"\n\"\"\"\nimport itertools\nimport collections"
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 10 30\n10 5 3 1 3\"\"\") == \"\"\"3 5 2 1 4\"\"\"\nassert solution(\"\"\"6 20 70\n1 2 3 2 3 2\"\"\") == \"\"\"impossible\"\"\"\nassert solution(\"\"\"1 1 1\n1\"\"\") == \"\"\"1\"\"\"\n\n\"\"\"\nIn the first line you will receive 3 integers: n, m and k.\nIn the second line you will receive n integers: a_1,..., a_n.\nWrite a function:"
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 30\\n10 5 3 1 3\") == \"3 5 2 1 4\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 30\\n10 5 3 1 3\") == \"3 5 2 1 4\"\n\n\"\"\""
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n2 3\\n2 3\") == \"2\"\nassert solution(\"4 1\\n2 3\\n2 3\") == \"shovel time!\"\n\"\"\""
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 1\") == \"shovel time!\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nm = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n"
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n2 3\\n2 3') == '2'\n"
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1\\n2 3\\n2 3') == 2\n"
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3') == '2'\n\"\"\"\n\ns = [0, 1]\nn = 0\nfor line in stdin:\n    a, b = [int(n) for n in line.split()]\n    a %= 1_000_000_000_000\n    b %= 1_000_000_000_000\n    k = a - b\n    if k < 0:\n        k = 1_000_000_000_000 + k\n    k = (k * s[1] + s[0]) % 1_000_000_000_000_000_000_000_000_000\n    s = [s[1], s[0] + s[1]]\n    n += k\n\nprint(n % 1_000_000_000_000_000_000_000_000_000_000_000_000)\n"
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1\\n2 3\\n2 3\") == 2\n\n\"\"\""
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1\\n2 3\\n2 3') == '2'\n\nimport unittest\nclass Test(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution('3\\n1 1\\n2 3\\n2 3'), '2')\n    def test_2(self):\n        self.assertEqual(solution('3\\n1 1\\n2 3\\n2 3'), '2')\n    def test_3(self):\n        self.assertEqual(solution('1\\n1 1\\n1 1'), '1')"
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1\\n2 3\\n2 3\") == \"2\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(1500)"
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"shovel time!\"\nassert solution(\"1 2\") == \"shovel time!\"\nassert solution(\"2 3\") == \"shovel time!\"\nassert solution(\"1 2 2\") == \"shovel time!\"\nassert solution(\"1 2 3\") == \"shovel time!\"\n"
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1\\n2 3\\n2 3\") == '2'\n"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n\n----\n\n\nWrite 5 lines of code to test the correctness of solution:\nYou are the boss of ACM (Association for the Country of Mububa), an upstanding company with a single goal of world domination.\n\nToday, you have conquered the unnamed country of Mububa (how an unnamed country has a name is, of course, outside the scope of this problem). Mububa is known for its great, great, bananas. In light of this monumental achievement, you have decided to reward your executives with Mububa\u2019s greatest treasure (which is obviously, bananas). You have prepared $N$ briefcases, each contains a number of bananas. These briefcases are numbered from $1$ through $N$.\n\nYou reward your executives one by one in order from the least evil executive, to the most evil executive (still not comparably evil to you, of course). No two executives are equally evil. For each executive, you first decide how many briefcases you want to give him. If you decide to give an executive $a$ briefcases, you give him the $a$ briefcases with lowest numbers that you still have. Each executive you reward must receive at least one briefcase.\n\nIt is important to be fair when distributing rewards. You do not want your executives to stage a hunger strike, after all. Thus, the rewards the executives received must reflect how evil they are. More rigorously, if executive $A$ is more evil than executive $B$, then the total number of bananas received by executive $A$ must be at least as large as the total number of bananas received by executive $B$.\n\nYou know the number of bananas inside all of the briefcases. You want to reward as many executives as possible, but wants the distribution to still be fair (i.e. following the previous requirement) amongst them. What is the maximum number of executives you can reward this way?\n\n-----Input-----\nThe first line contains a non-negative integer $2 \\leq N \\leq 3000$, giving the number of briefcases you have. Then follows a line with $N$ integers, the $i$-th of which denotes the number of bananas in briefcase number $i$. Each briefcase contains between $1$ and $10^9$ bananas, inclusively.\n\n-----Output-----\nPrint the maximum number of executives you can reward with bananas.Sample Data explanation\n\nIn the first example, give briefcase $1$ to the least evil executive, briefcase $2$ to the second least evil executive, and briefcases $3$ and $4$ to the most evil executive.\n\nIn the second example, give briefcase $1$ to the least evil executive, briefcases $2$ and $3$ to the second least evil executive, and briefcases $4$, $5$, and $6$ to the most evil executive.\n\n-----Examples-----\nSample Input:\n4\n1 2 1 2\nSample Output:\n3\n"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 1 2') == 3\n\"\"\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"3\"\nassert solution(\"5\\n1 2 3 2 5\") == \"4\"\nassert solution(\"6\\n1 2 3 4 2 3 1\") == \"3\"\nassert solution(\"7\\n1 2 3 4 2 5 1\") == \"3\"\nassert solution(\"8\\n1 2 3 4 3 2 1\") == \"3\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 1 2') == '3'\nassert solution('6\\n5 2 1 3 6 3 2') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"3\"\nassert solution(\"4\\n4 4 4 4\") == \"4\"\nassert solution(\"4\\n2 2 2 2\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 1 2') == '3'\n"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"3\"\nassert solution(\"4\\n1 2 1 2\\n\") == \"3\"\nassert solution(\"4\\n1 2 3 4\") == \"3\"\nassert solution(\"4\\n2 2 4 4\") == \"2\"\nassert solution(\"4\\n2 2 2 2\") == \"1\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 1 2') == '3'\nassert solution('4\\n2 1 2 1') == '2'\nassert solution('4\\n2 2 1 1') == '3'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 1 2') == '3'\nassert solution('3\\n1 2 1') == '2'\nassert solution('2\\n1 1') == '1'\nassert solution('1\\n1') == '1'\nassert solution('2\\n2\\n2') == '1'\n"
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 1 2') == 3\n\"\"\"\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\nassert solution(\"2 1 1\") == \"0\"\nassert solution(\"3 4 8\") == \"10\"\nassert solution(\"1 2 4\") == \"5\"\nassert solution(\"4 1 5\") == \"7\"\n\"\"\""
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\n\"\"\""
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\nassert solution(\"2 2 2\") == \"0\"\nassert solution(\"5 5 999999937\") == \"3055\"\nassert solution(\"7 7 999999937\") == \"1807937\"\nassert solution(\"10 5 999999937\") == \"6004907937\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n4 4 999999937\n''') == '79'\n\nassert solution('''\n2 2 3\n''') == '0'\n\nassert solution('''\n1 1 9999\n''') == '9'\n\nprint('Success')\n\n\"\"\"\n\u0420\u0430\u0437\u043c\u0435\u0440 \u043e\u0431\u043b\u0430\u0441\u0442\u0438: 2 x 2\n\u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0432\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u0430, \u0443\u0434\u0430\u043b\u044f\u044f \u0438\u0437 \u043d\u0438\u0445 \u0432\u0441\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0432\u0430 \u0441\u0442\u0440\u043e\u043a\u0438, \u0443\u0434\u0430\u043b\u044f\u044f \u0438\u0437 \u043d\u0438\u0445 \u0432\u0441\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043e\u0431\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u0430, \u0437\u0430\u0442\u0435\u043c \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043e\u0431\u0430 \u0441\u0442\u0440\u043e\u043a\u0438.\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1'\nassert solution('2 2 3') == '0'\nassert solution('4 4 2') == '4'\nassert solution('4 4 999999937') == '79'\n"
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\nassert solution(\"1 1 7\") == \"4\"\nassert solution(\"1 1 2\") == \"1\"\n\nprint(solution(stdin))\n\n----\n\nimport math\n"
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\n\"\"\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\n\n\"\"\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 +zucchini +mozzarella +mushrooms -artichoke\") == \"zucchini mozzarella mushrooms\"\n\n\"\"\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 +zucchini +mozzarella +mushrooms -artichoke\") == \"zucchini\"\n\"\"\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n4 +zucchini +mozzarella +mushrooms -artichoke\") == \"zucchini\\nmushrooms\\nartichoke\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\ntoppings = {}\nfor _ in range(n):\n    num_toppings, *wanted_toppings = sys.stdin.readline().strip().split()\n    for wanted_topping in wanted_toppings:\n        if wanted_topping in toppings:\n            toppings[wanted_topping] += 1\n        else:\n            toppings[wanted_topping] = 1\n\ntoppings = sorted(toppings.items(), key=lambda kv: kv[1], reverse=True)\n\nresult = []\nfor topping, count in toppings:\n    if count > n // 3:\n        result.append(topping)\n        n -= count\n"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n4 +zucchini +mozzarella +mushrooms -artichoke') == 'zucchini\\nmushrooms'\n'''\n\nfrom collections import defaultdict"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 +zucchini +mozzarella +mushrooms -artichoke\") == 'zucchini mozzarella mushrooms artichoke'\nassert solution(\"1 +zucchini +mozzarella +mushrooms -artichoke\") == 'zucchini mozzarella mushrooms artichoke'\nassert solution(\"1 +zucchini +mozzarella +mushrooms -mozzarella +artichoke\") == 'zucchini mozzarella mushrooms artichoke'\nassert solution(\"1 +zucchini +mozzarella +mushrooms +artichoke\") == 'zucchini mozzarella mushrooms artichoke'\n\n\"\"\"\n\nfrom collections import Counter, defaultdict\n\nclass Solution:\n    def solution(self, n: int, stdin: str) -> str:\n        toppings = defaultdict(list)\n        for line in stdin.splitlines()[1:]:\n            op, *ingredients = line.split()\n            for ing in ingredients:\n                toppings[ing].append(op)\n\n        return \" \".join([max(toppings[ing], key=toppings[ing].count) for ing in toppings])\n\nassert Solution().solution(4, \"4 +zucchini +mozzarella +mushrooms -artichoke\") == 'zucchini mozzarella mushrooms artichoke'\n"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 +grapefruit +lemon +banana +apple\") == \"grapefruit lemon banana apple\"\nassert solution(\"2 +tomato +onion\") == \"tomato onion\"\nassert solution(\"1 +eggplant\") == \"eggplant\"\n\n\"\"\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini\\nmozzarella\\nmushrooms\\nartichoke'\n'''"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'''\n2\n4 +zucchini +mozzarella +mushrooms -artichoke\n2 +bacon +cheese -ham +bacon\n''') == 'zucchini\\nmozzarella\\nmushrooms\\nartichoke\\n'\nassert solution(\n'''\n2\n4 +zucchini +mozzarella +mushrooms -artichoke\n2 +bacon +cheese -ham +bacon\n''') == 'zucchini\\nmozzarella\\n'\nassert solution(\n'''\n4\n4 +zucchini +mozzarella +mushrooms -artichoke\n4 +bacon +cheese -ham +bacon\n''') == 'zucchini\\nmozzarella\\nmushrooms\\nartichoke\\n'\nassert solution(\n'''\n4\n4 +zucchini +mozzarella +mushrooms -artichoke\n4 +bacon +cheese -ham +bacon\n''') == 'zucchini\\nmozzarella\\n'\nassert solution(\n'''\n5\n4 +zucchini +mozzarella +mushrooms -artichoke\n4 +bacon +cheese -ham +bacon\n''') == 'zucchini\\nmozzarella\\nartichoke\\n'\n"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 +pepperoni +sausage +olives +anchovies\\n5 +tomatoes +basil +olives +mushrooms\\n5 +tomatoes +parmesan +basil +tomatoes\\n5 +tomatoes +mushrooms +sausage +basil\\n5 +tomatoes +olives +mushrooms +chickpeas\\n5 +tomatoes +chickpeas +olives +parmesan\\n5 +tomatoes +garlic +olives +garlic\\n5 +potato +tomatoes +radicchio +olive oil\\n5 +mozzarella +coriander +olive oil +tomatoes\\n5 +mozzarella +parmesan +ginger +tomatoes\\n5 +mozzarella +zucchini +vegetable oil\\n5 +mozzarella +sausage +olives +tomatoes\\n5 +mozzarella +tomatoes +tomatoes +chickpeas\\n5 +mozzarella +potato +tomatoes +broccoli\\n5 +mozzarella +tomatoes +potato +tomatoes +broccoli\\n5 +mozzarella +vegetable oil +chickpeas +tomatoes\\n5 +mozzarella +parmesan +greek yogurt +tomatoes\\n5 +mozzarella +parmesan +olive oil +tomatoes\\n5 +mozzarella +sausage +tomatoes +chickpeas\\n5 +mozzarella +olives +tomatoes +basil\\n5 +mozzarella +tomatoes +pepperoni +basil\\n5 +mozzarella +sausage +broccoli +olives\\n5 +mozzarella +tomatoes +greek yogurt +tomatoes\\n5 +mozzarella +olives +tomatoes +olives +garlic\\n5 +mozzarella +olives +tomatoes +tomatoes +olive oil\\n5 +mozzarella +potato +tomatoes +butternut squash\\n5 +mozzarella +salami +salami +salami +salami\\n5 +mozzarella +salami +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +parmesan +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozzarella +chicken breast +salami +salami +salami\\n5 +mozz"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n4 +zucchini +mozzarella +mushrooms -artichoke\\n\") == \"zucchini\\nmushrooms\\n\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\nRR\nPS\nSS\n''') == 'SS\\nRR\\nPS'\nassert solution('''4\nPS\nPP\nRR\nSS\n''') == 'SS\\nRR\\nPS\\nPP'\nassert solution('''3\nSS\nRR\nPS\n''') == 'SS\\nRR\\nPS'\nassert solution('''3\nRR\nPS\nSS\n''') == 'RR\\nPS\\nSS'\nassert solution('''4\nPP\nRR\nPS\nSS\n''') == 'PP\\nRR\\nPS\\nSS'\n\n'''\nLet F[i] be the expected number of times that the i-th element of the final match will appear as a contiguous subsequence by your rival, assuming he follows a random strategy.\n\nFor example, if the first element of the final match is predicted to be a \u2018S\u2019, then the second element is predicted to be a \u2018P\u2019, and the third element is predicted to be a \u2018R\u2019, then the first three elements will be predicted as a contiguous subsequence by your rival, and that is expected to appear at least once.\n\nYou may assume that the input is given in the correct format and that each string represents a valid strategy for your rival, which you will use to make his decision.\n\nMore specifically, the i-th character of each string represents the choice that your rival will make in the i-th round, where each choice is one of \u2018R\u2019, \u2018P\u2019, and \u2018S\u2019.\n\nSince it is assumed that the predictions are independent, your rival will not choose the same symbol twice in the same round.\n\nA choice sequence is a sequence of strings s1,s2,\u2026,sT where Si is one of \u2018R\u2019,\u2018P\u2019, or \u2018S\u2019 and every symbol appears at least once.\n\nYou want to find the maximum possible expected number of times that the final match is predicted to contain a contiguous subsequence by your rival.\n\n-----Solution-----\nThe difficulty is to figure out the probability for each possible sequence, and then find the maximum one.\n\nA naive approach would be to try all possibilities (the number of possibilities is 2^n, where n is the number of symbols in the final match), and find the subsequence with the highest probability, but this would be inefficient, since most sequences will not occur with a high probability.\n\nInstead, we will try to find the probabilities of the initial sequence and the remaining sequences, using dynamic programming.\n\nLet F[i] be the probability that the first i elements of the final match will be predicted to be a sequence ending in Si (0 <= i <= n) and for the remaining elements to be a sequence ending in Sj (0 <= j <= n-i). Let D[i][j] be the maximum probability among all initial sequences ending in Si and the remaining sequences ending in Sj.\n\nWe can recursively find the optimal solution by:\n\n1. Find the optimal solutions of the remaining subsequences, and store them in D[n][0].\n2. For each i in [n-1, 0], if D[i+1][j] < D[i][j], we set D[i][j] = D[i+1][j] for all j in [n-i, 0].\n3. To determine the probability of the remaining subsequence, we need to compare the values for each j in [n-i, 0]. For each j, we need to compute the probability for Si:\n   - If Si is \u2018R\u2019:\n       p[Si][j] = F[j] - D[i][j]\n   - If Si is \u2018P\u2019:\n       p[Si][j] = D[i][j]\n   - If Si is \u2018S\u2019:\n       p[Si][j] = 1 - (F[j] + D[i][j])\nBy taking the maximum probability, we obtain the optimal solution for the remaining subsequences.\n\nFinally, for the initial sequence, we can just take the probability of each element as the probability of each symbol.\n\nLet F[i] be the probability that the first i elements of the final match will be predicted to be a sequence ending in Si (0 <= i <= n). Let D[i] be the maximum probability among all initial sequences ending in Si.\n\n1. If i == 0, then D[i] is the probability of the remaining sequence to be a sequence ending in S0. We set D[0] = 1.\n2. If i == 1, then D[i] is the probability of the remaining sequence to be a sequence ending in S0 and S1, and we set D[1] = 1 - (F[0] + F[1]).\n3. For each i in [2, n], we need to compare the values for each j in [n-i, 0]. For each j, we need to compute the probability for Si:\n   - If Si is \u2018R\u2019:\n       p[Si][j] = F[j] - D[i][j]\n   - If Si is \u2018P\u2019:\n       p[Si][j] = D[i][j]\n   - If Si is \u2018S\u2019:\n       p[Si][j] = 1 - (F[j] + D[i][j])\nBy taking the maximum probability, we obtain the optimal solution for the initial sequence.\n\nThen, we can obtain the maximum probability by taking the maximum probability of the initial sequence and the remaining probabilities.\n\nTime: O(n^3)\nSpace: O(n^2)\n\n'''\n\nimport collections\nimport functools\n\nINF = float('inf')"
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\nPP\\nRR\\nPS\") == 'PS'\n"
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\nPP\\nRR\\nPS\\nSS') == 'PS\\nPP\\nRR\\nSS'\n\nassert solution('3 4\\nRR\\nPP\\nPS\\nSS') == 'SS\\nRR\\nPP\\nPS'\n\nassert solution('3 4\\nRPS\\nPRS\\nSSS\\nRRR\\nPPP\\nPSS') == 'SSS\\nRRR\\nPPP\\nRPS\\nPRS\\nPSS'\n\nassert solution('3 4\\nRPS\\nRRR\\nSSS\\nPPP\\nPSS') == 'SSS\\nRRR\\nPPP\\nRPS\\nSSS'\n\nassert solution('3 4\\nRPS\\nRRR\\nSSS\\nPPP\\nPSS') == 'SSS\\nRRR\\nPPP\\nRPS\\nSSS'"
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input) == output\n\nSample Input:\n3 4\nRPR\nPSR\nRPR\nSSR\nSample Output:\nRPR\nRPR\nRPR\nSSR"
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\nPP\\nRR\\nPS\\nSS\") == \"PS\\nPP\\nRR\\nSS\"\nassert solution(\"3 3\\nRPR\\nRPS\\nRPS\\nRPS\\nRPS\") == \"RPR\\nRPS\\nRPS\\nRPS\\nRPS\"\nassert solution(\"3 3\\nRRR\\nRPS\\nRPS\\nRPS\\nRPS\\nRPS\") == \"RPR\\nRPS\\nRPS\\nRPS\\nRPS\\nRPS\"\nassert solution(\"1 1000000000\\nR\") == \"R\"\nassert solution(\"1 0\\nR\") == \"R\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\nPP\\nRR\\nPS\") == \"PS\"\nassert solution(\"3 4\\nPP\\nRR\\nSS\") == \"SS\"\nassert solution(\"3 4\\nPP\\nRR\\nPS\") == \"PS\"\nassert solution(\"3 4\\nRR\\nPS\\nSS\") == \"SS\"\nassert solution(\"3 4\\nRR\\nSS\\nPP\") == \"SS\"\n\n------Solution------\n\n\"\"\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\nPP\\nRR\\nPS') == 'PS\\nPP\\nRR'\n"
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\nPP\\nRR\\nPS\") == \"PS\"\nassert solution(\"3 4\\nPS\\nSS\\nRR\") == \"PS\"\nassert solution(\"3 4\\nRR\\nPS\\nRR\") == \"RR\"\nassert solution(\"3 4\\nPS\\nSS\\nRR\") == \"PS\"\nassert solution(\"3 4\\nPS\\nRR\\nRR\") == \"PS\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\nPP\\nRR\\nPS\") == \"PS\\nPP\\nRR\"\nassert solution(\"3 4\\nRR\\nPS\\nSS\") == \"PS\\nSS\\nRR\"\nassert solution(\"3 4\\nPP\\nRR\") == \"PP\\nRR\\nPP\"\nassert solution(\"3 4\\nPS\\nPS\") == \"PS\\nPS\\nPS\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom functools import lru_cache"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n') == '288'\nassert solution('5\\n1.0 2.0\\n0\\n0\\n0\\n0\\n') == '0'\nassert solution('5\\n0.1 0.1\\n0\\n0\\n0\\n0\\n') == '0'\nassert solution('5\\n0.1 0.1\\n0\\n0\\n0\\n0\\n') == '0'\n\nprint(solution(stdin.readlines()))\n\"\"\"\n\nimport sys\n\nimport numpy as np\n\nT = int(sys.stdin.readline())\nc, d = map(float, sys.stdin.readline().split())\nrain_arr = np.array([float(i) for i in sys.stdin.readlines()[:T]])"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n0\") == \"288\"\n'''\n"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n') == '288'\n\n-----Explanation-----\nYou choose to leave university at the latest on the 5th minute, so the optimal strategy is to go for the cycle home on the 4th minute, which will be 3 minutes faster than the original 5 minutes.\nSo you will get exactly 5m of rain and 3m of sweat in the best scenario.\n\"\"\""
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0.1 2.0\") == \"288\"\n\"\"\"\n\nfrom math import ceil\nimport sys"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '''5\n    0.1 2.0\n    0\n    0\n    0\n    0\n    0\n    '''\n) == '288'\n\nassert solution(\n    '''5\n    0.1 2.0\n    2\n    2\n    0\n    0\n    0\n    '''\n) == '256'\n\n\"\"\"\n"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n'\n) == '288.0'\n\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n0.1') == '288'\nassert solution('2\\n2.0\\n1\\n1\\n0') == '366'\nassert solution('3\\n1.0\\n1\\n1\\n1\\n0\\n0\\n0') == '408'\n"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n\") == \"288\"\n\n-----Source-----\n'''\n\nimport math"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '0'\n\nassert solution('3 5.5') == '8.25'\n\"\"\"\n\nfrom math import exp\n"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n0') == 288\n"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('pastimeofwhimsy') == 1\n\"\"\""
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"pastimeofwhimsy\") == 1\n\"\"\"\n"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"pastimeofwhimsy\") == 1\nassert solution(\"codyandcody\") == 0\nassert solution(\"meow\") == 2\nassert solution(\"catsanddogs\") == 1\n\n\"\"\""
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"pastimeofwhimsy\") == 1\n\"\"\"\n\nimport unittest\nfrom collections import Counter\n\nclass Solution:\n    def solution(self, str: str) -> int:\n        s = Counter(str)\n        res = 0\n        for k, v in s.items():\n            if k =='m':\n                res += v\n        return res // 2 + 1 if res % 2 else res // 2\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        assert Solution().solution(\"pastimeofwhimsy\") == 1\n        assert Solution().solution(\"whimsicalwhim\") == 2\n        assert Solution().solution(\"mooommm\") == 2"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('pastimeofwhimsy') == '1'\nassert solution('babad') == '3'\nassert solution('abacab') == '2'\nassert solution('abcbab') == '0'\n\n\"\"\"\n\nimport sys\nimport string\n\nstdin = sys.stdin.readlines()"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == '1'\nassert solution('ab') == '3'\nassert solution('abc') == '4'\nassert solution('abcd') == '5'\n"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('b') == 1\nassert solution('a') == 1\nassert solution('ab') == 2\nassert solution('aab') == 2\nassert solution('ba') == 1\n"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"pastimeofwhimsy\") == 1\n\n\"\"\"\n\nimport sys\nimport functools\n\n@functools.lru_cache(maxsize=None)\n"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n1 2 2 1\") == \"YES\"\nassert solution(\"3 4\\n1 2 2 3\") == \"NO\"\nassert solution(\"3 4\\n1 2 2 1\\n1 2 2 3\") == \"YES\"\nassert solution(\"3 4\\n1 2 2 1\\n1 2 2 1\") == \"YES\"\nassert solution(\"3 4\\n1 2 2 1\\n1 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n1 1') == 'YES'\nassert solution('1 1\\n1') == 'NO'\nassert solution('3 4\\n2 1 1 2') == 'YES'\nassert solution('3 5\\n2 1 1 2 2') == 'NO'\nassert solution('3 3\\n1 1 2') == 'YES'\n"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n1 2 2 1\") == 'YES'\nassert solution(\"5 4\\n1 1 1 1 1\") == 'NO'\nassert solution(\"1 1\\n1\") == 'NO'\nassert solution(\"5 4\\n2 2 1 1\") == 'NO'\nassert solution(\"2 2\\n1\") == 'NO'\n"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'YES'\nassert solution('1 2 2 1 3') == 'YES'\nassert solution('1 2 2 1 2') == 'YES'\nassert solution('1 2 2 1 1') == 'NO'\nassert solution('1 1 1 1') == 'NO'\n"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n\") == \"YES\"\nassert solution(\"4 5\\n1 2 2 1 3\\n\") == \"NO\"\nassert solution(\"3 4\\n1 2 3 4\\n\") == \"NO\""
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6\\n1 3 2 3 3 4\") == \"YES\"\nassert solution(\"1 9\\n1\") == \"NO\"\nassert solution(\"4 6\\n4 3 4 4 3\") == \"NO\"\nassert solution(\"5 3\\n1 1 1 1 2\") == \"YES\"\n\n\"\"\"\n\nk, n = [int(x) for x in stdin.split(\" \")]\ns = [int(x) for x in stdin.split(\" \")[1:]]\n\ni = 0\nc = 0\nj = 1\nwhile i < len(s) - 1:\n    if sum(s[i:j]) == k and (j - i) == n:\n        c += 1\n    i += 1\n    j += 1"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 1 1\") == \"YES\"\n\nassert solution(\"3 4\\n2 2 2 1\") == \"NO\"\n\nassert solution(\"3 4\\n1 2 3\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '''\n2 3\n1 2 1\n    '''\n) == 'YES'\nassert solution(\n    '''\n2 3\n2 1 1\n'''\n) == 'NO'\nassert solution(\n    '''\n2 3\n1 1 1\n'''\n) == 'NO'\nassert solution(\n    '''\n3 5\n1 1 1 1\n'''\n) == 'NO'\nassert solution(\n    '''\n3 5\n1 1 1 1\n'''\n) == 'NO'\n"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n1 2 2 1\") == \"YES\"\nassert solution(\"3 4\\n1 2 2 1\") == \"YES\"\nassert solution(\"3 4\\n1 2 3 1\") == \"NO\"\n\nassert solution(\"5 5\\n1 1 1 1 1 1\\n1 2 1 1 1 2\") == \"YES\"\nassert solution(\"5 5\\n1 1 1 1 1 1\\n1 2 1 1 1 2\") == \"YES\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2 2 1') == 'YES'\n\"\"\""
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2\\n3\\n4\") == \"3/1\"\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2\\n3\\n4') == '3/1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n3\\n4') == '3/1'\nprint(solution(stdin))\n"
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2\\n3\\n4') == '3/1'\n\"\"\""
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2\\n3\\n4\") == \"3/1\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '1/1'\nassert solution('1 1\\n1 2') == '1/1'\nassert solution('1 2\\n1 2') == '1/1'\nassert solution('1 2\\n2 3') == '1/1'\n"
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 2\n3\n4\n\"\"\") == \"3/1\"\n\n\"\"\"\nimport sys\nimport os\nimport math\nimport bisect\nfrom collections import defaultdict, deque, Counter\nfrom heapq import heapify, heappop, heappush\nfrom itertools import permutations, combinations, accumulate\nfrom math import sqrt\nfrom copy import copy, deepcopy\n"
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2\\n3\\n4\") == \"3/1\"\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\") == \"7/2\"\nassert solution(\"6 4\\n1 2\\n2 3\\n3 4\\n4 6\") == \"20/6\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n2 3\") == \"1/2\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1.2 10.2\") == \"1.114672365\"\n\"\"\"\nimport sys\n\nsys.stdin = open('input.txt')\n"
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1.2 10.2\\n2.2 15.2\") == '1.114672365'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1.2 10.2\\n2.2 15.2\") == \"1.114672365\"\n\n-------------Test 9-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.114672365\n\n-------------Test 10-----------\nInput\n3\n1.2 10.2\n2.2 15.2\n3.4 18.6\nOutput\n1.69841292\n\n-------------Test 11-----------\nInput\n1\n2.1 10.1\nOutput\n1\n\n-------------Test 12-----------\nInput\n1\n9.8 10.2\nOutput\n0\n\n-------------Test 13-----------\nInput\n1\n2.1 10.1\nOutput\n0.14285714285714285\n\n-------------Test 14-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 15-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 16-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 17-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 18-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 19-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 20-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 21-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 22-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 23-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 24-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 25-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 26-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 27-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 28-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 29-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 30-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 31-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 32-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 33-----------\nInput\n3\n1.2 10.2\n2.2 15.2\n3.4 18.6\nOutput\n1.69841292\n\n-------------Test 34-----------\nInput\n3\n1.2 10.2\n2.2 15.2\n3.4 18.6\nOutput\n1.69841292\n\n-------------Test 35-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 36-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 37-----------\nInput\n3\n1.2 10.2\n2.2 15.2\n3.4 18.6\nOutput\n1.69841292\n\n-------------Test 38-----------\nInput\n3\n1.2 10.2\n2.2 15.2\n3.4 18.6\nOutput\n1.69841292\n\n-------------Test 39-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 40-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 41-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 42-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 43-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 44-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 45-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 46-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 47-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 48-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 49-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 50-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 51-----------\nInput\n1\n1.2 10.2\nOutput\n1\n\n-------------Test 52-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 53-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 54-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 55-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 56-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 57-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 58-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 59-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 60-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 61-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 62-----------\nInput\n2\n1.2 10.2\n2.2 15.2\nOutput\n1.65\n\n-------------Test 63-----------\nInput\n"
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1.2 10.2\") == \"1.114672365\"\nassert solution(\"4\\n1.2 10.2 3.2 4.2\") == \"1.114672365\"\n\"\"\"\n\n\nfrom math import sqrt\nimport sys"
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n'''"
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n1.2 10.2\n2.2 15.2\n''') == '1.114672365'\nprint(solution(stdin=input()))\n\n---"
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n1.2 10.2\n2.2 15.2\n\"\"\") == \"1.114672365\"\nassert solution(\"\"\"\n2\n10.2 10.2\n15.2 15.2\n\"\"\") == \"1.0\"\nassert solution(\"\"\"\n3\n10.2 10.2\n15.2 15.2\n20.2 20.2\n\"\"\") == \"1.0\"\nassert solution(\"\"\"\n10\n10.2 10.2\n15.2 15.2\n20.2 20.2\n50.2 50.2\n60.2 60.2\n70.2 70.2\n80.2 80.2\n90.2 90.2\n100.2 100.2\n110.2 110.2\n120.2 120.2\n130.2 130.2\n140.2 140.2\n150.2 150.2\n160.2 160.2\n170.2 170.2\n180.2 180.2\n190.2 190.2\n200.2 200.2\n210.2 210.2\n220.2 220.2\n230.2 230.2\n240.2 240.2\n250.2 250.2\n260.2 260.2\n270.2 270.2\n280.2 280.2\n290.2 290.2\n300.2 300.2\n310.2 310.2\n320.2 320.2\n330.2 330.2\n340.2 340.2\n350.2 350.2\n\"\"\") == \"1.0\"\n\n\"\"\""
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.2 10.2\\n2.2 15.2\") == '1.114672365'\n\n-------SOLUTION-------\n\"\"\"\n\nfrom math import sqrt\n\nN = int(stdin.readline())\nL = [float(x) for x in stdin.readline().split()]\nR = [float(x) for x in stdin.readline().split()]\n\nS = 0\nfor i in range(N-1):\n    S += (L[i] + R[i])/2 * (R[i+1] - L[i+1])\n\nprint(S/(N*N))\n"
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.2 10.2\\n2.2 15.2\") == '1.114672365'\n"
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1.2 10.2') == '1.114672365'\n"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n2 3\\n3 4\") == \"1 2 3 2\"\n\nassert solution(\"4\\n0 3\\n1 1\\n2 1\\n2 0\\n\") == \"1 2 3 2\"\n\nassert solution(\"5\\n0 1\\n1 1\\n2 1\\n2 0\\n\") == \"1 2 3 2\"\nassert solution(\"6\\n0 1\\n1 1\\n2 1\\n2 0\\n\") == \"1 2 3 2\"\nassert solution(\"7\\n0 1\\n1 1\\n2 1\\n2 0\\n\") == \"1 2 3 2\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open('sample.in').read()) == '3\\n1 2 3 2'\n\nassert solution(open('sample.in').read()) == '3\\n1 2 3 2'\n\nassert solution(open('big.in').read()) == '6\\n5 4 6 5 4 6'"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 3\\n1 1\\n2 1\\n2 0\") == \"3\\n1 2 3 2\"\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List, Dict, Tuple\n"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 3\\n1 1\\n2 1\\n2 0\") == \"3\\n1 2 3 2\""
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 3\\n1 1\\n2 1\\n2 0') == '3\\n1 2 3 2'\nassert solution('1\\n0 0') == '0\\n0 0'\nassert solution('3\\n1 1\\n1 1') == '2\\n1 1 2 1'\nassert solution('5\\n3 0\\n3 0\\n3 0') == '3\\n3 3 3 3'\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline())\n\nr = []\nfor i in range(n):\n    r.append([int(i) for i in stdin.readline().split()])\n\nr.sort()\n\ncnt, ans, j = 0, 0, 0\n\nfor i in range(n):\n    if r[i][0] < 0:\n        j = r[i][1]\n    cnt += r[i][1]\n    if cnt < 0:\n        cnt = 0\n    ans += cnt\n\nprint(ans)\n\nfor i in range(n):\n    if r[i][0] < 0:\n        j = r[i][1]\n    if ans - cnt < j:\n        print(j, i + 1)\n        break\n    cnt += r[i][1]\n"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 3\\n1 1\\n2 1\\n2 0\") == \"3\\n1 2 3 2\"\nassert solution(\"4\\n0 2\\n1 1\\n2 1\\n2 0\") == \"1\\n1 2 1 2\"\nassert solution(\"4\\n0 2\\n1 0\\n2 1\\n2 0\") == \"3\\n1 2 1 2\"\n\nprint(solution(\"4\\n0 3\\n1 1\\n2 1\\n2 0\"))\nprint(solution(\"4\\n0 2\\n1 0\\n2 1\\n2 0\"))\nprint(solution(\"4\\n0 2\\n1 0\\n2 1\\n2 0\"))\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n0 3\\n1 1\\n2 1\\n2 0') == '3\\n1 2 3 2'\nassert solution('6\\n0 2\\n0 4\\n2 1\\n1 4\\n0 5\\n4 1\\n3 4\\n3 2') == '3\\n3 1 2 3 2'\nassert solution('6\\n0 3\\n0 5\\n2 0\\n1 3\\n1 4\\n2 4\\n3 5\\n3 2') == '3\\n3 2 1 2 3 2'\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 3\\n1 1\\n2 1\\n2 0\") == \"3\\n1 2 3 2\"\nassert solution(\"7\\n0 5\\n1 1\\n2 1\\n2 2\\n4 1\\n5 1\") == \"6\\n1 2 5 2 1 3\"\nassert solution(\"6\\n0 4\\n1 1\\n2 1\\n2 4\\n4 1\\n5 1\") == \"5\\n1 2 3 4 5\"\n\nprint('Successfully solved!')\n\n-----Solution-----\n'''"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3\n    assert solution('''6\n0 0\n1 1\n1 1\n1 1\n3 2\n3 2''') == '3\n    assert solution('''3\n0 0\n0 0\n1 1''') == '2\n    assert solution('''5\n0 0\n1 1\n1 1\n1 1\n1 1\n''') == '3\n\nIf you like, write solutions for another hard problem:\n\n  - https://codingcompetitions.withgoogle.com/kickstart/round/000000000019ffc7/00000000001d3f4b\n\n\"\"\"\n\nimport sys\nimport math\n\nsys.stdin = open('./test_input.txt')\n"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1 1 2\n''') == 'none'\nassert solution('''3\n1 1 2\n''') == 'none'\nassert solution('''3\n1 2 3\n''') == '1'\nassert solution('''3\n2 3 1\n''') == '1'\nassert solution('''3\n2 3 1\n''') == '1'\n"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\\n2\\n3\"\n\nassert solution(\"3\\n1 1 2\") == \"none\"\n\nassert solution(\"4\\n1 1 1 1\") == \"none\"\nassert solution(\"4\\n1 2 3 4\") == \"none\"\nassert solution(\"4\\n1 2 3 2\") == \"1\\n2\"\n\n\"\"\"\n\n\nimport sys\nimport typing\n"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 2 3\") == \"none\"\n\"\"\""
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\\n2\\n3\"\nassert solution(\"4\\n1 1 2 3\") == \"none\"\n"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1 2\") == \"none\"\nassert solution(\"3\\n1 2 3\") == \"1\\n2\\n3\"\n\"\"\""
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2\\n1 2 3\") == \"none\"\nassert solution(\"2\\n2 2\\n1 1 3\") == \"none\"\nassert solution(\"2\\n1 2 3\\n2 2\\n1 1 3\") == \"none\"\nassert solution(\"3\\n1 1 2\\n2 2\\n1 1 2\") == \"none\"\nassert solution(\"3\\n1 1 2\\n2 2\\n2 2\") == \"none\"\n"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2 3\n''') == '1\\n2\\n3\\n'\nassert solution('''3\n1 2 3\n''') == '1\\n2\\n3\\n'\nassert solution('''3\n1 2 3\n''') == '1\\n2\\n3\\n'\nassert solution('''3\n1 1 2\n''') == 'none\\n'\nassert solution('''3\n1 2 3\n''') == '1\\n2\\n3\\n'\n"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == '1\\n2\\n3'\n"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 2\\n\") == \"1\\n2\\n3\\n\"\nassert solution(\"3\\n1 1 1 3\\n\") == \"none\\n\"\nassert solution(\"4\\n1 1 2 1 3\\n\") == \"none\\n\"\n\"\"\"\n"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\n\"\"\"\n\nimport sys\nimport math\nfrom typing import List, Dict, Tuple, Set, Union\n\n_PRECISION = 16\n\n_INPUT_TEST_CASES = [\n    (\"3\\n1 2 3\", \"1\"),\n    (\"4\\n1 2 1 3\", \"none\"),\n    (\"5\\n1 1 1 1 2\", \"none\"),\n    (\"6\\n1 1 1 2 2 3\", \"none\"),\n]\n"
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 0 1 2 3 3\\n') == '5'\n"
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 0 1 2 3 3\") == \"5\"\nassert solution(\"7\") == \"7\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 2 3 2\\n') == 2\n\"\"\""
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 0 1 2 3 3') == '5'\n\"\"\""
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n2 1 0 1 2 3 3\") == \"5\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1 1\") == \"7\"\n\n\"\"\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n2 1 0 1 2 3 3\") == \"5\"\n\"\"\"\n\n\n\n\"\"\"\nI tried to do the problem in O(n^2) but in the end I realized that I need to do binary search\n\"\"\"\n\nfrom bisect import bisect_left"
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 1 0 1') == '2'\nassert solution('6\\n2 1 1 3 1 3') == '4'\nassert solution('9\\n1 1 1 1 1 1 1') == '0'\nassert solution('100\\n8 2 1 2 1 2 1 2 8 2') == '9'\nassert solution('8\\n2 1 1 3 1 3') == '2'"
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n2 1 0 1 2 3 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n2 1 0 1 2 3 3\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n2 1 0 1 2 3 3') == '5'\nassert solution('7\\n2 1 0 1 2 3 3\\n') == '5'\nassert solution('1\\n') == '0'\nassert solution('2\\n1 1') == '1'\nassert solution('6\\n5 5 1 4 2 4\\n') == '4'\n"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n5 6\n#####\n"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####\") == \"-1 -1 -1 -1 -1\"\nassert solution(\"5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####\") == \"4 5 6 -1\"\nassert solution(\"5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####\") == \"4 -1 -1 -1 -1\"\nassert solution(\"5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####\") == \"4 5 6 -1\"\nassert solution(\"5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####\") == \"4 -1 4 -1 -1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####\") == \"-1 -1 -1 -1 -1\"\nassert solution(\"5 6\\n#M#\\n#_#\\n#...\\n#...\\n#M#\\n#_#\") == \"4\"\nassert solution(\"5 6\\n#_#\\n#_#\\n#M#\\n#_#\\n#_#\") == \"3\"\nassert solution(\"5 6\\n#_#\\n#M#\\n#_#\\n#_#\\n#_#\") == \"-1\"\nassert solution(\"5 6\\n#M#\\n#_#\\n#M#\\n#_#\\n#_#\") == \"-1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####') == '-1 -1 -1 -1 -1'\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####') == '-1 -1 -1 -1 -1'\nassert solution('5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####') == '-1 4 5 6 -1'\nassert solution('5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####') == '-1 4 -1 -1 -1 -1'\nassert solution('5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####') == '-1 1 0 1 -1'\nassert solution('5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####') == '-1 3 1 2 -1'"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####\") == \"-1 -1 -1 -1 -1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n4 3\n..#.\n"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6\\n#####\\n#...#\\n#_###\\n#_M.#\\n#__.#\\n#####') == '-1 -1 -1 -1 -1\\n-1 4 5 6 -1\\n-1 4 -1 -1 -1\\n-1 1 0 1 -1\\n-1 3 1 2 -1'\n"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6\\n#####\\n#..#\\n#..#\\n#...\\n#####') == '-1 -1 -1 -1 -1'\nassert solution('5 6\\n#####\\n#M#M\\n#..#\\n#..#\\n#####') == '-1 4 -1 -1 -1'\nassert solution('5 6\\n#####\\n#..#\\n#..#\\n#M#M\\n#####') == '-1 -1 -1 -1 -1'\nassert solution('5 6\\n#####\\n#..#\\n#M#M\\n#M#M\\n#####') == '-1 4 -1 -1 -1'\n\"\"\"\n\nimport itertools\nimport sys"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n#####\\n#_###\\n#_M.#\\n#__.#\\n#####\") == \"4 5 6 -1\"\n\n-----Notes-----\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\\n\") == \"6\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3') == '6'\n\"\"\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3') == '6'\n\n----"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3') == '6'\nassert solution('4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3') == 'impossible'\n\n-----Constraints-----\nTime limit: 20 seconds\nMemory limit: 512 MB\n\n-------------------------\n'''"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3') == '6'\nassert solution('4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3') == 'impossible'\n\"\"\"\n\n\"\"\"\n--------------------------------------------\n\nimport sys"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\") == \"6\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3') == '6'\n\nassert solution('4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3') == 'impossible'\n\n-----Constraints-----\n1 <= n <= 1000\n0 <= m <= 100000\n0 <= p <= n\n0 <= x_ i, y_ i, and \u03bb_ i <= n\n1 <= x_ i < y_ i <= n\n1 <= \u03bb_ i <= 10000\n\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(1500)\n"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\nassert solution(\"4 4 4 1\") == \"impossible\"\nassert solution(\"1 1 1 1\") == \"1111\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3, 4, 2, 1) == '01001'\nassert solution(7, 10, 10, 10) == '101010'\nassert solution(0, 0, 0, 0) == 'impossible'\nassert solution(1, 1, 1, 1) == 'impossible'\nassert solution(9, 1, 0, 0) == 'impossible'\n\"\"\""
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('3 4 1 2') == 'impossible'\nassert solution('1 1 1 1') == '1'\nassert solution('0 0 0 1') == 'impossible'\nassert solution('1 0 0 0') == '0'\n"
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\nassert solution(\"4 4 2 1\") == \"impossible\"\nassert solution(\"4 2 1 1\") == \"impossible\"\nassert solution(\"1 1 1 1\") == \"impossible\"\nassert solution(\"3 4 2 1\") == \"01001\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('2 2 3 1') == '10101'\nassert solution('4 1 2 1') == '0111'\nassert solution('2 2 3 2') == 'impossible'\nassert solution('1 1 1 1') == 'impossible'\n"
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('1 3 1 1') == 'impossible'\nassert solution('3 0 1 1') == '1011'\nassert solution('2 2 2 1') == '1101'\n\"\"\""
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('6 1 3 1') == '101010'\nassert solution('1 2 1 2') == 'impossible'\nassert solution('8 8 8 8') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s) == ans\n\na, b, c, d = map(int, stdin.split())\nprint(a*'0' + b*'1' + c*'2' + d*'3')"
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\nassert solution(\"0 1 0 1\") == \"impossible\"\nassert solution(\"1 1 1 1\") == \"impossible\"\nassert solution(\"3 4 2 1\") == \"01001\"\nassert solution(\"7 3 3 3\") == \"1111101\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\n\"\"\"\n\n\n\"\"\"\nI tried to solve it but I could not find the reason for it.\nI looked up the answer but I could not get the expected answer.\n\"\"\"\n\na, b, c, d = map(int, input().split())"
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n4 4\\n\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\\n< 4\\n\"\n\nassert solution(\"4 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n4 4\\n\") == \"impossible\"\n\nassert solution(\"4 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n4 4\\n\") == \"impossible\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\"\n\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\"\n\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\"\n\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\"\n\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\""
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == 'possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4'\n\"\"\"\nimport sys\n\nfrom typing import List, Tuple, NamedTuple, Optional\n\nclass Point(NamedTuple):\n    row: int\n    col: int"
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\"\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"impossible\"\n\n-----------Solution-----------\n\"\"\""
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\"\nassert solution(\"4 3 2\\n2 2\\n1 1\\n1 1\\n2 1\\n3 3\\n4 4\") == \"impossible\"\n\n-----------------\n"
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4''') == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\"\n\nassert solution('''3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4''') == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\"\n\nassert solution('''3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4''') == \"impossible\"\n\nassert solution('''3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4''') == \"impossible\"\n\nassert solution('''3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3"
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\\n< 4\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4''') == 'possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4'\n\"\"\"\n\n\"\"\"\nimport collections\nimport collections.abc\nimport copy\nimport itertools\nimport math\nimport re\nimport sys\nfrom enum import Enum\nfrom functools import lru_cache\nfrom typing import Dict, Iterable, List, Pattern, Set, Tuple\n\nINPUT_FILE_NAME: str = \"input.txt\"\n\nN: int\nM: int\nB: int\n\nTARGET_BOARD: List[List[int]]\nINITIAL_BOARD: List[List[int]]\n\n\nclass Direction(Enum):\n    UP = 0\n    DOWN = 1\n    LEFT = 2\n    RIGHT = 3\n\n\nclass Move:\n    def __init__(self, direction: Direction, row: int, col: int):\n        self.direction: Direction = direction\n        self.row: int = row\n        self.col: int = col\n\n    def __repr__(self) -> str:\n        return f'<Move direction={self.direction.name!r} row={self.row} col={self.col}>'\n\n\nclass Board:\n    def __init__(self, rows: int, cols: int):\n        self.rows: int = rows\n        self.cols: int = cols\n        self.blocks: List[Tuple[int, int]] = []\n\n    def add_block(self, row: int, col: int):\n        self.blocks.append((row, col))\n\n    def remove_block(self, row: int, col: int):\n        self.blocks.remove((row, col))\n\n    def __repr__(self) -> str:\n        return f'<Board rows={self.rows} cols={self.cols} blocks={self.blocks}>'\n\n\nclass Node:\n    def __init__(self, board: Board, parent: 'Node' = None):\n        self.board: Board = board\n        self.parent: Node = parent\n        self.children: Set['Node'] = set()\n\n    def add_child(self, child: 'Node'):\n        self.children.add(child)\n\n    def __repr__(self) -> str:\n        return f'<Node board={self.board} children={self.children}>'\n\n\nclass Path:\n    def __init__(self):\n        self.nodes: List[Node] = []\n\n    def add_node(self, node: Node):\n        self.nodes.append(node)\n\n    def __repr__(self) -> str:\n        return f'<Path nodes={self.nodes}>'\n\n\nclass Queue:\n    def __init__(self):\n        self.items"
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\"\n) == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\"\nassert solution(\n    \"4 4 2\\n1 1\\n1 2\\n1 3\\n2 3\\n3 4\"\n) == \"impossible\"\nassert solution(\n    \"2 2 1\\n1 1\"\n) == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4\"\nassert solution(\"3 4 6\\n2 2\\n1 1\\n1 2\\n2 3\\n3 3\\n3 4\") == \"impossible\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == '2.0'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == '2.0'\n\n-----Constraints-----\n$1 \\leq n \\leq 18$\n$x, y, z \\in [0, 500]$\n-----Note-----\nIn the tests, the input data will be random within the range $[0, 500]$.\n'''\n\n'''\n\ud480\uc774\n3\ucc28\uc6d0 \uadf9\uc88c\ud45c\uacc4\uc5d0\uc11c \uc88c\ud45c\uc758 \ubc94\uc704\ub294 0 <= x,y,z <= 500\n\uc774\uac78 xyz\ub77c\uace0 \ubd80\ub974\uba74 3\ucc28\uc6d0 \ub9f5\uc758 \ud06c\uae30\ub294 500 * 500 * 500\uc73c\ub85c \uad6c\uc131\ub418\uace0 \uadf8 \uc548\uc758 \ud589\uc131\ub4e4\uc744 \uc2dc\uac01\uc73c\ub85c \ubcfc \uc218 \uc788\ub2e4\n\n\uc804\uccb4 \ud0d0\uc0c9\uc758 \uc2dc\uc791\uc810\uc774 \uc5ec\uae30 \uc788\ub294\ub370 \uc774\ub97c \ub2e4\ub978 \uac12\uc73c\ub85c \ubc14\uafd4\uc11c \uac12\uc744 \ucc3e\uc73c\uba74 \ub41c\ub2e4.\n\n\ub9cc\uc57d \uc804\uccb4\ub97c \ubaa8\ub450 \ud0d0\uc0c9\ud574\ubcf4\uba74 \uac01\uac01\uc758 \ud0d0\uc0c9\uc758 \uc2dc\uc791\uc810\uc774 \ubb34\uc5c7\uc778\uc9c0 \uc5b4\ub5bb\uac8c \ud45c\ud604\ud574\uc57c \ud558\ub294\uc9c0 \uc54c \uc218 \uc788\ub2e4\n\n\uc774\ub54c \uc0ac\uc6a9\ud558\ub294 \uac12\uc740 \uadf9\uc88c\ud45c\uc5d0\uc11c\uc758 \uc815\ubcf4\ub97c \uac00\uc9c0\uace0 \uc774\ub3d9\uac70\ub9ac\uc758 \uacc4\uc0b0\uc744 \ud574\uc57c \ud55c\ub2e4\n\n\uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \uc0ac\uc6a9\ud558\ub294 \uc815\ubcf4\ub294 x,y,z,x,y,z\uc640 \uac19\uc774 \uc0ac\uc6a9\ud55c\ub2e4\n\n\uadf8\ub9ac\uace0 \uac12\uc744 \ubc14\uafd4\uc11c \uacc4\uc0b0\ud574\ub3c4 \ub41c\ub2e4\n\n\uc608\ub97c \ub4e4\uc5b4\uc11c (0,0,0)\uc640 (2,2,2)\uc758 \uc815\ubcf4\ub294 \ub9f5\uc758 \uac01\uac01\uc758 \uc704\uce58\ub97c \ub098\ud0c0\ub0b4\ub294 \uac12\uc73c\ub85c \ud45c\ud604\uc774 \ub41c\ub2e4\n\n\uadf8\ub798\uc11c \uc774\ub97c x,y,z,x,y,z \ub85c \ud45c\ud604\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4\n\n\uadf8\ub9ac\uace0 \uc774\ub294 \ub9f5\uc758 \ud06c\uae30\ub97c \uc774\uc6a9\ud55c\ub2e4\n\n\uadf8\ub7f0\ub370 x,y,z,x,y,z\ub294 \uc0c1\ub300\uc88c\ud45c\uacc4\uac00 \uc544\ub2c8\ub77c \uc88c\ud45c\uacc4\uc774\ub2e4\n\n\uadf8\ub798\uc11c \uc804\uccb4 \ub9f5\uc758 \ucd5c\uc19f\uac12\uc740 500 * 500 * 500\ub85c \uac00\ub2a5\ud55c \uac12\uc774\ub2e4\n\n\uadf8\ub9ac\uace0 \uadf8\ub7f0\ub370 \uc804\uccb4 \ud0d0\uc0c9\uc744 \ubaa8\ub450 \ud574\uc57c \ud558\ubbc0\ub85c \ucd5c\uc19f\uac12\uc744 \ubc18\ud658\ud574\uc57c \ud55c\ub2e4\n\n\uadf8\ub7ec\uba74 \ucd5c\uc19f\uac12\uc744 \uacc4\uc0b0\ud558\ub294 \uac83\uc740 \uc544\ub798\uc640 \uac19\ub2e4\n\n\uc720\ud074\ub9ac\ub4dc \uac70\ub9ac\ub97c \ud65c\uc6a9\ud558\uc5ec \uac01\uac01\uc758 \uc704\uce58\uc5d0\uc11c \uc5b4\ub5bb\uac8c \uac00\uc57c \ud560\uc9c0 \uacc4\uc0b0\ud55c\ub2e4\n\n\uc774\ub54c \uac01\uac01\uc758 \uac70\ub9ac\ub294 \uacf5\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uacc4\uc0b0\ud55c\ub2e4\n\n\uc720\ud074\ub9ac\ub4dc \uac70\ub9ac\ub294 \ucd5c\ub300\uac12\uc744 \uc774\uc6a9\ud574\uc11c \uad6c\ud558\ub294 \uac70\ub77c\uace0 \uc774\ubbf8 \uc815\ub9ac\ud588\ub2e4\n\n\ub530\ub77c\uc11c \uac01\uac01\uc758 \uc704\uce58\ub9c8\ub2e4\uc758 \uac12\uc744 \ufffd"
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\") == \"2.0\"\nassert solution(\"5\\n0 0 1\\n0 1 1\\n1 1 1\\n1 2 1\\n1 0 1\") == \"2.8284271247461903\"\n\"\"\"\n\nimport sys\nimport math\n\nassert len(sys.argv) == 2\ninp = open(sys.argv[1])\n\nclass Planet:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __str__(self):\n        return f\"{self.x} {self.y} {self.z}\"\n\n    def __repr__(self):\n        return f\"Planet({self.x}, {self.y}, {self.z})\"\n\n    def distance(self, other):\n        return math.sqrt( (self.x - other.x)**2 + (self.y - other.y)**2 + (self.z - other.z)**2 )\n\nclass Line:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n    def __str__(self):\n        return f\"{self.p1} -> {self.p2}\"\n\n    def distance(self):\n        return self.p1.distance(self.p2)\n\nclass Portal:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n    def __str__(self):\n        return f\"{self.p1} -> {self.p2}\"\n\n    def __repr__(self):\n        return f\"Portal({self.p1}, {self.p2})\"\n\n    def distance(self):\n        return self.p1.distance(self.p2)"
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\") == \"2.0\"\nprint(\"Passed!\")\n\n-----BONUS-----\nWrite a short Python function that finds the shortest distance between any two points in a 3D space.\n\n-----Hints-----\nThe distance between two points in a 3D space is the distance between their corresponding Cartesian coordinates.\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\nfrom collections import defaultdict\nfrom functools import lru_cache\n\nclass Planet:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def __repr__(self):\n        return f\"{self.x}, {self.y}, {self.z}\"\n    \n    def distance(self, other):\n        return abs(self.x - other.x) + abs(self.y - other.y) + abs(self.z - other.z)\n"
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == '2.0'\n\n\"\"\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\") == \"2.0\"\n\"\"\""
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == '2.0'\n\"\"\"\n\nimport sys\nfrom typing import List\nfrom math import sqrt"
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == '2.0'\nassert solution('5\\n0 1 2\\n1 1 1\\n3 1 4\\n3 3 4') == '2.8284271247461903'\nassert solution('5\\n0 1 2\\n1 1 1\\n3 1 4\\n3 3 4') == '2.8284271247461903'\nassert solution('5\\n0 1 2\\n1 1 1\\n3 1 4\\n3 3 4') == '2.8284271247461903'\nassert solution('5\\n0 1 2\\n1 1 1\\n3 1 4\\n3 3 4') == '2.8284271247461903'\n"
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == '2.0'\n\"\"\"\n"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2') == '4'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2') == '4'\nassert solution('1\\n2\\n3\\n4\\n5') == '0'\nassert solution('4 3 2 1\\n1 2 3 4\\n5 6 7 8') == '0'\n\nassert solution('6 8 1 4 5 7 3\\n7 2 4 6 8 1 3\\n3 4 6 8 7 2 1\\n5 7 6 3 4 2 8\\n4 3 2 8 6 5 7\\n1 5 7 3 8 2 4\\n2 8 5 6 4 3 7') == '0'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == '0'\n"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2''') == '4'\nprint('OK')\n\n-----\n7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n'''\n\nLuka is slacking again during chemistry class, while the teacher is explaining Avogadro\u2019s law.\n\nLuka first drew a table consisting of $3$ rows and $N$ columns. Then he wrote the numbers $1$ to $N$ into the first row in arbitrary order, each number appearing exactly once. In the other two rows he also wrote integers between $1$ and $N$, but didn\u2019t care how many times a number appeared.\n\nLuka can now delete any set of columns from the table. After doing so, he sorts the numbers in each row in ascending order.\n\nHe wants to obtain a table in which all three rows are identical after sorting. Write a program that determines the smallest number of columns Luka must delete.\n\nFor instance, in the first sample input below, Luka can delete the second, fourth, sixth and seventh columns. After deleting these and sorting each row, all three rows contain the numbers 1, 3 and 5.\n\n-----Input-----\nThe first line of input contains the integer $N$ ($1 \\le N \\le 100000$), the number of columns in the table. The following three lines contain $N$ integers each, separated by single spaces. The numbers will be between $1$ and $N$, and there will be no duplicates in the first row.\n\n-----Output-----\nOutput the smallest number of columns Luka must delete.\n\n-----Examples-----\nSample Input:\n7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\nSample Output:\n4\n"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2\") == \"4\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2\") == \"4\"\nassert solution(\"7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '4'\nassert solution('''\n3\n1 2 3\n1 2 3\n3 2 1\n''') == '0'\nassert solution('''\n5\n3 3 2 3 3\n2 2 3 3 2\n2 2 2 2 3\n2 2 2 2 3\n2 2 2 2 3\n''') == '1'\n'''\n\nfrom collections import Counter"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '4'\n\nassert solution('''\n7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '4'\n\nassert solution('''\n7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '4'\n\nassert solution('''\n7\n5 5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '4'\n\nassert solution('''\n7\n5 5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '4'"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n5 4 3 2 1 6 7') == '4'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '4'\n\nassert solution('''\n4\n7 1 3 4 5\n5 5 5 5 5\n3 6 1 4 6\n5 4 1 2 5\n''') == '0'\n\nprint('Success')\n\n'''\n---Problem 9---\nWrite a program that accepts a sentence and prints the number of words in that sentence.\n\n-----Input-----\nA sentence consisting of words separated by spaces.\n\n-----Output-----\nPrint the number of words in the sentence, not counting the spaces.\n\n-----Examples-----\nSample Input:\nThis is a sentence\nSample Output:\n10"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2\") == \"4\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\") == \"0\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\") == \"0\"\n\"\"\""
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n-10 0\\n-10 10\") == \"2\"\n\"\"\"\n\n\nfrom math import sqrt\n"
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n-10 0\\n-10 10') == '2'\nassert solution('4\\n10 0\\n-10 10') == '8'\nassert solution('4\\n-10 0\\n10 10') == '8'\nassert solution('4\\n10 0\\n10 10') == '10'\n\n\"\"\"\n\nimport math\n\nL = int(input())\nx1, y1, x2, y2 = map(int, input().split())\n"
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(s) == e\nprint(solution(s))\n\nNote\nThe shortest length chain for the given input is 2 meters."
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n10 10\\n0 0\") == \"10\"\n\n\"\"\"\n\n\n\nimport math"
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\">-3 3<\") == \">-4 4<\"\nassert solution(\">-3 -3<\") == \">-5 -4<\"\nassert solution(\">-3 -1<\") == \">-3 -2<\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n-10 0\\n-10 10\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n-10 0\\n-10 10\") == \"2\"\n\"\"\"\n\nL = int(stdin.readline().strip())\nx1, y1, x2, y2 = [int(i) for i in stdin.readline().strip().split()]\n\nprint(max(abs(x1), abs(y1), abs(x2), abs(y2)) + 1)\n"
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n-10 0\\n-10 10') == '2'\nassert solution('4\\n10 0\\n10 10') == '-2'\n\n\"\"\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n-10 0\\n-10 10') == '2'\n'''\n\nfrom typing import Tuple"
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n-10 0\\n-10 10') == '2'\n\"\"\"\n\nL = int(input())\nx1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nprint(max([(x1 - x2) ** 2 + (y1 - y2) ** 2, (x2 - x1) ** 2 + (y2 - y1) ** 2]))\n"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5') == 0\n\"\"\""
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5') == 0\n\n-----Solution-----\n\"\"\"\n"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5\") == 0\n"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5\") == 0\nassert solution(\"2 3\") == 1\nassert solution(\"2 10\") == 2\nassert solution(\"1 1000000000\") == 1000000000\n\"\"\""
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5\") == 0\nassert solution(\"3 2\") == 2\nassert solution(\"7 12\") == 6\n\n-----Test cases-----\n"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 5\\n') == '0'\nassert solution('5 5\\n') == '1'\nassert solution('1 1\\n') == '42'\nassert solution('2 1\\n') == '11110'\nassert solution('2 2\\n') == '2222'\n"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5\") == \"0\"\nassert solution(\"1 5\") == \"0\"\nassert solution(\"1 5\") == \"0\"\nassert solution(\"1 5\") == \"0\"\nassert solution(\"1 5\") == \"0\"\n"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('1 5') == 0\nassert solution('2 3') == 2\nassert solution('1 1') == 0\nassert solution('10 500') == 0\n"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5') == 0\nassert solution('1 10') == 2\nassert solution('1 100') == 11\nassert solution('2 10') == 3\nassert solution('2 100') == 12\n"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 5\\n') == '0'\nassert solution('10 1000\\n') == '8'\nassert solution('100 10000\\n') == '45'\nassert solution('2 2\\n') == '0'\nassert solution('3 3\\n') == '1'\n"
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1') == '0 0\\n1 1'\nassert solution('3 3\\n1 0 0\\n0 1 0\\n0 0 1') == '0 0\\n1 1'\nassert solution('4 3\\n0 0 0\\n1 1 1\\n0 0 0\\n0 0 1') == '1 2\\n1 1'\nassert solution('3 4\\n1 0 0\\n0 1 0\\n0 0 1') == '1 1\\n1 0'\n\"\"\""
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1'\n) == '0 0\\n1 1'"
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0 0 1 1\"\nassert solution(\"2 2\\n1 1\\n1 1\") == \"1 1 1 1\"\nassert solution(\"2 2\\n1 0\\n0 1\") == \"0 0\"\nassert solution(\"3 4\\n2 0 1 0 0\\n1 1 1 1 1\\n0 1 0 1 1\\n1 1 0 1 0\") == \"0 0 1 1 0 0 1 1 1 1 1\"\nassert solution(\"3 4\\n2 0 0 1 0 0\\n1 1 1 1 1 1\\n0 1 0 1 1 1\") == \"0 0 0 0 1 1 1 1 1 1 1\""
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n\"\"\") == \"\"\"0 0\n1 1\n\"\"\"\n\nassert solution(\"\"\"2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n\"\"\") == \"\"\"0 0\n1 1\n\"\"\"\n\nassert solution(\"\"\"2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n\"\"\") == \"\"\"0 0\n1 1\n\"\"\"\n\nassert solution(\"\"\"2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n\"\"\") == \"\"\"0 0\n1 1\n\"\"\"\n\nassert solution(\"\"\"2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n\"\"\") == \"\"\"0 0\n1 1\n\"\"\""
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0') == '0 0\\n1 1'\n\"\"\""
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n0 0\\n0 1\\n2 2\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0 0 1 1\"\nassert solution(\"1 2\\n0 0\\n0 1\\n2 2\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0 0 1 1\"\nassert solution(\"1 2\\n0 0\\n0 1\\n2 2\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0 0 1 1\"\nassert solution(\"1 2\\n0 0\\n0 1\\n2 2\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0 0 1 1\"\nassert solution(\"1 2\\n0 0\\n0 1\\n2 2\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0 0 1 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1') == '0 0 1 1 1\\n1 1 0 1 1'\nassert solution('2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1') == '0 0 1 1 1\\n1 1 0 1 1'\n"
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0 0\\n1 1\"\n"
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\\n\") == \"0 0\\n1 1\\n\"\n\"\"\"\nimport sys\n\nimport numpy as np"
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0 0\\n1 1\"\n"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\n\"\"\"\n"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\n\"\"\""
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\n"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\n"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 2 0.950000\n0.700000 50''') == '44.975'"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 0.950000\\n0.700000 50\") == \"44.975\"\n"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\nprint(solution(input()))\n"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\n\n-----Solution-----\n"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 0.95 0.700 0\") == \"44.975\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str([3, 2, 3]), str([1, 1]), str([5, 2]), str([1, 3]), str([3])) == \"2\"\nassert solution(str([2, 2, 3]), str([1, 1]), str([5, 2]), str([1, 3]), str([3])) == IMPOSSIBLE\nassert solution(str([5, 2, 3]), str([2, 2, 3]), str([1, 1]), str([1, 3]), str([3])) == IMPOSSIBLE\n\"\"\""
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 3\\n1 1\\n5 2\\n1 3\\n3\\n3\\n2\\n1\") == \"2\"\n\n-----Explanation-----\nThe second pair of skis allows you to finish the race in the shortest amount of time.\n\n-----Constraints-----\n$W, v_{h}, N \\leq 10^8$\n$1 \\leq v_{h} \\leq 10^6$\n$1 \\leq N \\leq 10^5$\n$1 \\leq S \\leq 10^6$\n$1 \\leq s_{j} \\leq 10^6$\n$1 \\leq x_{i}, y_{i} \\leq 10^8$\n\n\"\"\""
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n4 5 6\") == \"2\"\n\"\"\"\n\nW, v_h, N = [int(c) for c in stdin.readline().split()]\n\ngates = []\nfor i in range(N):\n    x, y = [int(c) for c in stdin.readline().split()]\n    gates.append((x, y))\n\nS = int(stdin.readline())\nskis = [int(c) for c in stdin.readline().split()]\n\ngates.sort()\n\ndistance = 0\nspeed = 0\nfor i in range(N - 1):\n    distance += gates[i + 1][0] - gates[i][0]\n\nskis.sort()\n\nfor s in skis:\n    if s * N >= distance:\n        print(s)\n        exit()\n\nprint(\"IMPOSSIBLE\")\n"
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'IMPOSSIBLE'\n\n'''"
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(solution())\n"
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\"\"\") == '2'\n\nassert solution(\"\"\"3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\"\"\") == 'IMPOSSIBLE'\n\nassert solution(\"\"\"3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\"\"\") == '2'\n\nassert solution(\"\"\"3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\"\"\") == '2'\n\nassert solution(\"\"\"10 2 3\n1 3\n2 3\n4 5\n1 3\n2 3\n3 6\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n4 5\n1 3\n2 3\n3 6\n"
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n 5 2\\n 1 3\\n 3\\n 3') == '2'\n"
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 3\\n1 1\\n5 2\\n1 3\\n3\\n3\\n2\\n1\") == \"2\"\nassert solution(\"3 2 3\\n1 1\\n5 2\\n1 3\\n3\\n3\\n2\\n1\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 3\\n1 1\\n5 2\\n1 3\\n3\\n3\\n2\\n1\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 3\\n1 1\\n5 2\\n1 3\\n3\\n3\\n2\\n1\") == \"2\"\nassert solution(\"3 2 3\\n1 1\\n5 2\\n1 3\\n3\\n3\\n2\\n1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    3 2 3\n    1 1\n    5 2\n    1 3\n    3\n    3\n    2\n    1\n    \"\"\"\n) == '2'\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n''') == '2'\n\nassert solution('''\n5 2 5\n1 2\n2 2\n2 3\n2 5\n3\n5 3\n2 4\n3 2\n2 3\n5\n3\n5 1\n3 2\n2 2\n1 3\n2 3\n5\n3\n''') == '1'\n\nassert solution('''\n3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n10 1 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n10 1 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n10 1 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n''') == '3'\n\nassert solution('''\n10 1 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n10 1 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n''') == '4'"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n0.0 1.0\\n1.0 0.0\") == \"1.0\"\nassert solution(\"4 3\\n0.0 1.0\\n1.0 0.0\\n2.0 2.0\\n2.0 3.0\") == \"2.0\"\n\n\"\"\""
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '4.0'\n\"\"\""
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0\") == \"4.0\"\nprint(solution(stdin))\n\"\"\"\n\nimport math"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '4.0'\n\n\"\"\"\n\nimport unittest\nimport math\nimport sys\n\n\nclass Test(unittest.TestCase):\n    def test_input_1(self):\n        self.assertEqual(solution('3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0'), '4.0')\n\n    def test_input_2(self):\n        self.assertEqual(solution('3 3\\n10.0 10.0\\n1.0 10.0\\n1.0 10.0\\n10.0 10.0'), '10.0')\n"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0\") == \"4.0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0''') == '4.0'\n\n\"\"\"\n\nimport sys\n\np, a = map(int, sys.stdin.readline().split())\n\ntrees = {}\n\nfor _ in range(p):\n    x, y = map(float, sys.stdin.readline().split())\n    trees[x, y] = 1\n\nfor _ in range(a):\n    x, y = map(float, sys.stdin.readline().split())\n    trees[x, y] = 1\n\nprint(sum(i*j for i, j in trees.keys()))\n"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0\") == \"4.0\"\nprint(solution(\"0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0\"))\n\"\"\"\n\nimport unittest\nimport os\nimport sys\n\nsys.path.append(os.path.join(os.path.dirname(__file__), '../../'))\nfrom a import solution\n\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(\"0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0\"), \"4.0\")\n\n    def test_2(self):\n        self.assertEqual(solution(\"0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n0.0 4.0\\n10.0 4.0\\n4.0 10.0\"), \"4.0\")"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '4.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0\") == \"4.0\"\n\"\"\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0''') == '4.0'\n\n\"\"\"\n\nfrom collections import namedtuple\nfrom fractions import Fraction\n\nPoint = namedtuple('Point', 'x y')"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n220 29\\n195 20\\n200 9\\n180 30\") == '18000'\nassert solution(\"2\\n2\\n2\\n2\") == '2'\n\"\"\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(int(input()))) == str(int(input()))\n\nimport json"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n220 29\\n195 20\\n200 9\\n180 30') == '18000'\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n220 29\\n195 20\\n200 9\\n180 30\") == \"18000\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n220 29\\n195 20\\n200 9\\n180 30\") == \"18000\"\nassert solution(\"4\\n12 10\\n15 3\\n18 6\") == \"200\"\n\"\"\"\n\n\n\n\"\"\"\n\u8fd9\u9053\u9898\u8fd8\u662f\u633a\u7b80\u5355\u7684\uff0c\u8003\u5bdf\u7ed3\u8bba\u8fd8\u662f\u53ef\u4ee5\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u4efb\u610f\u4e09\u4e2a\u67f1\u5b50\u4e2d\uff0c\u6700\u5927\u7684\u6700\u5c0f\u503c\u7684\u548c\uff0c\u548c\u8be5\u67f1\u5b50\u672c\u8eab\u7684\u6700\u5927\u6700\u5c0f\u503c\u505a\u6bd4\u8f83\uff0c\u5f97\u5230\u6700\u7ec8\u7ed3\u679c\u3002\n\u8fd9\u9053\u9898\u6ca1\u6709\u4ec0\u4e48\u96be\u5ea6\uff0c\u5173\u952e\u662f\u4f60\u7684\u601d\u8def\u4e5f\u5f88\u7b80\u5355\u3002\n\"\"\"\n\nimport math\n\nn = int(input())\n\nheights = [int(i) for i in input().split()]\n\nmax_h = max(heights)\n\nmin_h = min(heights)"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"220 29\\n195 20\\n200 9\\n180 30\") == \"18000\"\n\n\"\"\"\n\nfrom math import gcd, factorial"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n220 29\\n195 20\\n200 9\\n180 30') == '18000'\nassert solution('4\\n80 5\\n90 9\\n50 3\\n45 5') == '48300'\nassert solution('4\\n100 5\\n50 4\\n50 5') == '74100'\nassert solution('4\\n120 20\\n80 40\\n80 40\\n100 40') == '38400'\nassert solution('4\\n120 20\\n100 40\\n100 40\\n100 40') == '39600'\n"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('220 29\\n195 20\\n200 9\\n180 30') == '18000'\n\nimport os\nimport sys"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n') == '1'\nassert solution('1\\n1') == '1'\nassert solution('1\\n1\\n1') == '1'\n"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n220 29\\n195 20\\n200 9\\n180 30') == '18000'\n\"\"\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BUYSTICKERS\\n4\\nBUYER 10\\nSTICKY 10\\nTICKERS 1\\nERS 8\") == \"28\"\n\"\"\"\nimport math\nfrom collections import deque"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BUYSTICKERS\") == \"28\"\n\"\"\"\n\nfrom collections import Counter\n\n\"\"\"\nReplace the message with the smallest possible cost of writing it.\n\nThe cost is equal to the sum of all stickers used in the message.\nThe message is written with one sticker placed over the other.\nIt is not allowed to overlap more than two stickers at any point.\n\nExample:\n\"HELP\" with \"STICKY\" costs 1 + 3 = 4.\n\"XAXAXAXAXAXAXAXAXAX\" with \"DARE\" costs 1 + 3 + 2 + 1 + 2 + 1 + 2 + 1 + 1 + 1 + 3 + 1 + 1 + 1 + 3 + 2 = 27.\n\nNote: the message is written with a single sticker and its thickness is 1 (i.e. it doesn't overlap with itself).\n\n\"\"\""
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('BUYSTICKERS\\n4\\nBUYER 10\\nSTICKY 10\\nTICKERS 1\\nERS 8') == '28'\n\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BUYSTICKERS\") == \"28\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('BUYSTICKERS') == '28'\nassert solution('MERRYCHRISTMAS') == 'IMPOSSIBLE'\nassert solution('TICKERS') == 'IMPOSSIBLE'\n\"\"\"\nimport sys\nimport re\nfrom collections import deque\n"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'IMPOSSIBLE'"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stderr) == 'IMPOSSIBLE'\nassert solution(stderr) == 'IMPOSSIBLE'\n\n\"\"\"\n\n\"\"\"\nhttps://codeforces.com/gym/106628/problem/B\n\nimport sys\nfrom collections import Counter, defaultdict\n"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BUYSTICKERS\") == \"28\"\nassert solution(\"BUYER 10 STICKY 10 TICKERS 1 ERS 8\") == \"IMPOSSIBLE\"\nassert solution(\"BUYER 10 STICKY 10 TICKERS 1 ERS 8\") == \"28\"\nassert solution(\"BUYER 10 STICKY 10 TICKERS 1 ERS 8\") == \"28\"\nassert solution(\"BUYER 10 STICKY 10 TICKERS 1 ERS 8\") == \"28\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BUYSTICKERS\") == \"28\"\n\"\"\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''WELCOME TO ADVENTURE.\n\nYOU ARE ON A ROAD.\n\nTHE ROAD IS LONGER THAN YOU THINK IT IS.\n\nWHAT IS YOURSELF AN ADVENTURER?''') == '28'\n\nassert solution('''WELCOME TO ADVENTURE.\n\nYOU ARE ON A ROAD.\n\nTHE ROAD IS LONGER THAN YOU THINK IT IS.\n\nWHAT IS YOURSELF AN ADVENTURER?''') == 'IMPOSSIBLE'\n\"\"\"\n\n\"\"\"\nFIRST SOLUTION:\n\nWELCOME TO ADVENTURE.\n\nYOU ARE ON A ROAD.\n\nTHE ROAD IS LONGER THAN YOU THINK IT IS.\n\nWHAT IS YOURSELF AN ADVENTURER?\n\n0\n1\n0\n1\n0\n1\n1\n1\n2\n3\n2\n3\n4\n5\n3\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5"
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\"\n\n\"\"\"\n\nimport math\nimport typing"
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\\n\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n\"\"\") == \"\"\"\nINDV 1\nINDV 2\nCORP 1\nINDV 4\nCORP 2\nINDV 3\nCORP 3\nINDV 5\n\"\"\"\n\nassert solution(\"\"\"\n7 3 15\n1 1\n2 1\n3 1\n4 1\n5 2\n6 1\n7 1\n8 1\n9 2\n10 1\n11 2\n12 2\n13 1\n14 2\n15 1\n\"\"\") == \"\"\"\nINDV 1\nINDV 2\nINDV 3\nINDV 4\nINDV 5\nINDV 6\nINDV 7\nINDV 8\nINDV 9\nINDV 10\nINDV 11\nINDV 12\nINDV 13\nINDV 14\nINDV 15\n\"\"\"\n\nassert solution(\"\"\"\n5 2 8\n1 2\n1 3\n1 4\n1 5\n2 1\n3 1\n4 1\n5 1\n3 3\n4 3\n5 3\n\"\"\") == \"\"\"\nINDV 1\nINDV 2\nINDV 3\nINDV 4\nINDV 5\nINDV 1\nINDV 2\nINDV 3\nINDV 4\nINDV 5\n\"\"\"\n\nassert solution(\"\"\"\n5 2 8\n1 2\n1 3\n1 4\n1 5\n2 1\n3 1\n4 1\n5 1\n3 3\n4 3\n5 3\n\"\"\") == \"\"\"\nINDV 1\nINDV 2\nINDV 3\nINDV 4\nINDV 5\nINDV 1\nINDV 2\nINDV 3\nINDV 4\nINDV 5\n\"\"\"\n\n\"\"\"\n5 2 8\n1 2\n1 3\n1 4\n1 5\n2 1\n3 1\n4 1\n5 1\n3 3\n4 3\n5 3\n\n3 3\n4 3\n5 3\n\"\"\"\n"
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\"\n\nassert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\"\n\nassert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\"\n\nassert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\"\n\nassert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\""
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 2 4\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3''') == '''INDV 1\nINDV 2\nCORP 1\nINDV 4\nCORP 2\nINDV 3\nCORP 3\nINDV 5'''\n\n\"\"\"\nimport sys\nfrom collections import Counter, deque\n"
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3''') == '''INDV 1\nINDV 2\nCORP 1\nINDV 4\nCORP 2\nINDV 3\nCORP 3\nINDV 5'''\n\n\"\"\"\nSample Test Case\nInput\n5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\nOutput\nINDV 1\nINDV 2\nCORP 1\nINDV 4\nCORP 2\nINDV 3\nCORP 3\nINDV 5\n\"\"\"\n\"\"\"\n\"\"\"\nimport numpy as np\n\nnum_of_entries = [int(entry) for entry in stdin.split()]\nnum_of_individuals = num_of_entries[0]\nnum_of_corporations = num_of_entries[1]\nnum_of_lawsuits = num_of_entries[2]\n\nlaws = [None] * num_of_lawsuits\n\nfor i in range(num_of_lawsuits):\n    entry = stdin.split('\\n')[i+1]\n    laws[i] = [int(entry) for entry in entry.split()]\n\nlaws_np = np.array(laws)\n\ncorp_indexes = np.where(laws_np[:,0] == 1)\nindv_indexes = np.where(laws_np[:,0] == 2)\n\ncorp_laws = laws_np[corp_indexes]\nindv_laws = laws_np[indv_indexes]\n\nnp.set_printoptions(threshold=np.inf)\n\nprint(corp_laws)\nprint(indv_laws)\n"
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"\"\"INDV 1\nINDV 2\nCORP 1\nINDV 4\nCORP 2\nINDV 3\nCORP 3\nINDV 5\"\"\".split()\n\"\"\"\n\nSolution Explanation\n\nKattis is looking for a specific output format. We'll use a string concatenation operator (`+`) for that.\n\nThe output of this example is the following:\n\nINDV 1\nINDV 2\nCORP 1\nINDV 4\nCORP 2\nINDV 3\nCORP 3\nINDV 5\nSo, the number of different rules that Kattis can make is the number of different values in the output. For example, in the case of the sample, we can make the following rules:\n\nINDV 1\nINDV 2\nCORP 1\nINDV 4\nCORP 2\nINDV 3\nCORP 3\nINDV 5\nSo, we have 6 different rules.\n\nHowever, there is an important catch to consider: not all the rules are equal. For example, Kattis can have rules like:\n\nINDV 1\nINDV 2\nINDV 3\nCORP 1\nCORP 2\nCORP 3\nINDV 4\nCORP 4\nINDV 5\nINDV 1\nINDV 2\nINDV 3\nCORP 1\nCORP 2\nCORP 3\nINDV 4\nCORP 4\nINDV 5\nINDV 1\nINDV 2\nINDV 3\nCORP 1\nCORP 2\nCORP 3\nINDV 4\nCORP 4\nINDV 5\nINDV 1\nINDV 2\nINDV 3\nCORP 1\nCORP 2\nCORP 3\nINDV 4\nCORP 4\nINDV 5\n\nKattis will have to make this rule:\n\nINDV 1\nINDV 2\nINDV 3\nCORP 1\nCORP 2\nCORP 3\nINDV 4\nCORP 4\nINDV 5\nAnd then:\n\nINDV 1\nINDV 2\nINDV 3\nCORP 1\nCORP 2\nCORP 3\nINDV 4\nCORP 4\nINDV 5\nSince INDV 2 and INDV 3 both have rules with INDV 1, CORP 1, CORP 2 and CORP 3, it is better to ignore them in order to have only a single rule.\n\nFor this, we can use a \"set\" data structure, which is a data structure that stores only the unique values. We can see what a \"set\" is by running the following command:\n\n> python3 -m doctest solution.py\nTrying:\n    >>> s = set()\n    >>> s\n    {}\n    >>> s.add(1)\n    >>> s\n    {1}\n    >>> s.add(1)\n    >>> s\n    {1}\n    >>> s.add(2)\n    >>> s\n    {1, 2}\n    >>> s.add(2)\n    >>> s\n    {1, 2}\n    >>> s.add(2)\n    >>> s\n    {1, 2}\n    >>> s.add(3)\n    >>> s\n    {1, 2, 3}\n    >>> s.add(2)\n    >>> s\n    {1, 2, 3}\n    >>> s.add(1)\n    >>> s\n    {1, 2, 3}\n    >>> s.add(1)\n    >>> s\n    {1, 2, 3}\n    >>> s.add(4)\n    >>> s\n    {1, 2, 3, 4}\n    >>> s.add(1)\n    >>> s\n    {1, 2, 3, 4}\n    >>> s.add(1)\n    >>> s\n    {1, 2, 3, 4}\nOk, that's all for today.\n\nThis problem was suggested by TheCodingTrain.\n\n\"\"\""
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 7\\n1 2\\n1 3\\n3 1\\n2 3\\n4 3\\n3 2\\n4 1\\n5 4\\n3 5\\n1 5\") == \"INDV 1\\nCORP 4\\nCORP 5\\nINDV 3\\nCORP 3\\nINDV 5\\nCORP 2\"\n\n\"\"\"\n"
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 7\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2') == 'INDV 1\\nINDV 2\\nINDV 3\\nINDV 4\\nCORP 1'\nassert solution('4 3 7\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2') == 'INDV 1\\nINDV 2\\nINDV 3\\nINDV 4\\nINDV 5'\n\n\"\"\"\n\nimport sys\n\nR, S, L = map(int, sys.stdin.readline().split())\n\nactions = []\nfor _ in range(L):\n    a, b = map(int, sys.stdin.readline().split())\n    actions.append((a, b))\n\nactions.sort(key=lambda x: x[0])\n\nindex = 0\nwhile index < len(actions) - 1:\n    if actions[index][0] == actions[index + 1][0]:\n        index += 1\n    else:\n        break\n\nprint(\n    \"INDV {}\".format(actions[index][1]) if actions[index][1] in (1, R) else \"CORP {}\".format(actions[index][1])\n)\nprint(\n    \"INDV {}\".format(actions[index + 1][1]) if actions[index + 1][1] in (1, R) else \"CORP {}\".format(actions[index + 1][1])\n)\n"
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\\n\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n10 1\\n1\\n0\\n10\\n10') == '2.4142135624'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n10 1\\n1\\n0\\n10\\n10\\n') == '2.4142135624'\n\n-------------\n\nimport sys\n\ninput = sys.stdin.readlines()\nL = int(input[0])\nW = int(input[1])\n\nroad = []\nfor line in input[2:]:\n    road.append(int(line))\n\ntree_left = []\ntree_right = []\nfor i in range(len(road)):\n    if road[i] == 0:\n        continue\n    elif i == 0:\n        tree_left.append(road[i])\n    elif i == len(road)-1:\n        tree_right.append(road[i])\n    else:\n        break\n\nleft_sum = sum(tree_left)\nright_sum = sum(tree_right)\n\nmin_sum = left_sum\nfor i in range(len(tree_right)-1):\n    if (left_sum+tree_right[i]) < (min_sum+right_sum):\n        min_sum = left_sum+tree_right[i]\n    else:\n        break\nprint(min_sum)\n"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10 1\\n1\\n0\\n10\\n10\") == \"2.4142135624\"\n\"\"\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10 1\\n1\\n0\\n10\\n10\\n\") == \"2.4142135624\"\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10 1\\n1\\n0\\n10\\n10\") == \"2.4142135624\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n10 1\\n1\\n0\\n10\\n10\") == '2.4142135624'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10 1\\n1\\n0\\n10\\n10\") == \"2.4142135624\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n10 1\\n1\\n0\\n10\\n10') == '2.4142135624'\n\n-----Problem-----\nHalloween is about to begin! There are many fun Halloween decorations and accessories. You have been asked to design a costume made of straight, ribbons, flames and stars. The cost of the costume depends on the length of the ribbon, flame and star that you use.\n\nThe following image depicts the cost of the decoration of the costume:\n\nA costume made of straight ribbon costs 50c.\nA costume made of flame costs 20c.\nA costume made of star costs 10c.\n\nThus, for a costume of length 5, there is no cheaper way of creating the costume than using exactly 10 ribbons. However, for a costume of length 10, there are two ways of making the costume: \nusing 8 ribbons and 2 flames, or using 8 ribbons and 2 stars. There is no cheaper way of making the costume than using exactly 9 ribbons.\n\nGiven the length of the costume that you have to create, print the minimum number of ribbons and stars needed to create the costume, separated by a single space. \n\n-----Constraints-----\n$1 \\le N \\le 100000$\n$1 \\le L \\le 10000$\n$1 \\le W \\le 20$\n\n\"\"\"\n\nfrom typing import List, Tuple\nimport numpy as np\nimport math\nimport collections\nfrom scipy.optimize import linprog\nfrom collections import Counter\nfrom itertools import combinations\nimport numpy as np\nimport scipy\nimport time\n\nclass Solution:\n    def solution(self, _stdin: str) -> str:\n        n, l, w = [int(i) for i in _stdin.split()]\n        # cost = lambda x,y,z: 50*x + 20*y + 10*z\n        # r = np.zeros((n, l, w))\n        r = {}\n        for i in range(n):\n            line = [int(i) for i in _stdin.split()]\n            r[i] = line\n        \n        best = math.inf\n        for i in range(l):\n            for j in range(w):\n                for k in range(i+1,w):\n                    # cost = 0\n                    # for x in r[:,i,j]:\n                    #     cost += 50*x\n                    # for y in r[:,i,k]:\n                    #     cost += 20*y\n                    # for z in r[:,k,j]:\n                    #     cost += 10*z\n                    # if cost < best:\n                    #     best = cost\n                    # best = min(best, cost)\n                    # cost = 0\n                    # for x in r[:,i,j]:\n                    #     cost += 50*x\n                    # for y in r[:,i,k]:\n                    #     cost += 20*y\n                    # for z in r[:,k,j]:\n                    #     cost += 10*z\n                    cost = r[:,i,j] + r[:,i,k] + r[:,k,j]\n                    if min(cost) < best:\n                        best = min(cost)\n                    \n        return str(best)"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10 1\\n1\\n0\\n10\\n10\\n\") == \"2.4142135624\"\nassert solution(\"10\\n10 1\\n1\\n0\\n10\\n10\\n\") == \"2.4142135624\"\nassert solution(\"10\\n10 1\\n5\\n0\\n10\\n10\\n\") == \"8.89655172413\"\nassert solution(\"10\\n10 1\\n4\\n0\\n10\\n10\\n\") == \"8.89655172413\"\nassert solution(\"20\\n10 1\\n5\\n0\\n10\\n10\\n\") == \"8.89655172413\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n10 1\\n1\\n0\\n10\\n10\") == \"2.4142135624\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 5\\n3 1 5\\n2 1\\n5 0\\n1 3\") == '15'\n\"\"\"\nimport sys"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 5\\n3 1 5\\n2 1\\n5 0\\n1 3\") == \"15\"\nprint(\"Exercise pass.\")\n\n-----Notes-----\n\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n\"\"\") == \"15\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n\"\"\") == \"15\"\nprint(solution(\"\"\"3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n\"\"\"))\n\n-----Explanation-----\nIn the first test case, you can make the following moves:\n\n1. Start by moving the first army to the second, costing $2$, with $5 - 2 = 3$ armies left to move to the second.\n2. Start by moving the first army to the third, costing $5$, with $1 - 5 = -4$ armies left to move to the third.\n3. Start by moving the second army to the third, costing $5$, with $3 - 5 = -2$ armies left to move to the third.\n4. Move the second army to the second, costing $5$, with $0 - 5 = -5$ armies left to move to the second.\nThe cost of this move will be $2 + 5 + 5 + 5 = 15$, so the answer is $15$.\n\nIn the second test case, you can make the following moves:\n\n1. Start by moving the first army to the second, costing $2$, with $5 - 2 = 3$ armies left to move to the second.\n2. Start by moving the first army to the third, costing $5$, with $1 - 5 = -4$ armies left to move to the third.\n3. Start by moving the second army to the third, costing $5$, with $3 - 5 = -2$ armies left to move to the third.\n4. Start by moving the second army to the second, costing $5$, with $0 - 5 = -5$ armies left to move to the second.\nThe cost of this move will be $2 + 5 + 5 + 5 = 15$, so the answer is $15$.\n\"\"\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(expected_output)\n"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 5\\n3 1 5\\n2 1\\n5 0\\n1 3') == '15'\nassert solution('4\\n1 2 5\\n3 1 5\\n2 1\\n5 0\\n1 3') == '14'\nassert solution('3\\n1 2 5\\n3 1 5\\n2 1') == '9'\nassert solution('4\\n1 2 5\\n3 1 5\\n2 1\\n5 0\\n1 3') == '9'\n"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\nassert solution('1 2 5\\n3 1 5\\n2 1\\n5 0\\n1 3') == '15'\n\nimport collections"
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 5\\n3 1 5\\n2 1\\n5 0\\n1 3\") == \"15\"\nassert solution(\"3\\n1 2 5\\n3 1 5\\n2 1\") == \"14\"\nassert solution(\"3\\n1 2 5\\n3 1 5\\n2 1\\n5 0\\n1 3\") == \"12\"\nassert solution(\"3\\n1 2 5\\n3 1 5\\n2 1\\n5 0\\n1 3\\n6 0\") == \"20\"\n\n----Constraints----\n1 <= n <= 250000\n1 <= x_i, y_i <= 10^6\nc >= 1\n1 <= u, v <= n\n1 <= x_i + y_i <= 10^6\n1 <= c <= 10^6\n\"\"\"\n\n\"\"\"\nIn this problem, the minimum cost to move all of the armies in a country to another country is the minimum number of armies that need to be moved to be able to build enough armies in the destination country to conquer the world. The cost to move an army from one country to another is determined by the cost of that country\u2019s route to the destination.\n\nWe first need to find the minimum cost to move all of the armies in a country to any destination. We can assume that moving armies from one country to any other country will always result in an increase in the number of armies in that country. Therefore, the minimum cost to move all of the armies from a country to another country is the minimum number of armies in the destination country plus the minimum number of armies in the source country minus the number of armies in the destination country. The cost of moving an army from one country to another is the cost of the route between them plus the cost of an army.\n\nWe can then find the minimum cost to move all of the armies from a country to any destination by finding the minimum cost of moving an army from that country to any destination.\n\"\"\""
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3''') == '15'\n'''\n\n-----Solution-----\n\ndictionary = {}\n"
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5 3 3 4') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 3 3 4\") == \".....\\n..BBC\\n..A..\\n....C\\n@DDDD\"\nassert solution(\"2 2 1 1 2\") == \"..\\n..\"\nassert solution(\"3 4 6 6 8\") == \".CCCCC\\n..CC..\\n..@...\\n..@...\\n.C...C\\n@........\\n@...\"\nassert solution(\"4 4 6 6 8\") == \"....\\n.C.C.\\n...C..\\n@....\\n@....\\n@...C\\n@.C...\\n@....C\\n..@...\\n....C.\"\nassert solution(\"5 4 6 6 8\") == \"....\\n.C.C.\\n...C..\\n@....\\n@C...\\n@....\\n..@...\\n....C.\"\n\n'''\n\nfrom itertools import product\n"
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5 5 3 3 4') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD'\nassert solution('6 5 3 3 4') == '......\\n..BBC\\n..A.C\\n....C\\n@DDDD'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5 3 3 4\") == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD'\n"
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 3 3 4\") == \".....\\n..BBC\\n..A.C\\n....C\\n@DDDD\"\n\"\"\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 3 3 4\") == \".@BBC\"\nassert solution(\"5 5 3 3 4\") == \".@BBC\"\nassert solution(\"5 5 3 3 4\") == \".@BBC\"\nassert solution(\"5 5 3 3 4\") == \".@BBC\"\nassert solution(\"5 5 3 3 4\") == \".@BBC\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5 3 3 4\") == \".....\\n..BBC\\n..A..\\n....C\\n@DDDD\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5 3 3 4\") == \"...\\n..BBC\\n..A.C\\n....C\\n@DDDD\"\n\"\"\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 3 3 4\") == \".....\\n..BBC\\n..A.C\\n....C\\n@DDDD\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5 3 3 4\") == \".BBC...C.C....@DDDD\"\nassert solution(\"4 2 1 1 4\") == \".C..@.C...@..\"\n\"\"\""
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n111\\n001\\n000\\n111\\n000') == '001\\n001\\n001\\n111\\n200'\nassert solution('5 3\\n011\\n101\\n100\\n111\\n110') == '101\\n101\\n110\\n110\\n110'\n\"\"\""
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\") == \"001\\n001\\n001\\n111\\n200\"\n\"\"\"\n\nimport numpy as np\n\nn, m = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\n\nprint(arr)\n\nm_arr = np.array([x for x in arr])\nm_arr = m_arr[m_arr!= 0]\n\nprint(m_arr)"
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n111\\n010\\n101\\n110\\n100') == '010\\n010\\n100\\n110'\nassert solution('5 3\\n111\\n000\\n101\\n110\\n010') == '010\\n010\\n010\\n110\\n010'\nassert solution('4 3\\n001\\n010\\n101\\n110\\n100') == '010\\n010\\n100\\n110'\nassert solution('4 3\\n100\\n010\\n101\\n110\\n100') == '010\\n010\\n100\\n110'\nassert solution('4 3\\n110\\n010\\n101\\n100\\n100') == '010\\n010\\n010\\n110\\n100'\n"
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\">3\\n<1\\n1\\n0\\n1\\n1\\n\") == \"1\\n1\\n0\\n1\\n1\\n\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1\\n2\\n3\\n4\\n5\\n') == '1\\n1\\n1\\n2\\n3\\n4\\n5'\nassert solution('3 2\\n1\\n2\\n3\\n') == '1\\n1\\n2\\n2\\n3\\n3\\n'\nassert solution('2 2\\n1\\n2\\n') == '1\\n2\\n1\\n2'\nassert solution('2 2\\n3\\n4\\n') == '3\\n3\\n4\\n4'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\") == \"001\\n001\\n001\\n111\\n200\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\") == \"001\\n001\\n001\\n111\\n200\"\n\n-----Solution-----\nimport collections\nfrom itertools import accumulate\nfrom operator import itemgetter"
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\") == \"001\\n001\\n001\\n111\\n200\"\nassert solution(\"6 3\\n1111\\n010\\n1010\\n1111\\n010\\n1010\") == \"010\\n010\\n010\\n1010\\n1010\\n1010\"\n\n\"\"\""
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\") == \"001\\n001\\n001\\n111\\n200\"\n\"\"\""
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5 3\n111\n001\n000\n111\n000\"\"\") == \"001\"\n\nassert solution(\"\"\"5 3\n111\n010\n011\n110\n010\"\"\") == \"010\"\n\nassert solution(\"\"\"5 3\n111\n011\n010\n110\n010\"\"\") == \"010\"\n\nassert solution(\"\"\"5 3\n111\n010\n010\n110\n010\"\"\") == \"010\"\n\nassert solution(\"\"\"5 3\n011\n010\n010\n110\n010\"\"\") == \"010\""
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\") == \"19 20\\n17 15 14 13 7 2\"\n\"\"\"\n\n\nimport math\nimport re"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\") == \"19 20\\n17 15 14 13 7 2\"\n\n\"\"\"\n\nfrom typing import List, Dict, Tuple\nfrom itertools import product\n\nPossibilities: Dict[Tuple[int, int], List[int]] = {}\n"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\") == \"19 20\\n17 15 14 13 7 2\"\nassert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\") == \"19 20\\n17 15 14 13 7 2\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\") == \"19 20\\n17 15 14 13 7 2\"\nassert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\") == \"impossible\"\nassert solution(\"1/1\\n1/1\") == \"impossible\"\nassert solution(\"1/1\\n100/100\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\") == \"19 20\\n17 15 14 13 7 2\"\n\"\"\"\n\nsolution = lambda x: [int(i) for i in x.split(\"/\")]\n"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"19/13\\\\10/1\\\\19/14\\\\4/3\\\\20/7\\\\19/7\\\\20/13\\\\19/15\\\\10/7\\\\20/17\\\\19/2\\\\19/17\") == \"19 20\\n17 15 14 13 7 2\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''19/13\n10/1\n19/14\n4/3\n20/7\n19/7\n20/13\n19/15\n10/7\n20/17\n19/2\n19/17''') == '19 20\\n17 15 14 13 7 2'\n\n\"\"\"\n\nfrom typing import List\nimport itertools"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\") == \"19 20\\n17 15 14 13 7 2\"\nassert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\") == \"impossible\"\nassert solution(\"19/1\\n5/3\\n19/1\\n3/1\\n4/1\\n8/2\\n19/1\\n6/4\\n20/4\\n4/2\\n20/5\\n19/1\\n20/7\\n19/1\\n2/2\\n19/1\\n19/1\\n19/1\\n19/1\") == \"impossible\"\nassert solution(\"6/4\\n6/1\\n6/1\\n4/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/1\\n19/1\\n6/"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\") == \"19 20\\n17 15 14 13 7 2\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\") == 'impossible'\n\"\"\"\n\nimport sys\n\nclass Pipe:\n    def __init__(self, x_start, y_start, x_end, y_end):\n        self.x_start = x_start\n        self.y_start = y_start\n        self.x_end = x_end\n        self.y_end = y_end\n    \n    def __repr__(self):\n        return f'{self.x_start}, {self.y_start}, {self.x_end}, {self.y_end}'\n\nclass Well:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __repr__(self):\n        return f'{self.x}, {self.y}'"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3''') == 'possible'\n\nassert solution('''3 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3''') == 'possible'\nassert solution('''3 2\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3''') == 'impossible'\nassert solution('''1 1\n0 0\n1 0\n1 0\n1 0''') == 'impossible'\nassert solution('''5 2\n0 0\n0 1\n0 0\n1 0\n1 2 3\n2 2 2\n3 0 3\n3 2 4\n4 3 5\n4 4 5\n5 0 5\n''') == 'impossible'\nassert solution('''1 1\n0 0\n0 2\n2 0\n1 0''') == 'impossible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\\n') == 'impossible'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\") == \"possible\"\n\n\"\"\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\\n') == 'possible'\n\"\"\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\\n') == 'possible'\nassert solution('1 1\\n0 0\\n') == 'impossible'\nassert solution('1 1\\n0 1\\n') == 'impossible'\nassert solution('0 1\\n0 1\\n') == 'possible'\nassert solution('0 0\\n0 0\\n') == 'impossible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\") == \"possible\"\nassert solution(\"3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\") == \"impossible\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n0 0\\n0 2\\n2 0\\n1 2 3') == 'impossible'\nassert solution('2 3\\n0 0\\n0 2\\n2 0\\n1 2') == 'possible'\nassert solution('2 3\\n0 0\\n0 2\\n2 0\\n1 2') == 'possible'\nassert solution('2 3\\n0 0\\n0 2\\n2 0\\n1 2') == 'possible'\nassert solution('2 3\\n0 0\\n0 2\\n2 0\\n1 2\\n2 2 2') == 'impossible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\") == \"impossible\"\n\"\"\"\nfrom typing import List\n\nimport pytest\n\n\nclass Pipe:\n    def __init__(self, s: int, x: int, y: int):\n        self.s: int = s\n        self.x: int = x\n        self.y: int = y\n"
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 2\n2\n2''') == 4\nprint(solution(stdin=input))\n\n-----Explanation-----\nThe first line of input contains two space-separated integers $n$ ($2 \\leq n \\leq 30$) and $m$ ($1 \\leq m \\leq 10$), where Mia has $n$ colleagues and will be ordering lunch for $m$ days.\n\nMia has $n$ colleagues and can order $m$ days worth of lunch. Each day, she may order $n$ burgers and $n$ salads. She must order $n$ burgers and $n$ salads so that no two people in the same group eat the same food on that day.\n\nFor example, if she orders $a$ burgers for day $d$, $b$ salads for day $d$, and $c$ burgers and $d$ salads for day $d+1$, she can uniquely identify $n$ people on day $d$ if $a+b+c=n$. $n$ may be as large as $n$ to identify everyone on that day.\n\nIt follows that if she orders $d$ burgers for day $d$, $d+1$ salads for day $d$, and $d+2$ burgers and $d+2$ salads for day $d+1$, she can uniquely identify $n$ people on day $d+2$ if $a+b+c=n$.\n\nThe maximum number of people she can identify is $n$.\n\n\n'''\n\n'''\nGiven the number of items and the maximum number of items one person can eat per day. What is the maximum number of people that can be identified?\n\nSample Input:\n4 2\n2\n2\nSample Output:\n4\n\n'''\nn, m = list(map(int, input().split()))\n\nitems = [0] * m\n\nfor _ in range(n):\n    i = int(input())\n    items[i] += 1\n\nprint(sum(items))"
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n2\\n2') == 4\n\n-----Notes-----\nAssume that the numbers of burgers are random. The probability of choosing the same number for any two days is equal.\n\n-----Hints-----\nIn a $n$-person group, the $m$th person's name is $m$th number of the $n$-element list.\n\n\"\"\""
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    4 2\n    2\n    2\n    \"\"\"\n) == 4\n\nassert solution(\n    \"\"\"\n    4 2\n    2\n    1\n    \"\"\"\n) == 3\n\nassert solution(\n    \"\"\"\n    4 2\n    3\n    2\n    \"\"\"\n) == 3\n\n\"\"\"\n7 15\n7\n5\n4\n3\n4\n4\n5\n6\n8\n8\n7\n6\n4\n5\n7\n7\n8\n9\n7\n9\n5\n2\n6\n3\n5\n5\n4\n3\n7\n8\n7\n2\n1\n3\n3\n\"\"\"\n\n\"\"\"\n7 15\n7\n5\n4\n3\n3\n4\n4\n5\n6\n8\n8\n7\n6\n4\n5\n7\n7\n8\n9\n7\n9\n5\n2\n6\n3\n5\n5\n4\n3\n7\n8\n7\n2\n1\n3\n3\n\"\"\"\n"
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n2\\n2\") == 4\n"
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n2\\n2\") == 4\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import List, Dict, Set, Tuple\n\nfrom collections import deque, defaultdict\nfrom math import inf\n\n\"\"\"\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u7279\u522b\u6df1\u90a3\uff0c\u903b\u8f91\u6bd4\u8f83\u7ec6\u81f4\uff0c\u60f3\u5230\u66b4\u529b\u89e3\u6cd5\u7684\u65f6\u5019\u6bd4\u8f83\u5d29\u6e83\uff0c\u7ec8\u4e8e\u627e\u5230\u4e86\u52a8\u89c4\uff0c\u518d\u52a0\u4e0a\u4e00\u4e2a\u989d\u5916\u7684\u6808\uff0c\u8fd8\u662f\u4e0d\u9519\u7684\n\n\u4e5f\u5c31\u662f\u6211\u4eec\u8981\u8003\u8651\u6bcf\u5929\u8ba1\u7b97\u7684\u7ed3\u679c\uff0c\u7b2c\u4e00\u4e2a\u662f\u6bcf\u6b21\u90fd\u4ece\u5de6\u8fb9\u5f39\u51fa\u6765\uff0c\u5982\u679c\u4e0d\u662f\u5f39\u51fa\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u5c31\u8fdb\u6808\uff0c\u5982\u679c\u662f\u5f39\u51fa\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u5c31\u628a\u7b2c\u4e00\u4e2a\u62ff\u51fa\u6765\uff0c\u8fd9\u6837\u9012\u5f52\uff0c\n\u5c31\u80fd\u770b\u51fa\u6765\u6709\u591a\u5c11\u4e2a\u6808\u9876\u7684\u5143\u7d20\u5c31\u6709\u591a\u5c11\u4e2a\u7ed3\u679c\u4e86\u3002\u800c\u6211\u4eec\u8fd8\u8981\u8bb0\u4f4f\u9012\u5f52\u7684\u7ed3\u679c\uff0c\u8fd9\u91cc\u7528\u4e00\u4e2a\u5b57\u5178\u6765\u8bb0\u4f4f\uff0c\u6839\u672c\u539f\u56e0\u662f\uff0c\u6211\u4eec\u8981\u8fdb\u6808\uff0c\n\u4f46\u662f\u8fdb\u6808\u7684\u987a\u5e8f\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u6240\u4ee5\u7ed3\u679c\u662f\u53ef\u4ee5\u6df7\u6dc6\u7684\uff0c\u6bd4\u5982\u9012\u5f52\u5230\u5e95\u4e4b\u540e\uff0c\u6700\u540e\u51fa\u6808\u7684\u5143\u7d20\u53ef\u80fd\u662f\u7b2c\u4e00\u4e2a\uff0c\u7b2c\u4e8c\u4e2a\uff0c\u7b2c\u4e09\u4e2a\uff0c\u6216\u8005\u7b2c\u4e00\u4e2a\uff0c\u7b2c\u4e8c\u4e2a\uff0c\u7b2c\u4e09\u4e2a...\n\u7b2c\u4e94\u4e2a\uff0c\u8fd9\u6837\u7684\u5143\u7d20\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u7ed3\u679c\u5c31\u6709\u4e86\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u7684\u7ed3\u679c\u5c31\u6709\u4e86\uff0c\u7b2c\u4e09\u4e2a\u5143\u7d20\u7684\u7ed3\u679c\u5c31\u6709\u4e86\uff0c\u7b2c\u56db\u4e2a\u5143\u7d20\u7684\u7ed3\u679c\u5c31\u6709\u4e86\u3002\n\u8fd9\u6837\u7684\u8bdd\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e2a\u5143\u7d20\u8bb0\u5230\u7ed3\u679c\u4e2d\uff0c\u4ece\u8fd9\u91cc\u8fdb\u884c\u8fed\u4ee3\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u6700\u591a\u53ef\u4ee5\u8fed\u4ee3\u4e94\u6b21\uff0c\u6bcf\u6b21\u628a\u4e00\u4e2a\u5143\u7d20\u5f39\u51fa\u6765\u5c31\u597d\u4e86\uff0c\u6240\u4ee5\u53ea\u8981\u4e00\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5728\u8fd9\u91cc\u6784\u9020\u4e00\u4e2a\u6808\uff0c\u6808\u91cc\u5b58\u7684\u662f\u5b57\u5178\uff0c\u5b57\u5178\u91cc\u5b58\u7684\u662f\u7ed3\u679c\uff0c\u7ed3\u679c\u7684\u957f\u5ea6\u5373\u4e3a\u6808\u957f\u5ea6\uff0c\n\u6bcf\u4e00\u6b21\u8fed\u4ee3\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u8981\u6808\u9876\u5143\u7d20\uff0c\u5e76\u4e14\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5728\u5b57\u5178\u91cc\u9762\u67e5\u8be2\u7ed3\u679c\uff0c\u5982\u679c\u5b57\u5178\u91cc\u9762\u6ca1\u6709\uff0c\u5c31\u628a\u5b57\u5178\u4e2d\u503c\u7684\u957f\u5ea6\u52a01\uff0c\u7136\u540e\u8fdb\u6808\uff0c\n\u5982\u679c\u5b57\u5178\u91cc\u9762\u6709\uff0c\u5c31\u8fdb\u6808\uff0c\u5e76\u4e14\u628a\u5b57\u5178\u4e2d\u503c\u7ed9\u5f39\u51fa\u6765\u3002\u5f53\u6808\u9876\u5143\u7d20\u6700\u540e\u4e00\u4e2a\uff0c\u5c31\u8fdb\u884c\u7ed3\u679c\u7684\u6dfb\u52a0\uff0c\n\n\u6bcf\u4e00\u6b21\u8fed\u4ee3\u7684\u65f6\u5019\uff0c\u6211\u4eec\u90fd\u4f1a\u628a\u5f53\u524d\u6700\u5927\u7ed3\u679c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u91cc\u9762\uff0c\u6700\u540e\u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\u3002\n\n\u8fd9\u91cc\u9762\u8bb0\u5f55\u7684\u662f\u7ed3\u679c\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u5e0c\u671b\u6709\u91cd\u590d\u7684\uff0c\u8fd9\u6837\u53ef\u80fd\u4f1a\u5bfc\u81f4\u540e\u9762\u7684\u7ed3\u679c\u7ed3\u679c\u6df7\u6dc6\n\n\u6700\u540e\u8fd8\u662f\u6709\u4e00\u4e2a\u7279\u522b\u7684\u89e3\u6cd5\uff0c\u6700\u540e\u4e00\u6b21\u8fed\u4ee3\u5c31\u662f\u8bb0\u5f55\u7ed3\u679c\u7684\uff0c\u5982\u679c\u7ed3\u679c\u7684\u957f\u5ea6\u5c31\u6ee1\u8db3\u6761\u4ef6\uff0c\u5c31\u8fd4\u56de\u7ed3\u679c\uff0c\u8bb0\u5f55\u7ed3\u679c\n\"\"\"\n\n\nclass Solution"
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 2\n2\n2\n''') == 4\nprint(solution('''4 2\n2\n2\n'''))\n"
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n2\\n2\") == 4\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\nburger = [0]*n\nsalad = [0]*n\nfor _ in range(m):\n    a = int(stdin.readline())\n    for i in range(a):\n        if i % 2 == 0:\n            burger[i//2] += 1\n        else:\n            salad[i//2] += 1\n"
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n2\\n2') == '4'\nprint(solution(input()))\n\n-----Explanation-----\nMia may identify the following $4$ colleagues:\n\nOn the first day, she orders a burger for the first and third colleagues and a salad for the second colleague.\nOn the second day, she orders a burger for the second colleague and a salad for the fourth colleague.\nOn the third day, she orders a burger for the third colleague and a salad for the first colleague.\nThe maximum number of colleagues that Mia can uniquely identify is $4$.\n\"\"\""
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n2\\n2') == 4\n    "
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n2\\n2') == '4'\nassert solution('4 3\\n2\\n1\\n3') == '4'\nassert solution('4 3\\n2\\n1\\n3\\n1\\n3') == '4'\n\"\"\""
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n1 3\") == \"Mirko\""
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"3\\n1 1\\n1 2\\n1 3\"\n) == \"Mirko\"\nassert solution(\n\"3\\n1 1\\n2 2\\n3 3\"\n) == \"Slavko\"\nassert solution(\n\"3\\n2 2\\n1 1\\n3 3\"\n) == \"Mirko\"\n\nimport math"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n1 2\\n1 3') == 'Mirko'\nassert solution('3\\n1 1\\n2 2\\n3 3') == 'Slavko'\n\nprint(solution('3\\n1 1\\n2 2\\n3 3'))\n\nimport sys"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n1 3\") == \"Mirko\"\nassert solution(\"4\\n1 1\\n1 2\\n2 1\\n2 2\") == \"Slavko\"\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import IO, List, Tuple\n\n\nPoint = Tuple[int, int]"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n1 3\") == \"Mirko\"\n\"\"\""
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_0) == expected_0\nassert solution(test_input_1) == expected_1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'Mirko'\nassert solution('5\\n1 4\\n4 3\\n4 5\\n3 2') == 'Mirko'\nassert solution('3\\n1 1\\n2 1\\n2 3') == 'Slavko'\nassert solution('4\\n1 1\\n1 2\\n2 3\\n2 4') == 'Mirko'\nassert solution('2\\n1 1\\n2 1\\n1 2') == 'Slavko'\n'''\n\nN = int(input())\n\npoints = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    points.append((x, y))\n\nmirko = True\n\nwhile len(points) > 1:\n    if mirko:\n        if points[0][0] == points[1][0] or points[0][1] == points[1][1]:\n            mirko = False\n        else:\n            del points[0]\n    else:\n        if points[1][0] == points[2][0] or points[1][1] == points[2][1]:\n            del points[1]\n        else:\n            del points[2]"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1\\n1 2\\n1 3') == 'Mirko'\nassert solution('3\\n1 1\\n3 1\\n1 3') == 'Slavko'\nassert solution('3\\n1 1\\n3 3\\n1 3') == 'Mirko'\nassert solution('3\\n3 1\\n1 3\\n1 1') == 'Slavko'\nassert solution('3\\n3 3\\n1 1\\n1 3') == 'Slavko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n1 3\") == \"Mirko\"\nassert solution(\"3\\n1 1\\n1 2\\n2 2\") == \"Slavko\"\n\"\"\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n1 3\") == \"Mirko\"\n\"\"\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n6\\n34\\n38') == '2 4'\n\"\"\""
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n3\\n5\") == \"2 4\"\n\"\"\"\nfrom typing import List\nfrom collections import Counter\n"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n6\\n34\\n38') == '2 4'\n"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('34 38') == '2 4'\nassert solution('38 34') == '2 4'\nassert solution('34 38 36 37') == '2 4 6'\nassert solution('34 36 37 38') == '2 4 6'"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n6\\n1\\n2\\n3\\n4\\n5') == '2 4'\nassert solution('3\\n6\\n9\\n7') == '1'\nassert solution('3\\n3\\n3\\n3') == '1'\nassert solution('3\\n3\\n3\\n3') == '1'\n\nprint(solution(stdin=input()))\n\nprint(solution(stdin=input()))"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n6\n34\n38\"\"\") == \"2 4\"\nassert solution(\"\"\"5\n7\n4\n2\n1\n3\"\"\") == \"1 2 3 4\"\nassert solution(\"\"\"6\n12\n48\n91\n23\n56\n\"\"\") == \"1 2 4 9 16\"\n\n\"\"\"\n\n\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 $n$ \u0438 $m$, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u0432 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u043f\u043e \u043d\u0435\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e \u043c\u0430\u0441\u0441\u0438\u0432\u0435 $n$ \u0447\u0438\u0441\u0435\u043b. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u0441\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 $m$ \u0434\u043e $n$ \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f. \u0415\u0441\u043b\u0438 \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0434\u043d\u043e\u0433\u043e, \u0442\u043e \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043b\u044e\u0431\u043e\u043c\u0443 \u043f\u043e\u0440\u044f\u0434\u043a\u0443. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u043a\u0430\u043a\u043e\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u0440\u0435\u0437\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432, \u0447\u0442\u043e\u0431\u044b \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043d\u0430 $m$ \u043d\u0435 \u0434\u0430\u0432\u0430\u043b \u043e\u0441\u0442\u0430\u0442\u043a\u0443 $n$. \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e, \u0442\u043e \u043f\u0435\u0447\u0430\u0442\u0430\u0439\u0442\u0435 \u043b\u044e\u0431\u043e\u0435 \u0438\u0437 \u043d\u0438\u0445.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $n$ ($1 \\le n \\le 100$). \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $m$ ($1 \\le m \\le 1000000000$). \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 $n$ \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u0434\u0430\u043d\u044b \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0438\u0435 $m$ (\u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0447\u0438\u0441\u0435\u043b \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0435\u0432\u0430\u0436\u0435\u043d). \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 $10^9$.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 $m$ \u0434\u043e $n$ \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044f \u0438\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438. \u0415\u0441\u043b\u0438 \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0434\u043d\u043e\u0433\u043e, \u0442\u043e \u0438\u0445 \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u043b\u044e\u0431\u043e\u043c\u0443 \u043f\u043e\u0440\u044f\u0434\u043a\u0443.\n\nSample Input 1:\n\n6\n3\n4\n5\nSample Output 1:\n\n5\n4\nSample Input 2:\n\n8\n12\n48\n91\n23\n56\nSample Output 2:\n\n12\n8\n4\n1\n5\n3\n\n\"\"\"\n\nn = int(stdin.readline().strip())\nm = int(stdin.readline().strip())\n\nprint(*sorted(list(set(range(m, n + 1)) - set(range(n, m, -1))), reverse=True), sep='\\n')\n\n\"\"\"\n\u0412\u0430\u0448\u0430 \u0446\u0435\u043b\u044c \u2014 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 $n$ \u0438 $m$ \u0432 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u043f\u043e \u043d\u0435\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e \u043c\u0430\u0441\u0441\u0438\u0432\u0435 $n$ \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u0442\u0435\u043c \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 $k$ \u0438 $l$ \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435, \u0440\u0430\u0441\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u043d\u0430 \u0447\u0438\u0441\u043b\u0430\u0445 $k$ \u0438 $l$, \u0438 \u0437\u0430\u0442\u0435\u043c \u0440\u0430\u0441\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u044f $m$ \u0447\u0438\u0441\u0435\u043b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 $k$ \u0438 $l$. \u0415\u0441\u043b\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e, \u0442\u043e \u043f\u0435\u0447\u0430\u0442\u0430\u0439\u0442\u0435 \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u043d\u0438\u0445.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $n$, \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u2014 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $m$ ($1 \\le n,m \\le 100$). \u041f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 $n$ \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0438\u0435 $m$ (\u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0435"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n6\\n34\\n38\") == \"2 4\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n6\\n8\\n1\\n1') == '2 4'\n"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n6\\n1') == '4\\n2'\n"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(expected_result)\n\n\"\"\"\n"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n10000 400000 500000 900000') == '12'\nprint(solution(stdin))\n"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n10000 400000 500000 900000\\n31556926\") == \"12\"\nprint(\"Test pass.\")\n\n\"\"\""
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4\\n\"\n    \"10000 400000 500000 900000\"\n) == \"12\"\n"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10000 400000 500000 900000\\n2\\n8 10\") == 12\n\nimport sys\n"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10000 400000 500000 900000\") == \"12\"\n\"\"\""
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n10000 400000 500000 900000\") == 12\n\nimport time"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(r'4\\n10000 400000 500000 900000') == 12\n\"\"\"\n\nimport math"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n10000 400000 500000 900000') == '12'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n10000 400000 500000 900000') == '12'\nassert solution('5\\n8 10 2 1000000 30556926000') == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n10000 400000 500000 900000') == '12'\n\"\"\"\n\nfrom math import ceil\nimport sys"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"YES\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"YES\"\nassert solution(\"2 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"NO\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"YES\"\nassert solution(\"4 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"NO\"\nassert solution(\"4 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"NO\"\nassert solution(\"4 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"NO\""
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == 'YES'\n"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == 'YES'\n\nassert solution('8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == 'YES'\n\nassert solution('8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == 'YES'\n\nassert solution('8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == 'YES'\n\nassert solution('8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == 'YES'"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 8 0\\n2 4 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == 'YES'\n\"\"\"\n\n\nimport sys\n\ninput = lambda: sys.stdin.readline().rstrip()"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\\n') == 'YES'\nassert solution('6 4\\n1 2\\n2 3\\n1 2\\n5 6\\n0\\n2 3\\n') == 'YES'\nassert solution('6 4\\n1 2\\n2 3\\n1 2\\n5 6\\n0\\n2 3\\n') == 'YES'\n\nassert solution('8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\\n') == 'YES'\nassert solution('8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\\n') == 'YES'\n"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\n-------\n\n>>> from collections import Counter\n>>> n, m = map(int, stdin.readline().split())\n>>> if m == 0:\n...     print(\"YES\")\n...     exit()\n...\n>>> a = [list(map(int, stdin.readline().split())) for _ in range(m)]\n>>> A = {a[i][0] for i in range(m) if a[i][1] == 0}\n>>> A.add(0)\n>>> if n - m in A:\n...     print(\"YES\")\n... else:\n...     print(\"NO\")\n\nSample Input:\n4 4\n0\n1 2 0\n1 3 0\n3 4 0\nSample Output:\nNO\n"
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 0\\n1 2 3 4 5\\n0\\n2 4 0\\n2 3 4 0\\n0') == 'YES'\nassert solution('8 8\\n0\\n2 4 0\\n2 3 4 0\\n0\\n2 4 0\\n2 3 4 0\\n0') == 'YES'\nassert solution('8 8\\n0\\n2 4 0\\n2 3 4 0\\n0\\n2 4 0\\n2 3 4 0\\n0') == 'NO'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\nassert solution('6 1\\n1') == 'Impossible'\nassert solution('6 3\\n1 2 1 3') == 'Impossible'\nassert solution('6 4\\n1 2 3 4 1') == '6 4 1 3 2'\n\n\"\"\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n\") == \"Impossible\"\nassert solution(\"3 7\\n2 3\\n1 3\\n2 3\\n2 4\\n3 4\\n\") == \"Impossible\"\nassert solution(\"4 3\\n1 2\\n1 3\\n2 3\\n\") == \"Impossible\"\n\"\"\"\nfrom typing import List\n\n\nclass Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"Impossible\"\nassert solution(\"5 3\") == \"4 2 5 1 3\"\n\"\"\"\n\nfrom itertools import product\nimport numpy as np"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"Impossible\"\nassert solution(\"6 4\") == \"3 1 2 4 6 5\"\nassert solution(\"4 2\") == \"Impossible\"\nassert solution(\"6 4\") == \"3 1 2 4 6 5\"\n\"\"\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6 2\n3 4 5 6 1 2''') == '''5 6 1 2 3 4'''\n\nassert solution('''10 3\n6 4 2 5 7 1 1 4 8 9 3\n''') == '''4 8 2 3 1 5 7 6 9'''\n\nassert solution('''7 2\n2 5 4 3 1 6 1 3\n''') == 'Impossible'\n\nassert solution('''10 4\n6 1 2 5 7 1 2 4 8 9 3\n''') == '''1 3 2 4 8 7 6 9'''\nassert solution('''8 2\n2 4 5 6 1 7 1 3 1\n''') == 'Impossible'"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 4 2 3') == '4 2'\nassert solution('5 4\\n1 2 3 4 5') == '5 4'\nassert solution('10 10\\n1 4 8 13 21 28 35 43 54 55 65 66 67 68 69 70') == 'Impossible'\nassert solution('5 5\\n1 2 3 4 5') == 'Impossible'\nassert solution('4 2\\n1 2 4 3') == '2 3 1 4'\n"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\nassert solution('6 1\\n1 2 3 4 5 6') == 'Impossible'\n\n-----Constraints-----\n1 <= N <= 10000\n1 <= K <= 10^9\n1 <= a_i <= N for all i\n\n'''\nimport sys"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"Impossible\"\nassert solution(\"10 3\") == \"Impossible\"\nassert solution(\"5 10\") == \"Impossible\"\nassert solution(\"6 10\") == \"5 6 1 2 3 4\"\n\nassert solution(\"7 3\") == \"Impossible\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 3 2 1\") == \"Impossible\"\nassert solution(\"6 3\\n3 4 5 6 1 2\") == \"3 1 2 4 5 6\"\n\n\"\"\""
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 8 4') == '20512'\nassert solution('5 2 3 4') == IMPOSSIBLE"
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 8 4') == '20512'\nassert solution('5 3 8 4') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\"\nassert solution(\"5 1 8 4\") == \"IMPOSSIBLE\"\n\"\"\""
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\"\n\"\"\"\n"
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\"\n\n-----Notes-----\n\nIf you don't know how to start, please, review a basic algorithm for finding a solution of a problem.\n'''\n\nm, n, p, q = map(int, input().split())\n"
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == IMPOSSIBLE\nassert solution('5 2 8 4') == '20512'\n\n-------------Test Case------------\n0    5    2    8    4\n\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    2    8    4\n5    "
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\"\nassert solution(\"5 3 4 1\") == \"IMPOSSIBLE\"\nassert solution(\"6 6 8 9\") == \"631049\"\n\n-----Problem-----\nGiven $m$, $n$, $p$, and $q$, find the smallest number such that if you cross out the first $n$ digits, place the $8$ after the remaining $m - n$ digits, place a (possibly multi-digit) number $p$ after the remaining $m - n$ digits, then multiply this new number by $q$ to get the original number.\n\n(Note: Every $m$, $p$ and $q$ needs to start with a non-zero digit.)\n\n-----Constraints-----\n$m$, $n$ and $q$ are integers within the range [2, 100].\n$n$ and $m - n$ are integers within the range [1, 100].\n$p$ is a non-empty string with digits.\n$q$ is a non-empty string with digits.\n\n\"\"\""
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 8 4') == '20512'\n\"\"\"\n"
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\"\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\"\n\nassert solution(\"5 4 2 8 4\") == \"IMPOSSIBLE\"\n\nassert solution(\"5 2 8 6\") == \"8106\"\nassert solution(\"1 6 3 4 2\") == \"IMPOSSIBLE\"\nassert solution(\"6 9 2 9\") == \"6243\"\n"
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\nBAC\\nABC') == 2\nassert solution('3 8\\nHGBDFCAE\\nADBGHFCE\\nHCFGBDAE') == 3\n"
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'BAC\\n'\n'ABC\\n'\n) == 2\nassert solution(\n'BAC\\n'\n'ABD\\n'\n'BAC\\n'\n) == 2\nassert solution(\n'ABC\\n'\n'ABD\\n'\n'ABD\\n'\n'ABC\\n'\n) == 3\nassert solution(\n'HGBDFCAE\\n'\n'ADBGHFCE\\n'\n'HCFGBDAE\\n'\n) == 3\nassert solution(\n'BAC\\n'\n'BAC\\n'\n) == 2\n"
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABCDEFGHI\\n\"\n        \"ABCDEFGHI\\n\"\n        \"ABCDEFGHI\\n\"\n        \"ABCDEFGHI\\n\"\n        \"ABCDEFGHI\\n\"\n        \"ABCDEFGHI\\n\"\n        \"ABCDEFGHI\\n\"\n        \"ABCDEFGHI\\n\"\n        \"ABCDEFGHI\\n\"\n        \"ABCDEFGHI\\n\"\n        \"ABCDEFGHI\\n\"\n        \"ABCDEFGHI\") == 3\n"
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 3\nBAC\nABC''') == 2\nassert solution('''3 8\nHGBDFCAE\nADBGHFCE\nHCFGBDAE''') == 3\n\"\"\"\n"
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\nBAC\\nABC') == '2'\nassert solution('3 8\\nHGBDFCAE\\nADBGHFCE\\nHCFGBDAE') == '3'\n\"\"\"\n\n\n\nimport sys\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABCD\\nABD\") == \"AB\"\nassert solution(\"ABCD\\nABDGHF\") == \"AB\"\nassert solution(\"ABCDGHF\\nABCDGHF\") == \"ABCDGHF\"\nassert solution(\"ABCDGHF\\nABCD\") == \"AB\"\nassert solution(\"ABCDGHF\\nABCDG\") == \"AB\"\n"
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\nBAC\\nABC\\n\") == 2\nassert solution(\"3 8\\nHGBDFCAE\\nADBGHFCE\\nHCFGBDAE\\n\") == 3\n\"\"\""
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABBCBA\", 2) == \"ABC\"\nassert solution(\"ABBA\", 2) == \"AB\"\nassert solution(\"ABBCCBA\", 2) == \"AB\"\nassert solution(\"ABCD\", 3) == \"ABCD\"\nassert solution(\"ABCD\", 1) == \"A\"\n"
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\nBAC\\nABC\") == 2\nassert solution(\"3 8\\nHGBDFCAE\\nADBGHFCE\\nHCFGBDAE\") == 3\n\n\"\"\""
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\nBAC\\nABC') == 2\n\"\"\""
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == '3'\nprint(solution(\"1 2\"))\nassert solution(\"1 4\") == '14'\nassert solution(\"2 2\") == '2'\nassert solution(\"2 5\") == '30'\nassert solution(\"2 6\") == '42'\n"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '''\n\n'''\n"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 2') == '1'\nassert solution('1 1') == '0'\nassert solution('2 3') == '5'\n\"\"\"\n"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == 3\nprint(solution(\"2 3\"))\n\n\"\"\"\n\nr, c = [int(c) for c in stdin.split()]"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 2''') == 3\nassert solution('''2 3''') == 5\nassert solution('''2 2''') == 1\nassert solution('''2 1''') == 2\n\"\"\"\n"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == 3\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == 3\nassert solution(\"3 3\") == 5\n\"\"\"\n"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == '3'\nassert solution('4 4') == '17'\nassert solution('4 3') == '10'\nassert solution('1 1') == '1'\nassert solution('3 3') == '5'\n"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"4 4\") == \"5\"\nassert solution(\"3 4\") == \"7\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2\\n') == '3'\n"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == 3\nassert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == 3\nassert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == 3\nassert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == 3\nassert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == 3\n"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3') == '3'\n'''"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == 3\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == 3\n\"\"\"\nimport math"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == 3\n\n\"\"\"\n\nfrom collections import deque\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\nG = [set() for _ in range(N)]\nfor _ in range(N - 1):\n    D = list(map(int, sys.stdin.readline().split()))\n    i = D.pop(0)\n    for j in D:\n        G[i - 1].add(j - 1)\n        G[j - 1].add(i - 1)\n\nD = [0 for _ in range(N)]\nq = deque()\nq.append(0)\nwhile q:\n    i = q.popleft()\n    for j in G[i]:\n        D[j] += 1\n        q.append(j)\n\nmx = 0\nfor d in D:\n    if d < K:\n        mx = max(mx, d)\nprint(N - mx)\n"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == 3\nassert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == 3\nassert solution('5 1\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == 5\nassert solution('4 1\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == 5\nassert solution('5 1\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == 5\n"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n2 0 2 1 3\\n2 0 1 4\") == \"3\"\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\n\ndisagreement = [int(stdin.readline()) for _ in range(n)]\nmax_disagreement = 0\nfor i in range(n):\n    if disagreement[i] < k:\n        max_disagreement = max(max_disagreement, k - disagreement[i])\n\nprint(max_disagreement)\n"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4') == '3'\n\n-----Test 2-----\nSample Input:\n5 3\n2 1 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\nSample Output:\n3\n\n-----Test 3-----\nSample Input:\n6 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n3 1 4\nSample Output:\n5\n\n-----Test 4-----\nSample Input:\n6 3\n2 1 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n3 1 4\nSample Output:\n6\n\n-----Test 5-----\nSample Input:\n6 3\n2 1 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n3 1 4\nSample Output:\n6\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\n-----Notes-----\nIt is not necessarily true that every possible committee has size $K$.\n\n'''\n"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n0 1 2\\n3 0 1 4\\n2 1 4\\n2 2 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3\\n1 1\\n1 2') == 'YES'\nassert solution('2\\n1 1\\n1 2') == 'YES'\nassert solution('1\\n2\\n1\\n2') == 'NO'\nassert solution('2\\n2\\n1\\n1') == 'NO'\nassert solution('3\\n1 1\\n1 2\\n2 1\\n2 2\\n2 3') == 'NO'\n\n------Problem Description------\nThe Bicentennial Wheel, also known as the Balinese Jamb, is a large, flattened metal wheel that has been in use for more than two millennia. It is a symbol of the Hindu and Buddhist faith, and the English Christian Church was founded upon it in the 17th century. \n\nThe wheel has a diameter of 390 millimetres (that is, 3,090mm). The spokes are 36 millimetres (that is, 3,600mm) long. The wheel is divided into 19 sectors that are each 41 millimetres (that is, 5,232mm) in diameter.\n\nThe wheel is built of steel alloys and manufactured by high-quality metallurgy. It has a unique spinning pattern, called the \"Balinese Jamb\", that can only be created by turning the wheel in a specific way.\n\nThe pattern is created by the following procedure:\n\n\u2022 Starting with a central square of alternating black and white, place four smaller squares of alternating black and white, each larger in size than the central one.\n\u2022 Starting from the center, turn the wheel for 360\u00b0 so that the outer edge of the central square is aligned with the edge of the wheel.\n\u2022 Repeat the above step.\nThe last step results in a full wheel.\n\nIn the following diagrams, the direction of the rotation is always counter-clockwise.\n\nThe following diagrams illustrate the process of creation of the Balinese Jamb for a wheel diameter of 2,600 mm. The central square is marked with a star. The outer square is marked with an X. The four sub-squares are marked with a circle.\n\nThe following figures are the final result of the process.\n\nBalinese Jamb for diameter 2,600 mm\n\nBalinese Jamb for diameter 4,200 mm\n\nBalinese Jamb for diameter 6,300 mm\n\nBalinese Jamb for diameter 8,400 mm\n\nBalinese Jamb for diameter 10,500 mm\n\nBalinese Jamb for diameter 12,600 mm\n\nBalinese Jamb for diameter 14,700 mm\n\nBalinese Jamb for diameter 16,800 mm\n\nBalinese Jamb for diameter 18,900 mm\n\nBalinese Jamb for diameter 20,1000 mm\n\nBalinese Jamb for diameter 22,1100 mm\n\nBalinese Jamb for diameter 24,1200 mm\n\nBalinese Jamb for diameter 26,1300 mm\n\nBalinese Jamb for diameter 28,1400 mm\n\nBalinese Jamb for diameter 30,1500 mm\n\nBalinese Jamb for diameter 32,1600 mm\n\nBalinese Jamb for diameter 34,1700 mm\n\nBalinese Jamb for diameter 36,1800 mm\n\nBalinese Jamb for diameter 38,1900 mm\n\nBalinese Jamb for diameter 40,2000 mm\n\nBalinese Jamb for diameter 42,2100 mm\n\nBalinese Jamb for diameter 44,2200 mm\n\nBalinese Jamb for diameter 46,2300 mm\n\nBalinese Jamb for diameter 48,2400 mm\n\nBalinese Jamb for diameter 50,2500 mm\n\nBalinese Jamb for diameter 52,2600 mm\n\nBalinese Jamb for diameter 54,2700 mm\n\nBalinese Jamb for diameter 56,2800 mm\n\nBalinese Jamb for diameter 58,2900 mm\n\nBalinese Jamb for diameter 60,3000 mm\n\nBalinese Jamb for diameter 62,3100 mm\n\nBalinese Jamb for diameter 64,3200 mm\n\nBalinese Jamb for diameter 66,3300 mm\n\nBalinese Jamb for diameter 68,3400 mm\n\nBalinese Jamb for diameter 70,3500 mm\n\nBalinese Jamb for diameter 72,3600 mm\n\nBalinese Jamb for diameter 74,3700 mm\n\nBalinese Jamb for diameter 76,3800 mm\n\nBalinese Jamb for diameter 78,3900 mm\n\nBalinese Jamb for diameter 80,4000 mm\n\nBalinese Jamb for diameter 82,4100 mm\n\nBalinese Jamb for diameter 84,4200 mm\n\nBalinese Jamb for diameter 86,4300 mm\n\nBalinese Jamb for diameter 88,4400 mm\n\nBalinese Jamb for diameter 90,4500 mm\n\nBalinese Jamb for diameter 92,4600 mm\n\nBalinese Jamb for diameter 94,4700 mm\n\nBalinese Jamb for diameter 96,4800 mm\n\nBalinese Jamb for diameter 98,4900 mm\n\nBalinese Jamb for diameter 100,5000 mm\n\nBalinese Jamb for diameter 102,5100 mm\n\nBalinese Jamb for diameter 104,5200 mm\n\nBalinese Jamb for diameter 106,5300 mm\n\nBalinese Jamb for diameter 108,5400 mm\n\nBalinese Jamb for diameter 110,5500 mm\n\nBalinese Jamb for diameter 112,5600 mm\n\nBalinese Jamb for diameter 114,5700 mm\n\nBalinese Jamb for diameter 116,5800 mm\n\nBalinese Jamb for diameter 118,5900 mm\n\nBalinese Jamb for diameter 120,6000 mm\n\nBalinese Jamb for diameter 122,6100 mm\n\nBalinese Jamb for diameter 124,6200 mm\n\nBalinese Jamb for diameter 126,6300 mm\n\nBalinese Jamb for diameter 128,6400 mm\n\nBalinese Jamb for diameter 130,6500 mm\n\nBalinese Jamb for diameter 132,6600 mm\n\nBalinese Jamb for diameter 134,6700 mm\n\nBalinese Jamb for diameter 136,6800 mm\n\nBalinese Jamb for diameter 138,6900 mm\n\nBalinese Jamb for diameter 140,7000 mm\n\nBalinese Jamb for diameter 142,7100 mm\n\nBalinese Jamb for diameter 144,7200 mm\n\nBalinese Jamb for diameter 146,7300 mm\n\nBalinese Jamb for diameter 148,7400 mm\n\nBalinese Jamb"
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 1\\n1 2') == 'YES'\n\"\"\""
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1\\n1 2\\n2 1\\n2 2\\n3 1\\n3 2') == 'YES'\n\n\"\"\""
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 1\\n1 2\\n2 1\\n2 1\\n2 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\") == \"YES\"\nassert solution(\"2\\n1 1\\n1 2\\n2 1\\n2 1\\n2 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\") == \"NO\"\nassert solution(\"2\\n1 1\\n1 2\\n2 1\\n2 1\\n2 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\") == \"NO\"\nassert solution(\"2\\n1 1\\n1 2\\n2 1\\n2 1\\n2 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\") == \"NO\"\nassert solution(\"2\\n1 1\\n1 2\\n2 1\\n2 1\\n2 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\\n3 1\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 1\\n1 2\") == \"YES\"\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3\n1 1\n1 2\n2 1\n\"\"\"\n) == 'YES'\nassert solution(\n\"\"\"\n2\n1 1\n1 2\n\"\"\"\n) == 'NO'\n"
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1\\n1 2\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n2 2\\n3 1\\n2 1\\n2 3') == 'YES'\nassert solution('1\\n2\\n2\\n2') == 'YES'\nassert solution('1\\n1\\n2\\n2\\n3\\n3\\n3') == 'NO'\n\nprint(solution(stdin))\n\n-----\n\nSample Input:\n1\n2\n1 1\n1 3\nSample Output:\nNO\n\n-----\n\nSample Input:\n1\n4\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3 3\n4 1\n4 2\n4 3\nSample Output:\nYES\n\n-----\n\nSample Input:\n2\n2\n1 1\n1 3\n3 1\n2 2\n2 3\n2 1\nSample Output:\nNO\nNO\n\n-----\n\nSample Input:\n1\n1\n1 1\nSample Output:\nYES\n\n-----\n\nSample Input:\n1\n2\n1 1\n1 2\n2 2\nSample Output:\nYES\n\n-----\n\nSample Input:\n1\n3\n1 1\n2 2\n2 3\nSample Output:\nNO\n\n-----\n\nSample Input:\n1\n1\n1 1\nSample Output:\nYES\n\n-----\n\nSample Input:\n1\n2\n1 1\n2 1\nSample Output:\nNO\n\n-----\n\nSample Input:\n1\n1\n1 1\nSample Output:\nYES\n\n-----\n\nSample Input:\n2\n1\n1 1\n1 2\nSample Output:\nYES\n\n-----\n\nSample Input:\n2\n2\n1 1\n1 2\nSample Output:\nNO\n\n-----\n\nSample Input:\n3\n2\n1 1\n2 2\n2 1\nSample Output:\nNO\n\n-----\n\nSample Input:\n3\n3\n1 1\n1 2\n2 1\n2 2\nSample Output:\nNO\n\n-----\n\nSample Input:\n4\n4\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3 3\n4 1\n4 2\n4 3\nSample Output:\nYES\n\n-----\n\nSample Input:\n5\n5\n1 1\n1 2\n2 1\n3 2\n3 3\n4 2\n4 3\n4 1\n5 3\n3 5\n3 4\nSample Output:\nYES\nNO\nNO\nYES\nYES\n\n-----\n\nSample Input:\n4\n2\n1 1\n1 3\n2 2\n2 3\nSample Output:\nNO\n\n-----\n\nSample Input:\n4\n2\n1 1\n1 3\n2 2\n3 1\nSample Output:\nNO\n\n-----\n\nSample Input:\n4\n2\n1 1\n1 3\n2 2\n3 2\nSample Output:\nYES\n\n-----\n\nSample Input:\n4\n4\n1 1\n1 2\n2 2\n3 2\nSample Output:\nNO\n\n-----\n\nSample Input:\n4\n3\n1 1\n2 2\n2 1\nSample Output:\nNO\n\n-----\n\nSample Input:\n4\n1\n1 1\n1 2\n1 2\nSample Output:\nYES\n\n-----\n\nSample Input:\n4\n1\n1 1\n1 2\n1 2\nSample Output:\nNO\n\n-----\n\nSample Input:\n4\n3\n1 1\n1 2\n2 1\n3 2\nSample Output:\nYES\n\n-----\n\nSample Input:\n4\n2\n1 1\n1 2\n2 1\nSample Output:\nNO\n\n-----\n\nSample Input:\n4\n4\n1 1\n1 3\n2 2\n2 3\nSample Output:\nYES\n\n-----\n\nSample Input:\n4\n2\n1 1\n1 2\nSample Output:\nNO\n\n-----\n\nSample Input:\n4\n3\n1 1\n2 2\n3 2\nSample Output:\nYES\n\n-----\n\nSample Input:\n3\n1\n1 1\nSample Output:\nYES\n\n-----\n\nSample Input:\n1\n1\n1 1\nSample Output:\nYES\n\n-----\n\nSample Input:\n5\n1\n1 1\n2 2\n2 1\n3 2\n3 3\n4 2\n4 3\n5 1\n4 5\nSample Output:\nYES\n\n-----\n\nSample Input:\n4\n3\n1 1\n1 2\n2 1\nSample Output:\nNO\n\n-----\n\nSample Input:\n5\n1\n1 1\n2 2\n2 3\n3 2\n4 2\nSample Output:\nYES\n\n-----\n\nSample Input:\n4\n3\n1 1\n1 3\n2 2\nSample Output:\nNO\n\n-----\n\nSample Input:\n3\n2\n1 1\n2 2\nSample Output:\nNO\n\n-----\n\nSample Input:\n4\n4\n1 1\n1 3\n2 2\n3 2\nSample Output:\nYES\n\n-----\n\nSample Input:\n5\n2\n1 1\n2 2\nSample Output:\nNO\n\n-----\n\nSample Input:\n4\n3\n1 1\n2 2\nSample Output:\nYES\n\n-----\n\nSample Input:\n5\n3\n1 1\n2 3\nSample Output:\nNO\n\n-----\n\nSample Input:\n4\n2\n1 1\n1 2\n2 1\nSample Output:\nNO\n\n-----\n\nSample Input:\n3\n2\n1 1\n2 2\nSample Output:\nNO\n\n-----\n\nSample Input:\n1\n3\n1 1\n2 2\nSample Output:\nNO\n\n-----\n\nSample Input:\n2\n4\n1 1\n1 3\n2 2\nSample Output:\nYES\n\n-----\n\nSample Input:\n1\n5\n1 1\nSample Output:\nYES\n\n-----\n\nSample Input:\n4\n3\n1 1\n2 3\nSample Output:\nNO\n\n-----\n\nSample Input:\n3\n2\n1 1\n1 2\nSample Output:\nNO\n\n-----\n\nSample Input:\n3\n2\n1 1\n1 2\nSample Output:\nNO\n\n-----\n\nSample Input:\n2\n3\n1 1\n2 2\nSample Output:\nYES\n\n-----"
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == 'YES'\nassert solution('2') == 'NO'\nassert solution('3') == 'YES'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'YES'\nassert solution('1') == 'YES'\nassert solution('1\\n1') == 'YES'\nassert solution('2\\n1\\n1') == 'YES'\nassert solution('3\\n1\\n1\\n1') == 'YES'\n"
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'YES'\nassert solution('1\\n2\\n2\\n3\\n3\\n4\\n') == 'NO'\nassert solution('1\\n2\\n2\\n3\\n3\\n3\\n') == 'YES'\nassert solution('1\\n2\\n2\\n3\\n3\\n3\\n4\\n') == 'YES'\nassert solution('1\\n2\\n2\\n3\\n3\\n4\\n5\\n') == 'YES'\n"
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '3.000000000'"
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"3.000000000\"\n\"\"\""
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '3.000000000'\n'''\n\nimport sys"
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2''') == '''3.000000000'''\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == 3\n\"\"\""
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"3.000000000\"\n\"\"\"\nimport math\nimport random"
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 3.0\n\nprint(solution(\"2\"))\n\n\"\"\""
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"3.000000000\"\n\"\"\""
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '3.000000'\n\"\"\"\n\nn = int(stdin.read())\n\nimport numpy as np\nimport math"
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '5.00000000'\n\n-----Problem-----\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7\\n3 4 5 6 7') == '3'\nassert solution('3 2\\n1 3 2') == '2'\nassert solution('4 8\\n1 2 3 4') == '0'\nassert solution('5 5\\n1 2 3 4 5') == '0'\nassert solution('6 4\\n1 2 3 4 5 6') == '2'\n\n\"\"\""
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 1') == '0'\nassert solution('1 4') == '3'\nassert solution('1 10') == '4'\nassert solution('3 6') == '2'\n"
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n3\") == \"1\"\n\n---Problem Description---\nGiven a fence of N meters, each of the fences must be built of K fence posts. The fences are built in a linear fashion, from one end of the fence to the other.\n\nYou must write a function that determines the minimum number of fence posts you must use to build the fence. Each post can be of any length. If you can fit a single fence post onto the end of the fence, you must use a fence post in that position. However, if you cannot use a fence post here, then you must leave it out of the fence.\n\n---Sample Input---\n1\n6\n10\n11\n12\n13\n14\n1\nSample Output:\n3"
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 2 3\") == \"0\"\nassert solution(\"4 2\\n1 2 3 4\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"1\"\nassert solution(\"5 4\\n2 1 2 3 4\") == \"3\"\nassert solution(\"7 5\\n1 2 3 4 5 6 7\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n3\") == \"1\"\n\nimport math\n"
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5') == '1'\nassert solution('4 4') == '0'\nassert solution('3 2') == '0'"
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\n3') == '1'\n\nassert solution('2 4\\n2 2 4') == '1'\n\nassert solution('3 7\\n2 5 4') == '2'\n\nassert solution('3 6\\n2 4 6') == '0'\n\nassert solution('3 2\\n1 1 2') == '1'"
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n3') == '1'\nassert solution('1 3\\n3') == '2'\nassert solution('2 3\\n3') == '0'\nassert solution('3 3\\n3') == '1'\n\n'''"
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n3\") == \"1\"\n\nassert solution(\"2 3\\n3 4\") == \"0\"\n\nassert solution(\"3 3\\n3 4 2\") == \"2\"\n\nassert solution(\"4 5\\n1 2 3 4\") == \"2\"\n\nassert solution(\"3 5\\n2 3 4 5\") == \"2\""
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2\\n3') == 1\n\"\"\""
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(\"./sample_input.txt\", \"r\").read()) == open(\"./sample_output.txt\", \"r\").read()\nassert solution(open(\"./input.txt\", \"r\").read()) == open(\"./output.txt\", \"r\").read()\nprint(\"Everything ok\")\n"
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\") == '3'\nassert solution(\"3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\") == '2'\nassert solution(\"3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\") == '3'\nassert solution(\"3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\") == '1'\nassert solution(\"3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\") == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4') == '3'\n\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4') == '2'\n\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4') == '3'\n\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4') == '1'\n\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4') == '4'"
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 4') == 3\nassert solution('3 2 1') == 2\nassert solution('3 4 5') == 5\nassert solution('3 4 5') == 5\n"
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 6\") == \"5\"\nassert solution(\"3 4 5\") == \"5\"\nassert solution(\"3 4 5 6\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4') == '3'\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4') == '2'\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4') == '3'\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4') == '1'\n\"\"\"\nimport sys\n\nclass Shuffle:\n    def __init__(self, N, M, Q):\n        self.N = N\n        self.M = M\n        self.Q = Q\n        self.L = M + 1\n        self.W = [0] * (self.L)\n        self.R = [0] * (self.L)\n        self.D = [0] * (self.L)\n        self.D[1] = 1\n    def read(self):\n        self.N, self.M, self.Q = list(map(int, sys.stdin.readline().strip().split()))\n        self.W = [0] * (self.L)\n        self.R = [0] * (self.L)\n        self.D = [0] * (self.L)\n        self.D[1] = 1\n    def solve(self):\n        for _ in range(self.Q):\n            q = list(map(int, sys.stdin.readline().strip().split()))\n            if q[0] == 0:\n                for k in range(q[1] - 1, q[2]):\n                    self.W[k + 1] = self.R[k]\n                    self.R[k] = k + 1\n                    self.D[k + 1] = self.D[k]\n                    self.D[k] = 0\n            else:\n                print(self.W[q[1] - 1])\n    def reset(self):\n        self.read()\n        self.solve()"
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"1\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 3 2\") == \"2\"\nassert solution(\"1 1 4\") == \"4\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4') == '3'\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4') == '2'\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4') == '3'\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4') == '1'\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4') == '1'\n"
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4') == '3\\n2\\n3\\n1'\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2') == '3\\n2\\n3'\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2') == '3\\n2\\n3'\n\n\"\"\"\n\nimport sys\n\nN, M, Q = [int(x) for x in sys.stdin.readline().split()]\n\nfor _ in range(Q):\n    if sys.stdin.readline().split()[0] == '0':\n        K, x, *p = sys.stdin.readline().split()\n        p = list(map(int, p))\n        print(p[(x - 1) % M])\n    else:\n        d, x = sys.stdin.readline().split()\n        print(p[(int(d) - 1) % M])\n"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"HelloWorld.c\\nint Main() {\\n  printf(\\\"Hello %d\\\", i);\\n}\\n***END***\") == \"def solution(stdin: str) -> str:\\n  pass\\n\\nassert solution('HelloWorld.c\\nint Main() {\\n  printf(\\\"Hello %d\\\", i);\\n}\\n***END***') == 'def solution(stdin: str) -> str:\\n  pass\\n\\nassert solution('HelloWorld.c\\nint Main() {\\n  printf(\\\"Hello %d\\\", i);\\n}\\n***END***') == \"HelloWorld.c\\nint Main() {\\n  printf(\\\"Hello %d\\\", i);\\n}\\n\"\n\nassert solution(\"Add.c\\nint Main() {\\n  for (int i=0; i<10; i++) {sum += i;}\\n  printf(\\\"SUM %d\\\", sum);\\n}\\n***END***\") == \"def solution(stdin: str) -> str:\\n  pass\\n\\nassert solution('Add.c\\nint Main() {\\n  for (int i=0; i<10; i++) {sum += i;}\\n  printf(\\\"SUM %d\\\", sum);\\n}\\n***END***') == 'def solution(stdin: str) -> str:\\n  pass\\n\\n"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\") == 0\nassert solution(\"HelloWorld.c\\nint Main() { printf('Hello %d\\n', i); }***END***\") == \"HelloWorld.c\"\nassert solution(\"Add.c\\nint Main() { for (int i=0; i<10; i++) sum += i; printf('SUM %d', sum); }***END***\") == \"Add.c int Main() { for (int i=0; i<10; i++) sum += i; printf('SUM %d', sum); }\"\nassert solution(\"HelloWorld.c\\nint Main() { printf('Hello %d\\n', i); }***END***\\nint Main() { printf('THE END\\n'); }***END***\") == \"HelloWorld.c\"\nassert solution(\"HelloWorld.c\\nint Main() { printf('Hello %d\\n', i); }***END***\\nint Main() { printf('THE END\\n'); }***END***\\n\") == \"0\"\n"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == 0\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\nHelloWorld.c\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i);\\n}***END***\\nAdd.c\\nint Main() {\\n\\tfor (int i=0; i<10; i++) sum += i;\\n\\tprintf(\"SUM %d\", sum);\\n}***END***\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i);\\n\\tprintf(\"THE END\\n\");\\n}***END***\") == '2\\nHelloWorld.c\\ndef solution(stdin: str) -> str:\\n\\tpass\\n\\t2 HelloWorld.c\\n\\tint Main() {\\n\\t\\tprintf(\"Hello %d\\n\",i);\\n\\t}***END***\\n\\tint Main() {\\n\\t\\tfor (int i=0; i<10; i++) sum += i;\\n\\t\\tprintf(\"SUM %d\", sum);\\n\\t}***END***\\n\\tint Main() {\\n\\t\\tprintf(\"Hello %d\\n\",i);\\n\\t\\tprintf(\"THE END\\n\");\\n\\t}***END***', solution(\"2\\nHelloWorld.c\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i);\\n}***END***\\nAdd.c\\nint Main() {\\n\\tfor (int i=0; i<10; i++) sum += i;\\n\\tprintf(\"SUM %d\", sum);\\n}***END***\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i);\\n\\tprintf(\"THE END\\n\");\\n}***END***\")\n\nassert solution(\"2\\nHelloWorld.c\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i);\\n}***END***\\nAdd.c\\nint Main() {\\n\\tfor (int i=0; i<10; i++) sum += i;\\n\\tprintf(\"SUM %d\", sum);\\n}***END***\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i);\\n\\tprintf(\"THE END\\n\");\\n}***END***\") == '2\\nHelloWorld.c\\ndef solution(stdin: str) -> str:\\n\\tpass\\n\\t2 HelloWorld.c\\n\\tint Main() {\\n\\t\\tprintf(\"Hello %d\\n\",i);\\n\\t}***END***\\n\\tint Main() {\\n\\t\\tfor (int i=0; i<10; i++) sum += i;\\n\\t\\tprintf(\"SUM %d\", sum);\\n\\t}***END***\\n\\tint Main() {\\n\\t\\tprintf(\"Hello %d\\n\",i);\\n\\t\\tprintf(\"THE END\\n\");\\n\\t}***END***', solution(\"2\\nHelloWorld.c\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i);\\n}***END***\\nAdd.c\\nint Main() {\\n\\tfor (int i=0; i<10; i++) sum += i;\\n\\tprintf(\"SUM %d\", sum);\\n}***END***\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i);\\n\\tprintf(\"THE END\\n\");\\n}***END***\")\n\nassert solution(\"2\\nHelloWorld.c\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i);\\n}***END***\\nAdd.c\\nint Main() {\\n\\tfor (int i=0; i<10; i++) sum += i;\\n\\tprintf(\"SUM %d\", sum);\\n}***END***\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i);\\n\\tprintf(\"THE END\\n\");\\n}***END***\") == '2\\nHelloWorld.c\\ndef solution(stdin: str) -> str:\\n\\tpass\\n\\t2 HelloWorld.c\\n\\tint Main() {\\n\\t\\tprintf(\"Hello %d\\n\",i);\\n\\t}***END***\\n\\tint Main() {\\n\\t\\tfor (int i=0; i<10; i++) sum += i;\\n\\t\\tprintf(\"SUM %d\", sum);\\n\\t}***END***\\n\\tint Main() {\\n\\t\\tprintf(\"Hello %d\\n\",i);\\n\\t\\tprintf(\"THE END\\n\");\\n\\t}***END***', solution(\"2\\nHelloWorld.c\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i);\\n}***END***\\nAdd.c\\nint Main() {\\n\\tfor (int i=0; i<10; i++) sum += i;\\n\\tprintf(\"SUM %d\", sum);\\n}***END***\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i);\\n\\tprintf(\"THE END\\n\");\\n}***END***\")\n\nassert solution(\"2\\nHelloWorld.c\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i);\\n}***END***\\nAdd.c\\nint Main() {\\n\\tfor (int i=0; i<10; i++) sum += i;\\n\\tprintf(\"SUM %d\", sum);\\n}***END***\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i);\\n\\tprintf(\"THE END\\n\");\\n}***END***\") == '2\\nHelloWorld.c\\ndef solution(stdin: str"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"HelloWorld.c\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i)\\n}\\n***END***\") == \"2 HelloWorld.c\"\nassert solution(\"Add.c\\nint Main() { \\n\\tfor (int i=0; i<10; i++) \\n\\t\\tsum += i; \\n\\tprintf(\"SUM %d\\n\", sum)\\n}\\n***END***\") == \"2 Add.c\"\nassert solution(\"int Main() { \\n\\tprintf(\"Hello %d\\n\",i)\\n\\tprintf(\"THE END\\n\")\\n}\\n***END***\") == \"0\"\nassert solution(\"int Main() { \\n\\tfor (int i=0; i<10; i++) \\n\\t\\tsum += i; \\n\\tprintf(\"SUM %d\\n\", sum)\\n}\\n***END***\") == \"0\"\nassert solution(\"int Main() { \\n\\tprintf(\"Hello %d\\n\",i)\\n\\tprintf(\"THE END\\n\")\\n}\\n***END***\") == \"0\"\n\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('HelloWorld.c\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i);\\n}\\n***END***\\nAdd.c\\nint Main() {\\n\\tfor (int i=0; i<10; i++) sum += i;\\n\\tprintf(\"SUM %d\", sum);\\n}\\n***END***\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i);\\n\\tprintf(\"THE END\\n\");\\n}\\n***END***') == '2 HelloWorld.c Add.c'\n\n\n\"\"\""
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_solution\n\"\"\""
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"HelloWorld.c\\nint Main() {printf(\\\"Hello %d\\\", i);}***END***\") == \"HelloWorld.c\\ndef solution(stdin: str) -> str:\\n    pass\"\nassert solution(\"Add.c\\nint Main() {for(int i=0; i<10; i++) sum+=i; printf(\\\"SUM %d\\\", sum);}***END***\") == \"Add.c\\ndef solution(stdin: str) -> str:\\n    pass\"\nassert solution(\"int Main() {printf(\\\"Hello %d\\\", i); printf(\\\"THE END\\\");}***END***\") == \"int Main() {printf(\\\"Hello %d\\\", i); printf(\\\"THE END\\\");}\"\nassert solution(\"int Main() {printf(\\\"Hello %d\\\", i); printf(\\\"THE END\\\");}***END***\") == \"int Main() {printf(\\\"Hello %d\\\", i); printf(\\\"THE END\\\");}\"\n\n-----\nSample Input:\n2\nhello.c\nint main() {\n  int a;\n  a = 0;\n  while (a < 5) {\n    a++;\n  }\n  return 0;\n}\n***END***\nhello.c\nint main() {\n  int a;\n  a = 0;\n  do\n    a++;\n  while(a < 5);\n  return 0;\n}\n***END***\nhello.c\nint main() {\n  int a;\n  a = 0;\n  for(a = 0; a < 5; a++)\n    a++;\n  return 0;\n}\n***END***\nSample Output:\nhello.c\nint main() {\n  int a;\n  a = 0;\n  while (a < 5) {\n    a++;\n  }\n  return 0;\n}"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\nHelloWorld.c\\nint Main() {\\n    printf(\\\"Hello %d\\n\\\",i);\\n}\\n***END***\\nAdd.c\\nint Main() { \\n  for (int i=0; i<10; i++) \\n    sum += i; \\n  printf(\\\"SUM %d\\\", sum);\\n}\\n***END***\\nint Main() { \\n  printf(\\\"Hello %d\\n\\\",i); \\n  printf(\\\"THE END\\\\n\\\");\\n}\\n***END***\") == \"2 HelloWorld.c\\nint Main() {\\n    printf(\\\"Hello %d\\\",i);\\n}\\nSUM 36\\nthe end\"\nassert solution(\"2\\nHelloWorld.c\\nint Main() {\\n    printf(\\\"Hello %d\\n\\\",i);\\n}\\n***END***\\nAdd.c\\nint Main() { \\n  for (int i=0; i<10; i++) \\n    sum += i; \\n  printf(\\\"SUM %d\\\", sum);\\n}\\n***END***\\nint Main() { \\n  printf(\\\"Hello %d\\n\\\",i); \\n  printf(\\\"THE END\\\\n\\\");\\n}\\n***END***\") == \"2 HelloWorld.c\\nint Main() {\\n    printf(\\\"Hello %d\\\",i);\\n}\\nSUM 36\\nthe end\"\nassert solution(\"2\\nHelloWorld.c\\nint Main() {\\n    printf(\\\"Hello %d\\n\\\",i);\\n}\\n***END***\\nAdd.c\\nint Main() { \\n  for (int i=0; i<10; i++) \\n    sum += i; \\n  printf(\\\"SUM %d\\\", sum);\\n}\\n***END***\\nint Main() { \\n  printf(\\\"Hello %d\\n\\\",i); \\n  printf(\\\"THE END\\\\n\\\");\\n}\\n***END***\") == \"2 HelloWorld.c\\nint Main() {\\n    printf(\\\"Hello %d\\\",i);\\n}\\nSUM 36\\nthe end\"\nassert solution(\"0\\n\") == \"0\"\nassert solution(\"0\\nHelloWorld.c\\nint Main() {\\n    printf(\\\"Hello %d\\n\\\",i);\\n}\\n***END***\\nAdd.c\\nint Main() { \\n  for (int i=0; i<10; i++) \\n    sum += i; \\n  printf(\\\"SUM %d\\\", sum);\\n}\\n***END***\\nint Main() { \\n  printf(\\\"Hello %d\\n\\\",i); \\n  printf(\\\"THE END\\\\n\\\");\\n}\\n***END***\") == \"0\"\n"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"HelloWorld.c\\nint Main() {\\n\\tprintf(\\\"Hello %d\\\",i);\\n}\") == \"HelloWorld.c\\ndef solution(stdin: str) -> str:\\n\\tpass\\n\\tassert solution(\\\"HelloWorld.c\\nint Main() {\\n\\tprintf(\\\"Hello %d\\\",i);\\n}\\\")\""
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n2 2 2\\n4 2 1\\n4 4 1\") == '1\\n2\\n2'\n"
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 3\\n2 2 2\\n4 2 1\\n4 4 1\"\n) == \"1\\n2\\n2\"\nprint(solution(input()))"
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n2 2 2\\n4 2 1\\n4 4 1\") == \"1\\n2\\n2\"\n\"\"\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n2\\n2') == '1'\nassert solution('4\\n4\\n4\\n4') == '2'\n\"\"\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n2 2 2\\n4 2 1\\n4 4 1') == '1\\n2\\n2'\nassert solution('3 3\\n2 2 2\\n4 2 1\\n4 4 0') == '2\\n2\\n2'\n\"\"\""
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 2\\n4 2 1\\n4 4 1') == '1\\n2\\n2'\nprint(solution(\"2 2 2\\n4 2 1\\n4 4 1\"))"
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2\\n4 2 1\\n4 4 1\\n\") == \"1\"\n\"\"\"\n\nfrom typing import List\nfrom math import ceil"
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n2 2 2\\n4 2 1\\n4 4 1\") == \"1\\n2\\n2\"\n\n\"\"\""
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 2\\n4 2 1\\n4 4 1\") == \"1\\n2\\n2\"\n\"\"\"\n\nfrom sys import stdin\n\nfrom typing import List, Set, Tuple, Dict, Counter\n\nfrom collections import Counter\n"
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '2'\nassert solution('2\\n2\\n2') == '1'\nassert solution('3\\n2\\n2\\n2') == '2'\nassert solution('5\\n2\\n2\\n2\\n2') == '4'\n"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '''\n'''.strip()\n\nprint(solution(''))\n"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 20\\n50 70 10\\n100 110 4\\n150 190 16') == '5'\n\"\"\"\n\nimport sys\n\nn, C = map(int, sys.stdin.readline().split())\ndata = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 20\n50 70 10\n100 110 4\n150 190 16''') == '5'\n\nimport os, io, time, collections, functools, itertools, heapq, math, string\nfrom collections import deque, Counter\nfrom functools import lru_cache\nfrom itertools import permutations, combinations, combinations_with_replacement, accumulate\nfrom math import ceil, floor, gcd, log, sqrt\nfrom bisect import bisect, bisect_left, bisect_right\nfrom decimal import Decimal, getcontext"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 20\\n50 70 10\\n100 110 4\\n150 190 16') == '5'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n\n---Time limit---: 1000ms\n\"\"\"\n\nimport sys\n\na, b, c, d, e = [int(i) for i in sys.stdin.readline().split()]"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin='') == '5'\n\"\"\"\n\n\nfrom typing import List, Set, Tuple, Optional\n\n\nclass User(object):\n    def __init__(self,\n                 playback: int,\n                 buffer: int,\n                 bandwidth: int) -> None:\n        self.playback = playback\n        self.buffer = buffer\n        self.bandwidth = bandwidth\n"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 20\\n50 70 10\\n100 110 4\\n150 190 16') == '5'\n\nimport io\nimport unittest\nimport sys\nfrom collections import deque\n\nclass TestExercise(unittest.TestCase):\n    def test_solution(self):\n        with io.StringIO(stdin) as stdin:\n            with io.StringIO() as stdout:\n                sys.stdout = stdout\n                solution()\n                sys.stdout = sys.__stdout__\n                output = stdout.getvalue()\n                self.assertEqual(output, '5\\n')"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 20\n50 70 10\n100 110 4\n150 190 16''') == '5'\nassert solution('''5 1000\n9 30 10\n2 5 20\n2 5 20\n2 5 20\n2 5 20\n2 5 20\n''') == '20'\n'''\n$i$\n$p_ i$\n$b_ i$\n$u_ i$\n'''\n\nimport sys"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '1'\nassert solution('3\\n') == '1'\nassert solution('4\\n') == '1'\n"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 20\\n50 70 10\\n100 110 4\\n150 190 16\") == \"5\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6\\n(4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)') == '26'\nprint(solution(stdin))\n"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)') == '26'\nassert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)') == 'IMPOSSIBLE'\nassert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)') == 'IMPOSSIBLE'\nassert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)') == 'IMPOSSIBLE'\nassert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6\\n(4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)\") == \"26\"\n\n\"\"\"\n\nimport math\n\n\nclass Solution:\n    def __init__(self, r, c, s, t, n, l):\n        self.r = r\n        self.c = c\n        self.s = s\n        self.t = t\n        self.n = n\n        self.l = l\n\n    def shortest(self):\n        def get_distance(a, b):\n            a = (a[0] - b[0], a[1] - b[1])\n            return math.sqrt(sum([i ** 2 for i in a]))\n\n        def get_angle(a, b):\n            if a == b:\n                return 0\n            try:\n                return math.atan2(a[1] - b[1], a[0] - b[0])\n            except ZeroDivisionError:\n                return math.atan2(a[1] - b[1], 0)\n\n        def get_orientation(i):\n            return 0 if i < 3 else 1\n\n        def get_nearest(o, l):\n            return l[o]\n\n        def get_min(o, l):\n            return min(l[o])\n\n        def get_max(o, l):\n            return max(l[o])\n\n        def get_mid(o, l):\n            return l[o][int(len(l[o]) / 2)]\n\n        def get_dist(o, l):\n            return l[o][-1]\n\n        d = list(map(get_distance, self.l, get_nearest(get_orientation(self.t), self.l)))\n        a = list(map(get_angle, self.l, get_nearest(get_orientation(self.t), self.l)))\n        n = get_nearest(get_orientation(self.t), self.l)\n        i = get_nearest(get_orientation(self.t), self.l)\n        m = get_mid(get_orientation(self.t), self.l)\n        d = get_dist(get_orientation(self.t), self.l)\n        o = get_orientation(self.t)\n        d_ = d.copy()\n        a_ = a.copy()\n        n_ = n.copy()\n        i_ = i.copy()\n        m_ = m.copy()\n        d_.pop(o)\n        a_.pop(o)\n        n_.pop(o)\n        i_.pop(o)\n        m_.pop(o)\n        d_.sort()\n        a_.sort()\n        n_.sort()\n        i_.sort()\n        m_.sort()\n        return min(d[o] + get_distance(n[o], m) + get_distance(m, self.s) + d[o],\n                    d[o] + get_distance(i[o], m) + get_distance(m, self.s) + d[o])\n"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)') == '26'\nassert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)') == 'IMPOSSIBLE'\nassert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)') == 'IMPOSSIBLE'\n\nprint(solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)').strip())\n\nassert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)') == 'IMPOSSIBLE'\nassert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3) (3 3) (2 3) (1 3) (1 2)\\n\") == \"26\"\n\n\"\"\"\n\nimport sys\nfrom math import inf"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)\") == \"26\"\n"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6\\n(4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)\") == \"26\"\n\"\"\"\n"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)''') == '26'\n\nprint(solution(input()))\n\"\"\"\n\nimport itertools\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)\") == '26'\n\n\"\"\""
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\\n\") == \"26\"\n\n---\nclass Solution:\n    def __init__(self, stdin):\n        self.stdin = stdin\n        self.rows, self.cols = [int(x) for x in stdin.readline().split()]\n        self.start = tuple(int(x) for x in stdin.readline().split())\n        self.end = tuple(int(x) for x in stdin.readline().split())\n        self.n_masters = int(stdin.readline())\n        self.masters = []\n        for i in range(self.n_masters):\n            self.masters.append([int(x) for x in stdin.readline().split()])\n\n    def is_adj(self, coord):\n        return coord[0] == self.start[0] or coord[1] == self.start[1] or coord[0] == self.end[0] or coord[1] == self.end[1]\n\n    def is_valid(self, coord):\n        if coord[0] < 0 or coord[1] < 0:\n            return False\n        if coord[0] >= self.rows or coord[1] >= self.cols:\n            return False\n        if self.is_adj(coord):\n            return False\n        return True\n\n    def can_reach(self, moves):\n        coord = self.start\n        for move in moves:\n            coord = (coord[0] + move[0], coord[1] + move[1])\n            if not self.is_valid(coord):\n                return False\n        return self.is_adj(coord)\n\n    def get_turns(self):\n        turns = 0\n        queue = [self.start]\n        visited = set(self.start)\n        while queue:\n            turns += 1\n            queue_len = len(queue)\n            for _ in range(queue_len):\n                coord = queue.pop(0)\n                if coord == self.end:\n                    return turns\n                for move in self.masters:\n                    mv = (move[0] * 2 - 1, move[1] * 2 - 1)\n                    new_coord = (coord[0] + mv[0], coord[1] + mv[1])\n                    if self.is_valid(new_coord) and new_coord not in visited:\n                        queue.append(new_coord)\n                        visited.add(new_coord)\n        return -1\n\n    def solution(self):\n        return self.get_turns()\n\nassert Solution(io.StringIO(\"5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\\n\")).solution() == 26\n\n---\n[0, 0] is the starting point, with no walls.\n[1, 1] is a point with no walls.\n[2, 2] is a point with no walls.\n[3, 3] is a point with no walls.\n[4, 4] is a point with no walls.\n[0, 1] is a point with no walls.\n[1, 0] is a point with no walls.\n[0, 2] is a point with no walls.\n[2, 0] is a point with no walls.\n[0, 3] is a point with no walls.\n[3, 0] is a point with no walls.\n[0, 4] is a point with no walls.\n[4, 0] is a point with no walls.\n[1, 1] is a point with no walls.\n[1, 2] is a point with no walls.\n[2, 1] is a point with no walls.\n[1, 3] is a point with no walls.\n[3, 1] is a point with no walls.\n[1, 4] is a point with no walls.\n[4, 1] is a point with no walls.\n[2, 2] is a point with no walls.\n[2, 3] is a point with no walls.\n[3, 2] is a point with no walls.\n[2, 4] is a point with no walls.\n[4, 2] is a point with no walls.\n[3, 3] is a point with no walls.\n[3, 4] is a point with no walls.\n[4, 3] is a point with no walls.\n[4, 4] is a point with no walls.\n\n---\n\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\n6 [2, 1] [3, 2] [1, 3] [2, 3] [3, 1] [1, 1]\n\n0 0\n3 0\n0 2\n0 3\n\n0 1\n1 1\n1 2\n1 3\n\n1 1\n2 1\n1 2\n\n1 2\n2 2\n2 3\n\n2 2\n3 2\n2 3\n\n3 2\n4 2\n3 3\n\n4 2\n5 2\n4 3\n\n5 2\n6 2\n5 3\n\n6 2\n7 2\n6 3\n\n7 2\n8 2\n7 3\n\n8 2\n9 2\n8 3\n\n9 2\n10 2\n9 3\n\n10 2\n11 2\n10 3\n\n11 2\n12 2\n11 3\n\n12 2\n13 2\n12 3\n\n13 2\n14 2\n13 3\n\n14 2\n15 2\n14 3\n\n15 2\n16 2\n15 3\n\n16 2\n17 2\n16 3\n\n17 2\n18 2\n17 3\n\n18 2\n19 2\n18 3\n"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"success\"\nassert solution(\"8\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n0 3\\n1 2\\n0 4\\n1 3\") == \"failure\"\nassert solution(\"8\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n0 3\\n1 2\\n0 4\\n1 3\") == \"failure\"\nassert solution(\"8\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n0 3\\n1 2\\n0 4\\n1 3\\n0 5\\n1 4\") == \"failure\"\nassert solution(\"8\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n0 3\\n1 2\\n0 4\\n1 3\\n0 5\\n1 4\\n0 6\\n1 5\\n0 7\\n1 6\") == \"success\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n1 1\") == \"failure\"\nassert solution(\"1\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"success\"\n\n\"\"\"\n\nfrom math import sqrt,floor"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n1 1\") == \"success\"\nassert solution(\"3\\n0 0\\n0 0\\n1 0\\n1 1\") == \"failure\"\nassert solution(\"4\\n0 0\\n1 0\\n1 1\\n1 1\\n1 1\\n0 0\\n0 2\") == \"success\"\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 0\\n0 0\\n0 0\\n0 0') =='success'\nassert solution('4\\n1 1\\n2 1\\n3 1\\n4 1') == 'failure'\nassert solution('4\\n2 0\\n2 0\\n2 0\\n2 0') =='success'\nassert solution('5\\n2 3\\n3 2\\n2 2\\n2 0\\n2 3') == 'failure'\nassert solution('8\\n-1 2\\n-1 3\\n0 3\\n2 2\\n2 0\\n0 0\\n0 0\\n0 2') == 'failure'\n"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') == 'failure'\nassert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') =='success'\nassert solution('4\\n-1 1\\n0 1\\n1 1\\n0 0\\n1 2') =='success'\nassert solution('5\\n-1 0\\n1 1\\n0 2\\n1 2\\n0 1') == 'failure'\nassert solution('6\\n-1 1\\n0 2\\n0 1\\n1 1\\n0 0\\n1 2') =='success'\n"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"success\"\nassert solution(\"\\n\") == \"failure\"\nassert solution(\"\\n\\n\") == \"failure\"\nassert solution(\"\\n\\n\\n\") == \"failure\"\nassert solution(\"\\n\\n\\n\\n\\n\") == \"failure\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') == 'failure'\nassert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') =='success'\nassert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') == 'failure'\nassert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') =='success'\nassert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') =='success'\n"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"failure\"\n\n\"\"\"\nfrom math import sqrt\n\nn = int(input())\npoints = [(int(x), int(y)) for x, y in (input().split() for _ in range(n))]\n\npoints.sort()\n\nfor i in range(n - 2):\n    for j in range(i + 1, n - 1):\n        for k in range(j + 1, n):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            x3, y3 = points[k]\n            if sqrt((x3 - x1) ** 2 + (y3 - y1) ** 2) + sqrt((x2 - x3) ** 2 + (y2 - y3) ** 2) \\\n               + sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) >= 2 * min(sqrt((x3 - x1) ** 2 + (y3 - y1) ** 2),\n                                                                  sqrt((x2 - x3) ** 2 + (y2 - y3) ** 2),\n                                                                  sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)):\n                print(\"success\")\n                exit(0)\nprint(\"failure\")\n"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') == 'failure'\n\n-----\n1. Solve using a greedy algorithm.\n2. Solve using dynamic programming.\n\n-----\nSubmission Notes\nYou will need to submit at least two full python source files, one with a correct solution and one with an incorrect solution.\n\nYou must not edit the file provided by the grader.\n\nYou may submit your solution as many times as needed to get the points you are awarded.\n\nDo not submit your code to future submissions.\n\n-----"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\nprint(solution(real_input))\n"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 2 2\n1 2\n3 3\n5 2 2\n5 2 2''') == 'possible'\nassert solution('''2 2 2\n1 2\n3 3\n5 2 2\n5 2 2''') == 'impossible'\n\n'''\nhttps://app.codility.com/demo/results/trainingQCDTQE-G6T/"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2\") == \"possible\"\nassert solution(\"2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2\") == \"impossible\"\nassert solution(\"2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2\\n8 2 2\\n8 2 2\") == \"impossible\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2\") == \"possible\"\nassert solution(\"2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2\") == \"impossible\"\nassert solution(\"2 2 2\\n5 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2') == 'possible'\nassert solution('2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2') == 'impossible'\nassert solution('4 1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3 3\n1 2\n3 4\n5 6\n\"\"\") == \"possible\"\nassert solution(\"\"\"3 3\n1 2\n3 4\n5 6\n\"\"\") == \"possible\"\nassert solution(\"\"\"4 4\n1 2\n3 4\n5 6\n7 8\n\"\"\") == \"impossible\"\nassert solution(\"\"\"1 1\n1 2\n1 3\n1 4\n\"\"\") == \"impossible\"\nassert solution(\"\"\"1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\n---\nSample Input:\n2 2 2\n1 2\n3 3\n5 2 2\n5 2 2\nSample Output:\nimpossible\n---\nSample Input:\n2 2 2\n1 2\n3 3\n5 2 2\n5 2 2\nSample Output:\npossible\n---\nSample Input:\n2 2 2\n1 2\n3 3\n5 2 2\n5 2 2\nSample Output:\nimpossible\n---\nSample Input:\n1 3 1\n1\n1\nSample Output:\npossible\n---\nSample Input:\n3 2 2\n1 1\n3 2\n3 4\n10 2 2\n1 1\n1 1\nSample Output:\npossible\n---\nSample Input:\n4 2 2\n1 1\n1 2\n1 1\n1 1\nSample Output:\nimpossible\n---\nSample Input:\n4 2 2\n1 2\n1 2\n1 1\n1 1\nSample Output:\npossible\n---\nSample Input:\n3 2 2\n1 1\n3 2\n1 1\n1 1\nSample Output:\nimpossible\n\n\"\"\"\n\n\nn, q, s = list(map(int, input().split()))\nlists = [[] for _ in range(s)]\nfor _ in range(q):\n    l = list(map(int, input().split()))\n    lists[l[1] - 1].append(l[0])\n\nq_max = max([len(x) for x in lists])\nqueues = [[] for _ in range(q_max)]\n\nfor i in range(s):\n    queues[0].append(lists[i])"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2\") == \"possible\"\n\n\"\"\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2') == 'possible'\n\nSample Input:\n2 2 2\n1 2\n3 3\n5 2 2\n5 2 2\nSample Output:\nimpossible\n\"\"\""
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 2\\n1 2\\n3 3\\n5 2 2') == 'possible'\nassert solution('2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2') == 'impossible'\n\n-----Constraints-----\n$n, q, s \\in [1, 30]$\n$1 \\leq a_i \\leq 10^6$ for each $i$\n$0 \\leq d \\leq 10^6$\n$1 \\leq c_i \\leq 10^6$ for each $i$\n$0 \\leq c_i \\leq 10^6$ for each $i$\n\"\"\""
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 2\\n1 2\\n3 3\\n5 2 2') == 'possible'\nassert solution('2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2') == 'impossible'\n\"\"\""
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 1 2\\n1 2 1\\n-1 1 2\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 1 2\\n1 2 1\\n-1 1 2\") == \"0\"\n\n\"\"\"\n\nfrom math import gcd\nfrom math import sqrt\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 1 2\\n1 2 1\\n-1 1 2\") == \"0\"\n\"\"\"\n\nimport sys\nimport math\nfrom collections import defaultdict\n"
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 1 2\\n1 2 1\\n-1 1 2') == '0'\n"
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n'''\n\nfrom sys import stdin\n\nN, M = map(int, stdin.readline().split())\npoints = [list(map(int, stdin.readline().split())) for _ in range(N)]\npoints.append([0, 0])\npoints.sort()\ndp = [0] * len(points)\nfor i in range(len(points) - 1):\n    for j in range(i + 1, len(points)):\n        x_1, y_1, t_1 = points[i]\n        x_2, y_2, t_2 = points[j]\n        if x_1 == x_2 and abs(y_1 - y_2) < abs(t_1 - t_2):\n            dp[j] = max(dp[j], dp[i] + 1)\n        elif y_1 == y_2 and abs(x_1 - x_2) < abs(t_1 - t_2):\n            dp[j] = max(dp[j], dp[i] + 1)\nprint(dp[-1])\n"
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 1 2\\n1 2 1\\n-1 1 2\") == \"0\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n1 1 2\\n1 2 1\\n-1 1 2') == 0\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 1 2\\n1 2 1\\n1 1 2\\n1 2 1\") == 0\nassert solution(\"5 1\\n2 2 2\\n1 1 2\\n1 2 1\") == 0\nassert solution(\"10 1\\n2 3 2\\n5 6 2\\n7 5 2\\n8 4 2\\n9 3 2\\n7 5 2\") == 0\nassert solution(\"7 5\\n2 2 2\\n3 2 2\\n1 1 2\\n1 2 1\\n1 1 2\\n1 2 1\\n1 1 2\\n1 2 1\") == 0\n\n\"\"\"\n\nimport math\n\nn, m = list(map(int, stdin.readline().split()))\nx = []\ny = []\nt = []\nfor _ in range(n):\n    x_, y_, t_ = list(map(int, stdin.readline().split()))\n    x.append(x_)\n    y.append(y_)\n    t.append(t_)\n\nmin_t = math.inf\n"
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 1 2\\n1 2 1\") == 0\n\"\"\""
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 1 2\\n1 2 1\\n-1 1 2\") == 0\n\"\"\""
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n353\") == \"3\\n1313\"\nassert solution(\"4 2\\n1234\") == \"4\\n1313\"\n\n############################################################################\n\"\"\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"353\") == \"1313\"\nassert solution(\"1234\") == \"1313\"\nassert solution(\"12345\") == \"1313\"\nassert solution(\"123456\") == \"1313\"\nassert solution(\"123345\") == \"1313\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5312423514234235\") == \"6512423514234235\"\nassert solution(\"5312423514234235\") == \"6512423514234235\"\nassert solution(\"5312423514234235\") == \"6512423514234235\"\nassert solution(\"5312423514234235\") == \"6512423514234235\"\nassert solution(\"5312423514234235\") == \"6512423514234235\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"353\", 2) == \"1313\"\nassert solution(\"1234\", 2) == \"1313\"\n\"\"\""
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n353\") == \"3\\n1313\"\nassert solution(\"4 2\\n1234\") == \"4\\n1313\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1234') == '4\\n1313'\n\"\"\""
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1234') == '4\\n1313'\nprint(solution(stdin))"
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"233\\n2\") == \"13\"\nassert solution(\"543\\n4\") == \"43\"\nassert solution(\"333\\n3\") == \"33\"\nassert solution(\"543\\n4\") == \"43\"\nassert solution(\"433\\n3\") == \"43\"\n\"\"\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1234') == '4\\n1313'"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n\"\"\"\n\nfrom typing import List\n\n__author__ = 'Danyang'\n\n\nclass Solution:\n    def __init__(self):\n        self.mins = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n        self.hrss = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n    def solve(self, h, m, s, t_1, t_2):\n        \"\"\"\n        the first solution is based on the idea that the solution is symmetric\n        :param h: hand\n        :param m: hand\n        :param s: hand\n        :param t_1: starting time\n        :param t_2: ending time\n        :return: boolean\n        \"\"\"\n        # clock hands\n        hr = h * 60 * 60 + m * 60 + s\n        hr_2 = t_2 * 60 * 60 + t_1 * 60 + t_2\n\n        if hr_2 < hr:\n            return \"NO\"\n\n        # clock hand\n        hs = hr_2 - hr\n        hs_hr = hs / (60 * 60)\n        hs_m = (hs / 60) % 60\n        hs_s = hs % 60\n\n        if hs_hr in self.hrss:\n            hs_hr_idx = self.hrss.index(hs_hr)\n            if hs_hr_idx!= 12:\n                if (self.mins[hs_hr_idx] + hs_m) in self.mins:\n                    return \"YES\"\n            else:\n                if (self.mins[0] + hs_m) in self.mins:\n                    return \"YES\"\n        if hs_m in self.mins:\n            hs_m_idx = self.mins.index(hs_m)\n            if hs_m_idx!= 12:\n                if (self.hrss[hs_m_idx] + hs_s) in self.hrss:\n                    return \"YES\"\n            else:\n                if (self.hrss[0] + hs_s) in self.hrss:\n                    return \"YES\"\n\n        return \"NO\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12 30 45 3 11\") == 'NO'\nassert solution(\"12 0 1 12 1\") == 'YES'\nassert solution(\"3 47 0 4 9\") == 'YES'\n\"\"\"\n\nfrom collections import defaultdict\nfrom collections import deque\n\nstdin = input()\n\nh, m, s, t_1, t_2 = [int(c) for c in stdin.split()]\n\nhands = defaultdict(deque)\n\nh, m, s = h % 12, m, s\n\nhands[h].append('h')\nhands[m].append('m')\nhands[s].append('s')\n\nposition = 0\n\nfor index in range(1, t_1):\n    if hands[index][0] == 'h':\n        position += 1\n    if hands[index][0] =='m':\n        position += 60\n    if hands[index][0] =='s':\n        position += 3600\n\nfor index in range(t_1, t_2):\n    if hands[index][0] == 'h':\n        position -= 1\n    if hands[index][0] =='m':\n        position -= 60\n    if hands[index][0] =='s':\n        position -= 3600"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n\n'''\n"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n\"\"\"\nimport math"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin=\"12 30 45 3 11\") == \"NO\"\nassert solution(stdin=\"12 0 1 12 1\") == \"YES\"\nassert solution(stdin=\"3 47 0 4 9\") == \"YES\"\n\n-----"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 2 3 1 0\\n15 27 26\") == '3'\nassert solution(\"1 1 2 3 1 0\\n2 2 1\") == '0'\nassert solution(\"1 1 2 3 1 0\\n2 2 1\") == '0'\nassert solution(\"1 1 2 3 1 0\\n2 2 1\") == '0'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 2 3 1 0\\n2 4 20\") == '3'\nassert solution(\"1 1 2 3 1 0\\n15 27 26\") == '2'\nassert solution(\"1 1 2 3 1 0\\n2 2 1\") == '0'\nassert solution(\"1 1 2 3 1 0\\n15 27 26\") == '0'\n\"\"\"\n\nfrom math import gcd\n\nINPUT_1 = \"1 1 2 3 1 0\"\nINPUT_2 = \"2 4 20\"\n\nx0, y0, ax, ay, bx, by = map(int, INPUT_1.split())\nxs, ys, t = map(int, INPUT_2.split())\n\ndata = [(x0, y0), (x0 - ax, y0 - ay), (x0 + ax, y0 + ay)]\nfor i in range(3, 100):\n    data.append((ax * data[i - 1][0] + bx, ay * data[i - 1][1] + by))\n\np = data[0]\nans = 0\nfor i in range(3, len(data)):\n    d = data[i]\n    ans += gcd(p[0] - d[0], p[1] - d[1]) + 1\n    p = d\n\nprint(ans)\n"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 2 3 1 0\\n2 4 20') == '3'\nassert solution('1 1 2 3 1 0\\n15 27 26') == '2'\nassert solution('1 1 2 3 1 0\\n2 2 1') == '0'\nassert solution('1 1 2 3 1 0\\n15 15 1') == '0'\nassert solution('1 1 2 3 1 0\\n15 15 100') == '0'\n\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 2 3 1 0\\n2 4 20\") == \"3\"\nassert solution(\"1 1 2 3 1 0\\n15 27 26\") == \"2\"\nassert solution(\"1 1 2 3 1 0\\n2 2 1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 2 3 1 0\\n2 4 20\") == \"3\"\nassert solution(\"1 1 2 3 1 0\\n15 27 26\") == \"2\"\nassert solution(\"1 1 2 3 1 0\\n2 2 1\") == \"0\"\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 2 3 1 0\\n2 2 1\") == \"0\"\nassert solution(\"1 1 2 3 1 0\\n2 4 20\") == \"3\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 2 3 1 0\\n2 4 20\") == \"3\"\nassert solution(\"1 1 2 3 1 0\\n15 27 26\") == \"2\"\nassert solution(\"1 1 2 3 1 0\\n2 2 1\") == \"0\"\n\n\n----Solution-----\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 2 3 1 0\\n2 4 20') == '3'\nassert solution('1 1 2 3 1 0\\n15 27 26') == '2'\nassert solution('1 1 2 3 1 0\\n2 2 1') == '0'\n"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 2 3 1 0\\n15 27 26\") == \"2\"\nassert solution(\"1 1 2 3 1 0\\n2 2 1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 2 3 1 0\\n2 4 20\") == \"3\"\nassert solution(\"1 1 2 3 1 0\\n15 27 26\") == \"2\"\nassert solution(\"1 1 2 3 1 0\\n2 2 1\") == \"0\""
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0 2\\n2 0 2\\n1 1 2\") == \"6\"\nassert solution(\"3\\n0 0 2\\n3 0 2\\n6 0 2\") == \"8\"\n\"\"\"\n\n\nimport sys\nimport itertools"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0 1\\n2 0 1\\n4 0 1\") == \"4\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0 1\\n2 0 1\\n4 0 1\") == \"4\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 0 2\\n2 0 2\\n1 1 2') == '8'\n"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0 1\\n2 0 1\\n4 0 1\") == \"4\"\n\n-----Hint-----\n\nFor each new circle you should test whether there are some regions to be extended or not. Keep a counter of regions.\n\"\"\"\n\nn = int(input())\nb = []\nfor i in range(n):\n    x, y, r = map(int, input().split())\n    b.append([x, y, r])\n\nimport itertools"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2 2 1') == '1\\n'\nassert solution('2\\n1 1 2') == '2\\n'\nassert solution('3\\n1 1 2') == '4\\n'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0 1\\n2 0 1\\n4 0 1\\n\") == \"4\"\n\"\"\"\n\n\nimport numpy as np"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 0 1\\n2 0 1\\n4 0 1\\n') == '4'\nassert solution('3\\n0 0 2\\n3 0 2\\n6 0 2\\n') == '6'\nassert solution('3\\n0 0 2\\n3 0 2\\n6 0 2\\n') == '8'\n\"\"\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\n\nfor i in range(1, 4):\n    assert solution('\\n' * i) == ''\n\nassert solution(f'{i}\\n') == ''\n\nassert solution(f'{i}\\n' * i) == ''\n\n'''"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n0 0 2\\n2 0 2\\n1 1 2\\n') == '6'\nassert solution('3\\n0 0 1\\n2 0 1\\n4 0 1\\n') == '8'\nassert solution('3\\n1 2 3\\n0 0 1\\n2 3 2\\n') == '8'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1\") == \"YES\"\nassert solution(\"6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\") == \"YES\"\nassert solution(\"0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1\") == \"NO\"\nassert solution(\"1 3 3 5 5 3 3 1\\n7 4 4 7 7 10 10 7\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 0 6 6 0 6 0 0\") == \"YES\"\nassert solution(\"7 4 4 7 7 10 10 7\") == \"NO\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\\n\" + \"1 3 3 5 5 3 3 1\") == \"Yes\"\nassert solution(\"0 0 6 0 6 6 0 6\\n\" + \"7 3 9 5 11 3 9 1\") == \"No\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\") == \"YES\"\nassert solution(\"7 3 9 5 11 3 9 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1') == 'YES'\nassert solution('0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1') == 'NO'\nassert solution('6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7') == 'YES'\n"
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1\") == \"YES\"\nassert solution(\"0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1\") == \"NO\"\nassert solution(\"6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\") == \"YES\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 0 6 0 6 6 0 6') == 'YES'\nassert solution('1 3 3 5 5 3 3 1') == 'NO'\n"
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1') == 'YES'\nassert solution('0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1') == 'NO'\nassert solution('6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7') == 'YES'\n"
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1') == 'YES'\nassert solution('0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1') == 'NO'\n\n\n\"\"\""
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1') == 'YES'\nassert solution('0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 0\") == \"cslnb\"\nassert solution(\"2 2\") == \"sjfnb\"\nassert solution(\"3 2 1\") == \"sjfnb\"\nassert solution(\"4 3 2 1\") == \"sjfnb\"\nassert solution(\"5 4 3 2 1\") == \"sjfnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n0\") == \"cslnb\"\nassert solution(\"2\\n1 0\") == \"cslnb\"\nassert solution(\"3\\n2 3 1\") == \"sjfnb\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 1') =='sjfnb'\nassert solution('3 2 1') == 'cslnb'\nassert solution('2 3 3') =='sjfnb'\n\"\"\"\n\nimport sys\nimport collections\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nc = collections.Counter(a)\nmax_value = c.most_common()[-1][1]"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2 3 1') =='sjfnb'\nassert solution('3\\n2 3 1') =='sjfnb'\n\"\"\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n0\") == \"cslnb\"\nassert solution(\"2\\n2\\n2\") == \"sjfnb\"\nassert solution(\"3\\n2\\n3\\n1\") == \"sjfnb\"\nassert solution(\"4\\n4\\n1\\n1\") == \"cslnb\"\n\nprint(\"The local tests are done. Try Solution Online.\")\n"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3 1\") == \"sjfnb\"\nassert solution(\"2\\n1 0\") == \"cslnb\"\nassert solution(\"3\\n2 3 1\") == \"sjfnb\"\n\n\"\"\""
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 0\") == \"cslnb\"\nassert solution(\"2 2\") == \"sjfnb\"\nassert solution(\"3 2 1\") == \"sjfnb\"\n\"\"\"\nimport collections\nimport itertools"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 0 1\") == \"sjfnb\"\nassert solution(\"2 2\") == \"cslnb\"\nassert solution(\"1 0\") == \"cslnb\"\n\n\n\n---------------------------"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"1\\n0\\n\") == \"cslnb\"\nassert solution(\n    \"2\\n1 0\\n\") == \"cslnb\"\nassert solution(\n    \"3\\n2 3 1\\n\") == \"sjfnb\"\n\"\"\"\n\n\"\"\"\nIf we suppose that the \"two players\" are clever and have an optimal strategy, then the \"two players\" win as soon as one of them makes a mistake. For example, if the \"two players\" are as follows:\n\nfirst move, both have $[2, 2, 0]$\nsecond move, the \"two players\" win if we pick the second pile, because there will be no more remaining stones, and after choosing the second pile, the \"two players\" will have $[1, 1, 0]$\nthird move, the \"two players\" win, because there will be no more remaining stones, and after choosing the second pile, the \"two players\" will have $[0, 0, 0]$\n\nSo if there is a move that the \"two players\" will win, then the answer is \"sjfnb\"\n\nIf we suppose that the \"two players\" are stupid and always make mistakes, then the \"two players\" will eventually lose, because the \"two players\" cannot choose any move that will lead to the \"two players\" to win. For example, if the \"two players\" are as follows:\n\nfirst move, both have $[2, 2, 0]$\nsecond move, the \"two players\" win because there will be no remaining stones, and after choosing the second pile, the \"two players\" will have $[1, 1, 0]$\nthird move, the \"two players\" lose, because there will be no remaining stones, and after choosing the second pile, the \"two players\" will have $[0, 0, 0]$\n\nSo if there is a move that the \"two players\" will lose, then the answer is \"cslnb\"\n\nSince there is a move that the \"two players\" will win, or a move that the \"two players\" will lose, the answer is the intersection of the two sets.\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nsjfnb = [i for i in range(n) if a[i] % 2!= 0]\ncslnb = [i for i in range(n) if a[i] % 2 == 0]\n\nprint('sjfnb' if len(sjfnb) == 1 else 'cslnb')\n"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n0\") == \"cslnb\"\nassert solution(\"2\\n2\\n\") == \"sjfnb\"\nassert solution(\"3\\n2\\n3\\n1\") == \"sjfnb\"\n"
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n1 5 3\") == 2\n\"\"\""
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input_str) == expected_str\n\nprint(solution(input_str))\n\"\"\"\n"
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == 2\nassert solution(\"1 1 1\") == 1\nassert solution(\"1 2 3 4\") == 1\nassert solution(\"1 1 2 3\") == 0\nassert solution(\"1 1 1\") == 1\n"
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n1 5 3') == 2\nassert solution('1 2\\n1') == 1\nassert solution('1 1\\n1') == 0\n"
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\n1 5 3') == '2'\n\"\"\"\n\nfrom math import ceil\n\nn, t = list(map(int, input().split()))\n\nts = list(map(int, input().split()))\nts.append(t)\n\nmax_food = 0\n\nfor i in range(1, n + 1):\n    if i == n:\n        tmp_food = ceil((t - ts[i - 1]) / (ts[i] - ts[i - 1]))\n        if tmp_food > max_food:\n            max_food = tmp_food\n    else:\n        tmp_food = ceil((ts[i + 1] - ts[i]) / (ts[i + 1] - ts[i]))\n        if tmp_food > max_food:\n            max_food = tmp_food\n\nprint(max_food)\n"
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"1 5 3\") == \"2\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n1 5 3\") == \"2\"\nassert solution(\"1 2\\n1\") == \"1\"\nassert solution(\"1 1\\n1\") == \"0\"\n\nimport timeit\n\ntest = \"\"\"\nfrom solution import solution\n\nsolution(\"3 5\\n1 5 3\")\n\"\"\"\n\nprint(timeit.timeit(test, number=10000))"
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n1 5 3\") == \"2\"\nassert solution(\"1 2\\n1\") == \"1\"\nassert solution(\"1 1\\n1\") == \"0\"\n\"\"\"\n\nn, t = [int(x) for x in input().split()]\nt_list = [int(x) for x in input().split()]\n\ncount = 0\nfor t_next in t_list:\n    if t_next - t >= 1:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 5 3\") == \"2\"\nassert solution(\"1 2\\n1\") == \"1\"\nassert solution(\"1 1\\n1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 5\n1 5 3''') == 2\n"
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1 0 1 0\"\n\"\"\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '1 0 1'\nassert solution('2') == '1 -1 0 1'\n\"\"\""
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"1 1 0\"\n\"\"\""
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1 0 1\"\nassert solution(\"2\") == \"2 -1 0 1\"\nassert solution(\"3\") == \"3 -1 0 1\"\nassert solution(\"4\") == \"4 -1 0 1\"\nassert solution(\"5\") == \"5 -1 0 1\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\\n0 1\\n\"\nassert solution(\"2\") == \"2\\n-1 0 1\\n1\\n0 1\\n\"\n\n\"\"\""
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1 0 1\\n2 0\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\\n0 1\"\nassert solution(\"2\") == \"2\\n-1 0 1\"\n\"\"\""
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == \"1 0 1 0 1 0 1 0 0\"\nassert solution('1') == '1 0 1 0 1 0 1 0 0'\nassert solution('2') == '2 -1 0 1 0 1 0 1 0'\nassert solution('3') == '2 -1 0 1 0 1 0 1 0'\nassert solution('4') == '2 -1 0 1 0 1 0 1 0'\n"
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2 0 1\"\nassert solution(\"1\") == \"1 0\""
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2 0 1 0 1\"\nassert solution(\"3\") == \"3 0 1 0 1 0 1 0 1\"\nassert solution(\"4\") == \"4 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0"
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 5 4\\n1 2 1 3\") == \"1 3 3\"\nassert solution(\"3 1 5 3\\n1 3 1\") == \"2 3 2\""
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"3 1 5 4\\n\"\n\"1 2 1 3\"\n) == \"1 3 3\"\nassert solution(\n\"3 1 5 3\\n\"\n\"1 3 1\"\n) == \"2 3 2\"\nassert solution(\n\"3 2 5 3\\n\"\n\"1 3 1\"\n) == \"1 2 2\"\n\"\"\""
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 5 4\\n1 2 1 3') == '1 3 3', 'wrong result'\nassert solution('3 1 5 3\\n1 3 1') == '2 3 2', 'wrong result'\n\"\"\""
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 5 4\\n1 2 1 3\") == \"1 3 3\"\nassert solution(\"3 1 5 4\\n1 2 3 1\") == \"2 3 2\"\nassert solution(\"3 2 5 3\\n1 3 1\") == \"1 2 2\"\nassert solution(\"3 2 5 3\\n1 3 1\\n2 1 3\") == \"2 3 2\"\nassert solution(\"3 2 5 3\\n1 2 1\\n2 3 1\") == \"2 1 2\"\n"
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 5 4\\n1 2 1 3') == '1 3 3'\nassert solution('3 1 5 3\\n1 3 1') == '2 3 2'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 5 4\\n1 2 1 3\\n\") == \"1 3 3\"\nprint(\"Passed\")"
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 5 4\\n1 2 1 3\\n') == '1 3 3'\nassert solution('3 1 5 3\\n1 3 1\\n') == '2 3 2'\nassert solution('3 2 5 3\\n1 3 1\\n') == '1 2 2'\nassert solution('4 2 3 4\\n1 4 2 3\\n') == '1 2 3'\nassert solution('4 2 4 4\\n1 3 1 2\\n') == '2 4 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == '3 3 3'\nassert solution(test_input_2) == '2 3 2'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 5 4\\n1 2 1 3\\n\") == \"1 3 3\"\n\n\"\"\""
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 5 4\\n1 2 1 3\\n') == '1 3 3'\nassert solution('3 1 5 3\\n1 3 1\\n') == '2 3 2'\nassert solution('3 2 5 3\\n1 3 1\\n') == '1 2 2'"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"110\") == 3\n"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11') == 2\nassert solution('101') == 2\nassert solution('110') == 3\nassert solution('111') == 5\nassert solution('1111') == 8\n"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('111011011') == 2\nassert solution('111011010') == 0\nassert solution
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1101\") == 3\n\"\"\"\n"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\n\n\"\"\"\n\nfrom math import log"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1101_2') == 3\n\"\"\"\n"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1101') == '2'\nassert solution('11011') == '3'\nassert solution('1111011') == '169'\nassert solution('10111101111011110111101111011110111101111011111') == '3'\nassert solution('10111101111011110111101111011110111101111011111') == '3'\n"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"110\") == 3\n\nassert solution(\"111111011\") == 169\n"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1101110') == 1\nassert solution('10110') == 1\nassert solution('10010010') == 2\nassert solution('111111110') == 0\nassert solution('101010') == 0\n"
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1110111') == 169\nassert solution('1110110') == 169\nassert solution('1110101') == 169\nassert solution('1110100') == 169\nassert solution('1110111') == 169\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 1 2 0 0\") == \"11.084259940083\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 1 2 0 0\") == \"11.084259940083\"\nassert solution(\"5 0 4 2 2 0\") == \"33.121375178000\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3 0 5 5 3 5\") == \"33.121375178000\"\nassert solution(\"3 1 1 2 0 0\") == \"11.084259940083\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 1 2 0 0\") == \"11.084259940083\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nsys.setrecursionlimit(10 ** 7)\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 1 2 0 0\") == \"11.084259940083\"\nassert solution(\"5 0 4 2 2 0\") == \"33.121375178000\"\nassert solution(\"5 0 4 2 2 0\") == \"33.121375178000\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"3 1 1 2 0 0\"\n) == \"11.084259940083\"\nassert solution(\n\"5 0 4 2 2 0\"\n) == \"33.121375178000\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 1 2 0 0\\n3\\n1 1\\n2 1\\n2 3\\n') == '11.084259940083'\n\nassert solution('5 0 4 2 2 0\\n5\\n5 2\\n3 0\\n5 5\\n3 5\\n3 3\\n') == '33.121375178000'\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\nassert solution('3 1 1 2 0 0') == '11.084259940083'\n\"\"\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 1 2 0 0\") == \"11.084259940083\"\nassert solution(\"5 0 4 2 2 0\") == \"33.121375178000\"\nassert solution(\"3 5 1 1 1 1\") == \"25.08722727272727\"\nassert solution(\"3 1 1 2 0 0\") == \"11.084259940083\"\nassert solution(\"3 2 1 1 2 0\") == \"33.121375178000\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 1 2 0 0\") == \"11.084259940083\"\nassert solution(\"5 0 4 2 2 0\") == \"33.121375178000\"\n"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 5\") == \"2\"\nassert solution(\"8 15\") == \"1\"\nassert solution(\"7 20\") == \"0\"\nassert solution(\"1000000000000 1000000000001\") == \"500000000000\"\n"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 5\") == \"2\"\nassert solution(\"8 15\") == \"1\"\nassert solution(\"7 20\") == \"0\"\nassert solution(\"1000000000000 1000000000001\") == \"500000000000\"\n\n\"\"\""
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 5\") == \"2\"\nassert solution(\"8 15\") == \"1\"\nassert solution(\"7 20\") == \"0\"\nassert solution(\"1000000000000 1000000000001\") == \"500000000000\"\nprint(\"Passed all tests\")\n"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 5') == '2'\nassert solution('8 15') == '1'\nassert solution('7 20') == '0'\nassert solution('1000000000000 1000000000001') == '500000000000'\nassert solution('1000000000010001') == '500000000001'\n"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 5\") == \"2\"\nassert solution(\"8 15\") == \"1\"\nassert solution(\"7 20\") == \"0\"\nassert solution(\"1000000000000 1000000000001\") == \"500000000000\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 5') == '2'\nassert solution('8 15') == '1'\nassert solution('7 20') == '0'\nassert solution('1000000000000 1000000000001') == '500000000000'"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5 10') == '1'\nassert solution('5 5') == '0'\nassert solution('8 5') == '2'\nassert solution('7 20') == '0'\n"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 5') == '2'\nassert solution('8 15') == '1'\nassert solution('7 20') == '0'\nassert solution('1000000000000 1000000000001') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 5') == 2\nassert solution('8 15') == 1\nassert solution('7 20') == 0\nassert solution('1000000000000 1000000000001') == 500000000000\n"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 5\") == \"2\"\nassert solution(\"8 15\") == \"1\"\nassert solution(\"7 20\") == \"0\"\nassert solution(\"1000000000000 1000000000001\") == \"500000000000\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"01010\") == \"0\"\nassert solution(\"11010\") == \"1\"\nassert solution(\"0101010\") == \"0\"\n\"\"\"\n\n\nfrom itertools import combinations, count\n"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101010') == '101010'\nassert solution('111111') == '111111'\nassert solution('01010') == '01010'\nassert solution('01110') == '111101'\nassert solution('10000') == '11111'\n"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"01110\") == 1\nassert solution(\"10110\") == 2\nassert solution(\"10111010\") == 4\nassert solution(\"10111011\") == 4\nassert solution(\"1011101010\") == 7\n"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10111010\") == \"11\"\nassert solution(\"11001100\") == \"0\"\nassert solution(\"11111111\") == \"0\"\n"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 0 10\") == \"1\"\nassert solution(\"1 1 10\") == \"11\"\nassert solution(\"0 0 1\") == \"0\"\nassert solution(\"1111111\") == \"0\"\nassert solution
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('01010') == 0\nassert solution('11111') == 0\nassert solution('1111') == 2\nassert solution('01110') == 2\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10110011') == '11'\nassert solution('01101110') == '11'\nassert solution('11111111') == '0'\nassert solution('11100010') == '1'\nassert solution('1110001') == '1'\n"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10111') == '0'\nassert solution('1111111') == '0'\nassert solution('1101010') == '1'\nassert solution('1101010') == '1'\n\"\"\"\n\n\n\n\"\"\"\n1. \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0432\u043e\u0434\u0430 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e N \u0438 \u0447\u0438\u0441\u043b\u043e x \u0438 \u0447\u0438\u0441\u043b\u043e y.\n\u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 N \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0441\u043b\u043e\u0432\u0430 \u0438\u0437 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430.\n\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0442\u0432\u0435\u0442 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\n\u0414\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439.\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b:\n\n\u0422\u0435\u0441\u0442 1\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n5 1 10\n01000\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n11\n\n\u0422\u0435\u0441\u0442 2\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n5 10 1\n01000\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n2\n\n\u0422\u0435\u0441\u0442 3\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n7 2 3\n1111111\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n0\n\"\"\"\n\nn, x, y = map(int, input().split())\na = [input() for _ in range(n)]\n\ncount = 0\n\nfor string in a:\n    str_len = len(string)\n    prev_count = 0\n    for i in range(str_len // 2):\n        if string[i]!= string[str_len - i - 1]:\n            count += x + prev_count\n            prev_count = 0\n        else:\n            prev_count += 1\n    if prev_count!= 0:\n        count += x\n\nfor i in range(n // 2):\n    if a[i]!= a[n - i - 1]:\n        count += y\n\nprint(count)\n"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"5 1 10\"\n) == 11\nassert solution(\n    \"7 2 3\"\n) == 0\nassert solution(\n    \"7 2 3\"\n) == 0\n\n\"\"\"\n\nfrom typing import List, Any\n"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('01101010') == '11011010'\nassert solution('11011010') == '11011010'\nassert solution('11111111') == '11111111'\n\nassert solution('1') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'\n\n\"\"\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3, 1, 1) == \"2 1\"\nassert solution(5, 1, 2) == \"19 5\"\nassert solution(12, 12345678, 1000000000) == \"-1\"\nassert solution(15, 12345678, 1000000000) == \"11 12\"\nassert solution(1, 1000000000, 1) == \"1 99999999\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\nassert solution(\"10 2 3\") == \"-1\"\nassert solution(\"20 1 10\") == \"40 96\"\nassert solution(\"100 1 2\") == \"19 5\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\n\"\"\""
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\nassert solution(\"10 1 2\") == \"816 3\"\nassert solution(\"10 2 2\") == \"-1\"\nassert solution(\"10 3 2\") == \"-1\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'\n"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2\") == \"4\"\nassert solution(\"7 1\") == \"6\"\n\n\"\"\"\n\n\nfrom math import gcd\nfrom math import ceil\n"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 1') == '6'\n\"\"\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 1') == '6'\n\"\"\"\nfrom functools import reduce\n"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 1\\n') == '6'\n\n---\nSample Tests\nInput\n\n10 2\nOutput\n\n4\nInput\n\n7 2\nOutput\n\n0\n'''\n"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 1\\n') == '6'\n\"\"\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 1\") == '6'\nassert solution(\"10 2\") == '4'\n\"\"\"\nfrom fractions import Fraction\nfrom math import gcd\n"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 1\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 1\") == \"6\"\n\nassert solution(\"10 2\") == \"4\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"-149.154.167.99\") == 1\nassert solution(\"+149.154.167.100/30\") == 1\nassert solution(\"+149.154.167.128/25\") == 2\nassert solution(\"-149.154.167.120/29\") == 2\nassert solution(\"-127.0.0.4/31\") == 2\n"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1\n-149.154.167.99''') == '1\n\nassert solution('''2\n-149.154.167.99\n+149.154.167.100/30\n+149.154.167.128/25\n-149.154.167.120/29''') == '2\n\nassert solution('''4\n-149.154.167.99\n+149.154.167.100/30\n+149.154.167.128/25\n-149.154.167.120/29''') == '2\n\nassert solution('''5\n-127.0.0.4/31\n+127.0.0.8\n+127.0.0.0/30\n-195.82.146.208/29\n-127.0.0.6/31''') == '2\n\nassert solution('''2\n+127.0.0.1/32\n-127.0.0.1''') == '-1'''\n\n\n-----Problem-----\n\n\u0414\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0434\u043e\u043c\u0435\u043d\u0430 \u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u043e\u0431\u0449\u0435\u0439 \u0441\u0435\u0442\u0438 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0441 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u043e\u0439. \u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u044d\u0442\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 (\u0434\u043e\ufffd"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\") == \"195.0.0.0/8\\n127.0.0.4/30\"\nassert solution(\"-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\") == \"195.0.0.0/8\\n127.0.0.4/30\"\nassert solution(\"-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\") == \"195.0.0.0/8\\n127.0.0.4/30\"\nassert solution(\"-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\") == \"195.0.0.0/8\\n127.0.0.4/30\"\nassert solution(\"-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\") == \"195.0.0.0/8\\n127.0.0.4/30\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\\n-127.0.0.4/31\") == \"1\\n0.0.0.0/0\\n149.154.167.99\\n149.154.167.120/29\\n\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\\n-127.0.0.4/31') == '0.0.0.0/0\\n149.154.167.99\\n149.154.167.120/29'\n"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\") == \"1\\n0.0.0.0/0\"\nassert solution(\"5\\n-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\") == \"2\\n195.0.0.0/8\\n127.0.0.4/30\"\nassert solution(\"2\\n+127.0.0.1/32\\n-127.0.0.1\") == \"-1\"\n\"\"\""
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\\n-149.154.167.121/28\\n-149.154.167.124/27\\n\") == \"\"\"1\n0.0.0.0/0\n0.0.0.0/0\n1\n0.0.0.0/0\n0.0.0.0/0\n0.0.0.0/0\n\"\"\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n-149.154.167.99\n\n2\n-149.154.167.99\n+149.154.167.100/30\n+149.154.167.128/25\n-149.154.167.120/29\n\n2\n-127.0.0.4/31\n+127.0.0.8\n+127.0.0.0/30\n-195.82.146.208/29\n-127.0.0.6/31\n\n\"\"\") == \"\"\"\n1\n0.0.0.0/0\n\n2\n0.0.0.0/8\n149.154.167.99\n149.154.167.120/29\n\n2\n0.0.0.0/8\n195.0.0.0/8\n\n\"\"\"\n\n\"\"\"\n\n---\n\nFirst, we need to define all possible subnets in all possible prefixes (1 - 32). \n\nThe solution is to generate all possible subnets from all possible prefixes and then check if they are contained in the blacklist and whitelist. \n\n---\n\nWe can look at the blacklist and whitelist as sets of subnets. Then we can do a union of all subnets in both lists and then we can check if the subnets in the result intersect. \n\nThe solution is to check if the intersection of the whitelist and blacklist is not empty, in this case return -1. \n\nThen we iterate over all the subnets in the blacklist and for each subnet we check if it is contained in the union of the blacklist and whitelist. If it is, then return the length of the union. \n\n---\n\nFinally, we take the union of the blacklist and whitelist, and then we iterate over all the subnets in the blacklist and for each subnet we check if it is contained in the union of the blacklist and whitelist. If it is, then we return the length"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\") == \"1\\n149.154.167.99\\n149.154.167.120/29\"\n\nsolution(\"-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\")\nsolution(\"-149.154.167.99\\n-149.154.167.100/31\\n+149.154.167.128/25\\n-149.154.167.120/29\")\nsolution(\"-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\")\n\n\nimport re\nimport sys"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('149.154.167.99') == '1'\nassert solution('-149.154.167.99') == '1'\nassert solution('+149.154.167.99') == '1'\nassert solution('-149.154.167.99/32') == '1'\nassert solution('+149.154.167.99/32') == '1'"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"31415926535\") == 0\nassert solution(\"11\") == 1\nassert solution(\"22\") == 2\n\"\"\"\n\nfrom typing import Set"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"8\"\nassert solution(\"11\") == \"11\"\nassert solution(\"22\") == \"22\"\nassert solution(\"31415926535\") == \"31415926535\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('31415926535') == 0\n\n\"\"\"\nimport re"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('31415926535') == '0'\nassert solution('11') == '1'\nassert solution('22') == '0'\n\"\"\"\n\nimport pytest\nimport collections\nimport itertools\nimport typing"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"1\"\nassert solution(\"22\") == \"2\"\nassert solution(\"31415926535\") == \"0\"\nassert solution(\"11\") == \"1\"\nassert solution(\"22\") == \"2\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('22 31415926535') == '0'\nassert solution('11 31415926535') == '0'\nassert solution('11 31415926535') == '0'\nassert solution('11 31415926535') == '0'\n\nsolution('31415926535') # 6\nsolution('31415926535') # 6\nsolution('31415926535') # 6\nsolution('31415926535') # 6\n\nsolution('22 31415926535') # 0\nsolution('11 31415926535') # 0\nsolution('11 31415926535') # 0\nsolution('11 31415926535') # 0\n\nsolution('11 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('11 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution('22 31415926535') # 0\nsolution"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"00000000008\") == 1\nassert solution(\"31415926535\") == 0\n\n\"\"\""
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == '1'\nassert solution(\"22\") == '2'\nassert solution(\"33\") == '0'\nassert solution(\"444\") == '4'\nassert solution(\"5555\") == '5'\n"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == '1'\nassert solution('22') == '2'\nassert solution('11') == '1'\n\"\"\"\n\nimport itertools\nimport re\nfrom collections import Counter\n"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"31415926535\") == 0\nassert solution(\"10000000000\") == 1\nassert solution(\"0123456789\") == 0\n\n\"\"\"\n\nimport string"
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\") == \"3\"\nassert solution(\"3 3\\n0 0 0\\n0 1 0\\n0 0 0\") == \"-1\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\") == \"3\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\") == \"4\\nrow 1\\nrow 1\\ncol 4\\nrow 3\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\") == '4'\nassert solution(\"3 5\\n0 0 0\\n0 1 0\\n0 0 0\") == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\") == \"4\"\nassert solution(\"3 3\\n0 0 0\\n0 1 0\\n0 0 0\") == \"3\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\\n') == '4\\nrow 1\\nrow 1\\ncol 4\\nrow 3'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '-1'\nassert solution('3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n') == '3\\nrow 1\\nrow 2\\nrow 3'\n\n\n\nfrom queue import Queue"
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\") == \"4\\nrow 1\\nrow 1\\ncol 4\\nrow 3\\n\"\n\"\"\"\n\nn, m = map(int, input().split())\n\nmatrix = []\n\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))"
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\\n\") == \"4\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"3\""
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1') == '4'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\") == \"4\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '3 5\\n'\n    '2 2 2 3 2\\n'\n    '0 0 0 1 0\\n'\n    '1 1 1 2 1'\n) == '4\\n'*4\n"
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''8 6 4 5''') == 'YES'\nassert solution('''8 6 4 6''') == 'NO'\nassert solution('''10 3 11 4''') == 'NO'\nassert solution('''4 2 1 4''') == 'YES'\n\nfrom functools import lru_cache"
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 6 4 5') == 'YES'\nassert solution('8 6 4 6') == 'NO'\nassert solution('10 3 11 4') == 'NO'\nassert solution('4 2 1 4') == 'YES'\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"4 2 1 4\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"NO\"\nassert solution(\"4 2 1 4\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 6 4 5\\n') == 'YES'\nassert solution('8 6 4 6\\n') == 'NO'\nassert solution('4 2 1 4\\n') == 'YES'\nassert solution('4 2 1 4\\n') == 'YES'"
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"NO\"\nassert solution(\"4 2 1 4\") == \"YES\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 6 4 5\") == 'YES'\nassert solution(\"8 6 4 6\") == 'NO'\nassert solution(\"10 3 11 4\") == 'NO'\nassert solution(\"4 2 1 4\") == 'YES'\n"
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"NO\"\nassert solution(\"4 2 1 4\") == \"YES\""
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"NO\"\nassert solution(\"4 2 1 4\") == \"YES\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"NO\"\nassert solution(\"4 2 1 4\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 3\\n1 4\") == 6\n\"\"\"\nfrom typing import List, Tuple, Dict\n\nINF = 2147483647"
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 3\\n1 4') == 6\nassert solution('7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3') == 12\nassert solution('2 2\\n1 2\\n2 1') == -1\n\n-----"
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4 2\n1 3\n1 4\n''') == '6'\nassert solution('''\n7 8\n1 6\n2 6\n3 5\n3 6\n4 3\n5 1\n5 2\n5 3\n''') == '12'\nassert solution('''\n2 2\n1 2\n2 1\n''') == '-1'"
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 2\n1 3\n1 4''') == '6'\nassert solution('''7 8\n1 6\n2 6\n3 5\n3 6\n4 3\n5 1\n5 2\n5 3''') == '12'\nassert solution('''2 2\n1 2\n2 1''') == '-1'\n\n-----Explanation-----\n\nIn the first case, if Iahub travels down and right to get to the final cell (4, 4), then it takes 6 seconds.\n\nIn the second case, no route from cell (2, 1) to cell (3, 3) is possible, so the output is -1.\n'''\n"
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 3\\n1 4\") == \"6\"\nassert solution(\"7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3\") == \"12\"\nassert solution(\"2 2\\n1 2\\n2 1\") == \"-1\"\n\"\"\"\n\nfrom queue import PriorityQueue\nfrom dataclasses import dataclass\n\n@dataclass\nclass Path:\n    x: int\n    y: int\n    cost: int"
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 3\\n1 4') == '6'\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\n\nx, y = [int(x) for x in input().split()]\nz = [int(x) for x in input().split()]\n\nmatrix = [ [0] * n for i in range(n)]\n\nfor i in range(m):\n    matrix[x-1][y-1] = 1\n\nstack = []\n\ni, j = 1, 1\nstack.append((i,j))\n\nwhile stack:\n    i, j = stack.pop()\n    if i == n and j == n:\n        print(matrix[i-1][j-1])\n        break\n    if i < n and j < n and matrix[i][j] == 0:\n        stack.append((i+1, j))\n        stack.append((i, j+1))\n    elif i < n and matrix[i][j] == 1:\n        stack.append((i+1, j))\n    elif j < n and matrix[i][j] == 1:\n        stack.append((i, j+1))\n    \n"
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 3\\n1 4\") == '6'\n"
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3\\n1 4\") == \"6\"\nassert solution(\"7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3\") == \"12\"\nassert solution(\"2 2\\n1 2\\n2 1\") == \"-1\"\nassert solution(\"7 8\\n2 3\\n3 1\\n4 2\\n5 1\\n6 2\\n7 3\\n8 4\") == \"12\"\n"
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 3\\n1 4\") == 6\n\"\"\""
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 3\\n1 4\") == \"6\"\nassert solution(\"7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(5, 3) == \"NO\"\nassert solution(3, 2) == \"YES\"\n\"\"\""
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 0\\n1 1\\n0 1\\n') == 'YES'\nassert solution('3 2\\n1 0\\n1 1\\n0 1\\n') == 'NO'\n\n\"\"\"\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0\\n\") == \"NO\"\n\"\"\""
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 0\\n1 1\\n0 1\") == \"YES\"\nassert solution(\"5 3\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 0\\n1 1\\n0 1') == \"YES\"\nassert solution('3 2\\n1 0\\n1 1\\n0 1') == \"YES\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1') == 'YES'\nassert solution('0 1 1') == 'YES'\nassert solution('0 0 1') == 'YES'\nassert solution('0 0 0') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0\") == 'NO'\nassert solution(\"5 2\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0\") == 'YES'\nassert solution(\"6 3\\n1 0 1\\n1 0 1\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\") == 'NO'\nassert solution(\"8 5\\n0 0 0 1\\n0 0 0 0\\n1 0 0 0\\n1 0 0 0\\n0 0 0 0\\n1 0 0 0\") == 'YES'\nassert solution(\"5 4\\n0 1 1\\n1 0 1\\n0 1 0\\n0 0 1\\n1 1 1\") == 'YES'\n"
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n''') == 'NO'\nassert solution('''3 2\n1 0\n1 1\n0 1\n''') == 'YES'\n"
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0\") == 'NO'\nassert solution(\"3 2\\n1 0\\n1 1\\n0 1\") == 'YES'\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0') == 'NO'\nassert solution('3 2\\n1 0\\n1 1\\n0 1') == 'YES'\n"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n2 3 5 12\") == \"Yes\"\nassert solution(\"2 7\\n2 3\") == \"No\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n2 3 5 12\") == \"Yes\"\nassert solution(\"2 7\\n2 3\") == \"No\"\nprint('Success')"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n2 3 5 12\\n\") == \"Yes\"\nassert solution(\"2 7\\n2 3\") == \"No\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n2 3 5 12\") == 'Yes'\nassert solution(\"2 7\\n2 3\") == 'No'\n\nprint(\"Successfully passed the test!\")\n"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n2 3 5 12') == 'Yes'\nassert solution('2 7\\n2 3') == 'No'\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\n\narr = [int(i) for i in sys.stdin.readline().split()]\n\ndp = [[False] * n for _ in range(n)]\nfor i in range(n):\n    dp[i][i] = True\n\nfor step in range(1, n):\n    for left in range(0, n - step):\n        right = left + step\n        for pivot in range(left + 1, right):\n            if (arr[left] * arr[pivot]) % arr[right] == k:\n                dp[left][right] = True\n                break\n\nfor i in range(n):\n    if dp[0][i]:\n        print('Yes')\n        exit(0)\n\nprint('No')\n"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n2 3 5 12\\n\") == \"Yes\"\nassert solution(\"2 7\\n2 3\\n\") == \"No\"\nprint(\"Successfully passed the test!\")"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n2 3 5 12\\n\") == \"Yes\"\nassert solution(\"2 7\\n2 3\\n\") == \"No\""
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n2 3 5 12\\n\") == \"Yes\"\nassert solution(\"2 7\\n2 3\\n\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n2 3 5 12') == 'Yes'\n\nassert solution('2 7\\n2 3') == 'No'\n"
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n2 3 5 12') == 'Yes'\nassert solution('2 7\\n2 3') == 'No'"
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\"\nassert solution(\"6 4 2\") == \"8\""
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\"\n"
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\"\n"
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 2\") == \"1\"\n"
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\"\n\n\n\n\n---"
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 1\") == 6\nassert solution(\"6 4 2\") == 8\nassert solution(\"2 3 4\") == -1\n"
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'\n\"\"\""
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\""
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\"\nassert solution(\"3 4 1\") == \"6\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 4 3\") == \"2\"\nassert solution(\"3 1 1\") == \"0\"\nassert solution(\"4 1 1\") == \"2\"\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 2 4 3\\n') == '2'\n"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 2 4 3\") == \"2\"\nassert solution(\"4 1 1\") == \"0\"\nassert solution(\"4 1 3\") == \"2\"\nassert solution(\"5 2 3 4\") == \"1\"\nassert solution(\"5 5 5\") == \"-1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 1') == '0'\nassert solution('5 2 3 4') == '-1'\nassert solution('7 1 2 3 2 2') == '1'\nassert solution('7 2 2 3 2 2') == '-1'\nassert solution('7 2 3 2 2') == '1'\n"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 2 4 3\") == \"2\"\nassert solution(\"3\\n4 1 1\") == \"2\"\nassert solution(\"4\\n0 3 0 4\") == \"0\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 2 4 3\") == \"2\"\nassert solution(\"3\\n4 1 1\") == \"2\"\nassert solution(\"4\\n0 3 0 4\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 2 4 3\\n\") == '2'\n\nassert solution(\"3\\n4 1 1\\n\") == '0'\n\nassert solution(\"4\\n0 3 0 4\\n\") == '0'\n"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 2 4 3\") == \"2\"\nassert solution(\"3\\n4 1 1\") == \"0\"\nassert solution(\"4\\n0 3 0 4\") == \"0\"\nassert solution(\"1\\n4 1 1\") == \"2\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 2 4 3\") == 2\n\nassert solution(\"3\\n4 1 1\") == 0\n\nassert solution(\"4\\n0 3 0 4\") == 0\n\nassert solution(\"4\\n1 1 1\") == -1\n"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 2 4 3\") == '2'\nassert solution(\"3\\n4 1 1\") == '2'\nassert solution(\"4\\n0 3 0 4\") == '0'\n\"\"\""
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10011011') == 5\n\"\"\"\n"
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10000011\") == \"5\"\n\"\"\"\n\nfrom typing import List, Dict"
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10000011') == 5\nassert solution('01') == 2\nassert solution('10011011') == 5\n"
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"110110\") == 4\nassert solution(\"101101\") == 1\nassert solution(\"01101010\") == 6\nassert solution(\"01101010\") == 6\nassert solution(\"100100100\") == 3\n"
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"111111\") == \"0\"\nassert solution(\"1111010\") == \"0\"\nassert solution(\"1110010\") == \"1\"\nassert solution(\"1110110\") == \"2\"\nassert solution(\"1111010\") == \"2\"\n"
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1101') == 3\nassert solution('11100') == 3\nassert solution('10111010') == 5\nassert solution('01') == 1\n\"\"\""
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1110001010\") == 4\nassert solution(\"1110101010\") == 3\nassert solution(\"1110001011\") == 3\nassert solution(\"1110101011\") == 3\nassert solution(\"1110111110\") == 4\n"
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10000011') == '10011011'\nassert solution('01') == '2'\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10011011\") == \"5\"\nassert solution(\"01\") == \"2\"\nassert solution(\"10101\") == \"4\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10000011') == '10011011'\nassert solution('01') == '2'\n\"\"\""
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 1 4\") == \"3\"\nassert solution(\"4\\n4 4 4 4\") == \"-1\"\nassert solution(\"4\\n2 1 4 3\") == \"1\""
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 1 4\") == \"3\"\nassert solution(\"4 4 4 4\") == \"-1\"\nassert solution(\"2 1 4 3\") == \"1\"\n\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 1 4 3\") == \"1\"\nassert solution(\"4\\n4 4 4 4\") == \"-1\"\nassert solution(\"4\\n2 1 4 3\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(4) == 3\nassert solution(4) == 1\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 1 4\") == '3'\nassert solution(\"4\\n4 4 4 4\") == '-1'\nassert solution(\"4\\n2 1 4 3\") == '1'\n"
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 1 4\") == \"3\"\nassert solution(\"4\\n4 4 4 4\") == \"-1\"\nassert solution(\"4\\n2 1 4 3\") == \"1\"\n\n\"\"\"\n\nimport sys\n\nfrom collections import defaultdict\n\nfrom typing import Tuple\n"
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"4\\n\" +\n    \"2 1 4 3\"\n) == \"1\"\nassert solution(\n    \"4\\n\" +\n    \"4 4 4 4\"\n) == \"-1\"\nassert solution(\n    \"4\\n\" +\n    \"2 1 4 3\"\n) == \"3\"\nassert solution(\n    \"4\\n\" +\n    \"4 4 4 4\"\n) == \"-1\"\n\n---Problem Name: Arpa's land\n---Problem Url: https://codeforces.com/contest/1556/problem/A\n---Solution Video Link: TBD\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 1 4\") == \"3\"\nassert solution(\"4\\n4 4 4 4\") == \"-1\"\nassert solution(\"4\\n2 1 4 3\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 1 4 3\") == \"1\"\nassert solution(\"4\\n2 1 4 4\") == \"-1\"\nassert solution(\"4\\n4 4 4 4\") == \"-1\"\nassert solution(\"4\\n1 1 2 3\") == \"1\"\nassert solution(\"2\\n1 1\") == \"1\"\n"
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 1 4\") == \"3\"\nassert solution(\"4\\n4 4 4 4\") == \"1\"\nassert solution(\"4\\n2 1 4 3\") == \"1\"\nassert solution(\"4\\n4 4 4 4\") == \"-1\"\n\n\n'''\n"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 2 0\") == \"2\"\nassert solution(\"1 3 2 1 2 3\") == \"0\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2 0\") == \"2\"\nassert solution(\"7 1 3 2 1 2 3\") == \"0\"\nassert solution(\"2 2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 2 0') == '2'\nassert solution('1 3 2 1 2 3') == '0'\nassert solution('1 3 2 1 2 3') == '1'\nassert solution('1 3 2 3 1 2') == '2'\nassert solution('1 3 2 3 1 2') == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2 0\") == \"2\"\nassert solution(\"7 3 2 1 2 3\") == \"0\"\nassert solution(\"2 2\") == \"1\"\n\n\"\"\"\n\nn = int(input().strip())\ns = list(map(int, input().strip().split(\" \")))\ncount = 0\nmax_count = 0\nfor i in range(len(s)):\n    if s[i] == 3:\n        count += 1\n        if count > max_count:\n            max_count = count\n    elif s[i] == 2:\n        count = 0\n\nprint(max_count)\n"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 3 2 0') == '2'\nassert solution('7 1 3 2 1 2 3') == '0'\nassert solution('2 2') == '1'\nassert solution('7 1 3 2 1 2 3') == '0'\n"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 2 0\") == '2'\nassert solution(\"1 3 2 1 2 3\") == '0'\nassert solution(\"1 2 2 1 2 3\") == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3 2 0') == '2'\nassert solution('7\\n1 3 3 2 1 2 3') == '0'\nassert solution('2\\n2 2') == '1'"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 0\") == \"2\"\nassert solution(\"7 1 3 2 1 2 3\") == \"0\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 3 3 2 1 2 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 3 2 0\") == \"2\"\nassert solution(\"7 1 3 2 1 2 3\") == \"0\"\nassert solution(\"2 2\") == \"1\""
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\"\n\nprint(\"The code ran Correctly\")\n\na, b, c = map(int, input().split())\n"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == ''\nassert solution(\"2\") == '2'\nassert solution(\"9\") == '504'\nassert solution(\"8\") == '24'\nassert solution(\"9\") == '504'\n"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"504\"\nassert solution(\"1\") == \"1\"\nassert solution(\"8\") == \"504\"\nassert solution(\"9\") == \"504\"\nassert solution(\"10\") == \"504\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''9''') == '''504'''\nassert solution('''7''') == '''210'''\nassert solution('''7''') == '''210'''\nassert solution('''2''') == '''6'''\nassert solution('''1''') == '''1'''\n\nimport sys\nsys.setrecursionlimit(1_000_000)\n"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\"\n\"\"\"\nimport math"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\""
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\"\nprint('Test pass.')"
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 0 1 1\\n1 1 2 2\\n3 0 4 1\\n') == '1 1'\nassert solution('0 0 5 5\\n0 0 4 4\\n1 1 4 4\\n1 1 4 4\\n') == '1 1'\nassert solution('0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\\n') == '3 4'"
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0 1 1\\n1 1 2 2\") == \"1 1\"\nassert solution(\"3\\n0 0 1 1\\n0 1 1 2\") == \"1 1\"\nassert solution(\"3\\n0 0 1 1\\n0 1 1 2\") == \"1 1\"\nassert solution(\"4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\") == \"1 1\"\nassert solution(\"4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\") == \"1 1\"\n"
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\\n\") == '3 4'\nassert solution(\"4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\\n1 1 4 4\\n\") == '1 1'\nassert solution(\"3\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\\n\") == '1 1'\n"
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0 1 1\\n1 1 2 2\") == '1 1'\nassert solution(\"3\\n0 0 1 1\\n0 1 1 2\") == '1 1'\nassert solution(\"3\\n0 0 1 1\\n1 1 1 1\") == '0 0'\n"
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\") == \"1 1\"\nassert solution(\"3\\n0 0 1 1\\n0 1 1 2\\n1 0 2 1\") == \"1 1\"\nassert solution(\"4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\\n1 1 4 4\") == \"1 1\"\nassert solution(\"5\\n0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\") == \"3 4\"\n"
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 0 1 1\\n1 1 2 2\") == \"1 1\"\nassert solution(\"3\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\") == \"1 1\"\nassert solution(\"3\\n0 0 1 1\\n0 1 1 2\\n1 0 2 1\") == \"1 1\"\nassert solution(\"4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\\n1 1 4 4\") == \"1 1\"\nassert solution(\"5\\n0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\") == \"3 4\"\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\") == \"1 1\"\nassert solution(\"3\\n0 0 1 1\\n0 1 1 2\\n1 0 2 1\") == \"1 1\"\nassert solution(\"4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\\n1 1 4 4\") == \"1 1\"\nassert solution(\"5\\n0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\") == \"3 4\"\n\n\n\"\"\""
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'''\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n'''\n) == '1 1'\n\nassert solution(\n'''\n4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n'''\n) == '1 1'\n\nassert solution(\n'''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n'''\n) == '3 4'\n\nassert solution(\n'''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n'''\n) == '1 1'\n"
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n\"\"\") == \"1 1\"\nassert solution(\"\"\"\n3\n0 0 1 1\n0 1 1 2\n1 0 2 1\n\"\"\") == \"1 1\"\nassert solution(\"\"\"\n4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n\"\"\") == \"1 1\"\nassert solution(\"\"\"\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n\"\"\") == \"3 4\"\n\"\"\""
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0 1 1\\n1 1 2 2\") == \"1 1\"\nassert solution(\"3\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\") == \"1 1\"\nassert solution(\"4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\\n1 1 4 4\") == \"1 1\"\nassert solution(\"5\\n0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\") == \"3 4\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n18 55 16 17') == \"YES\"\nassert solution('6\\n40 41 43 44 44 44') == \"NO\"\nassert solution('8\\n5 972 3 4 1 4 970 971') == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n18 55 16 17\") == 'YES'\nassert solution(\"6\\n40 41 43 44 44 44\") == 'NO'\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == 'YES'\n"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n18 55 16 17') == \"YES\"\nassert solution('6\\n40 41 43 44 44 44') == \"NO\"\nassert solution('8\\n5 972 3 4 1 4 970 971') == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n18 55 16 17\") == \"YES\"\nassert solution(\"6\\n40 41 43 44 44 44\") == \"NO\"\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n18 55 16 17\") == \"YES\"\nassert solution(\"6\\n40 41 43 44 44 44\") == \"NO\"\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n18 55 16 17\") == 'YES'\nassert solution(\"6\\n40 41 43 44 44 44\") == 'NO'\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == 'YES'\n"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n18 55 16 17\") == \"YES\"\nassert solution(\"6\\n40 41 43 44 44 44\") == \"NO\"\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == \"YES\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n18 55 16 17\") == \"YES\"\nassert solution(\"6\\n40 41 43 44 44 44\") == \"NO\"\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n18 55 16 17\") == \"YES\"\nassert solution(\"6\\n40 41 43 44 44 44\") == \"NO\"\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == \"YES\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1 2 3 4 5''') == 'YES'\nassert solution('''6\n1 2 3 4 5 6''') == 'NO'\nassert solution('''4\n1 2 3 4''') == 'YES'\nassert solution('''4\n1 2 3 5''') == 'NO'\nassert solution('''8\n1 2 3 4 5 6 7 8''') == 'YES'\n"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 9\\n1 2 3\\n1 2 3 7 8 9 11 12 13\") == \"9\"\nassert solution(\"5 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"10\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n1 2 3 4 5\\n1 2 3 4 5\") == 10\nassert solution(\"3 9\\n1 2 3\\n1 2 3 7 8 9 11 12 13\") == 9\n"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5\\n1 2 3 4 5\\n1 2 3 4 5') == 10\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 9\\n1 2 3 4 5 6 7 8 9\\n1 2 3 4 5 6 7 8 9\") == \"10\"\nassert solution(\"7 9\\n1 2 3 4 5 6 7 8 9\\n1 2 3 4 5 6 7 8 10\") == \"9\"\nassert solution(\"7 9\\n1 2 3 4 5 6 7 8 9\\n1 2 3 4 5 6 8 9 10\") == \"9\"\nassert solution(\"7 9\\n1 2 3 4 5 6 7 8 9\\n1 2 3 4 5 6 8 10 9\") == \"8\"\nassert solution(\"7 9\\n1 2 3 4 5 6 7 8 9\\n1 2 3 4 5 6 8 10 11\") == \"9\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 9\\n1 2 3\\n1 2 3 7 8 9 11 12 13\") == \"9\"\nassert solution(\"5 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"10\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 9\\n1 2 3\\n1 2 3 7 8 9 11 12 13') == '9'\nassert solution('5 5\\n1 2 3 4 5\\n1 2 3 4 5') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 9\\n1 2 3\\n1 2 3 7 8 9 11 12 13\") == '9'\nassert solution(\"5 5\\n1 2 3 4 5\\n1 2 3 4 5\") == '10'\n\"\"\""
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 9\\n1 2 3\\n1 2 3 7 8 9 11 12 13\") == '9'\nassert solution(\"5 5\\n1 2 3 4 5\\n1 2 3 4 5\") == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8\\n2 1 3 5\\n2 1 4 7\") == \"4\"\nassert solution(\"2 7\\n2 1 4\\n2 1 2\") == \"2\"\nassert solution(\"6 6\\n2 1 4 5 6 6\\n2 1 3 5 7 8 9\") == \"8\"\n\nimport sys\nn, m = [int(x) for x in sys.stdin.readline().split()]\n\ny = []\nfor _ in range(n):\n    y += [int(x) for x in sys.stdin.readline().split()]\n\ny.sort()\n\ny2 = []\nfor _ in range(m):\n    y2 += [int(x) for x in sys.stdin.readline().split()]\n\ny2.sort()\n\nans = 0\n\nfor i in y2:\n    ans = max(ans, i - y.pop())\n\nprint(ans)\n"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 9\\n1 2 3\\n1 2 3 7 8 9 11 12 13\") == \"9\"\nassert solution(\"5 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"10\""
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"Petya\"\nassert solution(\"8\") == \"Petya\"\n\"\"\"\n\nn = int(input())\n\nvasya = []\npetya = []\n\nfor i in range(1, n + 1):\n    vasya.append(i)\n    petya.append(i)\n\nfor i in range(1, n):\n    for j in range(1, i + 1):\n        vasya[i] = max(vasya[i], j)\n\nfor i in range(1, n):\n    for j in range(1, i + 1):\n        petya[i] = max(petya[i], j)\n\nvasya = set(vasya)\npetya = set(petya)"
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(8) == \"Petya\"\n\nassert solution(1) == \"Vasya\"\n\nassert solution(2) == \"Petya\"\n\nassert solution(3) == \"Vasya\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"2\") == \"Petya\"\nassert solution(\"8\") == \"Petya\"\n\"\"\"\n\nfrom math import ceil, floor, log2, sqrt\n\nN = int(input())"
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n\"\"\"\n\nn = int(input())\n\nv = []\np = []\n\nfor i in range(1, n + 1):\n    v.append(i) if i not in v else v\n    p.append(i) if i not in p else p\n\nv = set(v)\np = set(p)"
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"2\") == \"Petya\"\nassert solution(\"8\") == \"Petya\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 'Petya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'"
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == \"Vasya\"\nassert solution('2') == \"Petya\"\nassert solution('8') == \"Petya\"\n\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2) == 'Petya'\nassert solution(8) == 'Petya'\n"
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"3 3 6\", \"1 2\", \"1 3\", \"2 2\", \"2 3\", \"3 1\", \"3 3\"]) == \"1\"\nassert solution([\"2 2 3\", \"1 2\", \"2 2\", \"2 1\", \"3 1\", \"3 3\"]) == \"0\"\nassert solution([\"2 2 3\", \"1 2\", \"1 3\", \"2 1\", \"3 1\", \"3 3\"]) == \"2\"\n"
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 3\\n1 2\\n2 2\\n2 1\") == \"0\"\nassert solution(\"4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\") == \"1\"\n\n\n\n---\n"
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 5 3\n1 2\n1 3\n2 2\n2 3''') == '0'\n\nassert solution('''1 5 3\n1 3\n1 1\n1 5''') == '2'\n\nassert solution('''4 3 6\n1 2\n1 3\n2 2\n2 3\n3 1\n3 3''') == '1'\n\n\"\"\""
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 3\\n1 2\\n2 2\\n2 1\") == \"0\"\nassert solution(\"4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\") == \"1\"\nassert solution(\"4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\\n1 1\\n1 5\") == \"2\""
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 1\\n1 2\\n2 1\\n2 2\\n1 2\\n2 2\") == \"0\"\nassert solution(\"4 5 2\\n2 2\\n1 2\\n2 1\\n3 1\\n3 3\") == \"2\"\nassert solution(\"4 5 6\\n2 2\\n1 2\\n2 1\\n3 1\\n3 3\") == \"1\"\nassert solution(\"4 3 2\\n2 2\\n1 2\\n2 1\\n3 1\\n3 3\") == \"2\"\nassert solution(\"4 3 2\\n2 2\\n1 2\\n2 1\\n3 1\\n3 3\\n1 2\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3') == '1'\n\nassert solution('4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3') == '2'\n\nassert solution('4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3') == '0'\n\nassert solution('4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3') == '1'\n\nassert solution('4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3') == '1'"
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1 1 1 1 1\"\nassert solution(\"3 3 4 4 5\") == \"0 1 1 1 1\"\nassert solution(\"2 2 3\") == \"0 1 1 1 1\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import product"
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\") == '1'\n\"\"\""
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n2 2\\n2 1\\n2 3\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 6\\n1 2\\n2 2\\n2 1\") == \"1\"\nassert solution(\"1 5 3\\n1 3\\n1 1\\n1 5\") == \"2\"\nassert solution(\"4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABAB\") == 2\n\"\"\"\n\nimport math\nimport sys\n\n_, _c_aa, _c_ab, _c_ba, _c_bb = [stdin.split() for stdin in sys.stdin.readlines()]"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(aoc_05_12_input) == 11994\n\"\"\"\n\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4ABAB\") == 2\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '4\n    A\n    B\n    B\n    A'\n) == '2'\n\"\"\"\n\nfrom itertools import accumulate\n\nN = int(stdin.readline().strip())"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4A1B2A3B\") == 5\n'''\n"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\nA\nB\nB\nA''') == 2\nassert solution('''5\nA\nB\nA\nB''') == 6\nassert solution('''7\nA\nB\nB\nA\nA\nB\nB''') == 15\nassert solution('''8\nA\nB\nA\nB\nB\nB\nA\nA''') == 21\nassert solution('''13\nA\nA\nA\nA\nB\nB\nB\nB\nA\nB\nA\nA\nB\nB\nB\nA''') == 252\n"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4A2B1A1B') == 2\n\n------Problem Description\n\nSnuke has a string, s, which is initially AB.\n\nLet |s| denote the length of s.\n\nSnuke can do the four kinds of operations below zero or more times in any order:\n\nChoose i such that 1 \\leq i < |s|, s_{i} = A, s_{i+1} = A and insert c_{\\mathrm{AA}} between the i-th and (i+1)-th characters of s.\n\nChoose i such that 1 \\leq i < |s|, s_{i} = A, s_{i+1} = B and insert c_{\\mathrm{AB}} between the i-th and (i+1)-th characters of s.\n\nChoose i such that 1 \\leq i < |s|, s_{i} = B, s_{i+1} = A and insert c_{\\mathrm{BA}} between the i-th and (i+1)-th characters of s.\n\nChoose i such that 1 \\leq i < |s|, s_{i} = B, s_{i+1} = B and insert c_{\\mathrm{BB}} between the i-th and (i+1)-th characters of s.\n\nFind the number, modulo (10^9+7), of strings that can be s when Snuke has done the operations so that the length of s becomes N.\n\n\n------Solution------"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A B B A') == 2\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4A\") == \"2\"\nassert solution(\"4B\") == \"2\"\n\"\"\""
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4A2B1A1') == 2\n\"\"\"\n\nimport sys\nimport math\nimport itertools\nfrom collections import deque"
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 4\") == \"2\"\nassert solution(\"3 4 6\") == \"3\"\nassert solution(\"4 4 4\") == \"1\"\nassert solution(\"5 5 5\") == \"1\"\nassert solution(\"5 5 2\") == \"2\"\n"
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3\n2 3 4\n''') == 2\n\nassert solution('''\n5\n2 3 4 6 7\n''') == 3\n"
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 3 4') == '2'\nassert solution('5\\n2 3 4 6 7') == '3'\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2 3 4') == '2'\nassert solution('5\\n2 3 4 6 7') == '3'\nassert solution('5\\n8 7 9 8 0') == '1'\nassert solution('5\\n8 7 9 8 1') == '2'\nassert solution('5\\n9 9 9 9 9') == '0'\n\n\"\"\"\n\n\nfrom math import gcd\n\nn = int(input())\narr = list(map(int, input().split()))\n"
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 3 4') == '2'\nassert solution('5\\n2 3 4 6 7') == '3'"
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3 4\") == 2\nassert solution(\"5\\n2 3 4 6 7\") == 3\n"
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 3 4') == '2'\nassert solution('5\\n2 3 4 6 7') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3 4\") == \"2\"\nassert solution(\"5\\n2 3 4 6 7\") == \"3\"\n"
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 2 4 1') == '2'\nassert solution('5\\n2 3 4 6 7') == '3'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 3 4') == '2'\nassert solution('5\\n2 3 4 6 7') == '3'\n\n\"\"\""
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABAAC\") == 11\nprint(solution(\"ABAAC\"))"
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABAAC') == 11\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\nn = int(stdin)\ns = stdin\n\nmodulo = 10 ** 9 + 7\n\n\"\"\"\nAns = 0\npossible_choices = set('ABC')\nfor i in range(1, n):\n    if s[i] not in possible_choices or s[i-1] == s[i]:\n        continue\n    else:\n        possible_choices.remove(s[i])\n        Ans += 1\n\nprint(Ans % modulo)\n\"\"\"\n\nans = 0\nseen = set()\nstack = []\nfor i, c in enumerate(s):\n    if stack and stack[-1] == c:\n        stack.pop()\n        ans += 1\n    else:\n        stack.append(c)\n        seen.add(c)\n\nprint(ans)\n"
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABAAC\") == 11\n\"\"\"\nimport math\n"
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABAAC') == 11\n\"\"\""
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABAAC\") == 11\nassert solution(\"CABABA\") == 9\n\"\"\""
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABAAC\") == 11\n\"\"\""
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABAAC') == 11\n\"\"\""
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(A) == \"2\"\nassert solution(B) == \"1\"\nassert solution(C) == \"0\"\nassert solution(D) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABAAC') == 11\nassert solution('ABCDBC') == 23\n\"\"\"\n\nfrom math import factorial as f\n"
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABAAC\") == 11\n\"\"\"\n\nimport sys\nimport itertools\n\nN = int(sys.stdin.readline().strip())\nS = sys.stdin.readline().strip()\n\ncount = 0\nfor i in itertools.combinations(S, 2):\n    if i[0]!= i[1] and i[0]!= S[i[1]] and i[1]!= S[i[0]]:\n        count += 1\n\nprint(count % (10 ** 9 + 7))\n"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n0 1\\n1 2\") == \"3\"\nassert solution(\"1 2\\n2 2\\n0 1\") == \"-1\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4 2\\n1 1\\n0 1\\n2 3\") == 3\nassert solution(\"1023\\n1 2\\n1 0\\n1 2\\n1 1\") == -1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2\\n1 0\\n1 2\\n1 1\") == \"3\"\nassert solution(\"1023\\n1 2\\n1 0\\n1 2\\n1 1\") == \"-\"\n\n\"\"\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2\\n1 1\\n0 1\\n2 3\") == \"3\"\nassert solution(\"1023\\n1 2\\n1 0\\n1 2\\n1 1\\n\") == \"-1\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5, [4, 2], [1, 1], [0, 1], [2, 3]) == 3\nassert solution(1023, [1, 2], [1, 0], [1, 2], [1, 1]) == -1\n\"\"\"\n\nfrom typing import List, Tuple\nimport math"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n4 2\\n1 1\\n0 1\\n2 3\") == \"3\"\nassert solution(\"1023\\n1 2\\n1 0\\n1 2\\n1 1\") == \"3\"\nassert solution(\"6\\n2 3\\n0 1\\n0 2\\n0 0\\n2 1\\n0 1\\n0 0\") == \"5\"\nassert solution(\"9\\n3 6\\n0 1\\n0 0\\n0 0\\n1 1\\n1 0\\n0 1\\n0 0\\n2 2\\n0 0\") == \"4\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 1 1 0 1 2 3\") == \"3\"\nassert solution(\"1023 1 2 1 0 1 2 3\") == \"-1\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n4 2\n1 1\n0 1\n2 3''') == '3'\nassert solution('''1023\n1 2\n1 0\n1 2\n1 1''') == '-1'\nassert solution('''5\n4 2\n1 1\n0 1\n2 3''') == '3'\nassert solution('''1023\n1 2\n1 0\n1 2\n1 1''') == '-1'\nassert solution('''5\n4 2\n1 1\n0 1\n2 3''') == '3'\n"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2\\n1 0\\n1 2\\n1 1') == 3\nassert solution('1023\\n1 2\\n1 0\\n1 2\\n1 1') == -1\n\n\"\"\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1\\n0 1\\n2 3\\n\") == \"3\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n4 5\") == \"2\"\n\nassert solution(\"4\\n1 2 3 4\") == \"2\"\n\nassert solution(\"5\\n1 2 3 4 5\") == \"0\"\n\nassert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\nassert solution(\"7\\n1 2 3 4 5 6 7\") == \"0\""
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n\") == \"2\"\n\"\"\"\n\nn = int(input())\nx = [int(i) for i in input().split()]\n\np = 3\nop = 0\nwhile p < max(x):\n    for i in x:\n        if i % p == 0:\n            op += 1\n        else:\n            op += 2\n    p += 1\nprint(op)\n"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n4 5\\n') == '2'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n\") == \"2\"\nassert solution(\"4 2\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n4 5\") == \"2\"\n\n\"\"\"\n\n\nfrom functools import lru_cache\nfrom math import gcd\nfrom itertools import accumulate, permutations\nfrom heapq import heappop, heappush, heappushpop\n"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\") == \"2\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n4 5\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n') == '2'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nx = [int(i) for i in sys.stdin.readline().split()]"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n4 5\") == \"2\"\nassert solution(\"4\\n1 2 3 4\") == \"2\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\\n0 1 0 1 2 3 2\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\\n0 1 0 1 2 3 2\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\\n0 1 0 1 2 3 2\"\nassert solution(\"1 2 3 4\") == \"NO\"\n\"\"\"\n\nimport sys\n\nfrom collections import deque\n"
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == 'YES\\n0 1 0 1 2 3 2'\nassert solution(\"1 2 2 1\") == 'NO'\nassert solution(\"2 2 2 3\") == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == \"NO\"\nassert solution('2 2 2 3') == \"NO\"\nassert solution('2 2 2 1') == \"NO\"\nassert solution('2 2 2 3') == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\\n0 1 0 1 2 3 2\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\\n0 1 0 1 2 3 2\"\n\"\"\"\n\na, b, c, d = list(map(int, input().split()))\n"
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 2 2 1''') == 'YES'\nassert solution('''2 2 2 3''') == 'NO'\nassert solution('''1 2 3 4''') == 'NO'\n\n\"\"\""
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 2 3\") == \"NO\"\nassert solution(\"1 1 2 3\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\\n0 1 0 1 2 3 2\"\nassert solution(\"1 2 3 4\") == \"NO\"\n\"\"\"\n\na, b, c, d = [int(n) for n in input().split()]\n"
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4\\n1 3 2 4\\n1 3 4 2') == 'YES'\nassert solution('4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3') == 'YES'\nassert solution('3 6\\n2 1 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n2 3 4 1 5 6\\n3 4 1 2 5 6') == 'NO'\nassert solution('2 3\\n1 3 2') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\\n1 3 2 4\\n1 3 4 2\\n\") == \"YES\"\nassert solution(\"4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n\") == \"NO\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n') == 'YES'\n\"\"\""
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4\\n1 3 2 4\\n1 3 4 2') == 'YES'\nassert solution('4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3') == 'NO'\n"
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3') == 'YES'\nassert solution('3 6\\n2 1 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5') == 'YES'\n\"\"\"\n\n\"\"\"\nimport numpy as np\n\nn, m = [int(i) for i in input().split()]\narr = np.array([[int(i) for i in input().split()] for j in range(n)])"
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4\\n1 3 2 4\\n1 3 4 2') == 'YES'\n\"\"\""
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n1 3 2 4\\n1 3 4 2\") == \"YES\"\nassert solution(\"4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4\\n1 3 2 4\\n1 3 4 2\") == \"YES\"\nassert solution(\"4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\") == \"NO\"\nassert solution(\"3 6\\n2 1 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n\") == \"YES\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"4 4\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3\"\"\") == \"YES\"\nassert solution(\"\"\"5 5\n3 2 4 5 1\n4 1 5 3 2\n1 4 2 5 3\n2 5 1 4 3\n3 4 2 1 5\"\"\") == \"YES\"\nassert solution(\"\"\"4 4\n2 1 3 4 5\n3 4 1 2 5\n4 5 2 3 1\n1 2 4 3 5\"\"\") == \"YES\"\n\nassert solution(\"\"\"6 6\n2 1 3 4 5 6\n1 2 4 3 5 6\n2 1 3 4 6 5\n4 3 2 1 5 6\n1 4 2 5 3 6\n3 4 2 1 6 5\"\"\") == \"NO\"\nassert solution(\"\"\"5 5\n5 4 3 2 1\n1 2 4 3 5\n4 1 2 3 5\n2 3 1 4 5\n3 4 1 2 5\"\"\") == \"YES\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\n1 3 2 4\\n1 3 4 2\") == \"YES\"\nassert solution(\"4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\") == \"NO\"\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\n\"\"\"\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\\n\") == '0'\nassert solution(\"1 2 1\\n\") == '666666672'\n\"\"\"\n\nimport math\nfrom typing import List\n\nfrom scipy.special import comb\n\nfrom utils import read_input_data, test_case_1, test_case_2\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 2 1\") == \"666666672\"\n\"\"\"\n\nfrom fractions import Fraction\nfrom functools import reduce\nfrom operator import mul\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '0.3333333333333333'\nassert solution('1 2 1') == '0.3333333333333333'\n\"\"\"\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 2 1\") == \"666666672\"\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom math import gcd\nfrom typing import List, Dict\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 1\\n') == '0'\nassert solution('1 2 1\\n') == '666666672'\n\"\"\""
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 1\\n') == '0'\nassert solution('1 2 1\\n') == '666666672'\n\"\"\"\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 1\\n') == '0'\nassert solution('1 2 1\\n') == '666666672'\nassert solution('2 1 1\\n') == '1/3'\nassert solution('3 1 1\\n') == '1/3'\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n7 2 3 1 5 6\") == \"5\"\n\"\"\"\nimport itertools\n\nn = int(input())\narr = list(map(int, input().split()))\n\nresult = 0\n\nfor perm in itertools.permutations(arr, len(arr)):\n    s = []\n    for i in range(len(perm) - 1):\n        s.append(perm[i + 1] - perm[i])\n    if all(x >= 0 for x in s):\n        result = max(result, max(s))\nprint(result)\n"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 4') == '4'\nassert solution('5\\n6 2 3 1 5') == '5'\nassert solution('7\\n7 2 3 1 5 6') == '5'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2 3 1 5 6\") == \"5\"\nassert solution(\"3 3 3 2 2 1\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2 3 1 5 6\") == 5\n\n\"\"\"\n"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6 3 2\") == \"3\"\nassert solution(\"7 2 3 1 5 6\") == \"5\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"3 3 4 4\") == \"2\"\nassert solution(\"3 3 4 5\") == \"1\"\n\n-----"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n7 2 3 1 5 6') == '5'\nassert solution('3\\n2 2 1') == '2'\n\"\"\"\nimport sys"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6 7 2 3 1') == '4'\nassert solution('7 2 3 1 5 6') == '4'\nassert solution('7 3 2 1 5 6') == '5'\nassert solution('5 6 7 2 3 1') == '4'\nassert solution('7 3 2 1 5 6') == '5'\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\nassert solution(\"6\\n1 2 3 1 5 6\") == \"5\"\nassert solution(\"7\\n7 2 3 1 5 6\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_cases[0]) == test_cases[1]\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\nprefix = [arr[0]]\nfor i in arr:\n    prefix.append(prefix[-1] + i)\n\nans = 1\n\nfor i in range(1, n):\n    for j in range(i):\n        if prefix[j] < prefix[i]:\n            ans = max(ans, i - j)\n            break\n\nprint(ans)\n"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 5 6\") == 5\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 1 1 8''') == '2'\nassert solution('''4 2 2 6''') == '3'\nassert solution('''3 7 4 6''') == '1'\n\"\"\""
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"1 1 1 8\"\n) == \"2\"\nassert solution(\n\"4 2 2 6\"\n) == \"3\"\nassert solution(\n\"3 7 4 6\"\n) == \"1\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'\n"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport re\nimport sys\nfrom functools import cmp_to_key\n\nDEBUG = False\n"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 8\") == 2\nassert solution(\"4 2 2 6\") == 3\nassert solution(\"3 7 4 6\") == 1\n"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\"\nassert solution(\"0 1 5\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2 5\") == \"2\"\nassert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"-10 10 5\") == \"-1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('0 -1 5') == '-1'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"2\"\nassert solution(\"-1 -1 5\") == \"0\"\nassert solution(\"3 4 3\") == \"1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 5\") == 2\n\"\"\"\n\nx, y, m = (int(i) for i in input().split())"
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"0 -1 5\") == \"4\"\nassert solution(\"-1 4 15\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\"\nassert solution(\"3 2 5\") == \"2\"\nassert solution(\"4 2 5\") == \"4\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 5\") == 2\nassert solution(\"-1 4 15\") == 4\n\"\"\"\n\nx, y, m = map(int, input().strip().split())\n"
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 5\\n') == '2'\nassert solution('0 -1 5\\n') == '-1'\nassert solution('0 0 5\\n') == '-1'\nassert solution('-1 4 15\\n') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 5\\n') == '2'\nassert solution('-1 4 15\\n') == '4'\nassert solution('0 -1 5\\n') == '-1'\n\"\"\""
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 2 3 4 3\") == \"2\"\nassert solution(\"6 1 2 2 3 3\") == \"0\"\nassert solution(\"6 2 1 2 3 4 3\") == \"2\"\n\n\"\"\"\n\nimport math\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 2 3 4 3') == 2\n\nassert solution('6 1 2 3 4 3') == 0\n\nassert solution('6 1 1 2 2 3 3') == 2\n"
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1\\n2 1 2 3 4 3\") == \"2\"\nassert solution(\"6 2\\n2 1 2 3 4 3\") == \"0\"\nassert solution(\"6 1\\n1 1 2 2 3 3\") == \"2\"\n\n\"\"\"\n\nn, I = list(map(int, input().split()))\na = list(map(int, input().split()))\n\n\nclass Solution:\n    def solution(self, n, I, a):\n        print(self.number_of_changes(n, I, a))\n\n    def number_of_changes(self, n, I, a):\n        if len(set(a)) == 1:\n            return 0\n        if I == len(a):\n            return 0\n\n        l, r = self.get_change_range(n, I, a)\n        return self.number_of_changes(n, I, a[:l] + a[r:]) + 1\n\n    def get_change_range(self, n, I, a):\n        a.sort()\n        count = 0\n        left, right = 0, len(a) - 1\n        while count < n:\n            if left < right:\n                if a[left] > a[right]:\n                    a[left], a[right] = a[right], a[left]\n                    count += 1\n            else:\n                if left == 0:\n                    a[0], a[right] = a[right], a[0]\n                    count += 1\n                elif a[left] >= a[0]:\n                    a[0], a[right] = a[right], a[0]\n                    count += 1\n                else:\n                    return left, right\n            left += 1\n            right -= 1\n        return left, right\n\n\nsolution(n, I, a)\n"
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 1\\n2 1 2 3 4 3') == '2'\nassert solution('6 2\\n2 1 2 3 4 3') == '0'\nassert solution('6 1\\n1 1 2 2 3 3') == '2'\n"
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 2 2 3 3') == '2'\nassert solution('1 1 2 2 3 3') == '0'\nassert solution('1 1 2 2 3 3') == '2'\nassert solution('1 1 2 2 3 3') == '0'\nassert solution('1 1 2 2 3 3') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 2 3 4 3\") == 2\nassert solution(\"6 1 2 3 4 3\") == 0\nassert solution(\"6 2 1 2 3 4 3\") == 2\n\n\nimport collections\nimport sys"
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 1\\n2 1 2 3 4 3') == '2'\nassert solution('6 2\\n2 1 2 3 4 3') == '0'\nassert solution('6 1\\n1 1 2 2 3 3') == '2'\n\"\"\""
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 1\\n2 1 2 3 4 3\") == '2'\nassert solution(\"6 2\\n1 1 2 2 3 3\") == '0'\n\n\"\"\""
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 1\\n2 1 2 3 4 3') == 2\nassert solution('6 2\\n2 1 2 3 4 3') == 0\nassert solution('6 1\\n1 1 2 2 3 3') == 2\nassert solution('6 1\\n2 1 2 3 4 3') == 2"
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 1\\n2 1 2 3 4 3\") == 2\nassert solution(\"6 2\\n2 1 2 3 4 3\") == 0\nassert solution(\"6 1\\n1 1 2 2 3 3\") == 2\n"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"wednesday\") == \"NO\"\nassert solution(\"thursday\") == \"NO\"\nassert solution(\"friday\") == \"NO\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"sunday\") == \"YES\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"sunday\") == \"YES\"\n\"\"\""
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"saturday\") == \"YES\"\nassert solution(\"sunday\") == \"NO\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('monday') == 'NO'\nassert solution('sunday') == 'YES'\nassert solution('saturday') == 'YES'\nassert solution('tuesday') == 'NO'"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"wednesday\") == \"YES\"\nassert solution(\"thursday\") == \"YES\"\nassert solution(\"friday\") == \"NO\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"wednesday\") == \"NO\"\nassert solution(\"thursday\") == \"YES\"\nassert solution(\"friday\") == \"NO\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"sunday\") == \"YES\"\nassert solution(\"saturday\") == \"YES\"\nassert solution(\"tuesday\") == \"YES\"\n\"\"\""
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('monday') == 'NO'\nassert solution('tuesday') == 'YES'\nassert solution('wednesday') == 'NO'\nassert solution('thursday') == 'NO'\nassert solution('friday') == 'YES'\n"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"monday\") == \"YES\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"wednesday\") == \"NO\"\nassert solution(\"thursday\") == \"YES\"\nassert solution(\"friday\") == \"NO\"\n"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"35\") == \"17\"\nassert solution(\"10000000000\") == \"91\"\n\nprint(solution(\"35\"))\nprint(solution(\"10000000000\"))\n"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"35\") == \"17\"\nassert solution(\"10000000000\") == \"91\"\n"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12') == '3'\nassert solution('121') == '4'\nassert solution('123') == '6'\nassert solution('1234') == '10'\nassert solution('12345') == '16'\n"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10000000000\") == \"91\"\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"17\") == \"17\"\nassert solution(\"8\") == \"8\"\nassert solution(\"9\") == \"9\"\nassert solution(\"100\") == \"99\"\nassert solution(\"1000000000\") == \"999999999\"\n\n\"\"\"\n"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u0435\u0448 \"\\\".\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    line = line.rstrip()\n    if line.endswith('\\\\'):\n        print(line)\n"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123') == 6\nassert solution('0') == 0\nassert solution('12345') == 15\nassert solution('10000000000') == 91\n"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'\n\"\"\"\n"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'\n\n\"\"\"\n\nimport math\n\nimport sys"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\n\nprint(solution(\"XO\"))\n"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'YES'\nassert solution('A') == 'YES'\nassert solution('ABC') == 'NO'\nassert solution('ABCD') == 'NO'\nassert solution('ABCDE') == 'NO'\n"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\nassert solution('CDDCB') == 'NO'\n"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\nassert solution('ABCDEFGHI JKLMNOPQRSTUVWXYZ') == 'YES'\nassert solution('A') == 'YES'\n"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\nprint('All cases passed')\n"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Z\") == \"NO\"\nassert solution(\"AHA\") == \"YES\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\"\n\nprint(solution(\"AHA\"))\nprint(solution(\"Z\"))\nprint(solution(\"XO\"))\n"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\n"
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5') == '0'\nassert solution('2 5') == '1'\nassert solution('3 5') == '1'\nassert solution('5 5') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 5\") == 1\nassert solution(\"3\\n1 5 2\") == 0\nassert solution(\"2\\n1 5\") == 0\nassert solution(\"2\\n5 1\") == 1\nassert solution(\"3\\n1 5 2\") == 1\n"
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n"
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 2 5 7 8\n''') == '2'\n\nassert solution('''\n4\n7 2 1 4\n''') == '1'\n\nassert solution('''\n4\n4 5 3 2\n''') == '1'\n"
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 5\") == \"0\""
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n2\n1 5\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n3\n1 2 5\n\"\"\"\n) == \"1\"\n\n\"\"\"\n\nThere is a queue of n people lined up, and each person has a certain strength with respect to some other person. For example, if A has strength 4 with B, that means A can lift 4kg with B.\n\nGiven this information, can you find the minimum number of people that need to be removed from the line so that the line is empty?\n\nInput\nThe first line of input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer n denoting the number of people in the line.\nThe next line contains n space-separated integers h_1, h_2,..., h_n where h_i is the strength of the ith person with respect to the ith person on the left of them.\nOutput\nFor each test case, print a single line containing one integer \u2014 the minimum number of people that need to be removed from the line so that the line is empty.\nConstraints\n1\u2264T\u226410\n1\u2264n\u226410\n1\u2264a_i\u226410\nSubtasks\nSubtask #1 (30 points): 1\u2264n\u2264100, 1\u2264a_i\u2264100\nSubtask #2 (70 points): original constraints\n\nSample Input\n2\n4\n1 3 4 2\n4\n2 1 3 4\nSample Output\n4\n0\nExplanation\nTest Case 1\n\nWe need to remove 2 people from the line. The strength of the people on the left of the 2nd person is 3, the strength of the people on the right of the 2nd person is 1, so the 2nd person can lift 2kg with the 1st person and the 4th person.\n\nTest Case 2\n\nThe strength of the people on the left of the 4th person is 2, and on the right of the 4th person is 1.\n\n\"\"\"\n"
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 5\") == \"0\"\n\nassert solution(\"3\\n1 2 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5') == '0'\nassert solution('2 10') == '1'\nassert solution('3 10') == '2'\nassert solution('4 10') == '2'\nassert solution('5 10') == '3'\n"
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 5\") == 0\nassert solution(\"3\\n1 2 5\") == 1\n"
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 5\") == 0\nassert solution(\"3\\n1 2 5\") == 1\n\"\"\"\n\n\"\"\"\n------SOLUTION------\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(RU) == \"Yes\", \"WA: 'RU'\"\nassert solution(D) == \"Yes\", \"WA: 'D'\"\nassert solution(LRRLU) == \"Yes\", \"WA: 'LRRLU'\"\nassert solution(UDU) == \"Yes\", \"WA: 'UDU'\"\nassert solution(RRUD) == \"Yes\", \"WA: 'RRUD'\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RU\") == \"Yes\"\nassert solution(\"RL\") == \"No\"\nassert solution(\"RRRRUU\") == \"No\"\nassert solution(\"LL\") == \"Yes\"\nassert solution
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(LRRLU) == 'Yes'\nassert solution(RU) == 'Yes'\nassert solution(D) == 'Yes'\nassert solution(RRDDD) == 'No'\nassert solution
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RU\") == \"Yes\"\nassert solution(\"D\") == \"Yes\"\nassert solution(\"RL\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RU') == 'Yes'\nassert solution('DR') == 'No'\n\"\"\""
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RU\") == \"Yes\"\nassert solution(\"URURDD\") == \"Yes\"\nassert solution(\"LDRRLRUULR\") == \"Yes\"\nassert solution(\"R\") == \"Yes\"\nassert solution(\"LDRRLRUULR\") == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(RU) == \"Yes\"\nassert solution(LRRLU) == \"Yes\"\nassert solution(D) == \"Yes\"\nassert solution(-1, 1000000000) == \"Yes\"\nassert solution(0, 0) == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('RU') == 'Yes'\nassert solution('LRRLU') == 'Yes'\nassert solution('UD') == 'No'\n\nimport collections\n\nclass Solution:\n    def check(self, a, b):\n        queue = collections.deque()\n        queue.append(0)\n        for c in a:\n            if c == 'U':\n                queue.append(queue[0] + 1)\n            elif c == 'D':\n                queue.append(queue[0] - 1)\n            elif c == 'L':\n                queue.append(queue[0] - 1)\n            elif c == 'R':\n                queue.append(queue[0] + 1)\n        \n        return queue[0] == b\n\nprint(Solution().check('RU', 2))\nprint(Solution().check('LRRLU', 2))\nprint(Solution().check('UD', 1))"
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RU\") == \"Yes\"\nassert solution(\"LRRLU\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RU') == 'Yes'\nassert solution('RUDUD') == 'Yes'\nassert solution('RUDU') == 'No'\nassert solution('LR') == 'Yes'\nassert solution('RUDRUD') == 'Yes'\n"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 3 7') == '1'\nassert solution('10  3  7') == '1'\nassert solution('314159265 358') == '0'\nassert solution('22 19 3') == '1'\nassert solution('60') == '1'"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 3 7') == '1'\nassert solution('10   3   7') == '1'\nassert solution('314159265358') == '0'\nassert solution('22 19 3') == '1'\nassert solution('60') == '1'\n\"\"\"\n\nimport sys\nimport ast"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314159 265358\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"60 \") == \"1\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('11 3 7') == '1'\nassert solution('314159 265 358') == '0'\nassert solution('22 19 3') == '1'\n\"\"\"\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314159265358\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"60   3   7\") == \"1\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314159265 358\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"60\") == \"1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 3 7\") == 1\nassert solution(\"10   3   7\") == 1\nassert solution(\"314159265358\") == 0\nassert solution(\"22 19 3\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 3 7\\n') == 1\nassert solution('10   3   7\\n') == 1\nassert solution('314159265 358\\n') == 0\nassert solution('22 19 3\\n') == 1\nassert solution('60\\n  29\\n  31\\n  \\n  \\n  \\n') == 1\n\"\"\""
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314 159 265 358\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"60\") == \"1\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314159 265358\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"60\") == \"1\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"9\"\n\"\"\""
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"9\"\n\"\"\""
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == 9\n"
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '9'\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '9'\n"
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '9'\nassert solution('3') == '8'\nassert solution('4') == '9'\nassert solution('5') == '8'\n"
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '9'\nassert solution('3') == '8'\nassert solution('4') == '8'\nassert solution('5') == '8'\n"
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == sys.stdout.read()\n\"\"\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 9\nprint(solution('1'))\n\n\"\"\""
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"9\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3 6 28 9') == '4'\nassert solution('5\\n5 12 9 16 48') == '3'\nassert solution('4\\n1 2 4 8') == '-1'\nassert solution('5\\n5 12 9 16 48') == '3'"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 6 28 9') == '4\\n1 2 4 8\\n', 'wrong result for input 4\\n3 6 28 9'\nassert solution('5\\n5 12 9 16 48') == '3\\n5 12 9\\n', 'wrong result for input 5\\n5 12 9 16 48'\nassert solution('4\\n1 2 4 8') == '-1\\n', 'wrong result for input 4\\n1 2 4 8'\nassert solution('5\\n1 2 3 4') == '-1\\n', 'wrong result for input 5\\n1 2 3 4'\nassert solution('4\\n1 2 4 8') == '-1\\n', 'wrong result for input 4\\n1 2 4 8'\n"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 6 28 9\") == \"4\"\nassert solution(\"5\\n5 12 9 16 48\") == \"3\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6 28 9\") == 4\nassert solution(\"5 12 9 16 48\") == 3\nassert solution(\"4 1 2 4 8\") == -1\n"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 4 8\") == \"4\"\nassert solution(\"5 12 9 16 48\") == \"3\"\nassert solution(\"5 9 3 6 8\") == \"4\"\nassert solution(\"1 2 4 8\") == \"4\"\nassert solution(\"1 2 3\") == \"2\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 6 28 9\") == 4\n\"\"\"\n\nfrom typing import List, Tuple\nimport sys"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 6 28 9') == '4\\n4\\n3'\nassert solution('5\\n5 12 9 16 48') == '5\\n3\\n-1'\nassert solution('4\\n1 2 4 8') == '-1'"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n6 28 9\n''') == '4'\nassert solution('''4\n1 2 4 8\n''') == '-1'\nassert solution('''5\n5 12 9 16 48\n''') == '3'\nassert solution('''4\n1 2 4 8\n''') == '-1'\nassert solution('''4\n5 12 9 16 48\n''') == '3'\n\n'''"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 6 28 9') == '4'\nassert solution('5\\n5 12 9 16 48') == '3'\nassert solution('4\\n1 2 4 8') == '-1'\nassert solution('5\\n5 12 9 16 48') == '3'"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3 6 28 9') == '4'\nassert solution('5\\n5 12 9 16 48') == '3'\nassert solution('4\\n1 2 4 8') == '-1'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 5 0 2 3\") == 2\nassert solution(\"7\\n1 0 0 5 0 0 2\") == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0 5 0 2 3\") == \"2\"\n\"\"\"\n\nimport sys\n\nsys.stdin = open(\"in/5\", \"r\")\n_ = sys.stdin.readline()\n\nlights = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 0 0 5 0 0 2') == 2\nassert solution('2 0 0 5 0 0') == 1\nassert solution('7 0 0 5 0 0 2') == 1\nassert solution('5 0 0 2 3') == 2\nassert solution('5 0 0 2 3 4') == 2\n"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n0 5 0 2 3') == '2'\nassert solution('7\\n1 0 0 5 0 0 2') == '1'\n"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n0 5 0 2 3\") == \"2\"\nassert solution(\"7\\n1 0 0 5 0 0 2\") == \"1\"\nassert solution(\"7\\n0 1 0 5 0 0 2\") == \"1\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 5 0 2 3\") == \"2\"\nassert solution(\"7\\n1 0 0 5 0 0 2\") == \"1\"\n\"\"\"\n\nimport unittest\nfrom collections import Counter\n"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n0 5 0 2 3\") == '2'\nassert solution(\"7\\n1 0 0 5 0 0 2\") == '1'\n\n'''"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n0 5 0 2 3') == 2\n\"\"\""
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n0 5 0 2 3') == 2\nassert solution('7\\n1 0 0 5 0 0 2') == 1\n"
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 5 0 2 3\") == 2\nassert solution(\"7\\n1 0 0 5 0 0 2\") == 1\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_cases[0]) == test_cases[1]\n"
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == 2\n"
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == 2\nassert solution(\"5\") == 5\n"
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == 2\nassert solution(\"5\") == 5\nassert solution(\"6\") == 5\nassert solution(\"7\") == 6\nassert solution(\"8\") == 6\n"
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == 2\n\n\"\"\"\n\nfrom math import gcd\nfrom itertools import combinations\n"
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == 2\nassert solution('5') == 5\n"
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == '5'\nassert solution('4') == '2'\nassert solution('7') == '7'\nassert solution('10') == '5'\nassert solution('14') == '7'\n"
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == 2\nassert solution('5') == 5\n\"\"\""
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '5'\n\"\"\"\nimport math\nimport time\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n') == 2\nassert solution('5\\n') == 5\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 2\\n1 3 4 5 2\\n5 3 2 1 4\") == \"18\\n3 4\\n1 5\\n\"\nassert solution(\"4 2 2\\n10 8 8 3\\n10 7 9 4\") == \"31\\n1 2\\n3 4\\n\"\nassert solution(\"5 3 1\\n5 2 5 1 7\\n6 3 1 6 3\") == \"23\\n1 3 5\\n4\\n\"\n\nprint(\"Successfully solved!\")\n\n\"\"\""
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 2\\n1 3 4 5 2\\n5 3 2 1 4\") == \"18\\n3 4\\n1 5\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 2\\n10 8 8\\n10 7 9\") == \"31\"\n"
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 2\\n1 3 4 5 2\\n5 3 2 1 4') == '18'\nassert solution('4 2 2\\n10 8 8 3\\n10 7 9 4') == '31'\n"
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 2\\n1 3 4 5 2\\n5 3 2 1 4\") == \"18\\n3 4\\n1 5\"\n"
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 2\\n1 3 4 5 2\\n5 3 2 1 4\") == \"18\"\nassert solution(\"4 2 2\\n10 8 8 3\\n10 7 9 4\") == \"31\"\nassert solution(\"5 3 1\\n5 2 5 1 7\\n6 3 1 6 3\") == \"23\"\n\n\"\"\"\n\n\n\"\"\"\nThis is a simple example with a greedy algorithm.\n\n\"\"\""
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 2\\n1 3 4 5 2\\n5 3 2 1 4\") == \"18\\n3 4\\n1 5\\n\"\n\n\"\"\""
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 2\\n1 3 4 5 2\\n5 3 2 1 4\") == \"18\"\nassert solution(\"4 2 2\\n10 8 8 3\\n10 7 9 4\") == \"31\"\n\"\"\"\n\nn, p, s = [int(s) for s in input().split()]\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nsum_p = sum(a)\nsum_s = sum(b)\n\nmin_sum = min(sum_p, sum_s)"
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 2\\n1 3 4 5 2\\n5 3 2 1 4\") == \"18\"\nassert solution(\"4 2 2\\n10 8 8 3\\n10 7 9 4\") == \"31\"\nassert solution(\"5 3 1\\n5 2 5 1 7\\n6 3 1 6 3\") == \"23\"\n\n\"\"\"\n\nfrom collections import Counter, deque, defaultdict\nfrom typing import Dict, List\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n\n\nclass Teams:\n    def __init__(self, n, p, s):\n        self.n = n\n        self.p = p\n        self.s = s\n\n        self.a = Counter(map(int, input().split()))\n        self.b = Counter(map(int, input().split()))\n\n    def dfs(self, c):\n        if not self.s and not self.p:\n            return self.a[0] + self.b[0]\n        if self.p and self.s:\n            return max(self.dfs(c + 1), self.dfs(c + 1) + self.a[0] + self.b[0])\n        if self.p:\n            return self.dfs(c + 1) + self.a[0]\n        if self.s:\n            return self.dfs(c + 1) + self.b[0]\n\n    def run(self):\n        return max(self.dfs(0), self.dfs(0) + self.a[0] + self.b[0])\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcd') == 'aa'\nassert solution('abcb') == 'bb'\nassert solution('abcca') == 'cc'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n1 2') == 'Yes\\naa'\nassert solution('4 3\\n1 2\\n1 3\\n1 4') == 'No'\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n1 3\\n1 4\\n2 4\") == \"Yes\\naba\"\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_data) == test_result\nprint(\"Success!\")\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abc\") == \"aa\"\nassert solution(\"aac\") == \"ac\"\nassert solution(\"bcb\") == \"cc\"\nassert solution(\"bac\") == \"ba\"\n\nassert solution(\"bcc\") == \"cc\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aa\") == \"aa\"\nassert solution(\"aa\", \"ab\") == \"ab\"\nassert solution(\"aa\", \"ab\", \"bc\") == \"bc\"\nassert solution(\"aa\", \"ab\", \"bc\", \"cb\") == \"cb\"\nassert solution(\"aa\", \"ab\", \"bc\", \"cb\", \"cc\") == \"cc\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n2 3\") == \"No\"\nassert solution(\"1 2\\n2 2\\n3 3\") == \"No\"\nassert solution(\"1 2\\n2 3\\n2 4\\n3 4\") == \"No\"\nassert solution(\"1 2\\n1 3\\n1 4\\n2 4\") == \"Yes\"\nassert solution(\"1 2\\n1 3\\n1 4\\n2 3\") == \"Yes\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"aa\"\nassert solution(\"bc\") == \"bb\"\nassert solution(\"ca\") == \"cc\"\nassert solution(\"aa\") == \"ab\"\nassert solution(\"cc\") == \"ba\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 2\") == \"Yes\\naa\\n\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\") == \"No\\n\"\nassert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n1 2\\n1 3\\n1 4\\n1 2\\n1 3\\n1 4\") == \"Yes\\naa\\n\"\nassert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n1 2\\n1 3\\n1 4\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n2 3\\n2 4\\n3 4\") == \"Yes\\naa\\n\"\nassert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n1 2\\n1 3\\n1 4\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n2 3\\n2 4\\n3 4\") == \"Yes\\naa\\n\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == \"No\"\nassert solution(\"aa\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"ccd\") == \"No\"\nassert solution(\"ccc\") == \"Yes\"\n"
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\\n3\") == \"7\"\nassert solution(\"0 2 2\\n1 0 100\\n1 2 0\\n3\") == \"19\"\nassert solution(\"0 2 1\\n1 0 100\\n1 2 0\\n5\") == \"87\"\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\\n3\") == \"7\"\nassert solution(\"0 2 2\\n1 0 100\\n1 2 0\\n3\") == \"19\""
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\\n3\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\\n3\") == '7'\nassert solution(\"0 2 2\\n1 0 100\\n1 2 0\\n3\") == '19'\n\"\"\"\n\nimport unittest\nfrom collections import deque\n"
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\\n3\") == '7'\nassert solution(\"0 2 2\\n1 0 100\\n1 2 0\\n3\") == '19'\n\"\"\"\nimport heapq"
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 1 1\\n1 0 1\\n1 1 0\\n3') == 7\n\nassert solution('0 2 2\\n1 0 100\\n1 2 0\\n3') == 19\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\\n3\\n\") == \"7\"\nassert solution(\"0 2 2\\n1 0 100\\n1 2 0\\n3\\n\") == \"19\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''0 1 1\n1 0 1\n1 1 0\n3''') == '7'\nassert solution('''0 2 2\n1 0 100\n1 2 0\n5''') == '19'"
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\\n3\\n\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Bulbbasaur\") == 1\nassert solution(\"F\") == 0\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == 2\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"F\") == 0\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == 2\n\"\"\"\n\nstdin = 'Bulbbasaur'\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Bulbbasaur\") == 1\nassert solution(\"F\") == 0\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == 2\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"F\") == 0\nassert solution(\"bBdulbasaurrgndgbualdBdsagaurrgndbb\") == 2\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == 2\nassert solution(\"B\") == 1\nassert solution(\"BB\") == 2\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('F') == 0\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == 2\n\"\"\""
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"F\") == 0\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == 2\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Bulbbasaur\") == \"1\"\nassert solution(\"F\") == \"0\"\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Bulbbasaur\") == 1\nassert solution(\"F\") == 0\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == 2\n\n\"\"\""
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"F\") == 0\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == 2\n\"\"\""
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\narc\\nrac\") == 'YES'\n\n\"\"\"\n\n\nimport collections\nimport sys\n"
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\narc\\rac\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\narc\\rac\") == \"YES\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\narc\\nrac\\n') == 'YES'\nassert solution('3 3\\narc\\nrac\\n') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2\\n3 4') == 'YES'\nassert solution('2 3\\n3 4') == 'NO'\nassert solution('1 2\\n3 3') == 'NO'\nassert solution('1 1\\na b') == 'YES'\nassert solution('1 2\\n3 4\\n4 3') == 'YES'\n"
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\narc\\nrac\") == \"YES\"\n\"\"\""
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\narc\\nrac\\n\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\na\\rc\\n') == 'YES'\nassert solution('2 3\\nab\\rcd\\n') == 'NO'\nassert solution('2 3\\na\\rc\\nb\\rd\\n') == 'YES'\nassert solution('2 3\\na\\rc\\nb\\rd\\nc\\re\\n') == 'NO'\n\"\"\"\nimport re"
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\narc\\nrac\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\narc\\nrac\") == 'YES'\nassert solution(\"3 3\\nccd\\nccd\\nccd\") == 'NO'\nassert solution(\"1 1\\nabc\") == 'YES'\nassert solution(\"1 1\\nba\") == 'NO'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 111\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 111\\n1111\\n10111\\n10010\") == 4\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 111\\n1111\\n10111\\n10010') == '4'\n"
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 111\n1111\n10111\n10010''') == '4'\n\n-------------------\n\n'''\n\nNot Available:\n    - 2-bits/3-bits gates\n    - One-bit gates\n    - Multiple 2-bits gates\n\n'''"
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 111\") == 4\n\n------Solution------\n\"\"\""
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 111\\n1111\\n10111\\n10010\") == 4\nassert solution(\"3 111\\n1111\\n10111\\n10010\") == 4\nassert solution(\"3 111\\n1111\\n10111\\n10010\") == 4\n"
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 111\\n1111\\n10111\\n10010\") == 4\n"
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"3 111\"\n) == 4\n\"\"\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 111\") == 4\n\"\"\"\n\nfrom typing import Callable\nfrom functools import reduce\nfrom operator import xor\n\nMod = 998244353"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11 11 5') == '1'\n\nassert solution('11 2 3') == '-1'\nassert solution('11 2 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 11 5') == 1\n\"\"\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(11 11 5) == 1\nassert solution(11 2 3) == -1\nassert solution(11 2 5) == 2\nassert solution(11 1 5) == 2\nassert solution(11 1 1) == 1\n"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '-1'\nassert solution('11 1 3') == '-1'\nassert solution('11 5 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 2 3') == '-1'\nassert solution('11 11 5') == '1'\nassert solution('1 2 3') == '-1'\nassert solution('10 11 5') == '2'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\"\n\"\"\"\n\nimport sys\n\nk, a, b = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 0 5\") == -1\nassert solution(\"1 1 1\") == -1\nassert solution(\"9 5 4\") == 3\nassert solution(\"1 1 0\") == 1\n"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\"\n\"\"\""
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 11 5\") == 1\nassert solution(\"11 2 3\") == -1\nassert solution(\"8 19 6\") == 0\nassert solution(\"4 3 4\") == 0\nassert solution(\"7 0 3\") == 0\n"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 5\") == '1'\nassert solution(\"11 2 3\") == '-1'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == 'YES'\nassert solution(\"jinotega\") == 'NO'\n"
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'\n\"\"\""
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\"\nassert solution(\"aabcac\") == \"YES\"\nassert solution(\"abbccc\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\njinotega\n''') == 'NO'\nassert solution('''\nabacaba\n''') == 'YES'\n\n\"\"\""
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'\n"
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\"\n\"\"\""
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc def gh ij kl mn opq rst uv wx yz\") == \"YES\"\n\"\"\""
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n\"\"\"\n\nk, d, t = map(int, input().split())\n"
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\nassert solution('2 1 1') == '1.5'\n\n\"\"\""
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3, 2, 6) == 6.5\nassert solution(4, 2, 20) == 20\n\n\"\"\""
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 20\") == \"20.0\"\nassert solution(\"1 0 2\") == \"3.0\"\nassert solution(\"2 2 10\") == \"0.5\"\nassert solution(\"2 10 5\") == \"1.6666666666666667\"\nassert solution(\"1 1 1\") == \"0.0\"\n\"\"\"\n"
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\""
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n"
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\""
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 6\") == 6.5\nassert solution(\"4 2 20\") == 20.0\n"
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3, 2, 6) == 6.5\nassert solution(4, 2, 20) == 20.0\n\"\"\"\nimport math\nk, d, t = [int(i) for i in input().split()]"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 4') == '1'\nassert solution('3 4') == '2'\n\"\"\""
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"3 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n..\\n..') == '2'\nassert solution('4 4\\n....\\n#.#.\\n....\\n.#..\\n') == '1'\nassert solution('3 4\\n....\\n.##\\n....\\n') == '2'\n"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n..\\n..\") == 2\nassert solution(\"4 4\\n....\\n#.#.\\n....\\n.#..\") == 1\nassert solution(\"3 4\\n....\\n.##\\n....\\n\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n....\\n.#.#\\n....\\n.#..\\n\") == \"1\"\nassert solution(\"3 4\\n....\\n.##\\n....\\n\") == \"2\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n...\\n#.#\\n....\\n.#..\") == \"2\"\nassert solution(\"2 2\\n.\\n..\") == \"0\"\nassert solution(\"3 4\\n....\\n#.#\\n....\") == \"1\"\nassert solution(\"4 4\\n....\\n#.#\\n....\\n....\") == \"3\"\n\n\"\"\"\n\nimport sys\n\nN, M = [int(i) for i in sys.stdin.readline().split()]\nmatrix = []\nfor i in range(N):\n    matrix.append(sys.stdin.readline().strip())"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n..\\n..\\n\") == '2'\nassert solution(\"4 4\\n....\\n#.#.\\n....\\n.#..\\n\") == '1'\nassert solution(\"3 4\\n....\\n.##\\n....\\n\") == '2'\n"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"3 4\") == \"2\"\n\n\n---\n\nSome of us love treasures, right? That's why young Vasya is heading for a Treasure Island.\n\nTreasure Island may be represented as a rectangular table $n \\times m$ which is surrounded by the ocean. Let us number rows of the field with consecutive integers from $1$ to $n$ from top to bottom and columns with consecutive integers from $1$ to $m$ from left to right. Denote the cell in $r$-th row and $c$-th column as $(r, c)$. Some of the island cells contain impassable forests, and some cells are free and passable. Treasure is hidden in cell $(n, m)$.\n\nVasya got off the ship in cell $(1, 1)$. Now he wants to reach the treasure. He is hurrying up, so he can move only from cell to the cell in next row (downwards) or next column (rightwards), i.e. from cell $(x, y)$ he can move only to cells $(x+1, y)$ and $(x, y+1)$. Of course Vasya can't move through cells with impassable forests.\n\nEvil Witch is aware of Vasya's journey and she is going to prevent him from reaching the treasure. Before Vasya's first move she is able to grow using her evil magic impassable forests in previously free cells. Witch is able to grow a forest in any number of any free cells except cells $(1, 1)$ where Vasya got off his ship and $(n, m)$ where the treasure is hidden.\n\nHelp Evil Witch by finding out the minimum number of cells she has to turn into impassable forests so that Vasya is no longer able to reach the treasure.\n\n\n-----Input-----\n\nFirst line of input contains two positive integers $n$, $m$ ($3 \\le n \\cdot m \\le 1\\,000\\,000$), sizes of the island.\n\nFollowing $n$ lines contains strings $s_i$ of length $m$ describing the island, $j$-th character of string $s_i$ equals \"#\" if cell $(i, j)$ contains an impassable forest and \".\" if the cell is free and passable. Let us remind you that Vasya gets of his ship at the cell $(1, 1)$, i.e. the first cell of the first row, and he wants to reach cell $(n, m)$, i.e. the last cell of the last row.\n\nIt's guaranteed, that cells $(1, 1)$ and $(n, m)$ are empty.\n\n\n-----Output-----\n\nPrint the only integer $k$, which is the minimum number of cells Evil Witch has to turn into impassable forest in order to prevent Vasya from reaching the treasure.\n\n\n-----Examples-----\nInput\n2 2\n..\n..\n\nOutput\n2\n\nInput\n4 4\n....\n"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('.#.\\n...\\n.#.') == 2\nassert solution('...\\n....\\n...#') == 1\n\"\"\""
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 3') == '6'\nassert solution('1 2 2') == '1'\nassert solution('2 3 2') == '6'\nassert solution('2 2 2') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1 3\") == 6\n\n\"\"\"\n\nfrom functools import reduce\nfrom operator import mul\nfrom itertools import product"
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"13\"\nassert solution(\"1 1 3\") == \"6\"\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1 3') == '6'\n\"\"\"\n\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 3\") == 6\nassert solution(\"3 3 3\") == 1\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 1 1\") == 4\n\"\"\"\n\nimport sys\n\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, N: int):\n        self.graph = defaultdict(list)\n        self.N = N\n\n    def addEdge(self, src: int, dst: int):\n        self.graph[src].append(dst)\n        self.graph[dst].append(src)\n\n    def removeEdge(self, src: int, dst: int):\n        self.graph[src].remove(dst)\n        self.graph[dst].remove(src)\n\n    def printGraph(self):\n        for i in range(self.N):\n            for j in self.graph[i]:\n                print(i, \"->\", j)\n\n    def dfs(self, src: int, dst: int, visited: []) -> bool:\n        if src == dst:\n            return True\n        for i in self.graph[src]:\n            if i not in visited:\n                visited.append(i)\n                if self.dfs(i, dst, visited):\n                    return True\n        return False\n\n    def checkPart(self, src: int, dst: int, visited: []) -> bool:\n        if src == dst:\n            return True\n        if src in visited:\n            return False\n        visited.append(src)\n        for i in self.graph[src]:\n            if i not in visited:\n                if self.checkPart(i, dst, visited):\n                    return True\n        return False\n\n    def countComponents(self) -> int:\n        count = 0\n        visited = []\n        for i in range(self.N):\n            if i not in visited:\n                count += 1\n                self.dfs(i, i, visited)\n        return count\n\n    def countParts(self, src: int, dst: int, visited: []) -> int:\n        if src == dst:\n            return 0\n        visited.append(src)\n        count = 0\n        for i in self.graph[src]:\n            if i not in visited:\n                count += 1 + self.countParts(i, dst, visited)\n        return count"
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2\") == \"9\"\nassert solution(\"2 2 3\") == \"0\"\nassert solution(\"4 4 3\") == \"1\"\nassert solution(\"2 1 2\") == \"0\"\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 3\") == \"6\"\n\"\"\""
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 3\") == \"6\"\n\"\"\""
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1 3\") == 6\n\"\"\"\n\nfrom math import factorial\nfrom sys import stdin\n"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 4 3 7 5\") == \"11\\n3\"\nassert solution(\"3\\n3 5 7\") == \"9\\n2\"\nassert solution(\"5\\n1 1 1 1 1\") == \"8\\n0\"\nassert solution(\"1\\n1\") == \"2\\n0\"\nassert solution(\"3\\n2 1 1\") == \"6\\n1\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 4 3 7 5') == '11\\n3\\n1\\n4\\n2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 4 3 7 5\") == \"11\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 4 3 7 5') == '11\\n3'\n"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n4 3 7 5') == '11\\n3\\n1\\n4\\n2'\n\"\"\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 4 3 7 5\") == \"11\\n3\\n1\\n4\\n2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 4 3 7 5\") == \"11\\n3\\n1\\n4\\n2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 4 3 7 5\") == \"11\\n3\\n1\\n4\\n2\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 4 3 7 5') == '11\\n3'\n\n-----\n- The maximum possible value of the final element in the sequence is sum(nums) - min(nums) + 1.\n- The minimum possible value is 0."
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 3 7 5\") == \"11\"\n\n\"\"\""
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n9.2\") == \"9.2\"\nassert solution(\"1 100\\n9.2\") == \"9.2\"\nassert solution(\"2 1\\n10.245\") == \"10.25\"\nassert solution(\"1 100\\n10.245\") == \"10.25\"\n\"\"\""
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1\\n10.245\") == \"10.25\"\nassert solution(\"6 2\\n10.245\") == \"10.3\"\nassert solution(\"3 100\\n9.2\") == \"9.2\"\n\"\"\"\n\nfrom math import ceil, floor"
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1\\n10.245\") == \"10.25\"\nassert solution(\"6 2\\n10.245\") == \"10.3\"\nassert solution(\"3 100\\n9.2\") == \"9.2\"\nassert solution(\"6 1\\n10.245\") == \"10.25\"\nassert solution(\"6 2\\n10.245\") == \"10.3\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n0.2') == '0.5'\nassert solution('3 100\\n9.2') == '9.2'\nassert solution('6 1\\n10.245') == '10.25'\nassert solution('6 2\\n10.245') == '10.3'\nassert solution('6 3\\n9.2') == '9.2'\n"
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 1\\n10.245') == '10.25'\nassert solution('6 2\\n10.245') == '10.3'\nassert solution('3 100\\n9.2') == '9.2'\n"
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 1\\n10.245') == '10.25'\nassert solution('6 2\\n10.245') == '10.3'\nassert solution('3 100\\n9.2') == '9.2'\n\n\"\"\"\n\nn, t = map(int, input().split())\nx = input()"
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 1\\n10.245') == '10.25'\nassert solution('6 2\\n10.245') == '10.3'\nassert solution('3 100\\n9.2') == '9.2'\n\nprint('The local tests are done. Try Solution II online.')\n\n\"\"\""
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 1\\n10.245\") == \"10.25\"\nassert solution(\"6 2\\n10.245\") == \"10.3\"\nassert solution(\"3 100\\n9.2\") == \"9.2\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1\\n10.245\") == \"10.25\"\nassert solution(\"6 2\\n10.245\") == \"10.3\"\nassert solution(\"3 100\\n9.2\") == \"9.2\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10\") == \"10.0\"\nassert solution(\"10 1\") == \"10.0\"\nassert solution(\"10 0\") == \"10.0\"\nassert solution(\"0 10\") == \"0.0\"\nassert solution(\"0 1\") == \"0.0\"\n\"\"\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"1 2 2 1\") == \"0110\"\nassert solution(\"1 2 2 1\") == \"Impossible\"\nassert solution(\"1 2 2 3\") == \"0110\"\nassert solution(\"1 2 1 1\") == \"Impossible\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"1 2 2 1\") == \"0110\"\nassert solution(\"1 2 3 1\") == \"0101\"\nassert solution(\"1 2 3 2\") == \"0111\"\nassert solution(\"1 2 3 4\") == \"0110\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"0 1 2 3\") == \"0110\"\nassert solution(\"1 2 2 1\") == \"0110\"\nassert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"0 1 2 3\") == \"0110\"\n\"\"\"\n\nfrom math import factorial\n\na = list(map(int, input().split()))"
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"1 2 2 1\") == \"0110\"\n\"\"\""
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"1 2 2 1\") == \"0110\"\n\"\"\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"1 2 1 1\") == \"0110\"\nassert solution(\"0 0 0 0\") == \"Impossible\"\nassert solution(\"2 1 2 0\") == \"0110\"\nassert solution(\"0 1 0 0\") == \"0110\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 1 0 1\") == \"0110\"\nassert solution(\"1 0 0 1\") == \"0110\"\nassert solution(\"0 0 0 0\") == \"Impossible\"\n\nprint(\"Successfully tested.\")\n\"\"\""
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"0 0 0 0\") == \"0110\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0110111') == 'Impossible'\n\"\"\"\n\na = tuple(map(int, input().split()))\nb = [a[0], a[1], a[0] + a[2], a[1] + a[3]]\n"
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n.*PP.*P.*\") == \"3\"\nassert solution(\"10\\n.**PP.*P.*\") == \"2\"\n"
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".**PP.*P.*\") == 2\nassert solution(\"*..PP.*P.*\") == 3\n\"\"\"\nfrom typing import Callable, List\nimport sys\n\n\nclass Packman:\n    def __init__(self, pos: int) -> None:\n        self.pos = pos\n\n    def move(self, direction: str) -> int:\n        return {\n            'L': self.pos - 1,\n            'R': self.pos + 1,\n            'U': self.pos - 8,\n            'D': self.pos + 8\n        }.get(direction, self.pos)\n\n    def eat(self, cell_type: str) -> int:\n        return {\n            'P': -1,\n            '*': 1\n        }.get(cell_type, 0)\n"
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3*.*\\n.*P*P*\") == \"3\"\nassert solution(\"3*.*\\n.*P*P*\") == \"3\"\nassert solution(\"3*.*\\n.*P*P*\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n.*..P*P*\") == \"3\"\nassert solution(\"10\\n.**PP.*P.*\") == \"2\"\nassert solution(\"5\\n.****.\\nP.**.\\n.**P.\\nP.*P.\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('.**PP.*P.*') == '2'\nassert solution('..P**P*P.*') == '3'\n\"\"\"\n\nimport itertools\nimport re"
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n.*P*P*') == '3'\nassert solution('10\\n.**PP.*P.*') == '2'\n\n\n\n\"\"\""
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n.*P*P*') == '3'\nassert solution('10\\n.**PP.*P.*') == '2'\n\n\nimport sys\nfrom collections import deque\n\nclass Solution:\n    def __init__(self):\n        self.main()\n\n    def solve(self, stdin: str) -> str:\n        pass\n\n    def main(self):\n        stdin = sys.stdin.readline().strip()\n        result = self.solve(stdin)\n        print(result)\n\nSolution()\n"
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".**PP.*P.*\") == \"2\"\nassert solution(\"**.P.**P.*\") == \"4\"\nassert solution(\"*.*P.*P.*\") == \"2\"\n\"\"\""
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n.*P.*P.*\") == \"3\"\nassert solution(\"10\\n.**PP.*P.*\") == \"2\"\n"
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n.*P.*P.*\") == \"3\"\nassert solution(\"10\\n.**PP.*P.*\") == \"2\"\nassert solution(\"20\\n*P*PP.*P*P.*P.*P.*P.*P.*P.*P.*P.*P.*\") == \"17\"\nassert solution(\"40\\n*P*P.*P*P.*P*P.*P.*P.*P.*P.*P.*P.*P.*P.*P.*P.*\") == \"22\"\nassert solution(\"20\\n.**PP.*P.*\") == \"2\"\n"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"8\"\nassert solution(\"3\") == \"16\"\n"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"8\"\nassert solution(\"3\") == \"16\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == 4\nassert solution('2') == 8\nassert solution('3') == 16\n"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n4\\n4\\n4\") == \"1\"\nassert solution(\"4\\n2\\n2\\n2\") == \"2\"\nassert solution(\"2\\n1\\n1\\n1\") == \"1\"\nassert solution(\"2\\n2\\n2\\n2\") == \"2\"\nassert solution(\"1\\n2\\n2\\n2\") == \"0\"\n\n\"\"\"\n\nimport itertools\nfrom math import factorial\n"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '4'\nassert solution('8') == '8'\nassert solution('16') == '16'\nprint('Test passed')\n"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\n"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"8\"\n\nassert solution(\"4\") == \"16\"\nassert solution(\"5\") == \"32\"\n"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\nprint('All tests passed.')\n"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 1 2') == '1 3'\nassert solution('5 5 1 2') == '1 4'\nassert solution('10 10 5 5 1') == '1 4'\n\"\"\""
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 9 5 5 2 1\") == \"1 3 9 7\"\nassert solution(\"100 100 52 50 46 56\") == \"17 8 86 92\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 9 5 5 2 1\") == \"1 3 9 7\"\nassert solution(\"100 100 52 50 46 56\") == \"17 8 86 92\"\n\"\"\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''9 9 5 5 2 1\n''') == '1 3 9 7'\nassert solution('''100 100 52 50 46 56\n''') == '17 8 86 92'\n\"\"\"\n\nfrom collections import deque\nimport math"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9 9 5 5 2 1') == '1 3 9 7'\nassert solution('100 100 52 50 46 56') == '17 8 86 92'\n\"\"\"\n\nimport sys\n\nn, m, x, y, a, b = [int(s) for s in sys.stdin.readline().split()]\n\ns = set()\n\nfor i in range(m):\n    a, b = [int(s) for s in sys.stdin.readline().split()]\n    for j in range(a, b + 1):\n        s.add(j)\n\nimport bisect\n\ns.sort()\n\nans = 0\nfor k in range(bisect.bisect_left(s, x), bisect.bisect_right(s, y)):\n    s_left = s[k]\n    s_right = s[k + 1]\n    if (s_right - x) / (s_right - s_left) == a / b:\n        ans = max(ans, s_left, s_right)\n\nprint(ans, ans + 1, ans + 2, ans + 3)\n"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 9 5 5 2 1\") == \"1 3 9 7\"\n\"\"\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 9 5 5 2 1') == '1 3 9 7'\nassert solution('100 100 52 50 46 56') == '17 8 86 92'\n"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 9 5 5 2 1\") == \"1 3 9 7\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9 9 5 5 2 1') == '1 3 9 7'\nassert solution('100 100 52 50 46 56') == '17 8 86 92'\n"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8 3 2 1') == '1 3 9 7'\n\n\"\"\"\n\nn, m, x, y, a, b = map(int, stdin.split())\nn, m, x, y, a, b = n, m, x, y, a, b\n\nm = min(n, m)\nx = min(n, x)\ny = min(m, y)\n\na = max(1, a)\nb = max(1, b)"
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"FFTFFF\") == \"Yes\"\nassert solution(\"FFFTFF\") == \"No\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"FFTT\") == \"Yes\"\nassert solution(\"FFFFT\") == \"Yes\"\nassert solution(\"FFFTT\") == \"Yes\"\nassert solution(\"FFFTT\") == \"No\"\nassert solution(\"TTFFT\") == \"Yes\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"FFF\") == \"Yes\"\nassert solution(\"F\") == \"No\"\nassert solution(\"FFFF\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('F') == 'F'\nassert solution('TFF') == 'F'\nassert solution('TFFTFF') == 'T'\nassert solution('FTFTFF') == 'T'\nassert solution('TTFFF') == 'T'\n"
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('F') == 'Yes'\nassert solution('FF') == 'No'\nassert solution('FTT') == 'No'\nassert solution('TFFF') == 'Yes'\n"
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"FFFTTTFTF\") == \"Yes\"\nassert solution(\"F\") == \"No\"\n\"\"\""
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('FFF') == 'Yes'\nassert solution('FF') == 'Yes'\nassert solution('F') == 'Yes'\nassert solution('FFTFTFTF') == 'No'\n"
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''FTFFTFFF''') == 'Yes'\nassert solution('F') == 'Yes'\nassert solution('FFTFFF') == 'No'\nassert solution('FFTFTFF') == 'No'\nassert solution('FFFTFFF') == 'No'\n"
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"FFF\") == \"Yes\"\nassert solution(\"FFTTFFF\") == \"Yes\"\nassert solution(\"FFTFFFTF\") == \"No\"\nassert solution(\"FFFFFFF\") == \"No\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"FTFFTFFF\"\n) == \"Yes\"\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == 2\nassert solution(\"2\") == 3\nassert solution(\"3\") == 5\n\"\"\""
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 5\nassert solution(\"1\") == 2\nassert solution(\"2\") == 3\n\"\"\""
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == 5\n\"\"\"\nfrom collections import Counter\nimport math\n"
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '3'\nassert solution('3\\n') == '5'\nassert solution('4\\n') == '6'\n\"\"\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\"\n\"\"\""
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == 6\nassert solution('5') == 10\nassert solution('6') == 15\n\"\"\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3\\n3') == '1.3333333333'\nassert solution('3\\n1 2 3\\n4') == '0.6666666667'\n"
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\\n3\") == \"1.3333333333\"\nassert solution(\"3\\n1 2 3\\n3\") == \"1.3333333333\"\nassert solution(\"3\\n1 2 3\\n3\") == \"1.3333333333\"\nassert solution(\"3\\n1 2 3\\n3\") == \"1.3333333333\"\nassert solution(\"3\\n1 2 3\\n3\") == \"1.3333333333\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\\n3\") == '1.3333333333'\nassert solution(\"4\\n1 2 3 4\\n3\") == '1.5'\nassert solution(\"5\\n1 2 3 4 5\\n3\") == '1.8333333333333334'\n\"\"\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\\n3\") == \"1.3333333333\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\np = int(input())\n\ncount = 0\n\nfor i in range(1, n + 1):\n    if sum(a[:i]) <= p:\n        count += 1\n\nprint(count / n)\n"
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1.3333333333\""
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\\n3\") == '1.3333333333'"
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3\\n3') == '1.3333333333'\nprint('The local tests are done.')"
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\\n3\") == \"1.3333333333\"\n\"\"\""
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3\\n3') == '1.3333333333'\nprint('Test 1 OK')\n\nassert solution('3\\n1 2 5\\n3') == '0.3333333333'\nprint('Test 2 OK')\n\nassert solution('1\\n1\\n1') == '1.0'\nprint('Test 3 OK')\n\nassert solution('3\\n5 6 1\\n3') == '0.6666666666'\nprint('Test 4 OK')\n\nassert solution('1\\n1\\n1') == '1.0'\nprint('Test 5 OK')"
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\\n3\") == 1.3333333333"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 1 2''') == '''7 0'''\nassert solution('''2 100000 569''') == '''986 605'''\n"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2\\n9 7 11 15 5\\n\") == \"13 7\"\n\"\"\"\n\nn, k, x = [int(item) for item in input().split()]\nnums = [int(item) for item in input().split()]\n\nnums.sort()\nprint(nums[-1] ^ x, nums[0] ^ x)\n"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 6\") == \"6 6 5\"\nassert solution(\"1 2 3 4\") == \"0 0 1 2\"\n\"\"\"\nimport math"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 2\\n9 7 11 15 5\\n') == '13 7'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2\\n9 7 11 15 5\") == \"13 7\"\nassert solution(\"5 2 2\\n9 7 11 15 5\") == \"986 605\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 2\\n9 7 11 15 5\") == \"13 7\"\n"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 100000 569\\n605 986\") == \"986 605\"\nprint(solution(\"2 100000 569\\n605 986\"))\n"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2\\n9 7 11 15 5\") == \"13 7\"\nassert solution(\"5 1 2\\n9 7 11 15 5\") == \"13 7\"\n"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1 2\\n9 7 11 15 5\\n') == '13 7'\n\"\"\"\n\nfrom sys import stdin\nfrom itertools import zip_longest"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 2 4 4\") == 1\nassert solution(\"5 5 1 2 3\") == -1\nassert solution(\"3 4 1 1 3\") == 3\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"5 5 1 2 3\") == \"0\"\nassert solution(\"3 4 1 1 3\") == \"3\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"3 3 2 4 5\") == \"0\"\nassert solution(\"3 4 1 1 3\") == \"3\"\nassert solution(\"5 5 1 2 3\") == \"-1\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"5 5 1 2 3\") == \"3\"\nassert solution(\"3 4 1 1 3\") == \"3\"\nassert solution(\"3 4 1 1 3\") == \"3\"\n\nassert solution(\"3 3 2 4 4\") == \"1\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"3 3 3 3 5\") == \"0\"\nassert solution(\"5 5 1 2 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"5 5 1 2 3\") == \"3\"\nassert solution(\"3 4 1 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 2 4 4') == 1\nassert solution('3 3 3 3 5') == 0\nassert solution('5 5 1 2 3') == -1\n\n-----\n"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3') == '0'\n\n\"\"\"\n\nfrom collections import deque, defaultdict\nimport sys\n\nsys.stdin = open('input.txt')\nsys.stdout = open('output.txt', 'w')\n"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"5 5 1 2 3\") == \"0\"\nassert solution(\"3 4 1 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 W1 G2 G1 B1 B4 R1\") == \"2\"\nassert solution(\"4 W1 G2 G1 B1 B4 R1\") == \"2\"\nassert solution(\"4 W1 G2 G1 B1 B4 R1\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 G3 G3\") == '0'\nassert solution(\"4 R4 R3 B3\") == '2'\nassert solution(\"5 B1 Y1 W1 G1 R1\") == '4'\nassert solution(\"1 G1 G1 B1\") == '3'\nassert solution(\"2 G1 G1 G1\") == '0'\n"
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"G3 G3\") == \"0\"\nassert solution(\"G4 R4 R3 B3\") == \"2\"\nassert solution(\"B1 Y1 W1 G1 R1\") == \"4\""
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"G3 G3\") == \"0\"\nassert solution(\"R4 R3 B3\") == \"2\"\nassert solution(\"G4 R4 R3 B3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('W1 R1 B1 Y1 G1 R2 G2 Y2 W2 G3 R3 B3 Y3 W3 G4 R4 B4 Y4') == '4'\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"G4 R4 R3 B3\") == \"2\"\nassert solution(\"G4 R4 R3 B3 G2 R1 G3 R4 G4\") == \"4\"\nassert solution
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('G4 R4 R3 B3') == '2'\nassert solution('G3 G3') == '0'\nassert solution('G5 G1 G3 G1 G4 G4 G5') == '4'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"G3 G3\") == \"0\"\nassert solution(\"G4 R4 R3 B3\") == \"2\"\nassert solution(\"B1 Y1 W1 G1 R1\") == \"4\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----\n"
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4 4 1 1 1') == '0'\nassert solution('G2 G2 G2 G2 G2') == '2'\nassert solution('Y1 Y1 Y1 Y1 R1') == '4'\nassert solution('G3 G3 R3 B3') == '2'\nassert solution('G4 R4 R3 B3') == '2'\n"
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"R3 G3 G3\") == 0\nassert solution(\"G4 R4 R3 B3\") == 2\nassert solution(\"B1 Y1 W1 G1 R1\") == 4"
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 3 4 3\") == \"2 6\"\nassert solution(\"5\\n10 30 5 6 24\\n10 41 7 8 24\") == \"3 11\"\n\"\"\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 4 3\") == \"2 6\"\n\"\"\""
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 4 3\") == \"2 6\"\nassert solution(\"5 10 6 5 24\") == \"3 11\"\nassert solution(\"5 10 24 5 6\") == \"3 11\"\n\"\"\""
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 3 4 3\\n4 7 6 5\") == \"2 6\"\nassert solution(\"2\\n1 1\\n100 100\") == \"1 1\"\nassert solution(\"5\\n10 30 5 6 24\\n10 41 7 8 24\") == \"3 11\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 6 5\") == \"2 6\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"5 10 30 5 6 24\") == \"3 11\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nvalues = [int(x) for x in sys.stdin.readline().split()]\nvolumes = [int(x) for x in sys.stdin.readline().split()]\n\nbottles = []\n\nfor i in range(n):\n    bottles.append([values[i], volumes[i]])"
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 1\\n100 100\") == \"1 1\"\nassert solution(\"5\\n10 30 5 6 24\\n10 41 7 8 24\") == \"3 11\"\n\"\"\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 4 3\\n4 7 6 5\\n\") == \"2 6\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 6 5\") == \"2 6\"\nassert solution(\"4 7 6 5\") == \"2 6\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"> 1 4\") == \"3B\"\nassert solution(\"> 2 2\") == \"Impossible\"\nassert solution(\"> 3 2\") == \"1A1B\"\n\"\"\"\n\n\nfrom collections import Counter\nfrom collections import defaultdict\nfrom typing import List"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 4\") == \"3B\"\nassert solution(\"2 2\") == \"Impossible\"\nassert solution(\"3 2\") == \"1A1B\"\n\nprint(solution(\"1 4\"))\nprint(solution(\"2 2\"))\nprint(solution(\"3 2\"))\n"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 4\") == \"3B\"\nassert solution(\"2 2\") == \"Impossible\"\nassert solution(\"3 2\") == \"1A1B\"\n\"\"\"\n\nfrom collections import Counter\nfrom typing import Dict\n"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 4\") == \"3B\"\nassert solution(\"2 2\") == \"Impossible\"\nassert solution(\"3 2\") == \"1A1B\""
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"1A1B\"\nassert solution(\"1 4\") == \"3B\"\nassert solution(\"1 4\") == \"3B\"\nassert solution(\"1 2\") == \"1A1B\"\nassert solution(\"1 2\") == \"1A1B\"\n"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 4\") == \"3B\"\nassert solution(\"2 2\") == \"Impossible\"\nassert solution(\"3 2\") == \"1A1B\""
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 4\") == \"3B\"\nassert solution(\"2 2\") == \"Impossible\"\nassert solution(\"3 2\") == \"1A1B\"\n\n\"\"\"\n\nx, y = [int(i) for i in stdin.split(' ')]"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == 'Impossible'\nassert solution('1 4') == '3B'\nassert solution('3 2') == '1A1B'\n\"\"\""
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 4\") == \"3B\"\nassert solution(\"2 2\") == \"Impossible\"\nassert solution(\"3 2\") == \"1A1B\"\n\"\"\"\n\nimport sys\n\nline = sys.stdin.readline().split()\nx, y = line[0], line[1]\nx, y = int(x), int(y)\n"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"Impossible\"\nassert solution(\"3 2\") == \"1A1B\"\nassert solution(\"1 4\") == \"3B\"\nassert solution(\"4 3\") == \"1A4B\"\nassert solution(\"3 4\") == \"1A1B\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4') == '25'\n"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2') == 3\n"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == 3\nassert solution(\"5 4\") == 25\n\n\n---"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'\n\"\"\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == 3\nassert solution(\"5 4\") == 25\n\"\"\"\nimport itertools\n\np, k = map(int, input().split())"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2') == 3\nassert solution('5 4') == 25\n\"\"\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution( \"3 2\") == 3\n\"\"\"\n\nfrom typing import Callable, Tuple, Union\nfrom fractions import Fraction"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n\") == '1'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 4\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2''') == '1'\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 4\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2''') == '1'\n\n'''\nAn undirected graph is called connected if it contains a path between any two vertices.\nOne can construct an undirected graph with m edges from n vertices using the following algorithm:\n\n1) Pick any two distinct vertices u and v.\n2) Pick any two distinct vertices u\u2019 and v\u2019 such that u\u2019\u2260u and v\u2019\u2260v, and u\u2019\u2260v\u2019.\n3) Add the edge (u, v).\n4) Repeat step 2 until there are n \u2212 1 edges in the graph.\n\nGiven an undirected graph G, it is called connected if there is a path between any two vertices in G.\nGiven a graph G, the number of connected components is the number of connected components of G.\nThe connected components of a graph are called connected components.\nGiven an undirected graph G and two vertices u and v, the number of edges between them is the number of edges between vertices u and v in G.\nGiven an undirected graph G, the set of vertices of degree k is the set of vertices of degree k in G.\n\nA graph is called bipartite if its vertices can be split into two disjoint sets such that every edge connects a vertex in the first set with a vertex in the second set.\nGiven a graph G, the set of vertices of degree k is the set of vertices of degree k in G.\nGiven a graph G, it is called bipartite if it is bipartite for all vertices of degree k.\n\nThe Connectivity of an undirected graph is the minimum number of edges that need to be removed to disconnect the graph.\nGiven an undirected graph G, the number of edges that need to be removed to disconnect the graph is called the connectivity of the graph G.\nGiven an undirected graph G, the connectivity of G is equal to the minimum number of edges that need to be removed to disconnect G.\n\nGiven an undirected graph G, the degree of vertex v in G is the number of edges incident on v in G.\nGiven an undirected graph G, the minimum degree of G is the minimum of degrees of all its vertices.\nGiven an undirected graph G, the maximum degree of G is the maximum of degrees of all its vertices.\nGiven an undirected graph G, the average degree of G is the sum of degrees of all vertices divided by the number of vertices.\nGiven an undirected graph G, the density of G is the fraction of its edges to its number of vertices.\nGiven an undirected graph G, the diameter of G is the maximum of the lengths of the shortest paths between all pairs of vertices.\nGiven an undirected graph G, the number of vertices with diameter d is the number of vertices with diameter d in G.\nGiven an undirected graph G, the radius of G is the minimum of the lengths of the shortest paths between all pairs of vertices not containing any vertex with diameter d.\nGiven an undirected graph G, the number of vertices with radius d is the number of vertices with radius d in G.\nGiven an undirected graph G, the average length of a shortest path in G is the sum of lengths of all shortest paths between any two vertices in G divided by the number of vertices in G.\nGiven an undirected graph G, the average clustering coefficient of G is the sum of clustering coefficients of all vertices in G divided by the number of vertices in G.\n\nThe Clustering Coefficient of a vertex v in a graph G is the average of the degrees of all vertices adjacent to v in G.\nThe Clustering Coefficient of a graph G is the average of the Clustering Coefficients of all vertices in G.\nThe Average Clustering Coefficient of a graph is the average of the Clustering Coefficients of all vertices in G.\nThe Degree Centrality of a vertex v in a graph G is the fraction of vertices adjacent to v such that v has the maximum degree among all vertices adjacent to v.\nThe Degree Centrality of a graph G is the average of the Degree Centralities of all vertices in G.\nThe Average Node Degree Centrality of a graph is the average of the Degree Centralities of all vertices in G.\nThe Strength of a vertex v in a graph G is the maximum of the degrees of all vertices adjacent to v in G.\nThe Strength of a graph G is the maximum of the Strength of all vertices in G.\nThe Average Edge Strength of a graph G is the average of the Strength of all vertices in G.\nThe Average Node Strength Centrality of a graph is the average of the Strength Centralities of all vertices in G.\nThe Node Strength Centrality of a vertex v in a graph G is the sum of the Strength of all vertices adjacent to v in G divided by the number of vertices adjacent to v.\nThe Node Strength Centrality of a graph G is the average of the Node Strength Centralities of all vertices in G.\nThe Closeness Centrality of a vertex v in a graph G is the sum of the lengths of the shortest paths between v and all other vertices in G divided by the number of vertices in G.\nThe Closeness Centrality of a graph G is the average of the Closeness Centrality of all vertices in G.\nThe Average Node Closeness Centrality of a graph G is the average of the Closeness Centrality of all vertices in G.\nThe Betweenness Centrality of a vertex v in a graph G is the sum of the fraction of shortest paths between v and all other vertices in G equal to the number of vertices in G.\nThe Betweenness Centrality of a graph G is the average of the Betweenness Centrality of all vertices in G.\nThe Average Node Betweenness Centrality of a graph G is the average of the Betweenness Centrality of all vertices in G.\nThe Harmonic Centrality of a vertex v in a graph G is the sum of the reciprocal of the degrees of all vertices adjacent to v in G.\nThe Harmonic Centrality of a graph G is the average of the Harmonic Centrality of all vertices in G.\nThe Average Node Harmonic Centrality of a graph G is the average of the Harmonic Centrality of all vertices in G.\nThe Eigenvector Centrality of a vertex v in a graph G is the fraction of the total number of vertices in G by the sum of the fractions of all vertices in"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n') == '1'\n\"\"\"\n\nimport sys\n\nINPUT_LINES = iter(sys.stdin.read().splitlines())\n"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n\") == \"1\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\") == \"1\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n') == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n\") == \"1\"\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict, deque"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_solution\nprint(solution(stdin))\n"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n') == '1'\n"
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('o.\\n.S\\n..\\nT') == -1\nassert solution('S.\\no.\\n.\\no.\\nT') == 2\nassert solution('S.\\no.\\n.\\no.\\nS') == 0\nassert solution('S.\\no.\\n.\\no.\\nS\\nS') == 0\n\n\"\"\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"S.o\\n.o.\\no.T\") == '2'\nassert solution(\"S.o\\n.o.\\no.T\\no.T\") == '-1'\n\"\"\""
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\nS.o\n.o.\no.T\n''') == '2'\n\nassert solution('''\n2 2\n.o\nS.T\n''') == '-1'\n\nassert solution('''\n2 2\n.S\nS.T\n''') == '-1'\n\nassert solution('''\n2 2\n.T\nS.S\n''') == '-1'\n\nassert solution('''\n2 2\n.o\nS.S\n''') == '0'"
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"S.o\\n.o.\\no.T\") == \"2\"\nassert solution(\"S.o\\no.\\no.T\") == \"-1\"\n\"\"\""
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n\"\"\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\nS.o\\n.o.\\no.T\") == \"2\"\nassert solution(\"4 4\\nS.o.\\n.o.o\\no.T\\no.T\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"S.o\\n.o.\\no.T\") == \"2\"\nassert solution(\"S.o\\n.o.\\no.S\\no.T\") == \"4\"\nassert solution(\"S.o\\n.o.\\no.S\\no.T\") == \"4\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"S.o\\n:o.\\no.T\") == \"2\"\n\"\"\"\n\nfrom typing import List\n\n\nclass Leaves:\n    def __init__(self, H: int, W: int, R: int, C: int, S: str, T: str):\n        self.H = H\n        self.W = W\n        self.R = R\n        self.C = C\n        self.S = S\n        self.T = T\n        self.leaves = None\n\n    def solve(self) -> int:\n        matrix = [[None for _ in range(self.W)] for _ in range(self.H)]\n        for i in range(self.H):\n            for j in range(self.W):\n                matrix[i][j] = (i, j)\n        self.leaves = matrix\n\n        for i in range(self.H):\n            for j in range(self.W):\n                if self.S == matrix[i][j] or self.T == matrix[i][j]:\n                    self.remove_leaves(matrix[i][j])\n        return self.remove_leaves(self.S) if self.S in self.leaves[self.R][self.C] else -1\n\n    def remove_leaves(self, leaf: tuple) -> int:\n        if leaf in self.leaves[self.R][self.C]:\n            return 0\n        leaves = self.leaves[self.R][self.C]\n        if leaf in leaves:\n            leaves.remove(leaf)\n            if not leaves:\n                return -1\n        if leaf == self.T:\n            return 1\n        for i in range(self.R - 1, -1, -1):\n            if leaf in self.leaves[i][self.C]:\n                self.leaves[i + 1][self.C] = self.leaves[i][self.C]\n                self.leaves[i][self.C] = []\n        for j in range(self.C - 1, -1, -1):\n            if leaf in self.leaves[self.R][j]:\n                self.leaves[self.R][j + 1] = self.leaves[self.R][j]\n                self.leaves[self.R][j] = []\n        return 0\n"
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"S.o\\n.o.\\no.T\") == \"2\"\nassert solution(\"S.o\\n.o.\\no.T\") == \"2\"\nassert solution(\"S.o\\n.o.\\no.T\") == \"2\"\nassert solution(\"S.o\\n.o.\\no.T\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\nimport sys\nimport math\n\nsys.stdin = open(\"input.txt\")\na, b = map(int, input().split())\n\nres = 0\nwhile a > 1:\n    res += a\n    a = math.floor(a / b)\nprint(res + a)\n"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n\n\"\"\"\nimport math"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"3 6\") == \"3\"\nassert solution(\"199 200\") == \"200\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n1 1\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n3 2\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n199 200\n\"\"\") == \"200\"\n\"\"\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n\nsolution(\"199 200\")"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n\n-----\n\n\u0412 \u0432\u0435\u0440\u0441\u0438\u0438 \u0441 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u043c \u043d\u0430 \u043f\u0440\u043e\u0442\u044f\u0436\u0435\u043d\u0438\u0438 \u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442\u0430 \u0434\u0443\u043c\u0430\u044e \u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b, \u0442.\u043a. \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u043e\u0434\u043d\u043e \u0432\u0440\u0435\u043c\u044f\n\n\u0421\u043e\u0437\u0434\u0430\u044e \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442\n\n\u041f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u044e \u0432\u0441\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u044b\n\n\u0414\u0430\u043b\u044c\u0448\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e, \u0435\u0441\u0442\u044c \u043b\u0438 \u043d\u0435\u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0442.\u0435. \u0435\u0441\u043b\u0438 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043d\u0435\u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0439, \u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\n\n\u041f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0445\u043e\u0436\u0443 \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0438 \u0434\u0435\u043b\u0430\u044e \u043e\u0431\u043e\u0438\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0430\u043c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\n\n\u0412 \u043a\u043e\u043d\u0446\u0435 \u043e\u0431\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0434\u0435\u043b\u0430\u044e \u043e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0435\u0440\u0435\u0432\u043e\u0436\u0443 \u0432 \u043e\u0431\u044b\u0447\u043d\u0443\u044e \u0447\u0438\u0441\u043b\u043e\u0432\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c\n\n\u0422\u0430\u043a \u043a\u0430\u043a \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0446\u0435\u043b\u044b\u0435, \u0442\u043e \u0432 \u043e\u0431\u0449\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438 \u044d\u0442\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442\n\n\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0435\u0441\u043b\u0438 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043d\u0435\u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0439, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043d\u0435\u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0439\n\n\u0412\u0441\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0438 \u043f\u0440\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\"\n\nassert solution(\"1 2\") == \"3\"\n\nassert solution(\"3 2\") == \"3\"\n\nassert solution(\"199 200\") == \"200\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 2') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom typing import List\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"..\"))\n\nfrom intcode_computer import IntcodeComputer  # pylint: disable=E0401\n"
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 2\") == \"Aoki\"\nassert solution(\"5\\n3 3\") == \"Aoki\"\nassert solution(\"2\\n5 2\") == \"Takahashi\"\nassert solution(\"5\\n5 2\") == \"Takahashi\"\n\"\"\"\n\nfrom math import ceil\nfrom decimal import *"
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3 3\") == \"Aoki\"\n\"\"\"\n\nimport math\n\nnumber_of_piles, *piles = map(int, input().split())\n\nmax_piles = math.floor(sum(piles) / 2)\n\npiles = sorted(piles)\npiles.reverse()\n\ncurrent_max_piles = 0\n\nfor i in range(len(piles)):\n    current_max_piles += piles[i]\n    if current_max_piles > max_piles:\n        print(\"Takahashi\")\n        break\n    else:\n        current_max_piles -= piles[i]"
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"Aoki\"\nassert solution(\"3 3\") == \"Takahashi\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n5 2\\n3 3\") == \"Aoki\"\n\"\"\""
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n3 3\") == \"Aoki\"\nassert solution(\"3 1\\n1 1\") == \"Takahashi\"\n\n\"\"\""
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n3 3\") == \"Aoki\"\n\"\"\""
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2\n5 2\n3 3''') == 'Aoki'\nassert solution('''2\n5 2\n3 3\n''') == 'Takahashi'\nassert solution('''1\n2\n1 1''') == 'Takahashi'\nassert solution('''2\n1 1\n2 2''') == 'Aoki'\n\nassert solution('''2\n4 6\n2 4\n''') == 'Takahashi'\n"
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"Aoki\"\n\"\"\""
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n3\\n') == 'Aoki'\nassert solution('2\\n5\\n3\\n') == 'Takahashi'\nassert solution('3\\n1\\n2\\n') == 'Takahashi'\nassert solution('3\\n1\\n2\\n') == 'Takahashi'\n"
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 3\\n\") == \"Aoki\"\nassert solution(\"3\\n2 2\\n\") == \"Takahashi\"\nassert solution(\"2\\n3 1\\n\") == \"Takahashi\"\nassert solution(\"4\\n3 2\\n\") == \"Takahashi\"\nassert solution(\"3\\n5 2\\n\") == \"Aoki\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"8\""
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 2\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2') == 0\nassert solution('3 3') == 8\n"
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '8'\n\"\"\""
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == 0\nassert solution(\"3 3\") == 8\n\"\"\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"8\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == 0\nassert solution(\"3 3\") == 8\nassert solution(\"8 3\") == 6\nassert solution(\"12 10\") == 26\nassert solution(\"3 4\") == 5\n"
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == 0\nassert solution(\"3 3\") == 8\n"
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == '0'\nassert solution(\"3 3\") == '8'\nassert solution(\"1 1\") == '0'\n"
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == 0\nassert solution('3 3') == 8\n\nprint('Hooray!')"
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 2 3 4\\n1 5 3 4\") == '1'\nassert solution(\"2 2\\n1 2 3 4\\n1 5 6 4\") == '0'\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\") == '-1'\nassert solution(\"2 2\\n1 2 3 4\\n1 5 6 7 4\") == '0'\n"
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('2 2') == '0'\nassert solution('1 2 3 4') == '1'\nassert solution('1 5 6 4') == '0'\n"
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 2 3 4\\n1 5 3 4\") == \"1\"\nassert solution(\"2 2\\n1 2 3 4\\n1 5 6 4\") == \"0\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 3 2 3\\n1 2 3 2') == '1'\nassert solution('4 2\\n1 2 3 4\\n1 5 3 4') == '0'\nassert solution('4 2\\n1 2 3 4\\n1 2 1 3 2 3') == '-1'\nassert solution('4 2\\n1 2 3 4\\n1 5 6 4') == '-1'\nassert solution('3 2\\n1 2\\n1 2\\n1 2') == '1'\n"
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 2\n1 2 3 4\n1 5 3 4''') == \"1\"\n\nassert solution('''2 2\n1 2 3 4\n1 5 6 4''') == \"0\"\n\nassert solution('''2 3\n1 2 4 5\n1 2 1 3 2 3''') == \"-1\"\n\nassert solution('''2 3\n1 2 4 5\n1 2 1 3 2 3''') == \"1\"\n\nassert solution('''4 2\n1 2 3 4\n1 2 1 3 2 3''') == \"0\""
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n1 2 3 4') == '1'\nassert solution('2 2\\n1 2 3 4\\n1 5 3 4') == '0'\nassert solution('2 3\\n1 2 4 5\\n1 2 1 3 2 3') == '-1'\nassert solution('2 2\\n1 2 3 4\\n1 2 1 3 2 3') == '1'\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce\n\nn, m = map(int, input().split())\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na_c = Counter(a)\nb_c = Counter(b)\n\nfor i in a_c.keys():\n    a_c[i] -= b_c[i]\n    if a_c[i] < 0:\n        a_c[i] = 0\n\na_c_list = list(a_c.items())\na_c_list.sort()\n\nres = []\nfor i in a_c_list:\n    res.append(i[0])"
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 2 3 4\\n1 5 3 4\") == \"1\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\") == \"0\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"2 2\\n1 2 3 4\\n1 5 3 4\"\n) == \"1\"\nassert solution(\n\"2 2\\n1 2 3 4\\n1 5 6 4\"\n) == \"0\"\nassert solution(\n\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\"\n) == \"1\"\nassert solution(\n\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\"\n) == \"2\"\nassert solution(\n\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\"\n) == \"3\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 2 3 4\\n1 5 3 4\") == \"1\"\nassert solution(\"2 2\\n1 2 3 4\\n1 5 6 4\") == \"0\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\") == \"-1\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 2 3 4\\n1 5 3 4\") == \"1\"\nassert solution(\"2 2\\n1 2 3 4\\n1 5 6 4\") == \"0\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\") == \"0\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"24\", \"17:30\") == \"17:30\"\nassert solution(\"12\", \"17:30\") == \"07:30\"\nassert solution(\"24\", \"99:99\") == \"09:09\"\nassert solution(\"12\", \"99:99\") == \"01:59\"\n\n\"\"\""
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\\n17:30\") == \"17:30\"\nassert solution(\"24\\n99:99\") == \"09:09\"\nprint('Success')"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12') == '00'\nassert solution('24') == '12'\nassert solution('12') == '12'\nassert solution('24') == '00'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"24\") == \"09:09\"\nassert solution(\"12\") == \"07:30\"\nassert solution(\"12\") == \"07:30\"\nassert solution(\"12\") == \"07:30\"\nassert solution(\"12\") == \"07:30\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('24\\n99:99') == '09:09'\nassert solution('12\\n17:30') == '07:30'\nassert solution('24\\n99:99') == '09:09'\n"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"24\\n99:99\") == \"09:09\"\nassert solution(\"12\\n17:30\") == \"07:30\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12') == '12:00'\nassert solution('24') == '00:00'\n\nassert solution('12', '17:30') == '12:17'\nassert solution('24', '99:99') == '00:09'\n\"\"\"\n\nhour = input()\nminute = input()\n\nhour = int(hour)\nminute = int(minute[:2])"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('24\\n99:99') == '09:09'\nassert solution('12\\n17:30') == '07:30'"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\") == \"12:00\"\nassert solution(\"24\") == \"00:00\"\nassert solution(\"12:99\") == \"12:09\"\nassert solution(\"24:99\") == \"00:09\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1_000_000)\n\noptions = {\n    12: [],\n    24: [],\n    }\n\nfor i in range(1, 60 + 1):\n    options[12].append(f'{i:02}')\nfor i in range(0, 60 + 1):\n    options[24].append(f'{i:02}')"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12', '99') == '09'\nassert solution('12', '17:30') == '07:30'\n\nprint('Test passed')\n-----\n\"\"\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n2\\n1 2 1\\n2 3 1\\n3 1 1\") == '6'\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 2 1\\n2 3 1\\n3 4 1\\n4 1 1') == '6'\n\n\"\"\"\n\n\n\"\"\"\n-----Baseline Solution-----\n\nfrom collections import defaultdict\nfrom functools import lru_cache\nfrom heapq import heappush, heappop"
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n2\\n1 2 1\\n2 3 1\\n3 1 1\") == '6'\n\"\"\""
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n2\\n1 2 1\\n2 3 1\\n3 1 1\") == \"6\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2 1\\n2 3 1\\n3 1 1\") == \"6\"\n\"\"\""
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import defaultdict\nfrom dataclasses import dataclass\nfrom itertools import chain\nfrom math import prod\nfrom typing import Dict, Iterator, Tuple, Union\n\nfrom icontract import require, ensure\n\n\nclass Edge:\n    def __init__(self, u: int, v: int, weight: int) -> None:\n        require(u!= v)\n        self.u = u\n        self.v = v\n        self.weight = weight\n\n\nclass Graph:\n    def __init__(self, n: int) -> None:\n        self.adjacency_list: Dict[int, Dict[int, int]] = defaultdict(dict)\n        self.num_edges: int = 0\n        self.num_vertices: int = n\n\n    def add_edge(self, u: int, v: int, weight: int) -> None:\n        self.adjacency_list[u][v] = weight\n        self.adjacency_list[v][u] = weight\n        self.num_edges += 1\n\n    def add_edges(self, edges: Iterator[Edge]) -> None:\n        for edge in edges:\n            self.add_edge(*edge)\n\n    def __repr__(self) -> str:\n        return f'{self.__class__.__name__}({self.num_vertices}, {self.num_edges!r})'\n\n\n@dataclass(frozen=True)\nclass SpanningTree:\n    u: int\n    v: int\n    weight: int\n\n\n@dataclass(frozen=True)\nclass SpanningTrees:\n    u: int\n    v: int\n    weight: int\n    count: int\n\n\nclass Solution:\n    def __init__(self, graph: Graph) -> None:\n        self.graph = graph\n        self.spanning_trees: Dict[int, SpanningTrees] = {}\n\n    def add_spanning_tree(self, spanning_tree: SpanningTree) -> None:\n        self.spanning_trees[spanning_tree.u] = SpanningTrees(\n            u=spanning_tree.u, v=spanning_tree.v, weight=spanning_tree.weight, count=1\n        )\n        self.spanning_trees[spanning_tree.v] = SpanningTrees(\n            u=spanning_tree.v, v=spanning_tree.u, weight=spanning_tree.weight, count=1\n        )\n\n    def add_spanning_trees(self, spanning_trees: Iterator[SpanningTree]) -> None:\n        for spanning_tree in spanning_trees:\n            self.add_spanning_tree(spanning_tree)\n\n    def num_spanning_trees(self, weight: int) -> int:\n        return prod(count for weight, count in self.spanning_trees.values())\n\n    def iter_spanning_trees(self, u: int, v: int) -> Iterator[SpanningTree]:\n        yield from self.iter_spanning_trees_edge(u, v)\n        yield from self.iter_spanning_trees_edge(v, u)\n\n    def iter_spanning_trees_edge(self, u: int, v: int) -> Iterator[SpanningTree]:\n        for u_edge, v_edge in (\n            (u, v),\n            (v, u),\n        ):\n            if u_edge in self.spanning_trees:\n                weight = self.spanning_trees[u_edge].weight\n                count = self.spanning_trees[u_edge].count\n            elif v_edge in self.spanning_trees:\n                weight = self.spanning_trees[v_edge].weight\n                count = self.spanning_trees[v_edge].count\n            else:\n                continue\n\n            yield SpanningTree(u=u, v=v, weight=weight)\n            yield from (\n                SpanningTree(u=u, v=v, weight=weight)\n                for _ in range(count - 1)\n            )\n\n    def iter_spanning_trees_edges(self, u: int, v: int) -> Iterator[Edge]:\n        for spanning_tree in self.iter_spanning_trees(u, v):\n            yield Edge(spanning_tree.u, spanning_tree.v, spanning_tree.weight)\n\n    def num_spanning_trees_edges(self, weight: int) -> int:\n        return sum(\n            count - 1\n            for weight, count in self.spanning_trees.values()\n            if weight == weight\n        )\n\n    def __repr__(self) -> str:\n        return (\n            f'{self.__class__.__name__}('\n            f'{len(self.spanning_trees)!r}, '\n            f'{self.num_spanning_trees(weight=weight)!r}, '\n            f'{self.num_spanning_trees_edges(weight=weight)!r})'\n        )\n"
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2 1\\n2 3 1\") == \"6\"\n\"\"\""
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n2\\n1 2 1\\n2 3 1\\n3 1 1\") == 6\n"
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 1\\n2 3 1\\n3 4 1\\n4 1 1\\n2 3 2\\n1 2 2\") == \"6\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nclass Graph:\n\n    def __init__(self, num_vertices):\n        self.num_vertices = num_vertices\n        self.adjacency_list = defaultdict(set)\n\n    def insert_edge(self, source, destination, weight):\n        self.adjacency_list[source].add((destination, weight))\n        self.adjacency_list[destination].add((source, weight))\n\n    def _dfs(self, start_vertex, visited, path_weight):\n        visited[start_vertex] = True\n        path_weight += self.adjacency_list[start_vertex][0][1]\n        path.append(start_vertex)\n\n        for neighbor, weight in self.adjacency_list[start_vertex]:\n            if neighbor not in visited:\n                path_weight = self._dfs(neighbor, visited, path_weight)\n\n        return path_weight\n\n    def minimum_spanning_tree(self):\n        mst_set = set()\n        mst_edges = []\n\n        for vertex in range(self.num_vertices):\n            if vertex not in mst_set:\n                mst_set.add(vertex)\n                path = []\n                path_weight = self._dfs(vertex, {vertex: True}, 0)\n                path.reverse()\n\n                for i in range(len(path) - 1):\n                    mst_edges.append((path[i], path[i + 1]))\n\n        return mst_edges"
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 2 1\\n2 3 1\\n3 1 1') == '6'\n\"\"\"\n"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n2 0 3 0 1 1') == '5\\n2 1\\n2 5\\n3 3\\n3 6\\n5 6'\nassert solution('1\\n0') == '0\\n'\nassert solution('6\\n3 2 2 2 1 1') == '-1'\n"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n2 0 3 0 1 1\\n\") == \"5\\n2 1\\n2 5\\n3 3\\n3 6\\n5 6\"\nassert solution(\"1\\n0\\n\") == \"0\\n\"\nassert solution(\"6\\n3 2 2 2 1 1\\n\") == \"-1\"\n\"\"\"\n\n\n\nimport math\nimport sys\nimport copy\n"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n2 0 3 0 1 1') == '5\\n2 1\\n2 5\\n3 3\\n3 6\\n5 6'\nassert solution('1\\n0') == '0\\n'\nassert solution('6\\n3 2 2 2 1 1') == '-1'\n\"\"\"\n"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n2 0 3 0 1 1\") == \"5\\n2 1\\n2 5\\n3 3\\n3 6\\n5 6\"\nassert solution(\"1\\n0\") == \"0\\n\"\nassert solution(\"6\\n3 2 2 2 1 1\") == \"-1\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n2 0 3 0 1 1\") == \"5\\n2 1\"\nassert solution(\"1\\n0\") == \"0\\n\"\nassert solution(\"6\\n3 2 2 2 1 1\") == \"-1\\n\"\n\"\"\"\n\nfrom collections import Counter, deque"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n2 0 3 0 1 1') == '5\\n2 1\\n2 5\\n3 3\\n3 6\\n5 6'\nassert solution('1\\n0') == '0\\n'\n\"\"\"\n"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 2 2 2 1 1') == '5\\n2 1\\n2 5\\n3 3\\n3 6\\n5 6'\nassert solution('1') == '0\\n'\nassert solution('6 3 2 2 1 1') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n6\n2 0 3 0 1 1\n''') == '5\n2 1\n2 5\n3 3\n3 6\n5 6\n'''\n"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n2 0 3 0 1 1') == '5\\n2 1\\n2 5\\n3 3\\n3 6\\n5 6'\nassert solution('1\\n0') == '0\\n'\nassert solution('6\\n3 2 2 2 1 1') == '-1'\n\"\"\"\n\n\nimport collections\nimport sys\n\nsys.stdin = open('input.txt')\ninput = sys.stdin.readline\n"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import Dict, List, Set"
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 20\") == '2 0 4'\n\"\"\""
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 8\\n12 20\") == \"2\\n0 4\"\nassert solution(\"3 10\\n10 20 30\") == \"1\\n0\"\n\n'''\n"
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 12 20\") == \"1\"\nassert solution(\"4 8 12 20\") == \"1\"\nassert solution(\"3 10 20 30\") == \"0\"\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\nimport math\n\nDEBUG = False\n"
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 5 1 2 5') == '1'\nassert solution('3\\n10 20 30') == '0'\nassert solution('3\\n10 20 30') == '0'\nassert solution('2 8\\n12 20') == '2'\nassert solution('3 10\\n10 20 30') == '1'\n\"\"\""
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 8\\n12 20') == '2'\nassert solution('3 10\\n10 20 30') == '1'\n"
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 20\") == \"1 0 4\"\nassert solution(\"3 10\") == \"1 0\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 8\n12 20''') == '2\n0 4'\nassert solution('''3 10\n10 20 30''') == '1\n0'\n\nimport math\n"
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 8\\n12 20\") == 2\n\"\"\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8 12 20\") == \"1\"\nassert solution(\"10 20 30\") == \"1\"\nassert solution(\"6 3 2\") == \"0\"\nassert solution(\"12 20\") == \"0\"\nassert solution(\"3 10\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 0 5 5\\n3 2\\n-1 -1\\n-1 0\\n') == '3.729935587093555327'\nassert solution('0 0 0 1000\\n100 1000\\n-50 0\\n50 0') == '11.547005383792516398'\n"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 5 5\\n3 2\\n-1 -1\\n-1 0\") == \"3.729935587093555327\"\n\"\"\"\n\n\nimport numpy as np\n"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 5 5\\n3 2\\n-1 -1\\n-1 0\") == \"3.729935587093555327\"\nassert solution(\"0 0 0 1000\\n100 1000\\n-50 0\\n50 0\") == \"11.547005383792516398\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 5 5\\n3 2\\n-1 -1\\n-1 0\") == \"3.729935587093555327\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 0 5 5\\n3 2\\n-1 -1\\n-1 0') == '3.729935587093555327'\n"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 5 5\\n3 2\\n-1 -1\\n-1 0\") == \"3.729935587093555327\"\n\"\"\"\n\nimport math\nfrom math import hypot\n\nx1, y1, x2, y2 = [int(x) for x in input().split(\" \")]\nv_max, t = [int(x) for x in input().split(\" \")]\nw_x, w_y = [int(x) for x in input().split(\" \")]\nx_t = x2 - x1\ny_t = y2 - y1\n\nwhile v_max**2 >= hypot(x_t, y_t)**2:\n    v_x, v_y = [int(x) for x in input().split(\" \")]\n    w_x, w_y = [int(x) for x in input().split(\" \")]\n    t += 1\n    x_t += v_x * t\n    y_t += v_y * t\n    x_t += w_x * (t ** 2) / 2\n    y_t += w_y * (t ** 2) / 2\n\nprint(f\"{t:.6f}\")\n"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 5 5\\n3 2\\n-1 -1\\n-1 0\") == '3.729935587093555327'\n"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''0 0 5 5\n3 2\n-1 -1\n-1 0''') == '3.729935587093555327'\n\"\"\"\n"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 0 5 5\\n3 2\\n-1 -1\\n-1 0\\n-1 0') == '3.729935587093555327'\nprint(solution('0 0 0 1000\\n100 1000\\n-50 0\\n50 0'))\n"
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''0 0 5 5\n3 2\n-1 -1\n-1 0''') == '3.729935587093555327'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n'''\n"
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\\n10\\n2\\n1 2\") == \"First\"\nassert solution(\"5\\n1\\n10\\n2\\n1 2\") == \"Second\"\n\"\"\""
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\") == \"First\"\nassert solution(\"2\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\") == \"Second\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n10\\n2\\n1 2\") == \"First\"\nassert solution(\"1\\n10\\n2\\n1 2\") == \"Second\"\nassert solution(\"2\\n1\\n10\\n2\\n1 2\") == \"First\"\nassert solution(\"2\\n1\\n10\\n2\\n1 2\") == \"Second\"\n\"\"\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n\") == \"Second\"\nassert solution(\"2\\n10\\n4\\n5\\n1 2\\n2 3\\n3 4\\n5 6\\n1 4\\n4 6\\n2 3\\n3 4\\n5 6\\n1 2\\n3 4\\n5 6\\n1 4\\n2 3\\n5 6\\n1 4\\n2 3\\n5 6\\n\") == \"First\"\nassert solution(\"3\\n10\\n7\\n3\\n1 2\\n2 3\\n3 4\\n4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n1 2\\n3 4\\n4 5\\n1 4\\n2 3\\n3 4\\n4 5\\n1 4\\n2 3\\n5 6\\n1 2\\n2 3\\n3 4\\n4 5\\n1 2\\n3 4\\n4 5\\n1 4\\n2 3\\n3 4\\n5 6\\n1 4\\n2 3\\n3 4\\n4 5\\n1 4\\n2 3\\n5 6\\n\") == \"Second\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n10\\n2\\n1 2\") == \"First\"\nassert solution(\"3\\n10\\n2\\n1 2\") == \"Second\"\n\"\"\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n\") == \"Second\"\nassert solution(\"3\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n\") == \"Second\"\nassert solution(\"3\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n\") == \"Second\"\nassert solution(\"3\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n\") == \"Second\"\nassert solution(\"3\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n\") == \"Second\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2\\n1 2\\n1 3\\n1 4\") == 'First'\nassert solution(\"5\\n7\\n1 2 5\\n1 7\\n1 2 3\\n1 7\\n2 1\\n2 3\") == 'Second'\nassert solution(\"5\\n10\\n1 2 3 4 5\\n2 10\\n1 3 5 6 7 8\\n2 10\\n1 5 6 7 8 9\\n1 10\\n3 4 5 6 7 8 9\\n2 10\\n1 5 6 7 8 9 10\") == 'First'\n"
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"Second\"\nassert solution(\"1\") == \"First\"\nassert solution(\"10\") == \"Second\"\nassert solution(\"2\\n1\\n10\") == \"Second\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1\\n10\\n2\\n1 2\") == \"Second\"\n\"\"\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 1 5 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 2\\n4 3 1 5 2\") == \"1\"\nassert solution(\"6 1 1\\n3 5 6 6 7 8 9 10\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 1 5 2') == '1'\nassert solution('5 3 2') == '1'\nassert solution('5 3 1 5 2') == '2'\nassert solution('4 3 5 2') == '1'\n\"\"\"\n\nn, k, q = map(int, input().split())\nA = list(map(int, input().split()))\n\nA.sort()\n\ndp = [0] * (n + 1)\ndp[k] = float('inf')\n\nfor i in range(k, n):\n    dp[i + 1] = min(dp[i + 1], dp[i] + abs(A[i] - A[i - k]))\n\nfor _ in range(q):\n    left = int(input())\n    print(dp[left])\n"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 2\\n4 3 1 5 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2\\n4 3 1 5 2\") == \"1\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2\\n4 3 1 5 2\") == '1'\n\"\"\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 2\\n4 3 1 5 2') == '1'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2\\n4 3 1 5 2\") == '1'\n\"\"\""
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 1 5 2\") == \"1\"\n\n\"\"\"\n\nfrom sys import stdin\n\nN, K, Q = map(int, stdin.readline().split())\nA = list(map(int, stdin.readline().split()))\n\nmin_diff = 10**18\nmin_diff_idx = None\nfor i in range(N - K + 1):\n    diff = max(A[i:i+K]) - min(A[i:i+K])\n    if diff < min_diff:\n        min_diff = diff\n        min_diff_idx = i\n\nprint(min_diff)\n"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 2\\n4 3 1 5 2') == '1'\n"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"24\"\n\n\n------"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('3 2\\n') == '24'\nassert solution('3 2\\n') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"17\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == '6'\nassert solution('3 2') == '34'\nassert solution('9 7') == '1289'\n\n\"\"\""
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"24\"\nassert solution(\"6 3\") == \"612\"\nassert solution(\"12 5\") == \"43296\"\nassert solution(\"1000 1\") == \"1\"\n"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"3\"\nassert solution(\"7 3\") == \"1196\"\n"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"4 4\") == \"3\"\nassert solution(\"7 3\") == \"1196\"\nassert solution(\"31 8\") == \"64921457\"\n"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == 6\n"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"3\"\nassert solution(\"7 3\") == \"1196\"\nassert solution(\"31 8\") == \"64921457\"\n\nimport os,sys,operator,math\nfrom io import StringIO\nimport unittest\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n    def test_input_1(self):\n        print(\"test_input_1\")\n        input = \"\"\"3 2\n\"\"\"\n        output = \"\"\"6\"\"\"\n        self.assertIO(input, output)\n    def test_input_2(self):\n        print(\"test_input_2\")\n        input = \"\"\"4 4\n\"\"\"\n        output = \"\"\"3\"\"\"\n        self."
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n\") == \"6\"\nassert solution(\"4 4\\n\") == \"3\"\nassert solution(\"7 3\\n\") == \"1196\"\n\n\"\"\"\n\nimport sys\nimport time\nimport copy\nimport string\n\n\nclass TrieNode(object):\n    def __init__(self):\n        self.children = {}\n        self.count = 1\n        self.letter = None\n\n    def get_children(self):\n        return self.children\n\n    def add_child(self, child):\n        self.children[child.letter] = child\n\n    def get_count(self):\n        return self.count\n\n    def add_count(self):\n        self.count += 1\n\n    def get_letter(self):\n        return self.letter\n\n    def set_letter(self, letter):\n        self.letter = letter\n"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"3\"\nassert solution(\"7 3\") == \"1196\"\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n') == ''\nassert solution('1 2 3\\n') == ''\nassert solution('2 2\\n') == '0'\nassert solution('3 2\\n') == '1'\n"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\") == \"1196\"\n\"\"\""
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2') == 6\n\"\"\"\n\nn, m = map(int, input().split())\nn, m = n, m % 1000000007\nmod = 10 ** 9 + 7"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == 6\nassert solution(\"4 4\") == 3\nassert solution(\"7 3\") == 1196\nassert solution(\"31 8\") == 6492144\n"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 2\\n#..#\\n..#.\\n#...\") == \"#.X#\\nX.#.\\n#...\\n#.#.\"\nassert solution(\"5 4 5\\n#...\\n#.#.\\n.#..\\n...#\\n.#.#\") == \"#XXX\\n#X#.\\nX#..\\n...#\\n.#.#\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2\\n#..#\\n..#.\\n#...\") == \"#.X#\"\nassert solution(\"5 4 5\\n#...\\n#.#.\\n.#..\\n...\") == \"#XXX\"\n\"\"\"\nimport unittest\nimport collections"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 2\\n#..#\\n..#.\\n#...\") == \"##.\\n###.\"\nassert solution(\"5 4 5\\n#...\\n#.#.\\n.#..\\n...#\\n.#.#\") == \"####\\n#.X#\\n##.#\\n##X#\\n####\"\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2\\n#..#\\n..#.\\n#...\\n\") == \"#.X#\\nX.#.\\n#...\\n\"\nassert solution(\"5 4 5\\n#...\\n#.#.\\n.#..\\n...#\\n.#.#\\n\") == \"#XXX\\n#X#.\\nX#..\\n...#\\n.#.#\\n\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 2\\n#..#\\n..#.\\n#...\\n\") == \"#.X#\\nX.#.\\n#...\\n\"\nassert solution(\"5 4 5\\n#...\\n#.#.\\n.#..\\n...#\\n.#.#\\n\") == \"#XXX\\n#X#.\\nX#..\\n...#\\n.#.#\\n\"\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 2\\n#..#\\n..#.\\n#...\\n\") == \"#.X#\\nX.#.\\n#...\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 2\\\\n#..#\\\\n..#.\\\\n#...\\\\n\") == \"#.X#\\\\nX.#.\\\\n#...\\\\n\"\nassert solution(\"5 4 5\\\\n#...\\\\n#.#.\\\\n.#..\\\\n...#\\\\n.#.#\\\\n\") == \"#XXX\\\\n#X#.\\\\nX#..\\\\n...#\\\\n.#.#\\\\n\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4 5\\n#...\\n#.#.\\n.#..\\n...#\\n.#.#\") == \"#XXX\\n#X#.\\nX#..\\n...#\\n.#.#\"\n\n\"\"\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 2\\n#..#\\n..#.\\n#...\\n') == '#.X#\\nX.#.\\n#...\\n'\n"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".#.#\") == \"XX\", \"First\"\nassert solution(\".#.#.###\") == \"XXX\", \"Second\"\nassert solution(\"###\") == \"XXX\", \"Third\"\nassert solution(\"###.###\") == \"XXX\", \"Fourth\"\nassert solution(\"###.#.###\") == \"XXX\", \"Fifth\"\n\nprint('The local tests are done. Click on \"Check\" now!')\n"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1\\n\") == \"1\"\nassert solution(\"5\\n1 2 2 2\\n\") == \"3\"\nassert solution(\"18\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1\") == \"1\"\nassert solution(\"5\\n1 2 2 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n1 1 2') == '1'\nassert solution('1 1 1 1\\n1 1 2') == '2'\nassert solution('1 2 2 2\\n1 1 2') == '1'\nassert solution('1 2 2 2\\n1 1 2') == '0'\n"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1\") == '1'\nassert solution(\"5\\n1 2 2 2\") == '3'\nassert solution(\"18\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\") == '4'\n"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1\\n\") == 1\n\nassert solution(\"5\\n1 2 2 2\\n\") == 3\n\nassert solution(\"18\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\\n\") == 4\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1\") == \"1\"\nassert solution(\"5\\n1 2 2 2\") == \"3\"\nassert solution(\"18\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1') == 1\nassert solution('5\\n1 2 2 2') == 3\nassert solution('18\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4') == 4\n"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1\\n') == '1'\nassert solution('5\\n1 2 2 2\\n') == '3'\n\"\"\"\n\nimport sys\n\nsys.stdin = open(\"test.txt\")\ninput = sys.stdin.readline\n\nn = int(input())\n\ns = [int(i) for i in input().split()]\n\nout = 0\n\nfor i in range(1, n):\n    out += s[i]\n    s[i] = s[i - 1]\n\nprint(out)\n"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(5) == 3\nassert solution(1) == 1\n"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1\") == \"1\"\nassert solution(\"5\\n1 2 2 2\") == \"3\"\nassert solution(\"18\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\") == \"4\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 2\") == '2 4 1 5 3'\n\"\"\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 2\\n') == '2 4 1 5 3', 'Check your solution'\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\n\"\"\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\n\"\"\""
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\n\"\"\""
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2\\n\") == \"2 4 1 5 3\"\nassert solution(\"5 1 3\\n\") == \"5 1 3\"\nassert solution(\"5 2 3\\n\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 2\\n') == '2 4 1 5 3'\n\"\"\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'\n\"\"\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'\n"
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\""
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 6 9 18 36 108') == 'Yes'\nassert solution('7 17') == 'No'\nassert solution('9 4 8 10 12 15 18 33 44 81') == 'Yes'\n\nassert solution(input()) == 'Yes' or 'No'\n\n\"\"\"\n\nimport sys\n\n\nclass BinarySearchTree:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n    def __str__(self):\n        return str(self.data)\n\n    def insert(self, data):\n        if self.data == data:\n            return False\n        if data < self.data:\n            if self.left:\n                self.left.insert(data)\n            else:\n                self.left = BinarySearchTree(data)\n        else:\n            if self.right:\n                self.right.insert(data)\n            else:\n                self.right = BinarySearchTree(data)\n        return True\n"
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6 9 18 36 108\") == \"Yes\"\nassert solution(\"7 17\") == \"No\"\nassert solution(\"9 4 8 10 12 15 18 33 44 81\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n3 6 9 18 36 108\") == \"Yes\"\nassert solution(\"2\\n7 17\") == \"No\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n3 6 9 18 36 108') == 'Yes\\n'\nassert solution('2\\n7 17') == 'No\\n'\nassert solution('9\\n4 8 10 12 15 18 33 44 81') == 'Yes\\n'\n"
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\\\n3 6 9 18 36 108') == 'Yes'\nassert solution('2\\\\n7 17') == 'No'\nassert solution('9\\\\n4 8 10 12 15 18 33 44 81') == 'Yes'\n"
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n3 6 9 18 36 108') == 'Yes'\n\"\"\"\nfrom math import gcd\nfrom collections import deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = {}\n\n    def add_edge(self, u, v):\n        if u not in self.graph:\n            self.graph[u] = []\n\n        if v not in self.graph:\n            self.graph[v] = []\n\n        self.graph[u].append(v)\n        self.graph[v].append(u)"
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n3 6 9 18 36 108') == 'Yes'\nassert solution('2\\n7 17') == 'No'\nassert solution('9\\n4 8 10 12 15 18 33 44 81') == 'Yes'\n\"\"\""
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6 9 18 36 108\") == \"Yes\"\nassert solution(\"7 17\") == \"No\"\nassert solution(\"4 8 10 12 15 18 33 44 81\") == \"Yes\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 9 18 36 108\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6 9 18 36 108\") == \"Yes\"\nassert solution(\"2 7 17\") == \"No\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 1 3') == '6'\nassert solution('4\\n3 1 3 2') == '3'\n\"\"\""
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6\n1 2 -6 4 5 3\n''') == '12'\n\n'''\nYou should check if the array a is empty, and if it is return 0. Otherwise, you should find the maximum element of a and its index. Then you should iterate through the elements of a, and try to find the minimum element greater than the maximum element of a, and its index. You should check if the minimum element greater than the maximum element of a is not empty, and if it is not empty you should check if the minimum element greater than the maximum element of a is greater than the maximum element of a, and if it is then you should return the index of the minimum element greater than the maximum element of a, otherwise you should return -1.\n'''\n'''\nimport re"
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"6\n1 2 -6 4 5 3\n\"\"\") == \"12\"\n\"\"\""
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 -6 4 5 3') == '12'\n\n-----------"
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 2 -6 4 5 3\") == \"12\"\n\"\"\"\n\nimport math\n\n\"\"\"\nKey Observation:\nN - Number of gems\na_i - Value of the i'th gem\n\nArugement:\n- N - Number of gems\n- a_i - Value of the i'th gem\n\nSuccess Condition:\n- Must smash all N gems\n\n-----------------------------------------------------\n
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n1 2 -6 4 5 3') == '12'"
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4\\n1 2 -3 4\\n1 2 3 -4\\n1 2 3 4') == '14'\nassert solution('5\\n-1 1 1 -1 -1\\n1 1 1 -1 2\\n1 1 1 -1 2\\n-1 1 1 -1 2\\n1 1 1 -1 2') == '0'\nassert solution('10\\n-1 1 1 -1 2 3 -4 5 -5 -6 -7 7 -8 -9 10\\n1 1 1 -1 2 3 -4 5 -5 -6 -7 7 -8 -9 10\\n1 1 1 -1 2 3 -4 5 -5 -6 -7 7 -8 -9 10\\n-1 1 1 -1 2 3 -4 5 -5 -6 -7 7 -8 -9 10\\n1 1 1 -1 2 3 -4 5 -5 -6 -7 7 -8 -9 10') == '-210'\nassert solution('5\\n-1 1 1 -1 -1\\n1 1 1 -1 2\\n1 1 1 -1 2\\n-1 1 1 -1 2\\n1 1 1 -1 2') == '0'\nassert solution('6\\n-1 1 1 -1 2 3 -4 5 -5\\n1 1 1 -1 2 3 -4 5 -5\\n1 1 1 -1 2 3 -4 5 -5\\n-1 1 1 -1 2 3 -4 5 -5\\n1 1 1 -1 2 3 -4 5 -5\\n1 1 1 -1 2 3 -4 5 -5') == '-210'\n"
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 2 -6 4 5 3\") == \"12\"\n\"\"\"\n\n\"\"\"\nInput\n9\n1 2 3 4 -1 2 3 5 7 -1 2 3\n\nOutput\n19\n\"\"\"\n\n\"\"\"\nN = input()\ntargets = list(map(int, input().split()))"
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"6\\n1 2 -6 4 5 3\"\n) == \"12\"\n\"\"\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3\\n6\\n8\\n-5\\n-3') == '15\\n15'\n\"\"\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n3 1 4 2') == 5\n"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n3 1 4 2') == '5'\nassert solution('4 3\\n3 1 4 2\\n3 1 4 2\\n3 1 4 2') == '5'\nassert solution('4 3\\n3 1 4 2\\n3 1 4 2\\n3 1 4 2\\n3 1 4 2\\n3 1 4 2') == '5'\nassert solution('4 3\\n3 1 4 2\\n3 1 4 2\\n3 1 4 2\\n3 1 4 2\\n3 1 4 2\\n3 1 4 2\\n3 1 4 2\\n3 1 4 2\\n3 1 4 2') == '5'\n"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n3 1 4 2') == 5\n\"\"\"\nimport sys"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n3 1 4 2') == 5\nassert solution('4 4\\n1 2 3 4') == 3\n\"\"\""
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n3 1 4 2\") == \"5\"\n\nassert solution(\"5 4\\n4 5 1 3 2 3\") == \"3\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n3 1 4 2') == 5\n\"\"\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n3 1 4 2\") == 5\nassert solution(\"5 5\\n2 5 4 3 1\") == 0\n\"\"\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 4 2') == 5\nassert solution('4 3') == 2\n\"\"\"\nfrom typing import List\n\na: List[int] = list(map(int, stdin.readline().split(' ')))\nn: int = a[0]\nT: int = a[1]\n\nmax_num: int = 0\n\nfor i in range(n, 0, -1):\n    max_num = max(max_num, i - n)\n    if i - 1 == 0:\n        break\n    else:\n        if T > (a[i - 1] - n):\n            continue\n        else:\n            break\nprint(max_num)\n"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n3 1 4 2\\n\") == 5\n\"\"\""
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n3 1 4 2\") == 5\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/52597aa56021e91c93000cb0/train/python\n\nHi, here's your problem today. This problem was recently asked by Microsoft:\n\nA cryptarithm is a mathematical puzzle for which the goal is to find the correspondence between letters and digits, such that the given arithmetic equation consisting of letters holds true when the letters are converted to digits.\n\nYou have an array of strings crypt, the cryptarithm, and an an array containing the mapping of letters and digits, solution. The array crypt will contain three non-empty strings that follow the structure: [word1, word2, word3], which should be interpreted as the word1 + word2 = word3 cryptarithm.\n\nIf crypt, when it is decoded by replacing all of the letters in the cryptarithm with digits using the mapping in solution, becomes a valid arithmetic equation containing no numbers with leading zeroes, the answer is true. If it does not become a valid arithmetic solution, the answer is false.\n\nNote that number 0 doesn't contain leading zeroes (while for example 00 or 0123 do).\n\nExample\n\nFor crypt = [\"SEND\", \"MORE\", \"MONEY\"] and\n\nsolution = [['O', '0'],\n            ['M', '1'],\n            ['Y', '2'],\n            ['E', '5'],\n            ['N', '6'],\n            ['D', '7'],\n            ['R', '8'],\n            ['S', '9']]\nthe output should be\nisCryptSolution(crypt, solution) = true.\n\nWhen you decrypt \"SEND\", \"MORE\", and \"MONEY\" using the mapping given in crypt, you get 9567 + 1085 = 10652 which is correct and a valid arithmetic equation.\n\nFor crypt = [\"TEN\", \"TWO\", \"ONE\"] and\n\nsolution = [['O', '1'],\n            ['T', '0'],\n            ['W', '9'],\n            ['E', '5'],\n            ['N', '4']]\nthe output should be\nisCryptSolution(crypt, solution) = false.\n\nEven though 054 + 091 = 145, 054 and 091 both contain leading zeroes, meaning that this is not a valid solution.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.string crypt\n\nA non-empty array of non-empty strings.\n\nGuaranteed constraints:\n3 \u2264 crypt.length \u2264 10,\n3 \u2264 crypt[i].length \u2264 10.\n\n[input] array.array.char solution\n\nA non-empty array that contains mappings of a character to an integer. For example, if the cryptarithm contains \"A\", then there should be \"0\" mapping, and \"B\" mapping such that \"A\" + \"B\" = \"0\", etc.\n\nGuaranteed constraints:\nsolution.length = 26,\nsolution[i].length = 1.\n\n[output] boolean\n\ntrue if the the mapping is valid, false otherwise.\n\"\"\""
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 3 1\") == \"0 1\"\nassert solution(\"1\\n1 2 3\") == \"0 0\"\nassert solution(\"2\\n1 3 2\") == \"2 1\"\nassert solution(\"3\\n3 2 1\") == \"2 1\"\n\n\"\"\""
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 3 1') == '0 1'\nassert solution('3\\n3 2 1') == '2 1'\n\n--------------------------------------------------\n"
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2 1') == '2 1'\nassert solution('3 2 3 1') == '0 1'\nassert solution('3 1 3 2') == '2 1'\nassert solution('1 2 3') == '0 0'\n"
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 3 1\") == '0 1'\nassert solution(\"3\\n3 2 1\") == '2 1'\nassert solution(\"3\\n3 1 2\") == '1 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2 1\") == \"0 1\"\n\"\"\"\nimport sys\nimport itertools\n\nsys.stdin = open('input.txt')\n"
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == \"2 1\"\nassert solution(\"3 3 1\") == \"0 1\"\nassert solution(\"5 3 2 1 4\") == \"3 1\"\nassert solution(\"5 3 1 4 2\") == \"2 1\"\nassert solution(\"3 4 2 1\") == \"2 1\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0 0\"\nassert solution(\"3\\n2 3 1\") == \"0 1\"\nassert solution(\"3\\n3 1 2\") == \"2 1\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0 0\"\nassert solution(\"3\\n2 3 1\") == \"0 1\""
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0 0\"\nassert solution(\"3\\n2 3 1\") == \"0 1\"\nassert solution(\"3\\n3 2 1\") == \"2 1\"\n\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0 0\"\nassert solution(\"3\\n2 3 1\") == \"0 1\"\nassert solution(\"3\\n3 2 1\") == \"2 1\""
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aabb') == 6\nassert solution('aaaabb') == 8\nassert solution('aaaaaa') == 10\nassert solution('aaaabb') == 8\n\n\"\"\"\n"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abba\") == 4\nassert solution(\"abbabbaa\") == 10\nassert solution(\"ababababab\") == 12\nassert solution(\"baaaaaaaabaaab\") == 16\n\nassert solution(\"baaaaaaabaaba\") == 16"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4\") == 6\nassert solution(\"3 3\") == 8\nassert solution(\"4 5\") == 8\n\"\"\"\n"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aa') == 6\nassert solution('abb') == 8\nassert solution('aba') == 8\nassert solution('baa') == 8\nassert solution('bba') == 8\n"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aabbaabbbb\") == 6\n\"\"\"\n\nn, k = list(map(int, stdin.readline().split()))\n\ns, t = stdin.readline().strip(), stdin.readline().strip()\n\nn_s = len(s)\nn_t = len(t)\n\nprint(max([n_s - i for i in range(n_s + 1) if s[:i] in t] + [n_t - i for i in range(n_t + 1) if t[:i] in s]))\n"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aa\") == 6\nassert solution(\"aaa\") == 6\nassert solution(\"aaaab\") == 6\nassert solution(\"aaabb\") == 6\nassert solution(\"aabbb\") == 6\n"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abbb\\nbaaa\") == 8\n"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s) == result\n"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s=\"aba\", t=\"bba\") == 8\nassert solution(s=\"abbb\", t=\"baaa\") == 8\nassert solution(s=\"abba\", t=\"baaa\") == 6\nassert solution(s=\"abbb\", t=\"baa\") == 6\nassert solution(s=\"aaa\", t=\"a\") == 1\n"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\naa\\nbb\") == \"6\"\nassert solution(\"3 3\\naba\\nbba\") == \"8\"\nassert solution(\"4 5\\nabb\\nbaa\") == \"8\"\nassert solution(\"5 6\\nabaa\\nbaaa\\nabbaa\\nbaaab\\nbbaaa\") == \"10\"\nassert solution(\"1 6\\nabaa\\nbaaa\\nabbaa\\nbaaab\\nbbaaa\") == \"7\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'YES'\nassert solution('0 0 0\\n0 0 1') == 'YES\\n0 1 1\\n1 0 1\\n0 0 1\\n1 1 1\\n1 1 1\\n1 1 1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"YES\\n0 0 0\\n1 0 0\\n1 1 1\\n1 0 1\\n0 1 1\\n0 1 1\\n0 0 1\\n1 0 1\"\n\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n1 1 1\") == \"YES\\n0 0 0\\n0 0 1\\n0 1 0\\n1 0 0\\n1 1 1\\n1 1 1\"\n\nprint(solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\"))\nprint(solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 1\\n1 0 1\\n1 1 1\"))\nprint(solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 0 1\\n1 1 1\"))\nprint(solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 0 1\\n1 1 1\"))\nprint(solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 1\\n1 1 1\\n1 1 1\"))\nprint(solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 1\\n1 1 1\\n1 1 1\"))\nprint(solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 1\\n1 0 1\\n1 1 1\"))\nprint(solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 1\\n1 0 1\\n1 1 1\"))\nprint(solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 1\\n1 0 1\\n1 1 1\"))\nprint(solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 0 1\\n1 1 1\"))\nprint(solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 0 1\\n1 1 1\"))\nprint(solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 0 1\\n1 1 1\"))\nprint(solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 0 1\\n1 1 1\"))\n\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 1 1\\n1 0 1\\n1 1 1\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 1\\n1 0 1\\n1 1 1\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 0 1\\n1 1 1\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 1\\n1 0 1\\n1 1 1\") == \"NO\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\") == \"YES\\n0 0 0\\n0 0 1\\n0 1 0\\n1 0 0\\n1 1 1\\n1 0 1\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\") == \"YES\\n0 0 0\\n0 0 0\\n0 1 1\\n1 0 1\\n1 0 1\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\n\nassert solution(\"0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''0 0 0\n0 0 1\n0 0 1\n0 0 1\n0 1 1\n0 1 1\n1 1 1\n1 1 1\n''') == 'YES\\n0 0 0\\n0 0 1\\n0 1 0\\n1 0 1\\n1 0 1\\n1 1 1\\n1 1 1'''\n"
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n0 0 0\n0 0 1\n0 0 1\n0 0 1\n0 1 1\n0 1 1\n1 1 1\n1 1 1\n''') == 'YES'\n\nassert solution('''\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == 'YES'\n\nassert solution('''\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == 'NO'\n\nassert solution('''\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n''') == 'NO'\n\nassert solution('''\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n''') == 'NO'"
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == 'YES\\n0 0 0\\n0 0 0\\n1 0 0\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1'\n"
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\") == \"YES\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 1\\n1 0 1\\n1 1 1\\n1 1 1\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\") == \"YES\\n0 0 0\\n0 0 1\\n1 0 1\\n0 0 1\\n0 1 1\\n1 0 1\\n1 1 1\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\nassert solution(\"1 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\") == \"YES\\n0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\"\nassert solution(\"0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"YES\\n0 0 0\\n0 0 0\\n1 0 1\\n0 0 1\\n0 0 1\"\n\n\"\"\""
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\") == 'YES'\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\") == 'NO'\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 0\\n1 1 1\\n1 1 1\") == 'NO'\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 0\\n1 0 0\\n1 1 1\") == 'NO'\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 0\\n1 1 1\") == 'NO'\n"
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 6 7\") == \"YES\\n2 2 1 1\"\nassert solution(\"5 6 15 1000 75\") == \"YES\\n2 1 2 1 1\"\nassert solution(\"6 10 15 1000 75\") == \"NO\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 6 7\") == \"YES\\n2 2 1 1\"\nassert solution(\"5\\n6 15 35 77 22\") == \"YES\\n2 1 2 1 1\"\n\"\"\""
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 6 7\") == \"YES\\n2 2 1 1\"\nassert solution(\"5\\n6 15 35 77 22\") == \"YES\\n2 1 2 1 1\"\nassert solution(\"5\\n6 10 15 1000 75\") == \"NO\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 6 7\\n') == 'YES\\n2 2 1 1'\n"
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 6 7\") == \"YES\\n2 2 1 1\"\nassert solution(\"5\\n6 15 35 77 22\") == \"YES\\n2 1 2 1 1\"\nassert solution(\"5\\n6 10 15 1000 75\") == \"NO\"\nassert solution(\"5\\n6 10 15 1000 75\\n\") == \"NO\"\n\nprint('Hooray!')\n"
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 6 7\") == \"YES\\n2 2 1 1\"\n\"\"\"\n\nfrom math import gcd\n\nn = int(stdin.readline())\n\nintegers = list(map(int, stdin.readline().split()))\n\nintegers.sort()\n\nfirst_group_gcd = gcd(integers[0], gcd(integers[1], integers[2]))\n\nsecond_group_gcd = gcd(integers[3], gcd(integers[4], integers[5]))"
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 6 7\") == \"YES\\n2 2 1 1\"\n\"\"\"\n\nn = int(stdin.readline())\narr = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 6 7\") == \"YES\\n2 2 1 1\"\nassert solution(\"6 15 35 77 22\") == \"YES\\n2 1 2 1 1\"\nassert solution(\"6 10 15 1000 75\") == \"NO\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\na = [int(s) for s in sys.stdin.readline().strip().split()]\n\ngcd_list = list()\nfor i in range(N):\n    for j in range(i + 1, N):\n        gcd_list.append(gcd(a[i], a[j]))\n\ngcd_list.sort()"
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 6 7\") == \"YES\\n2 2 1 1\"\nassert solution(\"5\\n6 15 35 77 22\") == \"YES\\n2 1 2 1 1\"\n\n\"\"\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 6 7\") == \"YES\\n2 2 1 1\"\nassert solution(\"6 15 35 77 22\") == \"YES\\n2 1 2 1 1\"\nassert solution(\"5 6 15 1000 75\") == \"NO\\n2 1 2 1 1\"\n\nprint(\"Well done!\")\n\"\"\"\n\nimport os,sys\n\nclass GCD:\n\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n    \n    def gcd(self):\n        divisor = 1\n        while divisor < min(self.a, self.b):\n            divisor += 1\n            if self.a % divisor == 0 and self.b % divisor == 0:\n                return divisor\n        return max(self.a, self.b)\n\n    def gcd2(self):\n        divisor = 1\n        while divisor < min(self.a, self.b):\n            divisor += 1\n            if self.a % divisor == 0 and self.b % divisor == 0:\n                return divisor\n        return divisor\n\n    def solution(self):\n        if self.gcd2() == min(self.a, self.b):\n            return \"YES\\n\" + str(self.gcd2()) + \" \" + str(self.gcd2()) + \" \" + str(self.gcd2()) + \" \" + str(self.gcd2())\n        return \"NO\\n\" + str(self.gcd2()) + \" \" + str(self.gcd2()) + \" \" + str(self.gcd2()) + \" \" + str(self.gcd2())"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100\\n60\\n70\") == \"40\"\nassert solution(\"410\\n55\\n70\") == \"5\"\nassert solution(\"600\\n60\\n70\") == \"0\"\n\nimport os\nimport io\nimport collections as cl\nimport sys\n\npath = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'input.txt')"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100\\n60\\n70\") == \"40\"\nassert solution(\"410\\n55\\n70\") == \"5\"\nassert solution(\"600\\n60\\n70\") == \"0\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100') == '40'\nassert solution('410') == '5'\nassert solution('600') == '0'\n\n\n\nimport sys\n\nlines = sys.stdin.readlines()\nn, d, e = map(int, lines[0].strip().split())"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100\\n60\\n70\") == \"40\"\nassert solution(\"410\\n55\\n70\") == \"5\"\nassert solution(\"600\\n60\\n70\") == \"0\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100\\n60\\n70') == '40'\nassert solution('410\\n55\\n70') == '5'\nassert solution('600\\n60\\n70') == '0'"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100') == '40'\nassert solution('410') == '5'\nassert solution('600') == '0'\nassert solution('1') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100\\n60\\n70') == '40'\nassert solution('410\\n55\\n70') == '5'\nassert solution('600\\n60\\n70') == '0'\n"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100\\n60\\n70\") == \"40\"\nassert solution(\"410\\n55\\n70\") == \"5\"\nassert solution(\"600\\n60\\n70\") == \"0\"\n\"\"\""
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"100\"\n    \"60\"\n    \"70\"\n) == \"40\"\nassert solution(\n    \"410\"\n    \"55\"\n    \"70\"\n) == \"5\"\nassert solution(\n    \"600\"\n    \"60\"\n    \"70\"\n) == \"0\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100\\n60\\n70') == '40'\nassert solution('410\\n55\\n70') == '5'\nassert solution('600\\n60\\n70') == '0'\nassert solution('100\\n60\\n70') == '40'\nassert solution('410\\n55\\n70') == '5'\n"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''12\n3 1 4 1 5 9 2 6 5 3 5 8''') == '12\\n3 4\\n1 2 3 5\\n3 1 5 4\\n5 6 8 9'\n\nassert solution('''5\n1 1 1 1 1''') == '1\\n1 1\\n1\\n1\\n1'\n\nprint('Success')"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n3 1 4 1 5 9 2 6 5 3 5 8') == '12\\n3 4'\nassert solution('4 10\\n3 1 4 1 5 9 2 6 5 3 5 8') == '12\\n3 4'\n\"\"\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12 34 56 78 90') == '12', 'error'\nassert solution('1 1 1 1 1') == '1', 'error'\nassert solution('5 5 5 5 5') == '1', 'error'\nassert solution('1 2 3 4 5') == '1', 'error'\nassert solution('9 8 7 6 5') == '1', 'error'\n\"\"\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12') == '12 3 4'\nassert solution('5') == '5 1 1 1'\n\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 4 1 5 9 2 6 5 3 5 8\") == '12 3 4'\n\"\"\"\nfrom tools import timing\n\n@timing\n"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\\n3 1 4 1 5 9 2 6 5 3 5 8\") == \"12\\n3 4\\n1 2 3 5\\n3 1 5 4\\n5 6 8 9\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"12\\n3 1 4 1 5 9 2 6 5 3 5 8\"\n) == \"12\\n3 4\\n1 2 3 5\\n3 1 5 4\\n5 6 8 9\"\n\nassert solution(\n    \"5\\n1 1 1 1 1\"\n) == \"1\\n1 1\\n1\\n1\"\n\"\"\""
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 3 1 4 1 5 9 2 6 5 3 5 8\") == \"12\\n3 4\\n1 2 3 5\\n3 1 5 4\\n5 6 8 9\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom functools import reduce\nfrom operator import mul\nimport re"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 7\") == \"4 3\"\n\"\"\""
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12 3 1 4 1 5 9 2 6 5 3 5 8\") == \"12\\n3 4\\n1 2 3 5\\n3 1 5 4\\n5 6 8 9\"\nassert solution(\"5 1 1 1 1\") == \"1\\n1 1\\n1\"\n\"\"\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n1 3 3\") == 6\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 3 3\\n2 4 1\") == \"6\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3 1\n1 3 3\n''') == '6'\n\n\"\"\""
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(':') == '1'\nassert solution('1 1 1') == '1'\nassert solution('1 3 1') == '4'\nassert solution('1 3 2') == '0'\nassert solution('4 1 1') == '10'\n"
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n1 3 3\\n\") == 6\n\"\"\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 2 2\\n1 3 1\") == \"10\"\nassert solution(\"2 3\\n1 2 1\\n1 3 1\") == \"6\"\nassert solution(\"2 3\\n1 1 1\\n1 1 1\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n1 3 3\") == \"6\"\n\n\"\"\"\n\n\nimport itertools"
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n1 3 3\") == \"6\"\nassert solution(\"4 2\\n1 3 2 3\") == \"6\"\nassert solution(\"3 2\\n1 2 1\") == \"1\"\nassert solution(\"3 3\\n1 1 1\") == \"1\"\n\nimport re\nfrom collections import Counter"
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n1 3 3\") == 6"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('87654\\n30') == '10'\n\"\"\"\nimport sys"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('87654', '30') == '10'\nassert solution('987654', '108') == '-1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"87654\\n30\") == \"10\"\n\"\"\"\n\nn, s = [int(n) for n in stdin.split()]\n\nb = 2\nwhile True:\n    if n < b:\n        break\n    if n % b == 0:\n        n = n // b\n    else:\n        b += 1\n        continue"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('87654\\n30') == '10'\n\"\"\""
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"87654\\n30\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('87654', '30') == '10'\n\"\"\"\n\nn, s = list(map(int, input().split()))\n\nmin_b, max_b = 2, 10 ** 11\nmin_l = max_l = 0\n\nfor b in range(min_b, max_b):\n    l = 0\n    for n in str(n):\n        l += int(n)\n    while l:\n        l, r = divmod(l, b)\n        if r == s:\n            return b\n        if r > s:\n            break\n    if b == max_b - 1:\n        if l == s:\n            return b\n    elif r!= 0:\n        if r < min_l:\n            min_l, min_b = r, b\n            break\n        if r > max_l:\n            max_l, max_b = r, b\n\nprint(-1)\n"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"87654\\n30\") == \"10\"\n\"\"\"\n\nfrom math import log10"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('87654\\n30') == '10'\n\"\"\"\n\n\"\"\"\nUnderstand:\n- do we need to return the smallest b?\n- f(b,n) = n, when n < b\n- f(b,n) = f(b,\\,{\\rm floor}(n / b)) + (n \\ {\\rm mod} \\ b), when n \\geq b\n- at the beginning, we have that n < b, so f(b,n) = n\n- the floor function will only return the largest value less than or equal to n / b\n- and the modulo function will return the remainder when n is divided by b\n\nMatch:\n- f(b,n) = n, when n < b\n- f(b,n) = f(b,\\,{\\rm floor}(n / b)) + (n \\ {\\rm mod} \\ b), when n \\geq b\n- we know that n < b, so n is less than f(b,n)\n- so the number of digits is less than the function f(b,n)\n- therefore the number of digits is less than the sum of the digits of n\n\nPlan:\n- check if n < b\n- if n < b, then f(b,n) = n\n- if n > b, then f(b,n) = f(b,floor(n/b)) + (n mod b)\n- if f(b,n) is greater than s, then there is no such b that equals s\n- if f(b,n) is less than s, then the smallest b is b\n- if f(b,n) = s, then there is a smallest b that equals s\n\nExecute:\n- read input\n- check if n < b\n- if n < b, then f(b,n) = n\n- if n > b, then f(b,n) = f(b,floor(n/b)) + (n mod b)\n- if f(b,n) is greater than s, then there is no such b that equals s\n- if f(b,n) is less than s, then the smallest b is b\n- if f(b,n) = s, then there is a smallest b that equals s\n\nTest:\n- check if f(b,n) = s\n- if f(b,n) = s, then there is a smallest b that equals s\n\"\"\"\n\nimport math"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('87654\\n30') == '10'\n\"\"\"\n\nn, s = map(int, stdin.split())\n\nb = 2\nwhile True:\n    sum = 0\n    for i in str(n):\n        sum += int(i)\n    if sum == s:\n        print(b)\n        break\n    else:\n        b += 1\n        n = n//b\n        if n == 0:\n            print('-1')\n            break\n"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"87654\\n30\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aba') == 'First'\n\nassert solution('abc') == 'Second'\n\nassert solution('abab') == 'First'\n\nassert solution('abbc') == 'Second'\n\nassert solution('abcb') == 'First'"
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"First\"\nassert solution(\"cba\") == \"Second\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(s=\"aba\") == \"Second\"\n\nsolution(s=\"abc\") == \"First\"\n\nsolution(s=\"abccba\") == \"First\"\n\nsolution(s=\"abcccba\") == \"Second\"\n\nsolution(s=\"a\") == \"Second\"\n\"\"\"\n\ns = input()\n"
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"First\"\nassert solution(\"aabb\") == \"Second\"\nassert solution(\"abab\") == \"First\"\nassert solution(\"ababb\") == \"Second\"\n\"\"\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"Second\"\nassert solution(\"abc\") == \"First\"\nassert solution(\"abca\") == \"First\"\n\"\"\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 'Second'\n\n\"\"\""
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"First\"\nassert solution(\"abc\") == \"Second\"\nassert solution(\"abcb\") == \"First\"\nassert solution(\"abccbaabccba\") == \"Second\"\nassert solution(\"abccbaabccba\") == \"First\"\n\n\"\"\""
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aba') == 'First'\nassert solution('bab') == 'Second'\nassert solution('a') == 'Second'\n\"\"\""
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aba\") == \"First\"\nassert solution(\"cba\") == \"Second\"\n\"\"\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"First\"\nassert solution(\"abca\") == \"Second\"\nassert solution(\"abbc\") == \"First\"\n\n\"\"\""
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a) == expected\n\"\"\"\n\na = int(input())\ns = input()\n\ns_set = set(s)\n\nmatrix = []\nfor i in range(1, len(s) + 1):\n    row = []\n    for j in range(1, len(s) + 1):\n        row.append(s[i - 1] * s[j - 1])\n    matrix.append(row)\n\nrects = 0\nfor i in range(1, len(s) + 1):\n    for j in range(1, len(s) + 1):\n        need = matrix[i - 1][j] + matrix[i][j - 1] - matrix[i - 1][j - 1]\n        if need == a:\n            rects += 1\n\nprint(rects)\n"
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12345\") == 5\n\"\"\""
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1123') == 1\nassert solution('1233') == 3\nassert solution('1234') == 3\nassert solution('12345') == 5\nassert solution('123456') == 1\n"
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12345') == 6\nassert solution('439873893693495623498263984765') == 40\n\"\"\"\nimport math\n"
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12345') == 6\n\"\"\"\n"
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12345\") == 5\n\"\"\"\n\nimport re\n\nn = int(input())\n\nmatrix = [input() for _ in range(n)]\n\nanswer = 0\nfor i in range(n):\n    for j in range(n):\n        for k in range(j, n):\n            sub_matrix = re.findall(f'{matrix[i][j]}', matrix[i][k])\n            if len(sub_matrix) == 1:\n                answer += 1\nprint(answer)\n"
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == 1\nassert solution(\"12345\") == 6\nassert solution(\"439873893693495623498263984765\") == 40\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12345') == 6\n\"\"\"\n\na = int(stdin.readline())\ns = stdin.readline()\n\nm = {}\n\nfor i in range(len(s) - 1):\n    a = int(s[i])\n    if i + 1 < len(s) - 1:\n        b = int(s[i + 1])\n    else:\n        b = int(s[0])\n    if a not in m:\n        m[a] = {}\n    if b not in m:\n        m[b] = {}\n    if a not in m[b]:\n        m[a][b] = 1\n    else:\n        m[a][b] += 1\n    if b not in m[a]:\n        m[b][a] = 1\n    else:\n        m[b][a] += 1\n\ncount = 0\nfor a in m:\n    for b in m[a]:\n        count += min(m[a][b], m[b][a])\nprint(count)\n"
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12345') == 6\nassert solution('439873893693495623498263984765') == 40\n"
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == 1\nassert solution(\"439873893693495623498263984765\") == 40\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n0 1\\n2 1') == '332748119'\nassert solution('1 2\\n1\\n1') == '3'\nassert solution('3 3\\n0 1 1\\n4 3 5') == '160955686'\n\n\"\"\"\n\nfrom math import gcd\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 1 1\\n2 3 5') == '974061117'\nassert solution('1 2\\n1\\n2') == '3'\nassert solution('1 2\\n2\\n1') == '2'\nassert solution('1 2\\n0\\n1') == '2'\nassert solution('2 2\\n0\\n0') == '2'\n"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 5\") == \"160955686\"\n\n\"\"\"\n"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n2 1\") == \"332748119\"\nassert solution(\"1 2\\n4 3\") == \"3\"\nassert solution(\"3 3\\n1 1 1\") == \"160955686\"\n\"\"\""
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\n0 1\\n2 1') == '332748119'\nassert solution('3 3\\n0 1 1\\n4 3 5') == '160955686'\n"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n0 1\\n2 1\") == \"332748119\"\nassert solution(\"1 2\\n1\") == \"3\"\nassert solution(\"3 3\\n0 1 1\\n4 3 5\") == \"160955686\"\nassert solution(\"2 2\\n1\") == \"3\"\n"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n0 1 1\\n4 3 5') == '160955686'\nassert solution('2 1\\n0 1') == '332748119'\nassert solution('1 2\\n1') == '3'\n\n\n\"\"\""
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(sys.stdin.read())) == str(sys.stdin.read())\n\n\"\"\"\n"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1\") == \"3\"\nassert solution(\"3 3 5\") == \"974061117\"\n\n\"\"\"\n"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n0 1\\n2 1\") == \"332748119\\n\"\nassert solution(\"1 2\\n1\") == \"3\\n\"\nassert solution(\"3 3\\n0 1 1\") == \"160955686\\n\"\nassert solution(\"3 3\\n4 3 5\") == \"974061117\\n\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\n---\n\nclass Solution:\n    def find_LCS_length(self, s1: str, s2: str) -> int:\n        \"\"\"\n        DP\n        \"\"\"\n        m, n = len(s1), len(s2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = 1 + dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]"
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\", \"OVGURWZLWVLUXTH\", \"OZ\") == \"ORZ\"\nassert solution(\"AJKESLOBSROFGZ\", \"AJKEQSLOBSROFGZ\", \"OZ\") == \"JKESLOBSROFGZ\"\nassert solution(\"AA\", \"A\", \"A\") == \"0\"\nassert solution(\"ABCDGH\", \"AEDFHR\", \"Z\") == \"0\"\n\n\"\"\"\n\nfrom math import inf\n\nclass Solution:\n    def lcs_aux(self, str1, str2):\n        #Find the longest common subsequence for str1 and str2\n        #O(nm) time | O(nm) space\n        memo = [[None for _ in range(len(str2)+1)] for _ in range(len(str1)+1)]\n        for i in range(len(str1)+1):\n            for j in range(len(str2)+1):\n                if i == 0 or j == 0:\n                    memo[i][j] = 0\n                elif str1[i-1] == str2[j-1]:\n                    memo[i][j] = 1 + memo[i-1][j-1]\n                else:\n                    memo[i][j] = max(memo[i-1][j], memo[i][j-1])\n        return memo[len(str1)][len(str2)]\n\n    def lcs(self, str1, str2):\n        #O(nm) time | O(min(n, m)) space\n        if len(str1) < len(str2):\n            return self.lcs(str2, str1)\n\n        #Start at the ends and go inward\n        memo = [[None for _ in range(len(str1)+1)] for _ in range(len(str2)+1)]\n        for i in range(len(str2)+1):\n            for j in range(len(str1)+1):\n                if i == 0 or j == 0:\n                    memo[i][j] = 0\n                elif str1[j-1] == str2[i-1]:\n                    memo[i][j] = 1 + memo[i-1][j-1]\n                else:\n                    memo[i][j] = max(memo[i-1][j], memo[i][j-1])\n\n        return memo[len(str2)][len(str1)]\n\n    def lcs_tab(self, str1, str2):\n        #O(nm) time | O(nm) space\n        memo = [[None for _ in range(len(str2)+1)] for _ in range(len(str1)+1)]\n        for i in range(len(str1)+1):\n            for j in range(len(str2)+1):\n                if i == 0 or j == 0:\n                    memo[i][j] = 0\n                elif str1[i-1] == str2[j-1]:\n                    memo[i][j] = memo[i-1][j-1] + 1\n                else:\n                    memo[i][j] = max(memo[i-1][j], memo[i][j-1])\n        return memo[len(str1)][len(str2)]\n\n    def lcs_tab_opt(self, str1, str2):\n        #O(min(m, n)) time | O(min(m, n)) space\n        if len(str1) < len(str2):\n            return self.lcs_tab(str2, str1)\n\n        #Start at the ends and go inward\n        memo = [0 for _ in range(len(str1)+1)]\n        for i in range(len(str1)+1):\n            for j in range(len(str2)+1):\n                if i == 0 or j == 0:\n                    continue\n                elif str1[i-1] == str2[j-1]:\n                    memo[i] = 1 + memo[i-1]\n                else:\n                    memo[i] = max(memo[i-1], memo[i])\n        return memo[len(str1)]\n"
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\", \"OVGURWZLWVLUXTH\", \"OZ\") == \"ORZ\"\n\"\"\"\n\n\n\"\"\"\nSolution 1\n\nimport collections"
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AJKEQSLOBSROFGZ', 'OVGURWZLWVLUXTH', 'OZ') == 'ORZ'"
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\", \"OVGURWZLWVLUXTH\", \"OZ\") == \"ORZ\"\nassert solution(\"AA\", \"A\", \"A\") == 0\n\n'''\n"
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\\n\"\n\"OVGURWZLWVLUXTH\\n\"\n\"OZ\") == \"ORZ\"\n\nassert solution(\"AA\\n\"\n\"A\\n\"\n\"A\") == \"0\"\n\nassert solution(\"AAAAA\\n\"\n\"AAAAA\\n\"\n\"AAAAA\") == \"AAAAA\"\n\nassert solution(\"AAAAA\\n\"\n\"AAAAA\\n\"\n\"AAAAA\\n\"\n\"AAAAA\") == \"AAAAA\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\\nOZ\") == \"ORZ\"\nassert solution(\"AJKEQSLOBSROFGZ\\nOZ\\n\") == \"ORZ\"\nassert solution(\"AA\\nA\\nA\") == \"0\"\nassert solution(\"AA\\nA\\nA\\n\") == \"0\"\nassert solution(\"AJKEQSLOBSROFGZ\\nOZ\\nS\") == \"0\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s_1) == output\nassert solution(s_2) == output\nassert solution(virus) == output\n"
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCDGH\", \"AEDFHR\") == \"ADH\"\nassert solution(\"AGGTAB\", \"GXTXAYB\") == \"GTAB\"\nassert solution(\"ABCDGH\", \"AEDFHR\") == \"ADH\"\n\"\"\""
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\",\"OVGURWZLWVLUXTH\",\"OZ\") == \"ORZ\"\n\"\"\"\n\nimport sys\n\nclass Solution:\n    \"\"\"\n    https://www.hackerrank.com/challenges/ctci-ransom-note/problem\n    \"\"\"\n    def __init__(self):\n        self.cache = {}\n\n    def solution(self, s_1: str, s_2: str, virus: str) -> int:\n        \n        def _cache_lcs(x: str, y: str) -> int:\n            if x == \"\" or y == \"\":\n                return 0\n            elif x + \"-\" + y in self.cache:\n                return self.cache[x + \"-\" + y]\n            else:\n                if x[-1] == y[-1]:\n                    self.cache[x + \"-\" + y] = _cache_lcs(x[:-1], y[:-1]) + 1\n                else:\n                    self.cache[x + \"-\" + y] = max(\n                        _cache_lcs(x, y[:-1]), \n                        _cache_lcs(x[:-1], y)\n                    )\n                return self.cache[x + \"-\" + y]\n        \n        if virus in s_1 or virus in s_2:\n            return 0\n        return _cache_lcs(s_1, s_2)"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"100 100 100\") == \"0\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\nstdin = list(map(int, input().split()))\nprint(sum(stdin[3:-1]) - min(0, stdin[0] - stdin[1], stdin[1] - stdin[2]))"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\") == \"99\"\nassert solution(\"100 100 100\\n1 1 1\\n1 1 1\") == \"0\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 1') == '99'\nassert solution('100 100 100') == '0'\n"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\") == \"99\"\nassert solution(\"100 100 100\\n1 1 1\\n1 1 1\") == \"0\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 100 100 1 1 1\") == \"0\"\nassert solution(\"1 1 1 1 1 1\") == \"0\"\nassert solution(\"1 100 1 1 1\") == \"99\"\nassert solution(\"1 100 100 1 1\") == \"100\"\nassert solution(\"1 100 100 1 1\") == \"99\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\") == \"99\"\nassert solution(\"100 100 100\\n1 1 1\\n1 1 1\") == \"0\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\") == \"99\"\nassert solution(\"100 100 100\\n1 1 1\\n1 1 1\") == \"0\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"100 100 100\") == \"0\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"100 100 100\") == \"0\"\nassert solution(\"1 100 1\") == \"99\"\n\"\"\"\n\n\n\nimport math"
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1 1''') == '1'\nassert solution('''3 2''') == '1'\nassert solution('''3 3''') == '0'\nassert solution('''1000000000000 1048576''') == '118606527258'\n\"\"\"\n\nn, t = input().split()\nn = int(n)\nt = int(t)\n\nnums = 0\nfor i in range(n + 1):\n    if i == 0:\n        continue\n    elif (i ^ i) + 1 == t:\n        nums += 1\n\nprint(nums)\n"
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4') == '1'\nassert solution('3 2') == '0'\n\"\"\""
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n\") == \"1\"\nassert solution(\"3 2\\n\") == \"1\"\nassert solution(\"3 3\\n\") == \"0\"\nassert solution(\"1000000000000 1048576\\n\") == \"118606527258\"\nassert solution(\"5 4\\n\") == \"1\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('3 2\\n') == '1'\nassert solution('3 3\\n') == '0'\n\n\"\"\""
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"1000000000000 1048576\") == \"118606527258\"\nassert solution(\"1000000000000 1048576\") == \"118606527258\""
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 2''') == '''1'''\n\"\"\"\n\nn, t = map(int, stdin.readline().split())\n\nprint(sum(1 for i in range(n) if (t ^ i) % 2 == 0))\n"
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 2''') == '1'\nassert solution('''3 3''') == '0'\nassert solution('''1000000000000 1048576''') == '118606527258'\n\nimport io\nimport pytest"
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\">1 1<\") == 1\n\"\"\"\n\nn, t = [int(x) for x in input().split(\" \")]\n\nresult = 0\n\nfor i in range(n):\n    if n & (1 << i):\n        result += 1\n\nprint(result if result < t else 0)"
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2''') == 1\nassert solution('''1 1''') == 1\nassert solution('''3 3''') == 0\nassert solution('''1 1000000000 1000000000''') == 118606527258\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2') == '1'\nassert solution('1 1') == '1'\nassert solution('3 3') == '0'\nassert solution('1000000000000 1048576') == '118606527258'\n"
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"++\") == \"Yes\"\nassert solution(\"+-\") == \"No\"\nassert solution(\"-\") == \"No\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('++') == 'Yes'\nassert solution('-') == 'No'\nassert solution('++') == 'Yes'\n\"\"\"\n\nclass Solution:\n    def __init__(self, s: str) -> None:\n        self.s = s\n        self.l = len(s)\n        self.tot = self.s.count('+')\n    \n    def is_valid(self, i: int) -> bool:\n        return sum([self.s[j] == '-' for j in range(i, self.l)]) <= self.tot - self.s[i].count('+')\n    \n    def is_valid_all(self) -> bool:\n        i = 0\n        while i < self.l:\n            if not self.is_valid(i):\n                return False\n            i += 1\n        return True"
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"++\") == \"Yes\"\nassert solution(\"-\") == \"No\"\nassert solution(\"+-\") == \"Yes\"\nassert solution(\"\") == \"Yes\"\nassert solution(\"-\") == \"No\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('+-') == 'No'\nassert solution('++') == 'Yes'\nassert solution('-') == 'No'\n\"\"\"\n\nfrom typing import List\nimport collections"
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"+-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"-\") == \"No\"\n\"\"\""
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"++\") == \"Yes\"\nassert solution(\"+-\") == \"No\"\nassert solution(\"-\") == \"No\"\n\n\"\"\"\n\n\nimport unittest\nimport math\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_case_1(self):\n        self.assertEqual(solution(\"++\"), \"Yes\")\n\n    def test_case_2(self):\n        self.assertEqual(solution(\"+-\"), \"No\")\n\n    def test_case_3(self):\n        self."
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"+-\") == \"No\"\nassert solution(\"--\") == \"No\"\nassert solution(\"-+++\") == \"No\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"+-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"-\") == \"No\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+-\") == \"Yes\"\nassert solution(\"+\") == \"No\"\nassert solution(\"-\") == \"No\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"-\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n0 1\n-1 2\n1 2''') == '12.566370614359172464'\n\n\"\"\"\n"
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 0 0\\n0 1\\n-1 2\\n1 2\\n\") == \"12.566370614359172464\"\n\"\"\""
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 0 0\\n0 1\\n-1 2\\n1 2\\n\") == '12.566370614359172464'\n\n\n----\n"
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 0 0\\n0 1\\n-1 2\\n1 2\") == '12.566370614359172464'\n\"\"\"\n\n\n\nimport math\n"
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 0 0\\n0 1\\n-1 2\\n1 2\") == \"12.566370614359172464\"\n"
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '7.5'\nassert solution('1 1 1') == '0'\n\nassert solution('0 0 0') == '0'\nassert solution('0 -1 0') == '1.5'\n"
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 0 0\\n0 1\\n-1 2\\n1 2\\n\") == \"12.566370614359172464\"\n\n\n\"\"\""
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\nassert solution('1 2 3\\n-1 2') == '12.566370614359172464'\n\nassert solution('3 3 -1\\n0 1\\n0 -1') == '21.991148575128551812'\n"
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 0 0\\n0 1\\n-1 2\\n1 2\\n') == '12.566370614359172464'\nassert solution('4 1 -1\\n0 0\\n1 2\\n2 0\\n1 1\\n') == '21.991148575128551812'\n\n\"\"\"\nimport itertools\nfrom typing import List\n"
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 0 0\\n0 1\\n-1 2\\n1 2\") == '12.566370614359172464'\n\nassert solution(\"4 1 -1\\n0 0\\n1 2\\n2 0\\n1 1\") == '21.991148575128551812'\n\n\"\"\""
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\") == \"7 7\"\nassert solution(\"5\") == \"5 5\"\nassert solution(\"1\") == \"1 1\"\nassert solution(\"8\") == \"8 8\"\nassert solution(\"12\") == \"12 12\"\n"
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('48') == '9 42'\nassert solution('6') == '6 6'\n\"\"\""
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '3 1'\nassert solution('4') == '3 1'\nassert solution('4') == '3 1'\nassert solution('4') == '3 1'\nassert solution('4') == '3 1'\n"
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"48\") == \"9 42\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"48\") == \"9 42\"\nassert solution(\"6\") == \"6 6\"\n\"\"\"\n\n\nfrom math import ceil\n"
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"24\") == \"9 42\"\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '0 0'\nassert solution('5') == '0 5'\nassert solution('7') == '1 6'\nassert solution('6') == '0 6'\nassert solution('7') == '1 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('23') == '9 42'\nassert solution('6') == '6 6'\n\"\"\"\nfrom math import ceil\n\nm = int(stdin.readline())"
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('48') == '9 42'\nassert solution('6') == '6 6'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == (0, 0)\nassert solution('6') == (6, 6)\nassert solution('1') == (1, 1)\nassert solution('9') == (9, 9)\nassert solution('48') == (9, 42)\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\")(\") == \"Yes\"\nassert solution(\"(()())\") == \"Yes\"\nassert solution(\"()\") == \"Yes\"\nassert solution(\"())(\") == \"No\"\nassert solution(\"(()())\") == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"(((()))))\") == \"Yes\"\nassert solution(\"((()))\") == \"Yes\"\nassert solution(\"((((((())))\") == \"No\"\nassert solution(\"(((((((()))\")) == \"No\"\nassert solution(\"()()\") == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"((((\") == \"No\"\nassert solution(\"(())(\") == \"Yes\"\nassert solution(\"(()())(\") == \"Yes\"\nassert solution(\"(()(((\") == \"No\"\nassert solution(\"()()\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"))((((\") == \"No\"\nassert solution(\"(()))\") == \"Yes\"\nassert solution(\"((())\") == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"()())\") == \"Yes\"\nassert solution(\"((((()())(()))())(\") == \"No\"\nassert solution(\"((())(\") == \"No\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.\n\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441\u0432\u043e\u0435\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043f\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0443 \u043d\u0430 \u043d\u0435\u043f\u043e\u043d\u044f\u0442\u043e\u043c\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430. \n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430, \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d:\n\n\u0412\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a (\u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445)\n\n\u0421\u0443\u043c\u043c\u0430 \u0434\u043b\u0438\u043d \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u0440\u043e\u043d \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0440 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430:\n\n\u0412\u0432\u0435\u0434\u0435\u043d\u044b \u0434\u043b\u0438\u043d\u044b \u0441\u0442\u043e\u0440\u043e\u043d 1, 2 \u0438 3.\n\n\u0422\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442.\n\u0422\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u0432\u043d\u043e\u0431\u0435\u0434\u0440\u0435\u043d\u043d\u044b\u043c.\n\u0422\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u0432\u043d\u043e\u0431\u0435\u0434\u0440\u0435\u043d\u043d\u044b\u043c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u043c \u043f\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0434\u043d\u0430 \u0440\u0430\u0432\u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439.\n\u0422\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u0432\u043d\u043e\u0431\u0435\u0434\u0440\u0435\u043d\u043d\u044b\u043c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u043c \u043f\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0434\u043d\u0430 \u0440\u0430\u0432\u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439, \u0438 \u043d\u0435 \u0440\u0430\u0432\u043d\u044b \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443.\n\n\u0412\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0438\u0437 \u0442\u0440\u0435\u0445 \u044d\u0442\u0430\u043f\u043e\u0432.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n4\n4\n5\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430:\n\n\u0412\u0432\u0435\u0434\u0435\u043d\u044b \u0434\u043b\u0438\u043d\u044b \u0441\u0442\u043e\u0440\u043e\u043d 4, 4 \u0438 5.\n\u0422\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442.\n\u0422\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u0432\u043d\u043e\u0431\u0435\u0434\u0440\u0435\u043d\u043d\u044b\u043c.\n\u0422\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u0432\u043d\u043e\u0431\u0435\u0434\u0440\u0435\u043d\u043d\u044b\u043c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u043c \u043f\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0434\u043d\u0430 \u0440\u0430\u0432\u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439.\n\u0422\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u0432\u043d\u043e\u0431\u0435\u0434\u0440\u0435\u043d\u043d\u044b\u043c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u043c \u043f\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0434\u043d\u0430 \u0440\u0430\u0432\u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439, \u0438 \u043d\u0435 \u0440\u0430\u0432\u043d\u044b \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443.\n\"\"\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"()\") == \"Yes\"\nassert solution(\"))(\") == \"No\"\nassert solution(\"(())\") == \"Yes\"\nassert solution(\"()())\") == \"Yes\"\nassert solution(\"(()))\") == \"No\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(')(') == 'Yes'\nassert solution('()') == 'Yes'\nassert solution('(())') == 'Yes'\nassert solution('())') == 'No'\nassert solution('(()())') == 'Yes'\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"((()))\") == \"Yes\"\nassert solution(\"()\") == \"Yes\"\nassert solution(\"(()()))\") == \"No\"\nassert solution(\"())))))(((((\") == \"No\"\nassert solution(\"()))))((((\") == \"No\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(()())\") == \"Yes\"\nassert solution(\"(()\") == \"No\"\nassert solution(\"())\") == \"Yes\"\nassert solution(\"(()())\") == \"Yes\"\nassert solution(\"()()\") == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"()())\") == \"Yes\"\nassert solution(\"(()())\") == \"Yes\"\nassert solution(\"((()))\") == \"Yes\"\nassert solution(\"(()((()()())(((((((((((()))))))))))))))\") == \"Yes\"\nassert solution(\"(()((((((((()))))))))))\") == \"No\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 100\\n50 50 100\") == \"5\"\n\nassert solution(\"1 50\\n50\") == \"1\"\n\nassert solution(\"2 50\\n50 50\") == \"-1\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 50\") == \"1\"\nassert solution(\"3 100\") == \"5\"\nassert solution(\"2 50\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 100\n50 50 100''') == '5'\n\nassert solution('''2 50\n50 50''') == '-1'\n\n'''"
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 50') == '1'\nassert solution('1 50 2 50') == '2'\nassert solution('3 100') == '5'\nassert solution('2 50 2 100') == '-1'\nassert solution('2 50 50 100') == '0'\n\n-----\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 n, k \u2014 \u0447\u0438\u0441\u043b\u043e \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u043b\u044e\u0434\u0435\u0439, \u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430 \u0432\u0435\u0441\u0430 \u043a\u043e\u0440\u0430\u0431\u043b\u044f. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 n \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0435\u0441\u043e\u0432 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u041a\u0430\u0436\u0434\u044b\u0439 \u0432\u0435\u0441 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0446\u0435\u043b\u044b\u043c \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u0432 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0435 [1\u2026 k].\n\n\u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0442\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043c\u043e\u0436\u0435\u0442 \u043f\u0435\u0440\u0435\u0432\u0435\u0437\u0442\u0438 \u0432\u0441\u0435 n \u043b\u044e\u0434\u0435\u0439 \u043d\u0430 \u043f\u0440\u043e\u0442\u044f\u0436\u0435\u043d\u0438\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0435\u0437\u0434\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043f\u0440\u043e\u0435\u0437\u0436\u0443\u044e \u0447\u0435\u0440\u0435\u0437 \u0431\u043e\u0440\u0442. \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0445 \u043f\u0443\u0442\u0435\u0439 \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e -1.\n\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0432\u043e\u0437\u043a\u0435 \u0432\u0441\u0435\u0445 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043d\u0430 \u043f\u043e\u0435\u0437\u0434, \u043d\u0430 10000000007 (1 000 000 007) \u0438 \u043e\u0431\u0440\u0430\u0442\u043d\u043e. \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0432\u0441\u0435 \u043b\u044e\u0434\u0438 \u043d\u0430 \u043f\u043e\u0435\u0437\u0434, \u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e 0.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u043f\u043e\u0434 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u043b\u044e\u0434\u0438 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e n.\n\n\n-----\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 n, k \u2014 \u0447\u0438\u0441\u043b\u043e \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u043b\u044e\u0434\u0435\u0439, \u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430 \u0432\u0435\u0441\u0430 \u043a\u043e\u0440\u0430\u0431\u043b\u044f. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 n \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0435\u0441\u043e\u0432 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u041a\u0430\u0436\u0434\u044b\u0439 \u0432\u0435\u0441 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0446\u0435\u043b\u044b\u043c \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u0432 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0435 [1\u2026 k].\n\n\u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0442\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043c\u043e\u0436\u0435\u0442 \u043f\u0435\u0440\u0435\u0432\u0435\u0437\u0442\u0438 \u0432\u0441\u0435 n \u043b\u044e\u0434\u0435\u0439 \u043d\u0430 \u043f\u0440\u043e\u0442\u044f\u0436\u0435\u043d\u0438\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0435\u0437\u0434\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043f\u0440\u043e\u0435\u0437\u0436\u0443\u044e \u0447\u0435\u0440\u0435\u0437 \u0431\u043e\u0440\u0442. \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0445 \u043f\u0443\u0442\u0435\u0439 \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \ufffd"
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 50\\n50\\n\") == \"1\"\nassert solution(\"3 100\\n50 50 100\\n\") == \"5\"\nassert solution(\"2 50\\n50 50\\n\") == \"-1\""
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 50\\n50\") == \"1\"\nassert solution(\"3 100\\n50 50 100\") == \"5\"\nassert solution(\"2 50\\n50 50\") == \"-1\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 50\\n50\\n\") == '1\\n1\\n'\nassert solution(\"1 50\\n50\\n100\\n\") == '1\\n1\\n'\nassert solution(\"3 100\\n50 50 100\\n\") == '5\\n2\\n'\nassert solution(\"2 50\\n50 50\\n\") == '-1\\n0\\n'\nassert solution(\"1 100\\n100\\n\") == '1\\n0\\n'"
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 50\\n50') == 1\nassert solution('3 100\\n50 50 100') == 5\nassert solution('2 50\\n50 50') == -1\nassert solution('3 100\\n50 50 100') == 5\nassert solution('3 100\\n50 100 100') == 1\n"
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 50\\n50') == 1\nassert solution('3 100\\n50 50 100') == 5\nassert solution('2 50\\n50 50') == -1\nassert solution('1 50\\n50') == 1\n\"\"\""
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 50\\n50\") == \"1\"\nassert solution(\"3 100\\n50 50 100\") == \"5\"\nassert solution(\"2 50\\n50 50\") == \"-1\"\n\"\"\"\n\n\nfrom math import comb\nfrom collections import defaultdict\n"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 6 8\") == '2'\nassert solution(\"5\\n2 3 4 9 12\") == '4'\nassert solution(\"4\\n5 7 2 9\") == '1'\n\"\"\""
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 6 8') == '2'\nassert solution('5\\n2 3 4 9 12') == '4'\nassert solution('4\\n5 7 2 9') == '1'\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 6 8') == 2\nassert solution('5\\n2 3 4 9 12') == 4\nassert solution('4\\n5 7 2 9') == 1\n\n\"\"\"\n\nimport functools\nimport math\nimport operator\n"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 7 2 9\") == \"1\"\nassert solution(\"2 3 4 9 12\") == \"4\"\nassert solution(\"4 7 2 9\") == \"1\"\nassert solution(\"2 6 8\") == \"2\"\nassert solution(\"4 8 3 9\") == \"4\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 6 8') == '2'\nassert solution('5\\n2 3 4 9 12') == '4'\nassert solution('4\\n5 7 2 9') == '1'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 6 8\") == \"2\"\nassert solution(\"5\\n2 3 4 9 12\") == \"4\"\nassert solution(\"4\\n5 7 2 9\") == \"1\"\nassert solution(\"2\\n7 3\") == \"0\"\nassert solution(\"1\\n2\") == \"0\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 6 8\") == \"2\"\nassert solution(\"5\\n2 3 4 9 12\") == \"4\"\nassert solution(\"4\\n5 7 2 9\") == \"1\"\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n2 6 8\\n') == '2\\n'\nassert solution('5\\n2 3 4 9 12\\n') == '4\\n'\n\"\"\"\nfrom typing import List\n\nn = int(input())\nbox = sorted(map(int, input().split()))\nboxes = dict()\nfor b in box:\n    if b not in boxes:\n        boxes[b] = []\n    boxes[b].append(b)\n\npiles = set()\nfor b in box:\n    if b % 3 == 0:\n        piles.add(tuple(boxes[b]))\n    for i in range(1, 4):\n        if b % i == 0:\n            j = b // i\n            k = b\n            piles.add((b, j, k))\n\nprint(len(piles))\n"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 6 8\") == \"2\"\nassert solution(\"5\\n2 3 4 9 12\") == \"4\"\nassert solution(\"4\\n5 7 2 9\") == \"1\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 6 8\") == \"2\"\nassert solution(\"5\\n2 3 4 9 12\") == \"4\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n17 18\\n15 24\\n12 15') == '6'\nassert solution('5\\n90 108\\n45 105\\n75 40\\n165 175\\n33 30') == '5'\nassert solution('2\\n10 16\\n7 17') == '-1'\n"
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n90 108\\n45 105\\n75 40\\n165 175\\n33 30\") == \"5\"\nassert solution(\"3\\n17 18\\n15 24\") == \"6\"\nassert solution(\"2\\n10 16\\n7 17\") == \"-1\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n10 16\\n7 17\\n\") == \"6\"\nassert solution(\"5\\n90 108\\n45 105\\n75 40\\n165 175\\n33 30\\n\") == \"5\"\nassert solution(\"4\\n10 15\\n25 18\\n\") == \"3\"\nassert solution(\"3\\n12 15\\n25 18\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n10 16\\n7 17\\n') == 5\nassert solution('3\\n17 18\\n15 24\\n') == 6\nassert solution('2\\n10 16\\n7 17\\n') == -1\nassert solution('1\\n10 16\\n7 17\\n') == -1\nassert solution('1\\n10 16\\n7 17\\n') == -1\n"
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n3,14,17,18\\n1,2,3\") == \"6\"\nassert solution(\"2\\n10,16\\n7,17\") == \"-1\"\nassert solution(\"5\\n90,108\\n45,105\\n75,40\\n165,175\\n33,30\") == \"5\"\n"
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n17 18\\n15 24\\n12 15') == '6'\n\"\"\""
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n9\\n18\\n15\\n24\\n12\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n10 16\\n7 17\") == \"5\"\nassert solution(\"3\\n90 108\\n45 105\") == \"6\"\nassert solution(\"5\\n90 108\\n45 105\\n75 40\\n165 175\\n33 30\") == \"5\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n17 18\\n15 24\\n12 15\") == \"6\"\nassert solution(\"5\\n90 108\\n45 105\\n75 40\\n165 175\\n33 30\") == \"5\"\n\nimport sys"
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n17 18\\n15 24\\n12 15\") == \"6\"\nassert solution(\"5\\n90 108\\n45 105\\n75 40\\n165 175\\n33 30\") == \"5\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''bab''') == '2 1 0 1 3'\nassert solution('''bb''') == '0'\n\"\"\"\n\nimport string"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('bab') == '2\\n1 0\\n1 3'\nassert solution('bb') == '0'\n\"\"\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bab\") == '2 1 0'\nassert solution(\"bb\") == '1 0'\n\"\"\"\n\nimport re"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abb\") == \"1 0\"\nassert solution(\"bb\") == \"0\"\nassert solution(\"babbbabbbb\") == \"0\"\nassert solution(\"b\") == \"0\"\nassert solution(\"bbbabbbbabbb\") == \"0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bab\") == \"2\"\nassert solution(\"bb\") == \"1 0\"\nassert solution(\"bbbb\") == \"0\"\nassert solution(\"aaaaaab\") == \"0\"\nassert solution(\"aaaaabb\") == \"0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('bab') == '2 0'\nassert solution('bb') == '1 0'\nassert solution('aaa') == '0'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bab\") == \"2 1 0\"\nassert solution(\"bb\") == \"0\"\nassert solution(\"bbb\") == \"0\"\nassert solution(\"aaa\") == \"0\"\nassert solution(\"abab\") == \"4 1 0 1 0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bab\") == 2\nassert solution(\"bb\") == 0\nassert solution(\"bbbb\") == 0\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aaa') == 0\nassert solution('bab') == 2\nassert solution('bb') == 0\nassert solution('baabbaa') == 4\nassert solution('aabbaa') == 2\n\nstdin = input()\nwhile stdin:\n    stdout.write(solution(stdin))\n    stdout.write('\\n')\n    stdin = input()\n"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\n\n\nfrom collections import defaultdict\nimport sys\n"
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1\\n4 3 2\") == \"POSSIBLE\"\n\"\"\""
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin_lines) == stdout_str"
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n4 3 2') == 'POSSIBLE'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('1\\n') == 'IMPOSSIBLE'\nassert solution('2\\n1 1\\n') == 'POSSIBLE'\nassert solution('2\\n1 1\\n3 3\\n') == 'POSSIBLE'\nassert solution('3\\n1 1\\n2 2\\n3 3\\n') == 'POSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2\\n1 1\\n\") == \"POSSIBLE\"\n\"\"\"\n\nimport unittest\nimport sys\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_solution(self):\n        pass\n"
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('3\\n1 1\\n4 3 2\\n') == 'POSSIBLE'\n\"\"\"\nimport sys"
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1\\n4 3 2\") == \"POSSIBLE\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1\\n4 3 2\") == \"POSSIBLE\"\nassert solution(\"3\\n1 1\\n4 2 3\") == \"IMPOSSIBLE\"\nassert solution(\"3\\n2 1\\n1 1\\n4 2 3\") == \"POSSIBLE\"\nassert solution(\"3\\n2 1\\n4 3 1\") == \"IMPOSSIBLE\"\n\"\"\""
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1\\n4 3 2\") == \"POSSIBLE\"\n\"\"\"\n\nimport sys\nimport collections\n\nsys.setrecursionlimit(1000000)\n\nN = int(input())\nP = [int(x) for x in input().split()]\nX = [int(x) for x in input().split()]"
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1\\n4 3 2\\n\") == \"POSSIBLE\"\nassert solution(\"3\\n1 1\\n5 2 4\\n\") == \"POSSIBLE\"\nassert solution(\"3\\n1 1\\n5 2 3\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1000000007\\n\") == \"2\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1000000007') == '2'\n\n\"\"\"\n\n\"\"\"\nLet the two kinds of toppings be A and B. Four types of ramen can be ordered: \"no toppings\", \"with A\", \"with B\" and \"with A, B\". There are two sets of ramen that satisfy the conditions:\n\nThe following three ramen: \"with A\", \"with B\", \"with A, B\".\nFour ramen, one for each type.\nGiven the two integers N and M. Find the number of the sets of bowls of ramen that satisfy the conditions, disregarding order, modulo M. Since she is in extreme hunger, ordering any number of bowls of ramen is fine.\n\n-----Constraints-----\n - 2 \\leq N \\leq 3000\n - 10^8 \\leq M \\leq 10^9 + 9\n - N is an integer.\n - M is a prime number.\n\n-----Subscores-----\n - 600 points will be awarded for passing the test set satisfying N \u2264 50.\n\n-----Input-----\nThe first line of input contains T denoting the number of test cases. The first line of each test case contains two integers N and M.\n\n-----Output-----\nPrint the number of the sets of bowls of ramen that satisfy the conditions, disregarding order, modulo M.\n\n-----Sample Input-----\n2\n2 1000000007\n50 1000000007\n\n-----Sample Output-----\n2\n6\n\"\"\""
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1000000017') == '2'\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import gcd, sqrt\n"
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1007\") == \"11\"\n\nimport math\nfrom functools import reduce\nfrom operator import mul"
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1000000007\") == \"2\"\n\"\"\"\n\nn, m = list(map(int, input().split()))"
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"2 10000000007\"\n) == \"2\"\n\"\"\""
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"> python;cat/p.t python/p.t\") == \"> python;cat/p.t\"\nassert solution(\"> cat; cat/p.t python/p.t\") == \"cat; cat/p.t\"\nassert solution(\"> cat;cat/p.t python/p.t\") == \"> cat; cat/p.t\"\nassert solution(\"> cat; cat/p.t python/p.t\") == \"> cat; cat/p.t\"\n\nprint('Success')\n\n\"\"\"\nimport math"
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2 10000007\n''') == '''\n2\n'''"
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1000000007\") == \"2\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1000000007\") == \"2\"\n\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 5 1\\n-') == '999999228'\n\"\"\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 5 1\\n-') == '999999228'\n\"\"\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3 3\\n+-\") == \"7\"\nassert solution(\"4 1 5 1\\n--\") == \"999999228\"\nassert solution(\"4 1 5 1\\n+-\") == \"5\"\nassert solution(\"4 1 5 1\\n-\") == \"999999111\"\nassert solution(\"4 1 5 1\\n+-\") == \"5\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 3 3\") == \"7\"\nassert solution(\"4 1 5 1\") == \"999999228\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1 2\") == \"999999228\"\nassert solution(\"4 1 5 1\") == \"999999228\"\nassert solution(\"4 1 1 1\") == \"999999228\"\nassert solution(\"4 1 6 1\") == \"999999228\"\nassert solution(\"4 1 6 2\") == \"999999228\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 5 1\") == \"999999228\"\n\n\"\"\"\n\nimport string\nimport itertools"
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 5 1\\n-\") == \"999999228\"\nassert solution(\"2 2 3 3\\n+-\") == \"7\"\nassert solution(\"4 1 5 1\\n-\\n-\") == \"999999228\"\nassert solution(\"1\\n+\\n-\") == \"0\""
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 3 3\\n+-') == '7'\nassert solution('4 1 5 1\\n-') == '999999228'\n\n\n\"\"\"\n\nfrom collections import deque\nimport string\nfrom typing import List\n"
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 5 1\") == \"999999228\"\n\nassert solution(\"2 2 3 3\") == \"7\"\nassert solution(\"4 1 5 1\") == \"999999228\"\nassert solution(\"1 1 1 1\") == \"0\"\n\nassert solution(\"1 1 2 1\") == \"5\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 3 3\") == \"7\"\nassert solution(\"4 1 5 1\") == \"999999228\"\n"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"10 2 1 7\") == \"0\"\nassert solution(\"1 2 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"10 2 1 7\") == \"0\"\n\"\"\""
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"10 2 1 7\") == \"0\"\n"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 2\") == 4\nassert solution(\"1 2 3 1\") == 2\nassert solution(\"10 2 1 7\") == 0"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 1 7\") == 0\n\"\"\"\n\nimport itertools\nimport typing\n\nfrom collections import deque\n\nfrom tools import timing\n\nINPUT_1 = '''1 1 1 2\n'''\nINPUT_2 = '''10 2 1 7\n'''\n\n\nclass Sticks(typing.NamedTuple):\n    a: int\n    b: int\n    c: int\n"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 2\") == 4\nassert solution(\"1 2 3 1\") == 2\n\"\"\"\n\n\nimport numpy as np"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 2\") == 4\n\"\"\"\n"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"10 2 1 7\") == \"0\"\n\n\"\"\"\n\nimport pytest\n\nfrom solution import solution\n\n\n@pytest.mark.parametrize(\n    (\"a\", \"b\", \"c\", \"l\", \"expected\"),\n    [\n        (\"1 1 1 2\",),\n        (\"1 2 3 1\",),\n        (\"10 2 1 7\",),\n    ],\n)\n"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"10 2 1 7\") == \"0\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 2') == '4'\nassert solution('1 2 3 1') == '2'\nassert solution('10 2 1 7') == '0'"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2\n''') == '6'\nprint('test 1 OK')\nassert solution('''5 3\n''') == '30'\nprint('test 2 OK')\nassert solution('''3 1\n''') == '6'\nprint('test 3 OK')\nassert solution('''2 4\n''') == '2'\nprint('test 4 OK')\nassert solution('''5 2\n''') == '30'\nprint('test 5 OK')\n"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == 6\n\"\"\"\nfrom itertools import combinations\n"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"6\"\n\"\"\"\nimport sys\n\nn, m = list(map(int, sys.stdin.readline().split()))\n"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2') == 6\n\"\"\"\n\nimport sys\nimport math\n\nstdin = sys.stdin\n\nn, m = [int(x) for x in stdin.readline().split()]\n"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == 6\n\"\"\""
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"6\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2') == '6'\n\"\"\""
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"6\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"6\"\n\"\"\""
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\na1 b1\") == \"2\"\n\"\"\"\n\n\"\"\"\nBig O: O(n) time, O(n) space\n\n1. I'm gonna use a hashmap.\n2. First, I need to start with vertex 1 and paint it white.\n3. After that, I'll loop through all the vertices and paint them white if they are not white already.\n4. Then, I'll loop through all the edges, and if it connects to a white vertex, it will paint it black, and vice versa.\n5. After that, I'll loop through all the vertices and paint them white if they are not white already.\n6. Then, I'll loop through all the edges, and if it connects to a white vertex, it will paint it black, and vice versa.\n7. Then, I'll loop through all the vertices and paint them white if they are not white already.\n8. Then, I'll loop through all the edges, and if it connects to a white vertex, it will paint it black, and vice versa.\n9. After that, I'll loop through all the vertices and paint them white if they are not white already.\n10. After that, I'll loop through all the edges, and if it connects to a white vertex, it will paint it black, and vice versa.\n11. After that, I'll loop through all the vertices and paint them white if they are not white already.\n12. After that, I'll loop through all the edges, and if it connects to a white vertex, it will paint it black, and vice versa.\n13. After that, I'll loop through all the vertices and paint them white if they are not white already.\n14. After that, I'll loop through all the edges, and if it connects to a white vertex, it will paint it black, and vice versa.\n15. After that, I'll loop through all the vertices and paint them white if they are not white already.\n16. After that, I'll loop through all the edges, and if it connects to a white vertex, it will paint it black, and vice versa.\n17. After that, I'll loop through all the vertices and paint them white if they are not white already.\n18. After that, I'll loop through all the edges, and if it connects to a white vertex, it will paint it black, and vice versa.\n19. Then I'll return the sum of the niceness of each graph.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\nfrom utils.treenode import TreeNode\nfrom utils.treenode import deserialize_tree\n"
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2') == 2\n\"\"\""
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2\\n2 3') == '2'\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())\ngraph = [[a, b] for a, b in [map(int, line.split()) for line in stdin.readlines()]]\n"
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"4\\n2 3 1 2\") == \"8\"\nassert solution(\"5\\n3 2 1 3 5\") == \"16\"\n\"\"\"\nimport math"
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\na_1 b_1\\na_2 b_2\") == 2\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 2') == 2\n\"\"\""
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n') == 2\n\"\"\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2\") == 2\n\"\"\"\n\nfrom __future__ import print_function\nimport sys\nimport queue\n"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 0 1') == '4'\n\nassert solution('11 0 0 5 0 0 0 4 0 0 11') == '18'\n\nassert solution('3 0 1') == '4'\n\nassert solution('11 0 0 5 0 0 0 4 0 0 11') == '18'\n\n\"\"\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 1\nassert solution('2 3') == 2\nassert solution('3 0 1') == 4\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\na.sort()\nb.sort()"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n''') == '2'\nassert solution('''\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == '18'\n\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 0 1') == '4'\nassert solution('11 0 0 5 0 0 0 4 0 0 11') == '18'\n\"\"\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 2 0\\n3 0 1\") == \"2\"\nassert solution(\"11\\n0 0 0 5 0 0 0 4 0 0 11\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n0 2 0\n3 0 1''') == '2'\nassert solution('''11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10''') == '18'\n"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n0 2 0\\n3 0 1') == '2'\nassert solution('3\\n0 2 0\\n1 0 3') == '4'\nassert solution('11\\n0 0 0 5 0 0 0 4 0 0 11') == '18'\n\"\"\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 0 1\") == \"4\"\nassert solution(\"11 0 0 5 0 0 0 4 0 0 11\") == \"18\"\n\n\"\"\"\n\nimport collections\nimport itertools\nfrom functools import lru_cache\nfrom math import factorial\nfrom typing import List, Tuple\n\nDEBUG = False\ndata = [\n    [3, 0, 0],\n    [1, 0, 3],\n]\n"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 0 1\") == \"4\"\nassert solution(\"11 0 0 5 0 0 0 4 0 0 11\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n0 2 0\\n1 0 3') == '2'\nassert solution('11\\n0 0 0 5 0 0 0 4 0 0 11') == '18'\n\n\"\"\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba*aba\") == \"YES\"\nassert solution(\"vk*cup\") == \"YES\"\nassert solution(\"gfgf*gfgf\") == \"NO\"\nassert solution(\"vkcup\") == \"NO\"\nassert solution(\"abaab\") == \"YES\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba*aba\") == \"YES\"\nassert solution(\"aba*aba\") == \"YES\"\nassert solution(\"aba1aba\") == \"NO\"\nassert solution(\"aba?aba\") == \"NO\"\n\n\"\"\"\nfrom re import search\n"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aba*aba') == 'YES'\nassert solution('aba*abb') == 'NO'\nassert solution('aba*abb*ba*b') == 'YES'\nassert solution('aba*abb*baa*b') == 'NO'\n\"\"\""
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aba*aba') == \"YES\"\nassert solution('aba*a') == \"NO\"\nassert solution('vk*cup') == \"YES\"\nassert solution('vkcup') == \"YES\"\nassert solution('vk*cup') == \"YES\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ab*ac*a\") == \"YES\"\nassert solution(\"ab*a*c*a\") == \"YES\"\nassert solution(\"ab*a*c*a*b\") == \"NO\"\nassert solution(\"aba*aba\") == \"YES\"\nassert solution(\"aba*aba\") == \"YES\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba*aba') == 'YES'\nassert solution('vk*cup') == 'YES'\nassert solution('gfgf*gfgf') == 'NO'\nassert solution('vkcup') == 'NO'\nassert solution('vk*cup') == 'NO'\n"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba*aba\") == \"YES\"\nassert solution(\"aba\") == \"NO\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\n\nassert solution(\"vk*cup\") == \"YES\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba*aba\") == \"YES\"\nassert solution(\"aba\") == \"NO\"\nassert solution(\"aba*b*a\") == \"YES\"\nassert solution(\"aba*b*\") == \"NO\"\nassert solution(\"a*b*a*\") == \"YES\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"code*s\") == \"codeforces\"\nassert solution(\"vk*cup\") == \"vkcup\"\nassert solution(\"gfgf*gfgf\") == \"gfgfgf\"\nassert solution(\"gfgfgf\") == \"NO\"\nassert solution(\"1 1\") == \"NO\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba*aba\") == \"YES\"\nassert solution(\"vk*cup\") == \"YES\"\nassert solution(\"vkcup\") == \"YES\"\nassert solution(\"gfgf*gfgf\") == \"NO\"\nassert solution(\"gfgfgfg\") == \"NO\"\n\"\"\"\n\n\"\"\"\nThere is a wildcard character '*' in the string $s$. The string $s$ consists of lowercase Latin letters and at most one wildcard character '*', the string $t$ consists only of lowercase Latin letters. The length of the string $s$ equals $n$, the length of the string $t$ equals $m$.\n\nThe wildcard character '*' in the string $s$ (if any) can be replaced with an arbitrary sequence (possibly empty) of lowercase Latin letters. No other character of $s$ can be replaced with anything. If it is possible to replace a wildcard character '*' in $s$ to obtain a string $t$, then the string $t$ matches the pattern $s$.\n\nFor example, if $s=$\"aba*aba\" then the following strings match it \"abaaba\", \"abacaba\" and \"abazzzaba\", but the following strings do not match: \"ababa\", \"abcaaba\", \"codeforces\", \"aba1aba\", \"aba?aba\".\n\nIf the given string $t$ matches the given string $s$, print \"YES\", otherwise print \"NO\".\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5$) \u2014 the length of the string $s$ and the length of the string $t$, respectively.\n\nThe second line contains string $s$ of length $n$, which consists of lowercase Latin letters and at most one wildcard character '*'.\n\nThe third line contains string $t$ of length $m$, which consists only of lowercase Latin letters.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes), if you can obtain the string $t$ from the string $s$. Otherwise print \"NO\" (without quotes).\n\n\n-----Examples-----\nInput\n6 10\ncode*s\ncodeforces\n\nOutput\nYES\n\nInput\n6 5\nvk*cup\nvkcup\n\nOutput\nYES\n\nInput\n1 1\nv\nk\n\nOutput\nNO\n\nInput\n9 6\ngfgf*gfgf\ngfgfgf\n\nOutput\nNO\n\"\"\""
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.8') == '0.8'\nassert solution('2\\n0.1 0.2') == '0.26'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.8') == '0.800000000000'\n\nassert solution('2\\n0.1 0.2') == '0.260000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.8') == '0.80000000000'\nassert solution('2\\n0.1 0.2') == '0.26000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.8') == '0.800000000000'\nassert solution('2\\n0.1 0.2') == '0.260000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.8') == '0.8'\nassert solution('2\\n0.1 0.2') == '0.26'"
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0.1 0.2 0.3 0.8\") == \"0.800000000000\"\n\"\"\"\n\nimport sys\nfrom typing import List, Dict\n"
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0.1 0.2 0.3 0.8\") == \"0.800000000000\"\nassert solution(\"2\\n0.1 0.2\") == \"0.260000000000\"\n\"\"\"\n\nn = int(input())\n\np = list(map(float, input().split()))\n\nprint(sum(p) / n)\n"
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0.1 0.2 0.3 0.8\") == \"0.800000000000\"\n\"\"\""
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.8') == '0.800000000000'\nassert solution('2\\n0.1 0.2') == '0.260000000000'"
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.8') == '0.8'\nassert solution('2\\n0.1 0.2') == '0.26'\n"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0\"\n\n\"\"\"\n\n\n\nimport math\n"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 6 1 2 1') == '4.7142857143'\nassert solution('5 10 1 2 5') == '5.0000000000'\n\"\"\"\n\nn, l, v_1, v_2, k = list(map(int, input().split()))"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(5, 10, 1, 2, 5) == 5\n\"\"\"\n\nfrom math import ceil\n\nn, l, v_1, v_2, k = map(int, input().split())\nprint(l / (v_1 + v_2))\nprint(ceil(l / (v_1 + v_2)) * k)\n"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0\"\n\"\"\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0\"\n\"\"\"\n\n\nfrom math import ceil, floor\n\nN, L, V1, V2, K = [int(c) for c in input().split()]\n\nV_avg = (V1 + V2) / 2\n\nP1 = ceil(L / V1)\nP2 = floor(L / V2)\n\nprint(min(P1, P2))\n"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 10 1 2 5') == '5'\nassert solution('3 6 1 2 1') == '4.7142857143'"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 1 2 5\") == '5.0'\n\"\"\""
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\"\n\n---\nimport math"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0\"\n\"\"\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6 1 2 1\") == \"4.7142857143\"\nprint(solution(\"5 10 1 2 5\"))\n"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 0.000 0.500 0.750 1.000 2.000 3.000\") == \"0.250\"\n"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n0.000 0.500 0.750 1.000 2.000 3.000') == '0.250'\nassert solution('3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896') == '0.279'"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0.000 0.500 0.750 1.000 2.000 3.000\") == \"0.250\"\nassert solution(\"3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\") == \"0.279\"\n"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0.000 0.500 0.750 1.000 2.000 3.000\") == \"0.250\"\n"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n0.000 0.500 0.750 1.000 2.000 3.000') == '0.250'\nassert solution('3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896') == '0.279'\n\"\"\"\n"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected_stdout\n"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.4') == '0.3'\nassert solution('3\\n0.1 0.2 0.3') == '0.2'\n\nimport math\n"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0.000 0.500 0.750 1.000 2.000 3.000\") == \"0.250\"\nassert solution(\"3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\") == \"0.279\"\n"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n0.000 0.500 0.750 1.000 2.000 3.000') == '0.250'\nassert solution('3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896') == '0.279'\n"
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n0 0\") == \"8\"\n\nsolution(\"1 5\\n5 2\")\n"
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5\\n5 2') == '18'\nassert solution('0 1\\n0 0') == '8'\n\n\"\"\"\n\nimport math\n\ninput = open(\"input.txt\").readlines()\n"
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n0 0\") == \"8\"\nprint(solution(\"1 5\\n5 2\"))\n"
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1\\n0 0\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == \"6\"\nassert solution(\"4 5\") == \"8\"\nassert solution(\"1 1\") == \"4\"\nassert solution(\"1 1\") == \"4\"\nassert solution(\"0 1\") == \"2\"\n"
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5\\n5 2\") == \"18\"\nassert solution(\"0 1\\n0 0\") == \"8\"\nassert solution(\"-2 1\\n5 2\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5\\n5 2\") == 18\n\"\"\"\n\nfrom sys import stdin\n\nx1, y1 = [int(i) for i in stdin.readline().split()]\nx2, y2 = [int(i) for i in stdin.readline().split()]\n\nprint((abs(x1 - x2) + abs(y1 - y2)) + 2)\n"
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n5 2') == '9'\nassert solution('1 1\\n0 0') == '5'\n\"\"\"\n"
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5\\n5 2') == '18'\nassert solution('0 1\\n0 0') == '8'\n\"\"\""
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 5\\n5 2') == '18'\n"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 4\nassert solution('2') == 10\nassert solution('3') == 44\n\nassert solution('4') == 104\nassert solution('5') == 244\n"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"10\"\nassert solution(\"3\") == \"40\"\nassert solution(\"4\") == \"100\"\nassert solution(\"5\") == \"1000\"\nassert solution(\"10\") == \"1010\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 3\nassert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"6\") == 5\n\n\"\"\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 10\nassert solution(\"10\") == 244\nassert solution(\"1\") == 4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 4\nassert solution('2') == 10\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"10\"\nassert solution(\"3\") == \"30\"\nassert solution(\"4\") == \"40\"\nassert solution(\"5\") == \"50\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '4'\nassert solution('2') == '10'\nassert solution('1') == '4'\nassert solution('10') == '244'\n"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"10\"\nassert solution(\"3\") == \"11\"\nassert solution(\"4\") == \"100\"\nassert solution(\"5\") == \"101\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"10\"\nassert solution(\"1\") == \"4\"\nassert solution(\"3\") == \"40\"\nassert solution(\"4\") == \"100\"\nassert solution(\"5\") == \"400\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"I\"\nassert solution(\"2\") == \"II\"\nassert solution(\"3\") == \"III\"\nassert solution(\"4\") == \"IV\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '3\\n1 2 3'\n) == '0'\n\nassert solution(\n    '4\\n1 1 2 2'\n) == '2'\n\nassert solution(\n    '5\\n1 4 1 4 9'\n) == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"4\\n1 1 2 2\") == \"2\"\nassert solution(\"5\\n1 4 1 4 9\") == \"2\"\nassert solution(\"2\\n1 1\") == \"0\"\nassert solution(\"1\\n9\") == \"0\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution([\"1\", \"2\", \"3\"]) == \"0\"\nassert solution([\"1\", \"1\", \"2\", \"2\"]) == \"2\"\nassert solution
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '0'\nassert solution('4\\n1 1 2 2') == '2'\nassert solution('5\\n1 4 1 4 9') == '2'\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == 0\nassert solution(\"1 1 2 2\") == 2\nassert solution(\"1 4 1 4 9\") == 2\nassert solution(\"1 4 1 4 9\") == 2\nassert solution(\"1 4 1 4 9\") == 2\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"4\\n1 1 2 2\") == \"2\"\nassert solution(\"5\\n1 4 1 4 9\") == \"2\"\n\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nmin_len = float('inf')\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if a[i]!= a[j]:\n            min_len = min(min_len, j - i)"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == '0'\nassert solution(\"4\\n1 1 2 2\") == '2'\nassert solution(\"5\\n1 4 1 4 9\") == '2'\n\nassert solution(\"6\\n1 2 1 2 3\") == '1'\nassert solution(\"7\\n1 1 1 1 1 1\") == '5'\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 2 2\") == \"0\"\nassert solution(\"1 4 1 4 9\") == \"2\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == '0'\nassert solution(\"4\\n1 1 2 2\") == '2'\nassert solution(\"5\\n1 4 1 4 9\") == '2'\n"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"0\"\nassert solution(\"1 1 2 2\") == \"2\"\nassert solution(\"1 4 1 4 9\") == \"2\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\nassert solution(\"bbccccbb\") == \"YES\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n\"\"\""
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('bbacc') == 'NO'\nassert solution('aaabccc') == 'YES'\n\"\"\""
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaabccc\") == 'YES'\nassert solution(\"bbacc\") == 'NO'\nassert solution(\"aabc\") == 'YES'\n\"\"\""
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'\n\n\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'\n"
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\nassert solution(\"aaabccc\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 2 5 3') == '2'\nassert solution('4 1 3 2') == '2'\n\n'''"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4 1 2 5 3\") == \"2\""
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n4 1 2 5 3\") == \"2\"\n\nsolution(\"5\\n4 1 2 5 3\")\n"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n4 1 2 5 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n4 1 2 5 3') == '2'\nassert solution('4\\n4 1 3 2') == '2'\n\"\"\"\n\nimport sys\nimport os\n\nclass Car:\n    def __init__(self, number):\n        self.number = number\n\n    def __repr__(self):\n        return str(self.number)\n\n    def __eq__(self, other):\n        return self.number == other.number"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n4 1 2 5 3') == '2'\nassert solution('4\\n4 1 3 2') == '2'\nassert solution('5\\n5 5 5 5') == '0'\n"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n4 1 2 5 3') == 2\n"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n4 1 2 5 3') == '2'\nassert solution('4\\n4 1 3 2') == '2'\nassert solution('4\\n4 1 2 3') == '2'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4 1 2 5 3\") == \"2\"\nassert solution(\"4\\n4 1 3 2\") == \"2\"\n"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 5 3\") == \"2\"\n\nassert solution(\"4 1 3 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1\") == \"3.500000000000\"\nassert solution(\"6 3\") == \"4.958333333333\"\nassert solution(\"2 2\") == \"1.750000000000\"\n\n\n'''\n"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 1''') == '1.5'\n\"\"\""
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1\") == \"3.5\"\nassert solution(\"6 3\") == \"4.958333333333\"\nassert solution(\"2 2\") == \"1.75\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 1') == '3.5'\nassert solution('6 3') == '4.958333333333'\nassert solution('2 2') == '1.75'\nassert solution('1 1') == '0.333333333333'\n\nprint(solution(stdin))\n\n\n\"\"\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n') == '1.75'\n\"\"\"\n\n\n\nimport math\n"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 1') == '3.5'\nassert solution('6 3') == '4.958333333333'\nassert solution('2 2') == '1.75'\n\"\"\""
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\") == \"0.25\"\nassert solution(\"6 3\") == \"0.9583333333333333\"\nassert solution(\"2 2\") == \"1.75\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2') == '1.75'\nassert solution('6 3') == '4.95833333333'\n\"\"\"\nfrom math import factorial\n"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 1') == '3.5'\nassert solution('6 3') == '4.958333333333'\nassert solution('2 2') == '1.75'\n"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 1\") == \"3.5\"\nassert solution(\"6 3\") == \"4.958333333333335\"\n\"\"\"\n\nfrom fractions import Fraction\n\nm, n = map(int, input().strip().split())\n\nprint(Fraction(m, n))"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>') == '3'\nassert solution('4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>') == '3'\n\"\"\"\nfrom typing import *\n\n\nclass Solution:\n    def numReturnableRooms(self, n: int, rooms: List[str]) -> int:\n        return sum(not i or self.isClockwise(rooms[i])\n                   for i in range(n))\n\n    def isClockwise(self, string: str) -> bool:\n        return string.count('<') == string.count('>')\n"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>') == 3\nassert solution('4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>') == 5\nassert solution('4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>') == 3\nassert solution('4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>') == 0\nassert solution('4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>') == 3\n"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n-><-\\n5\\n>>>>>\\n3\\n<--\\n2\\n<>\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n-><-\\n5\\n>>>>\\n3\\n<--\\n2\\n<>\") == \"3\"\nassert solution(\"4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>\") == \"5\"\n\"\"\"\nimport re"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n-><-\\n5\\n>>>>\\n3\\n<--\\n2\\n<>') == '3'\nassert solution('4\\n<->\\n5\\n<--\\n2\\n<>') == '5'\nassert solution('4\\n<->\\n5\\n<--\\n2\\n<>') == '5'\n\n\"\"\"\nimport sys\nimport math\nimport heapq"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n-><-\\n5\\n>>>>>\") == \"3\"\nassert solution(\"4\\n<<<<\\n5\\n>>>>>\") == \"5\"\nassert solution(\"4\\n<-\\n5\\n>>>>>\") == \"0\"\nassert solution(\"4\\n<->\\n5\\n>>>>>\") == \"0\"\nassert solution(\"4\\n->>\\n5\\n>>>>>\") == \"0\"\n\"\"\"\n\nimport sys\nimport math\nimport functools\nimport itertools\nfrom typing import List, Dict, Tuple, Set\n\nDEBUG = False\ndata = sys.stdin.read().strip().split(\"\\n\")\nn = int(data[0])\ns = [0] + list(data[1]) + [0]"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n-><-\\n5\\n>>>>\\n3\\n<--\\n2\\n<>\\n\") == \"3\"\nassert solution(\"4\\n-><-\\n5\\n>>>>\\n3\\n<--\\n2\\n<>\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n-><-\\n5\\n>>>>\\n3\\n<--\\n2\\n<>\\n\") == \"3\"\nassert solution(\"2\\n<>\\n\") == \"0\"\nassert solution(\"4\\n<->\\n5\\n-->\\n3\\n-<\\n\") == \"3\"\n"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n-><-\\n5\\n>>>>\\n3\\n<--\\n2\\n<>\") == 3\nassert solution(\"5\\n<->->\\n4\\n>>><\\n2\\n<><\") == 5\nassert solution(\"5\\n<->->\\n4\\n>>><\\n2\\n<><\") == 5\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>') == 3\nassert solution('4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>') == 3\nassert solution('4\\n-><-\\n5\\n>>>>\\n3\\n<-\\n2\\n<>') == 3\n\n\n\n-----"
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n4 5\\n4 10\") == '16'\nassert solution(\"1 100\\n100 1\\n1 100\\n100 1\") == '202'\nassert solution(\"3\\n1 1\\n100 100\\n1 1\\n100 100\") == '-1'\nassert solution(\"4\\n1 1\\n100 100\\n1 1\\n100 100\") == '-1'\n"
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n4 5\\n4 10') == '16\\n9 9 10'\nassert solution('1 100\\n100 1\\n1 100\\n100 1') == '202\\n101 101 101 101'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n4 5\\n4 10\") == '16'\nassert solution(\"1 100\\n100 1\\n1 100\\n100 1\") == '202'\n\"\"\"\nimport sys"
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4 5\\n4 5\\n4 10\") == \"16\"\n\n\"\"\""
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5') == '16'\nassert solution('4 10') == '9 9 10'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n4 5\\n4 10\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\") == \"16\"\nassert solution(\"4 10\") == \"9 9 10\"\nassert solution(\"4 5\") == \"16\"\nassert solution(\"4 10\") == \"9 9 10\"\nassert solution(\"1 1\") == \"-1\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == '16'\nassert solution('4 10') == '9 9 10'\nassert solution('4 5') == '16'\nassert solution('4 10') == '9 9 10'\nassert solution('4 1') == '-1'\n"
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n4 5\\n4 5\\n4 10') == '16\\n9 9 10'\nassert solution('4\\n1 100\\n100 1\\n1 100\\n100 1') == '202\\n101 101 101 101'\nassert solution('4\\n1 1\\n100 100\\n1 1\\n100 100') == '-1'\nassert solution('2\\n2 3\\n5 2') == '10\\n6 6'\nassert solution('2\\n4 3\\n5 2') == '10\\n6 6'\n\"\"\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n4 5\\n4 10\") == \"16\\n9 9 10\"\nassert solution(\"1 100\\n100 1\\n1 100\\n100 1\") == \"202\\n101 101 101 101\"\nassert solution(\"3\\n1 1\\n100 100\\n1 1\\n100 100\") == \"202\\n101 101 101 101\"\n\"\"\""
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"1 2 2\"\nassert solution(\"3\\n1 2 3\") == \"0 2\"\nassert solution(\"5\\n1 2 3 2 2\") == \"0 1 3\""
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 1 1 1 1') == '1 2 2'\n\n\"\"\""
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nprint('All tests passed.')\n"
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"1 2 2\"\nassert solution(\"3\\n1 2 3\") == \"0 1 3\"\nassert solution(\"5\\n1 2 3 2 2\") == \"0 1 3\"\n"
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"1 2 2\"\nassert solution(\"3\\n1 2 3\") == \"0 2\"\n\n\"\"\""
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1 1 1 1') == '1 2 2'\nassert solution('3 1 2') == '0 1 3'\nassert solution('5 1 2 3 2 2') == '0 1 3'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"1 2 2\"\nassert solution(\"3\\n1 2 3\") == \"0 2\"\n\nassert solution(\"5\\n1 2 3 2 2\") == \"0 1 3\"\nassert solution(\"5\\n3 2 2 1 1\") == \"0 0 2\"\n\n\"\"\"\n"
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(5, [1, 1, 1, 1, 1]) == '1 2 2'\nassert solution(3, [1, 2, 3]) == '0 2'\nassert solution(5, [1, 2, 3, 2, 2]) == '0 1 3'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\na.sort()\n\nans = sys.maxsize\nfor i in range(n//2):\n    k = 0\n    while a[i] > 0:\n        ans = min(ans, a[i] + k)\n        k += 1\n        a[i] -= 1\n    k = 0\n    while a[-i-1] > 0:\n        ans = min(ans, a[-i-1] + k)\n        k += 1\n        a[-i-1] -= 1\n\nprint(ans)"
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"1 2 2\"\n\"\"\"\n"
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"1 2 2\"\nassert solution(\"3\\n1 2 3\") == \"0 2\"\n\"\"\"\n\n\nfrom typing import List, Set\n"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101101') == '110110'\nassert solution('110') == '01'\nassert solution('10010110') == '01100011'\nassert solution('100011') == '01100011'\nassert solution('10') == '01'\n\"\"\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101101\") == \"110110\"\nassert solution(\"110\") == \"01\"\nassert solution(\"10010110\") == \"01100011\"\nassert solution(\"100011\") == \"01100011\"\nassert solution(\"10\") == \"01\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101101\") == \"110110\"\nassert solution(\"10010110\") == \"01100011\"\nassert solution(\"10\") == \"01\""
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101101\") == \"110110\"\nassert solution(\"10010110\") == \"01100011\"\nassert solution(\"10\") == \"01\"\n\"\"\"\nimport re\nimport sys"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101101') == '110110'\nassert solution('10010110') == '01100011'\nassert solution('10') == '01'\n"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101101\") == \"110110\"\nassert solution(\"10010110\") == \"01100011\"\nassert solution(\"10\") == \"01\"\n\"\"\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101101') == '110110'\nassert solution('10010110') == '01100011'\nassert solution('10') == '01'\nassert solution('11100') == '01'\n\n\nimport copy\nfrom collections import Counter\nimport numpy"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101101\") == \"110110\"\nassert solution(\"10010110\") == \"01100011\"\nassert solution(\"10\") == \"01\"\n\"\"\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101101') == '110110'\nassert solution('10010110') == '01100011'\nassert solution('10') == '01'\nprint('Test passed')\n\n\"\"\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"101101\") == \"110110\"\nassert solution(\"10010110\") == \"01100011\"\nassert solution(\"10\") == \"01\"\nassert solution(\"11100\") == \"01\"\nassert solution(\"10011\") == \"01\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4 1\\n1 0 0 1\\n1 1 1 0\\n1 0 0 1\\n1 1 1 1') == '1'\nassert solution('4 4 2\\n1 0 0 1\\n1 1 1 0\\n1 0 0 1\\n1 1 1 1') == '-1'\n"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 2\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 0 1 1\\n1 1 1 1 1\\n1 1 1 1 1') == '1'\n\"\"\"\n\nimport sys\nimport numpy as np\n\nn, m, k = list(map(int, sys.stdin.readline().strip().split(' ')))\nA = np.array([list(map(int, sys.stdin.readline().strip().split(' '))) for i in range(n)])\n"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5 2\") == \"1\"\nassert solution(\"3 4 1\") == \"0\"\nassert solution(\"3 4 1\") == \"0\"\n\"\"\"\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 2\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 0 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == '1'\nassert solution(\"3 4 1\\n1 0 0 1\\n0 1 1 0\\n1 0 0 1\\n\") == '-1'\nassert solution(\"3 4 1\\n1 0 0 1\\n0 1 1 0\\n1 0 0 1\\n\") == '0'\nassert solution(\"3 4 1\\n0 0 0 0\\n0 1 1 0\\n1 0 0 0\\n\") == '0'\n\nprint(\"Success\")\n"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 2\") == '1'\n\n\"\"\"\n\nfrom collections import deque\n\nn, m, k = map(int, input().split())\ntable = [list(map(int, input().split())) for _ in range(n)]\n\ndx = [-1, 1, 0, 0]\ndy = [0, 0, -1, 1]\n"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 1\\n1 0 0 0\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\") == \"0\"\nassert solution(\"5 5 2\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 0 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"-1\"\nassert solution(\"3 4 1\\n1 0 0 1\\n0 1 1 0\\n1 0 0 1\\n\") == \"0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 1') == '0'\nassert solution('3 4 2') == '-1'\nassert solution('3 4 3') == '1'\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 4\") == '-1'\nassert solution(\"3 3 4\") == '2'\nassert solution(\"3 3 2\") == '1'\nassert solution(\"3 3 1\") == '0'\nassert solution(\"5 5 3\") == '-1'\n"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 2\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 0 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"3 4 1\\n1 0 0 0\\n0 1 1 1\\n1 0 0 1\\n\") == \"0\"\n\"\"\"\n\nn, m, k = map(int, input().split())\n\nboard = []\nfor i in range(n):\n    board.append(list(map(int, input().split())))\n\ndp = [[[0 for _ in range(m)] for _ in range(n)] for _ in range(k + 1)]\n\nfor i in range(n):\n    for j in range(m):\n        dp[1][i][j] = 1 if board[i][j] == 1 else 0\n\n\nfor i in range(2, k + 1):\n    for j in range(n):\n        for l in range(m):\n            if j > 0:\n                dp[i][j][l] = dp[i][j][l] or dp[i - 1][j - 1][l]\n            if l > 0:\n                dp[i][j][l] = dp[i][j][l] or dp[i][j][l - 1]\n"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0\\n4\\n6\\n2\\n4\") == \"2 2 3 1 2\"\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0\") == \"2 2 3 1 2\"\nassert solution(\"3\\n0 99990000 99970002\\n99990000 0 99980000\\n99970002 99980000 0\") == \"9999 10000 9998\"\n\n\n\"\"\""
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_1) == test_1_result\nassert solution(test_2) == test_2_result\nassert solution(test_3) == test_3_result\nassert solution(test_4) == test_4_result\nassert solution(test_5) == test_5_result\n"
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 99990000 99970002\\n99990000 0 99980000\\n99970002 99980000 0') == '9999 10000 9998', 'incorrect'\nprint('Test passed')\n\n-----\n\n\"\"\""
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2 1\") == \"3 2 1\"\n\"\"\"\n"
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0\") == \"2 2 3 1 2\"\nassert solution(\"3\\n0 99990000 99970002\\n99990000 0 99980000\\n99970002 99980000 0\") == \"9999 10000 9998\"\n\"\"\""
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0\") == \"2 2 3 1 2\"\n\"\"\""
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0\") == \"2 2 3 1 2\"\nassert solution(\"3\\n0 99990000 99970002\\n99990000 0 99980000\\n99970002 99980000 0\") == \"9999 10000 9998\"\n\nprint('all tests passed.')\n\n\n\n-----------\n"
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0\") == \"2 2 3 1 2\"\nassert solution(\"3\\n0 99990000 99970002\\n99990000 0 99980000\\n99970002 99980000 0\") == \"9999 10000 9998\"\nprint(solution(\"5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0\"))\nprint(solution(\"3\\n0 99990000 99970002\\n99990000 0 99980000\\n99970002 99980000 0\"))\n\n\n----"
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0\") == '2 2 3 1 2'\n\"\"\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\") == \"22\"\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == \"105\"\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == \"105\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\") == 22\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == 105\nassert solution(\"11 1\\n01 1\\n00 100\\n10 1\\n01 1\") == 103\nassert solution(\"00 5000\\n00 5000\\n00 5000\") == 0\n"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 0') == '1'\nassert solution('0 0') == '0'\nassert solution('1 0 1 0') == '2'\nassert solution('11 1 11 11') == '11'\n"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\") == 22\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == 105\nassert solution(\"11 1\\n01 1\\n00 100\\n10 1\\n01 1\") == 103\nassert solution(\"00 5000\\n00 5000\\n00 5000\") == 0\nassert solution(\"00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n00\\n"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\") == \"22\"\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == \"105\"\nassert solution(\"11 1\\n01 1\\n00 100\\n10 1\\n01 1\") == \"103\"\nassert solution(\"00 5000\\n00 5000\\n00 5000\") == \"0\"\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == \"105\"\n\n\"\"\"\nimport collections\n"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\") == '22'\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == '105'\nassert solution(\"11 1\\n01 1\\n00 100\\n10 1\\n01 1\") == '103'\nassert solution(\"00 5000\\n00 5000\\n00 5000\") == '0'\nassert solution(\"11\") == '0'\n"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\") == '22'\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == '105'\nassert solution(\"11 1\\n01 1\\n00 100\\n10 1\\n01 1\") == '103'\nassert solution(\"00 5000\\n00 5000\\n00 5000\") == '0'\n"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n6\n11 6\n10 4\n01 3\n00 3\n00 7\n00 9''') == '22'\nassert solution('''\n5\n11 1\n01 1\n00 100\n10 1\n01 1''') == '103'\nassert solution('''\n3\n00 5000\n00 5000\n00 5000''') == '0'\nassert solution('''\n6\n11 19\n10 22\n00 18\n00 29\n11 29\n10 28''') == '105'\nassert solution('''\n3\n00 5000\n00 5000\n00 5000''') == '0'\n\nsolution(\"\")"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 6\") == \"22\"\nassert solution(\"10 4\") == \"103\"\nassert solution(\"01 3\") == \"103\"\nassert solution(\"00 3\") == \"103\"\nassert solution(\"00 7\") == \"105\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\") == '22'\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == '105'\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == '105'\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == '105'\nassert solution(\"11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == '105'\n"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 9\\n2 3 1 2\\n2 1 3\\n4 3 6') == 'YES\\n2 3 2 3'\n\nassert solution('3 4 10\\n2 3 1 2\\n2 1 3\\n4 3 6') == 'YES\\n3 3 2 3'\n\nassert solution('3 4 5\\n1 3 1 2\\n2 1 3\\n5 3 6') == 'NO'\n"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 3\\n5 3 6\\n4 3 6\") == \"YES\\n2 3 2 3\"\n\"\"\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 9\\n1 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n2 3 2 3\"\nassert solution(\"3 4 10\\n2 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n1 3 1 3\"\nassert solution(\"3 4 5\\n1 3 1 2\\n2 1 3\\n5 3 6\") == \"NO\"\nassert solution(\"3 4 5\\n2 3 1 2\\n2 1 3\\n5 3 6\") == \"NO\"\nassert solution(\"3 4 9\\n1 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n3 3 2 3\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 9\\n1 3 1 2\\n2 1 3\\n4 3 6') == 'YES\\n2 3 2 3'\nassert solution('3 4 10\\n2 3 1 2\\n2 1 3\\n4 3 6') == 'YES\\n3 3 2 3'\nassert solution('3 4 5\\n1 3 1 2\\n2 1 3\\n5 3 6') == 'NO'\n"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(input())\n\n\"\"\""
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 9\\n2 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n2 3 2 3\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 9\\n1 3 1 2\\n2 1 3\\n4 3 6\") == 'YES\\n2 3 2 3'\n\nassert solution(\"3 4 10\\n2 3 1 2\\n2 1 3\\n4 3 6\") == 'YES\\n1 3 1 3'\n\nassert solution(\"3 4 5\\n1 3 1 2\\n2 1 3\\n5 3 6\") == 'NO'\n\nassert solution(\"3 4 7\\n1 3 1 2\\n2 1 3\\n4 3 6\") == 'NO'\n\nassert solution(\"3 3 6\\n1 3 1 3\\n2 1 3\") == 'YES\\n1 3 1 3'\n"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 9\\n1 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n2 3 2 3\"\nassert solution(\"3 4 10\\n2 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n1 3 1 3\"\nassert solution(\"3 4 5\\n1 3 1 2\\n2 1 3\\n5 3 6\") == \"NO\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 4 9\n1 3 1 2\n2 1 3\n4 3 6\"\"\") == \"YES\\n2 3 2 3\"\nassert solution(\"\"\"3 4 10\n2 3 1 2\n2 1 3\n4 3 6\"\"\") == \"YES\\n1 3 1 3\"\nassert solution(\"\"\"3 4 5\n1 3 1 2\n2 1 3\n5 3 6\"\"\") == \"NO\"\n\"\"\"\n\n\"\"\"\n\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 9\\n2 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n2 3 2 3\"\nassert solution(\"3 4 10\\n2 3 1 2\\n2 1 3\\n4 3 6\") == \"YES\\n1 3 1 3\"\nassert solution(\"3 4 5\\n1 3 1 2\\n2 1 3\\n5 3 6\") == \"NO\"\n\nprint(\"Success!\")\n\n'''\n"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n2 3 4 1\\n1 2 3 4\\n\") == \"NO\"\nassert solution(\"4 1\\n4 3 1 2\\n3 4 2 1\\n\") == \"YES\"\nassert solution(\"4 1\\n4 3 1 2\\n2 1 4 3\\n\") == \"YES\"\n\"\"\"\n\n\nfrom collections import defaultdict, deque\nfrom typing import List\nfrom string import ascii_lowercase\nfrom unittest.mock import patch\n"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1\\n4 3 1 2\\n2 1 4 3') == 'NO'\nassert solution('4 2\\n4 3 1 2\\n2 1 4 3') == 'YES'\nassert solution('4 1\\n4 3 1 2\\n3 4 2 1') == 'YES'\nassert solution('4 2\\n4 3 1 2\\n2 1 4 3') == 'NO'\n\"\"\""
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1\\n2 3 4 1') == 'NO'\nassert solution('4 1\\n4 3 1 2') == 'YES'\nassert solution('4 1\\n4 3 2 1') == 'YES'\nassert solution('4 1\\n2 1 4 3') == 'YES'\n\n\"\"\"\n\n\nfrom collections import deque\nfrom itertools import permutations\nfrom math import log2, ceil\nfrom typing import Deque, List\n"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n2 3 4 1\\n1 2 3 4\") == 'NO'\nassert solution(\"4 1\\n4 3 1 2\\n3 4 2 1\") == 'YES'\nassert solution(\"4 3\\n4 3 1 2\\n2 1 4 3\") == 'YES'\nassert solution(\"4 3\\n4 3 1 2\\n2 1 4 3\") == 'NO'\n\n\"\"\"\n\nimport sys\nimport collections\nimport collections.abc\nimport functools\n"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n2 3 4 1\\n1 2 3 4\") == \"NO\"\nassert solution(\"4 1\\n4 3 1 2\\n3 4 2 1\") == \"YES\"\nassert solution(\"4 1\\n4 3 1 2\\n2 1 4 3\") == \"YES\"\nassert solution(\"4 2\\n4 3 1 2\\n2 1 4 3\") == \"YES\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1\\n2 3 4 1\\n1 2 3 4') == 'NO'\nassert solution('4 1\\n4 3 1 2\\n3 4 2 1') == 'YES'\nassert solution('4 3\\n4 3 1 2\\n2 1 4 3') == 'YES'\nassert solution('4 2\\n4 3 1 2\\n2 1 4 3') == 'NO'\n\nprint('Success')\n\n---"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n2 3 4 1\\n1 2 3 4\") == \"NO\"\nassert solution(\"4 1\\n4 3 1 2\\n3 4 2 1\") == \"YES\"\nassert solution(\"4 3\\n4 3 1 2\\n2 1 4 3\") == \"YES\"\nassert solution(\"4 2\\n4 3 1 2\\n2 1 4 3\") == \"NO\"\n\nassert solution(\"4 1\\n4 3 1 2\\n2 1 4 3\") == \"NO\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n2 3 4 1\\n1 2 3 4\") == \"NO\"\nassert solution(\"4 1\\n4 3 1 2\\n3 4 2 1\") == \"YES\"\nassert solution(\"4 3\\n4 3 1 2\\n2 1 4 3\") == \"YES\"\nassert solution(\"4 2\\n4 3 1 2\\n2 1 4 3\") == \"NO\"\nassert solution(\"4 1\\n4 3 1 2\\n2 1 4 3\") == \"NO\"\n\"\"\"\n\nfrom typing import Tuple\nimport unittest\n"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n2 3 4 1\\n1 2 3 4\") == \"NO\"\nassert solution(\"4 1\\n4 3 1 2\\n3 4 2 1\") == \"YES\"\nassert solution(\"4 2\\n4 3 1 2\\n2 1 4 3\") == \"YES\"\nassert solution(\"4 1\\n4 3 1 2\\n2 1 4 3\") == \"NO\"\nassert solution(\"4 1\\n4 3 1 2\\n2 1 4 3\") == \"NO\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n4 3 1 2\\n2 1 4 3') == 'NO'\nassert solution('4 1\\n4 3 1 2\\n2 1 4 3') == 'NO'\nassert solution('4 1\\n4 3 1 2\\n2 1 4 3') == 'NO'\nassert solution('4 1\\n4 3 1 2\\n4 3 1 2') == 'NO'\nassert solution('4 1\\n4 3 1 2\\n4 3 1 2') == 'YES'\n"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == \"1 1\\n3 1\\n1 5\\n4 4\"\nassert solution('7') == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\n\"\"\"\n\nimport sys\nfrom itertools import combinations\n"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"1 1\\n3 1\"\nassert solution(\"7\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\n\"\"\"\nfrom math import floor"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '1 1'\nassert solution('7') == '2 1'\nassert solution('10') == '4 4'\n"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"4\"\n) == \"1 1\"\nassert solution(\n\"7\"\n) == \"2 1\"\nassert solution(\n\"10\"\n) == \"1 2\"\nassert solution(\n\"100\"\n) == \"2 1\"\nassert solution(\n\"1000\"\n) == \"1 2\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '1 1'\nassert solution('7') == '2 1'\n"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"1 1\"\nassert solution(\"7\") == \"2 1\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"1 1\\n3 1\"\nassert solution(\"7\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"1 1\\n3 1\\n1 5\\n4 4\"\nassert solution(\"7\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\nassert solution(\"10\") == \"2 3\\n3 2\\n4 3\\n5 4\\n6 5\\n7 6\\n8 7\\n9 8\\n1 9\\n9 1\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"1 1\"\nassert solution(\"7\") == \"2 1\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3\\n4\\n5\\n6\\n7\") == \"4 4\"\nassert solution(\"1\\n3\\n4\\n5\\n6\\n7\") == \"2 1\"\nassert solution(\"4\\n3\\n4\\n5\\n6\\n7\") == \"1 2\"\n\n\n-----Code-----\n"
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3') == '3'\nassert solution('3\\n3 3 3') == '-1'\n\n-----TESTING-----"
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"1 1 1\") == \"-1\"\nassert solution(\"1 2 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n1') == '-1'\nassert solution('3\\n1 2 3') == '3'\nassert solution('5\\n1 2 3 4 5') == '6'\nassert solution('3\\n3 2 3') == '3'\nassert solution('1\\n1') == '-1'\n"
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '-1'\nassert solution('1\\n1') == '3'\nassert solution('3\\n1 2 3') == '3'\nassert solution('3\\n1 2') == '-1'\nassert solution('3\\n1') == '-1'\n"
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n1 2 1\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n2\n1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n1 1 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3') == '3'\nassert solution('3\\n1 2') == '3'\nassert solution('3\\n1') == '-1'\nassert solution('1\\n1') == '-1'\n\nimport os\nimport io\nimport unittest\n"
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n1') == '-1'\nassert solution('3\\n1 2 3') == '3'\nassert solution('5\\n1 2 3 5 4') == '6'\n"
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3') == 3\n\"\"\""
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == '3'\nassert solution('5\\n1 2 3 4 5') == '3'\nassert solution('4\\n1 2 3 4') == '-1'\nassert solution('3\\n1 2 3') == '-1'\n\n\n-----Test case-----\n\nTest file: #1\nInput:\n4\n1 2 3 4\n\nOutput:\n3\n\nTest file: #2\nInput:\n1\n1\n\nOutput:\n-1\n\n\n-----Test case-----\n\nTest file: #3\nInput:\n2\n1 1\n\nOutput:\n-1\n\n\n\"\"\"\n"
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"46 2\") == \"7\\n0 1 0 0 1 1 1\"\nassert solution(\"2018 214\") == \"3\\n92 205 1\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('46 2') == '7'\nassert solution('2018 214') == '3 92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('46 2') == '7\\n0 1 0 0 1 1 1'\nassert solution('2018 214') == '3\\n92 205 1'\nassert solution('21 1') == '1\\n0'\nassert solution('11 1') == '2\\n11'\nassert solution('0 1') == '1\\n0'\n"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"46 2\") == \"7\\n0 1 0 0 1 1 1\"\nassert solution(\"2018 214\") == \"3\\n92 205 1\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"46 2\") == \"7\\n0 1 0 0 1 1 1\"\nassert solution(\"2018 214\") == \"3\\n92 205 1\"\n\n\"\"\"\nimport math\nimport sys\n\ninputs = sys.stdin.readlines()\np, k = map(int, inputs[0].strip().split(' '))\n\nn = math.ceil(math.sqrt(k))"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == '-1\\n0 0'\nassert solution('1 1\\n1') == '-1\\n0 1'\nassert solution('1 1\\n1\\n1') == '-1\\n0 1\\n1 1'\nassert solution('1 1\\n1\\n1\\n1') == '-1\\n0 1\\n1 2\\n1 2'\nassert solution('1 1\\n1\\n1\\n1\\n1') == '-1\\n0 1\\n1 2\\n1 3\\n1 3'\n\n\"\"\""
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"46 2\") == \"7\\n0 1 0 0 1 1 1\"\nassert solution(\"2018 214\") == \"3\\n92 205 1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('46 2') == '7\\n0 1 0 0 1 1 1'\nassert solution('2018 214') == '3\\n92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"46 2\") == \"7\\n0 1 0 0 1 1 1\"\nassert solution(\"2018 214\") == \"3\\n92 205 1\"\n\n\"\"\""
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"46 2\") == \"7\\n0 1 0 0 1 1 1\"\nassert solution(\"2018 214\") == \"3\\n92 205 1\"\n\n\"\"\""
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 20 20\\n6 2\\n1 3\\n2 6\\n') == '5.000000000000000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 20 20\\n6 2\\n1 3\\n2 6') == 5\n'''\n\nimport sys\n\na, p, q = [int(i) for i in sys.stdin.read().split()]\n\na_list, b_list = [], []\n\nfor i in range(a):\n    a_, b_ = [int(i) for i in sys.stdin.readline().split()]\n    a_list.append(a_)\n    b_list.append(b_)\n\nc_list = list(map(lambda x, y: x/y, a_list, b_list))"
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 20 20\\n6 2\\n1 3\\n2 6') == '5.000000000000000'\nprint(solution(stdin))\n\nassert solution('4 1 1\\n2 3\\n3 2\\n2 3\\n3 2') == '0.400000000000000'\nprint(solution(stdin))\n"
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 20 20\\n6 2\\n1 3\\n2 6\") == \"5.0\"\n\"\"\""
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 20 20\\n6 2\\n1 3\\n2 6\") == \"5.000000000000000\"\n\"\"\"\n\nimport sys\n\nN, p, q = [int(x) for x in input().split()]\na = [int(x) for x in sys.stdin.read().split()]\nprint(int(sum(a[i] * (p / 100) + a[i] * (q / 100) * i for i in range(N)) / (p / 100 + q / 100 * N)))\n"
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 20 20\\n6 2\\n1 3\\n2 6\") == \"5.000000000000000\"\n\"\"\"\n\nn, p, q = map(int, input().split())\n\nlst = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    lst.append([a, b])\n\nlst.sort()\n\ntotal = 0\nans = 0\nfor i in range(n):\n    a, b = lst[i]\n    total += a * b\n    if total >= p:\n        break\n    ans += 1"
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\\n2 3\") == \"0.400000000000000\"\n\n\n\"\"\"\nfrom math import inf\nfrom typing import List\n"
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 20 20\\n6 2\\n1 3\\n2 6\") == \"5.0\"\nassert solution(\"4 1 1\\n2 3\\n3 2\\n2 3\\n3 2\\n\") == \"0.4\"\n\"\"\"\n"
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 20 20\\n6 2\\n1 3\\n2 6\") == \"5.0\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 20 20\\n6 2\\n1 3\\n2 6\") == \"5.000000000000000\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 3\"\n) == \"4\"\nassert solution(\n    \"8 2\"\n) == \"5\"\n"
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2, 3) == 4\n"
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(5, 2) == 4\nassert solution(1, 3) == 1\nassert solution(10, 10) == 0\nassert solution(12, 1) == 3\nassert solution(12, 2) == 2\n"
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(2) +'' + str(3)) == 4\nassert solution(str(8) +'' + str(2)) == 5\nassert solution(str(8) +'' + str(2)) == 5\n\"\"\"\n\n\nfrom math import factorial\n"
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 2\") == 5"
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 2\") == \"5\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == 4\nassert solution(\"8 2\") == 5\nprint('Success')"
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(2, 3) == 4\nassert solution(8, 2) == 5\n\"\"\"\nfrom __future__ import annotations\nfrom typing import Union\n\n__all__ = ['get_all_possible_pairs', 'get_all_possible_zeroes_and_ones_pairs']\n"
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"4\"\nassert solution(\"3 3\") == \"5\"\nassert solution(\"8 2\") == \"5\"\n\nassert solution(\"9 999\") == \"6\"\nassert solution(\"9 999\") == \"6\"\n"
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4 5 7\") == \"Conan\"\nassert solution(\"2\\n1 1\") == \"Agasa\""
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 1') == 'Agasa'\nassert solution('2\\n1 1\\n2') == 'Conan'\nassert solution('3\\n1 2 3') == 'Conan'\nassert solution('3\\n3 2 1') == 'Agasa'\nassert solution('3\\n3 2 4') == 'Agasa'\n"
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4 5 7\") == \"Conan\"\nassert solution(\"2\\n1 1\") == \"Agasa\"\nassert solution(\"6\\n4 5 7 6 5 3\") == \"Agasa\"\nassert solution(\"8\\n3 3 4 5 6 7 8\") == \"Conan\""
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n4 4 3 2 1\") == \"Conan\"\nassert solution(\"3\\n4 5 7\") == \"Conan\"\nassert solution(\"2\\n1 1\") == \"Agasa\"\n\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n4 5 7') == 'Conan'\n\"\"\""
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 1\") == \"Agasa\"\nassert solution(\"3\\n4 5 7\") == \"Conan\"\nassert solution(\"3\\n1 1 1\") == \"Conan\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n4 5 7') == \"Conan\"\nassert solution('2\\n1 1') == \"Agasa\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4 5 7\") == \"Conan\"\n\"\"\"\n\nn = int(input())\ncards = list(map(int, input().split()))\n\ncards.sort(reverse=True)\n\ncurr_num = cards[0]\n\nwhile len(cards) > 1:\n    cards = list(filter(lambda card: card >= curr_num, cards))\n    curr_num = cards[0]\n\nprint('Conan' if cards[0] == curr_num else 'Agasa')\n"
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 7\") == \"Conan\"\nassert solution(\"1 1\") == \"Agasa\""
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4 5 7\") == 'Conan'\nassert solution(\"2\\n1 1\") == 'Agasa'\n\n\"\"\""
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3') == '3 3\\n##.\\n..#\\n#.#'\n"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n...\\n..#') == '3 3\\n##.\\n..#\\n#.#'\n\n\"\"\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n1 3') == '1 3\\n#..\\n#.#\\n'\nassert solution('2 2\\n3 3') == '2 2\\n#.#\\n##\\n##\\n'\nassert solution('3 3\\n3 3') == '3 3\\n#.#\\n##\\n##\\n##\\n'\n\"\"\""
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n.#.#.\\n.#.#.\\n.#.#.\\n#.##\\n') == '1\\n1\\n1\\n1'\nassert solution('3 3\\n..#\\n#.#\\n##\\n') == '1\\n0\\n1\\n0\\n1'\n\n\"\"\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3') == '3 3\\n##.\\n..#\\n#.#'\n\n------Problem------\nYou have been given a matrix with 1s and 0s, and you want to check if it can be rearranged to form a valid chessboard. A chessboard is valid if it contains exactly one white and one black square along with all squares being white or black only.\n\n-----Solution------\nWe can represent the chessboard with 2D array. Let's call the array A and check all possible arrangements of it.\n\nNote that A[i][j] contains the color of the square in the i-th row and j-th column, while i ranges from 0 to 7 and j ranges from 0 to 7. Let's check the validity of each possible arrangement of A:\n1. If the square is white (1), then it must be the only square in its row or column. In the array above, there is only one white square.\n2. If the square is black (0), then it must be the only square in its row or column. In the array above, there are 3 black squares.\n3. If the square is white (1), then it must have the same color as its nearest neighbor (up, down, left, or right) square. In the array above, squares at the ends of rows and columns are white.\n4. If the square is black (0), then it must have the opposite color of its nearest neighbor (up, down, left, or right) square. In the array above, squares at the ends of rows and columns are black.\n\nTherefore, A is valid if and only if:\n\n- A[i][j] is black and 0 <= i < j < 7.\n- A[i][j] is white and 0 <= i < 7 and 0 <= j < 7.\n- A[i][j] is white and 0 <= i < 7 and 0 <= j < i.\n- A[i][j] is black and 0 <= i < 7 and 0 <= j < 7 and i == j.\n\nPython 3.6.1\n\n-----Comments-----\nI wrote this solution as an extension of the solution above:\n1. The line above allows to create an array of any size.\n2. The line below allows to check if an array is valid.\n3. The line below allows to check if a cell is valid.\n\nI wrote this solution in order to understand the condition for \"i == j\" in the problem statement.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"\"\"3 3\n##.\n..#\n"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == \"\"\"3 3\n##.\n..#\n"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3') == '3 3\\n##.\\n..#\\n#.#'\n\"\"\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"3 3\\n..#\\n#.#\"\n\"\"\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3') == '3 3\\n..#\\n#.#'\n\"\"\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n+ 1\\n- 1\\n+ 2\\n- 2\") == \"0\\n2 3\"\nassert solution(\"5 2\\n+ 1\\n- 2\\n+ 3\\n- 2\\n+ 4\") == \"0\\n1 2\"\nassert solution(\"5 5\\n+ 1\\n+ 1\\n+ 1\\n+ 1\\n+ 1\") == \"0\\n0\"\nassert solution(\"5 6\\n+ 1\\n- 1\\n- 3\\n+ 3\\n+ 4\\n- 4\") == \"0\\n1 2 3\"\nassert solution(\"5 4\\n+ 1\\n+ 2\\n- 2\\n- 1\") == \"0\\n1 3\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n+ 1\\n+ 2\\n- 2\\n- 1\") == \"4\"\nassert solution(\"3 2\\n+ 1\\n- 2\\n+ 2\\n- 1\") == \"1\"\nassert solution(\"2 4\\n+ 1\\n- 1\\n+ 2\\n- 2\") == \"0\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n+ 1\\n+ 2\\n- 2\\n- 1\") == \"4\\n1 3 4 5\"\nassert solution(\"3 2\\n+ 1\\n- 2\\n+ 2\\n- 1\") == \"1\\n3\"\nassert solution(\"2 4\\n+ 1\\n- 2\\n+ 2\\n- 1\") == \"0\""
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n+ 1\\n+ 2\\n- 2\\n- 1\") == \"4\\n1 3 4 5 \"\nassert solution(\"3 2\\n+ 1\\n- 2\\n+ 2\\n- 1\") == \"1\\n3 \"\nassert solution(\"2 4\\n+ 1\\n- 1\\n+ 2\\n- 2\") == \"0\\n\"\nassert solution(\"5 6\\n+ 1\\n- 1\\n- 3\\n+ 3\\n+ 4\\n- 4\") == \"3\\n2 3 5 \""
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n+ 1\\n+ 2\\n- 2\\n- 1\\n\") == \"4\\n1 3 4 5\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6\\n+ 1\\n- 1\\n- 3\\n+ 3\\n+ 4\\n- 4') == '3\\n2 3 5'\nassert solution('2 4\\n+ 1\\n- 2\\n+ 2\\n- 1') == '0\\n3'\nassert solution('5 6\\n+ 1\\n- 1\\n- 3\\n+ 3\\n+ 4\\n- 4') == '3\\n2 3 5'\nassert solution('2 4\\n+ 1\\n- 2\\n+ 2\\n- 1') == '0\\n3'\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n+ 1\\n- 1\\n- 3\\n+ 3\\n+ 4\\n- 4') == '3\\n2 3 5'\n\n\"\"\"\nfrom typing import List\n\nfrom collections import defaultdict\n\nn, m = [int(num) for num in input().split()]\nlog_on = defaultdict(list)\nlog_off = defaultdict(list)\nfor i in range(m):\n    [op, num] = input().split()\n    num = int(num)\n    if op == '+':\n        log_on[num].append(i)\n    elif op == '-':\n        log_off[num].append(i)\n\nstdin = []\nfor i in range(1, n + 1):\n    if log_on[i]:\n        stdin.append('+'+ str(i))\n    if log_off[i]:\n        stdin.append('-'+ str(i))\nprint('\\n'.join(stdin))\n"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4\\n+ 1\\n- 2\\n+ 2\\n- 1\") == \"0\\n3\"\nassert solution(\"5 6\\n+ 1\\n- 1\\n- 3\\n+ 3\\n+ 4\\n- 4\") == \"3\\n2 3 5\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n+ 1\\n+ 2\\n- 2\\n- 1\") == \"4\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\\n5 4 2 4 5\\n2\\n5\") == \"1\"\nassert solution(\"6 1\\n7 3 6 7 8 9\\n9\\n7\") == \"4\"\nassert solution(\"4 4\\n1 2 3 4\\n5 6 7 8\\n9 10 11 12\\n13 14 15 16\\n17 18 19 20\\n21 22 23 24\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"5 1\n5 4 2 4 5\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"3 3\n1 2 3\n9\"\"\"\n) == \"4\"\nassert solution(\n\"\"\"5 1\n5 4 2 4 5\n2\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"5 5\n5 4 2 4 5\n5 4 2 4 5\n5 4 2 4 5\n5 4 2 4 5\n5 4 2 4 5\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"3 5\n1 2 3 4 5\n6\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2 2') == '1'\nassert solution('2 2 3') == '0'\nassert solution('4 5 6 7') == '0'\nassert solution('1 1 1 1 1') == '1'\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2 3\\n1 2 3\\n9\") == \"4\"\n\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\nb = list(map(int, stdin.readline().split()))\nx = int(stdin.readline())\n\nans = 0\nfor x1 in range(n + 1):\n    for y1 in range(m + 1):\n        for x2 in range(x1, n + 1):\n            for y2 in range(y1, m + 1):\n                ans = max(ans, (x2 - x1 + 1) * (y2 - y1 + 1))\nprint(ans)\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 2 4 5\\n2\\n5\\n\") == \"4\"\nassert solution(\"4 5 2 4 5\\n5\\n5\\n\") == \"0\"\nassert solution(\"4 5 2 4 5\\n5\\n5\\n\") == \"0\"\nassert solution(\"4 5 2 4 5\\n5\\n5\\n\") == \"0\"\n\"\"\"\nimport re"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2 3\\n9\\n\") == \"4\"\nassert solution(\"4 4\\n1 2 3 4\\n2\\n2\") == \"0\"\nassert solution(\"7 8\\n1 2 3 4 5 6 7\\n3\\n10\") == \"3\"\nassert solution(\"1 1\\n1\\n1\") == \"0\"\nassert solution(\"2 2\\n1 1\\n1\") == \"0\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '4'\n\nstdin = sys.stdin.read()\nprint(solution(stdin))\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '4'\nassert solution('1 2 3 4 5') == '4'\nassert solution('1 2 3 4 5 6') == '10'\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2 3\\n9\\n') == '4'\nassert solution('5 1\\n5 4 2 4 5\\n2\\n5\\n') == '1'\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2 3\\n9\") == \"4\"\nassert solution(\"5 1\\n5 4 2 4 5\\n2\") == \"1\"\nassert solution(\"5 3\\n5 4 2 4 5\\n2\") == \"0\"\nassert solution(\"5 4\\n5 4 2 4 5\\n2\") == \"4\"\nassert solution(\"3 3\\n1 2 3\\n9\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('cba') == 'cbd'\nassert solution('abcd') == 'abda'\nassert solution('a') == 'b'\nassert solution('aab') == 'aba'\nassert solution('aaab') == 'aba'\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cba') == 'cbd'\nassert solution('abcd') == 'abda'\nassert solution('abcde') == 'abdfe'\nassert solution('abcdef') == 'abdfe'\nassert solution('abcdefgh') == 'abdfegh'\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"abca\"\nassert solution(\"abca\") == \"abcba\"\nassert solution(\"abcd\") == \"abda\"\nassert solution(\"abcba\") == \"abcbc\"\nassert solution(\"cba\") == \"cbc\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('cba') == 'cbd'\nassert solution('abcd') == 'abda'\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcd\") == \"abda\"\nassert solution(\"cba\") == \"cbd\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcd') == 'abda'\nassert solution('cba') == 'cbd'\nassert solution('aaa') == 'abaa'\n\"\"\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cba\") == \"cbd\"\nassert solution(\"a\") == \"b\"\nassert solution(\"abc\") == \"abd\"\nassert solution(\"abcd\") == \"abda\"\nassert solution(\"bac\") == \"bbc\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"abd\"\nassert solution(\"abc\") == \"abd\"\nassert solution(\"abca\") == \"abd\"\nassert solution(\"abcc\") == \"abdd\"\nassert solution(\"abcd\") == \"abde\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('cba') == 'cbd'\nassert solution('abcd') == 'abda'\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str) == str\n\nassert solution(str) == str\n\n\"\"\"\n\n\nfrom itertools import combinations"
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0101') == 'tokitsukaze'\nassert solution('0011') == 'once again'\nassert solution('10101') == 'quailty'\nassert solution('101101') == 'once again'\n\"\"\""
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1101\") == \"tokitsukaze\"\nassert solution(\"1010\") == \"quailty\"\nassert solution(\"11001100\") == \"once again\"\nassert solution(\"111011010\") == \"tokitsukaze\"\nassert solution(\"1110110101010\") == \"once again\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0101') == 'once again'\nassert solution('01010') == 'quailty'\nassert solution('010101') == 'tokitsukaze'\nassert solution('0101010') == 'once again'\nassert solution('1101010') == 'tokitsukaze'\n"
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0101\") == \"quailty\"\nassert solution(\"010101\") == \"once again\"\nassert solution(\"0111010\") == \"tokitsukaze\"\nassert solution(\"1110111010\") == \"once again\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0101\") == \"tokitsukaze\"\nassert solution(\"101010\") == \"quailty\"\nassert solution(\"11101010\") == \"once again\"\nassert solution(\"11101010\") == \"once again\"\nassert solution(\"1111101010\") == \"once again\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0101\") == \"tokitsukaze\"\nassert solution(\"101010\") == \"quailty\"\nassert solution(\"1110111\") == \"once again\"\nassert solution(\"11100110\") == \"once again\"\nassert solution(\"11010110\") == \"tokitsukaze\"\n\n\"\"\""
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0101\") == \"quailty\"\nassert solution(\"010101\") == \"once again\"\nassert solution(\"0101010\") == \"tokitsukaze\"\nassert solution(\"01010\") == \"once again\"\nassert solution(\"1011101\") == \"tokitsukaze\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0110111\") == \"once again\"\nassert solution(\"10111010\") == \"tokitsukaze\"\nassert solution(\"0110110\") == \"quailty\"\n\"\"\"\n\nn, k = map(int, input().split())\ncards = input()\nn, k = int(n), int(k)"
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0101\") == \"once again\"\nassert solution(\"0101010\") == \"tokitsukaze\"\nassert solution(\"010101010\") == \"quailty\"\n\"\"\""
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"01010\") == \"tokitsukaze\"\nassert solution(\"010101\") == \"quailty\"\nassert solution(\"101010\") == \"once again\"\nassert solution(\"1010101010\") == \"once again\"\nassert solution(\"101010\") == \"tokitsukaze\"\n\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 50\\n20 100\\n60 10 40 80\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 50\") == \"50\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4 50\\n20 100\\n60 10 40 80\\n') == '50'\n\nassert solution('1 2 10\\n11\\n15 7\\n') == '7'\n\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 50\\n20 100\\n60 10 40 80\") == '50'\nassert solution(\"1 2 10\\n11\\n15 7\") == '7'\n"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 50\\n20 100\\n60 10 40 80\") == \"50\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 4 50\n20 100\n60 10 40 80''') == '50'\n\nassert solution('''1 2 10\n11\n15 7''') == '7'\n\"\"\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 2 100\n20 100\n60 10 40 80''') == '50'\nassert solution('''4 1 5\n1 2 3 4 5''') == '2'\n'''\n\n'''\n"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 50\\n20 100\\n60 10 40 80\") == \"50\"\n\nassert solution(\"1 2 10\\n11\\n15 7\") == \"7\"\nassert solution(\"0 5 8\\n8 9 10\") == \"8\""
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 5\") == \"8\"\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 50\\n20 100\\n60 10 40 80') == '50'\nassert solution('2 4 50\\n100 20\\n60 10 40 80') == '7'\nassert solution('2 4 50\\n20 100\\n60 10 40 80\\n15 7\\n11 15') == '7'\nassert solution('2 4 50\\n100 20\\n60 10 40 80\\n15 7\\n11 15\\n1 1 10') == '10'\n"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n0 0\") == \"1 6\"\nassert solution(\"3 2\\n0 0\") == \"1 3\"\nassert solution(\"1 10\\n5 3\") == \"5 5\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 1\") == \"1 6\"\nassert solution(\"3 2\\n0 0\") == \"1 3\"\nassert solution(\"1 10\\n5 3\") == \"5 5\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 1\") == \"1 6\"\n\nassert solution(\"3 2\\n0 0\") == \"1 3\"\n\nassert solution(\"1 10\\n5 3\") == \"5 5\"\n\"\"\"\n\nn, k = input().split()\na, b = input().split()\nprint(min(k, (k - int(a) + 1)//(int(b) - int(a))))\nprint(max(k, (k - int(a) + 1)//(int(b) - int(a))))\n"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 1') == '1 6'\nassert solution('3 2\\n0 0') == '1 3'\nassert solution('1 10\\n5 3') == '5 5'\nassert solution('3 2\\n2 4') == '2 2'\n"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 1\\n\") == \"1 6\"\nassert solution(\"3 2\\n0 0\\n\") == \"1 3\"\nassert solution(\"1 10\\n5 3\\n\") == \"5 5\"\n\n\"\"\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"1 3\"\nassert solution(\"1 10\") == \"5 5\"\nassert solution(\"3 2\") == \"1 3\"\n\n\"\"\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 1\\n') == '1 6'\nassert solution('3 2\\n0 0\\n') == '1 3'\nassert solution('1 10\\n5 3\\n') == '5 5'\n"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"1 3\"\nassert solution(\"1 10\") == \"5 5\"\nassert solution(\"3 2\") == \"1 3\"\nassert solution(\"1 10\") == \"5 5\"\n\"\"\""
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 1\") == \"1 6\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n0 0\") == \"1 3\"\nassert solution(\"1 10\\n5 3\") == \"5 5\"\n\"\"\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n-2 5 -1\") == \"2\\n2 3\\n3 3\"\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n-2 5 -1') == '2\\n2 3'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n-2 5 -1\") == \"2\\n2 3\"\n\"\"\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n-2 5 -1\") == \"2\\n2 3\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nx, y = 0, 0"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n-2 5 -1\\n\") == \"2\\n3 3\"\n\"\"\""
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n-2 5 -1\") == \"2\\n2 3\"\n\"\"\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n-2 5 -1\") == \"2\\n2 3\"\n\"\"\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n-2 5 -1\") == \"2\\n2 3\"\nprint(\"Passed\")\n\n\"\"\"\nimport math"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n-2 5 -1') == '2\\n2 3\\n3 3'\n\n---\n'''\n\nimport sys\nimport collections"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n-2 5 -1\") == \"2\\n2 3\"\n\n-----\n-----\n-----\n4\n5 -2 -5 -2\n\n-----\n-----\n-----\n4\n3 4 -1 -3\n\n-----\n2\n1 3\n\n-----\n3\n-1 0 -1\n\n-----\n3\n2 2 2\n\n\"\"\"\n\n\"\"\"\nInput\n3\n-2 5 -1\n\nOutput\n2\n2 3\n3 3\n\nInput\n4\n5 -2 -5 -2\n\nOutput\n2\n2 3\n3 3\n\nInput\n4\n3 4 -1 -3\n\nOutput\n3\n2 2 2\n3 3\n\n\"\"\""
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 10\\n2 2\") == \"3\"\nassert solution(\"1\\n0 4\") == \"1\"\nassert solution(\"2\\n1 10\\n2 2\") == \"3\""
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 10\\n2 2\") == \"3\"\n\nassert solution(\"2\\n3 5\") == \"3\"\n\nassert solution(\"1\\n0 4\") == \"1\"\n\nassert solution(\"1\\n1 10\") == \"2\"\n\nassert solution(\"2\\n2 2\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 5\\n2 2\\n3 3\\n4 4\") == \"3\"\nassert solution(\"4\\n1 5\\n2 2\\n3 3\\n4 4\\n0 0\") == \"1\"\nassert solution(\"4\\n1 5\\n2 2\\n3 3\\n4 4\\n0 0\\n0 0\") == \"1\"\nassert solution(\"4\\n1 5\\n2 2\\n3 3\\n4 4\\n0 0\\n0 0\\n0 0\") == \"1\"\n\nassert solution(\"4\\n0 5\\n0 2\\n0 3\\n0 4\") == \"0\""
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10\\n2 2\\n\") == \"3\"\nassert solution(\"2 10\\n2 2\") == \"1\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 10\\n2 2\") == \"3\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2 1 3 5\\n') == '3'\nassert solution('1 10 2 2\\n') == '3'\nassert solution('2 1 3 5') == '3'\nassert solution('1 10 2 2') == '1'\n"
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 3\\n1 5\") == \"3\"\nassert solution(\"1\\n0 4\") == \"1\"\nassert solution(\"2\\n1 10\\n2 2\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 10\\n2 2\") == \"3\"\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 10\\n2 2\") == \"3\"\nassert solution(\"3\\n0 3\\n1 5\\n\") == \"1\"\nassert solution(\"1\\n0 4\\n\") == \"1\"\nassert solution(\"2\\n1 10\\n2 2\") == \"3\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 10\\n2 2\") == \"3\"\nassert solution(\"1\\n0 4\") == \"1\"\nassert solution(\"2\\n1 10\\n2 2\") == \"3\"\n"
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 18\\n5 6 1 10 12 2') == '16\\n0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18'\nassert solution('3 50\\n25 25 50') == '3\\n0 25 50'\n\"\"\""
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6 18\n5 6 1 10 12 2''') == '16 0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18'\n\nassert solution('''3 50\n25 25 50''') == '3 0 25 50'\n\nassert solution('''4 6\n1 1 1 2 2 2''') == '1'\n\nassert solution('''4 5\n1 1 1 2 2 2''') == '0 1 2 3 4'\n\nassert solution('''5 4\n1 1 1 2 2 2''') == '0 1 2 3'"
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 50\\n25 25 50') == '3\\n0 25 50'\nassert solution('2 5\\n2 5') == '0'\nassert solution('3 10\\n1 2 3') == '0'\nassert solution('1 1\\n1') == '0'\n"
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 50') == '2'\nassert solution('6 18') == '16'\n"
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 12') == 2\nassert solution('6 10') == 2\n\"\"\""
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 18\\n5 6 1 10 12 2\") == \"16\\n0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18\"\n\"\"\""
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 18\\n5 6 1 10 12 2\") == '16'\nassert solution(\"3 50\\n25 25 50\") == '3'\n"
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 50\\n25 25 50') == '3\\n0 25 50'\n"
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6 1 10 12 2\") == '16'\n"
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6 1 10 12 2\") == \"16\"\n\"\"\"\n\nn, k = map(int, input().split())\ncoins = list(map(int, input().split()))\ncoins.sort()\ncoins = [0] + coins\nres = [0 for i in range(k + 1)]\nres[0] = 1\nfor coin in coins:\n    for i in range(1, k + 1):\n        if i - coin >= 0:\n            res[i] += res[i - coin]\n\nprint(res[k])\nfor i in range(k + 1):\n    if res[i] > 0:\n        print(i, end=\" \")\n"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6') == 3\nassert solution('2') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('6') == '3'\nassert solution('1') == '1'\nassert solution('4') == '2'\nassert solution('10') == '5'\n"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"2\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\") == 3\nassert solution(\"2\") == 2\n\"\"\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 2\nassert solution(\"6\") == 3\nassert solution(\"10\") == 5\n\"\"\"\n\nimport sys\nfrom typing import List\n\n\nclass Solution:\n    def num_coins(self, n: int) -> int:\n        coins = [1, 2, 5, 10, 20, 50, 100, 200]\n        dp = [0] * (n + 1)\n        dp[0] = 0\n\n        for coin in coins:\n            for i in range(coin, n + 1):\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n\n        return dp[-1]\n"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"6\") == \"4\"\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"2\") == \"2\"\n\"\"\"\n\nimport sys\nimport math\nfrom functools import lru_cache\nfrom collections import deque\n\nsys.setrecursionlimit(1000000)\n\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 1\\n2 2\") == \"3\"\nassert solution(\"3 1\\n1 1\\n2 2\") == \"6\"\nassert solution(\"3 2\\n1 1\\n2 2\") == \"6\"\nassert solution(\"3 3\\n1 1\\n2 2\") == \"4\"\n\nassert solution(\"10 3\\n7 1\\n4 3\\n1 1\\n2 2\\n4 4\\n1 1\\n8 7\\n3 3\\n5 3\\n2 2\\n4 4\\n7 2\\n8 7\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n8 7\\n2 2\\n4 4\\n1 1\\n5 3\\n3 2\\n"
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\\n\") == \"180\"\nprint(\"Test 1 OK\")\n\nassert solution(\"3\\n10 1\\n20 2\\n30 3\\n\") == \"180\"\nprint(\"Test 2 OK\")\n\nassert solution(\"1\\n5 10\\n\") == \"50\"\nprint(\"Test 3 OK\")\n\nassert solution(\"1\\n5 10\\n\") == \"50\"\nprint(\"Test 4 OK\")\n\nassert solution(\"2\\n2 2\\n4 3\\n\") == \"21\"\nprint(\"Test 5 OK\")"
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\") == \"180\"\nassert solution(\"1\\n5 10\") == \"50\"\n\"\"\""
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1\\n10 2\\n20 3\") == 50\nassert solution(\"3 1\\n2 2\\n4 3\") == 21\n\"\"\""
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n10 1\n20 2\n30 3''') == '180'\n\nassert solution('''1\n5 10''') == '50'\n\nassert solution('''1\n2 2\n4 3''') == '21'\n\n\"\"\""
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n10 1\n20 2\n30 3''') == '180'\n\"\"\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n2 2\\n4 3\") == 21\nassert solution(\"3 1\\n2 2\\n4 3\\n\") == 180\n"
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\") == \"180\"\nassert solution(\"3\\n3 1\\n2 2\\n4 3\") == \"21\"\n\n\"\"\""
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n2 2\\n4 3\") == '21'\n"
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1\\n2 2\\n4 3') == '21'\n\"\"\""
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n0 0 10') == '2'\nassert solution('5\\n0 1 2 3 4') == '1'\nassert solution('4\\n0 0 0 0') == '4'\nassert solution('9\\n0 1 0 2 0 1 1 2 10') == '3'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n0 0 10') == 2\nassert solution('5\\n0 1 2 3 4') == 1\nassert solution('9\\n0 1 0 2 0 1 1 2 10') == 3\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 0 10') == 2\n\"\"\"\n"
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 0 10') == 2\nassert solution('5\\n0 1 2 3 4') == 1\nassert solution('9\\n0 1 0 2 0 1 1 2 10') == 3\n\n\n\"\"\"\n\n\n\n\nfrom collections import deque\nimport math"
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n0 0 10') == '2'\nassert solution('5\\n0 1 2 3 4') == '1'\nassert solution('4\\n0 0 0 0') == '4'\nassert solution('9\\n0 1 0 2 0 1 1 2 10') == '3'\n"
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n0 0 10') == 2\nassert solution('5\\n0 1 2 3 4') == 1\n\"\"\""
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 1 1\") == 1\nassert solution(\"9\\n0 1 0 2 0 1 1 2 10\") == 3\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\n\npiles = [int(x) for x in sys.stdin.readline().rstrip().split()]\n\nans = 0\nmin_pile_count = 0\nfor i in range(n):\n    if piles[i] > i:\n        ans += 1\n        min_pile_count = max(min_pile_count, ans)\n    else:\n        ans = 0\n\nprint(min_pile_count)\n"
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 0 10') == '2'\nassert solution('5\\n0 1 2 3 4') == '1'\nassert solution('4\\n0 0 0 0') == '4'\nassert solution('9\\n0 1 0 2 0 1 1 2 10') == '3'\nassert solution('3\\n1 0 10') == '2'\n"
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1, [1]) == 2\nassert solution(3, [0, 0, 1]) == 2\nassert solution(3, [0, 0, 0]) == 4\nassert solution(5, [0, 1, 2, 3, 4]) == 1\nassert solution(9, [0, 1, 0, 2, 0, 1, 1, 2, 10]) == 3\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a1) == a2\nassert solution(a2) == a3\nassert solution(a3) == a4\n\"\"\""
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\n"
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\n"
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\n\"\"\""
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\nassert solution(\"1\\n2 3\\n1 2\") == \"4\"\nassert solution(\"2\\n2 2\\n1 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\n\n\"\"\"\n\nfrom __future__ import annotations\nimport sys\n"
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\n\"\"\"\n\nimport sys\nimport math\n\nN = int(sys.stdin.readline())\npoint = []\nfor _ in range(N):\n    x, y = map(int, sys.stdin.readline().split())\n    point.append([x, y])\n\npoint.sort(key=lambda x: (x[1], x[0]))"
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\n\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5\n2 0\n1 0\n3 0\n3 3\n4 5\n''') == '5'\n\"\"\""
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == 5\n\"\"\"\nimport math\nimport sys\nimport os\nfrom typing import List\nfrom io import StringIO\nfrom collections import deque\n\nclass BinaryTree:\n    def __init__(self, data=None):\n        self.data = data\n        self.left = None\n        self.right = None\n"
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == 5\n\"\"\"\n\n\nfrom itertools import permutations, combinations\n"
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"4\"\n\"\"\"\n\nfrom __future__ import print_function"
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2') == '4'\n\"\"\"\n\n\"\"\"\n-----Code-----\n\"\"\""
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == '4'\nassert solution(\"4\\nW 1\\nB 2\\nW 3\\nB 3\\nW 4\\nW 2\\n\") == '4'\nassert solution(\"2\\nB 1\\nW 2\\n\") == '0'\nassert solution(\"1\\nB 1\\nW 2\\n\") == '0'\n\"\"\""
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"4\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\") == \"4\"\nassert solution(\"2\\nB 1\\nW 2\\nB 1\") == \"0\"\nassert solution(\"4\\nW 1\\nW 2\\nB 1\\nB 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\") == \"4\"\n\"\"\"\n\nN = int(input())\np = []\nfor _ in range(N):\n    p.append(input().split())"
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2''') == '4'\n\nassert solution('''3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2''') == '0'\n\nassert solution('''1\nW 1\nB 1''') == '0'\n\nassert solution('''3\nB 1\nW 1\nB 2\nW 3''') == '4'\n\nassert solution('''3\nW 2\nB 1\nW 1\nB 2\nW 3''') == '0'"
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2''') == '4'\n\nassert solution('''3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2''') == '1'\n\nassert solution('''3\nW 1\nW 2\nW 3\nB 1\nB 2\nB 3''') == '0'\n\nassert solution('''3\nB 2\nW 1\nB 1\nB 3\nW 1\nW 3\nB 2''') == '0'\n\nassert solution('''3\nB 3\nW 3\nB 2\nW 1\nW 1\nB 2\nB 3''') == '0'"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n6\\n3\\n\") == \"4\"\nassert solution(\"5\\n3\\n5\\n\") == \"4\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n6\\n3\") == '4'\nassert solution(\"5\\n3\\n5\") == '4'\n"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 6 3') == '4'\n\nassert solution('5 3 5') == '4'\nassert solution('5 2 5') == '4'\nassert solution('5 3 2') == '4'\nassert solution('5 3 3') == '1'\n"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n6\\n3') == '4'\nassert solution('5\\n3\\n5') == '4'\n\nfrom itertools import combinations"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n6\\n3') == '4'\n\nassert solution('5\\n3\\n5') == '4'\n\nassert solution('5\\n3\\n1') == '4'\n"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"5\\n6\\n3\"\n) == \"4\"\nassert solution(\n    \"5\\n3\\n5\"\n) == \"4\"\nassert solution(\n    \"4\\n2\\n2\"\n) == \"2\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n6\\n3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n6\\n3\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n6\\n3\\n') == '4'"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n6\\n3\\n\") == \"4\"\nassert solution(\"5\\n3\\n5\\n\") == \"4\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"8 1 2 4 8 16 32 64 576\") == \"32\"\n\"\"\""
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n4\\n\") == \"2\"\nassert solution(\"8\\n1 2 4 8 16 32 64 576\") == \"32\"\n\"\"\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n4 2') == '2'\nassert solution('8\\n1 2 4 8 16 32 64 576') == '32'\n\"\"\""
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n4 2\") == \"2\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8\n1 2 4 8 16 32 64 576''') == '32'\n"
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n') == '2'\n\n\"\"\"\nimport math\nimport re\nimport sys\n"
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('2') == '2'\nassert solution('4 2') == '2'\nassert solution('8 1 2 4 8 16 32 64 576') == '32'\nassert solution('1 2 4 8 16 32 64 576') == '32'\n"
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == 4\nassert solution('5 2 7') == '8'"
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 2 4 8 16 32 64 576\") == \"32\"\n\"\"\""
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"8 1 2 4 8 16 32 64 576\") == \"32\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"400 4\") == \"2\"\n\"\"\"\nimport sys\nfrom itertools import accumulate\n"
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4') == '2'\nassert solution('50 2') == '3'\nassert solution('400 4') == '2'\nassert solution('100 25') == '3'\n\"\"\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2 3 4\") == \"2\"\nassert solution(\"4 4\\n1 2 3 4\") == \"3\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"3\"\nassert solution(\"5 2\\n1 2 3 4 5\") == \"4\"\nassert solution(\"6 3\\n1 2 3 4 5 6\") == \"5\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"400 4\") == \"2\"\nassert solution(\"50 2\") == \"3\"\n\"\"\"\n\na, k = map(int, input().split())\nd = list(map(int, input().split()))"
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"400 4\\n100 300 450 500\") == \"2\"\nassert solution(\"50 2\\n100 25\") == \"3\"\n\n\"\"\"\n\n\"\"\"\nimport heapq\nimport sys"
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"400 4\") == \"2\"\nassert solution(\"50 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2') == '-1'\nassert solution('400 4') == '2'\nassert solution('50 2') == '3'\nassert solution('1000 1000') == '0'\n"
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"400 4\") == '2'\nassert solution(\"100 300 450 500\") == '2'\nassert solution(\"50 2\") == '3'\n"
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''400 4\n100 300 450 500''') == '2'\nassert solution('''50 2\n100 25''') == '3'\nassert solution('''0 1\n0 1''') == '0'\nassert solution('''0 0\n0 1''') == '0'"
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 300 450 500\") == \"2\"\nassert solution(\"50 2 100 25\") == \"3\""
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 1 1 1') == 6\n\"\"\"\n\n\"\"\"\nLongest Palindromic Subsequence\nhttps://www.hackerrank.com/challenges/ctci-longest-palindromic-subsequence/problem\n\nGiven: A string s of length at most 1000 b.\n\nReturn: The longest palindromic subsequence's length in s.\n\nSample Input:\nnitin\nSample Output:\n4\n\nExplanation:\nThe longest palindromic subsequence is \"nitin\".\n\nSample Input:\naab\nSample Output:\n2\nExplanation:\nThe longest palindromic subsequence is \"aa\".\n\nSample Input:\nabcbabcb\nSample Output:\n5\nExplanation:\nThe longest palindromic subsequence is \"abcba\".\n\"\"\""
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 2''') == '6'\nassert solution('''8 8''') == '8'\nassert solution('''9 9''') == '8'\nassert solution('''100 50''') == '40'\nassert solution('''10 2''') == '8'\n"
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"6\"\n\"\"\""
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == 6\n\"\"\"\nimport math\nfrom collections import Counter\nfrom itertools import product, permutations, combinations\nfrom functools import lru_cache\n\nn, k = map(int, input().split())\n\ncnt = Counter(list(product(range(1, k + 1), repeat=n)))\n\nans = 0\nfor p in permutations(range(1, k + 1)):\n    t = 1\n    for i, x in enumerate(p):\n        t *= x * (k - i)\n    ans += cnt[tuple(p)]\n\nprint(ans % (10 ** 9 + 7))\n"
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"6\"\n\"\"\"\n\nfrom operator import mul\nfrom functools import reduce"
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n1 2 3 4\") == \"6\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n') == 6\n\"\"\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n') == '6'\n\"\"\""
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '499122178'\n\n\"\"\"\n\nfrom math import log, sqrt, pow"
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2\\n') == '499122178'\nassert solution('3\\n') == '499122178'\nassert solution('5\\n') == '499122178'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"499122178\"\n\"\"\""
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"499122178\"\n\"\"\"\n\nfrom fractions import Fraction"
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '499122178'\nassert solution('1000') == '912869861'\n\n\"\"\"\n\nimport math\nfrom fractions import Fraction\n\nclass Solution:\n    def compute(self, n: str) -> str:\n        MOD = 998244353\n\n        def to_frac(s):\n            return Fraction(int(s), MOD)\n        \n        def expand(f):\n            f = str(f)\n            return f[:-1] + '0/1' + f[-1]\n        \n        def is_valid(f):\n            return Fraction(int(f), MOD) % 1 == 0 and 0 <= int(f) < MOD\n\n        def is_valid_frac(f):\n            if f % 1 == 0:\n                return 0 <= f.numerator and f.numerator < MOD and 0 <= f.denominator and f.denominator < MOD\n            else:\n                return False\n\n        def is_empty(f):\n            return int(f) == 0\n\n        def to_frac_safe(f):\n            if is_valid_frac(f):\n                return Fraction(int(f), MOD)\n            else:\n                return Fraction(0)\n\n        def to_frac_safe_safe(f):\n            return Fraction(int(f), MOD)\n\n        def incr(f):\n            return f + 1\n\n        def to_frac_safe_incr(f):\n            return to_frac_safe(incr(f))\n\n        def to_frac_safe_safe_incr(f):\n            return to_frac_safe_safe(incr(f))\n\n        def to_frac_safe_safe_safe_incr(f):\n            return to_frac_safe_safe_safe(incr(f))\n\n        def to_frac_safe_safe_safe_safe_incr(f):\n            return to_frac_safe_safe_safe_safe(incr(f))\n\n        def to_frac_safe_safe_safe_safe_safe_incr(f):\n            return to_frac_safe_safe_safe_safe_safe(incr(f))\n\n        def incr_frac(f):\n            return Fraction(f.numerator + 1, f.denominator)\n\n        def to_frac_incr(f):\n            return Fraction(int(f), MOD)\n        \n        def to_frac_incr_frac(f):\n            return Fraction(int(f), MOD)\n\n        def to_frac_incr_safe(f):\n            return to_frac_safe(incr_frac(f))\n\n        def to_frac_incr_safe_safe(f):\n            return to_frac_safe_safe(incr_frac(f))\n\n        def to_frac_incr_safe_safe_safe(f):\n            return to_frac_safe_safe_safe(incr_frac(f))\n\n        def to_frac_incr_safe_safe_safe_safe(f):\n            return to_frac_safe_safe_safe_safe(incr_frac(f))\n\n        def to_frac_incr_safe_safe_safe_safe_safe(f):\n            return to_frac_safe_safe_safe_safe_safe(incr_frac(f))\n\n        def to_frac_incr_safe_safe_safe_safe_safe_safe(f):\n            return to_frac_safe_safe_safe_safe_safe_safe(incr_frac(f))\n\n        def to_frac_incr_safe_safe_safe_safe_safe_safe_safe(f):\n            return to_frac_safe_safe_safe_safe_safe_safe_safe(incr_frac(f))\n\n        def to_frac_incr_safe_safe_safe_safe_safe_safe_safe_safe(f):\n            return to_frac_safe_safe_safe_safe_safe_safe_safe_safe(incr_frac(f))\n\n        def to_frac_incr_safe_safe_safe_safe_safe_safe_safe_safe_safe(f):\n            return to_frac_safe_safe_safe_safe_safe_safe_safe_safe_safe(incr_frac(f))\n\n        def to_frac_incr_safe_safe_safe_safe_safe_safe_safe_safe_safe_safe(f):\n            return to_frac_safe_safe_safe_safe_safe_safe_safe_safe_safe_safe(incr_frac(f))\n\n        def to_frac_incr_safe_safe_safe_safe_safe_safe_safe_safe_safe_safe_safe(f):\n            return to_frac_safe_safe_safe_safe_safe_safe_safe_safe_safe_safe_safe(incr_frac(f))\n\n        def incr_incr(f):\n            return Fraction(f.numerator + 1, f.denominator) + 1\n\n        def to_frac_incr(f):\n            return to_frac_safe(incr(f))\n\n        def to_frac_incr_incr(f):\n            return to_frac_safe_safe(incr(f))\n\n        def to_frac_incr_incr_incr(f):\n            return to_frac_safe_safe_safe(incr(f))\n\n        def to_frac_incr_incr_incr_incr(f):\n            return to_frac_safe_safe_safe_safe(incr(f))\n\n        def incr_incr(f):\n            return Fraction(f.numerator + 1, f.denominator) + 1\n\n        def to_frac_inc"
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '499122178'\nassert solution('4') == '499122178'\n\"\"\"\n\n\"\"\"\nhttps://www.youtube.com/watch?v=_CqOzE0IdPU&t=4s\n\"\"\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n3\n''') == '499122178'\n\"\"\""
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"499122178\"\nassert solution(\"10\") == \"496122485\"\nassert solution(\"15\") == \"1197165616\"\n\"\"\""
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"499122178\"\n\"\"\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"499122178\"\n\"\"\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2) == 6\nassert solution(3) == 666\nassert solution(10) == 6666\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"6669\"\nassert solution(\"10\") == \"-1\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"6669\"\nassert solution(\"10\") == \"-1\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"6669\"\nassert solution(\"10\") == \"-1\"\n\"\"\"\nimport math"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 6\nassert solution('3') == 6669\nassert solution('10') == -1\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\n\"\"\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"6669\"\nassert solution(\"10\") == \"-1\"\nassert solution(\"1\") == \"10\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"6669\"\nassert solution(\"10\") == \"-1\"\n"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1 4 3 2 0\"\nassert solution(\"1\") == \"1 0 2 4 3\"\nassert solution(\"2\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == '1 4 3 2 0'\nassert solution(\"2\") == '-1'\n\"\"\"\n\n\nimport sys\nfrom typing import List\nfrom itertools import permutations\n"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"-\"\nassert solution(\"5\") == \"1 4 3 2 0\"\nassert solution(\"4\") == \"1 0 2 4 3\"\nassert solution(\"3\") == \"2 4 0 1 3\"\nassert solution(\"2\") == \"-\"\n\"\"\""
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n\") == \"1 4 3 2 0\"\nassert solution(\"2\\n\") == \"-1\"\nassert solution(\"4\\n\") == \"-1\"\n"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 4 3 2 0\\n1 0 2 4 3\\n2 4 0 1 3\") == \"1 4 3 2 0\"\nassert solution(\"5\\n1 4 2 0 3\\n1 0 2 4 3\\n2 4 0 1 3\") == \"1 0 2 4 3\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 4 3 2 0\\n1 0 2 4 3\\n2 4 0 1 3\") == \"1 4 3 2 0\"\nassert solution(\"2\\n-1\\n\") == \"-1\"\nassert solution(\"1\\n1\\n1\\n1\") == \"1\"\n\"\"\""
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"-1\"\nassert solution(\"2\") == \"-1\"\n\nimport timeit\n\nprint(timeit.timeit('solution(\"5\")', number=100, globals=globals()))  # 0.00956800000000003\nprint(timeit.timeit('solution(\"2\")', number=100, globals=globals()))  # 0.03069199999999998\n\n\n-----Benchmark-----\n\n$ python3 LuckyPermutationTrip.py <(cat /tmp/random_input)\n5 0.004189999999999999\n2 0.008619999999999999\n\n$ python3 LuckyPermutationTrip.py <(cat /tmp/random_input)\n2 0.005699999999999997\n5 0.02529999999999999\n\n$ python3 LuckyPermutationTrip.py <(cat /tmp/random_input)\n5 0.003299999999999998\n2 0.002719999999999998\n\n$ python3 LuckyPermutationTrip.py <(cat /tmp/random_input)\n2 0.003419999999999998\n5 0.006899999999999996\n\n$ python3 LuckyPermutationTrip.py <(cat /tmp/random_input)\n2 0.002499999999999998\n5 0.006919999999999996\n\n-----Solution-----\n\n\n\n\n\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"-1\"\nassert solution(\"2\") == \"-1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2 2\\n1 1\\n3 3\\n\") == \"-1\\n\"\nassert solution(\"1\\n4 1\\n2 2\\n3 3\\n\") == \"1 4 3 2 0\\n1 0 2 4 3\\n\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == -1\n\"\"\""
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == 'No'\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 2 4 3\n''') == 'Yes'\n\n\"\"\"\n\nfrom collections import defaultdict, deque\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\nDEBUG = False\ndata = [int(n) for n in sys.stdin.readline().split()]\n\ngraph = defaultdict(list)\nfor i in range(1, len(data) - 1):\n    graph[data[i]].append(data[i + 1])\n    graph[data[i + 1]].append(data[i])\n\nvisited = set()\nqueue = deque()\nqueue.append(1)\nwhile queue:\n    cur_node = queue.popleft()\n    visited.add(cur_node)\n    for neigh in graph[cur_node]:\n        if neigh not in visited:\n            queue.append(neigh)\n\nfor i in data[1:]:\n    if i not in visited:\n        print('No')\n        break\nelse:\n    print('Yes')"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == \"No\"\n\"\"\"\n\nimport sys\nfrom collections import deque, defaultdict\n\nsys.setrecursionlimit(1500)\n"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == \"No\"\n\"\"\"\n\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == 'No'\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == 'Yes'\n\n-----Resources-----\n\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == 'Yes'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 4 3') == 'No'\n"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == 'Yes'\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 3 2 4\") == 'No'\n\"\"\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n1 2\n1 3\n2 4\n1 2 3 4''') == 'Yes'\nassert solution('''4\n1 2\n1 3\n2 4\n1 2 4 3''') == 'No'\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 3 2 4\") == \"No\"\nassert solution(\"4\\n1 2\\n1 3\\n2 3\\n1 2 3\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 3\\n1 3 2\") == \"No\"\nassert solution(\"4\\n1 2\\n2 3\\n3 1\\n1 2 3\") == \"No\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == \"No\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 0 5500\\n2 1 0 4500\\n2 1 0 3000') == '-1'\nassert solution('2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500') == '24500'\nassert solution('2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500') == '24500'\n"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500\") == \"24500\"\nassert solution(\"2 4 5\\n1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n\") == \"-1\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\") == \"24500\"\nassert solution(\"2 4 5\\n1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\") == \"-1\""
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500\") == \"24500\"\n\nassert solution(\"2 4 5\\n1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n\") == \"-1\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n\") == \"24500\"\nassert solution(\"1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n\") == \"24500\"\nassert solution(\"2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500\\n\") == \"24500\"\n\"\"\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '2 6 5'\n    '1 1 0 5000'\n    '3 2 0 5500'\n    '2 2 0 6000'\n    '15 0 2 9000'\n    '9 0 1 7000'\n    '8 0 2 6500'\n) == '24500'\n\n\n\n----\n"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input)) == str(output)\n\n\nimport heapq\n\nclass Node:\n    def __init__(self, val, left, right, parent):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.parent = parent\n    def __repr__(self):\n        return str(self.val)"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('2 4 5') == '-1'\nassert solution('2 6 5') == '24500'\n"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n\") == \"24500\"\nassert solution(\"1 1 0 5000\\n3 2 0 5500\\n2 1 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500\\n\") == \"24500\"\nassert solution(\"1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n\") == \"24500\"\n\n\"\"\""
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500') == '24500'\nassert solution('2 4 5\\n1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n') == '-1'\n\"\"\"\n"
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 45\") == \"0.828427125\"\nassert solution(\"6 4 30\") == \"19.668384925\"\n"
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 45\\n') == '0.828427125'\nassert solution('6 4 30\\n') == '19.668384925'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5 45') == '19.668384925'\n\n\"\"\"\n"
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 1 45\n''') == '0.828427125'\nassert solution('''6 4 30\n''') == '19.668384925'\nassert solution('''2 1 1\n''') == '2.0'\nassert solution('''3 4 2\n''') == '10.0'\nassert solution('''10 100 50\n''') == '100.0'\n"
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 45\") == '0.828427125'\nassert solution(\"6 4 30\") == '19.668384925'\n\n\"\"\""
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'\n\"\"\""
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 45\") == '0.828427125'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 45\") == \"0.828427125\"\n\"\"\"\n"
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 45\") == \"0.828427125\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'\n\n---"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\") == \"3000\"\nassert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\") == \"992\"\nassert solution(\"2 4\\nDEF 0\\nATK 0\\n0\\n0\\n1\\n1\") == \"1\""
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\\n\") == \"3000\"\nassert solution(\"2 4\\nDEF 0\\nATK 0\\n0\\n0\\n1\\n1\\n\") == \"1\"\nassert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\\n\") == \"992\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\") == '3000'\n\"\"\""
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\nATK 2000\\nDEF 1700\\nATK 2500\\n2500\\n2500\\n2500\") == \"3000\"\nassert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\") == \"992\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\") == \"3000\"\nassert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\") == \"992\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\") == \"3000\"\nassert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\") == \"992\"\n\"\"\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\nATK 10\\nATK 100\\nATK 1000\\n1\") == \"992\"\nassert solution(\"2 4\\nDEF 0\\nATK 0\\n0\\n0\\n1\") == \"1\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\") == \"992\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\") == 3000\nassert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\") == 992\n"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\nATK 0\\n"
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\") == '6'\nassert solution(\"2 2\\n1 2\\n0 0\\n2 1 -100 -100\\n\") == '2'\n"
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\") == \"6\"\nassert solution(\"5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n12 12 12 6 -3 -5 3 10 -4\") == \"2\"\nassert solution(\"5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n12 12 12 6 -3 -5 3 10 -4\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 1 1') == '6'\nassert solution('2 1 1 1') == '4'\nassert solution('2 1 1 1') == '4'\nassert solution('2 1 1 1') == '4'\n"
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n\") == 6\nassert solution(\"5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n12 12 12 6 -3 -5 3 10 -4\\n\") == 62\nassert solution(\"2 2\\n1 2\\n0 0\\n2 1 -100 -100\\n\") == 2\n\n----\n\nIn the first sample case it is optimal to recruit candidates $1, 2, 3, 5$. Then the show will pay $1 + 2 + 1 + 1 = 5$ roubles for recruitment. The events on stage will proceed as follows:\n\n  a participant with aggressiveness level $4$ enters the stage, the show makes $4$ roubles;  a participant with aggressiveness level $3$ enters the stage, the show makes $3$ roubles;  a participant with aggressiveness level $1$ enters the stage, the show makes $1$ rouble;  a participant with aggressiveness level $1$ enters the stage, the show makes $1$ roubles, a fight starts. One of the participants leaves, the other one increases his aggressiveness level to $2$. The show will make extra $2$ roubles for this. \n\nTotal revenue of the show will be $4 + 3 + 1 + 1 + 2=11$ roubles, and the profit is $11 - 5 = 6$ roubles.\n\nIn the second sample case it is impossible to recruit both candidates since the second one has higher aggressiveness, thus it is better to recruit the candidate $1$."
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    5 4\n    4 3 1 2 1\n    1 2 1 2 1\n    1 2 3 4 5 6 7 8 9\n    \"\"\") == '6'\nassert solution(\n    \"\"\"\n    2 2\n    1 2\n    0 0\n    2 1 -100 -100\n    \"\"\") == '2'\nassert solution(\n    \"\"\"\n    5 4\n    4 3 2 1 1\n    0 2 6 7 4\n    12 12 12 6 -3 -5 3 10 -4\n    \"\"\") == '62'\n"
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n\") == \"6\"\nassert solution(\"5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n12 12 12 6 -3 -5 3 10 -4\\n\") == \"2\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 4\n4 3 1 2 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\"\"\") == \"6\"\nassert solution(\"\"\"5 4\n4 3 2 1 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\"\"\") == \"2\"\nassert solution(\"\"\"5 4\n4 3 2 1 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\"\"\") == \"2\"\n\nassert solution(\"\"\"5 4\n4 3 1 1 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\"\"\") == \"2\"\nassert solution(\"\"\"5 4\n4 3 1 2 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\"\"\") == \"6\""
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\") == 6\n\nassert solution(\"2 2\\n1 2\\n0 0\\n2 1 -100 -100\\n\") == 2\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n\") == \"6\"\nassert solution(\"2 2\\n1 2\\n0 0\\n2 1 -100 -100\\n\") == \"2\"\nassert solution(\"5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n12 12 12 6 -3 -5 3 10 -4\\n\") == \"62\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9') == '6'\nassert solution('2 2\\n1 2\\n0 0\\n2 1 -100 -100\\n') == '2'\n"
    }
]