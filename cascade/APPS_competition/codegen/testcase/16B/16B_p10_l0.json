[
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 12 3 )\") == \"36\"\nassert solution(\"( 2 ) ( 3 )\") == \"5\"\nassert solution(\"( ( 2 3 ) )\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( ( ( 12 3 ) ) )\") == \"36\"\nassert solution(\"( ( 2 ) ( 3 ) )\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2 3') == '5'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\n\n'''"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n( 2 ( 2 1 ) )\n3\n''') == '5'\nassert solution('''4\n( 12 3 )\n3\n''') == '36'\nassert solution('''8\n( 2 ) ( 3 )\n2\n''') == '5'\nassert solution('''8\n( 2 )\n1\n''') == '5'\nassert solution('''6\n( ( 2 3 ) )\n3\n''') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '6'\nassert solution('2 3') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 12 3 )\") == \"36\"\nassert solution(\"( ( 2 3 ) )\") == \"5\"\nassert solution(\"( ( ( 2 3 ) ) )\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 12 3 )\") == \"36\"\nassert solution(\"( 2 ) ( 3 )\") == \"5\"\nassert solution(\"( ( 2 3 ) )\") == \"5\"\n\nprint('Successfully solved!')\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 12 3 )\") == \"36\"\nassert solution(\"( 2 ) ( 3 )\") == \"5\"\nassert solution(\"( ( 2 3 ) )\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == '5'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( 12 3 )') == '36'\nassert solution('( 2 ) ( 3 )') == '5'\nassert solution('( ( 2 3 ) )') == '5'\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\n\nstack = []\nfor c in s:\n    if c == '(':\n        stack.append(c)\n    elif c == ')':\n        stack.pop()\n    else:\n        pass"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 12 3 )\") == \"36\"\nassert solution(\"( 2 ) ( 3 )\") == \"5\"\nassert solution(\"( 12 3 )\") == \"36\""
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"000\") == 0\nassert solution(\"101\") == 2\nassert solution(\"11\") == 1\nassert solution(\"1111\") == 0\nassert solution(\"12\") == 1\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('009990001') == 3\nassert solution('29998') == 5\nassert solution('610') == 4\nassert solution('981') == 2\n\nprint('All tests passed.')\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('610') == '4'\nassert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('981') == '2'\n\n\"\"\""
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('610') == '4'\nassert solution('988') == '2'\nassert solution('019990001') == '3'\nassert solution('29998') == '5'\nassert solution('981') == '2'\n\n\"\"\"\n\nimport unittest\n\nclass Test_Solutions(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def test_0(self):\n        self."
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"009990001\") == 3\nassert solution(\"29998\") == 5\nassert solution(\"610\") == 4\n\"\"\""
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"610\") == \"4\"\nassert solution(\"981\") == \"2\"\n\n\"\"\"\n\nfrom unittest import TestCase\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('981') == '2'\n\nassert solution('610') == '4'\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('610') == 4\nassert solution('009990001') == 3\nassert solution('29998') == 5\nassert solution('981') == 2\n\"\"\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('981') == '2'\n\n####################################################################################################################################################################################################################################################################\n\n\u3010\u5b9f\u884c\u7d50\u679c\u3011\n> python p069_1.py\n0\n009990001\n29998\n981\n\n\u3010\u51fa\u529b\u7d50\u679c\u3011\n>\n\n\n\n####################################################################################################################################################################################################################################################################\n\n\u3010\u6f14\u7fd2\u3011\np069_1.py\u3068\u540c\u3058\u3088\u3046\u306b\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u6b21\u306e\u554f\u984c\u3092\u3059\u3079\u3066\u89e3\u304f\u306e\u306b\u5fc5\u8981\u306a\u6b69\u6570\u3092\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n-----Description-----\n\u30b5\u30fc\u30d5\u30a7\u30b9\u304c\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n1 2 3 4 5 6 7 8 9 10\n\n\u3053\u308c\u306f\u53cd\u5bfe\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u5de6\u304b\u3089\u53f3\u306b\u6b69\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n1 2 3 4 5 6 7 8 9 10\n\n\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3064\u307e\u308a\u3001\u3053\u306e\u3088\u3046\u306b\u6b69\u304f\u3088\u3046\u306b\u306a\u308b\u306e\u306f\u81ea\u7136\u6570\u3067\u3042\u308a\u3001\u305d\u306e\u81ea\u7136\u6570\u306f\u4f55\u6b69\u3067\u3082\u5272\u308a\u5207\u308c\u308b\u3053\u3068\u304c\u78ba\u5b9a\u3057\u307e\u3059\u3002\n\n\u4f55\u56de\u304b\u3060\u3051\u53cd\u5bfe\u306b\u306a\u308b\u306e\u306f\u91cd\u8981\u3067\u3059\u3002\n\n-----Input-----\n\u5165\u529b\u306f\u4efb\u610f\u306e\u6570\u306e\u30bf\u30d7\u30eb\u3067\u6e21\u3055\u308c\u307e\u3059\u3002\n\n-----Output-----\n\u5404\u6841\u304c\u53cd\u5bfe\u306b\u306a\u3063\u305f\u6642\u306e\u3068\u304d\u3001\u4f55\u56de\u76ee\u306b\u6b69\u3044\u305f\u306e\u304b\u3092\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n-----Examples-----\nSample Input 1:\n(0, 0, 0)\nSample Output 1:\n0\n\nSample Input 2:\n(9, 9, 9)\nSample Output 2:\n0\n\nSample Input 3:\n(0, 0, 9)\nSample Output 3:\n1\n\nSample Input 4:\n(1, 3, 9)\nSample Output 4:\n2\n\nSample Input 5:\n(3, 5, 5)\nSample Output 5:\n3\n\nSample Input 6:\n(9, 9, 9, 9)\nSample Output 6:\n4\n\nSample Input 7:\n(0, 0, 1, 9)\nSample Output 7:\n1\n\nSample Input 8:\n(5, 5, 6, 9)\nSample Output 8:\n2\n\nSample Input 9:\n(0, 0, 0, 0)\nSample Output 9:\n0\n\n-----Explanation-----\n\u30b5\u30fc\u30d5\u30a7\u30b9\u304c\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n1 2 3 4 5 6 7 8 9 10\n\n\u3053\u308c\u306f\u53cd\u5bfe\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u5de6\u304b\u3089\u53f3\u306b\u6b69\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n1 2 3 4 5 6 7 8 9 10\n\n\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3064\u307e\u308a\u3001\u3053\u306e\u3088\u3046\u306b\u6b69\u304f\u3088\u3046\u306b\u306a\u308b\u306e\u306f\u81ea\u7136\u6570\u3067\u3042\u308a\u3001\u305d\u306e\u81ea\u7136\u6570\u306f\u4f55\u6b69\u3067\u3082\u5272\u308a\u5207\u308c\u308b\u3053\u3068\u304c\u78ba\u5b9a\u3057\u307e\u3059\u3002\n\n\u4f55\u56de\u304b\u3060\u3051\u53cd\u5bfe\u306b\u306a\u308b\u306e\u306f\u91cd\u8981\u3067\u3059\u3002\n\n-----Challenge-----\n\u81ea\u7136\u6570\u306e\u9006\u6570\u306f\u4f55\u6b69\u3067\u3082\u5272\u308a\u5207\u308c\u308b\u306e\u3067\u3001\u305d\u306e\u5024\u3092\u4f55\u56de\u6b69\u3044\u3066\u3082\u505c\u6b62\u3067\u304d\u308b\u3002\n\n\u3053\u308c\u3089\u306f\u81ea\u7136\u6570\u306e\u9006\u6570\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3089\u3092\u5168\u3066\u89e3\u304f\u306e\u306b\u5fc5\u8981\u306a\u6b69\u6570\u3092\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n-----Reference-----\np069.pdf\n\n####################################################################################################################################################################################################################################################################\n\n\u3010\u6f14\u7fd2\u3011\np069_2.py\u3068\u540c\u3058\u3088\u3046\u306b\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u91cd\u8981\u306a\u70b9\u306f\u3001\u65b0\u3057\u3044\u6570\u5b57\u304c\u5165\u529b\u3055\u308c\u308b\u306e\u306f\u6700\u5f8c\u3060\u3051\u3067\u3001\u305d\u306e\u6642\u306b\u4f55\u6b69\u3067\u3082\u5272\u308a\u5207\u308c\u308b\u3002\u305d\u308c\u3092\u8003\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u5165\u529b\u306f\u4efb\u610f\u306e\u6570\u306e\u30bf\u30d7\u30eb\u3067\u6e21\u3055\u308c\u307e\u3059\u3002\n\n-----Description-----\n\u91cd\u8981\u306a\u70b9\u306f\u3001\u65b0\u3057\u3044\u6570\u5b57\u304c\u5165\u529b\u3055\u308c\u308b\u306e\u306f\u6700\u5f8c\u3060\u3051\u3067\u3001\u305d\u306e\u6642\u306b\u4f55\u6b69\u3067\u3082\u5272\u308a\u5207\u308c\u308b\u3002\u305d\u308c\u3092\u8003\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n-----Input-----\n\u5165\u529b\u306f\u4efb\u610f\u306e\u6570\u306e\u30bf\u30d7\u30eb\u3067\u6e21\u3055\u308c\u307e\u3059\u3002\n\n-----Output-----\n\u65b0\u3057\u3044\u6570\u5b57\u304c\u5165\u529b\u3055\u308c\u308b\u306e\u306f\u6700\u5f8c\u3060\u3051\u3067\u3001\u305d\u306e\u6642\u306b\u4f55\u6b69\u3067\u3082\u5272\u308a\u5207\u308c\u308b\u3002\u305d\u308c\u3092\u8003\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n-----Examples-----\nSample Input 1:\n(0, 0, 0)\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0') == 0\nassert solution('009990001') == 3\nassert solution('29998') == 5\nassert solution('610') == 4\nassert solution('981') == 2\n\nprint('PASSED')\n\n----\n\nimport sys"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000') =='seems legit'\nassert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42001') == 'insufficient service'\nassert solution('2\\n2013 1 0\\n2013 2 0') == 'tampered odometer'\n\nprint(solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000'))\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n') == \"seems legit\"\nassert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n') == \"seems legit\"\nassert solution('2\\n2013 1 0\\n2013 2 0\\n') == \"tampered odometer\"\nassert solution('2\\n2013 1 0\\n2013 2 0\\n') == \"tampered odometer\"\n\n\"\"\""
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000') =='seems legit'\nassert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42001') == 'insufficient service'\nassert solution('2\\n2013 1 0\\n2013 2 0') == 'tampered odometer'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n2017 4 0\n2017 8 12000\n2018 8 42000\"\"\") =='seems legit'\n\nassert solution(\"\"\"2\n2017 11 0\n2018 1 1000\"\"\") == 'tampered odometer'\n\nassert solution(\"\"\"2\n2013 1 0\n2013 2 0\"\"\") =='seems legit'\n\n\"\"\"\n9.5, 10.1\nIn Section 7.5, we showed that a string is a palindrome if and only if its reverse is equal to itself.\n\nIn this problem, we show that a string is a palindrome if and only if its palindrome decomposition is a palindrome.\n\nA palindrome decomposition of a string is a decomposition of that string into a sequence of (nonempty) palindromes, such that the reverse of the palindrome decomposition is equal to the original string.\n\nFor example, the palindrome decomposition of \"radar\" is the palindrome decomposition of \"rara\".\n\nWe say that a palindrome string is \"special\":\n\nIt is composed entirely of special characters.\nIt does not contain the empty string.\nIt is a palindrome itself.\nFor example, \"\", \"a\", \"ab\", \"aba\", \"abba\", \"radar\" and \"aabccabba\" are special palindromes.\n\nIt is easy to see that each string consisting of a single special character is a special palindrome.\n\nWrite a function:"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\") == \"seems legit\"\nassert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42001\") == \"insufficient service\"\nassert solution(\"2\\n2013 1 0\\n2013 2 0\") == \"tampered odometer\"\n\"\"\""
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n') =='seems legit'\nassert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42001\\n') == 'insufficient service'\nassert solution('2\\n2013 1 0\\n2013 2 0\\n') == 'tampered odometer'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\") == \"seems legit\"\nassert solution(\"3\\n2017 11 0\\n2018 1 1000\\n2018 2 0\") == \"tampered odometer\"\nassert solution(\"2\\n2013 1 0\\n2013 2 0\") == \"seems legit\"\n\"\"\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2017 11 0\\n\"\n        \"2017 11 2000\\n\"\n        \"2017 12 0\") == \"seems legit\"\nassert solution(\"2017 11 0\\n\"\n        \"2017 11 2000\\n\"\n        \"2018 1 1000\") == \"insufficient service\"\nassert solution(\"2013 1 0\\n\"\n        \"2013 2 0\") == \"tampered odometer\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\") == \"seems legit\"\nassert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42001\") == \"insufficient service\"\nassert solution(\"2\\n2013 1 0\\n2013 2 0\") == \"tampered odometer\"\n\n\"\"\"\n\nimport collections\n\nclass Car_Service:\n    def __init__(self, service_history):\n        self.service_history = collections.deque(service_history)\n\n    def calculate_tampered_odometer(self):\n        for i in range(len(self.service_history)):\n            if self.service_history[i][1] == 1 and self.service_history[i][2] == 0:\n                return 'tampered odometer'\n            elif self.service_history[i][1] == 1 and self.service_history[i][2] < self.service_history[i+1][2]:\n                return 'tampered odometer'\n        return'seems legit'"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(expected_output)"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\n''') == '2'\n\nassert solution('''\n6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\n''') == '2'\n\nassert solution('''\n4\n1 2\n0 2 3\n0 1\n1\n''') == '3'\n\nassert solution('''\n4\n1 2\n0 2 3\n0 1\n1\n''') == '4'\n\nassert solution('''\n5\n1 2\n0 2 3\n1 5\n0 4\n1 3 5\n2 4\n''') == '2'"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2\\n0 2 3\\n0 1\\n1\\n') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n') == '2'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n') == '2'\n\n\"\"\"\nimport collections\nimport itertools\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(sample_input) == sample_output\nprint(solution(stdin))\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"2\"\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"2\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"4\"\nassert solution(\"5\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1,2') == '1'\nassert solution('2,3') == '2'\nassert solution('1,2,3') == '3'\nassert solution('1,2,3,4') == '4'\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\") == \"2\"\nassert solution(\"4\\n1 2 3\\n0 2 3\\n0 1 3\\n0 1 2\") == \"4\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == '3'\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n\") == '2'\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == '2'\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == '4'\n\n\"\"\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2\\n0 2 3\\n0 1\\n1\\n') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n') == '2'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n') == '2'\nassert solution('4\\n1 2\\n0 2 3\\n0 1\\n1\\n') == '4'\n\"\"\"\n\nimport sys\nfrom queue import Queue"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\nBLUE 1 5000\nRED 5001 10000\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n2\nBLUE 1 4000\nRED 4002 10000\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n3\nBLUE 1 3000\nRED 2000 5000\nWHITE 7000 10000\n\"\"\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4001 8000\") == \"IMPOSSIBLE\"\nassert solution(\"2\\nBLUE 1 4000\\nRED 4002 10000\") == \"IMPOSSIBLE\"\n\"\"\"\n\nN = int(input())\noffers = []\nfor i in range(N):\n    offer = input().split()\n    offers.append(offer)"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\"\nassert solution(\"1 5000\") == \"IMPOSSIBLE\"\nassert solution(\"2 5000 4500\") == \"2\"\nassert solution(\"1 6000 2 6000 3 4000\") == \"3\"\nassert solution(\"1 10000\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\nBLUE 1 5000\nRED 5001 10000\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n2\nBLUE 1 5000\nRED 5001 10000\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\nBLUE 1 3000\nRED 2000 5000\nWHITE 7000 10000\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\nBLUE 1 5000\nRED 5001 10000\n\"\"\") == 2\n\nassert solution(\"\"\"\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n\"\"\") == 3\n\nassert solution(\"\"\"\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n2\nBLUE 1 4000\nRED 4002 10000\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n3\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\n\"\"\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\") == \"IMPOSSIBLE\"\n\"\"\"\n\nfrom enum import Enum\nfrom collections import defaultdict\n\n\nclass Color(Enum):\n    BLUE = 0\n    RED = 1\n    WHITE = 2\n    ORANGE = 3\n    GREEN = 4\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\") == \"IMPOSSIBLE\"\nassert solution(\"2\\nBLUE 1 4000\\nRED 4002 10000\") == \"IMPOSSIBLE\"\n\n\"\"\"\n\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BLUE 1 5000\\nRED 5001 10000\") == 2\n\n\"\"\"\nimport math"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\nassert solution('''\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == '3'\nassert solution('''\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == 'IMPOSSIBLE'"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\") == \"IMPOSSIBLE\"\n\"\"\"\n\nfrom typing import List\nfrom collections import deque\n\nclass Solution:\n    \"\"\"\n    Finds the minimum number of offers to accept such that:\n     - Every section of the fence is painted.\n     - At most 3 colors are used to paint the fence.\n    \"\"\"\n    def min_offers(self, fence: List[str], num_offers: int, num_colors: int, num_slices: int) -> int:\n        # construct a graph for the fence and the points\n        graph = {}\n        for section in range(1, len(fence) + 1):\n            graph[section] = set()\n\n        # construct the graph\n        for i in range(num_offers):\n            offer_slice, offer_color = map(int, fence[i].split())\n            if offer_color in graph[offer_slice]:\n                continue\n            graph[offer_slice].add(offer_color)\n            graph[offer_slice].add(offer_color + 1)\n            if offer_slice + 1 < num_slices + 1:\n                graph[offer_slice + 1].add(offer_color + 1)\n\n        # do a BFS to see how many colors can be used\n        queue = deque([1])\n        color_used = set()\n        while queue:\n            current_section = queue.popleft()\n            for i in range(num_colors):\n                if i not in color_used and i + 1 in graph[current_section]:\n                    queue.append(current_section + 1)\n                    color_used.add(i)\n                    if len(color_used) == num_colors:\n                        return i + 1\n\n        return \"IMPOSSIBLE\""
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"PRATTATTATTIC\") == 6\nassert solution(\"GGGGGGGGG\") == 1\nassert solution(\"PRIME\") == 5\nassert solution(\"BABBABABBABBA\") == 6\n\"\"\"\n\nimport sys\nimport re\n\nsys.stdin = open('SampleInput.txt', 'r')"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('PRATTATTATTIC') == 6\nassert solution('GGGGGGGGG') == 1\nassert solution('PRIME') == 5\nassert solution('BABBABABBABBA') == 6\n\nprint('The local tests are done. Click on \"Check\" for more details.')"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"PRATTATTATTIC\") == 6\nassert solution(\"GGGGGGGGG\") == 1\nassert solution(\"PRIME\") == 5\nassert solution(\"BABBABABBABBA\") == 6\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(PRATTATTATTIC) == 6\nassert solution(PRIME) == 5\nassert solution(BABBABABBABBA) == 6\n\nimport sys\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n@atexit.register\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"PRATTATTATTIC\") == 6\nassert solution(\"GGGGGGGGG\") == 1\nassert solution(\"PRIME\") == 5\nassert solution(\"BABBABABBABBA\") == 6\nassert solution(\"ABABABABABBA\") == 6\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"PRATTATTATTIC\") == 6\nassert solution(\"GGGGGGGGG\") == 1\nassert solution(\"PRIME\") == 5\nassert solution(\"BABBABABBABBA\") == 6"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"PRATTATTATTIC\") == 6\nassert solution(\"PRIME\") == 5\nassert solution(\"BABBABABBABBA\") == 6\n\"\"\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"POP\") == \"2\"\nassert solution(\"POPPOP\") == \"4\"\nassert solution(\"POPPOPPOPPOP\") == \"5\"\nassert solution(\"POPPOPPOPPOPP\") == \"5\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AAAA') == 4\nassert solution('ABAB') == 4\nassert solution('ABBA') == 4\nassert solution('ABABA') == 4\nassert solution('BABBA') == 4\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"PRATTATTATTIC\") == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('D 1\\nD 2\\nE') == '0'\nassert solution('D 1\\nD 1\\nE') == '0'\nassert solution('D 1\\nD 2\\nD 3\\nE') == '1'\nassert solution('D 1\\nI 1 X\\nD 1\\nE') == '0'\nassert solution('D 1\\nI 14 B\\nI 14 A\\nE') == '0'\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"D 1\") == \"0\"\nassert solution(\"D 1 D 2\") == \"0\"\nassert solution(\"D 2 D 1\") == \"1\"\nassert solution(\"D 1 D 3\") == \"1\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\"\n) == \"0\"\n\nassert solution(\n    \"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\"\n) == \"1\"\n\nassert solution(\n    \"I 1 X\\nD 1\\nE\\nE\"\n) == \"0\"\n\nassert solution(\n    \"I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\"\n) == \"0\"\n\nprint('Successfully solved')\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\") == \"0\"\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\") == \"1\"\nassert solution(\"I 1 X\\nD 1\\nE\\nE\") == \"0\"\nassert solution(\"I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\") == \"0\""
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"D 1\") == \"0\"\nassert solution(\"D 1\\nD 2\\nE\") == \"0\"\nassert solution(\"D 2\\nD 1\\nE\") == \"1\"\nassert solution(\"I 1 X\\nD 1\\nE\") == \"0\"\nassert solution(\"I 14 B\\nI 14 A\\nE\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('D 1\\nD 2\\nE') == '0'\nassert solution('D 1\\nD 2\\nI 1 X\\nD 1\\nD 2\\nE') == '1'\nassert solution('I 14 B\\nI 14 A\\nE') == '0'\nassert solution('D 2\\nD 1\\nE') == '1'\nassert solution('I 14 A\\nI 15 B\\nE') == '0'\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"D 1\") == \"0\"\nassert solution(\"D 2\") == \"0\"\nassert solution(\"E\") == \"0\"\nassert solution(\"D 3\") == \"0\"\nassert solution(\"D 1\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('D 1\\nD 2\\nE\\nD 3\\nD 1\\nE') == '0'\nassert solution('D 2\\nD 1\\nE\\nD 1\\nD 2\\nE') == '1'\nassert solution('I 1 X\\nD 1\\nE\\nE') == '0'\nassert solution('I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE') == '0'\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\") == \"0\"\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\") == \"1\"\nassert solution(\"I 1 X\\nD 1\\nE\\nE\") == \"0\"\nassert solution(\"I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\") == \"0\"\n\nimport sys; input = sys.stdin.readline\nassert input() == \"D 1\\n\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"D 1\") == \"0\"\nassert solution(\"D 2\") == \"0\"\nassert solution(\"E\") == \"0\"\nassert solution(\"D 3\") == \"0\"\nassert solution(\"D 1\") == \"0\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 0 1 0 0 0''') == '300'\nassert solution('''5 0 1 0 1 0''') == '1900'\nassert solution('''6 0 1 1 0 0''') == '2300'\nassert solution('''10 399 0 0 0 0''') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"4 0 1 0 0 0\"\"\") == \"300\"\nassert solution(\"\"\"5 0 1 0 1 0\"\"\") == \"1900\"\nassert solution(\"\"\"6 0 1 1 0 0\"\"\") == \"2300\"\nassert solution(\"\"\"10 399 0 0 0 0\"\"\") == \"399\"\n\"\"\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\n\n\"\"\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\n\n\"\"\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1,0,0,0,0') == '1'\nassert solution('1,1,0,0,0') == '1'\nassert solution('1,0,0,0,0') == '1'\nassert solution('2,0,0,0,0') == '2'\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n\"\"\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 10\\n1 5\\n1 4') == '2'\nassert solution('2 10\\n1 12\\n1 13') == '2'\nassert solution('2 10\\n1 5\\n1 12') == '2'\nassert solution('2 10\\n1 5\\n4 1') == '2'"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10\\n1 12\\n1 13\") == 2\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 10\\n1 5\\n1 4\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10\\n1 12\\n1 13') == 2\nassert solution('2 10\\n4 1\\n1 5') == 2\nassert solution('2 10\\n1 5\\n4 1') == 2\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(example_1) == 2\nassert solution(example_2) == 2\nassert solution(example_3) == 2\nassert solution(example_4) == 2\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 10\\n1 5\\n1 4') == 2\nassert solution('2 10\\n1 12\\n1 13') == 2\nassert solution('2 10\\n4 1\\n1 4') == 2\nassert solution('2 10\\n4 1\\n4 1') == 1\nassert solution('2 10\\n4 1\\n4 2') == 1\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 10\\n1 12\\n1 13\") == \"2\"\nassert solution(\"2 10\\n4 1\\n1 5\") == \"2\"\nassert solution(\"2 10\\n4 1\\n1 5\") == \"2\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 10\\n1 5\\n1 12\\n') == 2\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 10\\n1 5\\n1 4\\n') == 2"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10\\n1 12\\n1 13\") == 2\nassert solution(\"2 10\\n1 5\\n1 12\\n1 13\") == 2\nassert solution(\"2 10\\n4 1\\n1 5\\n1 12\\n1 13\") == 2\nassert solution(\"2 10\\n1 5\\n4 1\\n1 5\\n1 12\\n1 13\") == 2\nassert solution(\"2 10\\n1 5\\n4 1\\n1 5\\n1 4\\n1 12\\n1 13\") == 2\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\") == \"28\"\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == \"28.970562748\"\nassert solution(\"8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\") == \"32\"\n\n\"\"\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n10 10 5\n10 20 1\n20 10 12\n20 20 8\n''') == '28.970562748'\nassert solution('''6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '28.970562748'\nassert solution('''8\n4 4 1\n4 6 1\n4 8 1\n6 6 14\n8 4 1\n8 6 1\n8 8 1\n99 6 -8\n''') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8\") == \"28.970562748\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10**7)"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8') == '28.970562748'\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution(self):\n        pass"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5') == '28'\nassert solution('4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8') == '36.2842712475'\nassert solution('6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3') == '28.970562748'\nassert solution('8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8') == '32'\n\"\"\"\n\nfrom typing import Tuple\n\nfrom gon.base import Vector\nfrom gon.matrix import Matrix, MatrixMultiplicationError\nfrom gon.vector import VectorMultiplicationError\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8') == '28.970562748'\n\nprint(solution(stdin))\n\"\"\"\n\nn = int(input())\n\ndp = [0] * (n + 1)\ndp[1] = 1\n\nfor i in range(2, n + 1):\n    dp[i] = min(dp[i - 1] + 1, dp[i - 2] + 1)\n    for j in range(1, i):\n        dp[i] = min(dp[i], dp[j - 1] + dp[i - j])\n\nprint(dp[n])\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\") == '28'\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == '28.970562748'\nassert solution(\"8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\") == '32'\n\"\"\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\") == \"28\"\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == \"28.970562748\"\n\"\"\"\n\nimport sys\nfrom math import sqrt\n\ninput = sys.stdin.read()\nlines = input.split('\\n')\nn = int(lines[0])\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\") == \"28\"\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == \"28.970562748\"\nassert solution(\"8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\") == \"32\"\n\"\"\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8\\n\") == \"28.970562748\"\n\"\"\""
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 4 5\\n5 6 7\\n1 3 9\\n2 2 6\\n4 8 9\\n5 3 3') == '1\\n3'\nassert solution('3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\\n5 1 7 7') == '1\\n2\\n3\\n3'\nassert solution('3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\\n5 1 7 7') == '1\\n2\\n3\\n3'"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 6 5\\n2 5 5 4\") == 1\nassert solution(\"5 2 7 10\\n7 4 4 10\") == 1\nassert solution(\"3 2 7 10\\n7 4 4 10\") == -1\nassert solution(\"2 1 6 5\\n2 5 5 4\") == 1\nassert solution(\"1 1 2\\n1 2 1\") == 1\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 9 5\\n2 2 6 8\\n4 8 9 3') == 3\n\"\"\"\n\nn = int(input())\n\nd = {}\nfor i in range(n):\n    l = list(map(int, input().split()))\n    x0, y0, x1, y1 = l[0], l[1], l[2], l[3]\n    if x0 * y1 - x1 * y0 in d:\n        d[x0 * y1 - x1 * y0] += 1\n    else:\n        d[x0 * y1 - x1 * y0] = 1\n\ncnt = 0\nfor i in d.values():\n    if i > 1:\n        cnt += 1\nprint(cnt)\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3') == '3'\nassert solution('3\\n5 2 7 10\\n7 4 4 10') == '1'\nassert solution('3\\n2 1 6 5\\n2 5 5 4') == '1'\nassert solution('3\\n-1 -2 -1 -1\\n-1 2 -1 -1') == '1'\n\n\"\"\"\n\nimport sys\nimport math\nfrom typing import List, Dict\n\nimport pytest\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\\n') == 3\nassert solution('3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\\n') == 1\nassert solution('3\\n-1 -2 -1 -1\\n-1 2 -1 -1\\n5 1 7 7\\n') == 1\nassert solution('2\\n-1 -2 -1 -1\\n-1 2 -1 -1\\n5 1 7 7\\n') == -1\nassert solution('2\\n2 1 6 5\\n2 5 5 4\\n5 1 7 7\\n') == -1\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 9 5\\n2 2 6 8\\n4 8 9 3\") == '3'\nassert solution(\"1 3 9 5\\n2 2 6 8\\n4 8 9 3\") == '3'\nassert solution(\"5 2 7 10\\n7 4 4 10\\n2 4 10 8\") == '1'\nassert solution(\"5 2 7 10\\n7 4 4 10\\n2 4 10 8\") == '1'\nassert solution(\"5 -1 7 -1\\n7 4 4 10\\n2 4 10 8\") == '-1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\") == \"3\"\nassert solution(\"3\\n5 2 7 10\\n7 4 4 10\") == \"1\"\nassert solution(\"3\\n2 1 6 5\\n2 5 5 4\\n5 1 7 7\") == \"1\"\nassert solution(\"2\\n-1 -2 -1 -1\\n-1 2 -1 -1\") == \"1\"\n\n\"\"\"\n\nimport sys\n\n\"\"\"\n\nfor num in range(int(sys.stdin.readline())):\n    line_num = int(sys.stdin.readline())\n    line_point = []\n    for _ in range(line_num):\n        line_point.append(list(map(int, sys.stdin.readline().split(' '))))\n    intersect_num = 0\n    for i in range(len(line_point)):\n        for j in range(len(line_point)):\n            if i!= j:\n                if line_point[i][0] > line_point[j][0] and line_point[i][1] > line_point[j][1]:\n                    if line_point[i][0] < line_point[j][2] and line_point[i][1] < line_point[j][3]:\n                        intersect_num += 1\n                elif line_point[i][0] < line_point[j][0] and line_point[i][1] < line_point[j][1]:\n                    if line_point[i][0] > line_point[j][2] and line_point[i][1] > line_point[j][3]:\n                        intersect_num += 1\n    print(intersect_num)\n\n\"\"\"\n\nfor num in range(int(sys.stdin.readline())):\n    line_num = int(sys.stdin.readline())\n    line_point = []\n    for _ in range(line_num):\n        line_point.append(list(map(int, sys.stdin.readline().split(' '))))\n    intersect_num = 0\n    for i in range(len(line_point)):\n        for j in range(len(line_point)):\n            if i!= j:\n                if line_point[i][0] > line_point[j][0] and line_point[i][1] > line_point[j][1]:\n                    if line_point[i][0] < line_point[j][2] and line_point[i][1] < line_point[j][3]:\n                        intersect_num += 1\n                elif line_point[i][0] < line_point[j][0] and line_point[i][1] < line_point[j][1]:\n                    if line_point[i][0] > line_point[j][2] and line_point[i][1] > line_point[j][3]:\n                        intersect_num += 1\n    print(intersect_num)"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 6 5\\n2 5 5 4\") == 1\nassert solution(\"3 2 7 10\\n7 4 4 10\") == 1\nassert solution(\"3\\n-1 -2 -1 -1\\n-1 2 -1 -1\") == 1\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\\n') == 3\nassert solution('3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\\n') == 1\nassert solution('3\\n-1 -2 -1 -1\\n-1 2 -1 -1\\n5 1 7 7\\n') == 1\nassert solution('2\\n-1 -2 -1 -1\\n-1 2 -1 -1\\n') == -1\n\n\"\"\""
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\\n\") == \"3\"\nassert solution(\"3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == 10\nassert solution('55') == 55\nassert solution('101') == -1\nassert solution('1234321') == 94708"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"55\") == \"55\"\nassert solution(\"101\") == \"-1\"\nassert solution(\"1234321\") == \"94708\"\nprint(\"Passed all tests.\")"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"55\") == \"55\"\nassert solution(\"101\") == \"-1\"\nassert solution(\"1234321\") == \"94708\"\n\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(101) == -1\nassert solution(1234321) == 94708\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1234\") == -1\nassert solution(\"123421\") == 94708\nassert solution(\"123123\") == -1\nassert solution(\"133321\") == 94708\nassert solution(\"123123\") == -1\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(999999)\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\nassert solution('12345') == '-1'\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12345') == '12345'\nassert solution('123456789') == '123456789'\nassert solution('1234567890') == '123456789'\nassert solution('1234567890123456789') == '1234567890123456789'\nassert solution('12345678901234567890123456789') == '12345678901234567890123456789'\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n\"\"\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == -1\nassert solution(\"12345678910111213141516171819202122232425262728293031323334353637\") == -1\nassert solution(\"12345678910111213141516171819202122232425262728293031323334353637\") == 94708\nassert solution(\"1234321\") == 94708\nassert solution(\"12345678910111213141516171819202122232425262728293031323334353637\") == -1\n\n\"\"\"\n\n\n\"\"\"\nSample Input 1:\n10\nSample Output 1:\n10\n\nSample Input 2:\n55\nSample Output 2:\n55\n\nSample Input 3:\n101\nSample Output 3:\n-1\n\nSample Input 4:\n1234321\nSample Output 4:\n94708\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 0 0 5') == '6'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\n\"\"\"\n\nfrom functools import lru_cache\n\n@lru_cache(None)\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 0 0 0 3\") == 6\nassert solution(\"1 2 0 0 5\") == 2\nassert solution(\"1 2 0 0 4\") == 4\nassert solution(\"1 2 0 0 6\") == 0\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 0 0 0 3') == 6\nassert solution('1 2 0 0 5') == 2\nassert solution('1 2 0 0 4') == 4\nassert solution('1 2 0 0 6') == 0\nassert solution('1 0 0 1') == 0\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 0 0 0 3\") == 6\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 0 0 0 3\") == 6\nassert solution(\"1 2 0 0 5\") == 2\nassert solution(\"1 2 0 0 4\") == 4\nassert solution(\"1 2 0 0 6\") == 0\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 0 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 0 0 0 3\") == 6\nassert solution(\"1 2 0 0 5\") == 2\nassert solution(\"1 2 0 0 4\") == 4\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 0 0 0 3') == '6'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 0 0 0 3\") == 6\nassert solution(\"1 2 0 0 5\") == 2\nassert solution(\"1 2 0 0 4\") == 4\nassert solution(\"1 2 0 0 6\") == 0\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == '-1.26167861 3.88425357'\nassert solution(\"0.5 8 8\") == '9.21068947 2.56226688'\nassert solution(\"1 8 8\") == '6.22375968 -0.31921472'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\nassert solution('0.5 -8 8') == '-4.36385220 9.46891588'\n\"\"\""
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\nprint('Passed')\n\n\"\"\"\n\nimport math\nimport random\nimport sys"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\nassert solution(\"0.5 -8 8\") == \"-4.36385220 9.46891588\"\n\"\"\"\n\nimport math\n\nb, t_x, t_y = [float(n) for n in input().split()]\nt_x, t_y = round(t_x, 3), round(t_y, 3)\n\nr = b * t_x / math.sqrt(t_x ** 2 + t_y ** 2)\nphi = math.acos(t_x / r)\n\nx = round(r * math.cos(phi) - b * math.sin(phi), 5)\ny = round(r * math.sin(phi) + b * math.cos(phi), 5)\nprint(x, y)\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\n\nimport math\nimport re"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"2.00207068 0.30239539\"\n\"\"\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n\"\"\"\nimport math"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == '-1.26167861 3.88425357'\nassert solution(\"0.5 8 8\") == '9.21068947 2.56226688'\nassert solution(\"1 8 8\") == '6.22375968 -0.31921472'\nassert solution(\"0.5 -8 8\") == '-4.36385220 9.46891588'\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\") == \"1\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == \"1\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"2\"\n\n\"\"\"\n\nimport math\n\nstdin = stdin.split('\\n')\nn, m = map(int, stdin[0].split())\nc = [0] * (n + 1)\ncount = 0\n\nfor i in range(m):\n    a, b = map(int, stdin[i + 1].split())\n    if c[a]!= 0 and c[a]!= b:\n        count += 1\n    elif c[b]!= 0 and c[b]!= a:\n        count += 1\n    c[a] = b\n    c[b] = a\n\nprint(count)\nprint('\\n'.join([str(i) for i in range(1, n + 1) if c[i] == i]))\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\\n\") == \"1\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\\n\") == \"1\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\\n\") == \"0\"\n\n\"\"\"\n\n\"\"\"\nWe can solve this problem with dynamic programming. In this problem, we have to find a way to determine the minimum number of corridors that must be removed, if we remove at most half the corridors.\n\nNow, as we are supposed to remove at most half of the corridors, we can conclude that at most the first $m/2$ edges will be removed. For example, if there are $m = 10$ edges, then the minimum number of corridors to remove is 6.\n\nIf we want to remove at most half of the edges, we need to remove the first $m/2$ edges. If we remove the last $m/2$ edges, then we can remove all the edges. Thus, we want to remove at most half of the edges.\n\nWe can find out the minimum number of edges to remove using the following recurrence:\n\n$G(m) = G(m/2) + m/2 + G(m/2)$\n\nThe recurrence above tells us the minimum number of edges to remove.\n\nThe only thing that is not obvious is the recurrence for the number of edges remaining after removal. The recurrence for the number of edges remaining after removal can be found as follows:\n\n$G(m - n) = G(m - (m-n)) + (m-n) + G((m-n) - (m-n))$\n\nFrom the above recurrence, we can see that if we want to remove $n$ edges, we need to do so in two ways:\n\nRemove all the edges using the first recurrence and then remove the last $n$ edges using the second recurrence.\n\nOr, we can remove the first $n$ edges using the first recurrence and then remove all the edges using the second recurrence.\n\nThus, we can find the minimum number of edges to remove using the following recurrence:\n\n$G(m - n) = G(m/2) + G(m/2 - n)$\n\nNow, we just need to figure out the number of edges we need to remove in the first recursion and the number of edges we need to remove in the second recursion. To do so, we can use the following recurrence to determine the number of edges to remove in the first recursion:\n\n$G(m - n) = G(m - (m-n)) + (m-n) + G((m-n) - (m-n))$\n\nThis recurrence tells us that the number of edges to remove in the first recursion is $G(m - n) = G(m/2) + G(m/2 - n)$. If we use the second recurrence, we get:\n\n$G(m - n) = G(m - (m-n)) + (m-n) + G((m-n) - (m-n))$\n\nThis recurrence tells us that the number of edges to remove in the second recursion is $G(m - n) = G(m - (m-n)) + (m-n)$.\n\nThus, we can solve this problem using dynamic programming. We can find the number of edges to remove in the first recursion and the number of edges to remove in the second recursion using the above recurrences. And then we can just store these values in a dictionary and return the key with the minimum value of the dictionary.\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\\n\") == \"1\\n2\\n\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\\n\") == \"1\\n1\\n\"\nassert solution(\"4 5\\n1 2\\n1 3\\n3 2\\n2 4\\n3 4\\n\") == \"0\\n0\\n\"\nassert solution(\"4 5\\n1 2\\n1 3\\n3 2\\n2 4\\n3 4\\n\") == \"2\\n4\\n5\\n\"\nassert solution(\"4 5\\n1 2\\n1 3\\n3 2\\n2 4\\n3 4\\n\") == \"2\\n4\\n5\\n\"\n\nprint(\"Passed.\")\n\n\"\"\"\nimport os\nimport typing\n\nINPUT_FILE = \"input/input.txt\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\\n\") == \"1\\n2\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\\n\") == \"1\\n1\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\\n\") == \"1\\n1\"\n\nprint(\"Successfully solved!\\n\")\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 2\\n2 1\\n') == '1'\nassert solution('3 3\\n1 2\\n2 3\\n3 1\\n') == '1'\nassert solution('4 5\\n1 2\\n1 3\\n3 2\\n2 4\\n3 4\\n') == '0'\nassert solution('4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\\n') == '2'\nprint('Passed!')\n\n\"\"\""
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\\n\") == \"1\"\n\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\\n\") == \"0\"\n\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\\n\") == \"2\"\n\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\\n\") == \"2\"\n\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\\n\") == \"2\""
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\") == '1'\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == '1'\nassert solution(\"4 5\\n1 2\\n1 3\\n3 2\\n2 4\\n3 4\") == '0'\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == '2'\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\\n\") == \"1\\n2\\n\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\\n\") == \"0\\n0\\n1\\n\"\nassert solution(\"4 5\\n1 2\\n1 3\\n3 2\\n2 4\\n3 4\\n\") == \"2\\n4\\n5\\n\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\\n\") == \"1\\n1\\n2\\n\"\n\n\"\"\"\n\nfrom typing import Dict, List\n\n\nclass Node:\n    def __init__(self, room_id: int, corridor: int, visited: bool):\n        self.room_id = room_id\n        self.corridor = corridor\n        self.visited = visited\n\n    def __hash__(self):\n        return hash((self.room_id, self.corridor))\n\n    def __eq__(self, other):\n        return self.room_id == other.room_id and self.corridor == other.corridor\n\n    def __str__(self):\n        return f\"{self.room_id} {self.corridor}\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\") == \"1\\n2\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == \"1\\n1\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"1\\n1\"\n\n\"\"\"\n\nimport unittest\nfrom collections import deque, defaultdict\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\\n\") == \"1\\n2\\n\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\\n\") == \"0\\n1\\n2\\n\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\\n\") == \"2\\n4\\n5\\n\""
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\nassert solution(\"2 1 0 1\\n0 1 2\") == \"2\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\") == \"infinity\"\n\"\"\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\n\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\n\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\") == \"2\"\n\nassert solution(\"2 1 0 1\\n0 1 2\") == \"2\"\n\nassert solution(\"5 5 0 4\\n0 1 1\\n1 0 1\\n1 2 1\\n2 0 4\\n2 3 1\\n2 3 3\") == \"infinity\""
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\") == \"2\"\n\nassert solution(\"4 5 0 4\\n0 1 1\\n1 0 1\\n2 0 4\\n2 3 1\\n2 3 3\") == \"infinity\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 0 1\\n2 0 4\\n2 3 1\\n2 3 3\") == \"infinity\""
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3') == '11'\nassert solution('5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1') == 'infinity'\n\"\"\"\n\nimport sys\nimport queue\n"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3') == '11'\nassert solution('5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1') == 'infinity'\nassert solution('2 1 0 1\\n0 1 2') == '2'\nassert solution('3 3 1 2\\n0 1 1\\n1 0 1') == 'infinity'\nassert solution('3 3 1 2\\n0 1 1\\n1 0 1\\n1 2 1') == 'infinity'\n\"\"\""
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3') == '11'\nassert solution('5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1') == 'infinity'\nassert solution('2 1 0 1\\n0 1 2') == '2'\n\"\"\"\n\nfrom sys import stdin\n\ndata = stdin.readlines()\n\nn, m, s, t = map(int, data[0].split())\n\nedges = []\n\nfor line in data[1:]:\n    a, b, w = map(int, line.split())\n    edges.append((a, b, w))"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == '11'\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == 'infinity'\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\") == '2'\nassert solution(\"2 1 0 1\\n0 1 2\") == '2'\nprint(\"All cases passed!\")\n"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\") == \"2\"\nassert solution(\"2 1 0 1\\n0 1 2\") == \"2\"\n\n\"\"\"\nfrom typing import NamedTuple\nfrom collections import namedtuple\n\n\"\"\"\n        0  1  2  3  4  5  6  7\n  0  [1, 1, 1, 1, 1, 1, 1, 1]\n  1  [1, 0, 1, 1, 1, 1, 1, 1]\n  2  [1, 0, 0, 1, 1, 1, 1, 1]\n  3  [1, 0, 0, 0, 1, 1, 1, 1]\n  4  [1, 0, 0, 0, 0, 1, 1, 1]\n  5  [1, 0, 0, 0, 0, 0, 1, 1]\n  6  [1, 0, 0, 0, 0, 0, 0, 1]\n  7  [1, 0, 0, 0, 0, 0, 0, 0]\n\"\"\"\n\nclass Args(NamedTuple):\n    balls: int\n    tubes: int\n    start: int\n    end: int\n\nclass Tube(NamedTuple):\n    start: int\n    end: int\n    time: int\n\nclass Ball(NamedTuple):\n    start: int\n    end: int\n    time: int"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\nassert solution(\"2 1 0 1\\n0 1 2\") == \"2\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\") == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\\n\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\\n\") == \"infinity\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\\n1 2 1\\n\") == \"2\"\n\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple\n\nINF = float('inf')\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 2 3\\n1 1\\n2 2 3') == '18'\n\"\"\""
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 2 1\\n2 3 4\\n1 1\\n2 2 3\") == 6\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\") == 0\nassert solution(\"3 2 2 3\\n1 1\\n2 2 3\") == 18"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\") == 6\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\") == 0\nassert solution(\"3 2 2 3\\n1 1\\n2 2 3\") == 18"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\") == 6\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\") == 0\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\") == 18\n\"\"\"\n\nfrom collections import Counter\nfrom functools import lru_cache"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(Sample Input 1) == 6\nassert solution(Sample Input 2) == 0\nassert solution(Sample Input 3) == 12\nassert solution(Sample Input 4) == 12\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\") == \"6\"\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\") == \"0\"\nassert solution(\"3 1 2 3\\n1 1\\n2 2 3\") == \"18\"\n\"\"\""
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\") == 6\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\") == 0\nassert solution(\"3 2 2 3\\n1 1\\n2 2 3\") == 18\n\n-----Solution-----\n\nx = int(stdin.readline())\ny = list(map(int, stdin.readline().split()))\nz = list(map(int, stdin.readline().split()))\n\nb = []\nfor i in range(len(z)):\n    if z[i]!= 1:\n        b.append(z[i])\n\nc = []\nfor i in range(len(b)):\n    for j in range(len(y)):\n        if b[i] == y[j]:\n            if y[j] in c:\n                continue\n            else:\n                c.append(y[j])\n\np = []\nfor i in range(len(c)):\n    for j in range(len(y)):\n        if c[i] == y[j]:\n            if y[j] in p:\n                continue\n            else:\n                p.append(y[j])\n\nm = []\nfor i in range(len(p)):\n    for j in range(len(y)):\n        if p[i] == y[j]:\n            if y[j] in m:\n                continue\n            else:\n                m.append(y[j])\n\nn = []\nfor i in range(len(m)):\n    for j in range(len(y)):\n        if m[i] == y[j]:\n            if y[j] in n:\n                continue\n            else:\n                n.append(y[j])\n\nprint(len(n)**x)\n\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\\n\") == 6\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\\n\") == 0\nassert solution(\"3 1 2 3\\n2 1 2\\n0\\n\") == 18\nassert solution(\"3 2 2 3\\n1 1\\n2 2 3\\n\") == 12\n\"\"\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\\n\") == \"6\"\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\\n\") == \"0\"\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\\n\") == \"18\"\n\"\"\""
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 2 3') == '6'\nassert solution('2 1 2') == '0'\nassert solution('2 3 4') == '4'\nassert solution('4 2 1 2 1') == '6'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000000 1\\n') == '468559'\nassert solution('1000000 5\\n') == '49401'\nassert solution('1000000 16\\n') == '20'\nassert solution('9000000000000000000 62\\n') == '1'"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('1 2\\n') == '8'\nassert solution('1 3\\n') == '27'\nassert solution('1 4\\n') == '81'\nassert solution('1 5\\n') == '729'\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n\"\"\""
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n\"\"\""
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n\nprint(solution(\"1000000 1\"))\nprint(solution(\"1000000 5\"))\nprint(solution(\"1000000 16\"))\nprint(solution(\"9000000000000000000 62\"))\n\"\"\""
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000000 1\\n\") == '468559'\nassert solution(\"1000000 5\\n\") == '49401'\nassert solution(\"1000000 16\\n\") == '20'\nassert solution(\"9000000000000000000 62\\n\") == '1'\n\nprint('Success')\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n\nSample Input 5:\n100000000 1\nSample Output 5:\n472050\n\nSample Input 6:\n100000000 64\nSample Output 6:\n472050\n\nSample Input 7:\n999999999999999999 62\nSample Output 7:\n1\n\nSample Input 8:\n10000000000 64\nSample Output 8:\n1\n\nSample Input 9:\n9223372036854775807 9223372036854775807\nSample Output 9:\n1\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 9\n5 4 1\n''') == '1'\nassert solution('''4 13\n2 2 2 2\n''') == '3'\nassert solution('''18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n''') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\"\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\"\n\"\"\"\n\nfrom functools import lru_cache\nimport sys\n\nfrom collections import defaultdict\nfrom operator import xor\nfrom typing import Callable, DefaultDict\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 9\\n5 4 1') == '1'\nassert solution('4 13\\n2 2 2 2') == '3'\nassert solution('18 90\\n1 2 3 4 5 6 1 2 3 4 5 6') == '12'\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import product, combinations\nfrom sys import stdin\n\nK, T = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 9\\n5 4 1\") == '1'\nassert solution(\"4 13\\n2 2 2 2\") == '3'\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 9\n5 4 1''') == '1'\n\nassert solution('''4 13\n2 2 2 2''') == '3'\n\nassert solution('''18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6''') == '12'\n\nprint('The code ran successfully')"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('2\\n2') == '1'\nassert solution('3\\n3') == '2'\nassert solution('4\\n4') == '2'\nassert solution('5\\n5') == '4'\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 3 4 5') == '5'\nassert solution('5\\n2 3 4 5 8') == '5'\nassert solution('6\\n2 3 4 5 6 8') == '6'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('2\\n2') == '0'\nassert solution('3\\n3') == '0'\nassert solution('4\\n4') == '0'\nassert solution('5\\n5') == '0'\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"4\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 3 4 5 8') == '5'\nassert solution('1\\n1') == '0'\nassert solution('3\\n4 7 8') == '3'\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 0\n\"\"\"\n\nimport math\n\nclass Solution:\n    def max_revenue(stdin):\n        n = int(stdin.readline())\n        s = list(map(int, stdin.readline().split()))\n\n        if len(s) == 1:\n            return 0\n        if len(s) == 2:\n            return s[0] + s[1]\n        \n        res = 0\n        for i in range(len(s)):\n            res += s[i]\n            s[i] = 1\n            while s[i] % 2 == 0:\n                s[i] /= 2\n                res *= 2\n                if s[i] == 1:\n                    break\n            while s[i] % 3 == 0:\n                s[i] /= 3\n                res *= 3\n                if s[i] == 1:\n                    break\n            while s[i] % 5 == 0:\n                s[i] /= 5\n                res *= 5\n                if s[i] == 1:\n                    break\n        return int(res)"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n1\") == '0'\nassert solution(\"3\\n4 7 8\") == '5'\nassert solution(\"5\\n2 3 4 5 8\") == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 8\") == \"3\"\nassert solution(\"2 3 4 5 8\") == \"5\"\nassert solution
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\\n\") == \"0\"\n\"\"\"\n\n\nfrom math import gcd"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n2 3 4 5 8\n\"\"\") == \"5\"\nassert solution(\"\"\"\n3\n4 7 8\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n14\n2 3 4 5 7 8 11 13 14\n\"\"\") == \"42\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('12') == '2'\nassert solution('1234') == '4'\nassert solution('12345') == '5'\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == 4\nassert solution(\"7\") == 7\nassert solution(\"10\") == 1\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == 3\nassert solution('7') == 3\nassert solution('1234') == 1234\nassert solution('98765') == 7654\nassert solution('999999999') == -1\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"149\") == \"17\"\n\"\"\""
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"149\") == \"17\"\n\n\"\"\""
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('16') == '8'\nassert solution('9') == '1'\nassert solution('99') == '5'\nassert solution('9876') == '2'\nassert solution('16') == '8'\n\"\"\""
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\nassert solution
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1234765') == '11112'\nassert solution('12348765') == '11112'\nassert solution('1234567') == '11112'\nassert solution('12345678') == '11112'\nassert solution('123456789') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9') == '1'\nassert solution('1234') == '1'\nassert solution('123456789') == '123456789'\nassert solution('1234') == '1234'\nassert solution('1234567890') == '123456789'\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('cdab') == 'adcb'\nassert solution('f') == 'IMPOSSIBLE'\nassert solution('c ab') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('c 2') == 'AMBIGUOUS'\n\nassert solution('d 4') == 'ADCB'\n\"\"\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('d 4\\ncab\\ncda\\nccc\\nbadca\\n') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\ncab\\naca\\n') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb\\n') == 'AMBIGUOUS'\n\n-----Solution-----\n\"\"\"\n\nimport sys\nfrom typing import List, Set\nfrom collections import defaultdict"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('d 4\\ncab\\n'\n                 'cda\\n'\n                 'ccc\\n'\n                 'badca\\n') == 'adcb'\nassert solution('c 4\\n'\n                 'abc\\n'\n                 'bca\\n'\n                 'cab\\n'\n                 'aca\\n') == 'IMPOSSIBLE'\nassert solution('f 2\\n'\n                 'dea\\n'\n                 'cfb\\n') == 'AMBIGUOUS'\n\n-----Solution-----\n\"\"\"\n\nfrom typing import List\nfrom string import ascii_lowercase\n\nALPHABET = ascii_lowercase[:26]\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('d 4\\ncab\\ncda\\nccc\\nbadca') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\ncab\\naca') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb') == 'AMBIGUOUS'\n\n\"\"\""
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution.testcase[0]) == solution.testcase[1]\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"d 4\\ncab\\ncda\\nccc\\nbadca\") == 'adcb'\nassert solution(\"c 4\\nabc\\nbca\\nacb\\naca\") == 'IMPOSSIBLE'\nassert solution(\"f 2\\ndea\\ncfb\") == 'AMBIGUOUS'"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"d 4\\ncab\\ncda\\nccc\\nbadca\") == \"adcb\"\nassert solution(\"c 4\\nabc\\nbca\\ncab\\naca\") == \"IMPOSSIBLE\"\nassert solution(\"f 2\\ndea\\ncfb\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"d 4\\ncab\\ncda\\nccc\\nbadca\") == \"adcb\"\nassert solution(\"c 4\\nabc\\nbca\\ncab\\naca\") == \"IMPOSSIBLE\"\nassert solution(\"f 2\\ndea\\ncfb\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('d 4\\ncab\\nccc\\nbadca\\n') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\ncab\\naca\\n') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb\\n') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 3 3') == 9\nassert solution('10 20 0 0') == 10\nassert solution('100 20 543 12') == 164\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\""
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 3 3') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3 3\") == 9\n\"\"\""
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\""
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n\"\"\""
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\n\nassert solution(\"10 20 0 0\") == \"10\"\n\nassert solution(\"100 20 543 12\") == \"164\"\n\nprint('All tests passed.')\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3 3\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\\n') == 'yes'\nassert solution('4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n') == 'no'\nassert solution('3 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n') == 'yes'"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"yes\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"4 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0\"\"\"\n) == \"yes\"\nassert solution(\n    \"\"\"4 3 3\n2 1\n0 0\n-1 -2\n1 1 -2\n3 6 12\"\"\"\n) == \"no\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n\") == \"no\"\n\n\"\"\""
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"yes\""
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\\n\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n\") == \"no\"\n\n\"\"\"\n\nn, m, r = map(int, stdin.readline().strip().split(\" \"))\n\ncandles = set()\ncuts = set()\n\nfor _ in range(n):\n    candles.add(tuple(map(int, stdin.readline().strip().split(\" \"))))\n\nfor _ in range(m):\n    cuts.add(tuple(map(int, stdin.readline().strip().split(\" \"))))"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\\n\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n\") == \"no\""
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"yes\"\nassert solution(\"4 3 3\\n0 1\\n1 2\\n-1 2\\n0 -1 0\\n-1 1 -2\\n1 1 -2\\n3 6 12\") == \"no\"\nassert solution(\"4 3 3\\n0 1\\n1 2\\n-1 2\\n0 -1 0\\n-1 1 -2\\n1 1 -2\\n3 6 12\") == \"yes\"\nassert solution(\"4 2 3\\n0 1\\n0 0\") == \"no\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0') == 'yes'\nassert solution('4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12') == 'no'\n\"\"\""
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('652526') == 4\nassert solution('12121131221') == 7\nassert solution('123456789') == 1\nassert solution('12121212121') == 4\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom itertools import groupby\nfrom operator import itemgetter\nfrom typing import Iterator, List, Tuple\n"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(652526) == 4\nassert solution(12121131221) == 7\n\"\"\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12121131221') == 7\nassert solution('652526') == 4\nassert solution('123456789') == 1\n\"\"\""
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(652526) == 4\nassert solution(12121131221) == 7\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12121131221\") == \"7\"\nassert solution(\"652526\") == \"4\"\n\nprint(solution(\"123456789\"))\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('652526') == 4\nassert solution('12121131221') == 7\nassert solution('123456789') == 1\n"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\nprint('Success')\n\n\"\"\"\n\nimport collections\nimport itertools"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('652526') == 4\nassert solution('12121131221') == 7\nassert solution('123456789') == 1\n\"\"\""
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1\\n1 2\\n2 3\\n1 3\\n') == '0'\nassert solution('4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n') == '24'\nassert solution('6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n') == '800'\n\n\"\"\"\n\nimport sys\nfrom typing import Callable, List\nfrom collections import deque, defaultdict\n\nsys.setrecursionlimit(10 ** 6)\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_DATA = [int(x) for x in INPUT_LINES[0].split()]\n"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\") == 0\n\"\"\""
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\\n\") == \"0\"\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n\") == \"24\"\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n\") == \"800\"\nprint('Test passed')"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\\n\") == 0\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n\") == 24\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n\") == 800\n\n\"\"\""
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1\\n1 2\\n2 3\\n1 3\\n') == 0\nassert solution('4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n') == 24\nassert solution('6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n') == 800\n\n\"\"\""
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\") == 0\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\") == 24\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\") == 800\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 3\n1\n1 2\n2 3\n1 3\n\"\"\") == '0'\nassert solution(\"\"\"4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n\"\"\") == '24'\nassert solution(\"\"\"6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n\"\"\") == '800'\n\nprint('PASSED')\n\n-----\n'''\n\n'''\n-----\n>>> timeit.timeit('solution(\"\"\"3 3\n... 1\n... 1 2\n... 2 3\n... 1 3\n... \"\"\")', number=1000, globals=globals())\n0.012311493043936905\n\n>>> timeit.timeit('solution(\"\"\"4 4\n... 24 10\n... 1 3\n... 1 4\n... 3 6\n... 4 5\n... 3 5\n... 4 6\n... 2 5\n... 2 6\n... \"\"\")', number=1000, globals=globals())\n0.009227540689849043\n\n>>> timeit.timeit('solution(\"\"\"6 8\n... 100 500 300 75\n... 1 3\n... 1 4\n... 3 6\n... 4 5\n... 3 5\n... 4 6\n... 2 5\n... 2 6\n... \"\"\")', number=1000, globals=globals())\n0.007676516128116843\n\n-----\n'''\n\n'''\n---\nIt's the last summer and the summer holidays are here. The air is filled with bottles of happy milk and there are a lot of kids coming to the party. But the party is going to last a long time and many bottles of milk will be necessary.\n\nAt the party, each kid gives at most one bottle of happy milk to each of the other kids sitting at his/her place. The kids are sitting in a circle in the middle of the party. In order to determine which bottle of happy milk is most important, each kid must compare two other kids. In the beginning, each kid is sitting at his/her place and knows the order of the other kids. The comparison is based on the number of happy milk bottles. If the number of happy milk bottles of the first kid is greater than the number of happy milk bottles of the second kid, the kid sitting at the first place takes the first bottle and the kid sitting at the second place takes the second bottle. If the number of happy milk bottles of the first kid is less than the number of happy milk bottles of the second kid, then the kid sitting at the first place takes the second bottle and the kid sitting at the second place takes the first bottle. This procedure will continue until each kid has at most one bottle of happy milk. In the end, the kid at the beginning of the party will have the most number of happy milk bottles.\n\nInput\nThe input consists of two lines. The first line contains the number of kids, n (1 \\le n \\le 20). The second line contains the number of bottles of happy milk, m (1 \\le m \\le n \\times 10^5). Each of the next m lines contains two integers x and y (1 \\le x, y \\le n), which are the indices of the two kids who are compared in this step. The indices will be different in each of the m lines.\n\nOutput\nOutput the number of bottles of happy milk that the kid who is sitting at the beginning of the party will have.\n\nConstraints\n1 \\le n \\le 20\n1 \\le m \\le 10^5\n1 \\le x, y \\le n\n\nExamples\ninputCopy\n5\n10\n3 1\n4 2\n5 3\n\noutputCopy\n5\n\ninputCopy\n5\n15\n3 1\n4 2\n5 3\n1 4\n2 5\n3 5\n4 6\n\noutputCopy\n8\n\ninputCopy\n8\n15\n0 1\n2 3\n4 5\n6 7\n8 9\n10 11\n12 13\n14 15\n\noutputCopy\n16\n\ninputCopy\n8\n15\n0 1\n2 3\n4 5\n6 7\n8 9\n10 11\n12 13\n14 15\n\noutputCopy\n15\n\ninputCopy\n8\n15\n0 1\n2 3\n4 5\n6 7\n8 9\n10 11\n12 13\n14 15\n\noutputCopy\n8\n\ninputCopy\n8\n15\n0 1\n2 3\n4 5\n6 7\n8 9\n10 11\n12 13\n14 15\n\noutputCopy\n15\n\ninputCopy\n8\n15\n0 1\n2 3\n4 5\n6 7\n8 9\n10 11\n12 13\n14 15\n\noutputCopy\n15\n\n-----\na = '''\n5\n10\n3 1\n4 2\n5 3\n1 4\n2 5\n3 5\n4 6\n'''\nb = '''\n5\n15\n3 1\n4 2\n5 3\n1 4\n2 5\n3 5\n4 6\n'''\nc = '''\n8\n15\n0 1\n2 3\n4 5\n6 7\n8 9\n10 11\n12 13\n14 15\n'''\nd = '''\n8\n15\n0 1\n2 3\n4 5\n6 7\n8 9\n10 11\n12 13\n14 15\n'''\ne = '''\n8\n15\n0 1\n2 3\n4 5\n6 7\n8 9\n10 11\n12 13\n14 15\n'''\nf = '''\n8\n15\n0 1\n2 3\n4 5\n6 7\n8 9\n10 11\n12 13\n14 15\n'''\n\nimport timeit"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3\n1\n1 2\n2 3\n1 3\n''') == \"0\"\nassert solution('''4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n''') == \"24\"\nassert solution('''6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == \"800\"\n\nprint('Success')"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"800\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1\\n1 2\\n2 3\\n1 3\\n') == '0'\nassert solution('4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n') == '24'\nassert solution('6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n') == '800'\nprint('Passed!')\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 2 4') == '1 4'\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5'\nassert solution('5\\n2 1 4 3') == '-1'\nassert solution('4\\n2 1 4 3') == '-1'\n\"\"\""
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 2 4\") == \"1 4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\") == \"1 2 3 4\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3 2 4') == '1 4'\n\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5'\n\nassert solution('4\\n2 1 4 3') == '-1'\n\n\"\"\""
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 2 4\") == \"1 4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\") == \"1 2 3 4\"\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 2 4\\n\") == \"1 4\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\\n\") == \"1 2 3 4\"\n\"\"\"\n\nn = int(stdin.readline())\nnums = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 2 4\") == '1 4'\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\nlis = [arr[0]]\nl_index = [0]\n\nfor i in range(1, n):\n    if arr[i] > lis[-1]:\n        lis.append(arr[i])\n        l_index.append(i)\n    else:\n        pos = binary_search(lis, arr[i], 0, len(lis)-1)\n        lis[pos] = arr[i]\n        l_index[pos] = i\n\ncriticals = []\nfor i in range(1, len(lis)):\n    if l_index[i] == i:\n        criticals.append(arr[i])"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 2 4') == '1 4'\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5'\nassert solution('4\\n2 1 4 3') == '-1'\nassert solution('4\\n1 3 2 4') == '1 4'\nassert solution('4\\n2 1 4 3') == '-1'\n"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 2 4\\n') == '1 4'\nassert solution('5\\n1 2 3 4 5\\n') == '1 2 3 4 5'\nassert solution('4\\n2 1 4 3\\n') == '-1'\nassert solution('4\\n1 3 2 5\\n') == '-1'\nassert solution('4\\n2 1 3 4\\n') == '1 2 3 4'\n"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 3 2 4\\n') == '1 4'\nassert solution('5\\n1 2 3 4 5\\n') == '1 2 3 4 5'\nassert solution('4\\n2 1 4 3\\n') == '-1'\nassert solution('4\\n1 3 2 4\\n') == '1 4'"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\".#####\") == 5\nassert solution(\"#####.\") == 1\nassert solution(\"..#####.#####\") == 8\n\n------Solution-----\n\"\"\"\n\n################################################################\n\"\"\"\nWe have two strategies for solving this problem.\n\n1. Try and solve the problem using brute force.\n2. Use dynamic programming to solve the problem.\n\"\"\"\n################################################################\n\n################################################################\n\"\"\"\nAttempt 1:\n    A brute force solution consists of looping over all possible marks in the paper to try and find a mark that is exactly repeated twice.\n    My first approach was to use this logic:\n        For each possible mark, check if it is a valid mark.\n        If the mark is valid, then check if the mark is exactly repeated twice.\n        If the mark is exactly repeated twice, then it is the answer.\n        Else, we check if it is exactly repeated 3 times, and if so, add one to the answer.\n        Else, we check if it is exactly repeated 4 times, and if so, add one to the answer.\n        Else, we continue onto the next mark.\n        Once the marks are checked, we check if the total number of marks is exactly a multiple of 2.\n        If it is, then there is exactly one answer.\n        Else, there are two answers.\n\"\"\"\n################################################################\n\n################################################################\n\"\"\"\nAttempt 2:\n    A dynamic programming solution consists of initializing an array of size the length of the mark times the width of the mark.\n    In the array, the index represents the position of the mark on the paper and the value represents the number of times that the mark has occurred.\n    To check if the mark is valid, we check if the value at that index is equal to 0.\n    Once we have initialized the array, we loop over all the marks.\n        If the mark is valid, then we check if the value at that index is equal to 0.\n            If it is, then the mark is exactly repeated twice.\n            Else, we check if the value at that index is equal to 1.\n                If it is, then the mark is exactly repeated three times.\n                Else, we check if the value at that index is equal to 2.\n                    If it is, then the mark is exactly repeated four times.\n                    Else, we continue onto the next mark.\n        Otherwise, we check if the value at that index is equal to 1.\n            If it is, then the mark is exactly repeated twice.\n            Else, we check if the value at that index is equal to 2.\n                If it is, then the mark is exactly repeated three times.\n                Else, we continue onto the next mark.\n        Once the marks are checked, we check if the total number of marks is exactly a multiple of 2.\n            If it is, then there is exactly one answer.\n            Else, there are two answers.\n\"\"\"\n################################################################\n\n################################################################\n\"\"\"\nAttempt 3:\n    A dynamic programming solution consists of initializing an array of size the length of the mark times the width of the mark.\n    In the array, the index represents the position of the mark on the paper and the value represents the number of times that the mark has occurred.\n    To check if the mark is valid, we check if the value at that index is equal to 0.\n    Once we have initialized the array, we loop over all the marks.\n        If the mark is valid, then we check if the value at that index is equal to 0.\n            If it is, then the mark is exactly repeated twice.\n            Else, we check if the value at that index is equal to 1.\n                If it is, then the mark is exactly repeated three times.\n                Else, we check if the value at that index is equal to 2.\n                    If it is, then the mark is exactly repeated four times.\n                    Else, we continue onto the next mark.\n        Otherwise, we check if the value at that index is equal to 1.\n            If it is, then the mark is exactly repeated twice.\n            Else, we check if the value at that index is equal to 2.\n                If it is, then the mark is exactly repeated three times.\n                Else, we continue onto the next mark.\n        Once the marks are checked, we check if the total number of marks is exactly a multiple of 2.\n            If it is, then there is exactly one answer.\n            Else, there are two answers.\n\"\"\"\n################################################################\n\n################################################################\n\"\"\"\nAttempt 4:\n    A dynamic programming solution consists of initializing an array of size the length of the mark times the width of the mark.\n    In the array, the index represents the position of the mark on the paper and the value represents the number of times that the mark has occurred.\n    To check if the mark is valid, we check if the value at that index is equal to 0.\n    Once we have initialized the array, we loop over all the marks.\n        If the mark is valid, then we check if the value at that index is equal to 0.\n            If it is, then the mark is exactly repeated twice.\n            Else, we check if the value at that index is equal to 1.\n                If it is, then the mark is exactly repeated three times.\n                Else, we check if the value at that index is equal to 2.\n                    If it is, then the mark is exactly repeated four times.\n                    Else, we continue onto the next mark.\n        Otherwise, we check if the value at that index is equal to 1.\n            If it is, then the mark is exactly repeated twice.\n            Else, we check if the value at that index is equal to 2.\n                If it is, then the mark is exactly repeated three times.\n                Else, we continue onto the next mark.\n        Once the marks are checked, we check if the total number of marks is exactly a multiple of 2.\n            If it is, then there is exactly one answer.\n            Else, there are two answers.\n\"\"\"\n################################################################\n\n################################################################\n\"\"\"\nAttempt 5:\n    A dynamic programming solution consists of initializing an array of size the length of the mark times the width of the mark.\n    In the array, the index represents the position of the mark on"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..') == '8', 'Test 1'\nassert solution('3 3\\n...\\n.#.\\n...') == '1', 'Test 2'\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".####.\\n#####.\\n....#\") == 2\nassert solution(\".####.\\n#####.\\n....#\") == 2\nassert solution(\".####.\\n#####.\\n....#\") == 2\nassert solution(\".####.\\n#####.\\n....#\") == 2\nassert solution(\".####.\\n#####.\\n....#\") == 2\n\n-----Notes-----\nThis problem is similar to the answer to problem btw.\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\".#.#\") == 1\nassert solution(\"##.##\") == 3\nassert solution(\"#####\") == 1\nassert solution(\"##....\") == 0\nassert solution(\".....#\") == 1\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 8\n..#..#..\n.######.\n.######.\n..#..#..''') == '8'\nassert solution('''3 3\n...\n.#.\n...''') == '1'\nassert solution('''2 6\n.#####\n#####.\nSample Output 2:\n5''') == '5'\n\nassert solution('2 6\\n.#####\\n#####.') == '5'\n\nassert solution('3 3\\n.###\\n###.') == '1'"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 8\n..#..#..\n.######.\n.######.\n..#..#..\n\"\"\") == '8'\nassert solution(\"\"\"\n3 3\n...\n.#.\n...\n\"\"\") == '1'\n\n\"\"\"\nfor example:\n\n1,1: (1,1) -> (0,0)\n2,1: (0,1) -> (1,0)\n3,1: (0,2) -> (1,1)\n4,1: (0,3) -> (1,2)\n5,1: (0,4) -> (1,3)\n6,1: (0,5) -> (1,4)\n7,1: (0,6) -> (1,5)\n8,1: (0,7) -> (1,6)\n1,2: (2,0) -> (1,0)\n2,2: (1,1) -> (0,0)\n3,2: (1,2) -> (0,1)\n4,2: (1,3) -> (0,2)\n5,2: (1,4) -> (0,3)\n6,2: (1,5) -> (0,4)\n7,2: (1,6) -> (0,5)\n8,2: (1,7) -> (0,6)\n1,3: (3,0) -> (1,0)\n2,3: (2,1) -> (1,1)\n3,3: (1,2) -> (0,0)\n4,3: (1,3) -> (0,1)\n5,3: (1,4) -> (0,2)\n6,3: (1,5) -> (0,3)\n7,3: (1,6) -> (0,4)\n8,3: (1,7) -> (0,5)\n1,4: (4,0) -> (1,0)\n2,4: (3,1) -> (1,1)\n3,4: (2,2) -> (0,0)\n4,4: (1,3) -> (0,1)\n5,4: (1,4) -> (0,2)\n6,4: (1,5) -> (0,3)\n7,4: (1,6) -> (0,4)\n8,4: (1,7) -> (0,5)\n1,5: (5,0) -> (1,0)\n2,5: (4,1) -> (1,1)\n3,5: (4,2) -> (1,2)\n4,5: (3,3) -> (0,0)\n5,5: (1,4) -> (0,1)\n6,5: (1,5) -> (0,2)\n7,5: (1,6) -> (0,3)\n8,5: (1,7) -> (0,4)\n1,6: (6,0) -> (1,0)\n2,6: (5,1) -> (1,1)\n3,6: (5,2) -> (1,2)\n4,6: (5,3) -> (1,3)\n5,6: (4,4) -> (0,0)\n6,6: (1,5) -> (0,1)\n7,6: (1,6) -> (0,2)\n8,6: (1,7) -> (0,3)\n1,7: (7,0) -> (1,0)\n2,7: (6,1) -> (1,1)\n3,7: (6,2) -> (1,2)\n4,7: (6,3) -> (1,3)\n5,7: (6,4) -> (1,4)\n6,7: (5,5) -> (0,0)\n7,7: (1,6) -> (0,1)\n8,7: (1,7) -> (0,2)\n\"\"\"\n\n\"\"\"\n[[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1]]\n[[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [8, 2]]\n[[1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [8, 3]]\n[[1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [8, 4]]\n[[1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [8, 5]]\n[[1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [8, 6]]\n[[1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7], [8, 7]]\n[[1, 8], [2, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8]]\n[[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1]]\n[[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6,"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..\") == \"8\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".#####..#..#..####..####.#####..######..#####..####.#..#####..#..#.#.#.#####.#####.#####..#.#..##..#..#.#\") == 5\n\"\"\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..\") == \"8\"\nassert solution(\"3 3\\n...\\n.#.\\n...\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..') == 8\n\n\"\"\"\nimport unittest"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\\n19 12 2 18 5 5\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\") == \"4\\n2 6 1 9 7 5 5 7 1 2 3 3\""
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1') == '6\\n19 12 2 18 5 5'\nassert solution('''3 3 3\n3 1 1\n1 3 2\n3 2 3''') == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('''3 3 3\n3 1 1\n1 3 2\n3 2 3''') == '-1'\nassert solution('''4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1''') == '19 12 2 18 5 5'\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1') == '6\\n19 12 2 18 5 5'\nassert solution('3 3 3\\n3 1 1\\n1 3 2\\n3 2 3') == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('3 2 2\\n1 2\\n2 1\\n1 2\\n') == '-1'\nprint('All tests passed.')\n\n\"\"\""
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1''') == '6\\n19 12 2 18 5 5'\nassert solution('''3 3 3\n3 1 1\n1 3 2\n3 2 3''') == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('''3 2 2\n1 2\n2 1\n1 2\n''') == '-1'\nassert solution('''3 3 3\n1 1 1\n2 1\n3 1\n1 1 1''') == '7\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('''1 3 3\n3 1 1\n1 3 2\n3 2 3''') == '-1'\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\\n\") == \"13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\nassert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\\n\") == \"6\\n19 12 2 18 5 5\"\n\nSolution:\nfrom itertools import product\nimport sys\n\nn, m, p = map(int, sys.stdin.readline().split())\nboard = [[*map(int, sys.stdin.readline().split())] for _ in range(n)]\nprimes = list(range(p, 1, -1))\ncount = 0\nans = -1\n\nfor seq in product(primes, repeat=n * m):\n    count += 1\n    if count > p * m * n:\n        break\n    seq = list(seq)\n    count2 = 0\n    for i in range(n):\n        if count2 >= m * n:\n            break\n        for j in range(m):\n            if seq[count2] == board[i][j]:\n                count2 += 1\n                if count2 >= m * n:\n                    break\n    if count2 < m * n:\n        break\n    if count2 == m * n:\n        ans = seq\n\nsys.stdout.write(str(count) + \"\\n\")\nfor i in range(n):\n    sys.stdout.write(\" \".join(map(str, ans[i * m: (i + 1) * m])) + \"\\n\")\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\\n\") == \"13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\\n19 12 2 18 5 5\"\nassert solution(\n    \"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\nassert solution(\n    \"3 2 2\\n1 2\\n2 1\\n1 2\") == \"-1\"\n\nprint('Success')"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1') == '6\\n19 12 2 18 5 5'\nassert solution('3 3 3\\n3 1 1\\n1 3 2\\n3 2 3') == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('3 2 2\\n1 2\\n2 1\\n1 2') == '-1'\n\"\"\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\\n19 12 2 18 5 5\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\n\"\"\"\n\n\nfrom math import sqrt\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\\n\") == \"6\\n19 12 2 18 5 5\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\\n\") == \"13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\\n\") == \"-1\"\nassert solution(\"4 4 2\\n2 2 1 1\\n1 1 2\\n2 1 1\\n2 2 1\\n\") == \"-1\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n5\n3\n3\n3\n3\n3\n1\n2\n3\n4\n''') == '5 1'\nassert solution('''\n4\n1\n5\n3\n6\n1\n2\n3\n''') == '1 5'\nassert solution('''\n5\n4\n3\n2\n1\n0\n1\n2\n3\n4\n''') == '3 2'\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\") == \"5 1\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\") == \"1 5\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\") == \"3 2\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n') == '5 1'\nassert solution('4\\n1\\n5\\n3\\n6\\n1\\n2\\n3\\n') == '1 5'\nassert solution('4\\n1\\n5\\n3\\n6\\n1\\n2\\n3\\n') == '3 2'\nassert solution('5\\n1\\n2\\n3\\n4\\n') == '5 1'\nassert solution('5\\n1\\n2\\n3\\n4\\n') == '5 1'\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4') == '5 1'\nassert solution('5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4') == '1 5'\nassert solution('5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4') == '3 2'\nassert solution('4\\n1\\n5\\n3\\n6\\n1\\n2\\n3\\n4') == '2 2'\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n3\n3\n3\n3\n3\n1\n2\n3\n4''') == '5 1'\nassert solution('''5\n4\n3\n2\n1\n0\n1\n2\n3\n4''') == '1 5'\nassert solution('''5\n3\n4\n2\n1\n0\n1\n2\n3\n4''') == '3 2'\nassert solution('''5\n3\n3\n3\n3\n3\n1\n2\n3\n4''') == '3 2'\nassert solution('''5\n4\n3\n2\n1\n0\n1\n2\n3\n4''') == '1 5'\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\") == '5 1'\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\") == '1 5'\nassert solution(\"4\\n1\\n5\\n3\\n6\\n1\\n2\\n3\") == '3 2'\nassert solution(\"1\\n5\\n3\\n6\\n1\\n2\\n3\") == '1 5'\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n') == '5 1'\n\"\"\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\") == \"5 1\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\") == \"1 5\"\nassert solution(\"4\\n1\\n5\\n3\\n6\\n1\\n2\\n3\") == \"3 2\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n\") == \"5 1\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\\n\") == \"1 5\"\nassert solution(\"4\\n1\\n5\\n3\\n6\\n1\\n2\\n3\\n\") == \"3 2\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n\") == \"5 1\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\\n\") == \"1 5\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\\n\") == \"3 2\"\n\"\"\"\nimport sys\n\nclass Tree:\n    def __init__(self, N: int):\n        self.p = [0 for i in range(N)]\n        self.size = [0 for i in range(N)]\n\n    def add(self, u: int, v: int):\n        self.p[u] = v\n        self.size[v] += self.size[u]"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == \"1\"\nassert solution(\"5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4\") == \"5\"\nassert solution(\"6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == \"1\"\nassert solution(\"5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4\") == \"5\"\nassert solution(\"6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == \"5\"\n\"\"\""
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == 1\n\"\"\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 1\\n3 2\\n3 3\\n3 4\") == '1'\nassert solution(\"5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4\") == '5'\nassert solution(\"6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == '6'\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4') == '1'\n\"\"\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == \"1\"\nassert solution(\"6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == \"5\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4') == '1'\nassert solution('6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1') == '5'\n\"\"\""
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4') == 1\n\"\"\"\n\nfrom heapq import heappop, heappush"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == \"1\"\nassert solution(\"6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\\n\") == \"4\\n3\\n4\\n5\\n6\\n\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\\n\") == \"5\\n1\\n2\\n3\\n6\\n7\\n\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n3\\n') == '1'\nassert solution('1\\n2\\n1\\n3\\n') == '1'\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '''\n4\n3\n4\n5\n6\n7\n'''\n\nassert solution('''\n9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n''') == '''\n5\n1\n2\n3\n6\n7\n'''\n\nassert solution('''\n9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n''') == '''\n0\n'''\n\nassert solution('''\n9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n''') == '''\n5\n1\n2\n3\n6\n7\n'''\n\nassert solution('''\n9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n''') == '''\n0\n'''"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\\n\") == \"4\\n3\\n4\\n5\\n6\\n\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\\n\") == \"5\\n1\\n2\\n3\\n6\\n7\\n\"\nassert solution(\"4\\n1 2 2\\n1 3 1\\n2 4 3\\n3 5 2\\n\") == \"0\\n\""
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\\n7 8 1\") == \"4\\n3\\n4\\n5\\n6\\n7\\n\"\nassert solution(\"8\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1\") == \"0\\n1\\n2\\n3\\n6\\n7\\n\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == \"5\\n1\\n2\\n3\\n6\\n7\\n\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"4\\n3\\n4\\n5\\n6\\n7\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == \"5\\n1\\n2\\n3\\n6\\n7\"\n\nprint(\"Successfully solved!\")\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\\n\") == \"4\\n3\\n4\\n5\\n6\\n\"\n\n\"\"\"\n\nimport unittest\nimport sys\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_sample_0(self):\n        self.assertEqual(solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\\n\"), \"4\\n3\\n4\\n5\\n6\\n\")\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"4\\n3\\n4\\n5\\n6\\n7\\n8\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == \"5\\n1\\n2\\n3\\n6\\n7\\n8\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == \"0\\n1\\n2\\n3\\n6\\n7\\n8\"\nassert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"4\\n3\\n4\\n5\\n6\\n7\\n8\"\n\n##############################################################\n\nfrom collections import deque\nfrom typing import List\nfrom sys import stdin\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2''') == '''4\n3\n4\n5\n6\n7\n'''\nprint(solution('''8\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1'''))\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"4\\n3\\n4\\n5\\n6\\n\"\nassert solution(\"8\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1\") == \"0\\n1\\n2\\n3\\n6\\n7\\n\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == \"5\\n1\\n2\\n3\\n6\\n7\\n\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"2 1\\nV1 V2 V1 V1 V2\") == \"6\"\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"1 2\\nR10 V1 V2 V1 E\") == \"30\"\n\"\"\"\n\n\"\"\"\nSolution:\n    recurse(i: int, b: int, s: int, p: str) -> int\n    recursively compute the minimum time for executing the given program.\n    Time complexity: O(b*s*n), where n is the length of the program.\n    Space complexity: O(n), where n is the length of the program.\n    Input:\n    stdin: a string, the first line contains two integers, b and s.\n    The second line contains a non-empty program p.\n    Output:\n    The minimum number of instructions that must be executed to complete the program.\n\"\"\""
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n1 2\nR10 V1 V2 V1 E\n''') == '30'\nassert solution('''\n1 2\nR2 V1 V1 E\nR3 V1 V1 E\n''') == '5'\nassert solution('''\n1 2\nR1 V1 V1 E\nR2 V1 V1 E\n''') == '6'\nassert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2\\nV1 V2 V1 V1 V2') == '5'\n\"\"\""
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"1 2\\nR10 V1 V2 V1 E\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == '5'\nassert solution(\"1 2\\nR10 V1 V2 V1 E\") == '30'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\n\"\"\""
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2 1\nV1 V2 V1 V1 V2\n''') == '6'\n\nassert solution('''\n2 1\nV1 V2 V1 V1 V2\n''') == '5'\n\nassert solution('''\n1 2\nR10 V1 V2 V1 E\n''') == '30'\n\nassert solution('''\n1 2\nR10 V1 V2 V1 V1 V2\n''') == '16'\n\nassert solution('''\n2 1\nR10 R10 R10 V1 E\n''') == '18'"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == '5'\nassert solution(\"1 2\\nR10 V1 V2 V1 E\") == '30'\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"2 1\nV1 V2 V1 V1 V2\n\"\"\") == \"6\"\nassert solution(\"\"\"1 2\nV1 V2 V1 V1 V2\n\"\"\") == \"5\"\nassert solution(\"\"\"1 2\nR10 V1 V2 V1 E\n\"\"\") == \"30\""
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 42\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n\"\"\""
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\""
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''10 24''') == '38'\nassert solution('''10 11''') == 'impossible'\nassert solution('''9 216''') == '546'\n'''\n\n'''"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n\"\"\"\n\nfrom typing import List, Tuple\nimport math\nimport copy\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n\"\"\""
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n\n\"\"\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'impossible'\nassert solution('6 10') == '6'\n'''"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\") == \"10.00005\"\n\"\"\"\n\nd, t, c, r = [int(i) for i in input().split()]\nr = [int(i) for i in input().split()]\nr = [[int(i) for i in input().split()] for j in range(r)]\n\nc = int(c)\nt = int(t)\nd = int(d)"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10') == '466.662'\n"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\") == '466.662'\n"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\\n\") == \"10.00005\"\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open(\"test_01.txt\").read()) == \"10.00000\"\nassert solution(open(\"test_02.txt\").read()) == \"2.000000\"\nassert solution(open(\"test_03.txt\").read()) == \"2.66667\"\nassert solution(open(\"test_04.txt\").read()) == \"5.00000\"\n\"\"\"\n\n\nfrom collections import namedtuple\nfrom decimal import Decimal\nimport math\nimport re\n\n\nCoord = namedtuple(\"Coord\", (\"x\", \"y\"))\n\nCoord.__add__ = lambda self, other: Coord(x=self.x+other.x, y=self.y+other.y)\nCoord.__sub__ = lambda self, other: Coord(x=self.x-other.x, y=self.y-other.y)\nCoord.__mul__ = lambda self, other: Coord(x=self.x*other, y=self.y*other)\nCoord.__rmul__ = lambda self, other: self.__mul__(other)\nCoord.__truediv__ = lambda self, other: Coord(x=self.x/other, y=self.y/other)\nCoord.__floordiv__ = lambda self, other: Coord(x=self.x//other, y=self.y//other)\nCoord.__mod__ = lambda self, other: Coord(x=self.x%other, y=self.y%other)\n\nCoord.__abs__ = lambda self: Coord(x=abs(self.x), y=abs(self.y))\nCoord.__neg__ = lambda self: Coord(x=-self.x, y=-self.y)\n\n\nclass Cloud:\n    def __init__(self, rain, start, end):\n        self.rain = Decimal(rain)\n        self.start = Decimal(start)\n        self.end = Decimal(end)\n"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10') == '466.662'\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(\"test_input.txt\").read()) == \"16.6722\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\") == \"466.662\"\n\nprint(solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\"))\n\"\"\""
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\") == \"10.00005\"\n\"\"\"\n\nimport math\nimport sys\n\ninput = sys.stdin.readlines()\n\nd, t, c, r = [int(i) for i in input.pop(0).split()]\n\nclouds = {}\n\nfor i in range(c):\n    s, e, p, a = [int(i) for i in input.pop(0).split()]\n    clouds[(s, e)] = {\n        \"prob\": p,\n        \"amt\": a,\n    }"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n15\\n0.33333\\n30\\n22\\n0.66666\\n70\\n0\\n10\\n') == '466.662'\nassert solution('3\\n4\\n2\\n1\\n1\\n8\\n') == '10.00005'\n\"\"\"\nimport math"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\nblue pink 1.0\nred pink 1.5\nblue red 1.0''') == '1.500000000000000'\nassert solution('''4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9''') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0') == '1.500000000000000'\nassert solution('2\\nblue red 1.0\\nred pink 1.5') == '0.000000000000000'\nassert solution('4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9') == '10.000000000000000'\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nn = int(sys.stdin.readline())\n\nlemonade = {}\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    off = line[0]\n    got = line[1]\n    rate = float(line[2])\n    lemonade[off] = rate\n    lemonade[got] = 1 / rate\n\nqueue = deque()\nqueue.append((1, 0, 0))\n\nMAX = 10 ** 6\n\nwhile queue:\n    off, got, q = queue.popleft()\n    if off == 'blue':\n        if got =='red':\n            if q >= MAX:\n                print(MAX)\n                break\n            else:\n                queue.append((off, got, q + 1))\n        else:\n            if q < MAX:\n                queue.append((off, got, q + 1))\n    else:\n        if got == 'blue':\n            if q >= MAX:\n                print(MAX)\n                break\n            else:\n                queue.append((off, got, q + 1))\n        else:\n            if q < MAX:\n                queue.append((off, got, q + 1))\n\nprint(queue)\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0\") == \"1.500000000000000\"\nassert solution(\"2\\nblue red 1.0\\nred pink 1.5\") == \"0.000000000000000\"\nassert solution(\"4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9\") == \"10.000000000000000\"\nprint('Passed all tests...')\n\n\"\"\"\n\n\"\"\"\nIn this problem, we want to make a decision, for example, to buy blue or not, \nbased on some rules.\n\"\"\"\n\nn = int(input())\n\nfor i in range(n):\n    a = input().split()\n    if a[0] == \"blue\":\n        if a[2] > 1.5:\n            print(0)\n        elif a[2] < 1.5:\n            print(a[1])\n    else:\n        print(a[2])"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\nblue pink 1.0\nred pink 1.5\nblue red 1.0''') == \"1.500000000000000\"\nassert solution('''2\nblue red 1.0\nred pink 1.5''') == \"0.000000000000000\"\nassert solution('''4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9''') == \"10.000000000000000\"\n\"\"\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\nred pink 1.5\\nblue red 1.0\") == \"0.000000000000000\"\nassert solution(\"4\\nblue red 1.0\\nred pink 1.5\\ngreen yellow 1.9\\nyellow orange 1.9\") == \"10.000000000000000\""
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\nblue red 1.0\nred pink 1.5\n''') == '0.000000000000000'\nassert solution('''3\nblue pink 1.0\nred pink 1.5\nblue red 1.0''') == '1.500000000000000'\nassert solution('''3\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9''') == '10.000000000000000'\n\n'''\nI was searching for something from a friend of mine named me-samantha. I was able to find her help by looking for this question on her LinkedIn profile.\n\nYou are given a string, and your task is to swap cases. In other words, convert all lowercase letters to uppercase letters and vice versa.\n\nFor Example:\n\nWww.HackerRank.com \u2192 wWW.hACKERrANK.COM\nPythonist 2 \u2192 pYTHONIST 2\n\nInput Format\n\nA single line containing a string.\n\nConstraints\n\n\nOutput Format\n\nPrint the modified string.\n\nSample Input 0\n\nHackerRank.com presents \"Pythonist 2\".\nSample Output 0\n\nhACKERrANK.COM PRESENTS \"pYTHONIST 2\".\n\n'''\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"4\") == \"\"\nassert solution(\"5\") == \"\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\nblue pink 1.0\nred pink 1.5\nblue red 1.0''') == '1.500000000000000'\nassert solution('''2\nblue red 1.0\nred pink 1.5''') == '0.000000000000000'\nassert solution('''4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9''') == '10.000000000000000'\n\n'''\n\u0415\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u0431\u043e\u0448\u043a\u0438 \u0441 \u0440\u0430\u0437\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0434\u0435\u0442\u0435\u0439 (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0440\u0435\u0434\u043a\u043e). \u041f\u0435\u0440\u0432\u044b\u043c \u0434\u0435\u0442\u0435\u043c \u0432 \u0434\u043e\u043c\u0435 \u0431\u043e\u0448\u043a\u0430 \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d \u043d\u043e\u043c\u0435\u0440 0.\n\u041a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c \u043d\u0430 \u043d\u0435\u0431\u0435 \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u043d\u043e\u0432\u044b\u0435 \u0434\u0435\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0442\u0430\u0440\u0448\u0435 \u0442\u0435\u0445, \u0447\u0442\u043e \u0443\u0436\u0435 \u0432 \u0434\u043e\u043c\u0435.\n\u041a\u0430\u0436\u0434\u0443\u044e \u043c\u0438\u043d\u0443\u0442\u0443 \u0434\u043e\u043c\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u0432 \u0434\u043e\u043c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0434\u0435\u0442\u0435\u0439 \u0435\u0449\u0451 \u043e\u0434\u043d\u043e\u0433\u043e.\n\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432 \u0434\u043e\u043c\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0430\u0440 \u0434\u0435\u0442\u0435\u0439, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0431\u043e\u0448\u043a\u0443 \u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0435\u0451 \u0432 \u0434\u0440\u0443\u0433\u043e\u0435 \u0434\u043e\u043c\u043e\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $T$, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439, \u043f\u0440\u043e\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0445 \u0432 \u0438\u0433\u0440\u0435. \u041e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u044e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u043b\u0438.\n\u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0435\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0434\u043d\u044e, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0441\u0442\u0440\u043e\u043a, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438.\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0442\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435 \u043d\u0430 \u0434\u0435\u043d\u044c \u0438\u0437 \u0434\u0432\u0443\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432.\n\u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f \u0434\u0435\u0442\u0435\u0439. \u041a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c \u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u0442\u0435\u0439 \u0440\u043e\u0436\u0434\u0430\u044e\u0442\u0441\u044f \u0438 \u0438\u0437\u043c\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0435\u0435 $10^4$.\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0431\u043e\u0448\u043a\u0443 \u0438\u0437 \u0440\u043e\u0436\u0434\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0434\u0432\u0443\u0445 \u0434\u0435\u0442\u0435\u0439 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 $-1$.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0422\u0435\u0441\u0442 1\n>>> 2\n>>> blue pink 1.0\nred pink 1.5\n>>> 1\n\n\u0422\u0435\u0441\u0442 2\n>>> 4\n>>> orange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n>>> 1\n\n\u0422\u0435\u0441\u0442 3\n>>> 4\n>>> orange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n>>> 1\n\n\u0422\u0435\u0441\u0442 4\n>>> 5\n>>> orange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n>>> 2\n\n\u0422\u0435\u0441\u0442 5\n>>> 3\n>>> orange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n>>> 3\n\n\u0422\u0435\u0441\u0442 6\n>>> 4\n>>> orange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\t') == ''\nassert solution('\\r') == ''\nassert solution('\\n\\t') == ''\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0') == '1.500000000000000'\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\") == '22'\nassert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\") == '180'\n\"\"\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n\") == \"180\"\n\"\"\"\nimport math\nimport sys\nfrom collections import Counter\n\nn_ingredients = int(sys.stdin.readline())\nn_brands = int(sys.stdin.readline())\n\nbrands = Counter(map(int, sys.stdin.readline().strip().split()))\n\nn_pairs = int(sys.stdin.readline())\n\nincompatible_pairs = Counter()\nfor i in range(n_pairs):\n    ingredient1, ingredient2 = map(int, sys.stdin.readline().strip().split())\n    incompatible_pairs[(ingredient1, ingredient2)] += 1\n\nprint(solution())\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n\") == \"0\"\nassert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n\") == \"180\"\n\n\"\"\"\n\nfrom typing import List, Union, Any\n\nfrom collections import defaultdict\n\nfrom collections import defaultdict\n\nINPUT_FILE = \"input.txt\""
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n') == '180'\nassert solution('3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n') == '22'\n\"\"\"\n\nfrom collections import defaultdict, Counter\nfrom itertools import combinations\nfrom math import factorial\nfrom sys import stdin\nfrom typing import Counter, List, Set, Tuple\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n\") == \"180\"\n\"\"\"\n\nfrom typing import List, Dict"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n\") == \"180\"\nassert solution(\"3 2 2 1 1\\n2 3 2\\n1 1\\n1 2\\n1 2\\n1 3\\n1 1\\n2 3\\n\") == \"22\"\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n\") == \"0\"\n\nSample Input 4:\n5 1 1 1 0\n1 2\n1 2\n1 2\n1 2\n1 2\n2 3\n1 1\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\") == \"180\"\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n\") == \"22\"\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\") == \"0\"\n\"\"\"\n\nfrom collections import Counter\nfrom functools import lru_cache\n\nN, S, M, D, K = map(int, input().split())\nbrands = Counter(map(int, input().split()))\n\n@lru_cache(None)\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n3 3 4 5\\n\") == \"180\"\nassert solution(\"3 2 2 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n\") == \"22\"\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n\") == \"0\"\n\nprint(solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n\"))"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n') == '180'\nassert solution('3 2 2 1 1\\n2 3 2\\n1 1\\n1 2\\n1 2\\n1 3\\n1 1\\n2 3\\n') == '22'\nassert solution('3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n') == '0'\n\nprint(solution(stdin))\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n\") == '180'\n\n\"\"\"\n\n\"\"\"\nBEST SOLUTION\n\nimport sys\n\nlines = sys.stdin.readlines()"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2') == '17 17'\n\"\"\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 3\\n.....\\n#####\\n....#\\n#####\\n#..#\\n#..#\\n#..#\\nup 2\\nr 2\\nd 2\\nup 1\") == \"7 7\"\nassert solution(\"5 5 3\\n.....\\n#####\\n....#\\n#####\\n#..#\\n#..#\\n#..#\\nup 2\\nr 2\\nd 2\\nup 1\") == \"7 7\"\nassert solution(\"1 1 1\\n#\\n#\\nup 1\") == \"0 0\"\nassert solution(\"5 5 3\\n.....\\n#####\\n....#\\n#####\\n#..#\\n#..#\\n#..#\\nup 2\\nr 2\\nd 2\\nup 1\") == \"4 4\"\n\n\"\"\"\n\n\nfrom typing import List\nfrom collections import deque\nimport unittest\n\n\nclass Solution:\n    @staticmethod\n    def solve(stdin: str) -> str:\n        h, w, n = map(int, stdin.split())\n        board = [['.' for _ in range(w)] for _ in range(h)]\n\n        directions = [\n            (-1, 0),\n            (1, 0),\n            (0, -1),\n            (0, 1),\n        ]\n        for i in range(n):\n            # print(f\"{i=}, {stdin[i:i+3+i]=}\")\n            x, y, d, l = map(str, stdin[i:i+3+i].split())\n            x, y = int(x) - 1, int(y) - 1\n            for _ in range(int(l)):\n                dx, dy = directions[int(d)]\n                # print(f\"{i=}, {x=}, {y=}, {dx=}, {dy=}\")\n                x, y = x + dx, y + dy\n                if 0 <= x < h and 0 <= y < w:\n                    board[x][y] = '#'\n\n        x_left = y_left = 0\n        x_right = h - 1\n        y_right = w - 1\n\n        for x in range(h):\n            for y in range(w):\n                if board[x][y] == '#':\n                    x_left = max(x_left, x)\n                    y_left = max(y_left, y)\n                    x_right = min(x_right, x)\n                    y_right = min(y_right, y)\n\n        return f\"{x_left} {y_left}\\n{x_right} {y_right}\"\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(Solution.solve(stdin=\"5 5 3\\n.....\\n#####\\n....#\\n#####\\n#..#\\n#..#\\n#..#\\nup 2\\nr 2\\nd 2\\nup 1\"), \"7 7\")\n        self."
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3') == '20 20'\nassert solution('6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nup 2\\nright 2') == '17 17'\nassert solution('3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2') == '-1 -1'\n\n\"\"\""
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nr 7\\nd 2\\nl 4\\nup 3\") == \"20 20\"\nassert solution(\"6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nu 3\\nr 7\\nd 2\\nl 4\\nup 3\") == \"17 17\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nr 2\") == \"-1 -1\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nr 2\") == \"-1 -1\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\") == \"-1 -1\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2\\n.\\n.#\\n...\") == \"-1 -1\"\nassert solution(\"3 3 2\\n....\\n.#.\\n...\") == \"0 0\"\nassert solution(\"6 8 5\\n......\\n#...#.\\n########\\n#..#...\\n#..####\\n#.......\\nup 3\\nrght 7\\ndown 2\\nleft 4\\nup 3\") == \"20 20\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2\\n...\") == \"17 17\"\nassert solution(\"6 8 5\\n...\\n...\\n###.\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\") == \"17 17\"\nassert solution(\"6 8 5\\n........\\n........\\n########\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"20 20\"\nassert solution(\"6 8 5\\n........\\n........\\n########\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"20 20\"\nassert solution(\"6 8 5\\n........\\n........\\n########\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"20 20\"\n\n\"\"\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"20 20\"\nassert solution(\"6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"17 17\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\") == \"-1 -1\"\n\"\"\"\nfrom functools import lru_cache\nfrom typing import List"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nr 7\\nd 2\\nl 4\\nu 3\\n\") == \"20 20\"\nassert solution(\"6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nu 3\\nr 7\\nd 2\\nl 4\\nu 3\\n\") == \"17 17\"\nassert solution(\"6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nu 3\\nr 7\\nd 2\\nl 4\\nu 3\\n\") == \"17 17\"\n\n------\n\nMr. Turtle can travel at most $1000000$.\nNote that $0$ is the starting point, and $1000000$ is the endpoint.\n\nAny blank cell on the board is a part of the path.\n\nIf a cell is a marked cell, it must stay marked, unless the cell is on the edge of the whiteboard, in which case the cell must become unmarked.\n\nIf a cell is a blank cell, it must become unmarked, unless the cell is on the edge of the whiteboard, in which case the cell must become marked.\n\nFor example, at the beginning of the example in the \u201cData\u201d section, the board looks like this:"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''371\n3\n2 40 65\n2 100 150\n2 300 320''') == 'impossible'\n\nassert solution('''310\n3\n2 40 65\n2 100 150\n2 300 320''') == '300'\n\nassert solution('''90\n2\n2 20 35\n2 88 200''') == '88'\n\nassert solution('''40\n2\n2 20 35\n2 88 200\n2 300 320''') == '88'\n\nassert solution('''40\n2\n2 20 35\n2 88 200\n2 300 320''') == '88'"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('371\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == 'impossible'\nassert solution('310\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == '300'\nassert solution('90\\n2\\n2 20 35\\n2 88 200') == '88'\n\"\"\"\n\nb, k = map(int, input().split())\nL = []\nfor _ in range(k):\n    l, *n = map(int, input().split())\n    L.append(tuple(n))"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"391\\n2\\n2 20 35\\n2 88 200\") == \"88\"\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\nassert solution(\"90\\n2\\n2 20 35\\n2 88 200\") == \"88\"\n\"\"\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\n\"\"\"\n\n\"\"\"\n5.3: Smallest Packet Size\nProblem:\nGiven an integer $B$, find the smallest integer $M$ such that there exists a set of nonempty packages of size $M$ each that contains at least $B$ number of bolts.\n\nSolution:\nNote that a single package of size $M$ will have at least $B$ number of bolts. So, the smallest possible number of packages is $M+1$.\n\nFor $B \\geq 3$, it is enough to check if there exists a set of nonempty packages of size $M=2$ that contains at least $3$ number of bolts. If this is the case, then the smallest possible number of packages is $M=2$; if this is not the case, then $M=3$ is the smallest possible.\n\nIf $B = 3$, the smallest possible number of packages is $2$.\n\nIf $B = 2$, the smallest possible number of packages is $1$.\n\"\"\"\n\n\"\"\"\n5.4: Maximum Product\nProblem:\nGiven two integers $a, b$ and an array $A$, find the maximum product of any two numbers in $A$ which are not equal to $a$ or $b$.\n\nSample Input:\n4\n3\n5 4 2\nSample Output:\n6\n\nSample Input:\n4\n4\n4 3 6 7\nSample Output:\n8\n\nSolution:\n\nSample Input:\n3\n2\n3 4 5\nSample Output:\n8\n\nSample Input:\n4\n4\n4 3 6 7\nSample Output:\n8\n\nSample Input:\n4\n4\n3 1 5 6\nSample Output:\n12\n\nSample Input:\n3\n4\n1 2 3 4\nSample Output:\n-1\n\nSample Input:\n2\n4\n3 1 2 4\nSample Output:\n-1\n\nSample Input:\n4\n4\n2 3 4 6\nSample Output:\n24\n\nSample Input:\n3\n4\n3 4 5\nSample Output:\n-1\n\nSample Input:\n4\n4\n3 1 5 6\nSample Output:\n24\n\nSample Input:\n1\n3\n1 3 4\nSample Output:\n4\n\nSample Input:\n2\n4\n2 3 4 6\nSample Output:\n-1\n\nSample Input:\n2\n5\n2 3 4 5\nSample Output:\n0\n\nSolution:\n\nSample Input:\n4\n4\n3 1 5 6\nSample Output:\n8\n\nSample Input:\n4\n4\n3 1 5 6\nSample Output:\n8\n\nSample Input:\n2\n4\n3 1 5 6\nSample Output:\n-1\n\nSample Input:\n2\n4\n3 1 5 6\nSample Output:\n-1\n\nSample Input:\n4\n4\n3 1 5 6\nSample Output:\n24\n\"\"\"\n\n\"\"\"\n5.5: New Year Chaos\nProblem:\nIn a long line, all the numbers are shifted by a fixed offset. The offset is chosen so that the resulting numbers are lexicographically sorted in ascending order. For example, if the offset is 3 and the numbers are 2,4,6, the resulting numbers are 4,5,6,7 and the numbers are lexicographically sorted in ascending order.\n\nYou are given a line of $n$ numbers. You are asked to determine the smallest possible value of $\\varepsilon$ such that after the offsetting, the numbers are lexicographically sorted in ascending order.\n\nNote: if a value is not a multiple of $10^4$, its true value is rounded down to the nearest multiple of $10^4$.\n\nInput Format:\n - The first and"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"71\\n1 2 3 4 5 6 7 8 9 10\\n1 1 1 1 1 1 1 1 1 1 1\") == \"2\"\nassert solution(\"71\\n1 2 3 4 5 6 7 8 9 10\\n2 1 1 1 1 1 1 1 1 1 1\") == \"impossible\"\n\n\"\"\""
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\\n371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"\\n310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\nassert solution(\"\\n90\\n2\\n2 20 35\\n2 88 200\") == \"88\"\n\n\"\"\""
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\n\"\"\"\n\n\"\"\"\nOverview\n\nSay a pack of size n consists of a sum of exactly k bolts.\n\nIf a company has to pack the exact n bolts (not more, not less) it will have to buy the packs of the previous company, and the current company will be able to produce the next company with n bolts.\n\nFor instance, if company 1 packs 3 packs of size 100, and company 2 packs packs of size 100 and 150, then company 2 can produce a pack of size 250 with 100+100+150=350 bolts, because company 1 has produced 2 packs of size 100.\n\nSo if we have a total sum of bolts, and we want to find the smallest number of packs that we can compose, we can model this problem as the following:\n\nFind the smallest number of packs that sum to the smallest number of bolts that can sum up to the total sum, by picking the packs from the previous company, and taking the remaining to create the next one.\n\nEx.\n\nInput:\n\n310\n3\n2 40 65\n2 100 150\n2 300 320\n\nOutput:\n\n88\n\nExplanation:\n\nWe can begin by first making a pack of size 0, then a pack of size 40, then a pack of size 65, and finally a pack of size 95. This sums to 310.\n\nThen we can pick the smallest pack of size 95, make it into another pack of size 180, and use the remaining amount of 95 to create the pack of size 80. This sums to 180.\n\nAfter that we can't make any pack of size 180, so we just have a pack of size 95.\n\nNow we can make a pack of size 95, and a pack of size 100. Then we have packs of size 95 and 95.\n\nWe can then make packs of size 100 and 125, and finally a pack of size 150.\n\nThis sums to 350.\n\"\"\""
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n2 100 150\\n2 300 320') == '110'\nassert solution('6\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == 'impossible'\nassert solution('6\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == '110'\n\"\"\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('371\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == 'impossible'\nassert solution('310\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == '300'\nassert solution('90\\n2\\n2 20 35\\n2 88 200') == '88'\n\"\"\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\nassert solution(\"90\\n2\\n2 20 35\\n2 88 200\") == \"88\"\n\"\"\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('......\\n......\\n######\\n......\\n......\\n......') == 'cannot fold'\nassert solution('#..#.\\n#..#.\\n###.\\n..#.\\n#..#\\n#..#') == 'can fold'\nassert solution('#.###\\n#.#.#\\n###.#\\n.#.#.\\n.#.##\\n.###.') == 'cannot fold'\nassert solution('#..#.\\n#..#.\\n#..##\\n#.###\\n.###.') == 'can fold'\nassert solution('#.###\\n#.#.#\\n###.#\\n#.#.#\\n#.###') == 'cannot fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"......\n......\n######\n......\n......\n......\"\"\") == \"cannot fold\"\nassert solution(\"\"\"......\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"......\\n\"\n                 \"...#.\\n\"\n                 \"..##.\\n\"\n                 \".#.#.\\n\"\n                 \"......\\n\") == \"cannot fold\"\nassert solution(\"......\\n\"\n                 \"##.#.\\n\"\n                 \"..##.\\n\"\n                 \"...#.\\n\"\n                 \"......\\n\") == \"can fold\"\nassert solution(\"......\\n\"\n                 \"##.#.\\n\"\n                 \"..##.\\n\"\n                 \"...#.\\n\"\n                 \"..#..\\n\"\n                 \"......\\n\") == \"cannot fold\"\nassert solution(\"......\\n\"\n                 \"###..\\n\"\n                 \"..##\\n\"\n                 \"...#\\n\"\n                 \"....\\n\"\n                 \"......\\n\") == \"cannot fold\"\n\nSample Input 4:\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('......\\n.....#\\n######\\n.....\\n......\\n') == 'cannot fold'\nassert solution('......\\n#.....\\n######\\n.....\\n......\\n') == 'can fold'\nassert solution('#...#\\n#.###\\n#.#.#\\n#.#.#\\n#####\\n#....\\n') == 'cannot fold'\nassert solution('##...\\n##.##\\n###..\\n##..#\\n##.##\\n##...\\n') == 'can fold'\nassert solution('#....\\n##..#\\n##..#\\n##...\\n#..#.\\n###..\\n') == 'cannot fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('......\\n'\n                 '......\\n'\n                 '######\\n'\n                 '......\\n'\n                 '......\\n') == 'cannot fold'\nassert solution('......\\n'\n                 '......\\n'\n                 '######\\n'\n                 '#...#\\n'\n                 '......\\n'\n                 '......\\n') == 'can fold'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"......\\n\"\n                \"......\\n\"\n                \"######\\n\"\n                \"......\\n\"\n                \"......\\n\") == \"cannot fold\"\n\nassert solution(\"......\\n\"\n                \"......\\n\"\n                \"######\\n\"\n                \"......\\n\"\n                \"......\\n\"\n                \"......\\n\") == \"cannot fold\"\n\nassert solution(\"......\\n\"\n                \"..##..\\n\"\n                \"..#..#\\n\"\n                \"..#..#\\n\"\n                \"......\\n\"\n                \"......\\n\") == \"cannot fold\"\n\nassert solution(\"......\\n\"\n                \"#.....\\n\"\n                \"#.....\\n\"\n                \"#..#..\\n\"\n                \"......\\n\"\n                \"......\\n\") == \"can fold\"\n\nassert solution(\"......\\n\"\n                \"##.##.\\n\"\n                \"##...#\\n\"\n                \"......\\n\"\n                \"......\\n\") == \"can fold\""
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"......\\n#.....\\n######\\n......\\n......\") == \"cannot fold\"\nassert solution(\"......\\n..##..\\n...#..\\n..##..\\n...#..\\n......\") == \"can fold\"\nassert solution(\"......\\n..##..\\n...#..\\n..##..\\n...#..\\n......\") == \"cannot fold\"\n\n\"\"\""
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''......\n......\n######\n......\n......\n......''') == 'cannot fold'\nassert solution('''......\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"......\\n\"\n                \"......\\n\"\n                \"######\\n\"\n                \"......\\n\"\n                \"......\\n\") == \"cannot fold\"\nassert solution(\"#....\\n\"\n                \"....#\\n\"\n                \"....#\\n\"\n                \"....#\\n\"\n                \"#....\\n\") == \"can fold\"\nassert solution(\"#....\\n\"\n                \"....#\\n\"\n                \"....#\\n\"\n                \"....#\\n\"\n                \".#...\\n\") == \"cannot fold\"\nassert solution(\"##...\\n\"\n                \"....#\\n\"\n                \"....#\\n\"\n                \"....#\\n\"\n                \"#....\\n\") == \"can fold\"\nassert solution(\"...#.\\n\"\n                \"....#\\n\"\n                \"....#\\n\"\n                \"....#\\n\"\n                \".#...\\n\") == \"cannot fold\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n......\n......\n######\n......\n......\n......\n''') == 'cannot fold'\nassert solution('''\n......\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\n\"\"\"\n\n\"\"\"\nSample Input 1:\nabcefgabc\nSample Output 1:\nabc\n\nSample Input 2:\nabcbabcba\nSample Output 2:\nabcba\n\nSample Input 3:\naaaa\nSample Output 3:\naaa\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\nprint(\"Passed all tests!\")"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\n\"\"\""
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\""
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\n\"\"\"\n\nimport collections\nimport itertools"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\nprint('Passed')\n\nsolution:\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcefgabc\") == 'abc'\nassert solution(\"abcbabcba\") == 'abcba'\nassert solution(\"aaaa\") == 'aaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\nassert solution(\"aabaa\") == \"aabaa\"\nassert solution(\"abcde\") == \"a\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\nassert solution(\"bababcbabb\") == \"bababcbabb\"\nassert solution(\"abcdefgh\") == \"\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\nprint('Test pass.')"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 4\\n2 5\") == \"4\"\nassert solution(\"4\\n1 4\\n2 5\") == \"4\"\nassert solution(\"4\\n1 4\\n2 5\") == \"4\""
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 4\\n2 5\") == \"4\"\nassert solution(\"3\\n1 4\\n2 10\\n0 15\") == \"4\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 4\\n2 10\\n0 15\") == \"4\"\nassert solution(\"2\\n1 4\\n2 10005\") == \"6\"\nassert solution(\"2\\n1 4\\n2 10\") == \"4\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n1 4\n2 5''') == '4'\nassert solution('''3\n1 4\n2 10\n0 15''') == '6'\nassert solution('''4\n1 4\n2 10\n0 15\n1 15''') == '0'\nassert solution('''6\n1 4\n2 10\n0 15\n1 15\n2 16\n0 20\n1 20\n2 21\n0 21\n1 21\n2 22\n0 21\n1 22\n2 23\n0 22\n1 23\n2 24\n0 23\n1 24\n2 24\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n1 20\n2 21\n0 20\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n4') == '4'\nassert solution('2\\n5') == '2'\nassert solution('3\\n10') == '6'\nassert solution('4\\n10') == '8'\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n0 1\n2 1\n0 1\n1 1\n\"\"\") == \"4\"\n\"\"\"\nI hope this problem will be more useful for you, and also a good example for your reading.\n\nIn this problem, you have to compute the minimum number of tickets you have to buy, which is equivalent to finding the minimum number of coupons you have to pay.\n\nYou have $10000$ in your pocket, and you can buy a ticket for each of the two zones ($2$ for the two zones). If you buy a ticket on time, that will reduce your pocket by $2$ per ticket. The tickets can be used for any trip between two zones.\n\nYou can start your journey from any one of the two zones, and the travel time is $2$ plus the number of zones between the two zones. If you start your journey at zone $0$ on time, you will have $10000 - 2 * 0 = 10000$ in pocket left.\n\nAs you already know, there are four zones numbered $0$, $1$, $2$, and $3$. So for example, the distance between the two zones is $2$ plus the number of zones between them.\n\n$0$ and $1$ are one zone, $0$ and $2$ are two zones, $0$ and $3$ are three zones, and $1$ and $3$ are four zones.\n\nSo for example, there are $4^3$ = $64$ different ways to travel from $0$ to $3$.\n\nSo if you can buy a ticket at most for four different zones, then you can travel from any one of the four zones to any one of the four zones with cost of $2$.\n\nYou can buy tickets for any two zones at the same time. For example, you can buy a ticket to travel from $0$ to $1$ with cost of $2$. Then you can travel from $0$ to $3$ with cost of $2$. So the maximum cost of tickets is $2 + 2 = 4$.\n\nIf you have $10000$ left in pocket, it means you can travel from $0$ to $1$, from $0$ to $2$, from $0$ to $3$, from $0$ to $4$,... to $3$ to $4$.\n\nAnd so you need to buy $4^3 - 4^2 = 32$ tickets.\n\nSo if you can buy a ticket at most for four different zones, then the minimum number of coupons you need to buy is $32$ plus $10000 - 4 * 2 = 986$.\n\nSo this problem is equivalent to finding the minimum number of coupons you need to buy for the maximum travel distance.\n\nAnother way to solve this problem is to think of this as a graph problem.\n\nThere are $4^3$ vertices in graph, and each of the $4^3$ vertices has $4^2$ neighbors. The edge between two neighbors has length $2$.\n\nFor example, we can travel from $0$ to $1$ with cost of $2$, then we can travel from $0$ to $3$ with cost of $2$. So the maximum travel distance is $4$.\n\nNow we have a new question: what is the maximum travel distance?\n\nSo the new problem becomes finding the shortest path from $0$ to $4^3 - 1$ with length of $4^2 - 2$.\n\nSo the maximum travel distance is $4^2 - 2$ plus $4^2 - 2 = 4$\n\nSo the minimum number of coupons needed is $4^2 - 2 + 4 = 6$.\n\nAs a result, the minimum number of coupons needed to travel from $0$ to $4^3 - 1$ is $4^2 - 2 + 4 = 6$.\n\nSo this problem can be solved using Dijkstra\u2019s algorithm, which is efficient for the shortest path problem.\n\nSo the problem can be solved using Dijkstra\u2019s algorithm. This is easier to implement than Bellman-Ford.\n\nDijkstra\u2019s algorithm:\n\n1. Choose the vertex $u$ with the minimum distance to the start vertex $0$.\n2. For each neighbor $v$ of $u$:\n    a. if the distance to $v$ is larger than the distance to $u$ + $2$\n    b. if the distance to $v$ is larger than the current distance to $u$ + $2 + |u-v|$\n    c. if the distance to $v$ is larger than the current distance to $u$ + $2 + |u-v| + |v-u|$\n3. If the distance to $u$ is larger than the distance to $u + |u-v|$, update the distance to $u$ to $u + |u-v|$.\n\nSo the shortest path to any vertex can be found in linear time using Dijkstra\u2019s algorithm.\n\nThe number of coupons needed is the number of vertices in shortest path minus 1.\n\nSo the minimum number of coupons needed to travel from $0$ to $4^3 - 1$ is $4^2 - 2 + 4 = 6$.\n\"\"\"\n\nimport heapq\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n2 3\") == \"2\"\nassert solution(\"1 4\\n2 5\") == \"4\"\nassert solution(\"1 4\\n2 10005\") == \"6\"\nassert solution(\"2 5\\n1 4\") == \"4\"\nassert solution(\"1 2\\n2 10005\\n0 15\") == \"6\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\") == 0\n\"\"\"\n\nimport sys\nimport math\nimport re\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n1 4\n2 5\n\"\"\") == '4'\nassert solution(\"\"\"\n2\n1 4\n2 10005\n\"\"\") == '6'\n\n\"\"\"\nGiven a list of intervals, return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\n\nNote: Intervals are given in the form [x, y] where x and y are integers.\n\nExample:\nInput: [(1, 2), (2, 3), (3, 4), (1, 3)]\nOutput: 1\nExplanation: (1, 3) can be removed and the rest of the intervals are non-overlapping.\n\nSolution runtime: 36ms, faster than 98.78% of Python3 submissions\n\"\"\""
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 4\\n2 5') == '4'\nassert solution('3\\n1 4\\n2 10\\n0 15') == '6'\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 4 4 8 12 24\") == 2\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 7 7\\n2 3 4 4 8 12 24') == '2'\nassert solution('5\\n1 2 3 2 1') == '0'\nassert solution('1 1\\n1') == '0'\nassert solution('1\\n1 1\\n1') == '0'\nassert solution('7 7 7\\n2 3 4 4 8 12 24\\n3 7 7') == '3'\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n2 3 4 4 8 12 24') == '2'\nassert solution('3\\n7 7 7') == '3'\nassert solution('5\\n1 2 3 2 1') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n2 3 4 4 8 12 24') == '2'\nassert solution('7\\n2 3 4 4 8 12 24') == '2'\nassert solution('3\\n7 7 7') == '3'\nassert solution('5\\n1 2 3 2 1') == '0'\n\n'''\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2, 3, 4, 4, 8, 12, 24) == 2\nassert solution(7, 2, 3, 4, 4, 8, 12) == 2\nassert solution(3, 7, 7, 7) == 3\nassert solution(5, 1, 2, 3, 2, 1) == 0\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 7 7\\n2 3 4 4 8 12 24') == '3'\nassert solution('1 2 3 2 1\\n7 7 7') == '0'\nassert solution('4\\n4') == '0'\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\nclass TrieNode:\n    def __init__(self, value):\n        self.value = value\n        self.children = defaultdict(TrieNode)\n        self.num = 0\n\nclass LCMTree:\n    def __init__(self, n: int):\n        self.root = TrieNode(0)\n        self.size = n\n\n    def add(self, value: int):\n        node = self.root\n        for digit in str(value):\n            node = node.children[digit]\n            node.num += 1\n        node.children['0'].num += 1\n\n    def lcm_of_dic(self, dic: dict) -> int:\n        max_num = 0\n        for k, v in dic.items():\n            if max_num < v:\n                max_num = v\n        return max_num\n\n    def lcm_child_num(self, node: TrieNode) -> int:\n        res = 0\n        for c in node.children.values():\n            res += c.num * self.lcm_of_dic(c.children)\n        return res\n\n    def lcm_tree(self) -> int:\n        def helper(node: TrieNode):\n            if len(node.children) == 0:\n                return 1\n            res = 1\n            for c in node.children.values():\n                res *= self.lcm_of_dic(c.children)\n                res %= 10**9 + 7\n            for c in node.children.values():\n                res *= self.lcm_child_num(c)\n                res %= 10**9 + 7\n            return res\n        res = 0\n        for c in self.root.children.values():\n            res += helper(c)\n        return res\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"5\\n1 2 3 2 1\") == \"0\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n2 3 4 4 8 12 24') == '2'\nassert solution('3\\n7 7 7') == '3'\nassert solution('5\\n1 2 3 2 1') == '0'\nprint('All test cases passed!')\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7\n2 3 4 4 8 12 24''') == '2'\nassert solution('''5\n1 2 3 2 1''') == '0'\nassert solution('''3\n7 7 7''') == '3'\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 4 4 8 12 24') == '2'\nassert solution('7 7 7') == '3'\nassert solution('1 2 3 2 1') == '0'\n\n\"\"\"\n\nfrom typing import *\n\nimport math\nimport sys\nimport os\n\nclass Tree:\n    def __init__(self, node: int):\n        self.node = node\n        self.left = None\n        self.right = None"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5 4\\nS#.F.\\n.MFMG\\n') == '3'\n\nassert solution('1 2 1\\nGS\\n') == '1'\n\nassert solution('2 2 10\\nS#\\n#G\\n') == '-1'\n\nprint('Success')"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".#.F.G\") == 3\n\"\"\""
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"1 2 1\\nGS\\n\") == \"1\"\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == \"-1\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5 4\\nS#.F.\\n.MFMG\\n') == '3'\nassert solution('1 2 1\\nGS\\n') == '1'\nassert solution('2 2 10\\nS#\\n#G\\n') == '-1'"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5 4\\nS#.F.\\n.MFMG\\n') == '3'\nassert solution('1 2 1\\nGS\\n') == '1'\nassert solution('2 2 10\\nS#\\n#G\\n') == '-1'\n\nprint('All test cases passed.')\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == 3\n\"\"\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == 3\nassert solution(\"1 2 1\\nGS\\n\") == 1\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == -1\n\n\"\"\"\nfrom collections import deque\nfrom typing import Deque, List, Optional\n\n\nclass Cell:\n    def __init__(self, row: int, column: int) -> None:\n        self.row = row\n        self.column = column\n        self.parent: Optional[Cell] = None\n        self.is_visited = False\n        self.is_checked = False\n\n    def __repr__(self) -> str:\n        return f\"({self.row}, {self.column})\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"1 2 1\\nGS\\n\") == \"1\"\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == \"-\"\nassert solution(\"4 4 3\\n........\\n...M.\\nF..#.\\n..G.\\n\") == \"3\"\nassert solution(\"5 5 10\\n........\\n........\\n......M\\n....G#\\nM.....\\n\") == \"3\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == 3\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == \"1\"\nassert solution(\"1 2 1\\nGS\\n\") == \"1\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"DRRDD\") == \"1\"\nassert solution(\"DRRDDLLLDDRRRDDDRRDDDDRLDRRRDDR\") == \"2\"\nassert solution(\"DRRRRDRDDRRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDR"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(Sample Input 1) == 1\nassert solution(Sample Input 2) == 1\nassert solution(Sample Input 3) == 2\n\nprint(solution(input()))\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 7\\n.#.....\\n.G.##S.\\n.......\\nLDLDLLDR\") == \"2\"\nassert solution(\"3 3\\nS..\\n.#.\\n..G\\nDRRDD\") == \"1\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\nS..\\n.#.\\n..G\\nDRRDD\") == '1'\n\"\"\"\n\n\nimport unittest\nfrom typing import List"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".#..#\") == \"1\"\nassert solution(\"..........\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\nS..\\n.#.\\n..G\\nDRRDD') == '1'\n\"\"\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"S#.D.#\") == \"1\"\nassert solution(\"S.D.#\") == \"1\"\nassert solution(\"S.DG\") == \"1\"\nassert solution(\"S.DG#\") == \"2\"\nassert solution(\"#.DG\") == \"1\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".#....G#....##....#....###....G\") == \"LDLDLLDR\"\nassert solution(\"............#......G......#....S..\") == \"LDLDLULDR\"\nassert solution
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 7\\n.......\\n.G.##S.\\n.......\\nLDLDLLDR') == '2'\nassert solution('3 3\\nS..\\n.#.\\n..G\\nDRRDD') == '1'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nH, W = list(map(int, input().split()))\n\ngrid = []\nfor i in range(H):\n    grid.append(input().strip())\n\nS, G = 0, 0\nfor i in range(H):\n    for j in range(W):\n        if grid[i][j] == 'S':\n            S = (i, j)\n        elif grid[i][j] == 'G':\n            G = (i, j)\n\nsteps = ((0, -1), (-1, 0), (0, 1), (1, 0))\n\nans = 10 ** 9\n\nqueue = [(S, 0)]\n\nwhile queue:\n    (i, j), step = queue.pop(0)\n    if (i, j) == G:\n        ans = step\n        break\n\n    for step in range(1, 6):\n        for di, dj in steps:\n            ni, nj = i + step * di, j + step * dj\n            if 0 <= ni < H and 0 <= nj < W and grid[ni][nj]!= '#':\n                queue.append(((ni, nj), step + 1))\n\nprint(ans)\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\nS..\\n.#.\\n..G\\nDRRDD\\n\") == \"1\"\nassert solution(\"3 7\\n.##.S\\n.##.\\n.##.\\n.##.\\n.##.\\n.##.\\n.##.\\nLDLDLLDR\\n\") == \"2\"\nassert solution(\"3 7\\n.##.S\\n.##.\\n.##.\\n.##.\\n.##.\\n.##.\\n.##.\\nLDLDLLDR\\n\") == \"2\"\nassert solution(\"3 7\\n.##.S\\n.##.\\n.##.\\n.##.\\n.##.\\n.##.\\n.##.\\nLDLDLLDR\\n\") == \"2\"\n\nassert solution(\"3 3\\nS..\\n.#.\\n..G\\nDRRDRDRDR\\n\") == \"2\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\") == \"1000200 799\"\nassert solution(\"2\\n100 0 101\\n0 200 199\") == \"uncertain\"\nassert solution(\"2\\n100 0 100\\n0 200 199\") == \"impossible\"\n\"\"\"\nimport sys\nfrom typing import Iterable"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\") == \"1000200 799\"\nassert solution(\"2\\n100 0 101\\n0 200 199\") == \"uncertain\"\nassert solution(\"2\\n100 0 100\\n0 200 199\") == \"impossible\"\n\nprint(\"All test cases passed.\")"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222') == '1000200 799'\nassert solution('2\\n100 0 101\\n0 200 199') == 'uncertain'\nassert solution('2\\n100 0 100\\n0 200 199') == 'impossible'\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222') == '1000 200 799'\nassert solution('2\\n100 0 101\\n0 200 199') == 'uncertain'\nassert solution('2\\n100 0 100\\n0 200 199') == 'impossible'\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222') == '1000200 799'\nassert solution('2\\n100 0 101\\n0 200 199') == 'uncertain'\nassert solution('2\\n100 0 100\\n0 200 199') == 'impossible'\n\"\"\"\nimport collections"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222') == '1000200 799'\nassert solution('2\\n100 0 101\\n0 200 199') == 'uncertain'\nassert solution('2\\n100 0 100\\n0 200 199') == 'impossible'\n\n\"\"\"\n\nfrom __future__ import annotations\nimport sys\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222') == '1000200 799'\nassert solution('2\\n100 0 101\\n0 200 199') == 'uncertain'\nassert solution('2\\n100 0 100\\n0 200 199') == 'impossible'\n\"\"\"\n\nimport sys\nimport math\n\nn = int(sys.stdin.readline())\nmps = set()\n\nfor i in range(n):\n    x, y, d = map(int, sys.stdin.readline().split())\n    mps.add((x, y))\n\nrx, ry = None, None\nfor x, y in mps:\n    for x1, y1 in mps:\n        if x == x1 and y == y1:\n            continue\n\n        d = abs(x - x1) + abs(y - y1)\n        if d == d and d <= 4 * 10 ** 6:\n            rx, ry = x, y\n            break\n    if rx is not None:\n        break"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('999999 0 1000\\n999900 950 451\\n987654 123 13222') == '1000200 799'\nassert solution('100 0 101\\n0 200 199') == 'uncertain'\nassert solution('100 0 100\\n0 200 199') == 'impossible'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222') == '1000200 799'\nassert solution('2\\n100 0 101\\n0 200 199') == 'uncertain'\nassert solution('2\\n100 0 100\\n0 200 199') == 'impossible'\n\n---"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\") == \"1000200 799\"\nassert solution(\"2\\n100 0 101\\n0 200 199\") == \"uncertain\"\nassert solution(\"2\\n100 0 100\\n0 200 199\") == \"impossible\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') =='syntax error'\nassert solution('8\\n1 1\\n4 8') == '2'\nassert solution('10\\n1 1\\n10 10') == '1'\nassert solution('10\\n1 1\\n5 10') =='syntax error'\nassert solution('6\\n1 1\\n5 10') == '2'\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n4 7\\n9 8\\n14 17\\n19 18') == '1\\n2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n4 7\\n9 8\\n14 17\\n19 18') == '1\\n2'\n\"\"\""
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 7\\n9 8\\n14 17\\n19 18') == '2\\n1'\nassert solution('4 8\\n9 7\\n14 18\\n19 17') == '1\\n2'\n\"\"\""
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n4 7\\n14 17\\n9 8\\n19 18\") == '1\\n2'\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') =='syntax error'\nassert solution('1 1\\n2 2\\n') == '1\\n2'\nassert solution('2 2\\n1 1\\n2 2\\n') == '1\\n2\\n1\\n2'\n\"\"\"\n\nimport math\nimport sys\nimport unittest\n\nfrom itertools import permutations\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\") == \"1\\n2\"\nassert solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\") == \"syntax error\"\n\n-----Constraints-----\n$n$ will be an integer between $1$ and $10^5$.\nEach of the $n$ lines will contain $2n + 1$ integers, each of which will be in the range $1$ to $10^9$.\n\"\"\""
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2\n4 7\n9 8\n14 17\n19 18\n''') == '1\\n2'\nassert solution('''\n2\n4 8\n9 7\n14 18\n19 17\n''') =='syntax error'\nassert solution('''\n2\n4 7\n14 17\n9 8\n19 18\n''') == '2\\n1'\nassert solution('''\n2\n4 7\n9 8\n19 18\n14 17\n''') == '2\\n1'\nassert solution('''\n2\n4 8\n9 7\n19 18\n14 17\n''') =='syntax error'\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n4 7\\n9 8\\n14 17\\n19 18') == '1\\n2'\nassert solution('2\\n4 7\\n14 17\\n9 8\\n19 18') == '1\\n2'\nassert solution('2\\n4 7\\n19 18\\n9 8\\n14 17') == '1\\n2'\n\n\"\"\"\n\nn = int(stdin.readline())\ncorners = []\n\nfor i in range(n):\n    r, c = map(int, stdin.readline().strip().split())\n    corners.append((r, c))\n\ncorners.sort()\n\nmax_r, min_r = max(corners, key=lambda c: c[0])[0], min(corners, key=lambda c: c[0])[0]\nmax_c, min_c = max(corners, key=lambda c: c[1])[1], min(corners, key=lambda c: c[1])[1]\n\nparents = [i for i in range(max_r + 1)]\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\") == \"2\\n1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\") == \"8640\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\") == \"1\"\nassert solution(\"90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\") == \"1\"\n\"\"\"\n\n\n\"\"\"\n    Theory:\n        In general, the number of distinct solutions is infinite, so the program will output \u201cmany\u201d.\n        For example, if a partial solution is given as (Salamander: 8, Golem: 5, Yeti: 3, Imp: 7, and Kraken: 2), then Golem will take two burgers, one slop, and one drumstick. The next solution is (Salamander: 9, Golem: 2, Yeti: 2, Imp: 2 and Kraken: 1) which is consistent with the partial solution.\n        \n        For a given partial solution, the program will recursively find all the possible partial solutions with the leftmost slot filled by a larger amount. For example, if the leftmost slot is filled by 7, the possible partial solutions are: (Salamander: 9, Golem: 5, Yeti: 3, Imp: 2, and Kraken: 2), (Salamander: 8, Golem: 5, Yeti: 3, Imp: 2 and Kraken: 2) and (Salamander: 9, Golem: 2, Yeti: 2, Imp: 2 and Kraken: 1).\n        \n        The program will recursively call itself to fill the remaining slots until it reaches the end of the partial solution. Once it reaches the end of the partial solution, the function will return all the solutions that were found in the recursion tree. If the leftmost slot is not filled yet, it will be filled by the minimum of the slots that are already filled in the partial solution.\n    \n    Complexity:\n        Time: O(2^n)\n        Space: O(2^n)\n\"\"\"\nimport collections\n\nMAX_VAL = 200\nMIN_VAL = 0"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\"\n\"\"\"\n\nimport pytest\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\"\n\"\"\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\"\n\"\"\""
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\nassert solution('85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n') == '1'\nassert solution('160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n') == '8640'\n\"\"\"\n\nfrom collections import defaultdict\n\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('  \\n') == ''\nassert solution('  \\n  ') == ''\nassert solution('\\n  ') == ''\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\"\n\"\"\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_stdin) == test_solution\nprint(solution(stdin))\n\n\"\"\"\n\nfrom math import factorial as f"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"_- 12 34 -_- _ -6 -_- 6 _ _ -_ 40 -_- 90 _ -_- _\") == \"1\"\nassert solution(\"_- -4 -_- -4 -_- -_ -5 -_- -4 -_- _ _ -_ -_ -_- -_ -_- _ -_- -_ -_- -_\") == \"many\"\nassert solution
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\"\n\"\"\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == \"2\"\nassert solution(\"5\\n2 1\\n1 5\\n3 1\\n4 3\") == \"8\"\n\"\"\""
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n\") == \"2\"\nassert solution(\"5\\n1 2\\n1 5\\n3 1\\n4 3\\n\") == \"8\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n') == '3'\nassert solution('1\\n2\\n1\\n') == '0'\nassert solution('1\\n2\\n3\\n4\\n5\\n') == '6'"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == 2\nassert solution(\"5\\n2 1\\n1 5\\n3 1\\n4 3\") == 8\n\"\"\""
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2\\n1 3') == '2'\nassert solution('5\\n2 1\\n1 5\\n3 1\\n4 3') == '8'\nassert solution('10\\n1 2\\n2 3\\n2 4\\n1 5\\n3 6\\n2 7\\n7 8\\n5 9\\n5 10') == '24'\nprint('Success')\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2\\n1 3') == '2'\nassert solution('5\\n2 1\\n1 5\\n3 1\\n4 3') == '8'\nassert solution('10\\n1 2\\n2 3\\n2 4\\n1 5\\n3 6\\n2 7\\n7 8\\n5 9\\n5 10') == '24'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\nroads = set()\n\nfor line in sys.stdin:\n    u, v = map(int, line.split())\n    roads.add((u, v))\n    roads.add((v, u))\n\nroads = list(roads)\nroads.sort()\nroads.sort(key=lambda road: road[0])\njunctions = []\nfor road in roads:\n    junctions.append(road[0])\n    junctions.append(road[1])\n\njunctions = set(junctions)\njunctions = list(junctions)\njunctions.sort()\n\ncurr_junction = junctions[0]\npath_count = 0\nfor junction in junctions[1:]:\n    if junction - curr_junction == 2:\n        path_count += 1\n    curr_junction = junction\n\nprint(path_count)\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"3 1\") == \"2\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2\\n1 5\\n3 1\\n4 3\") == \"8\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2\n1 3\n''') == 2\n\nassert solution('''5\n1 2\n1 3\n2 4\n2 5\n''') == 8\n\nassert solution('''10\n1 2\n2 3\n2 4\n1 5\n3 6\n2 7\n7 8\n5 9\n5 10\n''') == 24\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('1 2') == '0'\nassert solution('1 1\\n1 2') == '0'\nassert solution('2 1\\n1 2') == '1'\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"treetreetreetree\") == \"3\"\nassert solution(\"oranges\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"boot\") == \"essa\"\nassert solution(\"treetreetreetree\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"boot\") == \"esse\"\nassert solution(\"treetreetreetree\") == \"3\"\nassert solution(\"oranges\") == \"0\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == 'boot'\nassert solution('treetreetreetree') == '3'\nassert solution('wood') == '0'\nassert solution('oranges') == '0'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\n\"\"\"\n\n\ntest_input_1 ='secretmessage'\ntest_input_2 = 'treetreetreetree'\ntest_input_3 = 'oranges'\n\ntest_output_1 = 'essa'\ntest_output_2 = 3\ntest_output_3 = 0\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"treetreetreetree\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == 'essa'\nassert solution('treetreetreetree') == '3'\nassert solution('wood') == '0'\nassert solution('oranges') == '0'\n\"\"\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcdabcdef\") == \"abcde\"\nassert solution(\"abcde\") == \"abcde\"\nassert solution(\"abcdef\") == \"abcdef\"\nassert solution(\"abcdecdefg\") == \"abcdefg\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"treetreetreetree\") == \"3\"\nassert solution(\"oranges\") == \"0\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"treetreetreetree\") == \"3\"\nassert solution(\"oranges\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n>^<^\\n######\\n#.#..#\\n#....#\\n#..R.#\\n#....#\\n######') == '2'\nassert solution('4\\nv<^>\\n####\\n#.R#\\n#..#\\n####') == '4'\nassert solution('4\\n<<<\\n####\\n#.R#\\n#..#\\n####') == '1'"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\">^<^\") == \"2\"\nassert solution(\"vvvv\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\">><<\") == \"1\"\nassert solution(\"v<^>\") == \"2\"\nassert solution(\">>v<^v<<\") == \"4\"\nassert solution(\"<><^<><\") == \"5\"\nassert solution(\"<><^v<><\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''6\n>^<^\n######\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\n>^<^\n####\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\">>>^<^\") == '2'\nassert solution(\"v<^>\") == '4'\nassert solution(\"<<<\") == '1'\nassert solution(\"v<^>v^v^v^v\") == '4'\nassert solution(\">>v>>v>>v>>v\") == '3'\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"v<^>\") == \"4\"\nassert solution(\">^v<\") == \"2\"\nassert solution(\"<<<\") == \"1\"\nassert solution(\"v<>v<^\") == \"2\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\">>^<<\\n####\\n#.R#\\n#..#\\n####\") == \"2\"\nassert solution(\"<<^v^>>\\n.R#.\\n.R#.\\n#.#\\n#.#\") == \"1\"\nassert solution(\">>>>\\n##.#\\n#.R#\\n#.#\\n##.#\") == \"3\"\nassert solution(\"^v^v^v^v^v\\n##.R#\\n.##\\n#.#\\n##.#\") == \"3\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"v<^>\") == \"1\"\nassert solution(\">v<^\") == \"1\"\nassert solution(\"^v<^\") == \"2\"\nassert solution(\"<^v<^\") == \"2\"\nassert solution(\">^v^\") == \"3\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\">^^^\") == \"3\"\nassert solution(\">^^v<\") == \"2\"\nassert solution(\">^^v<v\") == \"1\"\nassert solution(\">^>^v<\") == \"3\"\nassert solution(\">^>v<v\") == \"2\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2') == '3'\nassert solution('3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1') == '6'\n\"\"\"\n\nwith open('1.txt') as f:\n    n = int(f.readline())\n    fogs = [[int(x) for x in f.readline().split()] for _ in range(n)]\n\nfogs = sorted(fogs, key=lambda x: x[1])\ndiffs = [fogs[i][2] - fogs[i - 1][2] for i in range(1, len(fogs))]\n\ntotal = 0\n\nfor i in range(len(diffs)):\n    if diffs[i] < 0:\n        total += fogs[i][1] * (-diffs[i])\n    else:\n        total += (fogs[i][0] - fogs[i - 1][0]) * diffs[i]\n\nprint(total)\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == 3\n\nassert solution(\"3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1\") == 6\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == 3\nassert solution(\"3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1\") == 6\nassert solution(\"2\\n7 0 0 20 10 3 0 10\\n10 1 0 2 5 2 2 7\") == 11\nassert solution(\"3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1\") == 6\n\"\"\"\n\n\"\"\"\nTheory\n\nThere are 2n^2 + 1 squares. The number of squares is n^2 (x,y-axis) + 2n(x,0) + 2n(0,y) = 2n^2 + 2n + n^2 + 2n + 1. \n\nThere are two different kinds of squares:\n- The n^2 in the middle, of which there are 2n^2.\n- The n(x,y) in the corner.\n\nFor each y, there are 2n (x,y) squares. There are 2n^2 (x,y) squares.\n\nThe number of squares that are part of the rectangle is 2n^2 + n + 2n = 2n^2 + 2n + n^2 + 2n + 1.\n\n\"\"\""
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 0 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == \"3\"\n\nassert solution(\"3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1\") == \"6\"\n\nassert solution(\"2\\n7 0 0 20 10 3 0 10\\n10 1 0 2 5 2 2 7\") == \"11\""
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n2\n3 0 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2\n''') == '3'\n\nassert solution('''\n2\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '6'\n\nassert solution('''\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '11'\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 0 2 9 2 3 0\") == 3\n\"\"\""
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2') == '3'\nassert solution('3 10 7 10 4 1 8 -1\\n3 5 50 55 8 1 -16 2') == '6'\nassert solution('2\\n7 0 0 20 10 3 0 10') == '11'\nassert solution('3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2') == '6'\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 0 2 9 2 3 0') == 3\nassert solution('1 6 1 4 6 3 -1 -2') == 3\nassert solution('3 5 50 55 8 1 -16 2') == 6\nassert solution('2 7 10 10 4 1 8 -1') == 11\n\nprint(solution('2 3 0 2 9 2 3 0'))\nprint(solution('3 5 50 55 8 1 -16 2'))\nprint(solution('7 0 0 20 10 3 0 10'))\nprint(solution('2 7 10 10 4 1 8 -1'))\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test1) == 3\nassert solution(test2) == 6\nassert solution(test3) == 11\n\"\"\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2\n3 0 0 10 10 1 15 0\n1 6 1 4 6 3 -1 -2\n''') == '3'\n\n'''\n2\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2\n'''\nassert solution('''\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '6'\n\n'''\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n'''\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\n\"\"\""
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0''') == '168.7916512460'\n\n'''\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def distance(self, p):\n        return math.sqrt((p.x - self.x)**2 + (p.y - self.y)**2)"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"0.0 1.0 4.0 1.0\") == \"3.7320508076\"\n\"\"\""
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == '168.7916512460'\nassert solution('0.0 1.0 4.0 1.0') == '3.7320508076'\n\n\"\"\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a) == result\nprint(solution(a))\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"0.0 1.0 4.0 1.0\") == \"3.7320508076\"\nassert solution(\"0.0 0.0 4.0 0.0\") == \"3.7320508076\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\", \"3\", \"40.0 0.0 0.0 0.0\", \"5.0 20.0 5.0 170.0\", \"95.0 0.0 95.0 100.0\") == \"163.5274740179\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == '168.7916512460'\nassert solution('0.0 1.0 4.0 1.0') == '3.7320508076'\nassert solution('0.0 0.0 4.0 0.0') == '3.7320508076'"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0\") == \"163.5274740179\"\nassert solution(\"60.0 0.0 50.0 170.0\\n1\\n0.0 0.0 4.0 0.0\") == \"3.7320508076\"\n\n\"\"\"\n\nimport sys\nfrom math import sqrt\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\n\n\"\"\"\n\nA, B = [float(v) for v in input().split()]\nC = [float(v) for v in input().split()]\nD = [float(v) for v in input().split()]\n\nimport numpy as np"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\nassert solution(\"9 8 1\") == \"canterlot\"\nassert solution(\"5 3 5\") == \"madam\"\nassert solution(\"9 4 2\") == IMPOSSIBLE\n\"\"\"\n\nfrom collections import Counter, defaultdict\nimport math\n\nN, K, P = [int(i) for i in input().split()]\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 5 3') == 'rarity'\n\"\"\""
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\n\"\"\"\n\nn, k, p = list(map(int, input().split()))"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input)) == str(expected_output)\n\n\"\"\"\n\nimport math\nimport itertools\nimport string"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 3') =='madam'\nassert solution('5 3 1') == 'rarity'\nassert solution('5 2 2') == 'impossible'"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 5 3') == 'rarity'\n\"\"\""
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n\"\"\"\n\nimport itertools\nimport math\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 5') =='madam', \"Test 1 is bad.\"\nassert solution('9 8 1') == 'canterlot', \"Test 2 is bad.\"\nassert solution('1 1 1') == 'IMPOSSIBLE', \"Test 3 is bad.\"\nassert solution('9 8 1') == 'canterlot', \"Test 4 is bad.\"\n\"\"\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input_string) == expected_result\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5 3\") == \"rarity\", \"Test 1 failed\"\nassert solution(\"9 8 1\") == \"canterlot\", \"Test 2 failed\"\nassert solution(\"5 3 5\") == \"madam\", \"Test 3 failed\"\nprint(\"Tests passed\")\n\n-----Constraints-----\n1 <= N <= 10^6\n1 <= K <= 26\n1 <= P <= N\n\n\"\"\""
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International\\ncontest- motivation high\\nProgrammers have fun!\"\nassert solution(\"A haiku is a three-line poem in which the first and third lines contain $5$ syllables each, and the second line contains $7$ syllables. \") == \"A haiku is a three-line poem in which the first and third lines contain $5$ syllables each, and the second line contains $7$ syllables.\"\nassert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \\\n        \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\n\"\"\""
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International contest-\\nmotivation high\\nProgrammers have fun!\"\nassert solution(\"A haiku is a three-line poem in which the first and third lines contain $5$ syllables each, and the second line contains $7$ syllables.\") == \"A haiku is a three-line poem in which the first and third lines contain 5 syllables each, and the second line contains 7 syllables.\"\nassert solution(\"A haiku is a three-line poem in which the first and third lines contain 5 syllables each, and the second line contains 7 syllables.\") == \"A haiku is a three-line poem in which the first and third lines contain 5 syllables each, and the second line contains 7 syllables.\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \\\n    \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\n\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\\n\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \\\n    \"International contest-\\nmotivation high\\nProgrammers have fun!\\n\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge\\n\\n\\nleaves\\nglowening\\nsun\\nfall\\n\\n\\n\\nfall\\n\\n\\n\\nVirginia\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would\\n\\n\\nknow\\n\\n\\nif we had too few\\n\\n\\n\\nsyllables?\\n\\n\\n\\n\\n\\n\\n\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International\\ncontest-\\nmotivation high\\nProgrammers\\nhave\\nfun!\"\n\"\"\""
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"who would know if we had too few syllables\") == \"who would know if we had too few syllables\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International contest-\\nmotivation high Programmers have fun!\"\n\"\"\"\n\n\nimport re\nfrom pprint import pprint\n\nSTOP_WORD = re.compile(r'\\w*[^\\w]+\\w*')\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International contest\\n- motivation high\\nProgrammers have fun!\"\n\n'''"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('A haiku is a three-line poem in which the first and third lines contain $5$ syllables each, and the second line contains $7$ syllables.') == 'A haiku is a three-line poem in which the first and third lines contain 5 syllables each, and the second line contains 7 syllables.'\nassert solution('A haiku is a three-line poem in which the first and third lines contain $5$ syllables each, and the second line contains $7$ syllables.') == 'A haiku is a three-line poem in which the first and third lines contain 5 syllables each, and the second line contains 7 syllables.'\nassert solution('A haiku is a three-line poem in which the first and third lines contain $5$ syllables each, and the second line contains $7$ syllables.') == 'A haiku is a three-line poem in which the first and third lines contain 5 syllables each, and the second line contains 7 syllables.'\nassert solution('A haiku is a three-line poem in which the first and third lines contain $5$ syllables each, and the second line contains $7$ syllables.') == 'A haiku is a three-line poem in which the first and third lines contain 5 syllables each, and the second line contains 7 syllables.'\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International\\ncontest- motivation high\\nProgrammers have fun!\"\nprint('test passed')\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == (\"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\")\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == (\"International contest-\\nmotivation high\\nProgrammers have fun!\")\nassert solution(\"It is not easy to make a\\nperfect haiku\") == (\"It is not easy to make a\\nperfect haiku\")\nassert solution(\"Across the riverside,\\nI hear the leaves fall\") == (\"Across the riverside,\\nI hear the leaves fall\")\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ThoreHusfeldt ThoreTiemann\") == 'ThoreHusfeldt'\nassert solution(\"ThoreHusfeldt JohanSannemo\") == 'ThoreHusfeldt'\nassert solution(\"ThoreHusfeldt JohanSannemot\") == 'Thore is awesome'\nassert solution(\"ThoreHusfeldt JohanSannemot\") == 'Thore is awesome'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ThoreHusfeldt\\nJohanSannemo\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldter\\nThoreHusfeldt\") == \"Thore sucks\"\n\"\"\""
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ThoreHusfeldt\\nThoreHusfeldt\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\") == \"Thore sucks\"\n\"\"\""
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ThoreHusfeldt\\nThoreHusfeldt\\nJohanSannemo\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\") == \"Thore sucks\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\n\"\"\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ThoreTiemann\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldter\") == \"Thore sucks\"\n\n\"\"\"\n\nn = int(input())\n\nd = dict()\nfor _ in range(n):\n    name = input()\n    if \"ThoreHusfeldt\" in name:\n        print(\"Thore is awesome\")\n        break\n    if name not in d.keys():\n        d[name] = 1\n    else:\n        d[name] += 1"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ThoreHusfeldt\\nThoreHusfeldt') == 'ThoreH'\nassert solution('ThoreHusfeldt\\nJohanSannemo') == 'Thore is awesome'\nassert solution('ThoreHusfeldt\\nThoreHusfeldt') == 'ThoreH'\nassert solution('ThoreHusfeldt\\nThoreHusfeldtthor') == 'ThoreH'\nassert solution('ThoreHusfeldt\\nThoreHusfeldtthor') == 'ThoreH'\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\nThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"2\\nThoreHusfeldt\\nJohanSannemo\") == \"Thore sucks\"\nassert solution(\"2\\nThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"2\\nThoreHusfeldt\\nThoreHusfeldter\") == \"ThoreH\"\nassert solution(\"2\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ThoreHusfeldt\\nThoreHusfeldt\\nThoreTiemann\\n\") == \"ThoreHusfeldt\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\\n\") == \"ThoreHusfeldt\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\\nThoreTiemann\\n\") == \"ThoreTiemann\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\\n\") == \"ThoreHusfeldt\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\\nThoreTiemann\\n\") == \"ThoreHusfeldt\"\n\n\"\"\"\n\nimport sys\nimport numpy"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\nThoreHusfeldt\\nJohanSannemo\") == \"Thore is awesome\"\nassert solution(\"2\\nThoreHusfeldt\\nJohanSannemo\") == \"Thore sucks\"\nassert solution(\"2\\nJohanSannemo\\nThoreHusfeldt\") == \"ThoreH\"\n\"\"\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\nThoreHusfeldt\\nJohanSannemo\") == \"Thore is awesome\"\nassert solution(\"2\\nThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreHusfeldt\"\nassert solution(\"2\\nThoreHusfeldt\\nJohanSannemo\\nThoreHusfeldt\") == \"ThoreHusfeldt\"\nassert solution(\"2\\nThoreHusfeldt\\nThoreHusfeldt\\nJohanSannemo\") == \"ThoreHusfeldt\"\nassert solution(\"2\\nThoreHusfeldt\\nJohanSannemo\\nThoreHusfeldt\") == \"Thore sucks\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"P*P\") == 6\nassert solution(\"L*R\") == 25\nassert solution(\"**\") == 33\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"P*P\") == 6\nassert solution(\"L*R\") == 25\nassert solution(\"**\") == 33"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"**\") == 33\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('LL') == 'LL'\nassert solution('LR') == 'LR'\nassert solution('LRP') == 'LRP'\nassert solution('LP') == 'LP'\nassert solution('LRRR') == 'LRRR'\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"P*P\") == 6\nassert solution(\"L*R\") == 25\nassert solution(\"**\") == 33\n\"\"\""
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('LLR') == 2\nassert solution('LR') == 3\nassert solution('LRR') == 5\nassert solution('LLRRR') == 6\nassert solution('LLR*R') == 15\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"L*R\") == 25"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\"\n\"\"\"\n\n\"\"\"\ninput1 = \"L*R\"\ninput2 = \"**\"\n\nl = list(input1)\nt = list(input2)\n\nl = l[:-1]\nt = t[:-1]\n\nl = list(map(lambda x: x * 2, l))\nt = list(map(lambda x: x * 2, t))\n\nt = list(map(lambda x: x - 1, t))\n\nd = dict(zip(l, t))\nprint(d)\n\nprint(d[1] + d[3] + d[5] + d[7] + d[9])\n\"\"\""
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('L*R') == '33'\nassert solution('**') == '33'\nassert solution('L*R*L*P') == '6'\nassert solution('LLRRRRLL*LLRR*') == '5'\nassert solution('L*L*R*P*R') == '15'\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"L*R\") == 25\nassert solution(\"**\") == 33\n\"\"\"\n\n\"\"\"\nintuition:\nA*B is the same as a+b. So, we can do the same trick for a+b, but in addition, we can use a * b (a and b are like a walk) to find the pattern.\n\"\"\"\n\n\"\"\"\nsolution 1:\n\"\"\""
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp') == 'yes'\nassert solution('3\\nlukas is smart\\nlukas is poptart') == 'wait what?'\nassert solution('1\\nmoo not foo') == 'yes'\n\"\"\"\n\nn = int(input())\nd = dict()\n\nfor i in range(n):\n    words = input().split()\n    if words[0] not in d:\n        d[words[0]] = [words[1]]\n    else:\n        d[words[0]].append(words[1])\n    if words[1] not in d:\n        d[words[1]] = [words[0]]\n    else:\n        d[words[1]].append(words[0])"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"4\nherp is derp\nderp is herp\nherp is herp\nderp is derp\"\"\") == \"yes\"\nassert solution(\"\"\"3\noskar not lukas\noskar is poptart\nlukas is smart\"\"\") == \"wait what?\"\nassert solution(\"\"\"1\nmoo not foo\"\"\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\nfoo is bar\") == \"wait what?\"\nassert solution(\"2\\nfoo not bar\\nfoo is foo\") == \"yes\"\nassert solution(\"3\\nmoo not foo\\nmoo is moo\") == \"yes\"\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"moo not foo\\n\") == \"yes\"\nassert solution(\"moo is foo\\n\") == \"wait what?\"\nassert solution(\"lukas is smart\\n\") == \"yes\"\n\n\"\"\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '2\\nlukas is smart\\nlukas is poptart'\n) == 'yes\\n'\nassert solution(\n    '4\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp'\n) == 'yes\\n'\nassert solution(\n    '5\\nlukas is smart\\nlukas is poptart\\nlukas is smart\\nlukas is poptart\\nlukas is smart\\nlukas is poptart'\n) == 'wait what?\\n'\nassert solution(\n    '6\\nlukas is smart\\nlukas is poptart\\nlukas is smart\\nlukas is poptart\\nlukas is smart\\nlukas is poptart\\nlukas is smart\\nlukas is poptart\\nlukas is smart\\nlukas is poptart\\nlukas is smart\\nlukas is poptart\\nlukas is smart\\nlukas is poptart'\n) == 'yes\\n'\nassert solution(\n    '10\\nlukas is smart\\nlukas is poptart\\nlukas is smart\\nlukas is poptart\\nlukas is smart\\nlukas is poptart\\nlukas is smart\\nlukas is poptart\\nlukas is smart\\nlukas is poptart\\nlukas is smart\\nlukas is poptart\\nlukas is smart\\nlukas is poptart\\nlukas is smart\\nlukas is poptart'\n) == 'yes\\n'\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"derp is herp\\nderp is derp\\nherp is derp\\nherp is herp\") == \"yes\"\nassert solution(\"derp is herp\\nderp is derp\\nherp is derp\\nherp is herp\\nlukas is smart\") == \"wait what?\"\nassert solution(\"derp is herp\\nderp is derp\\nherp is derp\\nherp is herp\\nlukas is smart\\nlukas is smart\") == \"yes\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nrhymes = set()\n\nfor i in range(n):\n    x, y = sys.stdin.readline().split()\n    if len(x) <= 3 and len(y) <= 3 and x[-1] == y[-1]:\n        rhymes.add((x, y))"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(r'2\\nlukas is smart\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlukas is derp\\nlu"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\nherp is derp\nderp is herp\nherp is herp\nderp is derp''') == 'yes'\nassert solution('''3\noskar not lukas\noskar is poptart\nlukas is smart''') == 'wait what?'\nassert solution('''1\nmoo not foo''') == 'yes'\n'''\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp') == 'yes'\nassert solution('3\\noskar not lukas\\noskar is poptart\\nlukas is smart') == 'wait what?'\nassert solution('1\\nmoo not foo') == 'yes'\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\nherp is derp\nderp is herp\nherp is herp\nderp is derp\n\"\"\") == \"yes\"\nassert solution(\"\"\"\noskar not lukas\noskar is poptart\nlukas is smart\n\"\"\") == \"wait what?\"\nassert solution(\"\"\"\nmoo not foo\n\"\"\") == \"yes\"\nassert solution(\"\"\"\nmoo not foo\nfoo is moo\n\"\"\") == \"no\"\n\n\"\"\"\nWanna see?\n\nM\u00e5rten's theorem states that two words rhyme if their last 3 characters are the same.\n\nHowever, we are looking for a way to check if two words rhyme or not.\n\nIn essence, what we need to do is check if the last 3 characters are the same in two words.\n\nLet's have a look at a simple example.\n\nFor the first word (say, \"derp\"), the last 3 characters are \"der\", so we know it's the same.\n\nFor the second word (say, \"herp\"), the last 3 characters are \"hrp\", so we know it's the same.\n\nSo two words rhyme.\n\nNow, how about the cases when the last 3 characters are different?\n\nFor the first word (\"derp\"), the last 3 characters are \"der\", so it rhymes.\n\nHowever, for the second word (\"herp\"), the last 3 characters are \"her\", so it does not rhyme.\n\nSo the only words rhyme are \"derp\" and \"herp\".\n\nYou are given a list of strings, and your task is to check if they all rhyme or not.\n\nInput:\n\nThe first line of input contains an integer N, the number of words in the list.\n\nNext N lines contain a word each.\n\nOutput:\n\nPrint \"yes\" if they all rhyme, or \"no\" otherwise.\n\nConstraints\n\n    1 <= N <= 100\n    1 <= |word| <= 20, where |word| denotes the length of a word.\n    All words contain only lowercase letters.\n\n\"\"\"\n\nn = int(input())\n\nstrings = []\nfor i in range(0, n):\n    strings.append(input())\n\nlast_3_chars = [x[len(x)-3:len(x)] for x in strings]\nfor i in range(0, n):\n    for j in range(0, n):\n        if i == j:\n            continue\n        if last_3_chars[i] == last_3_chars[j]:\n            print(\"yes\")\n            break\n    if last_3_chars[i]!= last_3_chars[j]:\n        print(\"no\")\n        break\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nAACC\\nM\\nACM\\nAA\\nA\\n\") == \"1 4\\nM\\nA\\nAA\\nACM\\nACM\\n\"\nassert solution(\"3\\nACM\\nACM\\nACA\\nAMA\\n\") == \"impossible\"\nassert solution(\"1\\nAM\\nMA\\n\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n\") == \"1 4\"\nassert solution(\"3\\nACMA\\nACM\\nACA\\nAMA\\n\") == \"impossible\"\nassert solution(\"1\\nAM\\nMA\\n\") == \"impossible\"\n\"\"\"\n\nimport sys\n\nfrom typing import List, Set\n\nEXAMPLE_INPUT1 = \"\"\"5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\"\"\"\n\nEXAMPLE_INPUT2 = \"\"\"3\nACMA\nACM\nACA\nAMA\n\"\"\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nAC\\nCM\\nAC\\nAA\\nA\\n\") == '1 4\\nAC\\nMM\\nA\\nAA\\nAC\\nACMAA'\nassert solution(\"3\\nACM\\nACM\\nACA\\nAMA\") == 'impossible'\nassert solution(\"1\\nAM\\nMA\") == 'impossible'\n\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\nAACCMMAA') == '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA'\nassert solution('3\\nACMA\\nACM\\nACA\\nAMA') == 'impossible'\nassert solution('1\\nAM\\nMA') == 'impossible'\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\ngenotype = input()\nc = Counter(genotype)\n\nm_count = c['M']\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\") == \"1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\"\nassert solution(\"3\\nACMA\\nACM\\nACA\\nAMA\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\n\"\"\") == \"\"\"1 4\nMM\nA\nAA\nACA\nACMAA\"\"\"\n\n\"\"\"\nInput\n4\nAB\nBA\nABC\nABC\nOutput\n2 2\nAB\nBA\nABC\nABC\n\"\"\"\n\n\"\"\"\nInput\n1\nAB\nBA\nSample Output\nimpossible\n\"\"\"\n\n\"\"\"\nInput\n1\nA\nA\nSample Output\nimpossible\n\"\"\"\n\n\"\"\"\nInput\n1\nA\nA\nSample Output\nimpossible\n\"\"\"\n\n\"\"\"\nInput\n4\nABCDE\nBCDE\nDEFG\nEFGH\nFG\nG\nH\nI\nJ\nK\nSample Output\n2 1\nG\nH\nG\nABCDE\nBCDE\nEFGH\nEFGH\nFG\nG\nH\nG\nABCDE\nBCDE\nH\nH\nI\nJ\nK\nABCDE\nBCDE\nIJKL\nIJKL\nK\nK\nSample Output 2\n4 4\nABCDE\nBCDE\nDEFG\nEFGH\nFG\nG\nABCDE\nBCDE\nDEFG\nEFGH\nFG\nG\nABCDE\nBCDE\nIJKL\nIJKL\nK\nK\n\"\"\"\n\n\"\"\"\nInput\n4\nABC\nBCD\nDEF\nGHI\nJKL\nMNO\nPQRS\nTUV\nWXYZ\nSample Output\n2 1\nJKL\nGHI\nPQRS\nABC\nBCD\nDEF\nGHI\nMNO\nPQRS\nTUV\nWXYZ\n\"\"\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\") == \"1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\"\n\"\"\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n\") == \"1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\"\nassert solution(\"3\\nACMA\\nACM\\nACA\\nAMA\\n\") == \"impossible\"\nassert solution(\"1\\nAM\\nMA\\n\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\nAC\\nCA\\nA\\nM\\nM') == '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA'\nassert solution('3\\nAC\\nCA\\nA\\nM\\n') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n\") == \"1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\"\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\n\"\"\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4 1\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3') == '18.9029850746'\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2') == '124'\n\"\"\"\n\nn, r, m = list(map(int, stdin.split('\\n')[:3]))\na = []\nfor i in range(m):\n    a.append(list(map(int, stdin.split('\\n')[3 + i].split())))\na.sort(key=lambda x: x[0])\nprint(a)\nprint(n, r, m)\nt = 0\npt = 0\nfor i in range(m):\n    if a[i][0] > t:\n        pt += 1\n    t += a[i][1]\n    if pt >= n:\n        break\n    if i < m - 1:\n        t += a[i+1][0] - a[i][0]\nprint(t)\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 111 5\") == \"124\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\\n\") == \"3\"\n\"\"\"\n\nimport numpy as np\nimport random\nimport string\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\nassert solution('1 0.5 5') == '3.5'\nassert solution('1 0.5 5') == '3.5'\nassert solution('1 0.5 5') == '3.5'\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\n\"\"\"\n\nimport sys\n\nn, r, m = [int(i) for i in input().split()]\ntricks = []\nfor _ in range(m):\n    t, p, d = [int(i) for i in input().split()]\n    tricks.append((t, p, d))\n\ntricks.sort(key=lambda x: x[0])\n\nt, p, d = tricks[0]\n\nexpected = r\n\nfor t, p, d in tricks[1:]:\n    expected += d * p\n    expected -= d * (1 - p)\n\nprint(expected)\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\\n\") == \"3\"\nassert solution(\"10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3\") == \"18.9029850746\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\") == \"3\"\nassert solution(\"10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3\") == \"18.9029850746\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 1\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3') == '18.9029850746'\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 5\n6 2\n1 9\n7 5\n''') == '2 9 1'\n\"\"\""
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n2 1 2') == '2 1 2'\nassert solution('2 1\\n1') == '1'\nassert solution('5 22\\n4 3 4 2') == '4 3 4 2'\n\nprint('Success')\n\n\"\"\"\n\nimport unittest\nfrom typing import List\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(print())\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"2 1 2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"5 22\") == \"4 3 4 2\"\n\"\"\""
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n2 1 2\") == \"2 1 2\"\n\"\"\"\n\n\"\"\"\nSOLUTION\n\"\"\"\n\nn, k = [int(x) for x in stdin.split()]\n\n\"\"\"\nThe following function takes in a sequence of n-1 integers (where n is a multiple of n) and returns the largest number of the sequence that is not a multiple of n. If n is 0, the function returns 0.\n\"\"\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n') == '2 1 2'\nassert solution('2 1\\n') == '1'\nassert solution('5 22\\n') == '4 3 4 2'\n\"\"\"\n\n\"\"\"\nApproach:\nThe first digit of the first sequence is always equal to 1, and the rest are zeroes.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3\n''') == '2 1 2'\n\nassert solution('''2 1\n''') == '1'\n\nassert solution('''5 22\n''') == '4 3 4 2'\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n2 1 2\") == \"2 1 2\"\nassert solution(\"2 1\\n1\") == \"1\"\nassert solution(\"5 22\\n4 3 4 2\") == \"4 3 4 2\"\n\"\"\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n2 1 2\\n\") == \"2 1 2\"\n\"\"\""
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n') == '2 1 2'\nassert solution('2 1\\n') == '1'\nassert solution('5 22\\n') == '4 3 4 2'\n\"\"\""
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n7 2\\n3 4\") == \"0\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 4\n1 2\n1 3\n3 4\n2 4''') == '2'\nassert solution('''7 6\n1 2\n2 3\n2 5\n6 3\n7 2\n3 4''') == '2'\nassert solution('''7 5\n1 2\n2 3\n3 4\n5 6\n6 7\n''') == '0'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == 2\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == 2\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n7 2\\n3 4\") == 0\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(samples.split('\\n')) == solutions.strip()\nprint(solutions)"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n1 2\") == \"2\"\nassert solution(\"4 4\\n1 2\\n1 3\\n3 4\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\n\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\") == \"0\""
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n7 2\\n3 4\") == \"0\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n') == '2'\nassert solution('7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\\n') == '0'"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\\n\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\\n\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n\") == \"0\"\n\n\"\"\"\n\nfrom sys import stdin\n\nn, m = map(int, stdin.readline().split())\nroads = []\nfor i in range(m):\n    roads.append(list(map(int, stdin.readline().split())))\n\nfor i in range(m):\n    roads.sort(key=lambda x: x[1])"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1\\n2') == '1'\nassert solution('4\\n1\\n2\\n3\\n4') == '2'\nassert solution('4\\n2\\n3\\n4\\n1') == '2'\nassert solution('2\\n2\\n2') == '0'\nassert solution('7\\n6\\n3\\n7\\n2\\n4\\n5') == '2'\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n\") == \"0\""
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == \"20.0\"\nassert solution(\"-10 10\\n10.00 1.00\") == \"3.14159265\"\n\"\"\"\n\nfrom math import *"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == \"20.0\"\nassert solution(\"-10 10\\n10.00 1.00\") == \"3.14159265\"\nassert solution(\"0 20\\n1.00 0.10\") == \"28.26445910\"\n\"\"\"\n\nx, y = map(int, input().split())\nv, w = map(float, input().split())\n\nprint(round(abs(x) + abs(y) / v, 3))\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20 0\\n1.00 0.10') == '20.0'\nassert solution('-10 10\\n10.00 1.00') == '3.14159265'\nassert solution('0 20\\n1.00 0.10') == '28.26445910'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == \"20.0\"\nassert solution(\"-10 10\\n10.00 1.00\") == \"3.14159265\"\nassert solution(\"0 20\\n1.00 0.10\") == \"28.26445910\"\n\n\"\"\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == \"20.0\"\nassert solution(\"-10 10\\n10.00 1.00\") == \"3.14159265\"\nassert solution(\"0 20\\n1.00 0.10\") == \"28.264462\"\n\"\"\"\n\nx, y = map(float, input().split())\nv, w = map(float, input().split())\nprint(abs(x) + abs(y))"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20 0\\n1.00 0.10') == '20.00000000'\nassert solution('-10 10\\n10.00 1.00') == '3.14159265'\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20 0\\n1.00 0.10') == '20.0'\nassert solution('-10 10\\n10.00 1.00') == '3.14159265'\n\"\"\"\n\nfrom math import sqrt, pi\nfrom decimal import Decimal\n\nx, y = [int(n) for n in stdin.split(' ')]\n\nv, w = [Decimal(n) for n in stdin.split(' ')]\n\nm = (sqrt(v**2 + w**2))\n\ntime = abs((Decimal(y) - Decimal(x)) / m)\n\ntime = Decimal(time * 3600)\n\nprint(time.quantize(Decimal('.0001')))\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''20 0\n1.00 0.10''') == '20.00000000'\n\nassert solution('''-10 10\n10.00 1.00''') == '3.14159265'\n\nassert solution('''0 20\n1.00 0.10''') == '28.26445910'\n\nprint('Success')"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20 0\\n1.00 0.10') == '20.0'\nassert solution('-10 10\\n10.0 1.0') == '3.14159265'\nassert solution('0 20\\n1.00 0.10') == '28.26445910'\n\"\"\"\nfrom math import acos, pi\n\nx, y = map(int, input().split())\nv, w = map(float, input().split())"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20 0\\n1.00 0.10') == '20.00000000'\n\"\"\""
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 100\\n1 100\\n4 70\\n3 70') == '170'\nassert solution('4 100\\n1 100\\n4 70\\n3 70') == '150'\nassert solution('3 100\\n2 120\\n3 50\\n2 80') == '150'\n\"\"\""
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\") == \"170\"\nassert solution(\"3\\n2 120\\n3 50\\n2 80\") == \"150\"\n\n\"\"\""
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 100') == '170'\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\") == 170\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\") == \"170\"\nassert solution(\"3\\n2 120\\n3 50\\n2 80\") == \"150\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 100\\n1 100\\n4 70\\n3 70\") == \"170\"\nassert solution(\"3 120\\n2 80\\n3 50\") == \"150\"\n\"\"\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 100\\n1 100\\n4 70\\n3 70') == '170'\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 100\\n1 100\\n4 70\\n3 70') == '170'\n\nassert solution('3 120\\n2 50\\n3 50') == '150'\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 100\\n1 100\\n4 70\\n3 70\") == \"170\"\nassert solution(\"3 120\\n2 50\\n3 50\") == \"150\"\n\"\"\""
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == 2\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\") == 5\n\n\"\"\"\nimport sys\nfrom math import log2, ceil\n\nfrom utils import (\n    inp,\n    out,\n    sieve_prime,\n    prime_factors,\n    \n    get_divisors,\n    prime_divisors,\n    \n    primes,\n    \n    expo,\n    mod_expo,\n)\n\n\"\"\"\nPrimality Testing\n\"\"\"\ninp_str = inp()\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == 2\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\") == 5"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == 2\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n2 4\\n') == '2'\nassert solution('6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\\n') == '5'\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == \"2\"\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\") == \"5\"\n\n\"\"\"\nfrom math import inf"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2\\n1 3\\n2 3') == '2'\nassert solution('2 2\\n1 2\\n2 1') == '1'\nassert solution('4 3\\n1 2\\n1 3\\n2 4') == '3'\nassert solution('3 3\\n1 2\\n1 3\\n2 3') == '2'\nassert solution('5 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6') == '5'\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\\n\") == \"2\"\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\\n\") == \"5\"\n\"\"\"\n\nimport sys\nfrom typing import List, Dict\n\n\nclass Graph:\n    \"\"\"\n    Class of the graph\n    \"\"\"\n    def __init__(self, n_vertices: int) -> None:\n        \"\"\"\n        Initialize the graph with the number of vertices.\n        \"\"\"\n        self.n_vertices = n_vertices\n        self.graph: Dict[int, List[int]] = {}\n        self.edges: List[int] = []\n\n    def add_edge(self, u: int, v: int) -> None:\n        \"\"\"\n        Add an edge to the graph.\n        \"\"\"\n        self.graph[u].append(v)\n        self.edges.append([u, v])\n\n    def is_simple_path(self, path: List[int], visited: Dict[int, bool]) -> bool:\n        \"\"\"\n        Check if the path is simple.\n        \"\"\"\n        if len(path) == 2:\n            if path[0] == 1 and path[1] == 1:\n                return True\n\n        for v in path[1:]:\n            if v in self.graph[path[0]]:\n                if v in visited:\n                    return False\n                else:\n                    visited[v] = True\n            else:\n                return False\n        return True\n\n    def get_longest_path(self, path: List[int], visited: Dict[int, bool], longest_path: int) -> None:\n        \"\"\"\n        Get the longest path.\n        \"\"\"\n        if len(path) > longest_path:\n            longest_path = len(path)\n        for v in self.graph[path[-1]]:\n            if v not in visited:\n                new_path = path + [v]\n                if self.is_simple_path(new_path, visited):\n                    self.get_longest_path(new_path, visited, longest_path)\n\n    def get_longest_simple_path(self) -> int:\n        \"\"\"\n        Get the longest simple path.\n        \"\"\"\n        visited: Dict[int, bool] = {i: False for i in range(1, self.n_vertices + 1)}\n        longest_path: int = 1\n        self.get_longest_path([1], visited, longest_path)\n        return longest_path\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n2 4\\n') == '2'\nassert solution('6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\\n') == '5'\nassert solution('7 7\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\\n6 7\\n') == '7'\nassert solution('12 1\\n1 2\\n2 3\\n3 4\\n3 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n9 11\\n11 12\\n') == '12'\nassert solution('7 2\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n') == '7'\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n1 2\n1 3\n2 4\n''') == 2\nassert solution('''\n6 6\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\n''') == 5\n\n\"\"\"\nimport sys\nfrom collections import deque, namedtuple\n\nNode = namedtuple('Node', ['index', 'children', 'visited'])\n\n\nclass Graph:\n    def __init__(self, n_nodes: int, n_edges: int):\n        self.n_nodes = n_nodes\n        self.n_edges = n_edges\n        self.root = 1\n        self.nodes = [Node(i, [], False) for i in range(1, n_nodes + 1)]\n        self.edges = dict()\n        for i in range(n_edges):\n            edge = sys.stdin.readline()\n            start, end = map(int, edge.split(' '))\n            if start not in self.edges:\n                self.edges[start] = [end]\n            else:\n                self.edges[start].append(end)\n            if end not in self.edges:\n                self.edges[end] = [start]\n            else:\n                self.edges[end].append(start)\n\n    def dfs(self, node: Node):\n        node.children.append(self.nodes[self.root])\n        if node.index not in self.edges or self.nodes[self.root] not in self.edges[node.index]:\n            node.visited = True\n            return node\n        for child in self.edges[node.index]:\n            if child == self.nodes[self.root]:\n                continue\n            child_node = Node(child, [], False)\n            node.children.append(child_node)\n            dfs_node = self.dfs(child_node)\n            if dfs_node.visited:\n                node.visited = True\n                break\n        return node\n\n    def longest_path(self) -> int:\n        if self.n_nodes == 1:\n            return 1\n        self.dfs(self.nodes[self.root])\n        max_length = 0\n        for node in self.nodes:\n            if not node.visited:\n                if len(node.children) > max_length:\n                    max_length = len(node.children)\n        return max_length\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == \"2\"\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\") == \"5\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n\") == \"0.5\"\nassert solution(\"8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n\") == \"0.0446429\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0') == '0.5'\nassert solution('8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0') == '0.0446429'\n\"\"\"\n\nfrom math import factorial\nfrom itertools import product\nimport sys\nimport random"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\") == \"0.5\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\\n1 0') == '0.5'\nassert solution('8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0') == '0.0446429'\n\nprint(solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\\n1 0'), '0.5')\nprint(solution('8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0'), '0.0446429')\n\n\"\"\"\n\nimport networkx as nx\nimport random\nfrom math import exp"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\\n1 0\\n1 0\") == '0.5'\n\"\"\"\n\nfrom math import factorial, comb\nfrom typing import List\nfrom collections import defaultdict\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0') == '0.5'\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\") == \"0.5\"\nassert solution(\"8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0\") == \"0.0446429\"\n\"\"\"\n\n\n\"\"\"\n    Takeaways:\n    - can use a single array of size 2 * n to store the numbers on the sides of the nodes\n    - use the two ways of getting the neighbours on the sides of a node to build a graph\n\"\"\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\") == \"0.5\"\nassert solution(\"8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\") == \"0.0446429\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1\\n0\\n2 1 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\") == \"0.5\"\nassert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\") == \"0.5\"\nassert solution(\"8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\") == \"0.0446429\"\nassert solution(\"8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\") == \"0.0446429\"\nassert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\") == \"0.5\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2\\n1 2 3\\n0 1\\n0 0\\n0 1\\n0 1\\n0 1\\n0 0\\n') == '0.77778'\nassert solution('5\\n3\\n1 3 0 2\\n2 1\\n2 0\\n1 3\\n2 3\\n0 0\\n') == '0.14286'\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n6\n1 2 3 3 2 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\n1 2 1 2\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n4\n1 2 2 1\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n5\n1 2 2 2 1\n\"\"\") == \"2\"\n\n\"\"\"\nIt can be seen that the list of instructions given is a list of tuples. The tuples are the instructions where the first element is the range on which the tape piece should be placed, and the second element is the color of the piece. The instructions are given in the order they should be executed.\n\nSuppose we have $n$ instructions, $i$ of them for each color. Let $p_i$ be the probability that the $i$th instruction is a forgery. If $p_i \\le 0.5$, then she is able to have the piece of tape with color $c_i$. If $p_i > 0.5$, then she is able to have a forgery for color $c_i$.\n\nLet $n$ be the number of different colors of tape.\n\nLet $c_i$ be the number of different colors that appear in the $i$th instruction.\n\nThe probability that the piece of tape is a forgery is $p_i$. Since $n$ is large, $p_i \\le 0.5$.\n\nThe probability that the piece of tape is not a forgery is $1 - p_i$. Since $n$ is large, $1 - p_i \\le 0.5$.\n\nThe probability that a particular color is a forgery is the probability that the piece of tape is a forgery, divided by the probability that the piece of tape is not a forgery.\n\nSince the probability that the piece of tape is a forgery is the product of all the probabilities for a particular color that it is a forgery, and the probability that the piece of tape is not a forgery is the product of all the probabilities for a particular color that it is not a forgery, the probability that a particular color is a forgery is the product of all the probabilities for a particular color.\n\nAssume that the probability that the piece of tape is not a forgery is $1 - p_i$.\n\nThe probability that a particular color is a forgery is the product of all the probabilities for a particular color that it is a forgery, divided by $1 - p_i$.\n\nAssume that the probability that the piece of tape is a forgery is $p_i$.\n\nThe probability that a particular color is a forgery is the product of all the probabilities for a particular color that it is not a forgery, times $1 - p_i$.\n\nAssume that the probability that the piece of tape is not a forgery is $1 - p_i$.\n\nThe probability that a particular color is a forgery is the product of all the probabilities for a particular color that it is not a forgery, times $1 - p_i$.\n\nAssume that the probability that the piece of tape is not a forgery is $1 - p_i$.\n\nThe probability that a particular color is a forgery is the product of all the probabilities for a particular color that it is a forgery, times $1 - p_i$.\n\nAssume that the probability that the piece of tape is a forgery is $p_i$.\n\nThe probability that a particular color is a forgery is the product of all the probabilities for a particular color that it is not a forgery, times $p_i$.\n\nAssume that the probability that the piece of tape is not a forgery is $p_i$.\n\nThe probability that a particular color is a forgery is the product of all the probabilities for a particular color that it is not a forgery, times $p_i$.\n\nAssume that the probability that the piece of tape is not a forgery is $p_i$.\n\nThe probability that a particular color is a forgery is the product of all the probabilities for a particular color that it is a forgery, times $p_i$.\n\nAssume that the probability that the piece of tape is not a forgery is $1 - p_i$.\n\nThe probability that a particular color is a forgery is the product of all the probabilities for a particular color that it is not a forgery, times $1 - p_i$.\n\nAssume that the probability that the piece of tape is a forgery is $1 - p_i$.\n\nThe probability that a particular color is a forgery is the product of all the probabilities for a particular color that it is not a forgery, times $1 - p_i$.\n\nAssume that the probability that the piece of tape is a forgery is $p_i$.\n\nThe probability that a particular color is a forgery is the product of all the probabilities for a particular color that it is a forgery, times $1 - p_i$.\n\nLet $q_i$ be the probability that the $i$th instruction is a forgery.\n\nLet $c_i$ be the number of different colors that appear in the $i$th instruction.\n\nThe probability that the piece of tape is a forgery is $1 - q_i$.\n\nThe probability that the piece of tape is not a forgery is $q_i$.\n\nThe probability that the piece of tape is not a forgery is the product of all the probabilities for a particular color that it is not a forgery, times $1 - q_i$.\n\nLet $n$ be the number of different colors of tape.\n\nLet $c_i$ be the number of different colors that appear in the $i$th instruction.\n\nThe probability that the piece of tape is a forgery is $q_i$.\n\nThe probability that the piece of tape is not a forgery is the product of all the probabilities for a particular color that it is not a forgery, times $q_i$.\n\nAssume that the probability that the piece of tape is a forgery is $1 - q_i$.\n\nThe probability that the piece of tape is not a forgery is $q_i$.\n\nThe probability that the piece of tape is not a forgery is the product of all the probabilities for a particular color that it is not a forgery, times $1 - q_i$.\n\nThe probability that the piece of tape is a forgery is $1 - q_i$.\n\nThe probability that the piece of tape is not a forgery is the product of all"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    6\n    1 2 3 3 2 1\n    \"\"\") == \"\"\"\n    3\n    1 6 1\n    2 5 2\n    3 4 3\n    \"\"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 1 2') == 'IMPOSSIBLE'\nassert solution('7\\n1 2 3 3 2 1') == '3\\n1 6 1'\nassert solution('7\\n1 2 3 2 1') == '2\\n1 5 1'\nassert solution('8\\n1 2 1 2 1 1') == '3\\n1 6 1'\nassert solution('8\\n1 1 2 2 1 1') == '2\\n1 5 1'\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"IMPOSSIBLE\"\n\nassert solution(\"6\\n1 2 3 3 2 1\") == \"3\\n1 6 1\"\n\nassert solution(\"6\\n1 2 3 3 2 1\") == \"3\\n1 6 1\"\n\nassert solution(\"6\\n1 2 3 3 2 1\") == \"3\\n1 6 1\"\n\nassert solution(\"6\\n1 2 3 3 2 1\") == \"3\\n1 6 1\""
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n1 2 3 3 2 1') == '3\\n1 6 1'\n\"\"\"\n\n\"\"\"\nSolution:\n\nLet's create a dictionary that will store all the possible locations and lengths of each piece of tape. Then we can go through each line of the input and try to find the correct number of instructions.\n\nWe'll use a dictionary to store the length of each piece of tape. If the length of a piece of tape is in our dictionary, then we can use the length to figure out where the tape can be placed.\n\nOnce we have all the possible lengths for each piece of tape, we'll search for the longest one and place it in the correct position.\n\nThe result is written to stdout.\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\ntape = dict()\n\nfor _ in range(n):\n    color, length = map(int, sys.stdin.readline().split())\n    tape[color] = tape.get(color, 0) + length\n\nresult = []\n\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        if i + j <= n:\n            l = i\n            r = j\n            color = tape[i]\n            if l + r + color <= n:\n                result.append(l + r + color)"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\\n1 2 1\") == \"1 3 1\\n2 2 2\"\nassert solution(\"3\\n1 2 3\\n2 1 2\") == \"1 3 2\\n2 1 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1 2 3 3 2 1') == '3\\n1 6 1'\nassert solution('4\\n1 2 1 2') == 'IMPOSSIBLE'\nassert solution('7\\n1 3 3 2 3 2 1') == '5\\n1 4 1\\n2 6 2\\n3 7 3'\n\n---\nRaelynn is trying to learn the newest craze in modern art: Tape Art! This wonderful new type of art is created by taking a wooden plank and pieces of tape of different colors. Each artwork is constructed by taking multiple pieces of tape and placing them on the plank. For each color that appears in the artwork, only a single piece of tape is used. Tapes can be placed on top of each other in which case the tape placed last obscures already placed pieces of tape with which it overlaps. \n\nRaelynn has decided the best way to learn is by copying Sheila, the world-famous tape artist. Unfortunately those pieces of art are under lock and key and Raelynn can see only pictures of these marvels. Since Raelynn is having trouble reverse engineering the artwork from the picture, she has hired you to create a set of instructions with which she can copy the art.\n\nSince Raelynn is spoiled by the ease of IKEA catalogs she requires instructions to be given in the following format: there should only be one instruction per color of tape and instructions should be given in the order they should be executed.\n\n-----Input-----\nThe input consists of a single test case. The first line of this test case contains one integer $n$ ($1 \\le n \\le 10^5$), where $n$ is the length of the tape art in inches. The next line contains $n$ integers $c_ i$ ($1 \\le c_ i \\le n$) representing the color of one inch of the plank. Planks are divided into $n$ $1$-inch sections numbered $1$ through $n$.\n\n-----Output-----\nOutput any set of instructions that, when executed, will result in the tape art given by the input. The set of instructions should start with the number of instructions that follow. Each instruction must consist of three numbers: $l$$r$ $c$ where $[l, r]$ represents the inclusive range on which the tape should be placed and $c$ represents the color of the tape piece.\n\nOutput the string \u201cIMPOSSIBLE\u201d if the piece of tape art cannot be reconstructed using only one piece of each color (Sheila must have broken the rules to make it or this piece is a forgery).\n\n-----Examples-----\nSample Input 1:\n6\n1 2 3 3 2 1\nSample Output 1:\n3\n1 6 1\n2 5 2\n3 4 3\n\nSample Input 2:\n4\n1 2 1 2\nSample Output 2:\nIMPOSSIBLE\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 2 3 3 2 1\") == \"3\\n1 6 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n1 2 3 3 2 1') == '3\\n1 6 1'\nassert solution('4\\n1 2 1 2') == 'IMPOSSIBLE'\n\nassert solution('6\\n1 2 3 3 2 1') == '3\\n1 6 1'\nassert solution('4\\n1 2 1 2') == 'IMPOSSIBLE'\n\nassert solution('6\\n1 2 3 3 2 1') == '3\\n1 6 1'\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 3 2 1\") == \"3\\n1 6 1\"\nassert solution(\"1 2 1 2\") == \"IMPOSSIBLE\"\nassert solution(\"1 2 1 2 3 1\") == \"IMPOSSIBLE\"\nassert solution(\"1 2 1 2 3 3 1 2 1 1 1 1 1 1 1 1 1 1\") == \"IMPOSSIBLE\"\nassert solution(\"1 2 1 2 1 2\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2\\n1 100\\n1 1') == '1 2 100'\nassert solution('2\\n5 10 20 30 40 50\\n2 28 27') == '10 20 28 27 30 40 50'\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n1 100\\n1 1\\n\") == \"1 2 100\\n\"\nassert solution(\"2\\n5 10 20 30 40 50\\n2 28 27\\n\") == \"10 20 28 27 30 40 50\\n\"\n\"\"\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 100\\n1 1') == '1 100'\n\"\"\""
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 1\\n2\\n2\\n\") == \"1 2\"\nassert solution(\"3\\n1 1\\n1 1\\n1 1\\n\") == \"1 1 1 1 1\"\nassert solution(\"3\\n10 20 30 40 50\\n2 28 27\\n\") == \"10 20 28 27 30 40 50\"\nassert solution(\"1\\n100\\n\") == \"100\""
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n1 100\") == \"1 2 100\"\n\"\"\"\n\nN = int(input())\nnums = [int(input()) for _ in range(N)]\n\nmin_num, max_num = min(nums), max(nums)\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n1 100\\n1 1\\n\") == \"1 2 100\\n\"\nprint('Hooray!')\nassert solution(\"2\\n5 10 20 30 40 50\\n2 28 27\\n\") == \"10 20 28 27 30 40 50\\n\"\nprint('Hooray again!')\n\"\"\""
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 1 2 3 4 5\\n3 1\") == \"1 2 3 4 5 1 3\"\n\na = '6\\n1 1 2 3 4 5\\n3 1'\nb = '1 2 3 4 5 1 3'\n\nprint(solution(a))\nprint(solution(b))\n\nassert solution(a) == b\nassert solution(b) == a"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2\n1 100\n1 1''') == '1 2 100'\nassert solution('''2\n5 10 20 30 40 50\n2 28 27''') == '10 20 28 27 30 40 50'\nassert solution('''3\n5 10 20 30 40 50\n2 28 27''') == '10 20 28 27 30 40 50'\n\n'''\n5 10 20 30 40 50\n2 28 27\n\n5 10 20 30 40 50\n2 28 27\n\n3\n1 2\n1 100\n1 1\n'''"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5 10 20 30 40 50\\n2 28 27\") == \"10 20 28 27 30 40 50\"\nassert solution(\"3\\n1 2\\n1 100\\n1 1\") == \"1 2 100\"\n\"\"\""
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n1 2\n1 100\n1 1\n\"\"\") == \"1 2 100\"\n\nassert solution(\"\"\"2\n5 10 20 30 40 50\n2 28 27\n\"\"\") == \"10 20 28 27 30 40 50\"\n\n\"\"\"\nSolution:\n\n1. Solve problem as a knapsack problem.\n2. Optimize solution using Greedy algorithm.\n3. Optimize solution using Dynamic Programming (DP)\n\nDP:\nDP(n) = max{DP(n-1), DP(n-1) + 1 + cost}\n\nGreedy:\nGreedy(n) = max{DP(n-1), DP(n-1) + 1 + cost}\n\n\"\"\"\n\nimport heapq\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''0''') == '''2600'''\nassert solution('''3\nAB 1 1\nAC 2 1\nBC 2 1''') == '''506'''\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0\\n1\\n2\\n1\\n1\\n\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''0\nAB 1 1\nAC 2 1\nBC 2 1''') == '506'\nprint('Test pass.')\n\nassert solution('''0\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1''') == '2'\nprint('Test pass.')\n\nassert solution('''0\nAB 1 1\nAC 2 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nAC 2 1\nBC 2 1\nAB 1 1\n\nAC 2 1\nBC 2 1\nAB 1 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nBC 2 1\nAB 1 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1''') == '0'\nprint('Test pass.')\n\nassert solution('''0\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nAC 2 1\nBC 2 1\nAB 1 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nBC 2 1\nAC 2 1\nAB 1 1\n\nAB 1 1\nAC 2 1\nBC 2 1\n\nAC 2 1\nAB 1 1\nBC 2 1"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n1\nAB 1 1\nAC 2 1\nBC 2 1\n\"\"\"\n) == '506'\nassert solution(\n\"\"\"\n3\nAB 1 1\nAC 2 1\nBC 2 1\n\"\"\"\n) == '0'\nassert solution(\n\"\"\"\n3\nAB 1 1\nAC 2 1\nAB 1 1\n\"\"\"\n) == '2600'\nassert solution(\n\"\"\"\n0\n\"\"\"\n) == '2600'\nassert solution(\n\"\"\"\n2\nAB 1 1\nAC 2 1\nBC 2 1\n\"\"\"\n) == '0'\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0\") == \"2600\"\n\"\"\""
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nprint(solution('1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('2\\n2\\n'))\nprint(solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n'))\nprint(solution('3\\nAC 1 1\\nAC 2 1\\nBC 2 1\\n'))\nprint(solution('3\\nAB 1 1\\nAB 2 1\\nAB 3 1\\n'))\nprint(solution('3\\nAB 1 1\\nAB 2 1\\nAB 3 1\\nAC 1 1\\nAC 2 1\\nAC 3 1\\nBC 1 1\\nBC 2 1\\nBC 3 1\\n'))\nprint(solution('4\\nAB 1 1\\nAB 2 1\\nAC 1 1\\nAC 2 1\\nBC 1 1\\nBC 2 1\\nBC 3 1\\nBC 4 1\\n'))\nprint(solution('4\\nAB 1 1\\nAB 2 1\\nAB 3 1\\nAC 1 1\\nAC 2 1\\nAC 3 1\\nAC 4 1\\nBC 1 1\\nBC 2 1\\nBC 3 1\\nBC 4 1\\n'))\n\n-----Explanation-----\nSample Input 1:\nThe investigation reveals that the spies are in the same hand, so there are no solutions.\n\nSample Output 1:\n2600\n\nSample Input 2:\nThere are three investigations:\n\nAB 1 1: There are 2 solutions: A and B.\nAC 2 1: There are 2 solutions: A and C.\nBC 2 1: There are 2 solutions: B and C.\nSample Output 2:\n506\n\nSample Input 3:\nThere are four investigations:\n\nAB 1 1: There are 2 solutions: A and B.\nAC 2 1: There are 2 solutions: A and C.\nBC 2 1: There are 2 solutions: B and C.\nAC 1 1: There are 2 solutions: A and C.\nSample Output 3:\n100\n\nSample Input 4:\nThere are four investigations:\n\nAB 1 1: There are 2 solutions: A and B.\nAC 2 1: There are 2 solutions: A and C.\nBC 2 1: There are 2 solutions: B and C.\nAC 1 1: There are 2 solutions: A and C.\nAC 2 1: There are 2 solutions: A and C.\nBC 2 1: There are 2 solutions: B and C.\nSample Output 4:\n110\n\nSample Input 5:\nThere are five investigations:\n\nAB 1 1: There are 4 solutions: A, B, C, and D.\nAC 2 1: There are 2 solutions: A and C.\nBC 2 1: There are 2 solutions: B and C.\nAC 1 1: There are 2 solutions: A and C.\nBC 2 1: There are 2 solutions: B and C.\nBC 3 1: There are 2 solutions: B and C.\nBC 4 1: There are 2 solutions: B and C.\nSample Output 5:\n312\n\"\"\""
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\\n2\\n2\\n1\\n1\\n1\\n\") == \"35\"\nassert solution(\"0\\n2\\n0\\n2\\n0\\n0\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n0\\n0\\n1\\n0\\n1\\n1\\n0\\n2\\n2\\n2\\n0\\n0\\n0\\n2\\n1\\n0\\n0\\n0\\n0\\n1\\n0\\n1\\n1\\n0\\n0\\n0\\n1\\n1\\n0\\n0\\n0\\n1\\n0\\n2\\n0\\n1\\n2\\n0\\n0\\n2\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n2\\n2\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n2\\n2\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0\") == \"2600\"\nassert solution(\"3\\nAB 1 1\\nAC 2 1\\nBC 2 1\") == \"506\"\n\n\"\"\""
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nAB 1 1\\nAC 2 1\\nBC 2 1\") == \"506\"\nassert solution(\"3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\nCA 3 1\") == \"2600\"\n\"\"\"\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('0 1 1 1 1') == '2'\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\nassert solution(\"))))))(((((\") == \"impossible\"\nassert solution(\"())(\") == \"possible\"\nassert solution(\"()))))(((((((((((((\") == \"impossible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"()))\") == \"impossible\"\nassert solution(\"())\") == \"possible\"\n\"\"\""
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('())(') == 'possible'\nassert solution('()))(') == 'impossible'\nassert solution(')(') == 'impossible'\nassert solution('(()(') == 'possible'\nassert solution('(()())(') == 'possible'\n\n\"\"\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\nassert solution(\"(((\") == \"possible\"\nassert solution(\"))))))(((((\") == \"impossible\"\nassert solution(\"((()())(()()))(((((()))))\")) == \"possible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\n\nprint(solution(\"()))\"))\n\nassert solution(\"()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('()))') == 'possible'\nassert solution(')))(') == 'impossible'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"))(\") == \"impossible\"\nassert solution(\"())(\") == \"possible\"\n\nassert solution(\"(())(\") == \"possible\"\nassert solution(\"((()())()\") == \"possible\"\n\nassert solution(\"(((()())(())()))(\") == \"possible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"()))\") == \"impossible\"\nassert solution(\"()))()\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\nassert solution(\"()))))(((((((((((((((((())))))))))))))))))\") == \"impossible\"\nassert solution(\"()()((()))(((((((((((((((())))))()()))))))))((((((((((((((((((((()))))))))))))))))))))()()()())()(()()())())()(())(()()((()((((((((((((((((((((())))))))))))))))))))))))))()(()())())((()))()()(()((())())))((()))())()()((())((((())))(((((((((((((((((()))))))))))))))))))()))(()(((())((((())((((((((((((((((((((((((((())))))))))))))))))))))))))()))))))(()(((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))()))))))))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((((()"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\n\n\"\"\"\n\n\"\"\"\n\n\uccab \uc2dc\ub3c4\n\n\uc2dc\uac04\ucd08\uacfc\n\n\uccab \uc2dc\ub3c4\uc774\uba74 \uc9d1\uc5d0 \uc548\uac00\ub294 \ubc29\ubc95\uc73c\ub85c \uac00\ub2a5\ud55c \uc120\ud0dd\uc744 \uc9c4\ud589\ud574\uc57c \ud558\ub294\ub370,\n\uadf8\ub7ec\uba74 \uacc4\uc18d \uace0\uc0dd\ub418\uc5b4 \uc788\uc74c\n\n\uc6b0\uc120 \uc608\uc2dc \ubb38\uc81c\ub294 \uadf8\ub0e5 \uc785\ub825\uac12\uc744 \ubc1b\uc544\uc11c \uc21c\ud68c\ud558\ub294 \uac83\uc774 \uc88b\uc744\uac83 \uac19\uc544\uc11c \ucc98\uc74c \uc2dc\ub3c4\n\uc218\uc815\ud574\uc11c \uc2dc\uac04\uc744 \uac00\uc7a5 \uc904\uc5ec\uc57c\uaca0\ub2e4\uace0 \uc0dd\uac01\ud588\ub294\ub370,\n\ubb34\uc5b8\uac00\ub85c \uac1c\uc120\uc774 \ub420 \uc218 \uc788\ub2e4\ub294 \uac83\uc740 \uc54c\uaca0\uc9c0\ub9cc,\n\ubc18\ub840 \uc5c6\ub294 \ubb38\uc81c\ub77c\uace0 \uc0dd\uac01\ud574\uc11c \ud574\uacb0\uc744 \ud574\ub0b4\uc9c0 \ubabb\ud588\ub2e4.\n\n\uc544\ubb34\ud2bc \uc0dd\uac01\ud574\uc11c \ub0b4\uac00 \uc6d0\ud558\ub294 \uac83\uc740 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uac00 n\uc778 \ubb38\uc790\uc5f4\uc774 \uc8fc\uc5b4\uc84c\uc744 \ub54c\n\uac00\ub2a5\ud55c\uc9c0 \uc548 \uac00\ub2a5\ud55c\uc9c0 \uc5ec\ubd80\ub97c \uad6c\ud558\ub294 \uac83\uc774\uace0,\n\uadf8\ub807\uac8c \uad6c\ud558\ub294 \uac83\uc740 \uac1c\uc120\ud560 \uc218 \uc788\uc744\uc9c0 \ubab0\ub77c\uc11c \uc2dc\uac04\uc744 \ub2e8\ucd95\uc2dc\ud0b4\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n\") == \"1800\\n\"\n\"\"\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n') == '1800'\n\"\"\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\") == \"1800\"\nassert solution(\"2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\") == \"impossible\"\n\"\"\"\nfrom itertools import permutations"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400') == '1800'\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nN, M = [int(x) for x in sys.argv[1].split(' ')]\n\nstations = []\nfor i in range(M):\n    X, S, T, L = [int(x) for x in sys.stdin.readline().split(' ')]\n    stations.append((X, S, T, L))\n\nstations.sort()\n\nearliest_time = stations[0][1]\n\nfor i in range(1, M):\n    if stations[i][1] <= earliest_time:\n        earliest_time += stations[i][3]\n    else:\n        break"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400') == '1800'\nassert solution('2 2\\n1 1800 3600 1800\\n1 1900 3600 1600') == 'impossible'"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\") == \"1800\"\nassert solution(\"2 3\\n1 1800 3600 1800\\n1 1900 3600 1600\") == \"impossible\"\nassert solution(\"2 3\\n1 1800 3600 1800\\n1 1900 3600 1600\") == \"impossible\"\n\"\"\"\n\n\"\"\"\nLet's assume the timetable is a (probably enormous) table, stored in a string.\n\nFor each timetable:\n    1. convert it to a dictionary where key = time and value = set of trains at that time\n    2. sort the table according to time\n    3. iterate through the sorted table\n        1. if a certain train is going from X to Y at time, we can check if it's going to be delayed by 30 mins.\n            1.1. check if the scheduled time of the train - 30 is still in the table\n            1.2. if so, check if the train's departure time is earlier than the scheduled departure time\n            1.3. if so, then the train is not going to arrive to the destination in time, and we can return \"impossible\"\n        2. else, if the train is going from Y to X, we can check if the train's scheduled arrival time + 30 is still in the table\n            2.1. check if the scheduled arrival time of the train + 30 is still in the table\n            2.2. if so, check if the train's arrival time is earlier than the scheduled arrival time\n            2.3. if so, then the train is not going to leave in time, and we can return \"impossible\"\n        3. else, we can return the earliest time in the table.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\") == \"1800\"\n\nSample Input 3:\n2 3\n1 1800 3600 1800\n1 1900 3600 1600\n2 4\n1 1800 9400 1800\n1 1900 9400 1600\n1 2200 9400 1400\nSample Output 3:\nimpossible"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400''') == '1800'\nassert solution('''2 2\n1 1800 3600 1800\n1 1900 3600 1600''') == 'impossible'\n\nprint(solution(input()))\n'''\n\nn, m = [int(i) for i in input().split()]\narr = [[0]*4 for _ in range(m)]\nfor i in range(m):\n    a, s, t, l = map(int, input().split())\n    arr[i][0] = a\n    arr[i][1] = s\n    arr[i][2] = t\n    arr[i][3] = l"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1 1800 3600 1800\\n1 1900 3600 1600') == 'impossible'\n\nprint(solution(input()))\n\nprint(solution(sys.stdin.readline()))\n\n\"\"\""
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\\nA2-B3 B2-A3 A1-B1\\nA3-B1 B3-A1 A2-B2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1\\nA1-B3 A2-C1 B2-C2\\nA1-C2 A2-B3 B1-C1\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1\"\n\"\"\"\n\nn, m = list(map(int, stdin.split()))\nmatrix = [[0 for j in range(m)] for i in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        matrix[i][j] = (i + 1) * n + (j + 1)\n\nfor j in range(m):\n    print(*matrix[j])\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 3') == 'A1-B2 B1-C3 A2-C1 B2-C2'\nassert solution('2 3') == 'A1-B1 A2-C2 B2-C1'\nassert solution('2 2') == 'A1-B1 B2-C2'\nassert solution('1 2') == 'A1-B1'\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n') == \"A1-B2 B1-A2 A3-B3\\nA2-B3 B2-A3 A1-B1\\nA3-B1 B3-A1 A2-B2\\n\"\nassert solution('2 3\\n') == \"A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\n\"\n\n---"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\\nA2-B3 B2-A3 A1-B1\\nA3-B1 B3-A1 A2-B2\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1\"\n\"\"\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\\nA2-B3 B2-A3 A1-B1\\nA3-B1 B3-A1 A2-B2\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1\"\n\"\"\""
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n\n----\n3 2\n\nA1-B2 B1-A2 A3-B3\nA2-B3 B2-A3 A1-B1\nA3-B1 B3-A1 A2-B2\n\n3 3\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B2 B1-C1\n\n----\n2 3\n\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B2 B1-C1\n\n5 3\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B2 B1-C1\nA1-B3 A2-C1 B1-C2\nA1-C2 A2-B3 B1-C1\nA1-B4 A2-C2 B1-C2\nA1-C1 A2-B4 B2-C1\nA1-B5 A2-C1 B2-C2\nA1-C2 A2-B5 B1-C2\n\n----\n2 3\n\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B2 B1-C1\n\n5 3\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B2 B1-C1\nA1-B3 A2-C2 B1-C2\nA1-C1 A2-B3 B2-C1\nA1-B4 A2-C2 B2-C2\nA1-C2 A2-B4 B1-C2\nA1-B5 A2-C2 B1-C1\nA1-C2 A2-B5 B2-C1\n\n----\n2 3\n\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B2 B1-C1\n\n5 3\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B2 B1-C1\nA1-B3 A2-C2 B1-C2\nA1-C2 A2-B3 B2-C1\nA1-B4 A2-C2 B2-C2\nA1-C1 A2-B4 B1-C2\nA1-B5 A2-C2 B1-C1\nA1-C2 A2-B5 B2-C1\n\n----\n3 2\n\nA1-B2 B1-A2 A3-B3\nA2-B3 B2-A3 A1-B1\nA3-B1 B3-A1 A2-B2\n\n3 3\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B2 B1-C1\n\n3 3\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B2 B1-C1\n\n2 3\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\n\n3 3\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\n\n3 3\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\n\n3 3\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\n\n3 3\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\n\n3 3\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\n\n----\n3 3\n\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B2 B1-C1\n\n3 3\n\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B2 B1-C1\n\n3 3\n\nA1-B1 A"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\\nA2-B3 B2-A3 A1-B1\\nA3-B1 B3-A1 A2-B2\\n\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1\\n\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('3 2') == 'A1-B2 B1-A2 A3-B3'\nassert solution('3 2') == 'A1-B1 A2-C2 B2-C1'\nassert solution('2 3') == 'A1-B1 A2-C2 B2-C1'\nassert solution('2 3') == 'A1-B1 A2-C2 B2-C1'\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nN, M = map(int, sys.stdin.readline().strip().split())\n\nplayers = {}\n\nfor i in range(M):\n    for j in range(N):\n        players[i * N + j] = True\n\nsolution = []\n\nfor j in range(N):\n    for i in range(M - 1):\n        if (j * M + i) % N!= (j * M + (i + 1)) % N:\n            solution.append('{}-{}'.format(j * M + i, (j * M + (i + 1)) % N))\n\nsolution.sort()\n\nfor s in solution:\n    print(s)\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2') == 'A1-B2 B1-A2 A3-B3'\nassert solution('2 3') == 'A1-B1 A2-C2 B2-C1'\n\"\"\"\n\nfrom collections import defaultdict\n\nn, m = map(int, input().split())\n\nmatches = defaultdict(list)\n\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            continue\n        matches[i].append(j)\n\nfor i in range(m):\n    for j in range(m):\n        if i == j:\n            continue\n        for k in range(m):\n            if k == j:\n                continue\n            matches[i].append(k)\n            matches[j].append(k)\n\nfor i in range(n):\n    for j in matches[i]:\n        print(f\"{i}-{j}\", end=\" \")\n    print()\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\nassert solution(\"3 3\") == \"A1-B2 A2-C1 B1-C2\"\n\n\"\"\""
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('X.XX\\nX.X.') == 4\nassert solution('...\\n...') == 0\nassert solution('X..X\\nX..X\\nX.XX') == 2\nassert solution('X.XX\\nX.X.\\nX.X.') == 1\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n..\\n..\") == \"7\"\nassert solution(\"4 4\\nX.XX\\nX..X\\n..X.\\n..XX\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".XX.XX.XX.XX.\") == \"16\"\nassert solution(\"XXXXX\") == \"32\"\nassert solution(\"XXX.X.XXX.X.X\") == \"17\"\nassert solution(\"XXX.X.XX.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X\") == \"32\"\nassert solution
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 2\n..\n..''') == '7'\nassert solution('''4 4\nX.XX\nX..X\n..X.\n..XX''') == '9'\nassert solution('''2 2\n.XX\n..''') == '2'\nassert solution('''2 2\nXX\n..''') == '0'\nassert solution('''2 2\nXX\nXX\n''') == '0'\n\n-----"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n..\\n..\") == \"7\"\n\nassert solution(\"4 4\\nX.XX\\nX..X\\n..X.\\n..XX\") == \"9\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n..\\n..') == 7\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n..\\n..\\n\") == \"7\"\n\n\"\"\"\nfrom collections import defaultdict\nfrom functools import lru_cache"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2 2\n..\n..\n\"\"\") == '7'\nassert solution(\"\"\"4 4\nX.XX\nX..X\n..X.\n..XX\n\"\"\") == '9'\n\n\"\"\"\n\nimport numpy as np\n\nassert np.all(np.array(solution(\"\"\"2 2\n..\n..\n\"\"\").split(\"\\n\"), dtype=str) == np.array([\"7\", \"7\"], dtype=str))\nassert np.all(np.array(solution(\"\"\"4 4\nX.XX\nX..X\n..X.\n..XX\n\"\"\").split(\"\\n\"), dtype=str) == np.array([\"9\", \"9\"], dtype=str))\nassert np.all(np.array(solution(\"\"\"4 4\nX..X\n..X.\n..XX\n..X.\n\"\"\").split(\"\\n\"), dtype=str) == np.array([\"7\", \"9\"], dtype=str))\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".XX\") == 1\nassert solution(\"X..\") == 2\nassert solution(\"..X\") == 2\nassert solution(\"X.X\") == 2\nassert solution(\"XXX\") == 3\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n..\\n..\") == \"7\"\nassert solution(\"4 4\\nX.XX\\nX..X\\n..X.\\n..XX\") == \"9\"\n\"\"\"\n\nr, c = map(int, stdin.readline().split())\nt = r * c\nvisited = [[False for _ in range(c)] for _ in range(r)]\ntables = 0\nfor i in range(r):\n    for j in range(c):\n        if not visited[i][j]:\n            if stdin.readline()[j] == \".\":\n                tables += 1\n                visited[i][j] = True\n                if i == 0 or j == 0 or i == r - 1 or j == c - 1:\n                    visited[i][j] = False\n                else:\n                    visited[i][j] = True\n                    visited[i - 1][j] = True\n                    visited[i][j - 1] = True\n                    visited[i][j + 1] = True\n                    visited[i + 1][j] = True\nprint(t - tables)"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == -1\n'''"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2\n3 3 2 2 100\n1 1 1 1 500''') == '600'\nassert solution('''1\n5 5 2 3 1\n1 2 3 4 5''') == '-1'\nassert solution('''3\n5 5 2 3 1\n1 2 3 4 5\n5 4 6 6 6\n1 2 3 4 5''') == '150'\nassert solution('''5\n5 5 2 3 1\n1 2 3 4 5\n5 4 6 6 6\n1 2 3 4 5\n5 4 6 6 6\n1 2 3 4 5''') == '150'\nassert solution('''6\n5 5 2 3 1\n1 2 3 4 5\n5 4 6 6 6\n1 2 3 4 5\n5 4 6 6 6\n1 2 3 4 5\n5 4 6 6 6\n1 2 3 4 5\n5 4 6 6 6''') == '150'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2\n3 3 2 2 100\n1 1 1 1 500''') == '600'\nassert solution('''2\n2 0 2 1 100\n6 0 8 1 1''') == '100'\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n3 3 2 2 100\\n1 1 1 1 500') == '600'\nassert solution('2\\n2 0 2 1 100\\n6 0 8 1 1') == '100'\n\"\"\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 3 2 2 100\\n1 1 1 1 500\") == \"600\"\n\n'''\n\n'''\nLet the knight move in the same fashion as on the infinite chessboard.\n\nThe knight must only pay when obtaining cards and can perform jumps at no additional cost.\n\nFor example, if he buys a card with $3$ and $2$ and another card with $8$ and $4$, he may jump by $(-2, 3)$, and from there jump by $(8, 4)$, and later jump by $(-3, 2)$. Of course, he cannot make a jump $(a,b)$ until after he arrives at a square with a tarot card with $a$ and $b$ on it, and purchases that card.\n\nGiven positions of the tarot cards on the board and their prices, find the least amount that the knight must pay to reach square $(0, 0)$.\n\n-----Input-----\nEach test case will begin with a line containing a single integer $n$ ($1\\! \\le \\! n\\! \\le \\! 1000$), which is the number of tarot cards on the chessboard.\n\nEach of the next $n$ lines contains a description of a tarot card in five space-separated integers:$r$ $c$ $a$ $b$ $p$\n\n($-10^9\\! \\le \\! r, c\\! \\le \\! 10^9, 1\\! \\le \\! a, b, p\\! \\le \\! 10^9$), where $(r,c)$ is the location of the tarot card, $a$ and $b$ are the offset values, and $p$ is the price of the card.\n\nThe first tarot card is the initial position of the knight. Multiple tarot cards may exist at the same location. The knight must have a tarot card to move.\n\n-----Output-----\nOutput a single integer, which is the minimum cost for the knight to reach the goal at $(0,0)$. Output $-1$ if it is not possible to reach the goal.\n\n-----Examples-----\nSample Input 1:\n2\n3 3 2 2 100\n1 1 1 1 500\nSample Output 1:\n600\n\nSample Input 2:\n2\n2 0 2 1 100\n6 0 8 1 1\nSample Output 2:\n100\n\n'''"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n3 3 2 2 100\\n1 1 1 1 500') == '600'\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 3 2 2 100\\n1 1 1 1 500\") == 600\n\"\"\"\nimport sys"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == expected_result_1\nassert solution(test_input_2) == expected_result_2\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1\n\"\"\""
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"361\") == 3\nassert solution(\"11\") == 0\n\"\"\""
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"361\") == 3\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('361') == '3'\nassert solution('11') == '0'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\""
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('361') == 3\n\"\"\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('361') == '3'\nassert solution('11') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('361') == '3'\nassert solution('11') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('361') == 3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\nassert solution('11') == 0\nassert solution('361') == 3\n\nprint(solution(stdin.rstrip()))\n\n\"\"\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"361\") == 3\nassert solution(\"11\") == 0\n\nprint(solution(\"361\"))\nprint(solution(\"11\"))\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11') == 3\nassert solution('361') == 3\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'cancel road trip'\nassert solution('1\\n1\\n1') == 'cancel road trip'\nassert solution('2\\n100\\n10\\n5\\n1\\n1\\n13') == '10'\nassert solution('3\\n100\\n10\\n5\\n1\\n1\\n13') == '10'\nassert solution('2\\n100\\n10\\n5\\n1\\n1\\n13') == '10'\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n11 5\\n') == '10'\nassert solution('3 10\\n2 100\\n1 10\\n13 5\\n') == 'cancel road trip'\n\"\"\"\n\nfrom __future__ import print_function\n\nn, g = list(map(int, input().split()))\nstations = []\n\nfor i in range(n):\n    distance, cost = list(map(int, input().split()))\n    stations.append((distance, cost))\n\nstations.sort()\n\ncost = 0\ncount = 0\n\nfor s in stations:\n    if cost + s[1] <= g:\n        cost += s[1]\n        count += 1\n    else:\n        break\n\nprint(count if count > 0 else 'cancel road trip')\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10\\n2 100\\n1 10\\n11 5\") == \"10\"\nassert solution(\"3 10\\n2 100\\n1 10\\n13 5\") == \"cancel road trip\"\n\"\"\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\\n2 100\\n1 10\\n11 5\") == \"10\"\nassert solution(\"3 10\\n2 100\\n1 10\\n13 5\") == \"cancel road trip\"\n\"\"\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10\\n2 100\\n1 10\\n11 5\") == \"10\"\nassert solution(\"3 10\\n2 100\\n1 10\\n13 5\") == \"cancel road trip\"\n\"\"\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n11 5') == '10'\nassert solution('3 10\\n2 100\\n1 10\\n13 5') == 'cancel road trip'\n\"\"\""
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3, 10) == 10\nassert solution(1, 10) == 10\nassert solution(1, 100) == 100\nassert solution(1, 10**10) == 10**10\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\\n2 100\\n1 10\\n11 5\") == \"10\"\nassert solution(\"3 10\\n2 100\\n1 10\\n13 5\") == \"cancel road trip\"\n-----Problem-----\nCalculate the minimum cost of completing a road trip.\n-----Solution-----\n\n-----My Solution-----\n\nimport sys\nread = sys.stdin.readline\n\nn, g = list(map(int, read().strip().split()))\ncosts = list(map(int, read().strip().split()))\n\ni = 0\ntotal_cost = 0\nwhile i < n:\n    while i < n and costs[i] <= g:\n        total_cost += costs[i]\n        i += 1\n    if i < n:\n        g -= costs[i]\n        i += 1\n\nprint(total_cost)"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nprint(solution(input()))\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 10\n2 100\n1 10\n11 5''') == '10'\n\nassert solution('''3 10\n2 100\n1 10\n13 5''') == 'cancel road trip'\n\n'''\na = list(map(int, input().split()))\nn = a[0]\ng = a[1]\n\nd = []\nc = []\nfor i in range(n):\n    d.append(int(input()))\n    c.append(int(input()))\n\nstart = 0\nend = max(d)\n\nans = g\nwhile start <= end:\n    mid = (start + end) // 2\n    if g < c[0]:\n        end = mid - 1\n    elif g >= c[0]:\n        ans = min(ans, mid)\n        start = mid + 1\n\nprint(ans)\n'''"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2, 4) == 4\nassert solution(5, 100) == 100\nassert solution(7, 8) == 14\nassert solution(10, 14) == 20\nassert solution(20, 200) == 200\n"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 9\\n2 8\\n1 1\\n3 4\\n5 100') == '1 8 9 9 100 101 108 109 109'\n\"\"\""
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 9\\n2 8\\n1 1\\n3 4\\n5 100') == '1 8 9 9 100 101 108 109 109'\nassert solution('5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8') == '0 7 8 11 15 16 19'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 9\\n2 8\\n1 1\\n3 4\\n5 100') == '1 8 9 9 100 101 108 109 109'\n\"\"\""
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 9\\n2 8\\n1 1\\n3 4\\n5 100\") == \"1 8 9 9 100 101 108 109 109\"\nassert solution(\"5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8\") == \"0 7 8 11 15 16 19\"\n\nprint(\"All cases passed!\")"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\\n3 6\\n2 3\\n2 4\\n2 3\\n4 6\") == \"0 7 8 11 15 16 19\"\nassert solution(\"4 3\\n2 6\\n2 4\\n2 7\\n2 4\\n2 5\\n2 5\\n2 7\\n2 6\\n2 6\\n4 4\\n4 8\\n4 6\\n4 8\\n4 8\\n4 8\\n4 6\\n4 4\\n4 8\\n4 6\\n4 8\\n4 8\\n4 8\\n4 6\\n4 4\\n4 8\\n4 6\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 6\\n4 4\\n4 8\\n4 8\\n4 8\\n4 8\\n4 6\\n4 4\\n4 8\\n4 6\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 6\\n4 4\\n4 8\\n4 8\\n4 8\\n4 6\\n4 4\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 6\\n4 4\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 6\\n4 4\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\n4 8\\"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n1 1\\n1 1\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n1 2\\n1 2\\n1 2\\n2 3\\n"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 9\n2 8\n1 1\n3 4\n5 100''') == '''1 8 9 9 100 101 108 109 109'''\nassert solution('''5 7\n2 2\n3 8\n2 7\n2 4\n3 8''') == '0 7 8 11 15 16 19'"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5 6 7 8') == '1 2 3 6 7 21 28 36'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383') == '1 2 3 6 7 21 28 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('2\\n') == '0 1'\nassert solution('2\\n1\\n') == '0 1'\nassert solution('2\\n1\\n2\\n') == '0 1 1 2'\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n1 2 3') == 3\nassert solution('1 3 3\\n1 2 3') == 2\nassert solution('1 4 3\\n1 2 3') == 1\nassert solution('1 5 3\\n0 0 1') == 2\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"3\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"3\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\\n3 3\\n-3 3\") == \"3\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\\n3 3\\n-3 3\") == \"3\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\\n3 3\\n-3 3\") == \"3\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == 3\n\"\"\"\n\nimport math\n\nimport sys\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\\n') == '1'\n\"\"\"\n\n\"\"\"\nWe have two cases to consider, one where the initial attack goes through the center, and one where the initial attack hits a neighboring point\n\"\"\"\n\n\"\"\"\nWe can use the formula to find the number of points on the circle with radius r centered on the point (x0, y0)\n\"\"\"\n\n\"\"\"\nIn order for the attack to work, there needs to be at least 3 points on the circle with radius r from the initial point.\n\"\"\"\n\n\"\"\"\nWe can also use a test case of 2 points to determine whether the initial attack works or not\n\"\"\"\n\n\"\"\"\nOur initial thought is to determine the maximum number of points on a circle with radius r from the center point (x0, y0) and then perform a test case of 2 points to determine whether the initial attack works\n\"\"\"\n\n\"\"\"\nThis solution is not fast enough to pass all test cases. The problem is that we need to determine whether the initial attack works with two points. If we just try to brute force, this takes O(n^2) time and O(1) space\n\"\"\"\n\n\"\"\"\nI don't understand why we can do better\n\"\"\"\n\n\"\"\"\nEach point should be an object that has a x and y coordinate. The problem is that we do not know the radius of the circle, so we cannot determine whether the attack works with two points\n\"\"\"\n\n\"\"\"\nWe can eliminate the need to store the radius of the circle using the following assumptions:\n\nA point is the same as a circle if and only if the distance between it and the origin is equal to the radius of the point\nA point is on a circle if and only if the distance between the point and the origin is equal to the radius of the point\nIf we want to test if a point is on a circle, then we can check if the distance between the point and the origin is equal to the radius of the point.\n\"\"\"\n\n\"\"\"\nWe can also consider the case where the initial attack does not hit the center point of the circle\n\"\"\"\n\n\"\"\"\nThe initial attack does not hit the center point of the circle, and the number of points on the circle with radius r from the center point is\n\"\"\"\n\n\"\"\"\nWe can use the fact that the maximum radius of a circle is 20000 and the minimum radius is 1\n\"\"\"\n\n\"\"\"\nWe can find the maximum number of points on a circle with radius r by dividing the area of the circle by pi\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \n\"\"\"\n\n\"\"\"\nThis solution is still not fast enough to pass all test cases, but it's better than the naive brute force solution\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \nWe can use the fact that the minimum radius of a circle is 1\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \nWe can use the fact that the maximum radius of a circle is 20000\n\"\"\"\n\n\"\"\"\nWe can find the maximum number of points on a circle with radius r by dividing the area of the circle by pi\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \nWe can use the fact that the minimum radius of a circle is 1\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \nWe can use the fact that the maximum radius of a circle is 20000\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \nWe can use the fact that the minimum radius of a circle is 1\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \nWe can use the fact that the maximum radius of a circle is 20000\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \nWe can use the fact that the minimum radius of a circle is 1\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \nWe can use the fact that the maximum radius of a circle is 20000\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \nWe can use the fact that the minimum radius of a circle is 1\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \nWe can use the fact that the maximum radius of a circle is 20000\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \nWe can use the fact that the minimum radius of a circle is 1\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \nWe can use the fact that the maximum radius of a circle is 20000\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \nWe can use the fact that the minimum radius of a circle is 1\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \nWe can use the fact that the maximum radius of a circle is 20000\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \nWe can use the fact that the minimum radius of a circle is 1\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \nWe can use the fact that the maximum radius of a circle is 20000\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of a circle / 2. \nWe can use the fact that the minimum radius of a circle is 1\n\"\"\"\n\n\"\"\"\nThe maximum number of points on a circle with radius r is equal to the maximum radius of"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0') == 1\n\nassert solution('1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0') == 3\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"1\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"3\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"1\"\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"1\"\nassert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"3\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"3\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"3\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"3\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n\"\"\") == '3'\nassert solution(\"\"\"\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n\"\"\") == '3'\n\n-----Explanation-----\nIn Sample Input 1, there is a single point of max radius 3 which is the center of the attack and does not intersect any of the other villages. Since there are no other villages, all minions are destroyed.\n\nIn Sample Input 2, the two points with max radius of 3 (indicated by the first pair of coordinates) have center (-3, 0) and radius 3. The second point (indicated by the second pair of coordinates) has center (3, -3) and radius 3.\n\nIn Sample Input 2, the minion closest to (-3, 0) is at (-3, 0) while the minion closest to (3, -3) is at (3, -3). In order to avoid damaging any of Liam\u2019s villages, the point with the largest radius is discarded.\n\nIn Sample Input 2, there is no minion with a larger radius that could damage Liam\u2019s villages.\n\"\"\")\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5 10000\n1\n1\n1\n1\n1\"\"\") == \"\"\"4\n4\n2\n2\n0\"\"\"\n\nassert solution(\"\"\"5 9\n1\n1\n10\n1\n9\"\"\") == \"\"\"2\n0\n0\n2\n0\"\"\"\n\nassert solution(\"\"\"5 9\n1\n1\n2\n1\n9\"\"\") == \"\"\"2\n0\n0\n2\n0\"\"\"\n\nassert solution(\"\"\"5 10000\n1\n1\n1\n1\n1\"\"\") == \"\"\"4\n4\n2\n2\n0\"\"\"\n\nassert solution(\"\"\"5 10000\n1\n10\n1\n1\n1\"\"\") == \"\"\"4\n0\n0\n0\n0\"\"\""
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1') == '4\\n4\\n2\\n2\\n0'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9') == '2\\n0\\n0\\n2\\n0'\nprint('Success')\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10000\\n1\\n1\\n1\\n1\\n\") == \"4\\n4\\n2\\n2\\n0\\n\"\nassert solution(\"5 9\\n1\\n1\\n10\\n1\\n9\\n\") == \"2\\n0\\n0\\n2\\n0\\n0\\n\"\nprint(\"Successfully passed all test cases!\")\n\n\"\"\""
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5 10000\n1\n1\n1\n1\n1\n\"\"\") == \"\"\"4\n4\n2\n2\n0\"\"\"\n\nassert solution(\"\"\"5 9\n1\n1\n10\n1\n9\n\"\"\") == \"\"\"2\n0\n0\n2\n0\"\"\"\n\nprint(\"Passed!\")\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10000\\n1\\n1\\n1\\n1\\n1\") == \"4\\n4\\n2\\n2\\n0\"\n\"\"\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == solution_1(test_input_1)\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n1\\n') == '1'\nassert solution('1\\n1\\n1\\n') == '0'\nassert solution('1\\n1\\n1\\n1\\n1\\n') == '0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 10000\n1\n1\n1\n1\n1\"\"\") == \"\"\"4\n4\n2\n2\n0\"\"\"\n\nassert solution(\"\"\"5 9\n1\n1\n10\n1\n9\"\"\") == \"\"\"2\n0\n0\n2\n0\"\"\""
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5 10000\n1\n1\n1\n1\n1\n\"\"\") == \"\"\"4\n4\n2\n2\n0\"\"\"\n\nassert solution(\"\"\"5 9\n1\n1\n10\n1\n9\n\"\"\") == \"\"\"2\n0\n0\n2\n0\"\"\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1') == '4\\n4\\n2\\n2\\n0'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9') == '2\\n0\\n0\\n2\\n0'\n\nprint(\"Code's finished!\")\n"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"kava\") == \"DA\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ne') == 'NE'\nassert solution('kava') == 'DA'\n\n\"\"\"\n\n\"\"\"\nSolution\n\"\"\""
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"kava\") == \"DA\"\n\"\"\"\nimport math\nimport sys\nimport itertools"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"kava\") == \"DA\"\nprint(solution(\"ne\"))\nprint(solution(\"kava\"))"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"kava\") == \"DA\"\nassert solution(\"kaa\") == \"ne\"\n\"\"\""
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ne') == 'NE'\nassert solution('kava') == 'DA'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"kava\") == \"DA\"\nassert solution(\"ak\") == \"NE\"\nassert solution(\"papa\") == \"DA\"\n\n\"\"\"\n\nfrom itertools import combinations\n\nN = int(stdin.readline())\nletters = stdin.readline().split()\n\ndic = {}\nfor idx, letter in enumerate(letters, 1):\n    dic[letter] = idx\n\nfor comb in combinations(letters, N):\n    if len(comb) == N:\n        d = dict(zip(letters, [0] * len(letters)))\n        for i in range(len(comb)):\n            d[comb[i]] = i + 1\n        val = 1\n        for letter in d:\n            val *= d[letter]\n        if val > dic:\n            dic = val\n            win = 'DA'\n        elif val == dic:\n            win = 'NE'\n\nprint(win)\nprint(dic)\n"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ne') == 'NE'\nassert solution('ak') == 'DA'\nassert solution('kava') == 'DA'\n\"\"\"\n\nn = int(stdin.readline())"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"kava\") == \"DA\"\nassert solution(\"kavab\") == \"DA\"\nassert solution(\"kavaj\") == \"DA\"\nassert solution(\"kavajb\") == \"DA\"\n\n\"\"\""
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ne') == 'NE'\nassert solution('kava') == 'DA'\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n\") == \"2\\n0\\n2\\n1\\n\"\nassert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n\") == \"0\\n0\\n3\\n2\\n\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\") == \"2\\n0\\n2\\n1\"\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n\") == \"2\\n0\\n2\\n1\"\nassert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n\") == \"0\\n0\\n3\\n2\"\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\") == \"2\\n0\\n2\\n1\"\n\nassert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\") == \"0\\n0\\n3\\n2\"\n\nassert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\") == \"0\\n0\\n3\"\n\n\"\"\""
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n') == '2'\n\"\"\"\n\n\"\"\"\nSolution:\n\nsolution: n+m+q\n\n\nTIME: O(n*m)\nSPACE: O(n+m+q)\n\n\"\"\""
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n\") == \"2\\n0\\n2\\n1\"\n\nassert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n\") == \"0\\n0\\n3\\n2\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n') == '2\\n0\\n2\\n1\\n'\nassert solution('8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n') == '0\\n0\\n3\\n2\\n'\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2\\n0\\n2\\n1'\n\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8''') == '0\\n0\\n3\\n2'\n\nassert solution('''4 2 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2\\n0\\n2\\n1'\n\nassert solution('''4 2 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2\\n0\\n2\\n1'\n\nassert solution('''4 2 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2\\n0\\n2\\n1'"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n\") == \"2\\n0\\n2\\n1\"\nassert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n\") == \"0\\n0\\n3\\n2\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 2\\n3 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"0\\n0\\n1\\n1\\n2\\n2\\n2\\n2\"\nassert solution(\"4 10 3\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n2 5\\n2 6\\n3 1\\n3 2\\n3 3\\n3 4\\n3 5\\n3 6\\n3 7\\n3 8\\n3 9\\n3 10\\n1 1 2\\n1 1 3\\n1 1 4\\n1 1 5\\n1 1 6\\n1 1 7\\n1 1 8\\n1 1 9\\n1 1 10\\n2 1 2\\n2 1 3\\n2 1 4\\n2 1 5\\n2 1 6\\n2 1 7\\n2 1 8\\n2 1 9\\n2 1 10\\n2 2 3\\n2 2 4\\n2 2 5\\n2 2 6\\n2 2 7\\n2 2 8\\n2 2 9\\n2 2 10\\n3 1 2\\n3 1 3\\n3 1 4\\n3 1 5\\n3 1 6\\n3 1 7\\n3 1 8\\n3 1 9\\n3 1 10\\n3 2 3\\n3 2 4\\n3 2 5\\n3 2 6\\n3 2 7\\n3 2 8\\n3 2 9\\n3 2 10\\n3 3 4\\n3 3 5\\n3 3 6\\n3 3 7\\n3 3 8\\n3 3 9\\n3 3 10\\n4 1 2\\n4 1 3\\n4 1 4\\n4 1 5\\n4 1 6\\n4 1 7\\n4 1 8\\n4 1 9\\n4 1 10\\n4 2 3\\n4 2 4\\n4 2 5\\n4 2 6\\n4 2 7\\n4 2 8\\n4 2 9\\n4 2 10\\n4 3 5\\n4 3 6\\n4 3 7\\n4 3 8\\n4 3 9\\n4 3 10\\n4 4 6\\n4 4 7\\n4 4 8\\n4 4 9\\n4 4 10\\n4 5 7\\n4 5 8\\n4 5 9\\n4 5 10\\n4 6 8\\n4 6 9\\n4 6 10\\n4 7 9\\n4 7 10\\n4 8 10\\n\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3''') == '2'\nassert solution('''2 2\n1 1\n0 1\n1 0\n1 2 1''') == '1'\nassert solution('''2 2\n1 1\n0 1\n1 0\n1 2 1''') == '2'\nassert solution('''2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3''') == '1'\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\") == 2\n\"\"\""
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 1') == '2'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 1\\n2 1\\n3 2\\n2 1 3\\n3 1 3\") == \"2\"\n\"\"\"\n\nn, m = list(map(int, stdin.readline().split()))\n\narr = []\nfor _ in range(n):\n    arr.append(list(map(int, stdin.readline().split())))\n\nprint(arr)"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\\n\") == \"2\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\\n') == '2'"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3') == '1'\nassert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3') == '2'\nassert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3') == '1'\nassert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3') == '2'\nassert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3') == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\\n') == '2'\nassert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\\n') == '1'\n\"\"\""
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n1 1\") == \"2\"\nassert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\") == \"2\"\nassert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\") == \"2\"\nassert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\") == \"1\"\nassert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\") == \"2\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 1\\n\") == \"2\"\nassert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\\n\") == \"1\"\nassert solution(\"2 2\\n0 1\\n1 0\\n1 2 1\\n2 1 3\\n\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 15\nD 4 10 1\nC 6 1\nC 9 3\"\"\") == \"49.000000000\"\nprint(solution(\"\"\"2 15\nD 4 10 1\nC 6 1\nC 9 3\"\"\"))\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1') == '40.500000000'\n\"\"\"\nimport sys\nfrom typing import List, Tuple, Dict, Any, Union\n\nimport numpy as np\n\nInput = Tuple[int, int, List[Union[str, List[str]]]]\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 15\nD 4 10 1\nC 6 1\nC 9 3''') == '49.0'\nprint(solution(stdin))\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\"\"\"\n\nfrom itertools import chain"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 15\\nD 4 10 1\\nC 6 1\\nC 9 3\") == \"49.0\"\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3 15\nD 4 10 1\nC 6 1\nC 9 3\"\"\") == \"49.0\"\nprint(\"Well done!\")\n\n\"\"\"\nIncomplete\n\"\"\""
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 15\\nD 4 10 1\\nC 6 1\") == \"40.500000000\"\nassert solution(\"3 15\\nD 4 10 1\\nC 6 1\\nC 9 3\") == \"49.000000000\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 15\nD 4 10 1\nC 6 1\nC 9 3''') == '49.000000000'\nprint('Test pass.')\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 15\nD 4 10 1\nC 6 1\nC 9 3''') == '49.0'\n\nassert solution('''2 15\nD 4 10 1\nC 6 1\nC 9 3''') == '49.0'\n\nassert solution('''3 15\nD 4 10 1\nC 6 1\nC 9 3''') == 'impossible'\n\nassert solution('''2 15\nC 6 1\nD 4 10 1\nC 9 3''') == '40.5'\n\nassert solution('''2 15\nC 6 1\nD 4 10 1\nC 9 3''') == '40.5'"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '40.5'\n\"\"\"\n\n\n\"\"\"\nI don't really understand this problem.\n\"\"\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10\\na 2 10 3\\n\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\n\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\") == \"fail\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\n\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\") == \"fail\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\n\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\") == \"fail\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\n\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\") == \"fail\"\n\n'''\n\nn = int(stdin.readline())\n\nplay_list = [None] * n\n\nfor i in range(n):\n    name, *args = stdin.readline().strip().split()\n    play_list[i] = (name, *args)\n\na_list = []\nfor i in range(n):\n    if play_list[i][1] == '1':\n        a_list.append(i)\n\nfor i in range(n - 1):\n    if play_list[a_list[i]][1] == '2':\n        for j in range(n - 1):\n            if play_list[a_list[j]][1] == '3':\n                for k in range(n - 1):\n                    if play_list[a_list[k]][1] == '4':\n                        for l in range(n - 1):\n                            if play_list[a_list[l]][1] == '5':\n                                for m in range(n - 1):\n                                    if play_list[a_list[m]][1] == '6':\n                                        for n in range(n - 1):\n                                            if play_list[a_list[n]][1] == '7':\n                                                for o in range(n - 1):\n                                                    if play_list[a_list[o]][1] == '8':\n                                                        for p in range(n - 1):\n                                                            if play_list[a_list[p]][1] == '9':\n                                                                for q in range(n - 1):\n                                                                    if play_list[a_list[q]][1] == '10':\n                                                                        for r in range(n - 1):\n                                                                            if play_list[a_list[r]][1] == '11':\n                                                                                for s in range(n - 1):\n                                                                                    if play_list[a_list[s]][1] == '12':\n                                                                                        for t in range(n - 1):\n                                                                                            if play_list[a_list[t]][1] == '13':\n                                                                                                for u in range(n - 1):\n                                                                                                    if play_list[a_list[u]][1] == '14':\n                                                                                                        for v in range(n - 1):\n                                                                                                            if play_list[a_list[v]][1] == '15':\n                                                                                                                for w in range(n - 1):\n                                                                                                                    if play_list[a_list[w]][1] == '16':\n                                                                                                                        for x in range(n - 1):\n                                                                                                                            if play_list[a_list[x]][1] == '17':\n                                                                                                                                for y in range(n - 1):\n                                                                                                                                    if play_list[a_list[y]][1] == '18':\n                                                                                                                                        for z in range(n - 1):\n                                                                                                                                            if play_list[a_list[z]][1] == '19':\n                                                                                                                                                  if play_list[a_list[z]][0] == 'a':\n                                                                                                                                                     if play_list[a_list[z]][1] == '1':\n                                                                                                                                                                  a_list.append(i)\n                                                                                                                                                                  a_list.append(j)\n                                                                                                                                                                  a_list.append(k)\n                                                                                                                                                                  a_list.append(l)\n                                                                                                                                                                  a_list.append(m)\n                                                                                                                                                                  a_list.append(n)\n                                                                                                                                                                  a_list.append(o)\n                                                                                                                                                                  a_list.append(p)\n                                                                                                                                                                  a_list.append(q)\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\na\\n2\\n10\\n3\\nb\\n1\\n6\\nc\\n2\\n1\\n5\\nd\\n1\\n9\\ne\\n1\\n4\\nf\\n1\\n2\\ng\\n2\\n6\\n8\\nh\\n0\\ni\\n1\\n3\\nj\\n1\\n7\") == \"5\\n4\\n9\\n3\\n1\\n10\\n7\\n6\\n2\"\nassert solution(\"9\\na\\n2\\n10\\n3\\nb\\n1\\n6\\nc\\n2\\n1\\n5\\nd\\n1\\n9\\ne\\n1\\n4\\nf\\n1\\n2\\ng\\n2\\n6\\n8\\nh\\n0\\ni\\n1\\n3\\nj\\n1\") == \"fail\"\n\n------BRIEF DESCRIPTION------\nCreate a playlist of nine songs using the numbers of songs that can be played directly after the current song.\n\nFor the first test case, the playlist can be formed as follows:\n    playlist = [1, 5, 4, 9, 3, 10, 7, 6, 2]\nwhere 1 --> 10, 5 --> 4, 4 --> 9,...\n\nFor the second test case, there is no valid playlist.\n\n------Hints------\nWe can use a dynamic programming algorithm to solve this problem.\n\n------Solution------\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        # write your code in Python 3.6\n        pass\n\n------Test Case-----\nsolution('9\\na\\n2\\n10\\n3\\nb\\n1\\n6\\nc\\n2\\n1\\n5\\nd\\n1\\n9\\ne\\n1\\n4\\nf\\n1\\n2\\ng\\n2\\n6\\n8\\nh\\n0\\ni\\n1\\n3\\nj\\n1')\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7''') == '''5 4 9 3 1 10 7 6 2'''\nassert solution('''10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7''') == '''fail'''\nassert solution('''9\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7''') == '''fail'''\nassert solution('''9\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7''') == '''fail'''\nassert solution('''9\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7''') == '''fail'''\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == '5 4 9 3 1 10 7 6 2'\nassert solution('10\\na 1 6\\nb 2 10 3\\n') == 'fail'\nassert solution('10\\n1 a 6\\n2 b 10 3\\n') == 'fail'\nassert solution('10\\na 2 10 3\\n1 a 6\\n2 b 10 3\\n') == '1 2 10 3 6 5 4 3 2 1'\nassert solution('10\\n1 a 6\\n2 b 10 3\\n4 c 5 8 4\\n') == '1 2 10 3 6 5 4 3 2 1'\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\nj 1 7\\n\") == \"5 4 9 3 1 10 7 6 2\"\n\nprint(solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\nj 1 7\\n\"))\n\n\"\"\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\n\\ni 1 3\\nj 1 7\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\n\\ni 1 3\\nj 1 7\") == \"fail\"\nassert solution(\"10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\n\\ni 1 3\\nj 1 7\") == \"fail\"\nassert solution(\"10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\n\\ni 1 3\\nj 1 7\\n\\n\\na 2 10 3\\a 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\n\\ni 1 3\\nj 1 7\") == \"fail\"\nassert solution(\"10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\n\\ni 1 3\\nj 1 7\\n\\n\\na 2 10 3\\a 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\n\\ni 1 3\\nj 1 7\") == \"fail\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"5 4 9 3 1 10 7 6 2\"\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == '5 4 9 3 1 10 7 6 2'\nassert solution('5\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == 'fail'\nassert solution('10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == '5 4 9 3 1 10 7 6 2'\nassert solution('5\\na 2 10 3\\n\\n\\n\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == 'fail'\nassert solution('10\\na 2 10 3\\nb 1 6\\n\\n\\n\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == '5 4 9 3 1 10 7 6 2'\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"fail\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"fail\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"fail\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"fail\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\") == \"fail\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\na 1 6\\nf 2 1 5\\n\") == \"9 4 9 3 1 7 6 1\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"00:00\\n01:01\") == \"3\\n00:00\\n01:00\\n01:01\"\nassert solution(\"00:08\\n00:00\") == \"3\\n00:08\\n00:09\\n00:00\"\n\"\"\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('00:08') == '00:08'\nassert solution('00:01') == '00:01'\nassert solution('00:10') == '00:10'\nassert solution('00:11') == '00:11'\nassert solution('00:09') == '00:09'\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"00:00\") == [\"00:00\"]\nassert solution(\"01:01\") == [\"00:01\", \"01:02\", \"00:02\", \"01:03\", \"02:03\"]\nassert solution(\"01:02\") == [\"00:01\", \"01:03\", \"00:02\", \"01:04\", \"02:04\", \"00:03\", \"01:04\", \"02:04\", \"03:04\"]\nassert solution(\"23:59\") == [\"22:59\", \"23:59\", \"22:59\", \"23:59\", \"22:59\", \"23:59\", \"22:59\", \"23:59\", \"22:59\", \"23:59\"]\nassert solution(\"13:11\") == [\"12:11\", \"13:11\", \"12:11\", \"13:11\", \"12:11\", \"13:11\", \"12:11\", \"13:11\", \"12:11\", \"13:11\"]\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"00:08\") == \"3\"\nassert solution(\"00:00\") == \"3\"\nassert solution(\"00:01\") == \"3\"\nassert solution(\"01:01\") == \"3\"\nassert solution(\"22:22\") == \"3\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"00:08\") == '3'\n\nassert solution(\"00:00\") == '3'\n\nassert solution(\"01:01\") == '3'\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"00:08\") == \"3\"\nassert solution(\"00:00\") == \"3\"\nassert solution(\"00:08\") == \"3\""
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"00:08\") == \"00:08\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:01\") == \"00:01\"\nassert solution(\"23:59\") == \"23:59\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"00:08\") == \"00:09\"\nassert solution(\"00:00\") == \"00:01\"\nassert solution(\"01:01\") == \"01:00\"\n\nprint(solution(\"00:08\"))\nprint(solution(\"00:00\"))\nprint(solution(\"01:01\"))\n\"\"\"\n\n\n\nimport itertools\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"00:00\") == \"0:0\"\nassert solution(\"01:01\") == \"1:1\"\nassert solution(\"00:08\") == \"0:9\"\nassert solution(\"01:02\") == \"1:2\"\n\n\"\"\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('00:00') == '3\\n00:00\\n00:01\\n00:02'\nassert solution('00:08') == '3\\n00:08\\n00:09\\n00:10'\n\nprint(solution(stdin.strip()))"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(())\") == \"4,8:8,8:\", \"Wrong solution for (())\"\nassert solution(\"(()))(\") == \"4,8:8,8:\", \"Wrong solution for (()))()\"\n\nprint('The code ran Correctly')"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"(()(()))\") == \"4,8:8,8:4,4:4,4:4,8:4,4:4,8:8,8:8\"\nassert solution(\"(())\") == \"4,8:8,8:4,4:4,8:8,8:8\"\n\"\"\""
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"((()))\") == \"4,8:8,8:\", \"Checking solution 1\"\nassert solution(\"()\") == \"4,4:\", \"Checking solution 2\"\nassert solution(\"(())\") == \"4,4:\", \"Checking solution 3\"\nassert solution(\"(()())\") == \"4,8:8,8:\", \"Checking solution 4\"\nassert solution(\"((()))\") == \"4,8:8,8:\", \"Checking solution 5\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()\") == \"4,4:\", \"First Test Case Failed\"\nassert solution(\"(())\") == \"4,8:8,8:\", \"Second Test Case Failed\"\nassert solution(\"(((\") == \"4,4:\", \"Third Test Case Failed\"\n\nprint(\"Tests Pass Successfully!\")\n"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(()))\") == \"4,8:8,8:8\"\nassert solution(\"()()()()()()()\") == \"4,5:5,7:7,7:7,7:7,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8\"\nassert solution
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"()\") == \"4,4:\", \"A parenthesis pair is captured\"\nassert solution(\"(()())\") == \"2,5:5,5:5,5:\", \"All parenthesis pairs are captured\"\nassert solution(\"(((())\") == \"6,9:9,9:9,9:\", \"All parenthesis pairs are captured\"\nassert solution(\"(())(())\") == \"2,9:9,9:9,9:10,11:11,11:11,11:\", \"All parenthesis pairs are captured\"\nassert solution(\"((((((((((((((((((((((((()()()()(()()()()(()()((((((((((((((((())))))())())()()(()))()(())()((()(())))(()))())))))))))))))())()()()()((()()(((())))(()))()())(((((())))))))())())()))(())()))((()))()))((()))())(())((())((())))(((()))()))(())(())(()(()))(())((())((())))(((()()))())((())((()()))()())((()(())))((((((()))))))()()()()()((())((())))((()(((())))(()))((())((((((((())))((((((()(((((((((((((((((((((((((((()(())((()))(()(((()()(((()(((((((()())))))()(()))()()))(()(()())((()()))(()((())(((()))()(()((())((()))()(()))()(()(()((()())((())((()()))(()(((((((((((()))()))))()())((()()(()(()((((((((()(((((((()(()(()(()(()((()(()(((((((((((((((((((((((()))))))(()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"4,4:\"\nassert solution(\"(())\") == \"4,8:8,8:4,4:\"\nassert solution(\"((()))\") == \"4,8:8,8:4,4:4,4,4,4,4,4:4,4,4,4,4\"\nassert solution(\"((((((((())))))\") == \"4,8:8,8:4,4:4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8:8,8:4,4:4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"(())\") == \"4,8:8,8:\", f\"Expected '4,8:8,8:', got '{solution('(())')}'\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(()())(())\") == \"4,4:4,8:8:8,8:4,8:4,8:4,8:\"\nassert solution(\"()()\") == \"4,4:4,4:4:\"\n\n\"\"\"\n\nimport operator\n"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"(()())(()(()))\") == \"4,4:4,8:8:8,8:8:8:8:8:8\"\nassert solution(\"(()(((()())))))\") == \"4,4:4,4:4:8,8:8:8:8:8:8:8:8\"\nassert solution(\"(()((()()))))\") == \"4,4:4,4:4:8,8:8:8:8:8:8:8:8:8\"\nassert solution(\"((((((())(((()()(())))))())(())))(((()))()))\") == \"4,8:4,4:4:8,8:8:8:8:8:4,4:4:8,8:8:8:8:8:8:8:8:8:4,8:8:8:8:8:8:8:8:8:8:4,8:8:8:8:8:8:8:8:8:8:4,8:8:8:8:8:8:8:8:8:8:8:8:8:4,8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:4,8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:8:"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\"\nassert solution(\"1 1\\n26 02 03 03 2\") == \"185\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1\\n26 02 03 03 1') == '5'\nassert solution('1 1\\n26 02 03 03 2') == '185'\nassert solution('1 1\\n26 02 03 03 3') == '-1'\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\""
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\"\nprint(solution(\"1 1\\n26 02 03 03 2\"))\n\"\"\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\"\n\"\"\""
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n26 02 03 03 1') == '5'\n\"\"\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\"\nprint(\"Test 1 Passed\")\n\nassert solution(\"1 1\\n26 02 03 03 2\") == \"185\"\nprint(\"Test 2 Passed\")\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n26 02 03 03 1') == '5'\nassert solution('1 1\\n26 02 03 03 2') == '185'\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == '5'\nassert solution(\"1 1\\n26 02 03 03 2\") == '185'\n\"\"\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n3 4 1 2\") == \"Impossible\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '6 2\\n'\n    '3 4 5 6 1 2\\n') == '5 6 1 2 3 4'\nassert solution(\n    '4 2\\n'\n    '3 4 1 2\\n') == '2 3 4 1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\nassert solution('4 2\\n3 4 1 2') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 2\\n3 4') == '5 6 1 2 3'\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2 3\") == \"Impossible\"\nassert solution(\"4 2\\n1 2 3 4\") == \"2 3 4 1\"\nassert solution(\"7 3\\n1 2 3 5 6 7 8\") == \"6 7 1 8 2 3 5\"\nassert solution(\"4 2\\n3 4 1 2\") == \"2 3 4 1\"\nassert solution(\"4 2\\n4 3 1 2\") == \"Impossible\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\nassert solution('4 2\\n3 4 1 2') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n3 4 1 2\") == \"2 3 4 1\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom itertools import product\nfrom typing import DefaultDict, List, Set, Tuple\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\nassert solution('4 2\\n3 4 1 2') == '2 3 4 1'\n"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\n\nprint('Success')\n\n3\n4\n6\n7\n9\n0\n10\n11\n12\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\n800\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812\n813\n814\n815\n816\n817\n818\n819\n820\n821\n822\n823\n824\n825\n826\n827\n828\n829\n830\n831\n832\n833\n834\n835\n836\n837\n838\n839\n840\n841\n842\n843\n844\n845\n846\n847\n848\n849\n850\n851\n852\n853\n854\n855\n856\n857\n858\n859\n860\n861\n86"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(1374)) == \"7413\"\nassert solution(str(210)) == \"201\"\n\"\"\"\n\nimport sys\n\nn, k = [int(x) for x in sys.stdin.read().split()]"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\n\"\"\""
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\n\nprint('Success')"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\nprint(\"Passed\")\n\"\"\""
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1374) == 7413\nassert solution(210) == 201\n\"\"\"\n\nimport itertools\nfrom typing import Tuple\n"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n\nprint('Test passed \\o/')"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n\"\"\""
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 1\\n1 0\\n') == '0.666666666666667'\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 1\\n1 0') == '0.666666666666667'\nassert solution('3\\n0 0\\n1 1\\n2 0') == '0.733333333333333'\n\"\"\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 1\\n1 0') == '0.666666666666667'\nassert solution('3\\n0 0\\n1 1\\n2 0') == '0.733333333333333'\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 1\\n1 0\\n') == '0.666666666666667'\nassert solution('3\\n0 0\\n1 1\\n2 0\\n') == '0.733333333333333'\n\n-----\nThere are two points on the edge of the CBD. The taxi should always choose the shortest route. The taxi should always travel a route which has the same direction as the shortest route. \n\n0 1\n1 0\n0 0\n-----\n\n0 1\n0 0\n1 0\n-----\n\n0 0\n1 0\n0 0\n0 1\n-----\n\n0 0\n0 0\n0 0\n0 0\n1 1\n-----\n\n0 1\n1 1\n0 0\n0 1\n1 0\n-----\n\n0 0\n0 1\n0 0\n0 0\n1 1\n-----\n\n0 1\n1 1\n0 0\n0 1\n0 1\n-----\n\n0 0\n0 0\n0 1\n0 1\n0 1\n-----\n\n0 0\n0 1\n0 0\n0 0\n0 0\n-----\n\n0 0\n1 1\n0 0\n0 0\n1 1\n-----\n\n0 0\n0 0\n0 1\n0 1\n0 1\n-----\n\n0 1\n0 1\n0 1\n0 0\n0 1\n-----\n\n0 1\n1 1\n0 0\n0 1\n0 1\n-----\n\n0 1\n1 1\n0 1\n0 1\n0 1\n-----\n\n0 1\n0 1\n0 1\n1 1\n0 0\n-----\n\n0 1\n1 1\n0 1\n0 1\n1 1\n-----\n\n0 1\n0 1\n0 1\n0 1\n0 1\n-----\n\n0 0\n1 0\n0 0\n0 0\n1 0\n-----\n\n0 0\n0 0\n0 0\n0 0\n0 1\n-----\n\n0 0\n0 0\n0 0\n0 0\n0 1\n-----\n\n0 1\n0 1\n0 1\n1 1\n0 1\n-----\n\n0 0\n1 0\n0 0\n0 0\n1 0\n-----\n\n0 0\n0 0\n0 0\n0 0\n0 1\n-----\n\n0 0\n0 0\n0 0\n0 0\n0 1\n-----\n\n0 1\n1 1\n0 1\n0 1\n1 1\n-----\n\n0 1\n1 1\n0 1\n1 1\n1 1\n-----\n\n0 0\n1 1\n0 0\n1 0\n0 1\n-----\n\n0 1\n1 1\n0 1\n0 1\n0 1\n-----\n\n1 1\n1 1\n0 1\n0 1\n0 1\n-----\n\n0 1\n1 1\n1 1\n1 1\n0 1\n-----\n\n0 1\n1 1\n0 1\n0 1\n1 1\n-----\n\n0 0\n0 1\n1 1\n1 1\n1 1\n-----\n\n0 0\n1 1\n1 1\n1 1\n0 1\n-----\n\n0 0\n1 0\n0 0\n1 0\n0 0\n-----\n\n0 1\n0 0\n1 0\n0 1\n0 1\n-----\n\n0 0\n1 0\n0 0\n1 0\n0 0\n-----\n\n0 0\n1 1\n0 0\n0 1\n0 1\n-----\n\n0 1\n0 1\n0 1\n1 1\n0 1\n-----\n\n1 1\n0 1\n0 1\n0 1\n1 1\n-----\n\n0 1\n0 1\n0 1\n0 1\n0 1\n-----\n\n0 1\n0 0\n1 1\n0 0\n1 1\n-----\n\n0 1\n1 1\n0 1\n0 1\n1 1\n-----\n\n0 1\n0 0\n0 1\n0 0\n0 0\n-----\n\n0 1\n0 0\n0 1\n1 1\n0 1\n-----\n\n0 1\n0 1\n0 0\n0 0\n0 0\n-----\n\n0 1\n0 0\n1 1\n0 1\n0 1\n-----\n\n0 1\n1 1\n1 1\n0 1\n0 1\n-----\n\n0 0\n0 0\n0 0\n1 1\n0 1\n-----\n\n0 0\n1 1\n0 1\n0 1\n0 0\n-----\n\n0 1\n0 1\n1 1\n1 1\n0 1\n-----\n\n0 1\n1 1\n1 1\n1 1\n0 1\n-----\n\n0 1\n0 1\n0 1\n1 1\n0 0\n-----\n\n0 0\n1 1\n0 1\n0 0\n0 1\n-----\n\n0 1\n0 0\n0 0\n0 1\n0 1\n-----\n\n0 1\n1 1\n1 1\n0 1\n0 1\n-----\n\n0 1\n0 0\n0 0\n0 1\n0 1\n-----\n\n1 1\n0 1\n1 1\n0 1\n0 1\n-----\n\n1 1\n1 1\n0 1\n0 1\n1 1\n-----\n\n1 1\n1 1\n0 1\n0 1\n1 1\n-----\n\n0 1\n1 1\n0 1\n1 1\n0 1\n-----\n\n1 1\n1 1\n0 1\n1 1\n0 1\n-----\n\n0 1\n1 1\n0 1\n1 1\n0 1\n-----\n\n0 1\n1 1\n1 1\n0 1\n0 1\n-----\n\n0 1\n0 1\n0 1\n0 1\n0 1\n-----\n\n1 1\n0 1\n0 1\n0 1\n0 1\n-----\n\n0 0\n1 1\n0 1\n0 1\n0 1\n-----\n\n0 1\n0 0\n1 1\n1 1\n0 1\n-----\n\n1 1\n0 1\n0 0\n0 0\n0 0\n-----\n\n0 1\n0 1\n1 1\n1 1\n0 1\n-----\n\n0 0\n0 0\n0 1\n0 1\n-----\n\n0 0\n0 0\n0 0\n0 1\n-----\n\n0 1\n0 1\n1 1\n1 1\n0 1\n-----\n\n0 0\n0 0\n1 1\n0 0\n1 1\n-----\n\n0 0\n1 1\n1 1\n0 1\n0 1\n-----\n\n0 1\n1 1\n0 1\n0 1\n0 1\n-----\n\n1 1\n1 1\n0 1\n0 1\n0 1\n-----\n\n0 1\n0 1\n0 1\n1 1\n0 1\n-----\n\n1 1\n0 1\n0 1\n1 1\n0 1\n-----\n\n1 1\n0 1\n0 1\n1 1\n1 1\n-----\n\n1 1\n0 1\n1 1\n0 1\n0 1\n-----\n\n1 1\n0 1\n0 1\n0 1\n1 1\n-----\n\n1 1\n1 1\n1 1\n1 1\n0 1\n-----\n\n0 1\n1 1\n1 1\n1 1\n0 1\n-----\n\n0 0\n0 1\n0 1\n0 0\n0 1\n-----\n\n0 1\n0 0\n0 0\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\\n\") == \"0.666666666666667\"\nassert solution(\"3\\n0 0\\n1 1\\n2 0\\n\") == \"0.733333333333333\"\n\"\"\"\n\nimport math\nimport random\nimport sys"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 1\\n1 0\\n') == '0.666666666666667'\n\"\"\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\") == \"0.666666666666667\"\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == \"0.733333333333333\""
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\") == \"0.666666666666667\"\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == \"0.733333333333333\"\n\"\"\""
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 1\\n1 0') == '0.666666666666667'\nassert solution('3\\n0 0\\n1 1\\n2 0') == '0.733333333333333'\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n2 0\") == '0.733333333333333'\n\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20') == 9\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 4\\n10 1 3\\n0 1 20\") == \"9\"\nassert solution(\"2 3 100\\n10 1 10\\n10 1 10\") == \"21\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('3 2 1') == '3'\nassert solution('1 3 3 2 2 1 1 1 2') == '9'\nassert solution('3 2 100') == '101'\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 4\\n10 1 3\\n0 1 20\\n\") == \"9\"\nprint('Hooray!')\n\n\"\"\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 4\\n10 1 3\\n0 1 20\") == 9\n\"\"\""
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20') == '9'\n\"\"\""
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 100\\n10 1 10\\n10 1 10\") == \"21\""
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20') == '9'\nassert solution('2 3 100\\n10 1 10\\n10 1 10') == '21'"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 4\\n10 1 3\\n0 1 20\") == \"9\"\nassert solution(\"2 3 100\\n10 1 10\\n10 1 10\") == \"21\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20\\n') == '9'\n\"\"\""
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n1 1 1 2\") == 2\nassert solution(\"9 2 7 *\\n1 1 1 2\\n1 1 1 2\") == 4\n\"\"\""
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"8 2 7 -\n1 1 1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"9 2 7 -\n1 1 1 2\n\"\"\") == \"4\"\n\n\"\"\"\na=input().split()\nn,m,t,op=int(a[0]),int(a[1]),int(a[2]),a[3]\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\nassert solution(\"9 2 7 -\\n1 1 1 2\\n\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\n\"\"\"\n\nimport sys\n\nfrom collections import deque\nfrom enum import Enum\n\nclass Op(Enum):\n    ADD = 1\n    MUL = 2\n    DIV = 3\n    SUB = 4\n\nclass KenKen:\n    def __init__(self, n, m, t, op):\n        self.n = n\n        self.m = m\n        self.t = t\n        self.op = op"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\nassert solution(\"9 2 7 -\\n1 1 1 2\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == 2\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''8 2 7 -\n1 1 1 2\n''') == '2'\nassert solution('''9 2 7 *\n1 1 1 2\n''') == '4'\nassert solution('''9 2 7 *\n1 1 1 2\n''') == '4'\nassert solution('''8 3 7 *\n1 1 1 2\n''') == '1'\nassert solution('''8 3 7 *\n1 1 1 2\n''') == '1'\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\nassert solution(\"9 2 7 -\\n1 1 1 2\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\nassert solution(\"9 2 7 -\\n1 1 1 2\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\nassert solution(\"9 2 7 -\\n1 1 1 2\\n\") == \"4\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8''') == '''3\n4\n3'''\nassert solution('''4 4\n1 2 5\n2 3 5\n3 4 5\n1 4 8''') == '''2\n3\n2\n1'''"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == \"2 3\\n4\\n3\"\nassert solution(\"6 6\\n1 2 2\\n1 3 6\\n1 4 2\\n1 5 6\\n1 6 3\\n1 6 2\\n1 2 3\\n5 6\\n2 4 2\\n2 5 3\\n3 4 4\\n3 5 2\\n4 5 3\") == \"1 1\\n2 1\\n3 3\\n4 1\\n5 2\"\nassert solution(\"8 8\\n1 2 1\\n1 3 8\\n1 4 1\\n1 5 8\\n1 6 1\\n1 7 8\\n1 8 3\\n5 1 8\\n2 3 1\\n2 4 1\\n2 5 7\\n2 6 1\\n3 4 1\\n3 5 7\\n3 6 1\\n4 5 1\\n4 6 1\\n4 7 2\\n6 7 2\\n7 7 3\") == \"1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == \"3\\n4\\n3\"\nassert solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == \"2\\n3\\n2\\n1\"\n\n----\n\n7 5\n1 2 2\n1 3 2\n2 3 2\n2 4 2\n3 4 2\n3 5 2\n4 5 2\nSample Output\n8\nExplanation\nThe shortest path from 1 to 5 is 1->3->5.\nThe shortest path from 1 to 5 is 1->4->5.\nSo, for each road, we can find the number of shortest paths containing that road.\n\"\"\"\n\nN, M = map(int, input().split())\n\nINF = float('inf')\nG = [[INF] * N for _ in range(N)]\nfor _ in range(M):\n    u, v, w = map(int, input().split())\n    G[u - 1][v - 1] = w\n    G[v - 1][u - 1] = w\n\nans = 0\nfor i in range(N):\n    for j in range(N):\n        if G[i][j] == INF:\n            continue\n        for k in range(N):\n            if G[j][k]!= INF and G[i][j] + G[j][k] < G[i][k]:\n                G[i][k] = G[i][j] + G[j][k]\n                ans += 1\n\nprint(ans % 1000000007)\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8') == '2\\n3\\n2\\n1'\nassert solution('4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8') == '3\\n2\\n3\\n2\\n1'\nassert solution('4 4\\n4 1 3\\n2 4 4\\n3 4 5') == '2\\n3\\n3\\n1'\nassert solution('4 4\\n1 3 3\\n2 3 3\\n3 4 3\\n4 3 3') == '2\\n1\\n1\\n1\\n1'\nassert solution('4 4\\n2 3 4\\n3 4 4\\n4 4 4') == '4\\n3\\n2\\n1'\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == \"3\\n4\\n3\"\nassert solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == \"2\\n3\\n2\\n1\""
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == \"2\\n3\\n2\\n1\"\nassert solution(\"5 5\\n1 2 5\\n2 3 5\\n3 4 5\\n4 5 8\\n1 5 10\") == \"3\\n3\\n2\\n1\"\n\n\"\"\"\n\n\"\"\"\n3\n1 2\n1 3\n2 3\n\"\"\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == \"3\\n4\\n3\"\n\nassert solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == \"2\\n3\\n2\\n1\""
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == \"3\\n4\\n3\"\nassert solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == \"2\\n3\\n2\\n1\"\n\n\"\"\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == \"3\\n4\\n3\"\nassert solution(\"4 2\\n1 2 5\\n2 3 5\\n1 4 8\\n\") == \"2\\n3\\n2\\n1\"\n\"\"\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n') == '3\\n4\\n3\\n2\\n1'\nassert solution('4 2\\n1 2 3\\n2 3 5\\n3 4 5\\n') == '2\\n1\\n1'\nassert solution('4 2\\n1 2 5\\n2 3 5\\n3 4 5\\n') == '2\\n1\\n1'\nassert solution('4 2\\n1 2 5\\n2 3 5\\n3 4 5\\n') == '2\\n1\\n1'\nassert solution('4 2\\n1 2 5\\n2 3 5\\n3 4 5\\n') == '2\\n1\\n1'\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n2 1\") == \"6\"\n\nassert solution(\"3 4\\n2 3 1\") == \"24\"\n\n\"\"\"\n\nfrom math import factorial\n\nN, K = map(int, input().split())\nF = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(K):\n    cnt += factorial(K - 1) // factorial(K - 1 - i) // factorial(i) * (F[i] - i)\n\nprint(cnt % (10 ** 9 + 7))\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"2 3\n2 1\"\"\") == \"6\"\nassert solution(\"\"\"3 4\n2 3 1\"\"\") == \"24\"\n\"\"\"\nfrom collections import Counter, defaultdict\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2\n2\n''') == '6'\nassert solution('''\n3\n4\n2 3 1\n''') == '24'\nprint('Success')\n\n-----\n4 3\n2 1 3 4\n\n24\n\n-----\n2 4\n1 1\n\n1\n\n-----\n3 5\n1 3 2 2\n\n1\n\n-----\n4 2\n1 2 3 4\n\n0\n\n-----\n4 1\n1 2 3 4\n\n0"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n2 1\") == \"6\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n2 1') == '6'\nassert solution('3 4\\n2 3 1') == '24'\nprint('Test pass.')\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 2\\n3 2 1\") == \"6\"\nprint(solution(\"1 2 3\\n2 3 1\"))\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n2 1') == 6\nassert solution('3 4\\n2 3 1') == 24\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 4\n2 3 1''') == '24'\nassert solution('''2 3\n1 2\n''') == '6'\nassert solution('''5 4\n5 5 5 5\n''') == '0'\nassert solution('''4 4\n4 4 4 4\n''') == '0'\nassert solution('''4 5\n4 5 4 5\n''') == '0'\n\nprint(solution(stdin))\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1') == '1'\nassert solution('2 1\\n1 1') == '3'\nassert solution('2 2\\n1 1\\n2 2') == '7'\nassert solution('3 1\\n2 1\\n3 2') == '8'\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n2 1\") == \"6\"\nassert solution(\"3 4\\n2 3 1\") == \"24\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 2 1\") == \"1\"\nassert solution(\"5\\n3 4 5 1 2\") == \"1\"\n\nimport json\nimport fileinput\nimport ast\nimport operator\nimport functools"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('5\\n3 4 5 1 2') == '1'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2\") == 2\nassert solution(\"5\\n3 4 5 1 2\") == 1\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"5\\n3 4 5 1 2\") == \"1\"\nassert solution(\"10\\n7 6 8 5 9 4 3 2 1\") == \"4\"\nassert solution(\"11\\n7 6 8 5 9 4 3 2 1\") == \"1\"\nassert solution(\"100\\n7 6 8 5 9 4 3 2 1\") == \"4\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"5\\n3 4 5 1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2''') == 2\nassert solution('''5''') == 1\nassert solution('''1''') == 1\nassert solution('''5''') == 1\nassert solution('''1 2 3 4 5''') == 2\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('1\\n2') == '0'\nassert solution('1\\n2\\n3') == '1'\nassert solution('1\\n2\\n3\\n4') == '2'\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('5\\n3 4 5 1 2') == '1'\nassert solution('5\\n1 2 3 4 5') == '2'\n\n\"\"\""
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 5 1 2\") == \"1\"\nassert solution(\"2 1\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n') == '9'\n\nprint(solution('3 3\\n1 3 1\\n2 1 2\\n1 1 1\\n'))"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\") == \"9\"\n\"\"\""
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 3 1\\n2 1 2\\n1 1 1') == '4'\nassert solution('3 3\\n5 2 6\\n11 1 3\\n2 1 2') == '9'"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('1 2\\n3 4') == 5\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 3 1\\n2 1 2\\n1 1 1') == '4'\nassert solution('2 2\\n3 3\\n4 5') == '0'"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\") == 9\nassert solution(\"3 3\\n1 3 1\\n2 1 2\\n1 1 1\") == 4\n\"\"\"\n\nimport sys\nfrom functools import reduce\nimport numpy as np"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 3 1\\n2 1 2\\n1 1 1\\n\") == \"4\"\n\nimport sys\n\nr, c = map(int, sys.stdin.readline().split())\nmatrix = [list(map(int, sys.stdin.readline().split())) for _ in range(r)]\n\nans = 0\nfor r_start in range(r):\n    for c_start in range(c):\n        for r_end in range(r_start, r):\n            for c_end in range(c_start, c):\n                if matrix[r_start][c_start] + matrix[r_end][c_end] <= matrix[r_start][c_end] + matrix[r_end][c_start]:\n                    ans = max(ans, matrix[r_start][c_start] + matrix[r_end][c_end])\nprint(ans)"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('3\\n4\\n5\\n6\\n1\\n2\\n1\\n3\\n') == '3'\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\") == \"3\"\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\") == \"3\"\nassert solution(\"4\\n1 3\\n2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\") == \"6\"\n\"\"\"\n\nN = int(input())\nV = list(map(int, input().split()))\nsuperiors = {int(input().split()[0]): int(input().split()[1]) for _ in range(N - 1)}\nV = set(V)\nans = 1\nfor i in V:\n    for j in superiors[i]:\n        if j not in V:\n            break\n    else:\n        ans += 1\nprint(ans)\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4') == '6'\nassert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4') == '3'\nassert solution('4\\n3 4 5 6\\n1 2\\n1 3\\n2 4') == '3'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\") == \"6\"\n\"\"\""
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\\n') == '6'\nassert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\\n') == '3'"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4') == '6'\n\"\"\""
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\") == \"6\"\nassert solution(\"4\\n3 4 5 6\\n1 2\\n1 3\\n2 4\") == \"3\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 10\") == '18'\nassert solution(\"5 8\") == '8'\nassert solution(\"17 144\") == '265'\nassert solution(\"121 121\") == '25'\nassert solution(\"89 98\") == '10'\n\n\"\"\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 10\\n5 8\") == \"18\\n8\"\n\"\"\""
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\\n\") == \"\"\nassert solution(\"1\\n1\\n\") == \"\"\nassert solution(\"1\\n1\\n1\\n\") == \"\"\nassert solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 10\\n5 8\\n') == '18\\n8'\nassert solution('3\\n17 144\\n121 121\\n89 98\\n') == '265\\n25\\n10'\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 10\\n5 8') == '18\\n8'\n\nfrom datetime import datetime\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    2\n    1 10\n    5 8\n    \"\"\"\n) == \"\"\"\n18\n8\"\"\"\n\nassert solution(\n    \"\"\"\n    3\n    17 144\n    121 121\n    89 98\n    \"\"\"\n) == \"\"\"\n265\n25\n10\"\"\"\n\nassert solution(\n    \"\"\"\n    4\n    17 144\n    121 121\n    89 98\n    7 4\n    \"\"\"\n) == \"\"\"\n25\n25\n10\"\"\"\n\nassert solution(\n    \"\"\"\n    5\n    17 144\n    121 121\n    89 98\n    7 4\n    17 4\n    \"\"\"\n) == \"\"\"\n25\n25\n10\"\"\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 10\\n5 8\") == \"18\\n8\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10''') == '''1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10'''\n\nassert solution('''1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10''') == '''1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10'''\n\nassert solution('''1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10''') == '''1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10'''\n\nassert solution('''1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10''') == '''1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10'''\n\nassert solution('''1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10''') == '''1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10'''"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 10') == '18'\nassert solution('5 8') == '8'\nassert solution('3 144') == '265'\nassert solution('17 144') == '10'\nassert solution('121 121') == '25'\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 10\\n5 8\\n') == '18\\n8'\n\n\"\"\""
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0\\n') == 0.5\n\n\"\"\"\n\nimport unittest\nimport random\nfrom collections import Counter\n"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0') == 0.5\n\n\"\"\"\n\nfrom typing import List\nfrom random import randrange\n"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0') == '0.50000000'\n\"\"\""
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\\n\") == \"0.50000000\"\nassert solution(\"5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\\n\") == \"12.50000000\"\n\"\"\""
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\") == 0.5\nassert solution(\"5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\") == 12.5\n\"\"\"\n\nimport math\nimport sys\n\n\"\"\"\nWe have a convex polygon with n vertices, and a convex polygon has at least 3 vertices.\nWe need to get k random vertices that are not collinear. \nWe need to get n - k random indices that are not collinear.\n\"\"\""
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\") == \"0.5\"\n\nassert solution(\"5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\") == \"12.5\"\n\n\"\"\"\n\n\nfrom math import acos, cos, sin, pi\n"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\") == \"0.50000000\"\n\"\"\"\n\nimport random"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\") == \"0.50000000\"\nassert solution(\"5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\") == \"12.50000000\"\n\"\"\"\n\nfrom collections import namedtuple\n\nN, K = [int(i) for i in input().split()]\nCake = namedtuple('Cake', ['x', 'y'])"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\"\n) == \"0.50000000\"\nassert solution(\n\"5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\"\n) == \"12.50000000\"\n\"\"\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\") == 0.5\n\"\"\"\n\nimport math\n\nn, k = map(int, stdin.readline().split())\nx, y = map(float, stdin.readline().split())\np = [float(stdin.readline().split()[0]), float(stdin.readline().split()[1])]\n\nwhile True:\n    x, y = map(float, stdin.readline().split())\n    if x == p[0] and y == p[1]:\n        break\np = [float(stdin.readline().split()[0]), float(stdin.readline().split()[1])]\n\nv = [[float(stdin.readline().split()[0]), float(stdin.readline().split()[1])] for _ in range(n)]\nv.insert(0, p)\n\nA = 0.0\nfor i in range(1, n + 1):\n    x1 = v[i - 1][0]\n    y1 = v[i - 1][1]\n    x2 = v[i][0]\n    y2 = v[i][1]\n    A += (x1 * y2 - x2 * y1) / 2.0\n\nA = abs(A)\nprint(A / math.sqrt(k))\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n') == '2'\n\"\"\""
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\nassert solution(\"4 0 4\\n0 2\\n0 1\\n2 1\\n2 3\\n\") == \"1\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n') == '2'\n\"\"\"\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.stdin = stdin\n\n    def solution(self) -> str:\n        pass"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n') == '2'\nassert solution('4 0 4\\n0 2\\n0 1\\n2 1\\n2 3\\n') == '1'\nassert solution('4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n') == '1'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 1 3\n0 1\n1 2\n2 3\n1\n''') == 2\n\nassert solution('''4 0 4\n0 2\n0 1\n2 1\n2 3\n''') == 1\n\nassert solution('''4 4 2\n1 2\n1 3\n2 3\n0\n''') == 0\n\nassert solution('''4 0 0\n1 2\n1 3\n2 3\n0\n''') == 0\n\nassert solution('''4 1 4\n0 1\n0 2\n1 2\n2 3\n3 1\n''') == 2"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n') == '2'\nassert solution('4 0 4\\n0 2\\n0 1\\n2 1\\n2 3\\n') == '1'\n\"\"\""
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1,2,1) == 6\nassert solution(2,2,2) == 30\n\n\"\"\"\n\nfrom itertools import permutations\n\nA, C, M = map(int, input().split())"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1\") == 6\nassert solution(\"2 2 2\") == 30\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\"\n\"\"\"\n\nfrom math import comb\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 1') == 6\nassert solution('2 2 2') == 30\nassert solution('1 1 3') == 0\nassert solution('4 2 4') == 20\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\"\n\"\"\""
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 1') == 6\n\"\"\""
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1\") == 6\nassert solution(\"2 2 2\") == 30\n\"\"\"\n\nfrom itertools import permutations\n\na, c, m = map(int, input().split())\nprimes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997}\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 1') == 6\nassert solution('2 2 2') == 30\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1\") == 6\nassert solution(\"2 2 2\") == 30\n\nSolution:\n\nnumbers = stdin.split()"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2020 2020 2020') == '2021 2020 2020'\nassert solution('2\\n1 9999999') == 'impossible'\n\n\"\"\""
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2020 2020 2020\") == \"2021 2020 2020\"\nassert solution(\"1 9999999\") == \"impossible\""
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n2020 2020 2020') == '2021 2020 2020'\nassert solution('3\\n2020 2020 2020') == '2021 2020 2020'\nassert solution('2\\n1 9999999') == 'impossible'\nassert solution('1\\n9999999') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2020 2020 2020') == '2021 2020 2020'"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(['1', '2', '3']) == '123'\nassert solution(['1', '9999999']) == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2020 2020 2020') == '2021 2020 2020'\nassert solution('2\\n1 9999999') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n2020 2020 2020''') == '2021 2020 2020'\nassert solution('''2\n999999 9999999''') == 'impossible'\nassert solution('''3\n1 9999999\n2020 2020 2020''') == '2021 2020 2020'\nassert solution('''1\n1''') == 'impossible'\nassert solution('''2\n999999 9999999\n999999''') == 'impossible'"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2020 2020 2020\") == \"2021 2020 2020\"\nprint(solution(\"2020 2020 2020\"))\n"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2020 2020 2020') == '2021 2020 2020'\nassert solution('2\\n999999 9999999') == 'impossible'\nassert solution('2\\n1 9999999') == 'impossible'\n\"\"\""
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n2020 2020 2020') == '2021 2020 2020'\nassert solution('3\\n2020 2020 2020') == '2021 2020 2020'\nassert solution('4\\n999999 9999999 9999999') == 'impossible'\nassert solution('4\\n99999 999999 999999') == 'impossible'\nassert solution('4\\n99999 999999 999999') == 'impossible'\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''30 70''') == '11'\nassert solution('''66 69''') == '2'\nassert solution('''1 9 10 11 12 15 16 18 20 26 29 30 32 33 36 38 39 42 45 48 51 54 55 57 59 63 66 69''') == '2'\nassert solution('''1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 1') == '0'\nassert solution('1 10') == '1'\nassert solution('10 10') == '0'\nassert solution('2 10') == '0'\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('30 70') == '11'\n\"\"\"\n\nl, r = map(int, stdin.split())\nn = 0\nfor i in range(l, r + 1):\n    if '4' not in str(i) and '6' * str(i).count('6') == str(i).count('8') and '8' * str(i).count('8') == str(i).count('6'):\n        n += 1\nprint(n % (10**9 + 7))"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"30 70\") == \"11\"\nassert solution(\"66 69\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'\n\"\"\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 20 30 40 50') == '1'\nassert solution('10 20 30 40 50 99 90') == '2'\nassert solution('10 20 30 40 50 99 91') == '0'\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"30 70\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"30 70\") == \"11\"\nassert solution(\"66 69\") == \"2\"\n\"\"\""
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\") == '2'\n\"\"\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\") == \"2\"\nassert solution(\"3 5 1\\n>>@<<\\n>~#~<\") == \"4\"\nassert solution(\"7 2 7\\n>>@<<<<>@\\n>~#~#~<~<\\n>>>>~>>>>~\\n>>>>~\") == \"4\"\nassert solution(\"7 4 7\\n>>@<<<<>@\\n>~#~#~<~<\\n>>>>~>>>>~\\n>>>>~\") == \"begin repairs\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 0\\n>@\\n>~') == '2\\n'\nassert solution('3 5 1\\n>>@<<\\n>~#~<') == '4\\n'\n\n\"\"\""
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"2 2 0\"\n) == \"2\"\nassert solution(\n\"3 5 1\"\n) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n2 2 0\n>@\n>~\n''') == '2'\nassert solution('''\n3 5 1\n>>@<<\n>~#~<\n>>>>~\n''') == '4'\nassert solution('''\n3 5 2\n>>@<<\n>~#~<\n>>>>~\n''') == 'begin repairs'\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\") == \"2\"\nassert solution(\"3 5 1\\n>>@<<\\n>~#~<\") == \"4\"\n\nprint(solution(\"3 5 1\\n>>@<<\\n>~#~<\"))\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 0\\n>@\\n>~') == '2'\nassert solution('3 5 1\\n>>@<<\\n>~#~<') == '4'\nassert solution('4 5 2\\n>>@<<\\n>~#~<\\n>>@<<') == '6'\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\") == \"2\"\nassert solution(\"3 5 1\\n>>@<<\\n>~#~<\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 2 0\n>@\n>~''') == '2'\nassert solution('''3 5 1\n>>@<<\n>~#~<\n>>>>~''') == '4'\n\n\"\"\""
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 0\\n>@\\n>~\\n') == '2'\nassert solution('3 5 1\\n>>@<<\\n>~#~<\\n>>>>~\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n\nprint('Success')\n\n\"\"\"\nimport re"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1=0') == '1'\nassert solution('0=0') == '0'\nassert solution('1=2') == '11'\nassert solution('1=3') == '13'\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n\nassert solution('1431755121654696175861=120') == '1+2+3+5+6+1+6+1+6+7+6+1+6+1+6+7+5+6+4+6+1+6+1+6+4+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+1+6+"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\nassert solution(\"1234567891011=123456789101\") == \"1+2+3+4+5+6+7+1=123456789101\"\nassert solution(\"100110011001101=11011110011101\") == \"1+0+1+1+0+1+1+0+1=11011110011101\"\nassert solution(\"1001100110011101=11011110011101\") == \"1+0+1+1+0+1+1+0+1=11011110011101\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\nassert solution
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n\"\"\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(143175) == '1431+75=120'\nassert solution(5025) == '5+025=30'\nassert solution(9893) == '9+892=891'\nassert solution(2742) == '2742'\nassert solution(5517) == '5517'\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"143175=120\"\n) == \"14+31+75=120\"\nassert solution(\n\"5025=30\"\n) == \"5+025=30\"\nassert solution(\n\"111211=22\"\n) == \"111211+2=22\"\nassert solution(\n\"111211=55\"\n) == \"111211+5=55\"\nassert solution(\n\"111211=22\"\n) == \"111211+2=22\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1') == '1 2'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1') == '1 2'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1') == '1 2'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1') == '1 2'\n\n\"\"\"\n\nfrom typing import Set"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n\") == \"-1\""
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n\") == '1 2'\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n\") == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n') == '1 2'\nassert solution(\n'8\\n1\\n3\\n2\\n4\\n5\\n6\\n7\\n1\\n') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3 4 5 6 7 8\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n') == '1 2'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n') == '-1'"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == '1 2'\n\nSample Case:\n8\n1\n2\n3\n4\n5\n6\n7\n1\n\nAnswer: -1\n\n-----Notes-----\n\n\"\"\""
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a\\nb\\n') == 'a\\nb'\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, N: int, S: List[int]) -> str:\n        S.sort()\n        i = 0\n        for j in range(len(S)):\n            if i < len(S)-1 and S[i] == S[i+1]:\n                continue\n            if self.is_pattern(S, i, j):\n                return''.join(map(str, S[i:j+1]))\n            i = j + 1\n        return '-1'\n    def is_pattern(self, S: List[int], i: int, j: int) -> bool:\n        for k in range(i, j):\n            if S[k] == S[j]:\n                return False\n        return True"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n8\n1\n2\n3\n4\n5\n6\n7\n1\n''') == '1 2'\n\n\"\"\"\n[+]Temporal marker            :  Wed, 18:24 | Mar 24, 20\n[+]Temporal marker untethered :  Wed, 18:36 | Mar 24, 20\n[+]Comments                  : *Help from https://www.geeksforgeeks.org/two-sums-two-arrays/\n                                *Two pointers, terefore O(n^2) solution.\n                                *Have the try-except block to deal with edge cases\n                                *It worked but had problems with certain edge cases\n                                *Couldn't figure out the logic in the last step\n                                *Oops, the code was way too complicated for this\n                                *I hope I'll revisit this problem at the next level\n                                *Solved this problem by\n                                *Time O(n) | Space O(n)\n[+]Level                      :\n[+]Tread speead               :\n[+]LINK                       : https://www.geeksforgeeks.org/find-subarray-with-given-sum/\n\"\"\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1101''') == '1'\nassert solution('''1010''') == '2'\nassert solution('''101101''') == '3'\nassert solution('''101101010''') == '4'\nassert solution('''101101010''') == '4'\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1101') == 1\nassert solution('10101010') == 5\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1101\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1101\") == 1\nassert solution(\"11010\") == 2\nassert solution(\"10101\") == 4\nassert solution(\"101010\") == 8\nassert solution(\"1111\") == 16\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"1110\") == \"2\"\nassert solution(\"1010\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1101') == '1'\nassert solution('10110110110') == '10'\n\"\"\"\nimport heapq"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1101\") == 1\nassert solution(\"101010\") == 10\n\"\"\""
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"101010\") == \"10\"\nassert solution(\"10111101010\") == \"10\"\nassert solution(\"10110111010\") == \"10\"\nassert solution(\"11111111010\") == \"10\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1101') == '1'\nassert solution('1110') == '1'\nassert solution('1111') == '1'\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\") == \"1\\n0\\n2\"\nassert solution(\"2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\") == \"3\\n0\\n2\"\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\") == \"3\"\n\"\"\"\n\nn, m = map(int, input().split())\nroutes = [list(map(int, input().split())) for _ in range(n)]\n\nencounters = [0 for _ in range(m)]\n\nfor i in range(n):\n    t = routes[i]\n    for j in range(m):\n        encounters[j] += t[j % len(t)]\n\nprint('\\n'.join(map(str, encounters)))\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 6 3 6\\n7 3 4 2 6 5 6 1\") == \"3\"\nassert solution(\"3 3\\n3 1 3 1\\n2 2 1\") == \"1\"\nassert solution(\"3 2\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\") == \"2\"\n\n\"\"\"\nimport sys\nfrom functools import reduce\n\nsys.setrecursionlimit(10 ** 5 + 1)"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3') == '1\\n0\\n2'\nassert solution('2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1') == '3\\n0\\n2'\n\"\"\"\n\nimport sys\nimport collections\n\nN, M = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\") == \"3\\n0\\n2\"\nassert solution(\"6 3\\n3 1 3 1\\n2 2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\\n1 2\") == \"1\\n0\\n2\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\") == \"1\\n0\\n2\"\nassert solution(\"2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\") == \"3\\n0\\n2\"\n\"\"\"\n\n\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\") == '1\\n0\\n2'\nassert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\") == '1\\n0\\n2'\n\n-----Explanation-----\nThere are two pairs of trucks:\ntruck 1 with route 3 1 3 1 and truck 2 with route 1 2\ntruck 2 with route 2 1\ntruck 3 with route 3 1 3 1 and truck 1 with route 1 2\nThe number of encounters of these pairs is:\n1) truck 1 and truck 2 arrive at the same place: 0 encounters\n2) truck 2 and truck 3 arrive at the same place: 0 encounters\n3) truck 1 and truck 3 arrive at the same place: 2 encounters\nThe total number of encounters of all the pairs is: 2\n\nSample Input 1:\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n\nSample Output 1:\n1\n0\n2\n\nSample Input 2:\n2 1\n4 1 6 3 6\n7 3 4 2 6 5 6 1\n1 2\n\nSample Output 2:\n3\n0\n2\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 6 3 6\") == \"2\"\nassert solution(\"3 1 3 1\") == \"0\"\nassert solution(\"3 3 1 3 1\") == \"2\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter, defaultdict\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n') == '0'\nassert solution('1\\n2\\n1\\n') == '1'\nassert solution('1\\n2\\n2\\n') == '0'\nassert solution('1\\n2\\n2\\n1\\n') == '1'\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\") == \"1\"\n\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == \"4.0\"\nassert solution(\"4 2\\n2 4 3 4\") == \"3.6666666666666665\"\n\"\"\"\n\n\"\"\"\nThe solution that doesn't seem to work"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.000000'\n\n\"\"\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0'\nassert solution('4 2\\n2 4 3 4') == '3.666666'\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == \"4.0\"\n\nassert solution(\"4 2\\n2 4 3 4\") == \"3.666666\"\n\n\"\"\""
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0'\nassert solution('4 2\\n2 4 3 4') == '3.666666'\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0'\nassert solution('4 2\\n2 4 3 4') == '3.666666'"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0'\nassert solution('4 2\\n2 4 3 4') == '3.666666'\n\n------END OF FILE------\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nleft, right = 0, k - 1\navg = 0\nwhile left < n:\n    avg += (a[right] - a[left]) / k\n    left += 1\n    right += 1\n    if right == n:\n        break\n    avg += (a[right] - a[left]) / k\n    left += 1\n    right += 1\n\nprint(avg)\n\n\"\"\"\n\u0422\u0435\u043c\u0430 3. \u0421\u0442\u0440\u043e\u043a\u0438 \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435\n\u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435\u043c, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e. \u041f\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0441\u043b\u043e\u0432\u0430 \u00ab\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u00bb \u0438\u0437 \u00ab\u0441\u0438\u043c\u0432\u043e\u043b\u00bb \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0441\u0442\u0440\u043e\u043a\u043e\u0439. \u041f\u0435\u0440\u0432\u043e\u0435 \u043f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0435\u0435 \u0432 \u043d\u0435\u0439 \u043e\u0434\u043d\u043e \u0438 \u043e\u0434\u043d\u043e \u0438 \u0442\u043e \u0436\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u0435\u0442 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u044d\u0442\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u0414\u0430\u043d\u044b \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043d\u0438\u0445 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435\u043c, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u043c \u0438\u0437 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043d\u0443\u043c\u0435\u0440\u0430\u0446\u0438\u0439 \u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0437\u043d\u0430\u043a\u043e\u0432 \u00ab\u0410\u00bb \u0438 \u00ab\u0418\u00bb. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0432 \u0441\u0435\u0431\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b. \u041a\u0430\u0436\u0434\u043e\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0432\u0438\u0434\u0430:\n\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 $A_1 = \\cdots = A_n$, \u0433\u0434\u0435 $A_i$ \u2013 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u043c\u0438\u043d\u0443\u0441\u043e\u0432 \u0438 \u043d\u0443\u043c\u0435\u0440\u0430\u0446\u0438\u0439.\n\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 $B_1 \\cdots = B_n$.\n\u0421\u043b\u0435\u0434\u0443\u0435\u0442 \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u043d\u043e \u0431\u044b\u0442\u044c \u0442\u0430\u043a\u0438\u043c \u0436\u0435, \u043a\u0430\u043a \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0440\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f:\n\u0412\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 1: $A_1 = -2$, $B_1 = -1$, $A_2 = \\cdots = A_n = A_1$.\n\u0412\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 2: $B_1 = \\cdots = B_n = B_1$.\n\u0420\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f 2 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 1 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043e \u043a \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044e 2 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0440\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 1.\n\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0437\u0430\u0434\u0430\u043d\u044b \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 $N$ \u0438 $K$. \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 $N$ \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0443\u043c\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0438\u043c \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432 \u0444\u043e\u0440\u043c\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f. \u0417\u0430\u0442\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0443\u043c\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0438\u043c \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432 \u0444\u043e\u0440\u043c\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430. \u0414\u043b\u0438\u043d\u0430 \u043a\u0430\u0436\u0434\u043e\ufffd"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0', 'bad output'\nassert solution('4 2\\n2 4 3 4') == '3.666666', 'bad output'\nprint('all ok')\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0'\nassert solution('4 2\\n2 4 3 4') == '3.666666'\n\nimport sys\nassert sys.version_info.major == 3\nassert sys.version_info.minor == 7\nassert sys.version_info.micro == 5\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0'\nassert solution('4 2\\n2 4 3 4') == '3.666666'"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0') == '0.750'\nassert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0') == '0.625'\n\"\"\""
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\nprint('Hooray!')\n\"\"\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0') == '0.750'\nassert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0') == '0.625'\n\"\"\""
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0') == '0.750'\nassert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0') == '0.625'\nassert solution('3 4 7 6\\n1.0 2.0 3.0 4.0\\n5.0 6.0 7.0 8.0\\n1.0 0.0 2.0 3.0\\n0.0 0.0 3.0 4.0') == '1.0'\nassert solution('3 4 7 6\\n1.0 2.0 3.0 4.0\\n5.0 6.0 7.0 8.0\\n1.0 0.0 2.0 3.0\\n0.0 0.0 3.0 4.0') == '0.125'\nassert solution('3 4 7 6\\n1.0 2.0 3.0 4.0\\n5.0 6.0 7.0 8.0\\n1.0 0.0 2.0 3.0\\n0.0 0.0 3.0 4.0') == '0.125'\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0') == '0.750'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == \"0.750\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == \"0.750\"\nassert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0\") == \"0.625\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0') == '0.750'\nprint(solution(stdin))\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0') == '0.750'\nassert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0') == '0.625'\nassert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0') == '0.625'\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == \"0.750\"\n\"\"\"\nfrom math import inf"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 2 4\\n0 3 6\\n4 0 3\") == \"2\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 4\\n0 3 6\\n4 0 3\\n\") == \"2\"\nassert solution(\"4 4\\n2 3 0 7\\n0 0 2 1\\n0 0 3 0\\n\") == \"37\"\nassert solution(\"2 2\\n1 1\\n\") == \"1\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 2 4\\n0 3 6\\n4 0 3\") == \"2\"\nassert solution(\"3 4\\n2 3 0 7\\n0 0 2 1\\n0 0 3 0\") == \"37\"\n\"\"\""
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2 4\\n0 3 6\\n4 0 3\\n\") == \"2\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin_lines) == expected_return"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 2 4\\n0 3 6\\n4 0 3\\n\") == \"2\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 4\\n0 3 6\\n4 0 3\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3') == '2'\n\"\"\""
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 0 7\\n0 0 2 1\\n0 0 3 0\") == \"37\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3') == 2\n\n\"\"\""
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == '10\\n14\\n18\\n16'\nassert solution(\"4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == '1\\n4\\n9\\n16'\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\\n\") == \"10\\n14\\n18\\n16\"\nassert solution(\"4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\\n\") == \"1\\n4\\n9\\n16\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"10\\n14\\n18\\n1\"\nassert solution(\"4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"1\\n4\\n9\\n16\\n1\"\nassert solution(\"4 4\\n1234\\n5 4\\n1 1\\n1 2\\n1 3\\n1 4\") == \"4\\n8\\n0\\n1\\n1\"\n\n-------------------------------------------------------"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"1\\n4\\n9\\n16\"\nassert solution(\"4 3\\n1234\\n1 1\") == \"10\\n14\"\n\"\"\"\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('12') == '12'\nassert solution('123') == '123'\nassert solution('1234') == '1234'\nassert solution('1234\\n1 1') == '1234\\n14'\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(input) == output\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"10\\n14\\n18\"\nassert solution(\"4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"1\\n4\\n9\\n16\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\ndials = list(map(int, stdin.readline().split()))\n\nfor _ in range(m):\n    a, b = map(int, stdin.readline().split())\n    ans = 0\n    for i in range(a - 1, b):\n        ans += dials[i]\n    print(ans)\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4') == '10\\n14\\n18'\nassert solution('4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4') == '1\\n4\\n9\\n16'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"10\\n14\\n18\\n16\"\n\"\"\"\n\nN, M = map(int, input().split())\n\nstdin = input()\n\ndials = [int(i) for i in stdin]\n\nfor i in range(M):\n    A, B = map(int, input().split())\n    sum = 0\n    for j in range(A, B+1):\n        sum += dials[j]\n    print(sum)"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\\n\") == \"10\\n14\\n18\\n16\\n\"\n\"\"\""
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\\n\") == '2'\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n\") == '1'\n\"\"\""
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\") == \"2\"\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\") == \"1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 3\\n1 3\\n2 3\\n3 4\\n') == '2'\nassert solution('5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n') == '1'\nassert solution('5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n') == '1'\nassert solution('4 2 3\\n1 3\\n2 3\\n3 4\\n') == '2'\nassert solution('5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 3\\n1 3\\n2 3\\n3 4') == '2'\nassert solution('5 2 4\\n1 3\\n3 4\\n2 4\\n4 5') == '1'\n\"\"\"\n\nn,k,m = [int(x) for x in input().split()]\nlines = []\nfor _ in range(m):\n    lines.append([int(x) for x in input().split()])\nlines.sort()\ncount = 0\nremain_count = k\nfor l in lines:\n    if l[1] <= n:\n        count += 1\n        remain_count -= 1\n    else:\n        break\n    if remain_count == 0:\n        break\nprint(count)\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\\n\") == \"2\"\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n\") == \"1\"\n\n\"\"\"\n\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\\n\") == \"2\"\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n\") == \"1\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 2 3\n1 3\n2 3\n3 4''') == '2'\n\"\"\"\nfrom collections import defaultdict\nfrom typing import Dict, List\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\\n\") == \"2\"\n\"\"\"\n\nimport math\nimport sys\nimport collections\n\nclass Solution:\n    def solution(self, input_string):\n        n, k, m = input_string.split()\n        n, k, m = int(n), int(k), int(m)\n        input_list = []\n        edges_dict = collections.defaultdict(list)\n        \n        for i in range(1, m + 1):\n            a, b = input_string.split()\n            a, b = int(a), int(b)\n            input_list.append((a, b))\n            edges_dict[a].append(b)\n            edges_dict[b].append(a)\n\n        return self.find_max_producers(n, k, m, edges_dict, input_list)\n\n    def find_max_producers(self, n, k, m, edges_dict, input_list):\n        # base case\n        if k == 0:\n            return n - 1\n        \n        if m == 0:\n            return n - 1\n        \n        # calculate the number of maximum producers for each node\n        num_of_producers = [0] * n\n        for x, y in input_list:\n            num_of_producers[x - 1] += 1\n            num_of_producers[y - 1] += 1\n\n        # find maximum number of producers\n        max_producers = 0\n        for i in range(n):\n            if num_of_producers[i] > k:\n                max_producers += 1\n\n        # for each node, remove the edges of other nodes\n        for x, y in input_list:\n            edges_dict[x].remove(y)\n            edges_dict[y].remove(x)\n\n        return max_producers + self.find_max_producers(n, k - 1, m - 1, edges_dict, input_list)"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\\n\") == \"2\"\n\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n\") == \"1\"\n\nassert solution(\"5 4 6\\n1 2\\n1 3\\n2 4\\n3 4\\n4 5\\n\") == \"0\"\n\nassert solution(\"6 6 8\\n1 2\\n1 3\\n2 4\\n3 4\\n4 5\\n5 6\\n\") == \"2\"\n\nprint(\"Success!\")\n\n----"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0') == 'no'\nassert solution('2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000') == 'yes'\nassert solution('2\\n9996 0 9997 0 0 1') == 'no'\n\"\"\""
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"no\"\nassert solution(\"2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\") == \"no\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0') == 'no'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10000 0 10000 10000 0 10000\\n\"\n        \"3\\n\"\n        \"10000 0 10000 10000 5000 5000\\n\"\n        \"5000 5000 10000 10000 0 10000\\n\"\n        \"0 0 0 1000 1000 0\") == \"no\"\n\nassert solution(\"9996 0 9997 0 0 1\\n\"\n        \"9999 0 10000 0 0 1\\n\"\n        \"2\\n\"\n        \"9997 0 9998 0 0 1\\n\"\n        \"9998 0 9999 0 0 1\") == \"no\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\\n\") == \"no\"\nassert solution(\"1\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"no\"\nassert solution(\"2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\") == \"no\"\n\"\"\""
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == 'no'\n\nimport io\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_solution1(self):\n        mock_input = io.StringIO(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\")\n        expected = \"no\"\n        actual = solution(mock_input)\n        self.assertEqual(actual, expected)\n\n    def test_solution2(self):\n        mock_input = io.StringIO(\"2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n\")\n        expected = \"no\"\n        actual = solution(mock_input)\n        self.assertEqual(actual, expected)"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"no\"\nassert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"yes\"\n\"\"\"\nimport math"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\\n') == 'no'\nassert solution('2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n') == 'no'\n\n\"\"\"\n\n\"\"\"\nSolution:\n(1) Make a set of all the points in each set of input triangles, and store it as a tuple.\n(2) This is slow, so we can speed it up with a hash set.\n(3) Remove the points that are in the set.\n(4) Check whether the number of remaining points are the same.\n\"\"\""
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n1 4') == 'NO\\n'\nassert solution('2 2\\n1 2\\n2 1') == 'YES\\n1 2\\n2 1\\n'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 3\\n1 4\") == \"NO\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 3') == 'YES\\n1 3\\n2 1\\n3 2'\nassert solution('4 3\\n1 2\\n1 3\\n1 4') == 'NO'\n\"\"\""
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 3\\n') == 'YES\\n1 3\\n2 1\\n3 2'\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2\\n2 3\\n1 3\\n\") == \"YES\\n1 3\\n2 1\\n3 2\\n\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n\") == \"NO\\n\"\nassert solution(\"1 1\\n\") == \"YES\\n\"\nassert solution(\"1 2\\n2 1\\n\") == \"NO\\n\"\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 3\\n') == 'YES\\n1 3\\n2 1\\n3 2'\nassert solution('4 3\\n1 2\\n1 3\\n1 4\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 2\\n1 3\\n1 4\") == \"NO\"\n\"\"\"\n\nN, M = map(int, input().split())\n\nG = {}\n\nfor _ in range(M):\n    A, B = map(int, input().split())\n\n    if A not in G:\n        G[A] = []\n    if B not in G:\n        G[B] = []\n\n    G[A].append(B)\n    G[B].append(A)\n\nhas_cycle = False\nfor vertex in G:\n    if len(G[vertex]) > 1:\n        has_cycle = True\n        break"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 3\\n') == 'YES\\n1 3\\n2 1\\n3 2\\n'\nprint(solution('4 3\\n1 2\\n1 3\\n1 4\\n'))"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 2\\n2 3\\n1 3\\n\") == 'YES\\n1 3\\n2 1\\n3 2'\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n\") == 'NO'\nassert solution(\"4 3\\n2 3\\n1 3\\n2 1\\n\") == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'NO'\nassert solution('1 2\\n3 4') == 'NO'\nassert solution('1 2\\n2 3') == 'NO'\nassert solution('1 2\\n2 3\\n1 3') == 'NO'\nassert solution('1 2\\n2 3\\n3 1') == 'NO'"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n0 > 1\\n1 = 2\\n0 = 2\") == \"inconsistent\"\nassert solution(\"5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4\") == \"consistent\"\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n0 = 1\\n1 = 2') == 'consistent'\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4') == 'consistent'\nassert solution('3 2\\n0 = 1\\n1 > 2') == 'inconsistent'\nassert solution('3 2\\n0 = 1\\n1 > 2\\n0 = 2') == 'inconsistent'\nassert solution('3 2\\n0 = 1\\n1 > 2\\n0 = 2\\n0 > 1') == 'inconsistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n0 > 1\\n1 = 2\\n0 = 2') == 'inconsistent'\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4') == 'consistent'\n\"\"\""
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n0 1\\n1 2\\n0 2') == 'inconsistent'\nassert solution('5 5\\n0 1\\n1 2\\n3 4\\n0 3\\n1 4') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n0 > 1\\n1 = 2\\n0 = 2') == 'inconsistent'\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4') == 'consistent'\n\n'''\n\nimport sys\n\nn, m = [int(e) for e in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n0 > 1\\n1 = 2\\n0 = 2') == 'inconsistent'\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4') == 'consistent'\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4\\n3 > 4') == 'consistent'\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4\\n3 > 4') == 'consistent'\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4\\n3 = 4') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'inconsistent'\nassert solution('>\\n=\\n=\\n>') == 'inconsistent'\nassert solution('=\\n=\\n=\\n>') == 'consistent'\n'''"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n0 1\\n1 2\\n0 2\") == \"inconsistent\"\nassert solution(\"3 2\\n0 1\\n1 2\\n0 2\") == \"consistent\"\nassert solution(\"5 5\\n0 1\\n1 2\\n3 4\\n0 4\") == \"inconsistent\"\nassert solution(\"5 5\\n0 1\\n1 2\\n3 4\\n0 4\") == \"consistent\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1\\n1 2\\n3 4\") == \"inconsistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n0 > 1\\n1 = 2\\n0 = 2') == 'inconsistent'\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4') == 'consistent'\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == '1.57079633'\nassert solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\") == '41938.65135885'\nprint('Success')"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\nassert solution('4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0') == '41938.65135885'\nassert solution('4\\n-1 -1 -1\\n1 1 1\\n0 0 0\\n0 0 1') == '0.0'\nassert solution('4\\n-1 1 1\\n1 1 1\\n0 0 0\\n0 0 1') == '1.0'\nassert solution('4\\n0 -1 1\\n1 1 1\\n0 0 0\\n0 0 1') == '1.0'\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == \"1.57079633\"\nassert solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\") == \"41938.65135885\"\nprint('The local tests are done. Click on \"Check\" for more details.')"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == \"1.57079633\"\nassert solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\") == \"41938.65135885\"\n\n\"\"\""
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\nassert solution('4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0') == '41938.65135885'\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\nassert solution('4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0') == '41938.65135885'\n\"\"\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == '1.57079633'\nprint('Test pass.')"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '1.57079633'\n\nassert solution('''\n4\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n''') == '41938.65135885'\n\nassert solution('''\n3\n0 0 0\n0 0 0\n0 0 0\n''') == '0.0'\n\nprint('Success')\n\n'''\n\u0417\u0430\u0434\u0430\u0447\u0430 \u043f\u0440\u043e \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0435 \u0441\u0442\u0430\u043d\u0446\u0438\u0438\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \"\u0421\u0442\u0430\u043d\u0446\u0438\u0438\" \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442\u0441\u044f. \u0412\u0430\u043c \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c, \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043b\u0438 \u0441\u0442\u0430\u043d\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0439 \u0442\u0435\u0440\u043c\u0438\u043d.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n@stations_dec\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == '1.57079633'\nassert solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\") == '41938.65135885'\n\nassert solution(\"5\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n1 1 0\") == '1.047197551'\nassert solution(\"5\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n1 1 0\") == '100.0000000'\n\nassert solution(\"5\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n1 1 0\\n-1 1 0\") == '100.0000000'\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11\\nsabcabcfabc') == '3'\nassert solution('18\\ntrutrutiktiktappop') == '4'\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('abc') == 0\nassert solution('aa') == 0\nassert solution('abcabcabc') == 0\nassert solution('aba') == 0\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11\\nsabcabcfabc') == '3'\nassert solution('18\\ntrutrutiktiktappop') == '4'\n\"\"\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\\nsabcabcfabc\") == '3'\nassert solution(\"18\\ntrutrutiktiktappop\") == '4'\n\"\"\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == res\nprint(res)\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"sabcabcfabc\") == 3\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11\\nsabcabcfabc') == '3\\n'\n\"\"\"\n\nimport re"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('a') == 1\nassert solution('aaaaaaaa') == 1\nassert solution('aaa') == 2\nassert solution('abcdefgh') == 0\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11\\nsabcabcfabc') == 3\nassert solution('18\\ntrutrutiktiktappop') == 4\n\"\"\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\\n1 2 3\") == \"2\"\nassert solution(\"6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\") == \"5\"\n\"\"\"\n\nimport sys\n\nN = int(input())\nx = sorted(map(int, input().split()))\ny = sorted(map(int, input().split()))\n\nx_i, y_i = 0, 0\nshuffles = 0\nwhile x_i < N and y_i < N:\n    if x[x_i] < y[y_i]:\n        shuffles += 1\n        x_i += 1\n    elif x[x_i] > y[y_i]:\n        shuffles += 1\n        y_i += 1\n    else:\n        x_i += 1\n        y_i += 1\n\nprint(\"smallest\" if shuffles <= 1000000000 else \"huge\")\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 3 1\\n3 1 2\") == \"2\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'huge'\nassert solution('3\\n1 2 3') == '2'\nassert solution('4\\n2 3 1 4') == '5'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 3 1\") == \"2\"\nassert solution(\"6\\n5 1 6 3 2 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3 1\") == 2\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 3 1\\n3 1 2') == '2'\nassert solution('6\\n5 1 6 3 2 4\\n4 6 5 1 3 2') == '5'\n\"\"\""
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n2 3 1\n3 1 2''') == '2'\nassert solution('''6\n5 1 6 3 2 4\n4 6 5 1 3 2''') == '5'\nassert solution('''7\n5 7 2 4 1 3\n4 7 1 5 2 3''') == '5'\nassert solution('''11\n5 8 4 9 7 3 2 1\n2 3 6 7 8 4 9 5 1''') == '12'\nassert solution('''100\n49 76 48 16 77 86 69 22 20 42 87 35 25 97 15 94 21 29\n98 70 48 48 26 43 93 46 85 44 16 51 21 52 50 37 44\n83 42 80 70 47 36 20 43 96 92 84 44 35 33 32 38 47\n25 31 16 88 94 51 59 94 49 99 94 36 51 73 49 52\n70 44 58 77 33 90 97 66 34 93 93 71 57 50 33 86\n26 75 26 39 36 35 65 48 26 97 35 99 38 50 66 62\n15 82 87 43 40 42 39 89 91 63 21 19 17 71 52 58\n82 18 86 58 95 83 63 32 21 43 67 62 61 96 79\n52 62 91 70 33 92 46 49 86 35 93 62 91 95 82\n67 61 43 79 36 41 23 66 70 32 72 34 89 68\n73 36 92 94 42 46 65 81 36 48 75 94 43 31\n93 67 55 17 68 20 57 68 83 24 94 23 43 24\n73 21 72 68 85 93 48 62 37 21 36 68 55 94\n18 93 78 62 89 69 70 49 62 32 58 45 46 93\n23 85 31 93 49 33 94 93 21 38 91 15 93 57\n68 83 46 52 66 38 45 93 31 92 16 94 10 98\n44 86 73 36 98 31 62 37 23 82 95 83 76 32\n89 81 70 33 42 79 37 82 21 29 16 92 56 20\n31 17 54 69 31 40 52 70 20 72 98 24 36 85\n40 31 95 72 18 30 84 34 53 98 36 31 42 53\n62 59 51 93 68 93 52 85 19 15 33 94 43 46\n99 93 34 55 89 61 72 23 51 75 58 82 19 36\n31 38 80 99 21 91 96 93 94 79 89 59 85 47\n99 90 53 48 96 72 20 62 43 84 92 18 91 71\n72 40 52 49 94 28 36 62 61 97 64 77 93 94\n48 75 36 51 42 77 96 60 42 34 74 16 93 31\n94 96 70 62 58 21 79 52 19 36 38 43 34 68\n41 93 55 98 23 73 55 93 52 49 83 36 66 33\n68 40 94 98 57 70 37 95 63 33 46 55 20 94\n77 34 43 62 69 25 33 96 94 45 96 40 40 60\n89 46 68 31 47 67 81 78 39 27 53 49 99 19\n75 36 84 53 71 36 52 19 24 94 66 41 99 87\n52 50 52 88 61 36 93 89 10 98 90 34 63 83\n54 96 83 37 49 91 32 24 66 69 73 26 32 78\n79 47 71 66 89 33 61 32 42 21 65 62 51 29\n84 54 66 90 97 66 52 60 71 34 84 94 70 88\n63 35 90 97 92 21 63 67 96 20 87 31 47 51\n22 43 60 67 82 99 39 68 77 20 15 52 50 41\n71 23 59 80 64 91 52 42 91 30 43 52 57 32\n23 96 82 69 76 16 92 83 44 92 97 92 67 73\n64 71 27 53 77 53 58 10 13 35 99 67 57 53\n90 51 95 34 37 18 30 86 82 56 75 31 66 51\n42 57 60 64 84 75 64 19 49 55 45 43 71 53\n97 20 31 17 36 26 55 97 62 47 77 24 59 20\n53 89 63 86 56 76 98 55 67 85 82 82 53 91\n20 59 36 90 65 32 20 91 69 34 64 60 20 82\n54 29 61 77 57 65 59 23 30 41 73 48 93 43\n37 31 27 61 90 61 65 93 38 74 34 24 63 17\n99 71 92 28 64 89 96 43 33 75 95 96 32 42\n62 70 94 87 20 68 63 67 64 87 82 40 49 36\n25 97 57 66 24 33 83 20 97 52 98 41 91 83\n27 96 94 35 73 65 21 23 75 91 41 41 54 88\n39 21 42 53 95 64 88 82 77 79 55 75 76 21\n89 75 81 36 66 63 42 52 21 45 33 93 79 68\n64 72 45 37 99 94 99 73 34 50 80 83 18 82\n74 33 54 78 93 53 20 53 44 42 16 21 42 96\n40 52 90 66 48 94 42 47 68 43 51 34 28 81\n77 55 97 46 61 97 97 85 83 27 93 70 36 78\n76 55 75 63 36 57 37 38 50 83 83 81 96 87\n95 82 21 94 96 36 41 43 86 72 46 60 76 91\n57 64 20 75 32 82 42 96 94 53 42 37 93 86\n15 52 24 74 36 61 62 70 79 62 75 83 14 36\n50 55 99 99 23 51 54 36 93 60 93 52 96 65\n67 90 23 20 69 70 70 97 94 77 38 57 96 94\n86 70 43 74 62 38 97 55 72 32 51 73 12 43\n54 16 86 67 16 23 97 63 20 83 52 75 31 32\n24 35 94 90 97 65 93 13 29 81 35 86 38 47\n16 50 42 95 83 96 94 51 84 46 59 44 32 62\n32 82 18 19 56 95 87 66 85 75 76 56 36 76\n64 95 49 83 96 79 74 68 64 32 35 87 35 38\n52 92 24 89 91 27 91 53 64 65 16 94 92 78\n78 63 56 32 36 67 65 42 97 66 18 93 60 59\n38 66 21 44 93 70 76 75 42 66 42 36 26 89\n81 97 57 94 84 57 47 48 25 52 38 23 34 20\n52 93 18 91 93 76 84 43 88 44 41 40 98 99\n63 28 97 94 40 63 91 50 21 37 97 45 83 88\n68 21 62 36 44 65 21 79 94 36 66 30 47 15\n99 96 94 97 62 63 45 44 64 78 42 91 27 75\n75 34 96 55 96 72 64 65 51 23 66 95 24 62\n81 95 97 55 91 58 75 83 17 93 82 79 23 18\n52 43 91 11 96 90 85 58 23 82 91 96 81 96\n92 70 53 19 96 99 63 94 93 36 48 71 98 73\n53 42 37 36 21 37 95 54 79 33 42 52 53 82\n86 58 69 83 96 52 82 61 83 93 73 93 63 60\n42 66 74 82 46 93 79 79 46 75 41 44 90 89\n43 71 55 66 64 18 59 69 46 71 76 95 66 68\n34 79 45 71 49 82 53 51 78 32 54 41 69 36\n66 38 69 91 97 99 19 80 79 96 79 53 99 99 98\n35 38 81 46 42 35 38 18 82 85 86 94 65 15\n77 51 93 62 54 65 40 44 36 18 78 33 36 95\n66 33 36 44 61 43 99 32 21 83 61 29 33 56\n48 63 97 69 84 68 94 91 23 59 82 66 79 42\n97 82 68 36 68 32 95 96 96 23 93 63"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n2 3 1') == '2'\nassert solution('6\\n5 1 6 3 2 4') == '5'\n\"\"\""
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3 1\\n3 1 2\") == \"2\"\nassert solution(\"6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 3 1\\n3 1 2') == 2\n\nassert solution('6\\n5 1 6 3 2 4\\n4 6 5 1 3 2') == 5\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\") == \"4\"\n\"\"\"\n\nimport math\n\nn, p = map(int, input().split())\nt = list(map(int, input().split()))\n\nt = sorted([0] + t + [50000000])\n\ns = [0] * (n + 1)\ne = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n    s[i] = s[i - 1] + t[i]\n    e[i] = e[i - 1] + t[i]\n\nres = 0\nfor i in range(p):\n    start = s[i]\n    end = e[i]\n    score = 0\n    for j in range(i, n):\n        if end > s[j + 1]:\n            break\n        score = 2\n        while start < e[j] and start < end:\n            start += math.ceil(math.sqrt(start)) + 1\n            score += 1\n        res += score\n\nprint(res)\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\") == 4\n\nprint(solution(\"3 1\\n0 10 20\\n0 10\"))\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\") == 4\n\"\"\""
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n0 10\\n0 10\") == \"4\"\nassert solution(\"6 1\\n0 10 20 26 40 50\\n0 40\") == \"9\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 10 20 26 40 50') == '9'\nassert solution('1 10 20 26 40 50') == '9'\nassert solution('10 10 20 26 40 50') == '19'\nassert solution('0 10 20') == '4'\nassert solution('1 10 20') == '5'\n\"\"\"\n\na, b = map(int, stdin.split())\nnotes = list(map(int, stdin.split()))\nsp = list(map(int, stdin.split()))\n\nleft, right = 0, len(notes) - 1\nres = 0\n\nwhile left < len(notes) and right >= 0:\n    if notes[left] < sp[right]:\n        res += 1\n        left += 1\n    else:\n        right -= 1\n        left += 1\n\nprint(res)\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n0 10 20\\n0 10') == '4'\nassert solution('6 1\\n0 10 20 26 40 50\\n0 40') == '9'\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n0 10 20\\n0 10\\n') == '4'\nassert solution('6 1\\n0 10 20 26 40 50\\n0 40\\n') == '9'\n\"\"\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n0 10\\n') == '11'\n\n'''\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n0 10 20\\n0 10') == '4'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n0 1\\n1 1\") == \"3\"\nassert solution(\"3 1\\n0 1\\n0 1\\n0 1\") == \"3\"\nassert solution(\"3 1\\n0 1\\n1 1\\n1 1\") == \"4\"\nassert solution(\"3 1\\n1 1\\n0 1\\n0 1\") == \"2\"\nassert solution(\"3 1\\n1 1\\n0 1\\n1 1\") == \"1\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])''') == 'not equal'\nassert solution('''sorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]''') == 'equal'"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == b\nprint(solution(a))\n\nhttps://app.codility.com/demo/results/training3SQKQ9-8G4/\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]\") == \"equal\"\n\n\"\"\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\") == \"equal\"\n\"\"\"\n\nimport random\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]\") == \"equal\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom itertools import permutations, combinations\nfrom math import factorial\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])') == 'not equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]') == 'equal'\n\n\"\"\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    'concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])') == 'not equal'\nassert solution(\n    'sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]') == 'equal'\n\"\"\"\n\nimport re\nimport math\nimport random\nimport collections"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == e\nprint(solution(a))\n\n\"\"\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'Oh no'\nassert solution('1 2') == 'Oh no'\nassert solution('1 3') == '1'\nassert solution('1 2 3') == 'Oh no'\nassert solution('2 3') == 'Oh no'\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\"\n) == \"Oh no\"\nassert solution(\n    \"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\"\n) == \"1\"\n\"\"\"\n\n\n\"\"\"\nHints:\n\nConsider the game where Unnar and Enemy are given a set of $n$ sets of numbers, A1, A2,..., An. When Unnar goes to area Ai, he can choose to go to the next area Ai+1 or Ai-1. Enemys have access to a set of $m$ sets of numbers, B1, B2,..., Bm. When the enemy goes to area Bi, he can choose to go to the next area Bi+1 or Bi-1.\n\nUnnar's goal is to get to the $n$th area. The player loses when he runs out of health or when he goes to an area with no enemies and gives up to the next area.\n\nEnemy's goal is to get to the $n$th area. The player loses when he goes to an area with no enemies and gives up to the next area.\n\nYou will solve this problem by returning to the area in the cave-system with the maximum health points, the area in the cave-system with the minimum health points, or a tie between the areas with maximum and minimum health points.\n\nInput:\n    The first line of input contains two integers A and H where A is the number of attack points of Unnar and H is his current health points.\n    The next line contains two integers n and m where n is the number of areas in the cave-system and m is the number of one-way passages.\n    The next m lines contain four integers a, b, a, h where a is the area from which the passage leads to the area with the bth area and h is the number of attack points and health points of the enemy in the area.\n\nOutput:\n    Return one of the areas with the maximum health points, the area with the minimum health points, or a tie between these areas.\n\nConstraints:\n    1\u2264A,H\u226410^9\n    1\u2264n,m\u226410^5\n    1\u2264a,b\u2264n\n    1\u2264h\u226410^9\n\nExample:\nInput:\n    1 2\n    3 2\n    1 2 1 2\n    2 3 1 2\nOutput:\n    Oh no\n\nInput:\n    1 2\n    3 2\n    1 2 1 2\n    2 3 1 2\nOutput:\n    1\n\"\"\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n3 2\\n1 2 1 2\\n2 3 1 2') == 'Oh no'\nassert solution('1 3\\n3 2\\n1 2 1 2\\n2 3 1 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2\\n3 2\\n1 2 1 2\\n2 3 1 2') == 'Oh no'\nassert solution('1 3\\n3 2\\n1 2 1 2\\n2 3 1 2') == '1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\nassert solution(\"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\"\n\n\"\"\"\n\nA, H = map(int, input().split())\nn, m = map(int, input().split())\n\nd = [list(map(int, input().split())) for _ in range(m)]\n\npassages = [[] for _ in range(n)]\n\nfor passage in d:\n    passages[passage[0] - 1].append([passage[1], passage[2]])\n\nhealth_min = H\nhealth_max = A\nmax_health = H\n\nwhile max_health > 1:\n\n    for i in range(n):\n        for passage in passages[i]:\n            if passage[0] == i + 1:\n                if max_health <= health_max - passage[1]:\n                    max_health = health_max - passage[1]\n                health_max -= passage[1]\n                health_min -= passage[1]\n\n\nprint(max_health)\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3\\n3 2\\n1 2 1 2\\n2 3 1 2') == 'Oh no'\nassert solution('1 4\\n3 2\\n1 2 1 2\\n2 3 1 2') == '1'\nassert solution('1 2\\n3 2\\n1 2 1 2\\n2 3 1 2') == 'Oh no'\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\n3 2\\n1 2 1 2\\n2 3 1 2') == 'Oh no'\n\nassert solution('1 3\\n3 2\\n1 2 1 2\\n2 3 1 2') == '1'\n\nassert solution('1 3\\n3 3\\n1 2 1 2\\n2 3 1 2') == '1'\n\nassert solution('1 2\\n3 2\\n1 2 1 2\\n2 3 1 2') == '1'\n\nassert solution('1 3\\n3 3\\n1 3 1 3\\n3 3 1 3') == 'Oh no'"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open('./test_input.txt').read()) == 'Oh no'\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n3 2\\n1 2 1 2\\n2 3 1 2') == 'Oh no'\nassert solution('1 3\\n3 2\\n1 2 1 2\\n2 3 1 2') == '1'\nassert solution('1 3\\n3 3\\n1 2 1 2\\n2 3 1 2') == 'Oh no'\n\n---\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\"\nassert solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\""
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2\") == \"3\"\nassert solution(\"5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"impossible\""
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2') == '3'\nassert solution('5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1') == 'impossible'\n\n\"\"\""
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2\") == \"3\"\nassert solution(\"5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"impossible\"\nassert solution(\"5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"impossible\"\nassert solution(\"5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"impossible\"\n\n-----Instructions-----\n1. Read in the input as provided in the description. The first line contains two integers $1 \\leq n,m \\leq 200\\; 000$, indicating the number of airports and routes, respectively. Each of the next $m$ lines describes a route by three integers $1 \\leq a, b \\leq n$ and $c \\in \\{ 0,1,2\\}$ giving the airports the route connects and the number of lounges needed at that airport.\n\n2. The output is the number of lounges that Amanda Air needs to build, if she will satisfy her requirements, if at all possible.\n\n3. Print an error message in case of invalid input.\n\n4. Keep the file solution.py open in an editor and modify it according to the description.\n\n5. Test your solution by running it in the terminal.\n'''\n\n'''\nfrom math import gcd\nn, m = map(int, input().split())\n\ns = []\nfor i in range(m):\n    a, b, c = map(int, input().split())\n    if c == 0:\n        s.append([a, b, c])\n    elif c == 1:\n        s.append([a, b, c])\n    else:\n        s.append([b, a, c])\n\nq = int(input())\nc = [list(map(int, input().split())) for _ in range(q)]\n\nans = 0\nfor i in range(m):\n    a, b, c = s[i]\n    if c == 0:\n        if c == len(c):\n            ans += 1\n        else:\n            if a in c:\n                ans += 1\n            else:\n                if b in c:\n                    ans += 1\n    else:\n        if c == len(c):\n            if a in c:\n                ans += 1\n            else:\n                if b in c:\n                    ans += 1\n        else:\n            if a in c and b in c:\n                ans += 1\n            else:\n                if a in c:\n                    ans += 1\n                if b in c:\n                    ans += 1\nprint(ans)\n'''\n\nn, m = map(int, input().split())\n\ns = []\nfor i in range(m):\n    a, b, c = map(int, input().split())\n    if c == 0:\n        s.append([a, b, c])\n    elif c == 1:\n        s.append([a, b, c])\n    else:\n        s.append([b, a, c])\n\nq = int(input())\nc = [list(map(int, input().split())) for _ in range(q)]\n\nans = 0\nfor j in range(q):\n    r = 0\n    for i in range(m):\n        a, b, c = s[i]\n        if c == 0:\n            if c == len(c):\n                r += 1\n            else:\n                if a in c:\n                    r += 1\n                else:\n                    if b in c:\n                        r += 1\n        else:\n            if c == len(c):\n                if a in c:\n                    r += 1\n                else:\n                    if b in c:\n                        r += 1\n            else:\n                if a in c and b in c:\n                    r += 1\n                else:\n                    if a in c:\n                        r += 1\n                    if b in c:\n                        r += 1\n    ans += r\nprint(ans)\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2\\n') == '3'\nassert solution('5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\\n') == 'impossible'\n\n\"\"\""
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2\") == \"3\"\nassert solution(\"5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"impossible\"\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2') == '3'\nassert solution('5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1') == 'impossible'"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2') == '3'\n\nassert solution('5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1') == 'impossible'\n\nprint('Success')\n\n-----Explanation-----\nIn this sample, it is possible to construct 3 lounges by following the following routes:\n\nRoute 1 connects airports 1 and 2, so a lounge at those airports is necessary.\nRoute 2 connects airports 2 and 3, so a lounge at those airports is necessary.\nRoute 3 connects airports 3 and 4, so a lounge at those airports is necessary.\nRoute 4 connects airports 4 and 1, so a lounge at those airports is necessary.\nSince these are all the routes that connect airports 1 and 2, this is enough lounges for Amanda Air to be satisfied.\n\nSample Input 2 is impossible because the routes 1 and 2 connect a lounge to each other and cannot be built by Amanda Air.\n\"\"\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2') == '3'\n\nassert solution('5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1') == 'impossible'"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2') == '3'\n\nSample Output:\n3\n\nSample Input:\n5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\nSample Output:\nimpossible\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2\") == \"3\"\nassert solution(\"5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"impossible\"\n\"\"\"\n\nn, m = map(int, input().split())\nmat = [[0] * n for i in range(n)]\nfor i in range(m):\n    a, b, c = map(int, input().split())\n    mat[a - 1][b - 1] += c\n\ndp = [[0] * n for i in range(n)]\ndp[0][0] = mat[0][0]\n\nfor i in range(n):\n    for j in range(n):\n        if j == 0:\n            if i == 0:\n                dp[0][0] = mat[0][0]\n            else:\n                dp[0][j] = dp[0][j - 1] + mat[0][j]\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1] + mat[i][j], dp[i - 1][j] + mat[i][j])"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    1 1 1 1 3\n    \"\"\") == \"2\"\nassert solution(\n    \"\"\"\n    22\n    \"\"\") == \"4\"\nassert solution(\n    \"\"\"\n    2 1 1 1 3\n    \"\"\") == \"no quotation\"\n\nassert solution(\n    \"\"\"\n    1 2 3 4 5 6 7 8 9 10 11 12\n    \"\"\") == \"1\"\nassert solution(\n    \"\"\"\n    12 11 10 9 8 7 6 5 4 3 2 1\n    \"\"\") == \"2\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 1 1 3') == 2\nassert solution('22') == 4\n\"\"\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1 1 3') == '2'\nassert solution('22') == '4'"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 1 1 3') == 2\nassert solution('1\\n22') == 4\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1 1 3\") == 2\n\nassert solution(\"22\") == 4\n\"\"\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(solution(input()))\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 1 1 3') == '4'\nassert solution('22') == '4'\nassert solution('4 1 1 1 3') == '2'\nassert solution('1') == 'no quotation'\nassert solution('1 2 2 2 3 3 3 4 3 4') == 'no quotation'\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1 1 3\") == \"2\"\nassert solution(\"22\") == \"4\"\n\"\"\"\n\nN = int(input())\ns = list(map(int, input().split()))\ns_1 = [0 for i in range(N)]\ns_2 = [0 for i in range(N)]\nk = 0\nfor i in s:\n    if i == 1:\n        k += 1\n    elif i == 2:\n        k = 1\n    s_1[s.index(i)] = k\nfor i in range(N):\n    if s[i] == 2:\n        k += 1\n    elif s[i] == 1:\n        k = 1\n    s_2[i] = k\n\nans = 0\nfor i in range(N):\n    if s_1[i] == s_2[i]:\n        ans = max(ans, s_1[i])\nprint(ans)\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 1 1 3') == '4'\nassert solution('22') == '4'\nassert solution('2 1 1 1 3\\n4 1 1 1 1\\n') == '2'\nassert solution('2 1 1 1 3\\n4 1 1 1 1\\n') == '2'\n\n-----Problem-----\n\nYou are given a string, that consists of the following types of characters:\n\na string of parenthesis, \"(\" or \")\";\nquotation marks, single quotes (') or double quotes (\")\";\narithmetic operators, including negation (-), unary plus +, and unary minus -, in the format: +, -, -a, a+, a-, a-a, aa, a-, and a--;\nnon-alphanumeric characters;\nwhitespaces, including tabulation, newline, and carriage return characters.\n\nNote, that the string can contain any of the above characters. Also, all the operands are always in the same order. For example, if the string is \"1 + (3 - (2 + 2))\", then 1 is the first operand, + is the operation, - is the second operand, 2 is the first operand, and 2 is the second operand.\n\nYou have to calculate the expression in the string, and return the result as a string as well.\n\nInput: A string.\n\nOutput: A string.\n\nPrecondition:\nThe input string does not contain any leading or trailing spaces.\n\n2 + (3 - (2 + 2))\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 1 1 3\") == \"2\"\nassert solution(\"1\\n22\") == \"4\"\nassert solution(\"3\\n1 1 2\") == \"2\"\nassert solution(\"2\\n22\") == \"4\"\nassert solution(\"5\\n22 22 22 22 22\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 5\") == \"3\"\nassert solution(\"4 1 2 3\") == \"2\""
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 5\") == \"3\"\nassert solution(\"4 1 2 3\") == \"2\""
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 5\") == \"3\"\nassert solution(\"4 1 2 3\") == \"2\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 5\") == \"3\"\nassert solution(\"4 1 2 3\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 5\") == \"3\"\nassert solution(\"4 1 5 2\") == \"2\""
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3 1 5\") == \"3\"\nassert solution(\"4\\n1 2 3 4\") == \"2\""
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3 1 5\") == 3\nassert solution(\"4\\n1 2 3 4\") == 2\nassert solution(\"6\\n1 2 3 4 5 6\") == 5\nassert solution(\"7\\n1 2 3 4 5 6 7\") == 6\n\n\"\"\"\nfrom __future__ import annotations\nimport math\nfrom typing import List, Set"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n3 1 5') == '3'\n\"\"\"\n\nn = int(stdin.readline().strip())\nnums = sorted(map(int, stdin.readline().strip().split()))"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 5\") == \"3\"\nassert solution(\"4 1 2 3\") == \"2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n3 1 5') == '3'\nassert solution('4\\n1 2 3 4') == '2'"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a+b-c') == '- +d-'\nassert solution('a-b+d-c') == '- +d-'\nassert solution('knuth-morris-pratt') == '<any> <empty>'\nassert solution('knuthmorrispratt') == '<any> <empty>'\n\nassert solution('a+b-c') == '- +d-'\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\"\nassert solution(\"a-b+d-c\") == \"<any> <empty>\"\nassert solution(\"knuth-morris-pratt\") == \"<any> <empty>\"\nassert solution(\"knuthmorrispratt\") == \"<any> <empty>\"\nassert solution(\"a+b-c-d\") == \"<any> <empty>\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a+b-c\") == \"-\"+\"d-\"\nassert solution(\"a-b+d-c\") == \"<empty>\"\nassert solution(\"a+b+c\") == \"0\"\nassert solution(\"a-b-c\") == \"<any>\"\nassert solution(\"a+b+c+d+e+f\") == \"012\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a+b-c') == '- +d-'\nassert solution('a-b+d-c') == '- +d-'\nassert solution('a-b-c') == '<empty>'\nassert solution('a+b-c') == '<any>'\nassert solution('a-b-c-d') == '<any>'\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a+b-c') == '- +d-'\nassert solution('a-b+d-c') == '- +d-'\nassert solution('a-b+d+c') == '+ +d-'\nassert solution('a-b-c') == '<empty>'\nassert solution('a-b') == '<any>'\n\n\"\"\""
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\"\nassert solution(\"a-b+d-c\") == \"-\" + \"d-\"\nassert solution(\"\") == \"<empty>\"\nassert solution(\"a-b+d-c+d-c+d-c\") == \"<any>\"\nassert solution(\"a-b+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+d-c+"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\"\nassert solution(\"a-b+d-c\") == \"<any> <empty>\"\nassert solution(\"a+b-c+d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z\") == \"<any> <any>\"\nassert solution(\"a-b+d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z\") == \"<any> <empty>\"\nassert solution(\"a-b+d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z+a-b-c+d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z\") == \"<any> <any>\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a+b-c\") == \"-\" + \"d\" + \"-\"\nassert solution(\"a-b+d-c\") == \"-\" + \"d\" + \"-\"\nassert solution(\"a-b-c\") == \"<empty>\"\nassert solution(\"a-b+d-c+a\") == \"<any>\"\nassert solution(\"a-b-c+a+b\") == \"corrupted\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a+b-c') == '- +d-'\n\"\"\"\n\nfrom itertools import combinations\n\nimport logging\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.DEBUG)\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n0') == '0'\nassert solution('3 0\\n6 6\\n10') == '11'\nassert solution('1 1\\n0\\n7') == '3'\nassert solution('1 1\\n0\\n7\\nt 10\\nt 20\\nt 30\\nt 40\\nt 50\\nt 60\\nt 70') == '4'\nassert solution('1 1\\n0\\n7\\nt 10\\nt 20\\nt 30\\nt 40\\nt 50\\nt 60\\nt 70\\nt 80\\nt 90\\nt 100') == '8'"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 1\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10''') == '11'\n\nassert solution('''1 1\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10''') == '6'\n\nassert solution('''1 1\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10''') == '5'\n\nassert solution('''1 1\n2 6 6\n10\n+ 1\n- 2\n- 4\n+ 5\n+ 5\n- 6\n+ 7\n- 8\n- 9\n+ 10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10''') == '4'\n\nassert solution('''1 1\n2 6 6\n10\n+ 1\n- 2\n- 4\n+ 5\n- 5\n+ 6\n- 6\n- 7\n+ 7\n- 8\n- 9\n+ 10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10''') == '3'\n\n\"\"\"\nSample Input:\n2 1\n2 6 6\n7\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nSample Output:\n2\n1\n\"\"\"\n\n\"\"\"\nhttps://www.youtube.com/watch?v=C9q3eLzmz08\nhttps://www.youtube.com/watch?v=W_6B0P-7Dl8\nhttps://www.youtube.com/watch?v=yRpfLFs1WbQ\nhttps://www.youtube.com/watch?v=pXVzv-QD2C0\nhttps://www.youtube.com/watch?v=Hf1fCevVqb8\nhttps://www.youtube.com/watch?v=lcE0jYhM3B0\nhttps://www.youtube.com/watch?v=L_jim6vLxFQ\n\"\"\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 0\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10\") == \"11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\"\nassert solution(\"1 1\\n0\") == \"0\"\nassert solution(\"2 0\\n2\") == \"1\"\nassert solution(\"1 1\\n0\\n0\") == \"1\"\nassert solution(\"2 0\\n2\\n0\") == \"1\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6''') == '0'\n\nassert solution('''3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10''') == '11'\n\nassert solution('''1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6''') == '1'\n\nassert solution('''1 1\n0\n7\n+ 1\n+ 2\n+ 3\n+ 4\n+ 5\n+ 6''') == '1'\n\nassert solution('''1 1\n0\n7\n- 1\n- 2\n- 3\n- 4\n- 5\n- 6''') == '0'"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6''') == '0\\n1\\n3\\n2\\n3\\n5\\n3'\nassert solution('''3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10''') == '11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10'\nprint('PASSED')\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\") == \"0\\n1\\n3\\n2\\n3\\n5\\n3\"\nassert solution(\"3 0\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10\") == \"11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6') == '0\\n1\\n3\\n2\\n3\\n5\\n3\\n6\\n6\\n9\\n9\\n10'\n\n\"\"\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\") == \"0\\n1\\n3\\n2\\n3\\n5\\n3\"\nassert solution(\"3 0\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10\") == \"11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6') == '0'\nassert solution('3 0\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10') == '11'\n\"\"\"\nimport itertools"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6') == '0\\n1\\n3\\n2\\n3\\n5\\n3'\nassert solution('3 0\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10') == '11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10'\n"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n\") == \"2\\n4 6\\n\"\n\"\"\""
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\nassert solution(\"1 1\\n1 1 1\") == \"0\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n\") == \"2\\n4 6\\n\"\nassert solution(\"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n\") == \"0\\n\"\n\"\"\"\nimport sys\n\n\nclass Graph:\n    def __init__(self, n: int) -> None:\n        self.n = n\n        self.edges = [[] for _ in range(n)]\n\n    def add_edge(self, a: int, b: int, w: int) -> None:\n        self.edges[a].append((b, w))\n        self.edges[b].append((a, w))\n\n    def shortest_path(self, start: int, end: int) -> int:\n        visited = [False] * self.n\n        paths = [None] * self.n\n\n        def dfs(u: int, d: int) -> None:\n            visited[u] = True\n            paths[u] = d\n\n            for v, w in self.edges[u]:\n                if not visited[v]:\n                    dfs(v, d + w)\n\n        dfs(start, 0)\n        print(paths)\n        return paths[end]\n"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '0\\n'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n\") == \"2\\n4 6\"\n\"\"\"\n\nfrom __future__ import print_function"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1') == '2\\n4 6'\nassert solution('5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6') == '0'\n\nimport io"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\nassert solution(\"7 7\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\"\nassert solution(\"7 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\"\n\"\"\""
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\n\"\"\"\n\n\"\"\"\nSOLUTION:\n\nintuition:\n    1) we can use a DFS search to find all paths, and compute the total length of the paths\n    2) we can use a DFS search to find all paths that will definitely go through a particular switch, and then compute the total length of the paths\n    3) we can use a DFS search to find all paths that will definitely go through a particular switch, and then compute the total length of the paths, and also record all the shortest paths for each switch.\n    4) we can use DFS search to find all paths that will definitely go through a particular switch, and then compute the total length of the paths, and also record all the shortest paths for each switch. We then compute the sum of the lengths of all shortest paths, and if this sum is not less than the length of the longest path, then we know that there is a path that will definitely go through the remaining switches.\n\nthe above intuition is the same as the following:\n    1) we can use a DFS search to find all paths\n    2) we can use a DFS search to find all paths that will definitely go through a particular switch\n    3) we can use a DFS search to find all paths that will definitely go through a particular switch, and then compute the total length of the paths\n    4) we can use DFS search to find all paths that will definitely go through a particular switch, and then compute the total length of the paths\n    5) we can then compute the sum of the lengths of all shortest paths, and if this sum is not less than the length of the longest path, then we know that there is a path that will definitely go through the remaining switches.\n\nNote that the above solution is easier to understand and follow, but it will not give the shortest path for every switch. To get the shortest path for every switch, we can use the following solution:\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 2 2\\n1 3 1') == '0'\n"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6') == '4\\n5\\n6\\n1\\n2\\n3'\nassert solution('6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3') == '1\\n2\\n3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2\\n1 1\\n1 2') == '1'\nassert solution('2\\n1 1\\n1 2\\n1 3') == '4'\nassert solution('2\\n1 1\\n1 2\\n1 3\\n2 1') == '1'\nassert solution('2\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2') == '4'\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"1\"\nassert solution(3) == \"1\"\nassert solution(4) == \"2\"\nassert solution(5) == \"3\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n\"\n) == \"4\\n5\\n6\\n1\\n2\\n3\"\nassert solution(\n    \"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n\"\n) == \"1\\n2\\n3\"\nassert solution(\n    \"4\\n1 1\\n1 2\\n1 3\\n\"\n) == \"1\\n2\\n3\"\nassert solution(\n    \"6\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n\"\n) == \"1\\n2\\n3\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"4\\n5\\n6\\n1\\n2\\n3\"\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"1\\n2\\n3\"\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"1\\n2\\n3\"\n\nprint('OK')\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1\\n1 2\\n1 3\") == \"4\\n1\\n2\\n3\"\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"1\\n2\\n3\\n4\\n5\\n6\"\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"1\\n2\\n3\\n4\\n5\\n6\"\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"1\\n2\\n3\\n4\\n5\\n6\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\") == \"4\\n5\\n6\\n1\\n2\\n3\"\n\n\"\"\""
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\") == \"4\\n5\\n6\\n1\\n2\\n3\"\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\") == \"1\\n2\\n3\"\n\"\"\""
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n4 5\\n4 6\") == \"1\\n2\\n3\\n1\\n2\\n3\\n4\\n5\\n6\"\nassert solution(\"5\\n2 2\\n2 3\\n3 1\\n3 2\\n1 2\") == \"1\\n2\\n3\\n2\\n3\\n1\\n2\\n3\"\nassert solution(\"5\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\") == \"1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\"\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n4 5\\n4 6\") == \"1\\n2\\n3\\n1\\n2\\n3\\n4\\n5\\n6\"\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n4 5\\n4 6\") == \"1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n4\\n5\\n6\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n4') == '4\\n5\\n6\\n1\\n2\\n3'\nassert solution('5\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n4') == '1\\n2\\n3'\nassert solution('5\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n4') == '1\\n2\\n3'\nassert solution('5\\n1 3\\n2 2\\n3 2\\n3 3\\n4') == '1\\n2\\n3'\nassert solution('5\\n2 1\\n2 2\\n2 3\\n3 2\\n3 3\\n4') == '1\\n2\\n3'\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"CPCC\") == 1\n\nassert solution(\"PPPPCCCC\") == 8\n'''"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPCCCC\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"C\") == 1\nassert solution(\"PP\") == 1\nassert solution(\"CCCCC\") == 4\n\"\"\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\"\nassert solution(\"CHCCCCCH\") == \"0\"\nassert solution(\"CCCCCCCC\") == \"8\"\n\nprint('The code ran Correctly')\n\n------Solution------\n\"\"\"\n\nimport time\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\n\nassert solution('CPCC') == 1\n\nassert solution('CPPPCCCC') == 8\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('CPCC') == 1\nassert solution('PPPPCCCC') == 8\n\"\"\"\n\ns = input()\ncnt = 0\nfor i in range(len(s)):\n    if s[i] == 'C':\n        continue\n    elif s[i] == 'P':\n        cnt += 1\n    else:\n        print(\"Not a valid input!\")\n        exit(0)\nprint(cnt)\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"PP\") == 1\nassert solution(\"CP\") == 2\nassert solution(\"CC\") == 0\nassert solution(\"CPCC\") == 1\nassert solution(\"CCPP\") == 2\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPC') == '3'\nassert solution('PPPPCCCC') == '8'\n\"\"\""
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"C\") == 0\nassert solution(\"CCCCCCCCCC\") == 1\nassert solution(\"PPPPCCCCCC\") == 8\n\"\"\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2 1\n1 3\n2 3\n3\n''') == '3'\nassert solution('''3 2 1\n1 3\n2 3\n3\n''') == '1 2 3'\n\nassert solution('''3 2 1\n1 2\n2 3\n3\n''') == '3'\nassert solution('''3 2 1\n1 3\n2 2\n3\n''') == '1 2 3'\n\nassert solution('''3 2 1\n1 3\n2 2\n3\n''') == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 1\\n1 2\\n2 3\\n2\\n') == '1 2 3'\nassert solution('3 2 1\\n1 3\\n2 3\\n3\\n') == '3'\nassert solution('3 2 1\\n1 3\\n2 3\\n1\\n') == '1'\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\\n1 2\\n2 3\\n2\\n3\") == \"3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n2\\n3\") == \"3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\") == \"1 2 3\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 1\\n1 2\\n2 3\\n2\\n3\") == \"1 2 3\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 1\\n1 2\\n2 3\\n2\\n3') == '1 2 3'\n\"\"\"\n\nfrom typing import List\n\nd = {}"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\\n1 2\\n2 3\\n2\\n\") == \"1 2 3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\\n\") == \"3\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 2 1\n1 2\n2 3\n2\n3\n''') == '1 2 3'\n\nassert solution('''3 2 1\n1 3\n2 3\n3\n''') == '3'\n\nassert solution('''3 2 1\n1 3\n2 3\n3\n''') == ''\n\nassert solution('''2 1 1\n1 2\n1 3\n2\n''') == '1 2 3'\n\nassert solution('''3 2 1\n1 3\n2 3\n3\n''') == '3'"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 1\\n1 3\\n2 3\\n3\\n\") == \"1 2 3\"\nassert solution(\"5 6 1\\n1 6\\n2 5\\n3 4\\n4 5\\n4 6\\n5 6\\n2 6\\n3 6\\n5 6\\n6\\n\") == \"1 2 3 4 5 6\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 1\\n1 2\\n2 3\\n2\\n') == '3\\n'\nassert solution('3 2 1\\n1 3\\n2 3\\n3\\n') == '3'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open('input.txt').read()) == open('output.txt').read()\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 3\n2 4 2 3 4''') == '39'\nassert solution('''5 1\n1 0 1 1 1''') == '4'\nassert solution('''6 5\n1 2 4 3 5 6''') == '6'\nassert solution('''8 3\n1 3 2 4 6 8 9 7 1''') == '46'\nassert solution('''2 2\n1 0''') == '0'\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\n\n\"\"\""
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n2 4 2 3 4\") == \"39\"\n\"\"\""
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 2 3 4') == '39'\n\"\"\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\", \"2 4 2 3 4\") == \"39\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1\\n1 0 1 1 1') == '4'\n\nassert solution('5 3\\n2 4 2 3 4') == '39'\n\n\"\"\"\n\nimport sys\nimport os\nfrom io import StringIO\nimport unittest\n\n\nclass Test_Solutions(unittest.TestCase):\n\n    def __init__(self, *args, **kwargs):\n        self.input = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'inputs')\n        super(Test_Solutions, self).__init__(*args, **kwargs)\n\n    def test_solution1(self):\n        input1 = open(os.path.join(self.input, 'input1.txt'), 'r')\n        input2 = open(os.path.join(self.input, 'input2.txt'), 'r')\n\n        with open(os.path.join(self.input, 'output1.txt'), 'r') as f:\n            expected = f.read()\n\n        with StringIO() as f1, StringIO() as f2:\n            sys.stdin = f1\n            sys.stdout = f2\n            solution(input1.read())\n\n            self.assertEqual(f2.getvalue(), expected)\n\n    def test_solution2(self):\n        input1 = open(os.path.join(self.input, 'input3.txt'), 'r')\n        input2 = open(os.path.join(self.input, 'input4.txt'), 'r')\n\n        with open(os.path.join(self.input, 'output2.txt'), 'r') as f:\n            expected = f.read()\n\n        with StringIO() as f1, StringIO() as f2:\n            sys.stdin = f1\n            sys.stdout = f2\n            solution(input1.read())\n\n            self.assertEqual(f2.getvalue(), expected)\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n2 4 2 3 4\") == \"39\"\n\"\"\"\n\nN, K = map(int, input().split())\na = list(map(int, input().split()))\nm = max(a)\np = 1\nfor i in range(K):\n    p *= a[i]\nprint(p % 1000000007)\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 3\n2 4 2 3 4''') == '39'\nassert solution('''5 1\n1 0 1 1 1''') == '4'\n\"\"\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2, 3, [4, 6]) == 6\n\"\"\"\n\nN, K = map(int, input().split())\n\na = list(map(int, input().split()))\n\ns = sum([max(a) for _ in range(K)]) % 1000000007\n\nprint(s)\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\nxx.\\nxxx\\n...') == '1 1 2'\nassert solution('4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx') == '1 1 2'\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\nxx.\\nxxx\\n...') == '1 1 2\\n2 3 1'\nassert solution('4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx') == '1 1 2\\n2 4 3'"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\nxx\\nxxx\\n...\") == \"1 1 2\\n2 3 1\"\nassert solution(\"4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx\") == \"1 1 2\\n2 4 3\"\nassert solution(\"4 5\\n...\\n.xxx\\n.xxx\\n.xxx\\n.xxx\") == \"2 2 3\\n3 2 2\"\nassert solution(\"5 5\\n..x\\n.xxx\\n.xxx\\n.xxx\\n.xxx\") == \"2 4 3\\n4 4 2\"\nassert solution(\"6 6\\nxxxxx\\nxxxxx\\nxxxxx\\nxxxxx\\nxxxxx\\nxxxxx\") == \"3 3 2\\n4 3 2\"\n\"\"\""
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\nxx\\nxxx\\n...\\n') == '1 1 2\\n2 3 1'\nassert solution('4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx\\n') == '1 1 2\\n2 4 3'\n\"\"\"\n\nR, C = list(map(int, input().split()))\n\ngrid = []\nfor _ in range(R):\n    row = input()\n    grid.append(row)"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\nxx.\\nxxx\\n...\") == \"1 1 2\"\nassert solution(\"4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx\") == \"1 1 2\\n2 4 3\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n...\") == \"1 1 2\"\nassert solution(\"4 6\\n...xx\\n...xx\\n...x.\") == \"1 1 2\"\nassert solution(\"4 6\\nxx.xxx\\n...xx\\n...xxx\") == \"1 1 2\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\nxx\\nxxx\\n...') == '1 1 2'\nassert solution('4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx') == '1 1 2\\n2 4 3'\n\nimport math\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\nxx\\nxxx\\n...\") == \"1 1 2\"\nassert solution(\"4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx\") == \"1 1 2\\n2 4 3\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\nxx.\\nxxx\\n...\") == \"1 1 2\"\nassert solution(\"4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx\") == \"2 4 3\"\n\"\"\""
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\nxx.\\nxxx\\n...') == '1 1 2\\n2 3 1'\nassert solution('4 6\\nxx....\\nxxx.xxx\\n...xxx\\n...xxx') == '1 1 2\\n2 4 3'\n\"\"\""
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 2\\n1 2 1\\n0 2 0\\n0 1 0') == '0'\nassert solution('2 0 1\\n1 1 1\\n0 0 0') == '0'\nassert solution('2 0 1\\n1 1 1\\n0 0 0\\n0 0 0') == 'indistinguishable'\n\"\"\"\n\na, b, c = list(map(int, input().split()))\nn = int(input())\nm = {}\ns = 0\nfor i in range(n):\n    l, r, t = list(map(int, input().split()))\n    m[l] = (r, t)\n    m[r] = (l, 0)\n    if a == l:\n        if b == r and t == 0:\n            s += 1\n    elif a == r:\n        if b == l and t == 1:\n            s += 1\n    if c == l:\n        if b == r and t == 1:\n            s += 1\n    elif c == r:\n        if b == l and t == 0:\n            s += 1\n    if s == 2:\n        print(\"indistinguishable\")\n        exit()\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == \"indistinguishable\"\nassert solution(\"2 0 1\\n1 1 1\\n0 0 0\") == \"0\"\nassert solution(\"2 0 1\\n0 0 0\\n0 1 0\") == \"0\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == \"indistinguishable\"\n\"\"\""
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == \"indistinguishable\"\nassert solution(\"2 0 1\\n1 1 1\\n0 0 0\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2\\n1 2 1\\n0 2 0\\n0 1 0') == 'indistinguishable'\nassert solution('3 1 2\\n0 1 0\\n0 0 0\\n0 0 0') == '0'\nassert solution('4 1 2\\n0 1 0\\n0 2 0\\n0 1 0\\n0 1 0') == '2'\nassert solution('3 1 2\\n0 0 0\\n0 0 0\\n0 1 0\\n0 1 0') == '2'\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1\\n0 0 0\\n0 1 0\") == \"indistinguishable\"\nassert solution(\"2 0 1\\n1 1 1\\n0 0 0\") == \"0\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == 'indistinguishable'\nassert solution(\"2 0 1\\n1 1 1\\n0 0 0\") == '0'\n\"\"\"\n\nn, a, b = map(int, input().split())\n\na_route = set()\nb_route = set()\n\nfor i in range(n):\n    l, r, t = map(int, input().split())\n    a_route.add(l)\n    b_route.add(r)"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 1\\n0 0 0\\n0 1 0') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == \"0\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == '0'\nassert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == '1'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1011\") == \"1111\"\nassert solution(\"1110\") == \"1110\"\nassert solution(\"1111\") == \"1111\"\nassert solution(\"1010\") == \"1111\"\nassert solution(\"101\") == \"1111\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\nassert solution('0011') == '1110'\nassert solution('1111') == '1111'\nassert solution('1010') == '1011'\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"101010\") == \"101010\"\nassert solution(\"101010\") == \"101010\"\nassert solution(\"101010\") == \"101010\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1011') == '1110'\nassert solution('100101') == '11110'\nassert solution('1111111111111111111111') == '1110011111101111111111111111'\nassert solution('1111111111111111111111') == '1111111111111111111111'\nassert solution('1110011111101111111111111111') == '1110011111101111111111111111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''0110\n1001''') == '1111\n0111\n1110\n1111'\nassert solution('''0\n1''') == '-1'\n\nassert solution('''1010\n10001''') == '10101\n10110\n11010\n10110'\nassert solution('''101010\n1110101010\n101010\n1110101010\n101010''') == '101011010110110\n101101010\n101101010\n1110101010\n101101010\n\nassert solution('''101010\n1110101010\n101010\n1110101010\n101010''') == '101011010110110'\n101101010\n1110101010\n101101010\n1110101010\n101101010"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10111010\") == \"11101110\"\nassert solution(\"11101010\") == \"11101110\"\nassert solution(\"11101010\") == \"11101110\"\nassert solution(\"10111010\") == \"11101110\"\nassert solution(\"01101110\") == \"11101110\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"101010\") == \"101010\"\nassert solution(\"101010\") == \"101010\"\nassert solution(\"101010\") == \"101010\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"1110\") == \"1110\"\nassert solution(\"1110\") == \"1111\"\nassert solution(\"1110\") == \"1111\"\n\"\"\""
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''0110\n1001''') == '1111\n0111\n1110\n1111'\n\nassert solution('''1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n1010\n1011\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0110\" + \"\\n\" + \"1001\") == \"1111\"\nassert solution(\"0111\" + \"\\n\" + \"1110\") == \"1110\"\nassert solution(\"0111\" + \"\\n\" + \"1110\") == \"1111\"\nassert solution(\"1010\" + \"\\n\" + \"1110\") == \"1110\"\nassert solution(\"1010\" + \"\\n\" + \"1110\") == \"1111\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+0-0-0'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1101') == '100+1'\nassert solution('1000') == '0+0'\nassert solution('1110') == '0-1'\nassert solution('11110') == '0-0-1'\nassert solution
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(bin(1234)) == '1111'\nassert solution(bin(7)) == '+001'\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10000\") == \"+0000\"\n\"\"\"\n\nimport sys\nimport timeit\nfrom math import log\nimport numpy as np"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10000\") == \"10000\"\nassert solution(\"1111\") == \"+000-\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10001101\") == \"+1010\"\nassert solution(\"1000110101110111\") == \"+1010-1011\"\n\"\"\""
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1010') == '1010'\nassert solution('10010') == '1010'\nassert solution('1111') == '1101'\nassert solution('10000') == '1101'\nassert solution('10001') == '1110'\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10000\") == \"+0000\"\nassert solution(\"1111\") == \"+000-\"\n\"\"\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10000\") == \"+0000\"\nassert solution(\"1111\") == \"+000-\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11101\") == \"0011\"\nassert solution(\"1111\") == \"+000-\"\nassert solution(\"10000\") == \"0011\"\n\"\"\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4 3 2\\n1 2\\n1 3\\n1 4\\n4 5\\n1 2 1\\n1 3 2\\n1 4 1\\n1 5 2\\n1 2 1\\n4 5 3\\n1 2 1\\n4 5 2\\n1 3 2\\n1 5 2\\n1 4 2\\n4 5 3\\n1 5 2\\n1 2 1\\n1 4 2\\n1 3 1\\n1 3 2\\n4 3 3\\n1 5 1\\n1 5 1\\n1 2 1\\n1 5 2\\n4 2 2\\n1 3 1\\n1 4 1\\n4 2 2\\n4 3 1\\n1 2 1\\n4 2 1\\n1 2 1\\n4 3 1\\n1 3 1\\n4 2 1\\n1 4 1\\n1 4 1\\n4 3 1\\n1 4 1\\n1 4 1\\n4 2 1\\n1 2 1\\n1 2 1\\n1 3 1\\n1 4 1\\n4 2 1\\n1 2 1\\n1 3 1\\n1 3 1\\n4 3 1\\n4 3 1\\n4 2 1\\n1 5 1\\n1 5 1\\n4 2 1\\n1 5 1\\n1 5 1\\n1 2 1\\n1 3 1\\n1 4 1\\n4 3 1\\n4 3 1\\n1 2 1\\n1 3 1\\n1 5 1\\n1 2 1\\n1 2 1\\n1 3 1\\n1 4 1\\n4 2 1\\n1 3 1\\n1 4 1\\n1 2 1\\n4 3 1\\n1 4 1\\n1 5 1\\n1 2 1\\n1 5 1\\n1 3 1\\n1 2 1\\n1 2 1\\n1 2 1\\n1 3 1\\n1 2 1\\n1 2 1\\n4 2 1\\n1 2 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 5 1\\n1 3 1\\n1 2 1\\n1 4 1\\n1 4 1\\n1 3 1\\n1 4 1\\n1 2 1\\n1 5 1\\n4 2 1\\n1 3 1\\n1 4 1\\n1 4 1\\n1 3 1\\n1 2 1\\n1 3 1\\n1 2 1\\n1 5 1\\n1 2 1\\n1 2 1\\n1 5 1\\n1 5 1\\n1 2 1\\n1 2 1\\n1 3 1\\n1 2 1\\n1 2 1\\n1 5 1\\n1 2 1\\n1 2 1\\n1 5 1\\n1 3 1\\n1 4 1\\n1 4 1\\n1 5 1\\n1 4 1\\n1 4 1\\n1 5 1\\n1 2 1\\n1 3 1\\n1 5 1\\n1 5 1\\n1 2 1\\n1 4 1\\n1 5 1\\n1 2 1\\n1 2 1\\n1 3 1\\n1 5 1\\n1 2 1\\n1 3 1\\n1 4 1\\n1 2 1\\n1 5 1\\n1 5 1\\n1 3 1\\n1 4 1\\n1 4 1\\n1 2 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 5 1\\n1 2 1\\n1 4 1\\n1 4 1\\n1 2 1\\n1 3 1\\n1 5 1\\n1 2 1\\n1 5 1\\n1 5 1\\n1 4 1\\n1 5 1\\n1 2 1\\n1 4 1\\n1 2 1\\n1 2 1\\n1 3 1\\n1 5 1\\n1 2 1\\n1 5 1\\n1 4 1\\n1 5 1\\n1 4 1\\n1 5 1\\n1 4 1\\n1 4 1\\n1 2 1\\n1 4 1\\n1 4 1\\n1 3 1\\n1 3 1\\n1 4 1\\n1 3 1\\n1 5 1\\n1 2 1\\n1 5 1\\n1 4 1\\n1 4 1\\n1 2 1\\n1 5 1\\n1 2 1\\n1 4 1\\n1 5 1\\n1 2 1\\n1 3 1\\n1 4 1\\n1 2 1\\n1 5 1\\n1 5 1\\n1 5 1\\n1 4 1\\n1 2 1\\n1 2 1\\n1 2 1\\n1 5 1\\n1 5 1\\n1 5 1\\n1 5 1\\n1 2 1\\n1 3 1\\n1 5 1\\n1 5 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 4 1\\n1 3 1\\n1 5 1\\n1 4 1\\n1 4 1\\n1 2 1\\n1 2 1\\n1 2 1\\n1 2 1\\n1 5 1\\n1 5 1\\n1 3 1\\n1 2 1\\n1 4 1\\n1 2 1\\n1 5 1\\n1 4 1\\n1 5 1\\n1 4 1\\n1 5 1\\n1 5 1\\n1 5 1\\n1 4 1\\n1 2 1\\n1 2 1\\n1 2 1\\n1 2 1\\n1 5 1\\n1 5 1\\n1 5 1\\n1 2 1\\n1 5 1\\n1 2 1\\n1 2 1\\n1 5 1\\n1 4 1\\n1 2 1\\n1 5 1\\n1 3 1\\n1 5 1\\n1 4 1\\n1 5 1\\n1 3 1\\n1 2 1\\n1 5 1\\n1 5 1\\n1 5 1\\n1 3"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n') == '9'\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nIn general, a solution is not guaranteed to exist. Here is a sample solution:\n\nfrom typing import List\nfrom collections import deque, defaultdict"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n\") == \"9\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\") == \"9\"\n\"\"\"\n\nfrom sys import stdin\nfrom heapq import heappop, heappush\n\nINF = 10 ** 8"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 2 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5') == '9'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\") == \"9\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 1 1\\n1 2\\n2 3 1\\n3 4 1\\n4 1 1\\n1 3 1\\n3 1 1\\n1 4 1\\n4 1 1\\n1 1 2\\n2 2 2\\n2 3 2\\n2 4 2\\n3 1 2\\n3 2 2\\n3 3 2\\n3 4 2\\n4 1 2\\n4 2 2\\n1 1 3\\n1 2 3\\n1 3 3\\n2 1 3\\n2 2 3\\n2 3 3\\n3 1 3\\n3 2 3\\n3 3 3\\n4 1 3\\n4 2 3\\n4 3 3\") == \"9\"\nassert solution(\"4 4 1 1\\n4 4\\n1 1 1\\n2 3 2\\n1 3 2\\n1 2 1\\n4 1 1\\n4 3 2\\n3 1 2\\n2 1 2\\n2 2 1\\n2 3 2\\n3 1 2\\n1 1 3\\n1 2 3\\n1 3 3\\n3 1 3\\n3 2 3\\n3 3 3\\n2 1 3\\n2 2 3\\n2 3 3\\n4 1 3\\n4 2 3\\n4 3 3\") == \"12\"\nassert solution(\"3 3 2 1\\n1 2 1\\n2 1 1\\n3 1 1\\n1 3 1\\n2 1 1\\n2 3 1\\n3 1 1\\n1 3 1\\n2 3 1\\n3 1 1\\n1 1 2\\n1 2 1\\n2 1 1\\n2 2 1\\n3 1 1\\n1 1 3\\n2 1 1\\n1 1 3\\n3 1 1\\n2 1 1\\n1 1 3\\n3 1 1\\n1 1 3\\n3 1 1\\n1 1 3\\n2 1 1\\n2 1 1\\n3 1 1\\n1 1 3\\n3 1 1\\n1 1 3\\n2 1 1\\n3 1 1\\n1 1 3\\n3 1 1\\n1 1 3\\n2 1 1\\n2 1 1\\n3 1 1\\n1 1 3\\n2 1 1\\n2 1 1\\n3 1 1\\n1 1 3\\n3 1 1\\n1 1 3\\n2 1 1\\n2 1 1\\n3 1 1\\n1 1 3\\n3 1 1\\n1 1 3\\n2 1 1\\n3 1 1\\n1 1 3\\n2 1 1\\n3 1 1\\n1 1 3\\n2 1 1\\n1 1 3\\n2 1 1\\n1 1 3\\n3 1 1\\n1 1 3\\n2 1 1\\n1 1 3\\n3 1 1\") == \"15\"\n\"\"\"\n\nn, m, s, t = map(int, input().split())\n\nl = [0] * (n+1)\nfor _ in range(m):\n    u, v, d = map(int, input().split())\n    l[u] += d\n    l[v] -= d\n\na, b = map(int, input().split())\n\nl[a] = 1\nl[b] = 1\n\nfor _ in range(s):\n    l[int(input())] = 1\n\nfor _ in range(t):\n    l[int(input())] = 2\n\ni = 0\nj = n\nm = 0\nwhile i <= j:\n    if l[i] == 1:\n        break\n    i += 1\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\") == \"9\"\n\"\"\"\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4') == '9'\nassert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4') == '12'\nassert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4') == '12'\nassert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4') == '12'\n\nimport os, sys, re, time, collections, itertools, heapq, functools, math\nfrom typing import *\nfrom math import gcd, ceil, floor, sqrt, log, factorial, pow, pi\nfrom collections import deque, Counter, OrderedDict, defaultdict, ChainMap\nfrom itertools import product, permutations, combinations, accumulate, groupby, repeat, combinations_with_replacement\nfrom functools import lru_cache, reduce\nfrom math import inf, isinf\nfrom heapq import heappush, heappop, heappushpop, heapify, heapreplace, merge\nfrom bisect import bisect_left, bisect_right, bisect, insort_left, insort_right, insort\nfrom array import array\n\nsys.setrecursionlimit(1000000)\nINF = float('inf')\nn, m, s, t = map(int, input().split())\na, b = map(int, input().split())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n\nA = []\nfor i in range(m):\n    u, v, d = map(int, input().split())\n    A.append((u, v, d))"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\"\"\") == \"9\"\n\"\"\"\nfrom collections import deque\nfrom typing import List, Tuple, Deque, Dict, Callable, Set\nfrom queue import Queue\n\n\"\"\"\nGiven an undirected graph with maximum degree of 2, determine if it is bipartite.\n\nThe graph is given in the following form:\n\ngraph[u] is a list of pairs (v, color) such that (u, v) is an edge of the graph.\ncolor is an integer (or more precisely, a string) that determines the color of the graph.\n\"\"\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\nprint(solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\"))\nprint(solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\"))\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '-1'\n'''\nimport numpy as np\nfrom collections import defaultdict\n\nclass Cell:\n    def __init__(self, val: int = 0, row: int = 0, col: int = 0, dir: int = 0):\n        self.val = val\n        self.row = row\n        self.col = col\n        self.dir = dir\n        self.todo = {0: \"rotate_l\", 1: \"rotate_r\", 2: \"move_f\", 3: \"move_b\"}\n        self.num_rotations = 0\n\n    def move(self):\n        if self.dir == 0:\n            self.col += 1\n        elif self.dir == 1:\n            self.col -= 1\n        elif self.dir == 2:\n            self.row -= 1\n        else:\n            self.row += 1\n\n    def rotate_l(self):\n        self.dir = (self.dir - 1) % 4\n\n    def rotate_r(self):\n        self.dir = (self.dir + 1) % 4\n\n    def move_f(self):\n        self.move()\n\n    def move_b(self):\n        self.move()\n\n    def __repr__(self):\n        return f\"({self.row}, {self.col}) {self.dir}\"\n\n    def __eq__(self, other):\n        return self.row == other.row and self.col == other.col and self.dir == other.dir\n\n    def __hash__(self):\n        return hash(tuple([self.row, self.col, self.dir]))\n\n\nclass Game:\n    def __init__(self, stdin: str):\n        rows, cols, traps = stdin.split(\"\\n\")\n        self.rows = int(rows)\n        self.cols = int(cols)\n        self.traps = [int(t) for t in traps.split()]\n        self.board = np.zeros((self.rows, self.cols), dtype=int)\n        self.initial_board = self.board.copy()\n        self.bacteria = []\n        self.traps = set()\n        self.todo = {0: \"rotate_l\", 1: \"rotate_r\", 2: \"move_f\", 3: \"move_b\"}\n        self.todo_count = {0: 0, 1: 0, 2: 0, 3: 0}\n\n        self.cur_turn = 0\n        self.turns = 0\n        self.trap_triggered = False\n        self.bacteria_killed = 0\n        self.end_game = False\n        self.row_to_col_transform = {}\n        self.col_to_row_transform = {}\n\n        for row in range(self.rows):\n            for col in range(self.cols):\n                self.row_to_col_transform[row] = col\n                self.col_to_row_transform[col] = row\n\n    def check_trap(self, cell: Cell) -> bool:\n        cell_row = cell.row\n        cell_col = cell.col\n        if self.board[cell_row, cell_col] in self.traps:\n            return True\n        return False\n\n    def get_cell(self, row: int, col: int) -> Cell:\n        if row not in self.row_to_col_transform or col not in self.col_to_row_transform:\n            return None\n        return Cell(self.board[row, col], row, col)\n\n    def place_trap(self, row: int, col: int):\n        if row not in self.row_to_col_transform or col not in self.col_to_row_transform:\n            return\n        self.traps.add(self.board[row, col])\n        self.board[row, col] = 9\n        self.trap_triggered = False\n\n    def print_board(self):\n        for row in range(self.rows):\n            for col in range(self.cols):\n                print(self.board[row, col], end=\" \")\n            print(\"\")\n\n    def load_board(self, board: str):\n        self.board = np.zeros((self.rows, self.cols), dtype=int)\n        for row in range(self.rows):\n            for col in range(self.cols):\n                val = int(board[row][col])\n                self.board[row, col] = val\n                if val in self.traps:\n                    self.trap_triggered = False\n                elif val == 9:\n                    self.trap_triggered = False\n\n    def place_bacteria(self, board: str):\n        self.bacteria = []\n        for row in range(self.rows):\n            for col in range(self.cols):\n                val = int(board[row][col])\n                if val!= 0:\n                    self.bacteria.append(Cell(val, row, col))\n                    self.board[row, col] = 0\n\n    def init_traps(self):\n        self.traps = set()\n        for row in range(self.rows):\n            for col in range(self.cols):\n                if self.board[row, col] == 9:\n                    self.traps.add(self.board[row, col])\n                    self.board[row, col] = 0\n                    self.trap_triggered = False\n\n    def init_traps_simple(self):\n        self.traps = set()\n        for row in range(self.rows):\n            for col in range(self.cols):\n                if self.initial_board[row, col] == 9:\n                    self.traps.add(self.board[row, col])\n                    self.board[row, col] = 0\n                    self.trap_triggered = False\n\n    def remove_bacteria_from_"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\n-----\nLuka is bored in chemistry class yet again. This time, he\u2019s playing with intelligent bacteria. He has arranged his $K$ bacteria on a rectangular board divided in $N$ rows, labelled with numbers from $1$ to $N$ starting from the top, and $M$ columns, labelled with numbers from $1$ to $M$ starting from the left.\n\nEach bacterium begins its adventure in a certain cell, facing one of the four neighbouring cells, and carries out the following actions every second:\n - Reads the number $X$ dedicated to that bacterium in the current cell.\n - Turns $90$ degrees clockwise, $X$ times.\n - If it is facing a cell outside the board, it turns $180$ degrees.\n - Finally, it moves to the cell that it is facing.\n\nLuka has placed a trap in one cell. The trap will activate and kill the bacteria as soon as they all step on that cell in the same second.\n\nSince Luka only has two hours of chemistry class today, help him determine how long the game will last, in seconds.\n\n-----Input-----\nThe first line of input contains the positive integers $N$ ($3 \\leq N \\leq 50$), $M$ ($3 \\leq M \\leq 50$), and $K$ ($1 \\leq K \\leq 5$).\n\nThe second line of input contains the positive integers $X$ and $Y$, the row and column where Luka has placed the trap.\n\nThe remainder of the input consists of bacteria descriptions, for each bacterium $i$ from $1$ to $K$:\n - two positive integers $X_ i$, $Y_ i$ \u2013 the row and column of the starting cell of bacterium $i$, and the character $C_ i$ representing the starting direction that the bacterium is facing ($U$ \u2013 up, $R$ \u2013 right, $D$ \u2013 down, $L$ \u2013 left).\n - $N$ by $M$ matrix of digits between $0$ and $9$, inclusive; the digit in row $x$ and column $y$ represents the number in cell $(x, y)$ dedicated to bacterium $i$.\n\n-----Output-----\nThe first and only line of output must contain the total duration of Luka\u2019s game, in seconds. If the game will never end, output -1.\n\n-----Examples-----\nSample Input 1:\n3 3 1\n2 2\n1 1 R\n010\n000\n000\nSample Output 1:\n2\n\nSample Input 2:\n3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\nSample Output 2:\n7\n\n-----\nLuka is bored in chemistry class yet again. This time, he\u2019s playing with intelligent bacteria. He has arranged his $K$ bacteria on a rectangular board divided in $N$ rows, labelled with numbers from $1$ to $N$ starting from the top, and $M$ columns, labelled with numbers from $1$ to $M$ starting from the left.\n\nEach bacterium begins its adventure in a certain cell, facing one of the four neighbouring cells, and carries out the following actions every second:\n - Reads the number $X$ dedicated to that bacterium in the current cell.\n - Turns $90$ degrees clockwise, $X$ times.\n - If it is facing a cell outside the board, it turns $180$ degrees.\n - Finally, it moves to the cell that it is facing.\n\nLuka has placed a trap in one cell. The trap will activate and kill the bacteria as soon as they all step on that cell in the same second.\n\nSince Luka only has two hours of chemistry class today, help him determine how long the game will last, in seconds.\n\n-----Input-----\nThe first line of input contains the positive integers $N$ ($3 \\leq N \\leq 50$), $M$ ($3 \\leq M \\leq 50$), and $K$ ($1 \\leq K \\leq 5$).\n\nThe second line of input contains the positive integers $X$ and $Y$, the row and column where Luka has placed the trap.\n\nThe remainder of the input consists of bacteria descriptions, for each bacterium $i$ from $1$ to $K$:\n - two positive integers $X_ i$, $Y_ i$ \u2013 the row and column of the starting cell of bacterium $i$, and the character $C_ i$ representing the starting direction that the bacterium is facing ($U$ \u2013 up, $R$ \u2013 right, $D$ \u2013 down, $L$ \u2013 left).\n - $N$ by $M$ matrix of digits between $0$ and $9$, inclusive; the digit in row $x$ and column $y$ represents the number in cell $(x, y)$ dedicated to bacterium $i$.\n\n-----Output-----\nThe first and only line of output must contain the total duration of Luka\u2019s game, in seconds. If the game will never end, output -1.\n\n-----Examples-----\nSample Input 1:\n3 3 1\n2 2\n1 1 R\n010\n000\n000\nSample Output 1:\n2\n\nSample Input 2:\n3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\nSample Output 2:\n7\n\n-----\nLuka is bored in chemistry class yet again. This time, he\u2019s playing with intelligent bacteria. He has arranged his $K$ bacteria on a rectangular board divided in $N$ rows, labelled with numbers from $1$ to $N$ starting from the top, and $M$ columns, labelled with numbers from $1$ to $M$ starting from the left.\n\nEach bacterium begins its adventure in a certain cell, facing one of the four neighbouring cells, and carries out the following actions every second:\n - Reads the number $X$ dedicated to that bacterium in the current cell"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000') == '2'\nassert solution('3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301') == '7'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"./sample_input.txt\") == \"7\"\nassert solution(\"./input.txt\") == \"4\"\n\"\"\"\n\nimport sys\n\nn, m, k = list(map(int, sys.stdin.readline().strip().split(' ')))\nx, y = list(map(int, sys.stdin.readline().strip().split(' ')))\nl = []\nfor i in range(k):\n    x, y, char = sys.stdin.readline().strip().split(' ')\n    l.append(list(map(int, sys.stdin.readline().strip().split(' '))))\n\nprint(max([2*n, max(l), 2*m]))\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\n-----\nLuka is bored in chemistry class yet again. This time, he\u2019s playing with intelligent bacteria. He has arranged his $K$ bacteria on a rectangular board divided in $N$ rows, labelled with numbers from $1$ to $N$ starting from the top, and $M$ columns, labelled with numbers from $1$ to $M$ starting from the left.\n\nEach bacterium begins its adventure in a certain cell, facing one of the four neighbouring cells, and carries out the following actions every second:\n - Reads the number $X$ dedicated to that bacterium in the current cell.\n - Turns $90$ degrees clockwise, $X$ times.\n - If it is facing a cell outside the board, it turns $180$ degrees.\n - Finally, it moves to the cell that it is facing.\n\nLuka has placed a trap in one cell. The trap will activate and kill the bacteria as soon as they all step on that cell in the same second.\n\nSince Luka only has two hours of chemistry class today, help him determine how long the game will last, in seconds.\n\n-----Input-----\nThe first line of input contains the positive integers $N$ ($3 \\leq N \\leq 50$), $M$ ($3 \\leq M \\leq 50$), and $K$ ($1 \\leq K \\leq 5$).\n\nThe second line of input contains the positive integers $X$ and $Y$, the row and column where Luka has placed the trap.\n\nThe remainder of the input consists of bacteria descriptions, for each bacterium $i$ from $1$ to $K$:\n - two positive integers $X_ i$, $Y_ i$ \u2013 the row and column of the starting cell of bacterium $i$, and the character $C_ i$ representing the starting direction that the bacterium is facing ($U$ \u2013 up, $R$ \u2013 right, $D$ \u2013 down, $L$ \u2013 left).\n - $N$ by $M$ matrix of digits between $0$ and $9$, inclusive; the digit in row $x$ and column $y$ represents the number in cell $(x, y)$ dedicated to bacterium $i$.\n\n-----Output-----\nThe first and only line of output must contain the total duration of Luka\u2019s game, in seconds. If the game will never end, output -1.\n\n-----Examples-----\nSample Input 1:\n3 3 1\n2 2\n1 1 R\n010\n000\n000\nSample Output 1:\n2\n\nSample Input 2:\n3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\nSample Output 2:\n7"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000') == '2'\nassert solution('3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301') == '7'\n\"\"\""
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\nimport sys\n\ntry:\n    while True:\n        N, M, K = [int(i) for i in sys.stdin.readline().split(' ')]\n        print(2 * (N - 1 + M - 1) + 2 * K)\nexcept:\n    pass\n\nassert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\""
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 3 1\n2 2\n1 1 R\n010\n000\n000''') == '2'\nassert solution('''3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301''') == '7'\nprint(solution(input()))\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 2 1 2 3') == 2\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\nans = 0\nl.sort()\nfor i in range(n):\n    ans += l[i]*(n-i)\nprint(ans)\n\n\n\"\"\"\n>>> solution('5\\n2 2 1 2 3')\n16\n>>> solution('8\\n1 2 4 1 1 2 5 1')\n24\n>>> solution('1\\n2')\n2\n\"\"\""
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n2 2 1 2 3''') == '2'\nassert solution('''8\n1 2 4 1 1 2 5 1''') == '4'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '7'\nassert solution('''7\n1 2 1 2 3 4 5''') == '0'\nassert solution('''10\n9 6 2 9 8 3 9 7 1 9''') == '6'\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == \"2\"\nassert solution(\"8\\n1 2 4 1 1 2 5 1\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 2 1 2 3') == 2\nassert solution('8\\n1 2 4 1 1 2 5 1') == 4\nassert solution('6\\n1 1 1 1 1 1') == 1\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 2 1 2 3') == 2\nassert solution('8\\n1 2 4 1 1 2 5 1') == 4\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 1 2 3') == 2\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nimport collections\n\nl = list(zip(a[::2], a[1::2]))\n\nd = collections.defaultdict(int)\nfor i, j in l:\n    d[i] += 1\n    d[j+1] -= 1\n\ns = 0\nfor i in d:\n    s += d[i]\nprint(s)\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == \"2\"\nassert solution(\"8\\n1 2 4 1 1 2 5 1\") == \"4\"\n\n\"\"\"\nimport math\nimport sys\nimport os\nfrom functools import lru_cache\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(intput())) == output()"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 2 1 2 3') == 2\n\"\"\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('D 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4') == '3\\n1'\n\"\"\"\n\n\nfrom collections import deque\nimport sys\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 1 3\\n2 2\\nP 1\\nP 2\\nD 2 2\") == \"3\\n3 1 3\"\nassert solution(\"3\\n3 1 3\\n2 2\\nP 1\\nP 2\\nD 2 2\") == \"NE\\n1\"\nassert solution(\"3\\n3 1 3\\n2 2\\nP 1\\nP 2\\nD 2 2\") == \"NE\\nNE\"\nassert solution(\"3\\n3 1 3\\n2 2\\nP 1\\nP 2\\nD 2 2\") == \"1\\n1\"\nassert solution(\"3\\n3 1 3\\n2 2\\nP 1\\nP 2\\nD 2 2\") == \"NE\\nNE\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n''') == '''\nNE\nNE\nNE\n'''\n\nassert solution('''\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n''') == '''\n3\n1\n'''\n\nassert solution('''\n6\nD 5 9\nD 1 3\nD 1 1\nD 1 3\nP 3\nP 3\n''') == '''\n3\n1\n'''\n\nassert solution('''\n6\nD 5 9\nD 1 3\nD 1 1\nD 1 3\nP 3\nP 3\n''') == '''\n1\n'''\n\nassert solution('''\n6\nD 5 9\nD 1 3\nD 1 1\nD 1 3\nP 3\nD 6 2\n''') == '''\n1\n'''"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3\\nD 1 2\\nD 2 1\\nD 1 3\") == \"1\"\nassert solution(\"2\\n3\\nD 1 1\\nD 2 1\\nD 1 3\") == \"2\"\nassert solution(\"2\\n3\\nD 1 1\\nD 2 1\\nP 3\") == \"1\"\nassert solution(\"2\\n3\\nD 1 1\\nD 2 1\\nP 1\") == \"NE\"\nassert solution(\"2\\n3\\nD 1 1\\nD 2 1\\nP 1\\nP 1\") == \"NE\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\") == \"3\\n1\"\nassert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\") == \"NE\"\nassert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\") == \"1\"\n\nprint('All tests passed.')\n\nprint(solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\"))\nprint(solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\"))\nprint(solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\"))\nprint(solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\"))"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"D 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\") == \"NE\"\n\nassert solution(\"D 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n\"\"\") == \"NE\\nNE\\nNE\"\nassert solution(\"\"\"\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\") == \"3\\n1\"\n\n\"\"\"\nImplementation\n\"\"\"\nstdin = \"\"\"\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n\"\"\"\n\nstdout = \"\"\"\nNE\nNE\nNE\n\"\"\"\n\nimport io\n\n_INPUT_FILE_NAME = 'input.txt'"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n') == 'NE'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n') == '1'\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n\") == \"3\\n1\"\n\"\"\""
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\") == '3\\n1\\nNE'\n\nprint(solution(\"\"\"\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\"))\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2') == '2'\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 2 1 10\n0 0\n1 4\n3 2''') == '2'\n\nassert solution('''2 2 1 10\n0 0\n1 4\n3 2\n0 2 1\n3 3\n5 2\n6 5\n1 5''') == '5'\n\nprint('Success')\n\n\"\"\"\nYou are a professional fisherman, and you are trying to catch fish in a lake. The water in the lake is broken up into a grid of cells. Each cell can contain either fish, water, or no fish at all. Initially, all the cells in the lake contain water.\n\nYour fishing rod is very strong and can catch fish up to a distance of $d$. You are able to move your fishing rod in any of the 8 directions (up, down, left, right, and the 4 diagonal directions). You start at a position $(x_0, y_0)$ and want to catch as many fish as possible. However, as you move, you will encounter fish that are moving in one of the 4 cardinal directions, and you cannot move into that cell again for a duration of $k$ seconds. You are also not able to move out of the boundaries of the lake, or into water.\n\nGiven the initial position and the configuration of the lake, find the maximum number of fish that you can catch, where fish will move in 8 directions (not necessarily in the order up, down, left, right, or any of the 4 diagonal directions).\n\n\n\nInput Format\n\nThe first line of input consists of two integers $r$ and $c$ denoting the number of rows and the number of columns of the lake.\n\nNext, you will be given a set of lines each of which contains two integers $x$ and $y$ denoting the position of the cell that contains fish in the lake.\n\nThen, the last line of input contains $r$ integers $t_{x, 0}, \\dots, t_{x, c - 1}$ (each between $1$ and $k$, inclusive), the times when fish appears at the position $(x, y)$.\n\nConstraints\n\n$1 \\le r, c \\le 100$,\n$1 \\le k \\le 5$,\n$1 \\le l \\le 10^5$,\n$0 \\le x_0 < r$,\n$0 \\le y_0 < c$,\n$t_{x, 0} < t_{x, c - 1}$,\n$x_0 + y_0 < x_{c - 1} + y_{c - 1}$.\n\nOutput Format\n\nOutput the maximum number of fish you can catch in the lake.\n\n\n\nSample Input 1:\n2 2 1 10\n0 0\n1 4\n3 2\nSample Output 1:\n2\n\nSample Input 2:\n2 3 5 6\n1 1\n1 1 6\n1 2 2\nSample Output 2:\n5\n\nSample Input 3:\n4 2 4 8\n1 1\n0 0\n1 0\n0 2\n0 1\n1 3\n0 0\n0 0\n0 0\n1 1\n0 0\n1 3\n0 0\nSample Output 3:\n4\n\"\"\"\n\"\"\"\nThe number of fish, and therefore the maximum number of fish you can catch, is the number of cells that contain fish, as well as the number of fish in each cell, given by the summation of two values:\n\n(1) the number of fish in the cell on the row above, and\n(2) the number of fish in the cell on the same row as your current position\n\"\"\""
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 2 1 10\n0 0\n1 4\n3 2''') == '2'\nassert solution('''2 3 5 6\n1 1\n1 1 6\n1 2 2''') == '5'\n\n\"\"\"\nSolution:\n - Generate a set of the positions, and count how many fish there are in each row and column\n - Generate a set of the positions of the fish for each time\n - Generate a list of the positions where there are still fish, which is the set of fish that have not been caught\n - The max number of fish you can catch is the sum of all the fish in the list\n\"\"\"\n\nfrom typing import List, Tuple, Set\n\nfrom icpc_util import int_array, get_input_for_file\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2') == '2'\n\"\"\"\n\nfrom typing import List\nimport collections\nimport itertools\n\n\nclass Time(collections.namedtuple('Time', ['t', 'x', 'y'])):\n    def __lt__(self, other):\n        return (self.t, self.x, self.y) < (other.t, other.x, other.y)\n\n    def __eq__(self, other):\n        return (self.t, self.x, self.y) == (other.t, other.x, other.y)\n\n    def __hash__(self):\n        return hash((self.t, self.x, self.y))\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\\n\") == 2\n\"\"\"\n\nfrom sys import stdin\n\nr, c, k, l = [int(x) for x in stdin.readline().split()]\nx0, y0 = [int(x) for x in stdin.readline().split()]\nt = [[int(x) for x in stdin.readline().split()] for i in range(r)]"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\") == 2\n\nassert solution(\"2 3 5 6\\n1 1\\n1 1 6\\n1 2 2\") == 5\n\nprint(solution(stdin))\n\n-----\nSample Input 1:\n2 2 1 10\n0 0\n1 4\n3 2\nSample Output 1:\n2\n\nSample Input 2:\n2 3 5 6\n1 1\n1 1 6\n1 2 2\nSample Output 2:\n5\n\"\"\"\n\nfrom typing import List, Tuple\n\nfrom collections import deque\nfrom itertools import product\n\nR, C, K, L = (int(i) for i in stdin.split())\np = [(int(i) - 1, j) for j in range(C) for i in stdin.split()[1:]]\nx, y = 0, 0\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\") == \"2\"\nassert solution(\"2 3 5 6\\n1 1\\n1 1 6\\n1 2 2\") == \"5\"\n\"\"\""
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2\\n') == '2'\nassert solution('2 3 5 6\\n1 1\\n1 1 6\\n1 2 2\\n') == '5'"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\") == 2\nassert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\\n1 0\\n2 4\\n3 2\") == 5\nassert solution(\"3 3 4 4\\n1 1\\n1 1 6\\n1 2 2\\n1 2 2\") == 5\nassert solution(\"3 3 4 4\\n1 1\\n1 1 6\\n1 2 2\\n1 2 2\") == 4\n\"\"\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 2 1 10\n0 0\n1 4\n3 2''') == '2'\nassert solution('''2 3 5 6\n1 1\n1 1 6\n1 2 2''') == '5'\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'\n\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n-2 -2 3') == '5.0000000000'\nassert solution('3\\n2 -2 2') == '3.1111111000'\nassert solution('3\\n0 -2 2') == '3.1111111000'\nassert solution('3\\n0 -2 2') == '3.1111111000'\nassert solution('2\\n3 -2 -2') == '5.0000000000'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\") == \"2.0000000000\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nflaws = int(input())\n\nflaws_set = set()\n\nfor i in range(flaws):\n    flaws_set.add(tuple(map(float, input().split())))\n\nlst = list(flaws_set)\n\nlst = sorted(lst)\n\nprint(lst[-1][0] + lst[-1][1])\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\n\n\"\"\"\n\nimport sys\nfrom decimal import Decimal, InvalidOperation\nimport math\nfrom typing import List, Tuple\n\nfrom rich.console import Console\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\\n') == '2.0000000000'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0'\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\") == \"2.0000000000\"\n\"\"\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\") == \"2.0000000000\"\n\"\"\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\") == \"2.0000000000\"\n\"\"\"\nimport math"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\nassert solution('1 1000 1') == '9'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\nassert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\nassert solution(\"1 9 5\") == \"1\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\nassert solution(\"2 4 4\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 9 5\") == \"1\\n5\"\n\"\"\""
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 9 5\") == \"1\\n5\"\nassert solution(\"1 100 10\") == \"9\\n19\"\n\"\"\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 9 5') == '1\\n5'\nassert solution('1 100 10') == '9\\n19'\n\"\"\"\n\na, b, s = map(int, input().split())\n\nnum = a\nwhile num < b:\n    if sum(map(int, str(num))) == s:\n        print(num)\n        break\n    num += 1\nelse:\n    print(b)"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1 1\\n') == ''\nassert solution('2 9 5\\n') == '1\\n5'\nassert solution('1 100 10\\n') == '9\\n19'\nassert solution('1 10 4\\n') == '0\\n0'\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 9 5') == '1\\n5'\nassert solution('1 100 10') == '9\\n19'\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 9 5\\n') == '1'\nassert solution('1 100 10\\n') == '9'\nassert solution('1 9 1\\n') == '0'\nassert solution('1 9 3\\n') == '2'\n\n##############################################################################################\nimport sys\na, b, s = input().split()\nprint('\\n'.join(str(i) for i in range(int(a), int(b) + 1) if sum(int(d) for d in str(i)) == int(s)))\n##############################################################################################"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n1\") == \"1\\n1\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n1\") == \"1\"\nassert solution(\"4 5\\n4 1 2 4 4\\n4 3 2 1\") == \"7\\n4 4 2 4 4 1 4\"\nassert solution(\"2 2\\n1\\n2\") == \"2\"\nassert solution(\"3 3\\n2 1 2\\n2 3 1\") == \"2\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1\n1''') == '1\\n1'\nassert solution('''2\n3\n2\n1''') == '2\\n1\\n2'\nassert solution('''3\n3\n1 2 3\n1 2 3''') == '3\\n1\\n2\\n1'\nassert solution('''4\n4\n1 3 1 2 4\n4\n1 2 3 1 4\n4\n1 3 2 2 4\n4\n1 3 2 2 4\n4\n1 3 2 3 4\n4\n1 3 2 3 4\n4\n1 2 1 1 4\n4\n1 2 2 2 4\n4\n1 2 2 2 4\n4\n1 1 1 1 4\n4\n1 1 1 1 4\n4\n1 1 1 1 4\n4\n1 1 1 1 4\n4\n1 1 1 1 4''') == '9\\n1\\n1\\n4\\n1\\n2\\n2\\n4\\n2\\n4\\n1\\n4\\n2\\n2\\n4\\n1\\n1\\n1\\n1\\n4\\n4\\n1\\n2\\n2\\n4\\n4\\n2\\n4\\n1\\n1\\n1\\n1\\n4\\n1\\n2\\n2\\n4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n4\\n1\\n1\\n1\\n1\\n2\\n2\\n4\\n1\\n2\\n2\\n1\\n1\\n2\\n4\\n4\\n1\\n2\\n2\\n1\\n2\\n2\\n2\\n1\\n2\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n4\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n4\\n2\\n4\\n4\\n1\\n2\\n2\\n4\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n4\\n1\\n1\\n1\\n1\\n2\\n4\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n2\\n4\\n1\\n1\\n4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n4\\n4\\n1\\n1\\n1\\n1\\n4\\n1\\n1\\n1\\n1\\n1\\n4\\n1\\n1\\n1\\n1\\n4\\n1\\n4\\n1\\n1\\n1\\n1\\n1\\n1\\n4\\n4\\n1\\n1\\n1\\n1\\n1\\n1\\n4\\n1\\n1\\n1\\n1\\n2\\n4\\n1\\n2\\n1\\n1\\n2\\n2\\n4\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n4\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n4\\n1\\n1\\n1\\n1\\n1\\n1\\n4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n4\\n1\\n1\\n1\\n1\\n4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n4 1 2 4 4\\n4 3 2 1') == '7\\n4 4 2 4 4 1 4'\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n1\\n1') == '1\\n1'\nassert solution('4 5\\n4 1 2 4 4\\n4 3 2 1') == '7\\n4 4 2 4 4 1 4'\n\"\"\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"2 3\") == \"0\"\n\"\"\"\nimport sys\n\nfrom pyspark.sql import SparkSession\n\nassert sys.version_info >= (3, 5) # make sure we have Python 3.5+"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"1 1\n1\n1\n\"\"\") == \"1 1\"\n\nassert solution(\"\"\"4 5\n4 1 2 4 4\n4 3 2 1\n\"\"\") == \"7 4 4 2 4 4 1 4\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n1') == '1\\n1'\n\nassert solution('4 5\\n4 1 2 4 4\\n4 3 2 1') == '7\\n4 4 2 4 4 1 4'\n\"\"\"\n\nn, m = input().split()\narr = list(map(int, input().split()))\narr = list(set(arr))\narr.sort()\narr.insert(0, 0)\narr.append(int(n))\narr2 = list(map(int, input().split()))\ni = 0\nans = []\nwhile len(ans) < int(n):\n    if arr2[i] == arr[i]:\n        ans.append(arr2[i])\n        i += 1\n    else:\n        ans.append(arr2[i - 1])\n    if i == int(m):\n        ans.append(arr2[i])\n        i += 1\n    else:\n        ans.append(arr2[i])\n    if i == int(n):\n        break\n    else:\n        i += 1\nfor i in ans:\n    print(i)\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5\\n4 1 2 4 4\\n4 3 2 1') == '7\\n4 4 2 4 4 1 4'\nprint(solution(input()))\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n4\\n1\") == \"1\"\nassert solution(\"1 1\\n4\\n2\") == \"1\"\nassert solution(\"2 4\\n5 7\\n1 1 1 1 1\") == \"5\"\nassert solution(\"1 1\\n2\\n1\") == \"1\"\nassert solution(\"1 2\\n3\\n2\") == \"1\"\n\"\"\"\n\nimport sys\nsys.stdin = open(\"input.txt\")\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n\"\"\"\n\nfrom collections import deque\n\nfrom utils import get_input"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2 10 3 2\\n') == '4'\nassert solution('10 10 5 0\\n') == '10'\nassert solution('10 10 5 2\\n') == '10'"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\n\"\"\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 10 3 2\\n') == '4'\nassert solution('10 10 5 0\\n') == '10'\n\"\"\"\n\n\nfrom math import sqrt, gcd\nfrom sys import stdin\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\n\"\"\""
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 10 3 2\n''') == '4'\n\"\"\""
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10 3 2\") == 4\n\"\"\"\n\nfrom sys import stdin\n\nd, g, n, k = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2, 1, 20) == 10\nassert solution(6, 100, 9294) == 111\n\"\"\"\n\nx, a, b = map(int, input().split())\n\ndigit = input()\nallowed_digits = set(map(int, digit))\n\nprint(sum((b - a + 1) // x * len(allowed_digits) + len([i for i in range(a, b + 1) if ''.join(sorted(set(str(i))))[0] in allowed_digits]) for x in range(1, 10 ** 11 + 1) if x % x in allowed_digits))\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 1 20\n0123456789''') == '10'\nassert solution('''6 100 9294\n23689''') == '111'\n\"\"\"\n\nx, a, b = map(int, input().split())\ndigits = sorted(set(map(int, input().strip())))\n\ncount = 0\nfor i in range(a, b + 1):\n    if i % x == 0:\n        count += 1\n        digits_str = [str(digit) for digit in digits]\n        n = str(i)\n        num = ''\n        for d in n:\n            if d in digits_str:\n                num += d\n        if len(num) == x:\n            count += 1\nprint(count)\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 20\\n0123456789\") == \"10\"\nassert solution(\"6 100 9294\\n23689\") == \"111\"\n\"\"\"\n\nfrom typing import List\n\nX: int = int(input())\nA: int = int(input())\nB: int = int(input())\n\nallowed_digits: List[int] = list(map(int, input()))\nallowed_digits.sort()\n\nprint(B // X - (A - 1) // X)\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"2 1 20\"\n\"0123456789\"\n) == \"10\"\nassert solution(\n\"6 100 9294\"\n\"23689\"\n) == \"111\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\nprint(\"Passed all test cases!\")"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 20\\n0123456789') == '10'\nassert solution('6 100 9294\\n23689') == '111'"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n\"\"\""
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 20\\n0123456789') == '10'\nassert solution('6 100 9294\\n23689') == '111'\n\"\"\""
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 1 20\n0123456789''') == '10'\nassert solution('''6 100 9294\n23689''') == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'\n\"\"\""
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 3.666667'\n\"\"\""
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1''') == '1.500000 2.666667'\nassert solution('''5 2\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1''') == '1.500000 3.666667'\nassert solution('''0 0\n1 S 2\n2 R 2\n3 R 2\n4 R 2\n5 R 1\n6 S 2\n7 S 1\n8 S 1\n9 R 3\n10 R 1\n11 R 1\n12 R 2\n13 R 1\n14 S 1\n15 S 1\n16 R 2\n17 R 3\n18 S 2\n19 S 1\n20 R 2\n21 R 1\n22 R 3\n23 R 3\n24 R 1\n25 R 2\n26 R 1\n27 R 1\n28 R 1\n29 R 2\n30 R 2\n31 R 2\n32 R 3\n33 S 3\n34 R 3\n35 R 2\n36 R 1\n37 R 1\n38 R 3\n39 R 2\n40 R 1\n41 R 2\n42 S 2\n43 S 1\n44 S 3\n45 S 1\n46 R 2\n47 R 2\n48 R 3\n49 R 2\n50 S 1\n51 S 1\n52 S 1\n53 R 2\n54 R 1\n55 R 1\n56 R 2\n57 R 1\n58 R 2\n59 R 1\n60 S 3\n61 S 3\n62 R 3\n63 R 1\n64 R 3\n65 R 3\n66 R 1\n67 R 2\n68 R 1\n69 R 2\n70 R 1\n71 R 3\n72 R 2\n73 R 1\n74 R 1\n75 R 1\n76 R 1\n77 R 1\n78 R 2\n79 R 1\n80 R 2\n81 R 1\n82 R 1\n83 R 1\n84 R 3\n85 R 1\n86 R 3\n87 R 1\n88 R 1\n89 R 2\n90 R 1\n91 R 1\n92 R 1\n93 R 1\n94 R 2\n95 R 2\n96 R 1\n97 R 2\n98 R 1\n99 R 1\n100 R 1''') == '0.000000 4.166667'\n\n\"\"\"\none of the most commonly used scenarios for DP is creating a utility for choosing a strategy for selecting a range of variables. For example, the factorials are a variation of this problem.\n\nLet us consider the following example, where we are given an array of prices [p1, p2, p3,..., pn] and we want to find the maximum profit of buying and selling a single stock. The problem is that there may be many such combinations and we don\u2019t want to try them all. We can define the profit of buying and selling the stock at a particular price as follows:\n\nprofit[i] = max(profit[i], price[i] - price[j]) where j < i and price[j] + profit[j] is the max profit if we sell stock at price[j].\n\nIn the above example, we have the following possible scenarios:\n\nbuy at p1 -> profit = p1 - p1 = 0\nbuy at p2 -> profit = p2 - p2 = 0\nbuy at p3 -> profit = p3 - p3 = 0\nbuy at p4 -> profit = p4 - p4 = 0\nbuy at p5 -> profit = p5 - p5 = 0\nsell at p1 -> profit = p1 - p2 = p2 - p1 = p2 - p3 = p3 - p1 = p3 - p5 = p5 - p1 = p5 - p4 = p4 - p1 = p4 - p2 = p2 - p4 = p2 - p3 = p3 - p4 = 0\nsell at p2 -> profit = p2 - p2 = 0\nsell at p3 -> profit = p3 - p3 = 0\nsell at p4 -> profit = p4 - p4 = 0\nsell at p5 -> profit = p5 - p5 = 0\n\nGiven a sorted array of prices [p1, p2, p3,..., pn], find the maximum profit that can be made by selling exactly one stock.\n\nInput Format\n\nThe first line contains an integer N denoting the number of stocks.\nThe next N lines contain an integer each denoting the price of the stock.\n\nConstraints\n\n1 <= N <= 10^5\n1 <= pi <= 10^9\n\nOutput Format\n\nPrint a single integer denoting the maximum profit that can be made by selling exactly one stock.\n\nSample Input 0\n\n2\n3\n1\n2\nSample Output 0\n\n1\nExplanation 0\n\nBuy the second stock at price 1, and sell it at price 2. Profit is 1.\n\"\"\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 2.666667'\nassert solution('5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 3.666667'\n\n----Constraints----\n$n$ and $T$ range from $0$ to $10^6$.\n$d$ ranges from $0$ to $10^9$.\n$R$ and $S$ are either 'R' or 'S'.\nIt is guaranteed that there are at least one in-store and one remote prescription.\n\"\"\""
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 3.666667\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open(\"test_input_1.txt\").read()) == \\\n    \"1.500000 2.666667\"\n\n\"\"\"\n\nimport math\nimport time\nimport sys"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 2.666667\"\n\"\"\"\n\nn, t = map(int, stdin.readline().split())\nprescription_tuple = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\nin_store_prescription_list = [prescription for prescription in prescription_tuple if prescription[1] == 'R']\nremote_prescription_list = [prescription for prescription in prescription_tuple if prescription[1] == 'S']\n\nin_store_prescription_list.sort(key=lambda x: x[0])\nremote_prescription_list.sort(key=lambda x: x[0])\n\nin_store_time_list = []\nremote_time_list = []\n\nfor in_store_prescription in in_store_prescription_list:\n    in_store_time_list.append(in_store_prescription[0])\n    if len(in_store_time_list) == t:\n        break\n\nfor remote_prescription in remote_prescription_list:\n    remote_time_list.append(remote_prescription[0])\n    if len(remote_time_list) == t:\n        break\n\nin_store_time_list.extend(remote_time_list)\nin_store_time_list.sort()\nprint(in_store_time_list[-1] - in_store_time_list[0])\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 2\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n\"\"\") == '1.500000 3.666667'\n\nassert solution(\"\"\"\n5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n\"\"\") == '0 1.500000 2.666667'\n\nassert solution(\"\"\"\n0 0\n\"\"\") == '0 0'\n\nassert solution(\"\"\"\n5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n\"\"\") == '0 1.500000 2.666667'\n\nassert solution(\"\"\"\n5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n\"\"\") == '0 1.500000 2.666667'"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 3.666667'\nassert solution('1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 3.666667'\nassert solution('5 2\\n1 R 2\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '0.666667 3.666667'\nassert solution('5 2\\n1 R 2\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '0.666667 3.666667'"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 2.666667\"\nassert solution(\"5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 3.666667\""
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 2.666667\"\nassert solution(\"5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 3.666667\"\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 6\\n101010\\n111001\\n101001') == 3\nassert solution('4 5\\n10010\\n01010\\n10101\\n01001') == 3\n\"\"\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == '3'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6\\n101010\\n111001\\n101001') == '3'\nassert solution('4 5\\n10010\\n01010\\n10101\\n01001') == '3'\n\"\"\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == 3\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == 3\nassert solution(\"4 5\\n101010\\n01010\\n10101\\n01001\") == -1\nassert solution(\"4 5\\n101010\\n11100\\n10101\\n01001\") == -1\n\n\"\"\"\nimport itertools\n\nclass Matrix:\n    def __init__(self, rows):\n        self.rows = rows\n        self.cols = len(rows[0])\n\n    def rotate_90(self):\n        return Matrix([list(reversed(i)) for i in zip(*self.rows)])\n\n    def get_square_killers(self):\n        l = []\n        for i in range(0, self.rows):\n            for j in range(0, self.cols):\n                if self.rows[i][j] == 1:\n                    if i + 1 <= self.rows and j + 1 <= self.cols:\n                        l.append(self.rows[i:i+2, j:j+2])\n                    if i + 1 <= self.rows and j - 1 >= 0:\n                        l.append(self.rows[i:i+2, j-2:j+1])\n                    if i - 1 >= 0 and j + 1 <= self.cols:\n                        l.append(self.rows[i-2:i+1, j:j+2])\n                    if i - 1 >= 0 and j - 1 >= 0:\n                        l.append(self.rows[i-2:i+1, j-2:j+1])\n        return [s for s in l if list(s.ravel()).count(1) == s.size]"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == '3'\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == '3'\n\"\"\"\nimport collections\nimport numpy as np"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == \"3\"\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == \"3\"\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == \"3\"\n\"\"\"\n\n\n\n\"\"\"\nAdvent of Code 2019\n\n--- Day 6: Custom Customs ---\nAs your flight approaches the regional airport where you'll switch to a much larger plane, customs declaration forms are distributed to the passengers.\n\nThe form asks a series of 26 yes-or-no questions marked a through z. All you need to do is identify the questions for which anyone in your group answers \"yes\". Since your group is just you, this doesn't take very long.\n\nHowever, the person sitting next to you seems to be experiencing a language barrier and asks if you can help. For each of the people in their group, you write down the questions for which they answer \"yes\", one per line. For example:\n\nabcx\nabcy\nabcz\nIn this group, there are 6 questions to which anyone answered \"yes\": a, b, c, x, y, and z. (Duplicate answers to the same question don't count extra; each question counts at most once.)\n\nAnother group asks for your help, then another, and eventually you've collected answers from every group on the plane (your puzzle input). Each group's answers are separated by a blank line, and within each group, each person's answers are on a single line. For example:\n\nabc\n\na\nb\nc\n\nab\nac\n\na\na\na\na\n\nb\nThis list represents answers from five groups:\n\nThe first group contains one person who answered \"yes\" to 3 questions: a, b, and c.\nThe second group contains three people; combined, they answered \"yes\" to 3 questions: a, b, and c.\nThe third group contains two people; combined, they answered \"yes\" to 3 questions: a, b, and c.\nThe fourth group contains four people; combined, they answered \"yes\" to only 1 question, a.\nThe last group contains one person who answered \"yes\" to only 1 question, b.\nIn this example, the sum of these counts is 3 + 3 + 3 + 1 + 1 = 11.\n\nFor each group, count the number of questions to which anyone answered \"yes\". What is the sum of those counts?\n\nYour puzzle answer was 3180.\n\n--- Part Two ---\nAs you finish the last group's customs declaration, you notice that you misread one word in the instructions:\n\nYou don't need to identify the questions to which anyone answered \"yes\"; you need to identify the questions to which everyone answered \"yes\"!\n\nUsing the same example as above:\n\nabc\n\na\nb\nc\n\nab\nac\n\na\na\na\na\n\nb\nThis list represents answers from five groups:\n\nIn the first group, everyone (all 1 person) answered \"yes\" to 3 questions: a, b, and c.\nIn the second group, there is no question to which everyone answered \"yes\".\nIn the third group, everyone answered yes to only 1 question, a. Since some people did not answer \"yes\" to b or c, they don't count.\nIn the fourth group, everyone answered yes to only 1 question, a.\nIn the fifth group, everyone (all 1 person) answered \"yes\" to 1 question, b.\nIn this example, the sum of these counts is 3 + 0 + 1 + 1 + 1 = 6.\n\nFor each group, count the number of questions to which everyone answered \"yes\". What is the sum of those counts?\n\nYour puzzle answer was 3222.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == \"3\"\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == \"3\"\n\"\"\""
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == \"3\"\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == \"3\"\nassert solution(\"3 6\\n101010\\n111001\\n101001\") == \"3\"\n\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == \"3\"\nassert solution(\"4 5\\n10110\\n01010\\n10101\\n01001\") == \"1\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\") == '-3 -1'\n\nassert solution(\"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\") == '3 4'\n\nassert solution(\"1\\n0 0\") == '0 0'\n\nassert solution(\"4\\n6 -1\\n3 5\\n-1 -1\") == '3 -1'\n\nprint(\"All tests passed.\")\n\n\"\"\""
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n\") == \"3 -1\"\nassert solution(\"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\\n\") == \"3 4\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n\") == \"3 -1\\n3 1\"\nassert solution(\"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\\n\") == \"3 4\\n3 -1\"\n\"\"\""
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n2 2') == '1 1'\nassert solution('1 1\\n-1 -1') == '1 -1'\nassert solution('2 1\\n1 1') == '1 1'\nassert solution('2 1\\n2 1') == '2 1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\") == \"3 -1\"\nassert solution(\"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\") == \"3 4\""
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\") == \"3 -1\"\n\"\"\""
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n0 0\n0 1\n1 0\n0 -1\n-1 0''') == '-3 -1'\nassert solution('''4\n2 4\n6 -1\n3 5\n-1 -1''') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\") == \"3 -1\"\nassert solution(\"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\") == \"3 4\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n\") == \"3 -1\\n3 1\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n\") == \"3 -1\"\n\"\"\"\n\nimport sys\nfrom typing import List\nfrom collections import deque\n\n\nclass Solution:\n    def __init__(self, pool_size: int) -> None:\n        self.pool_size = pool_size\n\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.readline())\n        pos = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n        dist = list(map(lambda x: abs(x[0]) + abs(x[1]), pos))\n        pos = list(zip(dist, pos))\n        pos.sort()\n        #print(pos)\n\n        left = deque()\n        right = deque()\n        for p in pos:\n            if left and left[-1][0] > p[0]:\n                right.appendleft(left.pop())\n                left.appendleft(p)\n            else:\n                left.append(p)\n        #print(left, right)\n\n        result = [left.pop()[1] for _ in range(self.pool_size)]\n        #print(result)\n\n        return str(result[0][0]) +'' + str(result[0][1])\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\") == \"2 5.086781\"\nassert solution(\"3 0.25 2 45 20\\n0 0\\n2 0\\n1 1.5\") == \"1 12.715255\"\nassert solution(\"3 2 5 20\\n0 0\\n2 0\\n1 1.5\") == \"1 13.453085\"\n\"\"\""
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6 5 45 20\") == '2 5.086781'\n\"\"\"\n\nimport math\n\nimport sys\n\nsys.setrecursionlimit(100000)\n\nn, omega, v0, theta, w, x1, y1, x2, y2, x3, y3 = [float(i) for i in input().split()]\n\np = (x2 - x1, y2 - y1)\nq = (x3 - x1, y3 - y1)"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\\n\") == \"2 5.086781\"\n\"\"\"\n\nfrom math import sqrt, atan, pi\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 6 5 45 20\\n0 0\\n2 0\\n1 1.5') == '2 5.086781'\nprint(solution(stdin))"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6 5 45 20\\\\n0 0\\\\n2 0\\\\n1 1.5\") == \"2 5.086781\"\nassert solution(\"3 0.25 2 45 20\\\\n0 0\\\\n2 0\\\\n1 1.5\") == \"1 12.715255\"\n\"\"\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\") == \"2 5.086781\"\nassert solution(\"3 0.25 2 45 20\\n0 0\\n2 0\\n1 1.5\") == \"1 12.715255\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\") == \"2 5.086781\"\nassert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\\n3 1 0\") == \"1 12.715255\"\n\n\"\"\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 6 5 45 20\n0 0\n2 0\n1 1.5''') == '2 5.086781'\nassert solution('''3 6 5 45 20\n0 0\n2 0\n1 1.5''') == '1 12.715255'\n\"\"\"\n\nfrom typing import List, Tuple, Union, Optional\n\nfrom utils import read_input\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\") == \"2 5.086781\"\nassert solution(\"3 0.25 2 45 20\\n0 0\\n2 0\\n1 1.5\") == \"1 12.715255\"\nprint('The local tests are done. Click on \"Check\" for more cases.')\n\"\"\"\nimport math"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\") == \"2 5.086781\"\nassert solution(\"3 0.25 2 45 20\\n0 0\\n2 0\\n1 1.5\") == \"1 12.715255\""
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\") == \"8\"\nassert solution(\"4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\") == \"1\"\n\"\"\"\n\nimport math\nfrom collections import defaultdict\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4') == 1\n\"\"\"\nimport math"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(int(input()))\nprint(solution(str(input())))\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\\n') == 8\nassert solution('4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\\n') == 1\nassert solution('4\\n7 0 3 4\\n7 0 3 4\\n') == 0\nassert solution('4\\n2 0 6 4\\n1 0 3 4\\n') == 0\nassert solution('4\\n3 0 7 2\\n3 0 6 2\\n') == 0\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\") == \"8\"\nassert solution(\"4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\") == \"1\"\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1') == 8\nassert solution('5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4') == 1\n\n\"\"\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\") == \"8\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4') == 1\nassert solution('4 0 4 4\\n7 0 3 4') == 0\n\"\"\""
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4') == '1'\n\"\"\"\n\nn = int(input())\ntrenches = [input().split() for _ in range(n)]\ntrenches = list(map(list, zip(*trenches)))\n\n\"\"\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'impossible'\nassert solution('1') == '1 1'\nassert solution('5') == '2 2'\nassert solution('9') == '3 3'\nassert solution('10') == '4 2'\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(10) == \"4 3\"\n\nassert solution(1000) == \"impossible\""
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '4 3'\nassert solution('7') == '4 3'\nassert solution('10') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"4 3\"\n\"\"\"\n\n\"\"\"\n\u041f\u0435\u0440\u0432\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438:\n\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430, \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \"n m\"\n\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u044f \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0438 \u043d\u043e\u0432\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b\n\u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0435\u0442, \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0432\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e - \"impossible\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == 'impossible'\nassert solution('7') == '4 3'\n\"\"\"\nimport math"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7') == '4 3'\n\"\"\""
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1\\n3\\n') == '16'\n\"\"\""
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1\\n3\") == \"16\"\nassert solution(\"4\\n2\\n4\\n1\\n4\") == \"109\"\n\"\"\"\n\nn = int(stdin.readline())\nm = [int(stdin.readline()) for _ in range(n)]\n\nprint(sum(m) % (10**9))\n"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2\\n4\\n1\\n4\\n') == '109'\nassert solution('3\\n1\\n3\\n') == '9'\nassert solution('3\\n2\\n3\\n') == '3'\n\n\"\"\"\n\nfrom __future__ import print_function\n\nimport sys"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n2\\n3\\n\") == \"123456789\"\nassert solution(\"6\\n1\\n2\\n3\\n4\\n5\\n6\\n\") == \"1234567890\"\nassert solution(\"2\\n2\\n2\\n\") == \"2222222222\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2\\n4\\n1\\n4\") == \"109\"\n\"\"\"\n\nn = int(input())\nans = 0\nfor i in range(n):\n    arr = int(input())\n    ans += arr * (i + 1)\nprint(ans % (10 ** 9))"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\\n2\") == \"2\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"1111111111\"\nassert solution(\"3\\n5\\n2\\n3\\n4\\n1\\n6\\n7\\n8\\n9\") == \"1011110111\"\n\nprint(solution(stdin.read()))\n\"\"\"\nimport sys"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2\\n4\\n1\\n4') == '109'\nassert solution('1\\n1') == '0'\nassert solution('1\\n2') == '2'\nassert solution('2\\n1\\n4') == '16'\nassert solution('1\\n10\\n12\\n5\\n11') == '4320'\n"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1\\n3') == '16'\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('2\\n1\\n3'), '16')\n        self.assertEqual(solution('4\\n2\\n4\\n1\\n4'), '109')"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '0'\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '6'\nassert solution('1\\n2\\n3\\n4') == '10'\nassert solution('1\\n2\\n3\\n4\\n5') == '15'"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2\\n4\\n1\\n4\") == \"109\"\n\"\"\""
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 1 1\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0\\n0 0'\nassert solution('2 2') == '0\\n1 1'\nassert solution('4 3 1 1') == '0\\n0 1 2'\nassert solution('4 3 1 1 2') == '0\\n0 1 2 1'\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n') == '3\\n1 2 1\\n1 2 2\\n1 2 2\\n'\n\n------Solution------\nlines = stdin.splitlines()\nchilds = lines[0].split()\nfor i in range(1, len(lines)):\n    card = lines[i].split()\n    childs.pop(childs.index(card[0]))\n    childs.pop(childs.index(card[1]))\n    childs.append(str(int(card[0]) + int(card[1])))\n    childs.append(str(int(card[0]) + int(card[1])))\n    childs.append(str(int(card[0]) + int(card[1])))\n    \nprint(' '.join(childs))\n\n-----------------------------------------\n\nlines = stdin.splitlines()\nchilds = lines[0].split()\ncards = [0] * int(childs[0])\ncards.extend([0] * int(childs[1]))\nfor i in range(2, len(lines)):\n    card = lines[i].split()\n    cards[int(card[0])] += int(card[1])\n    cards[int(card[0])] += int(card[1])\n    cards[int(card[0])] += int(card[1])\nprint(len(cards))\nfor i in range(len(cards)):\n    print(str(i) +'' + str(cards[i]))\n\n-----------------------------------------\n\nstdin = open('input.txt', 'r').read().splitlines()\nn, m = stdin[0].split()\nn = int(n)\nm = int(m)\ncards = [0] * n\nfor i in range(1, m+1):\n    child1, child2, card = stdin[i].split()\n    cards[int(child1)-1] += int(card)\n    cards[int(child2)-1] += int(card)\n    cards[int(child1)-1] += int(card)\nprint(len(cards))\nfor i in range(len(cards)):\n    print(str(i) +'' + str(cards[i]))\n\n-----------------------------------------\n\nlines = stdin.readlines()\nn, m = lines[0].split()\nn = int(n)\nm = int(m)\ncards = [0] * n\nfor i in range(1, m+1):\n    child1, child2, card = lines[i].split()\n    cards[int(child1)-1] += int(card)\n    cards[int(child2)-1] += int(card)\n    cards[int(child1)-1] += int(card)\nprint(len(cards))\nfor i in range(len(cards)):\n    print(str(i) +'' + str(cards[i]))\n\n-----------------------------------------\n\nimport sys\n\nstdin = open('input.txt', 'r').read().splitlines()\nn, m = stdin[0].split()\nn = int(n)\nm = int(m)\ncards = [0] * n\nfor i in range(1, m+1):\n    child1, child2, card = stdin[i].split()\n    cards[int(child1)-1] += int(card)\n    cards[int(child2)-1] += int(card)\n    cards[int(child1)-1] += int(card)\nprint(len(cards))\nfor i in range(len(cards)):\n    print(str(i) +'' + str(cards[i]))\n\n-----------------------------------------\n\nlines = stdin.readlines()\nn, m = lines[0].split()\nn = int(n)\nm = int(m)\ncards = [0] * n\nfor i in range(1, m+1):\n    child1, child2, card = lines[i].split()\n    cards[int(child1)-1] += int(card)\n    cards[int(child2)-1] += int(card)\n    cards[int(child1)-1] += int(card)\nprint(len(cards))\nfor i in range(len(cards)):\n    print(str(i) +'' + str(cards[i]))\n\n-----------------------------------------\n\nlines = stdin.readlines()\nn, m = lines[0].split()\nn = int(n)\nm = int(m)\ncards = [0] * n\nfor i in range(1, m+1):\n    child1, child2, card = lines[i].split()\n    cards[int(child1)-1] += int(card)\n    cards[int(child2)-1] += int(card)\n    cards[int(child1)-1] += int(card)\nprint(len(cards))\nfor i in range(len(cards)):\n    print(str(i) +'' + str(cards[i]))\n\n-----------------------------------------\n\nlines = stdin.readlines()\nn, m = lines[0].split()\nn = int(n)\nm = int(m)\ncards = [0] * n\nfor i in range(1, m+1):\n    child1, child2, card = lines[i].split()\n    cards[int(child1)-1] += int(card)\n    cards[int(child2)-1] += int(card)\n    cards[int(child1)-1] += int(card)\nprint(len(cards))\nfor i in range(len(cards)):\n    print(str(i) +'' + str(cards[i]))\n\n-----------------------------------------\n\nimport sys\n\nstdin = open"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 3 1 1\\n1 3\\n2 3\\n4 1\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1\\n3 1 0\"\nassert solution(\"4 3 3 1 1\\n1 3\\n2 3\\n4 1\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n1 2') == '3\\n1 2 1\\n1 2 2\\n1 2 2'\nassert solution('4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n') == '5\\n1 3 1\\n2 3 2\\n4 1 0'\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n1 2\") == \"3\\n1 2 1\\n1 2 2\\n1 2 2\"\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n2 4 1\\n3 1\\n3 2\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\\n2 4 1\\n3 1 0\\n3 2 1\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n5 1\\n1 2\\n1 2\\n1 2\") == \"3\\n1 2 1\\n1 2 2\\n1 2 2\"\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\"\n\n\"\"\"\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n5 1\\n1 2\\n1 2\\n1 2') == '3\\n1 2 1\\n1 2 2\\n1 2 2'\nassert solution('4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n') == '5\\n1 3 1\\n2 3 2\\n4 1 0'\n\n'''\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n1 2\") == \"3\\n1 2 1\\n1 2 2\\n1 2 2\"\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\") == \"5\\n1 3 1\\n2 3 2\\n4 1 0\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n\") == \"3\\n1 2 1\\n1 2 2\\n1 2 2\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(sample_input_1) == [1, 2]\nassert solution(sample_input_2) == \"impossible\"\nassert solution(sample_input_3) == \"impossible\"\nassert solution(sample_input_4) == [1, 2, 3]\n\n\"\"\""
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1\") == \"impossible\"\n\n\"\"\""
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1\") == \"impossible\"\nassert solution(\"1 2\\n3 1 1\\n3 2 1\") == \"1 2\"\n\n-----Explanation-----\nSample Input 1:\nThe first line of input contains two integers $n$ and $m$ (1 \\leq n,m \\leq 1000).\nThe next line contains two integers $d$ and $e$ (1 \\leq d,e \\leq 10^9$).\nThe next $e$ lines contain three integers $s$, $k$ and $t$ ($0 \\leq s \\leq d$, $1 \\leq k \\leq n$, and $0 \\leq t \\leq m$)\n\nThe output is a single line with the string \u201cimpossible\u201d if there is no assignment of toys that avoids crying today.\n\nIf there is an assignment of toys to kids such that no kid will start crying today, the output is a single line with $n$ distinct integers, the $i^{\\text {th}}$ of which is the toy that kid $i$ should play with.\n\nIn this case, the output is \u201c1 2\u201d, which means that kids numbered 1 and 2 should play with toys numbered 1 and 2, respectively.\n\nSample Input 2:\n3 2\n4 2 1\n2 1 2\n2 2 1\nSample Output 2:\n1 2\n\n-----Solution-----\n'''"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1') == 'impossible'\n\"\"\"\nimport collections\nimport itertools"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1\") == \"impossible\"\nassert solution(\"2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1\\n1 1 3\") == \"1 2\"\n\"\"\""
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1\") == \"impossible\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 1\\n0 2 2\\n1 1 3\\n2 1 2\\n2 2 1\\n3 2 3\\n4 2 1\") == '1 2'"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1') == 'impossible'\nassert solution('1 3\\n6 7') == '1 2'\n\"\"\""
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1') == 'impossible'\nassert solution('2 2\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1') == '1 2'\n\"\"\"\n\n\nimport bisect\nfrom collections import deque, defaultdict\nimport heapq\nfrom typing import Dict, List, Tuple, Set, Deque\n\n\nclass Solution:\n    def __init__(self):\n        self.total_duration = None\n        self.num_events = None\n\n    def solution(self, input_str: str) -> str:\n        self.total_duration, self.num_events = map(int, input_str.split(\"\\n\")[0].split())\n        events = list(map(int, input_str.split(\"\\n\")[1:]))\n        assert len(events) == self.num_events\n\n        toys_played = defaultdict(lambda: deque())\n        for event in events:\n            t, k, tt = event\n            toys_played[k].append(t)\n\n        toy_choices = set()\n        toys_played_copy = toys_played.copy()\n        for k, dq in toys_played.items():\n            if len(dq) == 1:\n                continue\n            if len(dq) > 2:\n                raise Exception(\"too many toys\")\n            t1, t2 = dq\n            # dq of len 2: t1 == 0 or t2 == 0\n            # dq of len 2: t1 > 0 and t2 > 0\n            if t1 == 0 or t2 == 0:\n                continue\n            toy_choices.add(t1)\n            toy_choices.add(t2)\n\n        if not toy_choices:\n            return \"impossible\"\n\n        toy_choices = sorted(toy_choices)\n        max_toy_num = len(toy_choices)\n        toy_counts = [0 for _ in range(max_toy_num)]\n\n        for k, dq in toys_played.items():\n            if len(dq) == 1:\n                t = dq[0]\n                if t in toy_choices:\n                    toy_counts[bisect.bisect_left(toy_choices, t)] += 1\n\n        # assert len(set(toy_counts)) == 1\n        toy_counts = toy_counts[::-1]\n\n        # assert len(toy_choices) == sum(toy_counts)\n        toy_choices = [toy_choices[i] for i in range(len(toy_counts)) if toy_counts[i] > 0]\n\n        if len(toy_choices) == 0:\n            return \"impossible\"\n\n        toy_choices = deque(toy_choices)\n        print(toy_choices)\n        print(toy_counts)\n        return \" \".join(map(str, toy_choices))\n"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1 1\"\nassert solution(\"4\") == \"4 1\"\nassert solution(\"20\") == \"2020 1\"\nassert solution(\"2020\") == \"2020 2020\"\nassert solution(\"10\") == \"10 10\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n\"\"\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('15') == '5 3'\n\"\"\"\n\n\nfrom math import factorial\nfrom typing import Optional, Tuple\n"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\nprint('Success')"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n\"\"\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"5 2\"\nprint(solution(\"2020\"))"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '5 2'\n\"\"\""
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n\"\"\"\n\nimport sys\nimport operator"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n3\\nchocolate\\ncookies\\nicecream\\n\") == \"impossible\"\nassert solution(\"3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\\n\") == \"ambiguous\"\nassert solution(\"3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\\n\") == \"unique\"\n\"\"\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies'\n) == 'impossible'\n\nassert solution(\n    '3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies'\n) == 'unique'\n\nassert solution(\n    '3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies'\n) == 'ambiguous'\n\nassert solution(\n    '3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies'\n) == 'ambiguous'\n\n\"\"\"\n\nimport collections\nimport numpy as np"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\") == \"impossible\"\nassert solution(\"3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\") == \"ambiguous\"\nassert solution(\"3\\n2\\n0 chocolate\\n2 cookies\") == \"ambiguous\"\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import permutations\nfrom math import factorial\nfrom copy import deepcopy"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies') == 'impossible'\nassert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies') == 'unique'\nassert solution('3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies') == 'ambiguous'\n\nExplanation of Input Syntax:\nThe input is a single line containing three integers $N, K, M$, denoting the number of supermarkets, the number of stores, and the number of items your sister bought, respectively.\n\nThe next line has $N$ integers $0 \\leq i \\leq N - 1$ and a string $S$, denoting that item $S$ is available at the $i^\\text{th}$ store that your sister visited.\n\nThe last line has $M$ integers $0 \\leq i \\leq M - 1$ and a string $T$, denoting the name of the item your sister bought. It is guaranteed that every item occurs at most once at every store.\n\nThe input ends with a line containing $K$ lines, each with a single integer $i$ and a string $S$, denoting that item $S$ is available at the $i^\\text{th}$ store that your sister visited.\n\nSample Input 2:\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n3\nchocolate\nicecream\ncookies\nSample Output 2:\nunique\n\"\"\"\n\n\"\"\"\n\u641c\u7d22\u95ee\u9898\u7684\u6570\u636e\u7ed3\u6784\u662f\u6811\uff0c\u56e0\u4e3a\u5728\u641c\u7d22\u95ee\u9898\u4e2d\uff0c\u6211\u4eec\u6700\u591a\u53ea\u6709O(N)\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u6811\u7684\u9ad8\u5ea6\u4e0d\u4f1a\u8d85\u8fc7O(N)\u3002\n\n\u89e3\u51b3\u641c\u7d22\u95ee\u9898\u7684\u7b2c\u4e00\u6b65\uff0c\u5c31\u662f\u7528\u4e00\u4e2a\u6811\u6765\u5b58\u50a8\u6240\u6709\u7684\u8bb0\u5f55\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u5b57\u5178\u6765\u4ee3\u8868\u6811\u7684\u8282\u70b9\u3002\n\n\u6bcf\u4e00\u4e2a\u8282\u70b9\u867d\u7136\u4e5f\u6709\u591a\u4e2a\u5b69\u5b50\u8282\u70b9\uff0c\u4f46\u662f\u6ca1\u6709\u5173\u7cfb\uff0c\u56e0\u4e3a\u641c\u7d22\u4ec5\u4ec5\u9700\u8981\u627e\u5230\u8bb0\u5f55\uff0c\u5e76\u4e0d\u9700\u8981\u77e5\u9053\u5177\u4f53\u6709\u591a\u5c11\u5b69\u5b50\u8282\u70b9\u3002\n\n\u7b2c\u4e8c\u6b65\u5c31\u662f\u6784\u5efa\u4e00\u4e2a\u6811\u3002\u8fd9\u91cc\u6211\u4eec\u7528\u4e00\u4e2a\u961f\u5217\u6765\u6a21\u62df\u6811\u7684\u6784\u5efa\u8fc7\u7a0b\u3002\n\n\u6bcf\u4e00\u6b21\u6784\u5efa\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u8282\u70b9\u52a0\u5165\u961f\u5217\u4e2d\uff0c\u5e76\u628a\u5b69\u5b50\u8282\u70b9\u6302\u5728\u4e0a\u9762\u3002\n\n\u6700\u540e\u7b2c\u4e09\u6b65\u5c31\u662f\u641c\u7d22\u95ee\u9898\u3002\n\n\u5982\u679c\u7b2c\u4e00\u4e2a\u8282\u70b9\u662f\u6211\u4eec\u8981\u67e5\u627e\u7684\u8bb0\u5f55\uff0c\u90a3\u4e48\u5c31\u5f97\u5230\u4e86\uff0c\u4f46\u662f\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u4e0d\u662f\u6211\u4eec\u8981\u627e\u7684\u8bb0\u5f55\uff0c\u90a3\u4e48\u5c31\u6ca1\u6709\u89e3\u4e86\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u7528\u4e00\u4e2aset\u6765\u8bb0\u5f55\u6240\u6709\u5df2\u7ecf\u653e\u5165\u961f\u5217\u4e2d\u7684\u8282\u70b9\uff0c\u56e0\u4e3aset\u67e5\u627e\u901f\u5ea6\u5f88\u5feb\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u662f\u6709\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u67d0\u4e2a\u8282\u70b9\u53ef\u80fd\u4e0d\u4ec5\u4ec5\u662f\u6211\u4eec\u8981\u627e\u7684\u8bb0\u5f55\uff0c\u8fd8\u6709\u5176\u5b69\u5b50\u8282\u70b9\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u9650\u5236\u6761\u4ef6\u662f\u8282\u70b9\u53ea\u80fd\u52a0\u5165\u961f\u5217\u7684\u9996\u90e8\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u7ba1\u961f\u5217\u662f\u5426\u4e3a\u7a7a\u4e86\u3002\n\n\u6700\u540e\u7b2c\u56db\u6b65\u5c31\u662f\u8f93\u51fa\u6211\u4eec\u627e\u5230\u7684\u8bb0"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies') == 'impossible'\nassert solution('3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies') == 'unique'\nassert solution('3\\n4\\n0 chocolate\\n2 cookies\\n1 icecream') == 'ambiguous'\n\"\"\""
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == solution.__doc__\nprint(solution(s))\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n3\n0 chocolate\n1 icecream\n2 cookies''') == 'impossible'\n\nassert solution('''3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies''') == 'unique'\n\nassert solution('''3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies''') == 'ambiguous'"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream''') == 'unique'\nassert solution('''3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream''') == 'ambiguous'\nassert solution('''3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies''') == 'impossible'\nassert solution('''1\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream''') == 'impossible'\n\n-----Explanation-----\nFor example, in the first example, we have 3 stores, so we have the following numbers: [0, 1, 2]. In this particular case, we cannot know for sure where the items are ordered in the stores, so we return \"impossible\".\n\nIn the second example, we have 3 stores, so we have the following numbers: [0, 1, 2]. In this particular case, we can know for sure that the items are ordered in the stores, so we return \"unique\".\n\nIn the third example, we have 3 stores, so we have the following numbers: [0, 1, 2]. In this particular case, we can know for sure that the items are ordered in the stores, so we return \"unique\".\n\nIn the fourth example, we have 3 stores, so we have the following numbers: [0, 1, 2]. In this particular case, we cannot know for sure where the items are ordered in the stores, so we return \"impossible\".\n\nIn the fifth example, we have 3 stores, so we have the following numbers: [0, 1, 2]. In this particular case, we cannot know for sure where the items are ordered in the stores, so we return \"impossible\".\n\nIn the sixth example, we have 3 stores, so we have the following numbers: [0, 1, 2]. In this particular case, we can know for sure that the items are ordered in the stores, so we return \"unique\".\n'''\n"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n3\\n0\\tchocolate\\n1\\ticcream\\n2\\tcookies\") == \"unique\"\n\nassert solution(\"3\\n4\\n0\\tchocolate\\n1\\ticcream\\n2\\tcookies\\n2\\tchocolate\\n3\\ticcream\\n3\\tcookies\") == \"ambiguous\"\n\nassert solution(\"3\\n4\\n0\\tchocolate\\n1\\ticcream\\n2\\tcookies\\n2\\tchocolate\\n3\\tcocoa\") == \"impossible\"\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----\n\n----"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n3\\nchocolate\\ncookies\\nicecream') == 'unique'\nassert solution('3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies') == 'ambiguous'\nassert solution('2\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies') == 'impossible'\n'''"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n\"\"\"\nimport numpy as np\n\nN, K, M = [int(x) for x in input().split()]\n\nD = np.ones(32)\nfor i in range(1, 32):\n    D[i] = pow(2, i, M)\n\nK = K % M\n\nans = 0\n"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n\"\"\""
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 0 10\") == \"0\"\n\"\"\""
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\nassert solution('1 1 10') == '1'\n\"\"\""
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1 0 10''') == '0'\nassert solution('''1 2 10''') == '1'"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\n\"\"\"\n\nimport math\n\na = str(input().strip().split())\n\nn = int(a[0])\nk = int(a[1])\nm = int(a[2])\n\ncount = 0\n\nfor x in range(1, n+1):\n    if k == 0:\n        break\n    if k == 2**m - 1:\n        count += n-x+1\n        break\n    k = (k % 2**m) * 33 + math.floor(k / 2**m)\n    count += n-x+1\n\nprint(count)\n\nassert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\nassert solution('1 0 10') == '0'\n"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n\"\"\""
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('............................................................\\n............................................................\\n..........................................XXXX..............\\n.........................................XXX......XXXX..........\\n....................................XXXX........X...........\\n........XXX....XXX....................X.....................\\n.........XXX...XX...........................................\\n............................................................\\n............................................XX..............\\n...........................................XXXX.............\\n.............................................XX.............\\n............................................................\\n') == '3 zoom out\\n'\nassert solution('............................................................\\n............................................................\\n...............................................XX...........\\n.........................................XXX......XXXX..........\\n....................................XXXX........X...........\\n........XXX....XXX....................X.....................\\n.........XXX...XX...........................................\\n............................................................\\n............................................XX..............\\n...........................................XXXX.............\\n.............................................XX.............\\n............................................................\\n') == '1 pan\\n'\nassert solution('............................................................\\n............................................................\\n...............................................XX...........\\n.........................................XXX......XXXX..........\\n....................................XXXX........X...........\\n...................................XXX....XXX....................X.....................\\n....................................XXXX........X...........\\n.............................................XX..............\\n............................................................\\n.................................................XX..............\\n...............................................XXXX.............\\n.............................................XX.............\\n............................................................\\n') == '1 pan\\n'\nassert solution('............................................................\\n............................................................\\n...............................................XX...........\\n.........................................XXX......XXXX..........\\n....................................XXXX........X...........\\n...................................XXX....XXX....................X.....................\\n....................................XXXX........X...........\\n.............................................XX..............\\n............................................................\\n.................................................XX..............\\n...............................................XXXX.............\\n.............................................XX.............\\n............................................................\\n') == '1 pan\\n'\nassert solution('............................................................\\n............................................................\\n...............................................XX...........\\n.........................................XXX......XXXX..........\\n....................................XXXX........X...........\\n...................................XXX....XXX....................X.....................\\n....................................XXXX........X...........\\n.............................................XX..............\\n............................................................\\n.................................................XX..............\\n...............................................XXXX.............\\n.............................................XX.............\\n............................................................\\n') == '1 pan\\n'\n\n-----Problem-----\nIf we have a set of points on a plane, we can draw them with a line of code like this:\n\npoints = [(1, 1), (2, 2), (3, 3), (4, 4)]\nfor p in points:\n    point(p[0], p[1])\nWe can then draw a circle with a line of code like this:\n\ncircle(2, 2, 1)\n\nwhere (2, 2) is the center of the circle, and 1 is the radius. Note that the first point (1, 1) is included in the circle.\n\nIt is sometimes convenient to write the points in a function:"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n\"\"\"\n) == \"\"\"1 pan\n3 zoom out\n\"\"\""
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n''') == '3 zoom out'\nassert solution('''\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............................................XX..............\n...........................................XXXX.............\n.............................................XX.............\n............................................................\n''') == '3 zoom out'\nassert solution('''\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n.......................................................X.....\n...................................................XXXX......\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n''') == '2 rotate clockwise'\nassert solution('''\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n.......................................................X.....\n...................................................XXXX......\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n''') == '2 rotate clockwise'\nassert solution('''\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n.......................................................X.....\n...................................................XXXX......\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n''') == '1 pan'\n"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"............................................................\\n............................................................\\n..........................................XXXX...........\\n...........................................XXX..............\\n....................................XXXX........X...........\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\") == \"3 zoom out\"\n\nassert solution(\"............................................................\\n............................................................\\n...............................................XX...........\\n.....................................XXX......XXXX..........\\n....................................XXXX........X...........\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\") == \"3 zoom out\"\n\nassert solution(\"............................................................\\n............................................................\\n..........................................XXXX...........\\n...........................................XXX..............\\n....................................XXXX........X...........\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\") == \"3 zoom out\"\n\nassert solution(\"............................................................\\n............................................................\\n.......................................................X...........\\n..........................................XXX......XXXX..........\\n....................................XXXX........X...........\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\") == \"3 zoom out\"\n\nassert solution(\"............................................................\\n............................................................\\n..........................................XXXX...........\\n...........................................XXX..............\\n....................................XXXX........X...........\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\") == \"3 zoom out\"\n\"\"\""
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('............................................................\\n............................................................\\n..........................................XXXX..............\\n.....................................XXX......XXXX..........\\n....................................XXXX........X...........\\n........XXX....XXX....................X.....................\\n.........XXX...XX...........................................\\n............................................................\\n............................................XX..............\\n...........................................XXXX.............\\n.............................................XX.............\\n............................................................') == '3 zoom out'\nassert solution('............................................................\\n............................................................\\n..........................................XXXX..............\\n.....................................XXX......XXXX..........\\n....................................XXXX........X...........\\n......................................X.....................\\n............................................................\\n............................................XX..............\\n...........................................XXXX.............\\n.............................................XX.............\\n............................................................') == '1 pan'\nassert solution('............................................................\\n............................................................\\n..........................................XXXX..............\\n.....................................XXX......XXXX..........\\n....................................XXXX........X...........\\n......................................X.....................\\n............................................................\\n............................................XX..............\\n...........................................XXXX.............\\n.............................................XX.............\\n............................................................') == '1 pan'\nassert solution('............................................................\\n............................................................\\n..........................................XXXX..............\\n.....................................XXX......XXXX..........\\n....................................XXXX........X...........\\n......................................X.....................\\n............................................................\\n............................................XX..............\\n...........................................XXXX.............\\n.............................................XX.............\\n............................................................') == '1 pan'\n\n\"\"\"\n\n\"\"\"\nNOTE:\nThe doctest for this problem will not be evaluated automatically. \nTo run the doctest, run the following command:\n    python3 -m doctest -v./2_solution.py\nYou can also call it on the Terminal\n\"\"\""
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport os\nfrom utils import regex_matcher, get_data\nfrom typing import Dict"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"............................................................\"\n    \"............................................................\"\n    \"...............................................XX...........\"\n    \".....................................XXX......XXXX..........\"\n    \"....................................XXXX........X...........\"\n    \"........XXX....XXX....................X.....................\"\n    \".........XXX...XX...........................................\"\n    \"............................................................\"\n    \"............................................XX..............\"\n    \"...........................................XXXX.............\"\n    \".............................................XX.............\"\n    \"............................................................\") == \"3 zoom out\"\n\nassert solution(\n    \"............................................................\"\n    \"............................................................\"\n    \"...............................................XX...........\"\n    \".....................................XXX......XXXX..........\"\n    \"....................................XXXX........X...........\"\n    \"......................................X.....................\"\n    \"............................................................\"\n    \"............................................................\"\n    \"............................................XX..............\"\n    \"...........................................XXXX.............\"\n    \".............................................XX.............\"\n    \"............................................................\") == \"1 pan\"\n\nassert solution(\n    \"............................................................\"\n    \"............................................................\"\n    \"...............................................XX...........\"\n    \".....................................XXX......XXXX..........\"\n    \"....................................XXXX........X...........\"\n    \"......................................X.....................\"\n    \"............................................................\"\n    \"............................................................\"\n    \"............................................XX..............\"\n    \"...........................................XXXX.............\"\n    \".............................................XX.............\"\n    \"............................................................\") == \"1 pan\"\n\nassert solution(\n    \"............................................................\"\n    \"............................................................\"\n    \"...............................................XX...........\"\n    \".....................................XXX......XXXX..........\"\n    \"....................................XXXX........X...........\"\n    \"......................................X.....................\"\n    \"............................................................\"\n    \"............................................................\"\n    \"............................................XX..............\"\n    \"...........................................XXXX.............\"\n    \".............................................XX.............\"\n    \"............................................................\") == \"1 pan\"\n\n\"\"\""
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('.') == 'pan'\nassert solution('..') == 'pan'\nassert solution('...') == 'pan'\nassert solution('...') == 'zoom out'\n"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"............................................................\\n............................................................\\n..................................................XXXX..............\\n...................................................XXX..............\\n.......................................................XX...........\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\") == \"3 zoom out out\"\nassert solution(\"............................................................\\n............................................................\\n..................................................XXXX..............\\n...................................................XXX..............\\n.......................................................XX...........\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\") == \"1 pan\"\nassert solution(\"............................................................\\n............................................................\\n..................................................XXXX..............\\n...................................................XXX..............\\n.......................................................XX...........\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................\") == \"5 rotate\"\n\n'''\n"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('............................................................\\n............................................................\\n..........................................XXXX..............\\n.....................................XXX......XXXX..........\\n....................................XXXX........X...........\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................') == '3 zoom out\\n'\nassert solution('............................................................\\n............................................................\\n...............................................XX...........\\n.....................................XXX......XXXX..........\\n....................................XXXX........X...........\\n............................................................\\n............................................................\\n............................................................\\n............................................................\\n............................................................') == '1 pan\\n'\n\"\"\"\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 20\\n apples are great!\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\n check out our\\n fresh apples!') =='apples are great!\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\n check out our\\n fresh apples!', 'Incorrect solution'\n"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 20\\n apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      ') =='apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      '\n\nassert solution('7 7\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++') == '       '\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 20\\n apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \") == \"\"\" apples are great!  \n                    \n                    \n                    \n                    \n                    \n check out our      \n fresh apples!      \n\"\"\"\nprint(solution(\"8 20\\n apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \"))"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 20\\napples are great!\\n\\n+++++++\\n+  =  +\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n\\n check out our\\n fresh apples!\") == \"apples are great!\\n\\n check out our\\n fresh apples!\"\nassert solution(\"7 7\\n\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\") == \"\"\nassert solution(\"3 3\\n\\nx\\nx\\nx\\n\") == \"x\\nx\\nx\"\n\n\"\"\"\nimport sys\n\nassert len(sys.argv) >= 2\nH, W = map(int, sys.argv[1].split())"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 20\\n apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \") == \"apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \"\n\nassert solution(\"7 7\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\") == \"       \\n       \\n       \\n       \\n       \\n       \"\n\n\"\"\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 20\", \"apples are great!\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\ncheck out our\\nfresh apples!\\n\") == \"apples are great!\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\ncheck out our\\nfresh apples!\\n\"\nassert solution(\"7 7\", \"+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\") == \"       \\n+       \\n+       \\n+       \\n+       \\n\"\nassert solution(\"8 20\", \"apple apples are great!\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\ncheck out our\\nfresh apples!\\n\") == \"apple apples are great!\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\ncheck out our\\nfresh apples!\\n\"\nassert solution(\"8 20\", \"apple apples are great!\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\ncheck out our\\nfresh apples!\\n\") == \"apple apples are great!\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\ncheck out our\\nfresh apples!\\n\"\nassert solution(\"8 20\", \"apple apples are great!\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\ncheck out our\\nfresh apples!\\n\") == \"apple apples are great!\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\ncheck out our\\nfresh apples!\\n\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 20\", \"apples are great!  ++++++++++++++++++++\"\n+ \"oranges are      + way better!      + #oranges>apples  +\"\n+ \" check out our      fresh apples!      \") == \"apples are great!  ++++++++++++++++++++\"\n\nassert solution(\"7 7\", \"+++++++\"\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++\") == \"       \"\n\nassert solution(\"7 7\", \"+++++++\"\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++\") == \"       \"\n\nassert solution(\"7 7\", \"+++++++\"\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++\") == \"       \"\n\nassert solution(\"7 7\", \"+++++++\"\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++\") == \"       \""
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 20\\n apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      fresh apples!      \") == \"apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      fresh apples!      \"\n\n\"\"\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\napples are great!\\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our\\n fresh apples!\\n\") == \"apples are great!\\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our\\n fresh apples!\\n\"\nprint(\"All cases passed\")"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 20\\n apples are great!\\n\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\ncheck out our\\n fresh apples!\\n\") == \"apples are great!\\n\\n++++++++++++++++++++\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\ncheck out our\\n fresh apples!\\n\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"HH\") == \"2.0\"\nassert solution(\"H?H\") == \"1.5\"\nassert solution(\"H?HTTTH\") == \"1.8\"\nassert solution
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\nassert solution('HH') == '2.0'\nassert solution('HTH') == '2.0'\nassert solution('THT') == '3.0'\n"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\nassert solution('HT?') == '1.5'\nassert solution('HTH?') == '2.0'\nassert solution('HHTTH?') == '2.0'\n"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('HH') == 2.0\nassert solution('H?') == 1.5\nassert solution('H??') == 1.0\nassert solution('??') == 0.0\nassert solution('HH?HH?') == 0.75"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('HH') == 2.0\nassert solution('H?') == 1.5\n\"\"\""
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"HH\") == \"2.0\"\nassert solution(\"H?H\") == \"1.5\"\nassert solution(\"HHH\") == \"3.0\"\n\"\"\"\n\nimport sys\nimport math\n\n\"\"\"\nThe problem is: How many operation will it take, to stop the man.\n\nLet's assume that we have 2 coins with heads and tails, and we have a stick.\n\nWhen the stick is in the first position, there are only heads on the coins, and the answer is 1.\n\nWhen the stick is in the second position, there are either:\n- Heads on both coins: in this case, the answer is 3\n- One head on the first and one tail on the second: in this case, the answer is 2\n\nWhen the stick is in the third position, there are either:\n- Heads on the first and second coin: in this case, the answer is 3\n- Both coins have tails: in this case, the answer is 4\n\nThe rest of the example is exactly the same, but the answer is always the same, no matter the position of the stick.\n\"\"\""
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('HH') == 2\nassert solution('HT') == 2\nassert solution('HTT') == 3\nassert solution('HTH') == 3\nassert solution('H?T') == 2\n"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n\n-----Notes-----\n\nYou can write helper methods and use them in the solution.\n\n\"\"\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"HH\"\n) == \"2.0\"\nassert solution(\n\"H?\"\n) == \"1.5\"\nassert solution(\n\"THT\"\n) == \"3.0\"\n\"\"\"\n\nimport re\n\nn = list(map(int, re.findall(r'\\d+', stdin)))[0]"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('HH') == 2.0\nassert solution('H?') == 1.5"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1110\\n1111\\n1111\\n1111\") == \"6\\n0011\\n0011\\n0111\\n1101\"\nassert solution(\"4\\n1110\\n1111\\n1111\\n1110\") == \"1\\n1111\\n1111\\n1111\\n1110\"\nassert solution(\"4\\n1110\\n1111\\n1111\\n1110\\n1111\\n1110\\n1110\\n1111\\n1111\\n1111\") == \"0\\n1111\\n1111\\n1111\\n1111\"\nassert solution(\"4\\n1110\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\") == \"2\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\"\nassert solution(\"4\\n1110\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\") == \"6\\n1101\\n1101\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\\n1111\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0001\\n0001\\n0011\\n1110') == '1\\n0001\\n0001\\n0011\\n1111'\nassert solution('4\\n1111\\n1111\\n1111\\n1111') == '6\\n0011\\n0011\\n0111\\n1101'\n\nassert solution('4\\n1110\\n1110\\n1110\\n1110') == '0\\n1111\\n1111\\n1111\\n1111'\n\"\"\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0001\\n0001\\n0011\\n1110\") == \"1\\n0001\\n0001\\n0011\\n1111\"\nassert solution(\"1111\\n1111\\n1111\\n1111\\n1111\") == \"6\\n0011\\n0011\\n0111\\n1101\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0001\\n0001\\n0011\\n1110\") == \"1\\n0001\\n0001\\n0011\\n1111\"\n\nprint(solution(\"4\\n1111\\n1111\\n1111\\n1111\"))\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1111\\n1111\\n1111\\n1111') == '6\\n0011\\n0011\\n0111\\n1101'\nassert solution('4\\n1100\\n1100\\n1100\\n1100') == '4\\n1111\\n1111\\n1111\\n1111'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1111\\n1111\\n1111\\n1111') == '6\\n0011\\n0011\\n0111\\n1101\\n', 'Sample 1 Wrong Answer'\nassert solution('4\\n1111\\n1111\\n1111\\n1111') == '6\\n0011\\n0011\\n0111\\n1101\\n', 'Sample 2 Wrong Answer'\nassert solution('4\\n1111\\n1110\\n1100\\n1100') == '1\\n1111\\n1110\\n1100\\n1100\\n', 'Sample 3 Wrong Answer'\n\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1111\\n1111\\n1111\\n1111\") == '6\\n0011\\n0011\\n0111\\n1101'"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n0001\\n0001\\n0011\\n1110') == '1\\n0001\\n0001\\n0011\\n1111'\n\"\"\"\n\n\"\"\"\nSolution 1\n\nint N = read_int();\n\nstring[] A = new string[N * N];\n\nfor (int i = 0; i < N * N; i++) {\n    A[i] = read_string();\n}\n\nint min = Integer.MAX_VALUE;\nint minIndex;\nint dif = 0;\n\nfor (int i = 0; i < N; i++) {\n    for (int j = 0; j < N; j++) {\n        for (int k = 0; k < N; k++) {\n            for (int l = 0; l < N; l++) {\n                if (i!= j && j!= k && k!= l && i!= l && A[i][j]!= A[k][l]) {\n                    int dif = getDiff(i, j, k, l, A);\n                    if (dif < min) {\n                        min = dif;\n                        minIndex = new int[] { i, j, k, l };\n                    }\n                }\n            }\n        }\n    }\n}"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0001\\n0001\\n0011\\n1110\") == \"1\\n0001\\n0001\\n0011\\n1111\"\n\nassert solution(\"4\\n1111\\n1111\\n1111\\n1111\") == \"6\\n0011\\n0011\\n0111\\n1101\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0001\\n0001\\n0011\\n1110') == '1\\n0001\\n0001\\n0011\\n1111'\nassert solution('4\\n1110\\n1110\\n1110\\n1110') == '6\\n0011\\n0011\\n0111\\n1101'\n\nprint(solution('4\\n1110\\n1110\\n1110\\n1110'))\n\n\"\"\"\nimport time"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == \"2\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import zip_longest\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == \"2\"\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == \"4\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == \"2\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(solution.testcase) == solution(solution.testcase)\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\\n\") == \"2\"\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\\n\") == \"4\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3') == '2'\n\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == \"2\"\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == \"4\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '1'\nassert solution('1 2 3 4 5 6 7 8 9') == '9'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14') == '15'\nassert solution
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == \"2\"\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == \"4\"\n\n-----Notes-----\n\n\"\"\"\n\nfrom math import gcd\n\nclass Solution:\n    def solution(self, stdin):\n        # Get all data from stdin\n        n = int(stdin)\n        pulses = []\n        for _ in range(n):\n            pulses.append([stdin.split()[0], int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3])])\n        # Get max pulse length\n        max_len = 0\n        for pulse in pulses:\n            max_len = max(pulse[2], max_len)\n        # Create pixel grid\n        grid = [[\"\" for _ in range(n + 1)] for _ in range(max_len + 1)]\n        # Iterate over pulses\n        for pulse in pulses:\n            # Get relevant data\n            is_horizontal = pulse[0] == \"h\"\n            start_time = pulse[1]\n            pulse_len = pulse[2]\n            wire = pulse[3]\n            # Update grid\n            for i in range(start_time, start_time + pulse_len):\n                if is_horizontal:\n                    grid[i][wire] = \"X\"\n                else:\n                    grid[wire][i] = \"X\"\n        # Count number of active pixels\n        total = 0\n        for i in range(n + 1):\n            if grid[0][i] == \"X\":\n                total += 1\n            if grid[i][0] == \"X\":\n                total += 1\n        return total\n\nsolution = Solution().solution\n\nassert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == \"2\"\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == \"4\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == \"2\"\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == \"4\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n6 5 1\\n0 7 8\\n4 2 3\\n6 5 1\") == \"2\"\n\"\"\"\n\nnum_of_shelves, num_of_books = map(int, input().split())\nshelves = [[0] * num_of_books for _ in range(num_of_shelves)]\n\nfor i in range(num_of_shelves):\n    shelves[i] = list(map(int, input().split()))\n\nshelves_back = [[0] * num_of_books for _ in range(num_of_shelves)]\n\nfor i in range(num_of_shelves):\n    for j in range(num_of_books):\n        shelves_back[i][j] = shelves[i][j]\n\nanswer = 0\nfor i in range(num_of_shelves):\n    for j in range(num_of_books - 1):\n        if shelves[i][j] == 0 and shelves[i][j + 1]!= 0:\n            answer += 1\n        elif shelves[i][j]!= 0 and shelves[i][j + 1] == 0:\n            answer += 1\n        elif shelves[i][j]!= 0 and shelves[i][j + 1]!= 0:\n            answer += 1\n\nfor i in range(num_of_shelves - 1):\n    for j in range(num_of_books):\n        if shelves_back[i][j] == 0 and shelves_back[i + 1][j]!= 0:\n            answer += 1\n        elif shelves_back[i][j]!= 0 and shelves_back[i + 1][j] == 0:\n            answer += 1\n        elif shelves_back[i][j]!= 0 and shelves_back[i + 1][j]!= 0:\n            answer += 1"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\") == \"4\"\nassert solution(\"2 4\\n0 1 2\\n1 3 0\") == \"2\"\nassert solution(\"2 4\\n1 1 2\\n0 3 0\") == \"-1\"\nassert solution(\"2 4\\n1 1 2\\n0 0 3\") == \"-1\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(text) == answer\n\nprint(solution(sys.stdin.readlines()))\n\n\"\"\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n2 1 0 0\\n3 0 4 5') == '2'\n\"\"\"\n\nN, M = map(int, stdin.readline().strip().split(' '))\nshelves = []\nfor _ in range(N):\n    shelves.append(list(map(int, stdin.readline().strip().split(' '))))\nwanted = []\nfor _ in range(N):\n    wanted.append(list(map(int, stdin.readline().strip().split(' '))))"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('4 2') == '4'\nassert solution('3 3') == '2'\nassert solution('1 2 3') == '-1'\nassert solution('1 0 2 0') == '2'\n"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n2 1 0 0\\n3 0 4 5\\n4 2 3\\n6 5 1\\n0 7 8\\n4 2 3\\n6 5 1\") == \"4\"\n\"\"\"\n\n\n\n\"\"\"\nSolution 1\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\nshelves = []\nfor _ in range(n):\n    shelves.append(list(map(int, stdin.readline().split())))\nwant = []\nfor _ in range(n):\n    want.append(list(map(int, stdin.readline().split())))\nmin_lift = 99999999\nmax_lift = -99999\nfor shelf in range(n):\n    for i in range(m):\n        if want[shelf][i]!= 0 and shelves[shelf][i] == 0:\n            min_lift = min(min_lift, want[shelf][i])\n            max_lift = max(max_lift, want[shelf][i])\n"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n2 1 0 0\\n3 0 4 5\") == \"2\"\n\"\"\"\n\nN, M = map(int, stdin.readline().split())\n\nshelf = [list(map(int, stdin.readline().split())) for i in range(N)]\n\nwant = [list(map(int, stdin.readline().split())) for i in range(N)]"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n\") == \"2\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n\") == \"4\"\nassert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n\") == \"-1\"\n\"\"\"\n\nn, m = map(int, stdin.readline().strip().split())\nbooks = [[0] * m for i in range(n)]\n\nfor i in range(n):\n    books[i] = list(map(int, stdin.readline().strip().split()))\n\nc = 0\n\nfor i in range(n):\n    for j in range(m):\n        if books[i][j] == 0:\n            c += 1\n        if books[i][j]!= 0 and j!= m - 1 and books[i][j] == books[i][j + 1]:\n            c += 1\n        if books[i][j]!= 0 and j!= 0 and books[i][j] == books[i][j - 1]:\n            c += 1"
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n') == '2'\nassert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n') == '4'\n\"\"\"\n\n\"\"\"\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0438:\n\u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043d\u0443\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u0443\u0447\u0435\u043d\u0438\u043a\u0430. \u0423\u0447\u0438\u0442\u0435\u043b\u044c \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 \u0443\u0447\u0435\u043d\u0438\u043a\u0430 \u043e\u0442 \u043e\u0434\u043d\u043e\u0433\u043e \u0434\u043e \u0442\u0440\u0435\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043a\u0430\u0436\u0434\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0438\u043c\u0435\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043d\u0430\u0434\u043e \u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0442\u044c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u0430\u043b\u043b\u043e\u0432 \u0431\u044b\u043b\u043e \u043d\u0430\u0431\u0440\u0430\u043d\u043e \u0437\u0430 \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430. \u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430: \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c, \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u043c \u043e\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0441 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c, \u043d\u0435 \u0432\u0445\u043e\u0434\u044f\u0442 \u0432 \u0443\u0441\u043b\u043e\u0432\u0438\u0435.\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043d\u043e\u043c\u0435\u0440\u0430 \u0432\u0441\u0435\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435. \u0423\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043d\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f \u0438 \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043e\u0442\u0432\u0435\u0442\u044b \u0443\u0447\u0435\u043d\u0438\u043a\u0430 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0432 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u043a\u0430\u043a \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445. \u041e\u0442\u0432\u0435\u0442\u044b \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c, \u0441\u043a\u043e\u0431\u043a\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442.\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u0442\u043e\u043c, \u043d\u0430 \u043a\u0430\u043a\u043e\u043c \u0431\u0430\u043b\u043b\u0435 \u0443\u0447\u0435\u043d\u0438\u043a \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0432\u043e\u0438\u043c\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439.\n\"\"\""
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '2'\n\nassert solution('''3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '4'\n\nassert solution('''3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '-1'\n\nprint('Hooray!')\n\n----------------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n1 2 3 3 4 2') == 2\nassert solution('8\\n1 2 1 3 1 3 1 2') == 4"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 3 4 2') == 2\nassert solution('1 2 3 3 4') == 4\n\"\"\"\nimport sys\n\ninput = lambda: sys.stdin.readline().rstrip()"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n4 4 2 4 4 4') == 4\nprint(solution('5\\n2 4 2 5 2'))"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 2 3 3 4 2\") == \"2\"\nassert solution(\"8\\n1 2 1 3 1 3 1 2\") == \"4\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"4\\n1 2 3 2\") == \"3\""
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 3 1 3 1 2\") == 4\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nA = [int(c) for c in sys.stdin.readline().strip().split(' ')]\n\nA.sort()\n\nlo, hi = 0, 1\n\nans = 0\n\nwhile hi < N:\n    if A[lo]!= A[hi]:\n        ans = max(ans, hi - lo)\n        lo = hi\n        hi += 1\n    else:\n        while hi < N and A[lo] == A[hi]:\n            hi += 1\n        lo = hi\n        hi += 1\n\nprint(ans)\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1 2 3 3 4 2') == 2\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 2 3 3 4 2\") == 2\nassert solution(\"8\\n1 2 1 3 1 3 1 2\") == 4\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 1 2 2') == '2'\nassert solution('4\\n1 2 2 3') == '1'\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 1 3 1') == 2\n\"\"\"\n\nN = int(input())\narr = list(map(int, input().split()))\n\ncounter = {}\nans = 1\nfor i in arr:\n    counter[i] = 1 if i not in counter else counter[i] + 1\nfor key in counter.keys():\n    if counter[key] == 2:\n        ans += 1\nprint(ans)\n"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 2 2\n1 1 1\n2 2 2 1\n2 2 2 1''') == '4'\n\nassert solution('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2''') == '4'\n\nassert solution('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2''') == '2'\n\nassert solution('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2''') == '2'\n\nassert solution('''1 1 1\n2 2 2 1\n1 1 1 2''') == '1'"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 2 1\\n2 2 2 2 1\\n1 1 1 2\") == '4'\n\"\"\""
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\\n1 1 1 2\\n\") == '4'\n\nprint(solution(\"2 2 2\\n1 1 1\\n2 2 2 1\\n2 2 2 1\\n1 1 1 2\\n\"))"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\") == \"4\"\nassert solution(\"2 2 2\\n1 1 1\\n2 2 2 1\") == \"4\"\nassert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\") == \"4\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 2\\n1 1 1\\n2 2 2 1\\n2 2 2 2 1\\n1 1 1 2') == '4'\nassert solution('2 2 2\\n1 1 1\\n2 2 2 1\\n2 2 2 2 1\\n1 1 1 2') == '4'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\") == \"4\\n2\"\nassert solution(\"2 2 2\\n1 1 1\\n2 2 2\\n2 2 2 1\") == \"4\\n0\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\\n1 1 1 2\\n\") == \"4\"\n\n\"\"\"\n\nn, k, p = map(int, input().split())\nr, c, x = [0] * k, [0] * k, [0] * k\nfor i in range(k):\n    r[i], c[i], x[i] = map(int, input().split())\ndp = [[0] * (n + 1) for _ in range(k + 1)]\nfor i in range(1, k + 1):\n    dp[i][r[i - 1]] += 1\n    dp[i][c[i - 1]] += 1\nfor i in range(1, k + 1):\n    dp[i][r[i - 1] + 1:n + 1] = dp[i - 1][r[i - 1] + 1:n + 1]\n    dp[i][c[i - 1] + 1:n + 1] = dp[i - 1][c[i - 1] + 1:n + 1]\ndp[k] = dp[k - 1]\nfor i in range(p):\n    nxt = [[0] * (n + 1) for _ in range(k + 1)]\n    for j in range(1, k + 1):\n        for k in range(1, n + 1):\n            nxt[j][k] = dp[j][k]\n            for l in range(1, k + 1):\n                if k - l < 1:\n                    break\n                nxt[j][k] += dp[l - 1][k - l]\n    dp = nxt\nfor i in range(k):\n    print(dp[i].count(1))"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 2\\n1 1 1\\n2 2 2 1\\n2 2 2 2 1\\n1 1 1 2\\n') == '4'\n"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == expected_result"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\") == \"4\"\n\nassert solution(\"2 2 2\\n1 1 1\\n2 2 2\\n2 2 2 1\") == \"4\"\n\"\"\"\nfrom collections import Counter\nimport sys"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == '1'\n\nassert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n''') == 'impossible'\n\nassert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n''') == 'impossible'\n\nassert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 0 0 2\n''') == '2'\n\nassert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == 'impossible'"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2') == '1'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n') == '1'\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n') == 'impossible'\nprint('Success')\n\n-----Notes-----\n- It seems like it should be possible to solve this using a single line of code. That is, we can do it in a one-liner.\n\"\"\"\n\nn, k = map(int, input().split())\nM = [list(map(int, input().split())) for _ in range(n)]\nS = list(map(int, input().split()))\n\nS_new = [i for i in range(n) if i not in S]\n\nprint(k - sum(M[S_new[i]][i] for i in range(len(S_new))))\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n') == '1'\n\n\"\"\"\n\nimport sys\n\nn, k = [int(i) for i in sys.stdin.readline().strip().split()]\n\nlines = []\nfor i in range(n):\n    lines.append([int(i) for i in sys.stdin.readline().strip().split()])\n\nlines.append([0] * n)\nfor i in range(n):\n    lines[-1][i] = 0\n\nk_list = [int(i) for i in sys.stdin.readline().strip().split()]\n\ndisqualified = []\nfor i in k_list:\n    disqualified.append(i)\n\nfor line in lines:\n    for i in range(len(line)):\n        if i in disqualified:\n            continue\n        elif line[i] == 1 and line[i - 1] == 0:\n            disqualified.append(i)"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n') == '1'\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n') == 'impossible'\n\n'''\n\nn, k = map(int, stdin.readline().split())"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2') == 1\n\"\"\""
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\") == 1\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n\") == \"1\"\nassert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n2 2\\n\") == \"impossible\"\nassert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n\") == \"impossible\"\n\nSample Case #1\nGiven the above input, the possible fair rankings are:\n1 -> 2 -> 3 -> 4 -> 1\n1 -> 2 -> 3 -> 4 -> 4\n2 -> 1 -> 3 -> 4 -> 4\n2 -> 1 -> 3 -> 4 -> 4\n3 -> 1 -> 2 -> 4 -> 4\n3 -> 1 -> 2 -> 4 -> 4\n\nSince player 2 was eliminated, and the other three players have no more opponents to beat, player 2 is the only player in the set $S$. Thus, the smallest set $S\u2019$ of players needed to disqualify is {2}.\n\nSample Case #2\nGiven the above input, the possible fair rankings are:\n1 -> 2 -> 3 -> 4 -> 1\n1 -> 2 -> 3 -> 4 -> 4\n2 -> 1 -> 3 -> 4 -> 4\n2 -> 1 -> 3 -> 4 -> 4\n3 -> 1 -> 2 -> 4 -> 4\n3 -> 1 -> 2 -> 4 -> 4\n\nPlayer 2 is the only player in the set $S$, and so no other players can be in $S$. Thus, the smallest set $S\u2019$ of players needed to disqualify is {2}.\n\"\"\""
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n') == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 4\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\\n') == '35\\n18\\n3'\nassert solution('11 3\\n3 7 10\\n3\\n0 10\\n2 6\\n7 7\\n') == '8\\n2\\n1'\n\"\"\""
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n4\\n0 1 3\\n2 3\") == \"16\"\nassert solution(\"1\\n8\\n0 1 3 6 8 10 12 16 20\") == \"60\"\nassert solution(\"1\\n4\\n0 1 3\\n2 3\") == \"24\"\nassert solution(\"1\\n5\\n0 1 3 1 5\\n3\") == \"25\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\") == \"35\\n18\\n3\"\nassert solution(\"11 3\\n3 7 10\\n3\\n0 10\\n2 6\\n7 7\") == \"8\\n2\\n1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\") == \"35\\n18\\n3\"\n\n---"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution([\"10\", \"4\", \"1 1 2 1\", \"3\", \"0 9\", \"2 6\", \"7 7\", \"7 7\", \"7 7\"]) == ['35', '18', '3']\n\"\"\""
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n3\\n0 1\\n1 1\\n1 2\\n1 3\\n3\\n0 0\\n2 4\\n3 5\\n2 6\\n2 7\\n4\\n0 0\") == \"4\\n1\\n3\\n3\\n4\\n3\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\n\nprint('The code is correct!')"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4 3\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\") == '35\\n18\\n3'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7\") == \"35\\n18\\n3\"\n\"\"\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7''') == '35\\n18\\n3'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\") == \"0\\n1\\n3\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\") == \"0\\n1\\n2\\n4\\n6\"\n\"\"\"\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n        self.count = 0\n\nclass BST:\n    def __init__(self):\n        self.root = None\n\n    def insert_node(self, value):\n        if not self.root:\n            self.root = Node(value)\n            return\n\n        curr_node = self.root\n        while curr_node:\n            if curr_node.value <= value:\n                if not curr_node.right:\n                    curr_node.right = Node(value)\n                    break\n                curr_node = curr_node.right\n            else:\n                if not curr_node.left:\n                    curr_node.left = Node(value)\n                    break\n                curr_node = curr_node.left\n        \n        curr_node.count += 1\n        return\n\n\n    def print_counter(self):\n        if not self.root:\n            return\n\n        curr_node = self.root\n        self.count = 0\n        self.inorder(curr_node)\n        return self.count\n\n    def inorder(self, node):\n        if not node:\n            return\n\n        self.inorder(node.left)\n        print(node.count)\n        self.inorder(node.right)"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"0\\n1\\n3\\n6\\n\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '0\\n1\\n3\\n6'\nassert solution('5\\n3\\n2\\n4\\n1\\n5\\n') == '0\\n1\\n2\\n4\\n6'\n\nassert solution('4\\n1\\n2\\n3\\n4\\n') == '0\\n1\\n3\\n6'\nassert solution('5\\n3\\n2\\n4\\n1\\n5\\n') == '0\\n1\\n2\\n4\\n6'\n\nassert solution('4\\n1\\n2\\n3\\n4\\n') == '0\\n1\\n3\\n6'\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"0\\n1\\n3\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\\n\") == \"0\\n1\\n2\\n4\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\") == \"0\\n1\\n2\\n4\\n5\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '0\\n1\\n3\\n6\\n'\nassert solution('5\\n3\\n2\\n4\\n1\\n5\\n') == '0\\n1\\n2\\n4\\n6\\n'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"0\\n1\\n3\\n6\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '0\\n1\\n3\\n6'\nassert solution('5\\n3\\n2\\n4\\n1\\n5\\n') == '0\\n1\\n2\\n4\\n6'\nassert solution('5\\n3\\n2\\n4\\n1\\n5\\n') == '0\\n1\\n2\\n4\\n6'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\") == \"0\\n1\\n3\\n6\""
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"0\\n1\\n3\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\\n\") == \"0\\n1\\n2\\n4\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\\n\") == \"0\\n1\\n2\\n4\\n6\"\n\n\"\"\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\") == \"0\\n1\\n3\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\") == \"0\\n1\\n2\\n4\\n6\"\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nGiven a list of integers and an integer `k`, write a Python program to check whether the array contains any 3 numbers that add up to `k` in the array. If such numbers are found, print all those numbers in a list.\n\nExamples:\n\nInput : [1, 2, 4, -5, 7, 9, 8, 5, 7, -7, 5, -6, 8, 8, 7, -4, 6, -8, 1], 8\nOutput : [1, 3, -1, -6, -7]\n\nInput : [1, 2, 3, 4, 5, 6, 7], 16\nOutput : No 3-sum solution exists.\n\nInput : [1, 2, 3, 4, 5, 6, 7], 12\nOutput : [-1, 4, -3]\n\nInput : [1, 2, 3, 4, 5, 6, 7], 1\nOutput : 1\nInput:\n\nThe first line of input contains an integer T denoting the number of test cases.\nThe first line of each test case is N and K, N is the size of array and K is the sum to be checked.\nThe second line of each test case contains N input C[i].\nOutput:\n\nPrint the 3 numbers that add up to K, if any such numbers exist, for each test case.\nIf there is no 3 number that adds up to K, print \"-1\" (without quotes).\nNote:\n\nYou need not print the test case number.\n\nConstraints:\n\n1 \u2264 T \u2264 200\n1 \u2264 N \u2264 107\n1 \u2264 K \u2264 108\n-109 \u2264 C[i] \u2264 109\nSample Input:\n\n2\n5 12\n1 2 3 4 5\n6 13\n1 2 3 4 6 5\nSample Output:\n\n2 1 -1\n-1\nExplanation:\n\nTest Case 1:\n\nThe array elements are [1, 2, 3, 4, 5] and K is 12. The 2 numbers that add up to 12 are 1 and 5.\n\nTest Case 2:\n\nThe array elements are [1, 2, 3, 4, 6, 5] and K is 13. There is no number that adds up to 13.\n\"\"\""
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\n\n\"\"\"\n\nN = int(input())\n\nd = {}\n\nfor _ in range(N):\n    x1, y1, x2, y2 = map(int, input().split())\n    c = (x1, y1)\n    d[c] = []\n    for i in range(10000):\n        if x1 <= i <= x2 and y1 <= i <= y2:\n            d[c].append(i)\n\nx = 0\n\nfor i in sorted(d.keys()):\n    for j in d[i]:\n        x = j\n        break\n    d[i] = x\n\nprint(' '.join([str(i) for i in d.values()]))\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\") == \"4 3 1 2\"\nassert solution(\"4\\n0 0 0 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 0\") == \"4 3 2 1\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\\n\") == \"2 4 1 3\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\\n\") == \"4 3 1 2\"\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nGiven an integer n (1 \u2264 n \u2264 10**5), the program must print the sum of all prime numbers below n.\n\n-----Input-----\nThe only line of input contains a single integer n.\n\n-----Output-----\nThe only line of output must print a single integer \u2014 the sum of all prime numbers below n.\n\n-----Examples-----\nSample Input 1:\n7\nSample Output 1:\n13\n\nSample Input 2:\n10\nSample Output 2:\n17\n\nSample Input 3:\n5\nSample Output 3:\n7\n\nSample Input 4:\n1\nSample Output 4:\n2\n\nSample Input 5:\n5\nSample Output 5:\n7\n\nSample Input 6:\n2\nSample Output 6:\n2\n\nSample Input 7:\n3\nSample Output 7:\n2\n\nSample Input 8:\n4\nSample Output 8:\n2\n\nSample Input 9:\n7\nSample Output 9:\n13\n\nSample Input 10:\n10\nSample Output 10:\n17\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nGiven two integers a and b (1 \u2264 a \u2264 b \u2264 109), the program must print a list containing all integers between a and b (inclusive) that can be divided by both a and b, in ascending order.\n\n-----Input-----\nThe first and only line of input contains two integers a and b (1 \u2264 a \u2264 b \u2264 109).\n\n-----Output-----\nThe only line of output must print a list of integers in ascending order.\n\n-----Examples-----\nSample Input 1:\n5 10\nSample Output 1:\n[6, 10]\n\nSample Input 2:\n1 2\nSample Output 2:\n[2]\n\nSample Input 3:\n15 20\nSample Output 3:\n[4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nSample Input 4:\n6 10\nSample Output 4:\n[]\n\nSample Input 5:\n1 8\nSample Output 5:\n[2, 4, 6, 8]\n\nSample Input 6:\n9 10\nSample Output 6:\n[3, 6, 9]\n\nSample Input 7:\n20 30\nSample Output 7:\n[4, 8, 16, 20, 24, 30]\n\nSample Input 8:\n1 1\nSample Output 8:\n[]\n\nSample Input 9:\n8 15\nSample Output 9:\n[6, 12, 18, 24, 30]\n\nSample Input 10:\n20 30\nSample Output 10:\n[6, 12, 18, 24, 30]\n\nSample Input 11:\n9 90\nSample Output 11:\n[3, 6, 9, 12, 18, 36, 36, 42, 54, 60, 72, 90]\n\nSample Input 12:\n10 90\nSample Output 12:\n[3, 6, 9, 12, 18, 36, 36, 42, 54, 60, 72, 90]\n\nSample Input 13:\n10 100\nSample Output 13:\n[3, 6, 9, 12, 18, 36, 36, 42, 54, 60, 72, 90, 100]\n\nSample Input 14:\n100 500\nSample Output 14:\n[3, 6, 9, 12, 18, 36, 36, 42, 54, 60, 72, 90, 100, 120, 144, 180, 240, 300, 360, 420, 480, 540, 600, 720, 840, 960, 1080, 1260, 1440, 1800, 2160, 2400, 3000, 3600, 4320, 5040, 5760, 6240, 6960, 7200, 8400, 9600, 10860, 12900, 15360, 18000, 21600, 25200, 32400, 36000, 40320, 48600, 57600, 64800, 75600, 86400, 100800, 129600, 151200, 180240, 2160000, 2520000, 32400000]\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nGiven a positive integer n, the program must print all pairs of integers (a, b) (1 \u2264 a \u2264 b \u2264 n) such that gcd(a, b) = 1.\n\n-----Input-----\nThe only line of input contains a single integer n (1 \u2264 n \u2264 10**6).\n\n-----Output-----\nThe only line of output must print all pairs of integers (a, b) (1 \u2264 a \u2264 b \u2264 n) such that gcd(a, b) = 1, in ascending order of a.\n\n-----Examples-----\nSample Input 1:\n8\nSample Output 1:\n1 2\n1 4\n2 4\n3 4\n1 5\n2 5\n3 5\n1 6\n2 6\n3 6\n4 6\n5 6\n6 6\nSample Input 2:\n3\nSample Output 2:\n1 2\n1 3\n2 3\nSample Input 3:\n7\nSample Output 3:\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 4\n2 6\n3 5\nSample Input 4:\n2\nSample Output 4:\n1 2\n1 3\n2 3\nSample Input 5:\n4\nSample Output 5:\n1 2\n1 3\n1 4\n2 3\nSample Input 6:\n1\nSample Output 6:\n1 2\nSample Input 7:\n10\nSample Output 7:\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n2 4\n2 6\n2 8\n2 10\n3 5\n3 7\n3 9\n3 10\n4 6\n4 8\n4 10\n5 7\n5 9\n5 10\n6 8\n6 10\n7 9\n7 10\n8 10\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nGiven two integers n and k (1 \u2264 n \u2264 10**6, 2 \u2264 k \u2264 10**6), the program must print all possible ways to insert k zeros between the first n ones in such a way that the resulting numbers are in non-decreasing order.\n\n-----Input-----\nThe first and only line of input contains two integers n and k (1"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\") == \"4 3 1 2\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\") == \"2 4 1 3\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\") == \"2 4 1 3\"\n\"\"\"\nimport sys\nimport heapq\nfrom math import sqrt"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\nassert solution(\"4\\n1 0 0 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\") == \"4 3 1 2\"\n\nprint(solution(stdin))\n\nSolution:\nimport sys\nN = int(sys.stdin.readline())\n\npoints = [list(map(int, sys.stdin.readline().split())) for _ in range(N)]\n\nprint(' '.join(sorted(sys.stdin.readline().split())))\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1 3 2') == '1 2 4 1 3'\nassert solution('1 3 2 2') == '1 4 1 3'\nassert solution('1 1 3 2') == '1 2 4 1 3'\nassert solution('2 4 7 3') == '2 4 1 3'\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3') == '2 4 1 3'\n\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1') == '4 3 1 2'\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3'\n) == '2 4 1 3'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n\"\"\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\n\"\"\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\n'''\n\nfrom collections import defaultdict"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n\"\"\"\n\nfrom collections import Counter, defaultdict\nimport heapq\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n\"\"\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n\"\"\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"1 2\n1 truther 1\n1 not charlatan 1\n1 and fabulist 1 fabulist 2\n\"\"\") == \"fabulist\"\nassert solution(\"\"\"1 2\n1 truther 1\n1 not charlatan 1\n1 and fabulist 1 fabulist 2\n\"\"\") == \"truther\"\n\"\"\")\n\nprint(solution(\"\"\"1 2\n1 charlatan 1\n1 not charlatan 1\n1 and fabulist 1 fabulist 2\n\"\"\"))"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2 1\\n') == 'fabulist'\n\"\"\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n1 truther 1\\n1 not charlatan 1\\n1 and fabulist 1 fabulist 2\\n') == 'fabulist\\n'\nassert solution('1 2\\n1 truther 1\\n1 not charlatan 1\\n1 and fabulist 1 fabulist 2\\n') == 'charlatan\\n'\n\n-----Explanation-----\nWe know the set of characters that each candidate can be. We know that the character types of candidates are entirely determined by the utterances of the debate. So, we consider each candidate as \"a truther\", \"a fabulist\", or \"a charlatan\". The initial ideas about who is who are already established, so we try to come up with a character type for each candidate.\n\nFor every possible character type of a candidate, we consider all possible combinations of the character types of the candidates, and see if these combinations lead to the correct character type.\n\nFor example, if we're looking at the character type of candidate 1, then we consider truther candidate 1 and fabulist candidate 1, and we see that if truther candidate 1 and fabulist candidate 1 are both true, the correct character type is fabulist.\n\nTruther candidate 1 is a truther, which means that any character type of candidate 1 is also true. So, there is only one possible character type of candidate 1: truther.\n\nNow, if we consider truther candidate 1 and charlatan candidate 1, then we have both truther and charlatan, which means that the correct character type for candidate 1 is charlatan.\n\nNow, if we consider truther candidate 1 and charlatan candidate 1 and fabulist candidate 2, then we have one of truther and one of charlatan, which means that the correct character type for candidate 1 is charlatan.\n\nSo, in this example, the character type of candidate 1 is charlatan.\n\nFinally, if we consider truther candidate 1 and charlatan candidate 1 and fabulist candidate 2, then we have both truther and fabulist, which means that the correct character type for candidate 1 is truther.\n\nSo, in this example, the character type of candidate 1 is truther.\n\nWe conclude that the character type of candidate 1 is truther.\n\nInput:\n1 2\n1 truther 1\n1 not charlatan 1\n1 and fabulist 1 fabulist 2\nOutput:\ncharlatan\n\nSample Input 2:\n2 1\n1 and fabulist 1 fabulist 2\nSample Output 2:\nfabulist\ntruther\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 'truther'\nassert solution('1 2\\n1 truther 1\\n') == 'fabulist'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\nassert solution('2 2\\n1 and fabulist 1 fabulist 2') == 'truther'\n'''\n"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n1 truther 1\\n1 not charlatan 1\\n1 not truther 1\\n1 and fabulist 1 fabulist 2\\n1 truther 1\\n1 and charlatan 1\\n1 xor truther 1\") == \"fabulist\\ntruther\"\nassert solution(\"1 2\\n1 fabulist 1 fabulist 2\\n1 truther 1\\n1 and charlatan 1\\n1 xor truther 1\") == \"truther\"\n\"\"\"\n\nfrom typing import List, Tuple\nimport sys\n"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\"\"\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n1 truther 1\\n1 not charlatan 1\\n1 and fabulist 1 fabulist 2\") == \"fabulist\\ntruther\"\n\n\"\"\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 2\n1 truther 1\n1 not truther 1\n\"\"\") == \"truther\"\nassert solution(\"\"\"\n1 2\n1 charlatan 1\n1 not charlatan 1\n\"\"\") == \"charlatan\"\nassert solution(\"\"\"\n2 1\n1 and fabulist 1 fabulist 2\n\"\"\") == \"fabulist\"\n\"\"\"\n    )\n"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2') == 'truther'\nassert solution('1 1') == 'charlatan'\nassert solution('1 3') == 'charlatan'\nassert solution('1 4') == 'truther'\n"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\n\"\"\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"4\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\\n\") == \"4\"\nassert solution(\"3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00\\n\") == \"3\"\n\"\"\"\n\nn = int(input())\nx_y = []\nfor i in range(n):\n    x_y.append([float(i) for i in input().split()])"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"4\"\n\nSample Output 2:\n3\n\nSample Input 3:\n4\n3.00 3.00\n4.00 2.00\n3.00 3.00\n4.00 2.00\nSample Output 3:\n3\n\nSample Input 4:\n4\n1.00 1.00\n1.00 1.00\n1.00 1.00\n1.00 1.00\nSample Output 4:\n4\n\nSample Input 5:\n5\n-1.50 -1.00\n1.50 -1.00\n0.00 1.00\n3.00 3.00\n4.00 2.00\nSample Output 5:\n5\n\nSample Input 6:\n5\n1.00 1.00\n3.00 3.00\n5.00 4.00\n2.00 3.00\n6.00 4.00\nSample Output 6:\n4\n\nSample Input 7:\n5\n1.00 1.00\n-1.50 -1.00\n-2.50 -1.00\n2.50 -1.00\n3.00 3.00\n4.00 2.00\nSample Output 7:\n5\n\nSample Input 8:\n2\n1.00 1.00\n0.00 1.00\nSample Output 8:\n1\n\nSample Input 9:\n1\n-1.00 -1.00\nSample Output 9:\n0\n\nSample Input 10:\n2\n0.00 1.00\n0.00 1.00\nSample Output 10:\n0\n\n-----Notes-----\nThe area of the fruits will be given.\n\"\"\""
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\nassert solution('3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00') == '3'\n"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"4\"\n\nassert solution(\"-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00\") == \"3\"\nprint(\"Success\")\n\n\"\"\"\nimport math"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\n"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"4\"\nassert solution(\"3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00\") == \"3\"\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"4\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\npoints = []\nfor i in range(n):\n    point = sys.stdin.readline().strip().split()\n    points.append([float(point[0]), float(point[1])])\n\nx_min, x_max = points[0][0], points[0][0]\ny_min, y_max = points[0][1], points[0][1]\n\nfor point in points[1:]:\n    x_min = min(x_min, point[0])\n    x_max = max(x_max, point[0])\n    y_min = min(y_min, point[1])\n    y_max = max(y_max, point[1])\n\nslices = 0\nfor point in points:\n    x_min_, x_max_ = x_min, x_max\n    y_min_, y_max_ = y_min, y_max\n\n    x_min_ = min(x_min_, point[0])\n    x_max_ = max(x_max_, point[0])\n    y_min_ = min(y_min_, point[1])\n    y_max_ = max(y_max_, point[1])\n\n    if (x_max_ - x_min_) < (y_max_ - y_min_):\n        slices += 1\n\nprint(slices)\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1\\nX..\\n.?\\n10 1000 1\") == \"10\"\nassert solution(\"2 5 2\\nR..\\n.X.\\n100 100 7 100 8\\n\") == \"16\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8\") == 16\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8') == '16'\nassert solution('2 3 1\\nX..\\n.?.\\n10 1000 1') == '10'\nprint('The local tests are done. Click on \"Check\" for more details.')"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1\\nX..\\n.?\\n10 1000 1\") == \"10\"\nassert solution(\"2 5 2\\nR..\\n.X.\\n100 100 7 100 8\") == \"16\"\nassert solution(\"1 1 1\\n?.\\n1 1\") == \"1\"\nassert solution(\"1 1 1\\n?\\n1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8\\n') == '16'\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8\\n') == '16'\nprint(solution('2 3 1\\nX..\\n.?.\\n10 1000 1\\n'))"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8') == '16'\nassert solution('2 3 1\\nX..\\n.?.\\n10 1000 1') == '10'\nassert solution('2 3 1\\nX..\\n.?.\\n10 1000 1\\n100 100 7 100 8') == '10'\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8\") == \"16\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".X...R.\") == \"X..\"\n\"\"\"\n\nfrom typing import List, Tuple, Optional\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".X.?\") == 10\nassert solution(\"R.R?R.R\") == 13\n\"\"\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n0 4 4\\n1 5 1\\n2 6 1') == '1.414'\n\"\"\""
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n0 4 4\\n1 5 1\\n2 6 1') == '1.414'\nassert solution('6 11\\n0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10') == '5.657'\n\"\"\"\n\nn, k = map(int, input().split())\ncoordinates = [[int(i) for i in input().split()] for _ in range(n)]\ncoordinates.sort()\nres = 0\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        if (coordinates[i][1] - coordinates[j][1]) ** 2 + (coordinates[i][0] - coordinates[j][0]) ** 2 <= k ** 2:\n            res = 1"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 11\\n0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10\") == \"5.657\"\nprint(solution(\"6 11\\n0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10\"))\n"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '3 3\\n0 4 4\\n1 5 1\\n2 6 1'\n) == '1.414'\n\nassert solution(\n    '6 11\\n0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10'\n) == '5.657'\n\n\"\"\"\n\nfrom math import sqrt\n\nimport sys\nsys.stdin = open('test.txt', 'r')  # \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 2\\n0 1 3\\n0 1 4') == '0.500'\n"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n0 4 4\\n1 5 1\\n2 6 1\\n\") == \"1.414\"\n\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4\\n') == '1.414'\n\n'''\n"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n0 4 4\\n1 5 1\\n2 6 1\") == '1.414'\n\nprint(solution(\"6 11\\n0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10\"))\n"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\") == \"1.414\"\nassert solution(\"0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10\") == \"5.657\"\n\"\"\""
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n0 4 4\\n1 5 1\\n2 6 1') == '1.414'\n\"\"\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 1 1 1\\n3 1 1 1\") == '1.0'\n\"\"\""
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 1 1 1\\n') == '1.0'\nassert solution('3 1 1 1\\n') == '0.433'\n\n\"\"\""
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'\nassert solution('9 1 1 1 1 1 1 1 1 1') == '1.0'\nassert solution('10 1 1 1 1 1 1 1 1 1') == '0.433'\nassert solution('20 1 1 1 1 1 1 1 1 1') == '0.433'\n"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 1 1 1\") == \"1.0\"\nassert solution(\"3 1 1 1\") == \"0.433\"\n\n\"\"\"\n\n\nimport numpy as np"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 1 1 1\\n\") == \"1.0\"\nassert solution(\"3 1 1 1\\n\") == \"0.433\"\n\"\"\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'\n\"\"\""
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 1 1 1\\n3 1 1 1') == '1.0'\nassert solution('4 1 1 1 1\\n3 2 1 1') == '0.433'\nassert solution('3 1 1 1\\n2 1 1') == '0.5'\nassert solution('7 1 1 1 1 1 1\\n4 1 1 1') == '0.75'\n\"\"\""
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 1 1 1\") == \"1.0\"\nassert solution(\"3 1 1 1\") == \"0.433\"\n\"\"\"\n\nn = input().split()\na = list(map(int, input().split()))"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 1 1 1\\n') == '1.0'\nassert solution('3 1 1 1\\n') == '0.433'\n\"\"\""
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 1 1 1\") == \"1.0\"\nassert solution(\"3 1 1 1\") == \"0.433\"\nassert solution(\"4 5 7 8 9 10 11 13 14 15 16 17 18 19 20 21 22 23 24\") == \"36.0\"\n\"\"\"\n\nimport math\nimport sys\n\nn = int(sys.stdin.readline().strip())\nL = list(map(int, sys.stdin.readline().strip().split(' ')))\nL.sort()\nn = len(L)\nm = max(L)\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\\n4\\n1 1\\n2 1\\n2 3\\n3 3\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\") == \"36\"\n\"\"\"\nimport sys\nfrom typing import List, Tuple\nfrom collections import deque\nfrom collections import defaultdict\nfrom math import inf\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\") == \"36\"\n\n\"\"\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\\n') == '5'\nassert solution('8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\\n') == '36'\n\"\"\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == expected\n\n\"\"\"\n\nfrom typing import List, Union, Tuple, Optional"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5') == '5\\n4\\n1 1\\n2 1\\n2 3\\n3 3'\n\nassert solution('8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15') == '36\\n5\\n1 1\\n1 2\\n2 2\\n3 2\\n3 3'"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\") == \"36\""
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\\n') == '5\\n4\\n1 1\\n2 1\\n2 3\\n3 3'\nassert solution('8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\\n') == '36\\n5\\n1 1\\n1 2\\n2 2\\n3 2\\n3 3'\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5''') == '5\\n4\\n1 1\\n2 1\\n2 3\\n3 3'\n"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n1 2\\n2 1\") == \"1\"\nassert solution(\"3 2\\n2 1 3\\n1 3\\n2 3\") == \"3\"\n\nprint('The code ran Correctly')"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n2 1\\n1 2\\n') == '1'\nassert solution('3 2\\n2 1 3\\n1 3\\n2 3\\n') == '3'\n\n-----Explanation-----\nSample Case 1:\n\nThe initial permutation is $2$ followed by $1$.\n\nThe initial list of allowed swaps is $1$ followed by $2$.\n\nFor the first allowed swap, we swap the number $2$ with the number $1$ so the permutation becomes $1$ followed by $2$.\n\nThe initial list of allowed swaps is now $2$ followed by $1$.\n\nFor the second allowed swap, we swap the number $1$ with the number $2$ so the permutation becomes $1$ followed by $2$, $3$, so the minimum number of swaps is $1$.\n\nThe initial list of allowed swaps is now $2$ followed by $1$ and $3$.\n\nSample Case 2:\n\nThe initial permutation is $3$ followed by $2$ followed by $1$.\n\nThe initial list of allowed swaps is $2$ followed by $1$ followed by $3$.\n\nFor the first allowed swap, we swap the number $2$ with the number $1$ so the permutation becomes $1$ followed by $2$, $3$.\n\nThe initial list of allowed swaps is now $2$ followed by $1$ and $3$.\n\nFor the second allowed swap, we swap the number $1$ with the number $3$ so the permutation becomes $1$ followed by $2$, $3$ and $4$, so the minimum number of swaps is $3$.\n\nThe initial list of allowed swaps is now $2$ followed by $1$ and $3$ and $4$.\n\nThe list of allowed swaps is the same for the following allowed swaps.\n\nFinal Output:\n3"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n2 1\\n1 2\\n\") == \"1\"\n\nassert solution(\"3 2\\n2 1 3\\n1 3\\n2 3\\n\") == \"3\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n2 1\\n1 2\\n') == '1'\nassert solution('3 2\\n2 1 3\\n1 3\\n2 3\\n') == '3'\nassert solution('4 5\\n2 3 4 5\\n2 4 1 5\\n3 1 4 5\\n3 4 2 5\\n') == '3'\nassert solution('5 6\\n1 3 5 6 2 4\\n4 1 5 6 3 2\\n4 3 5 6 1 2\\n3 4 5 6 1 2\\n3 5 6 4 1 2\\n5 4 3 6 1 2\\n5 6 4 3 2 1\\n') == '4'\n\nimport re"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 1\n1 2\n1 3\n1 3''') == '1'\nassert solution('''3 2\n2 1 3\n1 3\n2 3''') == '3'\nassert solution('''2 1\n1 2\n1 3\n1 3''') == '0'\nassert solution('''5 5\n2 4\n4 1\n4 2\n4 5\n3 5\n3 2\n3 4\n1 5\n5 1\n5 3\n5 2\n2 3\n2 4\n2 5\n1 4\n1 5\n5 4\n5 1\n2 3\n1 4\n3 4\n4 1\n2 3\n3 4\n5 4\n1 3\n3 2\n4 5\n5 2\n3 1\n4 3\n4 1\n5 3\n4 2\n5 1\n5 2\n3 5\n2 4\n3 1\n3 5\n2 5\n2 1\n2 4\n3 2\n4 1\n2 3\n3 4\n4 5\n5 2\n1 5\n2 4\n1 2\n5 1\n2 3\n5 3\n1 4\n5 4\n2 3\n1 4\n2 5\n3 4\n2 1\n1 3\n1 4\n2 3\n3 1\n1 4\n3 5\n2 1\n1 4\n3 2\n4 1\n3 2\n3 4\n4 5\n4 2\n2 4\n3 5\n2 3\n5 1\n1 3\n1 2\n2 4\n1 4\n4 2\n4 3\n2 3\n2 5\n2 4\n2 1\n4 3\n2 5\n3 1\n2 1\n3 1\n5 1\n3 2\n2 1\n2 5\n3 5\n5 4\n2 1\n2 3\n2 4\n2 3\n5 1\n2 1\n4 1\n3 5\n3 1\n3 2\n1 5\n4 5\n3 1\n4 1\n2 2\n3 3\n5 1\n2 4\n2 3\n3 1\n2 3\n1 2\n2 1\n3 3\n1 3\n5 3\n5 1\n3 4\n3 3\n1 1\n2 1\n2 4\n5 4\n2 1\n4 1\n3 4\n1 2\n2 3\n2 1\n3 5\n2 5\n1 4\n2 3\n1 3\n3 4\n5 1\n3 5\n4 2\n5 2\n3 5\n4 5\n4 3\n2 3\n1 3\n3 5\n2 5\n4 3\n1 3\n3 2\n2 3\n2 1\n2 2\n5 4\n3 1\n4 2\n5 1\n3 5\n5 2\n2 3\n5 4\n4 3\n1 4\n5 1\n3 1\n2 4\n3 4\n4 4\n3 2\n5 5\n2 4\n3 4\n3 3\n2 2\n1 1\n2 3\n3 4\n1 4\n4 2\n2 2\n4 3\n1 3\n3 2\n5 4\n3 2\n3 4\n2 3\n5 3\n4 5\n2 3\n5 4\n1 5\n2 3\n2 3\n1 5\n2 5\n4 1\n3 3\n5 1\n2 5\n3 2\n1 4\n3 4\n1 3\n2 2\n4 2\n5 1\n4 1\n4 4\n3 5\n5 1\n4 2\n5 1\n5 1\n4 3\n3 1\n3 4\n2 1\n2 1\n5 4\n2 3\n4 1\n2 4\n2 2\n5 2\n3 2\n1 5\n3 2\n1 3\n2 1\n5 2\n4 4\n4 1\n5 4\n3 5\n3 3\n3 1\n2 5\n2 1\n4 5\n2 5\n5 1\n2 4\n1 4\n2 5\n3 1\n4 4\n5 2\n2 1\n5 1\n3 3\n2 1\n5 1\n3 5\n2 4\n2 3\n2 3\n2 4\n5 5\n2 3\n4 3\n3 1\n3 4\n2 3\n5 1\n3 5\n4 2\n5 5\n5 1\n2 2\n3 5\n1 4\n5 5\n3 5\n5 1\n4 2\n5 5\n4 5\n4 1\n3 1\n1 1\n1 2\n3 1\n4 1\n3 2\n3 1\n2 1\n2 2\n4 4\n5 2\n2 2\n5 3\n3 5\n4 2\n1 2\n5 3\n4 4\n5 4\n3 1\n2 4\n2 5\n4 1\n2 3\n4 3\n1 1\n2 1\n3 5\n1 3\n2 4\n2 2\n4 3\n5 4\n2 2\n5 1\n3 1\n2 1\n5 3\n3 3\n1 5\n2 1\n2 2\n2 5\n4 1\n3 1\n3 1\n3 4\n2 4\n2 3\n3 1\n2 1\n3 2\n2 5\n5 1\n3 1\n2 1\n5 5\n5 3\n5 3\n2 4\n5 4\n5 4\n1 1\n2 1\n2 3\n2 4\n5 1\n2 5\n1 5\n2 4\n3 1\n1 3\n2 1\n2 2\n2 5\n5 3\n4 3\n1 1\n1 3\n2 1\n5 3\n2 1\n1 2\n2 2\n1 1\n2 4\n1 4\n2 1\n3 2\n3 1\n4 1\n5 4\n3 5\n3 4\n1 2\n2 5\n2 3\n3 4\n5 3\n4 2\n4 3\n3 4\n2 3\n1 3\n5 2\n3 1\n4 4\n4 1\n1 1\n3 5\n2 4\n4 4\n3 2\n3 2\n3 3\n3 1\n3 2\n3 1\n3 1\n2 3\n2 1\n3 4\n2 1\n2 2\n1 3\n3 1\n3 4\n3 1\n5 1\n1 1\n5 3\n2 1\n5 1\n2 1\n4 4\n3 2\n5 2\n2 1\n5 2\n3 1\n3 2\n2 2\n3 2\n4 1\n2 2\n3 4\n3 1\n3 1\n1 5\n2 3\n2 5\n4 3\n5 4\n2 3\n3 5\n3 2\n1 2\n4 1\n3 2\n3 5\n3 5\n5 5\n5 1\n3 5\n5 5\n4 2\n3 1\n2 4\n4 1\n3 1\n5 1\n2 5\n2 5\n4 1\n4 2\n5 5\n5 2\n3 3\n1 1\n1 5\n3 2\n3 1\n2 4\n5 2\n1 1\n5 5\n3 2\n4 3\n1 5\n3 5\n5 5\n4 1\n3 2\n5 1\n1 3\n3 1\n5 5\n1 2\n3 2\n2 3\n1 3\n2 3\n1 3\n2 3\n1 3\n1 1\n1 2\n3 3\n1 1\n2 4\n3 1\n1 2\n2 1\n2 1\n2 3\n5 5\n3 1\n2 2\n5 5\n5 4\n4 5\n2 5\n1 2\n1 4\n5 1\n3 4\n1 4\n3 1\n1 1\n1 1\n2 2\n2 2\n5 5\n4 1\n1 2\n2"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n2 1 3\\n1 3\\n2 3') == '3'\nassert solution('2 1\\n2 1') == '0'"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n1 2\\n1 2\") == \"1\"\nassert solution(\"3 2\\n2 1 3\\n1 3\\n2 3\") == \"3\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n2 1\\n1 2\\n') == '1'\nassert solution('3 2\\n2 1 3\\n1 3\\n2 3\\n') == '3'"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n2 1\\n1 2\\n\") == \"1\"\nassert solution(\"3 2\\n2 1 3\\n1 3\\n2 3\\n\") == \"3\"\n\"\"\"\n\n\"\"\"\n\u0427\u0442\u043e\u0431\u044b \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0432\u0435\u0440\u043d\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c. \u041c\u044b \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438 \u043f\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u043d\u043e\u0433\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440\u0430.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a N \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u041c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c, \u0447\u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442 0 \u0434\u043e (N*(N-1))/2.\n\n\u0412 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u0438\u0437 N \u0447\u0438\u0441\u0435\u043b, \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043e\u0433\u0443\u0442 \u0441\u0442\u043e\u044f\u0442\u044c \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e N. \u041c\u044b \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u044d\u0442\u0443 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438 \u043f\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u043d\u043e\u0433\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440\u0430.\n\n\u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u043e\u0448\u0438\u0431\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442 \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438.\n\nSample Input 1:\n2 1\n2 1\n1 2\nSample Output 1:\n0\n\nSample Input 2:\n3 2\n2 1 3\n1 3\n2 3\nSample Output 2:\n1\n\"\"\"\n\n\"\"\"\n\u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u0430\u043a:\n\n\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0443 \u043f\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u043d\u043e\u0433\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440\u0430.\n\n\u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0443 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440\u0430.\n\n\u0414\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u043a\u0430\u043a\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u043f\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440\u0443, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438:\n\n\u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u0433\u043e \u043d\u0435\u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u043f\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u043d\u043e\u0433\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440\u0430.\n\n\u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u043f\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u043d\u043e\u0433\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440\u0430.\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430:\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0435\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 \u0440\u0430\u0437\u043d\u044b\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c, \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 1.\n\n\u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0443 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440\u0430.\n\n\u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043c\u0438"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n2 1\\n1 2\\n') == '1'\nassert solution('3 2\\n2 1 3\\n1 3\\n2 3\\n') == '3'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\") == -1\nassert solution(\"5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\") == 5\n\n\"\"\""
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5''') == '5'\n\nassert solution('''6 5\n2 4\n3 5\n1 5\n3 6\n1 6''') == '5'\n\nassert solution('''1 1\n1 1''') == '0'\n\nassert solution('''1 1\n1 2\n1 3\n1 4\n2 4\n2 5\n1 5\n2 5\n3 5\n4 5\n4 6\n5 6\n''') == '-1'\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n1 3\\n') == '-1'\nassert solution('2 3\\n2 3\\n') == '-1'\nassert solution('3 3\\n1 3\\n2 3\\n') == '0'\nassert solution('3 3\\n2 3\\n1 3\\n') == '0'\nassert solution('3 3\\n1 3\\n1 3\\n') == '0'\n"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n') == -1\nassert solution('6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n') == 5\n\"\"\""
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5''') == -1\n\nassert solution('''6 5\n2 4\n3 5\n1 5\n3 6\n1 6''') == 5\n\n\"\"\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n\") == -1\nassert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n\") == 5\n"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\"\"\") == -1\nassert solution(\"\"\"6 5\n2 4\n3 5\n1 5\n3 6\n1 6\"\"\") == 5\n\n\"\"\"\n6 6\n2 4\n3 5\n1 5\n3 6\n1 6\n\n[\n [1, 2, 0],\n [2, 3, 0],\n [3, 4, 0],\n [4, 5, 0],\n [5, 6, 0],\n [6, 1, 0]\n]\n\n\"\"\"\n\"\"\"\n6 6\n2 4\n3 5\n1 5\n3 6\n1 6\n\n[\n [1, 2, 0],\n [2, 3, 0],\n [3, 4, 0],\n [4, 5, 0],\n [5, 6, 0],\n [6, 1, 0]\n]\n\n\"\"\"\n\"\"\"\n6 6\n2 4\n3 5\n1 5\n3 6\n1 6\n\n[\n [1, 2, 0],\n [2, 3, 0],\n [3, 4, 0],\n [4, 5, 0],\n [5, 6, 0],\n [6, 1, 0]\n]\n\n\"\"\""
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n\") == -1\nassert solution(\"6\\n5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n\") == 5\nassert solution(\"5\\n8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n\") == 5\n\"\"\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n') == -1\n\nassert solution('6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n') == 5\n"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n') == -1\nassert solution('6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n') == 5\n\n\"\"\"\n\nimport sys\nimport io\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n1 1\\n5 1\\n5 5\\n4 2\") == \"4.00\"\nassert solution(\"6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0\") == \"9.00\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n1 1\\n5 1\\n5 5\\n4 2\") == \"4.00\"\nassert solution(\"6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0\") == \"9.00\"\n\"\"\"\n\nimport math\n\nn, k = map(int, input().split())\n\ncoordinates = [tuple(map(int, input().split())) for _ in range(n)]\n\nmax_x, min_x, max_y, min_y = max(coordinates, key=lambda x: x[0])[0], min(coordinates, key=lambda x: x[0])[0], \\\n                             max(coordinates, key=lambda x: x[1])[1], min(coordinates, key=lambda x: x[1])[1]\n\nwidth = abs(max_x - min_x)\nheight = abs(max_y - min_y)\n\nwidth_per_map = math.ceil(width / k)\nheight_per_map = math.ceil(height / k)\n\nprint(width_per_map)\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1\\n1 1\\n5 1\\n5 5\\n4 2') == '4.00'\nassert solution('6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0') == '9.00'\n\"\"\"\n\n\nfrom __future__ import annotations\n\nimport math\nfrom typing import List, Set, Union, Tuple\n\nPoint = Tuple[float, float]\nPolygon = List[Point]\nEdge = Tuple[Point, Point]\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1\\n1 1\\n5 1\\n5 5\\n4 2') == '4.00'\nassert solution('6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0') == '9.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 1\n1 1\n5 1\n5 5\n4 2\n\"\"\") == '4.00'\nassert solution(\"\"\"\n6 3\n-8 -8\n0 -1\n8 -8\n1 0\n0 10\n-1 0\n\"\"\") == '9.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1\\n1 1\\n5 1\\n5 5\\n4 2') == '4.00'\nassert solution('6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0') == '9.00'\nprint(solution(input()))\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n1 1\\n5 1\\n5 5\\n4 2\") == \"4.00\"\nassert solution(\"6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0\") == \"9.00\"\n\"\"\"\nfrom itertools import groupby"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n1 1\\n5 1\\n5 5\\n4 2\\n\") == \"4.00\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1\\n1 1\\n5 1\\n5 5\\n4 2') == '4.00'\nassert solution('6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0') == '9.00'\nprint('Success')\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n1 1\\n5 1\\n5 5\\n4 2\\n\") == \"4.00\"\nassert solution(\"6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0\\n\") == \"9.00\""
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2\\nPAINT 2 0 0 3 3\\nPAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\""
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2\\n\"\n    \"PAINT 2 0 0 3 3\\n\"\n    \"PAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\"\n\nassert solution(\"3 3 4\\n\"\n    \"PAINT 3 0 0 1 1\\n\"\n    \"SAVE\\n\"\n    \"PAINT 2 1 1 2 2\\n\"\n    \"LOAD 1\\n\") == \"3 1 1\\n1 3 1\\n1 1 1\"\n\n\"\"\""
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2\\n\"\n                 \"PAINT 2 0 0 3 3\\n\"\n                 \"PAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\\n\"\n    \"PAINT 2 0 0 3 3\\n\"\n    \"PAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\"\n\n\"\"\"\n\nimport sys\n\nn, k, m = [int(i) for i in input().split()]"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2\\n\"\n\"PAINT 2 0 0 3 3\\n\"\n\"PAINT 3 0 3 3 3\\n\"\n) == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\"\n\nassert solution(\"3 3 4\\n\"\n\"PAINT 3 0 0 1 1\\n\"\n\"SAVE\\n\"\n\"PAINT 2 1 1 2 2\\n\"\n\"LOAD 1\\n\"\n) == \"3 1 1\\n1 3 1\\n1 1 1\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\\nPAINT 2 0 0 3 3\\nPAINT 3 0 3 3 3\") == \"2 1 2 3\\n1 2 1 2\"\nassert solution(\"3 3 4\\nPAINT 3 0 0 1 1\\nSAVE\\nPAINT 2 1 1 2 2\\nLOAD 1\") == \"3 1 1\\n1 3 1\\n1 1 1\""
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2\\nPAINT 2 0 0 3 3\\nPAINT 3 0 3 3 3\") == \"2 1 2 3\\n1 2 1 2\"\nassert solution(\"3 3 4\\nPAINT 3 0 0 1 1\\nSAVE\\nPAINT 2 1 1 2 2\\nLOAD 1\") == \"3 1 1\\n1 3 1\"\n\"\"\"\n\nimport unittest\nfrom typing import List"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2\\nPAINT 2 0 0 3 3\\nPAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\"\nassert solution(\"4 3 2\\nPAINT 3 0 0 1 1\\nSAVE\\nPAINT 2 1 1 2 2\\nLOAD 1\\n\") == \"3 1 1\\n1 3 1\\n1 1 1\"\n\nimport unittest\nfrom io import StringIO\nimport sys\n\nclass Test_Problem_1(unittest.TestCase):\n    def test_given(self):\n        pass"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2\\nPAINT 2 0 0 3 3\\nPAINT 3 0 3 3 3\") == \"2 1 2 3\\n1 2 1 2\"\nassert solution(\"4 3 2\\nPAINT 3 0 0 1 1\\nSAVE\\nPAINT 2 1 1 2 2\\nLOAD 1\") == \"3 1 1\\n1 3 1\"\nassert solution(\"4 3 2\\nPAINT 3 0 0 1 1\\nSAVE\\nPAINT 2 1 1 2 2\\nLOAD 1\\nPAINT 1 1 1 1 1\") == \"3 1 1\\n1 3 1\"\n\nimport json\n"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2\\n\"\n\"PAINT 2 0 0 3 3\\n\"\n\"PAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\"\n\nassert solution(\"3 3 4\\n\"\n\"PAINT 3 0 0 1 1\\n\"\n\"SAVE\\n\"\n\"PAINT 2 1 1 2 2\\n\"\n\"LOAD 1\\n\") == \"3 1 1\\n1 3 1\\n1 1 1\"\n\n-----Problem-----\nThe painting program is called \"Painter\" by the game designer.\n\nThe designer has designed a game that consists of one or more paintings, each of which is painted by the painter. The painter knows the coordinates of the painting, but also knows the number of lines to be painted in that painting.\n\nThe painter also knows the colours that can be used for painting, and the number of these colours available to him.\n\nThe game administrator knows only the number of paintings to be painted.\n\nThe administrator also knows the number of commands to be executed, and the number of painting colors available for each painting.\n\nThe administrator wants the painter to paint the game in such a way that all paintings are painted, and there are no two paintings that are painted with the same colour.\n\nThe administrator knows that there are no duplicated commands.\n\nYou have to help the painter with his painting.\n\nGiven the initial instructions to paint the paintings, find the maximum number of paintings that can be painted.\n\n-----Notes-----\n\nThe initial painting is white.\n\n-----Hint---\n\nLet's start with a concrete example. Let the number of painting colors available to the painter be 3.\n\nThe administrator tells the painter to paint three paintings, each with 2 lines to be painted.\n\nThe number of painting commands available to the painter is 2.\n\nThe painting commands are PAINT 1 0 0 1 2, PAINT 2 0 1 1 2.\n\nThe number of paintings to be painted is 3.\n\nThe designer tells the painter to paint the first painting with the first two lines, and to paint the second painting with the second two lines.\n\nThe painting commands are PAINT 1 1 2 2.\n\nThe number of paintings to be painted is 2.\n\nThe designer tells the painter to paint the first painting with the last two lines, and to paint the second painting with the last two lines.\n\nThe painting commands are PAINT 1 2 2 2.\n\nThe number of paintings to be painted is 1.\n\nThe designer tells the painter to paint the only painting with the last two lines.\n\nThe painting commands are PAINT 2 2 2.\n\nThe number of paintings to be painted is 0.\n\nIt is important to note that painting the last painting will paint nothing, because the designer only told the painter to paint two lines.\n\nIt is also important to note that painting the last painting with the last two lines is not considered a valid painting, because the designer only told the painter to paint two lines.\n\nIt is also important to note that painting the last painting with the last two lines is not considered a valid painting, because the designer only told the painter to paint two lines.\n\nIt is important to note that painting the first painting with the last two lines is not considered a valid painting, because the designer only told the painter to paint two lines.\n\nIt is important to note that painting the first painting with the last two lines is not considered a valid painting, because the designer only told the painter to paint two lines.\n\nIt is important to note that painting the second painting with the last two lines is not considered a valid painting, because the designer only told the painter to paint two lines.\n\nIt is important to note that painting the second painting with the last two lines is not considered a valid painting, because the designer only told the painter to paint two lines.\n\nThe painting commands are PAINT 1 1 2 2.\n\nThe number of paintings to be painted is 2.\n\nThe designer tells the painter to paint the first painting with the first and second lines, and to paint the second painting with the second and last lines.\n\nThe painting commands are PAINT 1 2 1 3.\n\nThe number of paintings to be painted is 2.\n\nThe designer tells the painter to paint the first painting with the first and second lines, and to paint the second painting with the second and third lines.\n\nThe painting commands are PAINT 1 2 1 3.\n\nThe number of paintings to be painted is 2.\n\nThe designer tells the painter to paint the first painting with the first and second lines, and to paint the second painting with the second and third lines.\n\nThe painting commands are PAINT 1 2 1 3.\n\nThe number of paintings to be painted is 2.\n\nThe designer tells the painter to paint the first painting with the first line, and to paint the second painting with the second and third lines.\n\nThe painting commands are PAINT 1 1 3 2.\n\nThe number of paintings to be painted is 2.\n\nThe designer tells the painter to paint the first painting with the first line, and to paint the second painting with the second and third lines.\n\nThe painting commands are PAINT 1 1 3 2.\n\nThe number of paintings to be painted is 2.\n\nThe designer tells the painter to paint the first painting with the first line, and to paint the second painting with the second line.\n\nThe painting commands are PAINT 1 1 3.\n\nThe number of paintings to be painted is 1.\n\nThe designer tells the painter to paint the first painting with the first line, and to paint the second painting with the second line.\n\nThe painting commands are PAINT 1 1 3.\n\nThe number of paintings to be painted is 1.\n\nThe designer tells the painter to paint the only painting with the first line.\n\nThe painting commands are PAINT 1 1.\n\nThe number of paintings to be painted is 0.\n\nThe designer tells the painter to paint the only painting with the second line.\n\nThe painting commands are PAINT 1 2.\n\nThe number of paintings to be painted is 0.\n\nThe designer tells the painter to paint the only painting with the third line.\n\nThe painting commands are PAINT 1 3.\n\nThe number of paintings to be painted is 0.\n\nThe designer tells the painter to paint the only painting with the fourth line.\n\nThe painting commands are PAINT 1 4.\n\nThe number of paintings to be painted is 0.\n\nThe designer tells the painter to paint the only painting with the fifth line.\n\nThe painting commands are PAINT"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3') == '-1'\nassert solution('4 2') == '1 4 2 3'\nassert solution('4 1') == '-1'\nassert solution('5 1') == '-1'\nassert solution('10 2') == '1 10 4 9 2 8 3 7 5 6'\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == -1\nassert solution('4 3\\n') == '1 4 2 3'\nassert solution('4 2\\n') == '1 2 3 4'\nassert solution('5 1\\n') == '-1'\nassert solution('5 3\\n') == '1 2 3 4 5'\n'''"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == '1 4 2 3'\nassert solution(\"5 1\") == '-1'\n\"\"\""
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 4 2 3') == '1 4 2 3'\nassert solution('4 5\\n1 4 2 3') == '-1'\nassert solution('5 1\\n1 1 1 1 1') == '1 1 1 1 1'\nassert solution('5 4\\n1 4 2 3') == '1 2 3'\nassert solution('5 4\\n1 4 2 3\\n1 3 2 1') == '1 2 3'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 4 2 3\\n') == '1 4 2 3'\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4 3\"\n) == \"1 4 2 3\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 4 2 3') == '1 4 2 3'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 4 2 3\") == \"1 4 2 3\"\nassert solution(\"5 1\\n-1\") == \"-1\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 2 4 3\\n1 3 4 2\\n1 4 3 2\") == '1 4 2 3'\nassert solution(\"5 1\\n0 1 3 2 4\\n0 1 2 3 4\\n0 1 2 4 3\\n0 1 3 4 2\\n0 1 4 3 2\") == '-1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == '1 4 2 3'\nassert solution(\"5 1\") == '-1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n5 0') == '0'\n\"\"\""
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n4 2\\n2 1\\n1 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n4 2\\n2 1\\n1 3\\n') == '1\\n'\nassert solution('4\\n5 0\\n2 6\\n8 6\\n5 7\\n') == '0\\n'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n4 2\\n2 1\\n1 3\\n') == '1'\nassert solution('4\\n5 0\\n2 6\\n8 6\\n5 7\\n') == '0'\n\"\"\""
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\\n2\\n3\\n\") == \"0\"\nassert solution(\"1\\n2\\n2\\n\") == \"1\"\nassert solution(\"1\\n2\\n3\\n4\\n\") == \"1\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"2\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '1'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"0\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n4 2\\n2 1\\n1 3') == '1'\n\nassert solution('4\\n5 0\\n2 6\\n8 6\\n5 7') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == '1'\nassert solution(test_input_2) == '0'\n\nprint(solution(read_input()))\n"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n4 6\\n2 1\\n1 3') == '1'\n'''"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\") == \"4 140\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\") == \"4 140\"\n\nSample Input 3:\n6 10 4 3\n0 1 1000 10\n0 2 2 10\n1 2 2 10\n2 3 2 10\n0 3 10 30\n3 4 2 10\n0 4 10 30\nSample Output 3:\n1000 100010\n\"\"\"\n\n\"\"\"\nhttps://www.techiedelight.com/find-the-maximum-flow-in-a-network-flow-problem/\n\"\"\""
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\") == \"4 140\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nprint('All tests passed.')\n\nSolution:\n\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\") == \"4 140\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\") == \"4 140\"\nassert solution(\"2 1 0 1\\n0 1 1000 100\") == \"1000 100000\"\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\") == \"4 140\"\nassert solution(\"2 1 0 1\\n0 1 1000 100\") == \"1000 100000\"\n\"\"\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\") == \"4 140\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10\") == \"4 140\"\nassert solution(\"2 1 0 1\\n0 1 1000 100\") == \"1000 100000\"\n\nimport sys\n"
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20') == '3'\n\"\"\""
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\") == \"3\"\nassert solution(\"5 7\\n8 3\\n5 7\") == \"impossible\"\nassert solution(\"8 2\\n8 3\\n5 7\") == \"impossible\"\nprint(\"Success\")\n\"\"\""
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\") == \"3\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20') == '3'\nassert solution('8 2\\n8 3\\n5 7') == 'impossible'\nprint('Success')\n\nSee https://www.codewars.com/kata/52b7ed099cdc285c300001cd/solutions/python/me/best_practice \n\n\"\"\""
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20') == '3'\nassert solution('8 2\\n8 3\\n5 7') == 'impossible'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20') == '3'"
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == 'impossible'\nassert solution('5\\n1\\n2\\n3\\n4\\n5') == '2'\nassert solution('10\\n1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '3'\nassert solution('10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '3'\n"
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\""
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\") == \"3\"\n\"\"\"\n\nfrom typing import List\n\n\"\"\"\n\u5f53\u89c6\u9891\u6700\u591a\u53ea\u6709\u4e24\u4e2a\uff0c\u5373\u4e24\u79cd\u89c6\u9891\u62c9\u51fa\u6765\u7684\u65f6\u5019\uff0c\u7ec8\u4e8e\u662f\u4ee5\u4e0a\u4e24\u79cd\u89c6\u9891\u6392\u6210\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u95ee\u9898\n\"\"\"\n\n\nclass Solution:\n    def solve(self, n: int, k: int) -> str:\n        if k == 1:\n            return 1\n        if n == 1:\n            return 2\n        # \u8ba1\u7b97\u79fb\u52a8\u7684\u6700\u5927\u6b21\u6570\uff0c\u81ea\u4e0a\u800c\u4e0b\u8ba1\u7b97\uff0c\u6700\u540e\u4e00\u6b21\u6392\u6210\u6b63\u65b9\u5f62\u7684\u9700\u8981\u6700\u5c0f\u7684\n        count = int((n - 1) / 2)\n\n        # \u6bcf\u6b21\u79fb\u52a8\uff0c\u9700\u8981\u7684\u6700\u5c0f\u6b63\u65b9\u5f62\u7684\u5bbd\u5ea6\n        min_width = int((k - 1) / 2)\n\n        # \u7b2c\u4e00\u6b21\u6392\u6210\u6b63\u65b9\u5f62\u7684\u6700\u5927\u5bbd\u5ea6\n        max_width = int((k - 1) / 2) + 1\n\n        # \u7b2c\u4e00\u6b21\u6392\u6210\u6b63\u65b9\u5f62\u7684\u6700\u5c0f\u5bbd\u5ea6\n        min_width = int((k - 1) / 2)\n\n        # \u5bf9\u4e8e\u540e\u9762\u7684\u79fb\u52a8\uff0c\u7b2c\u4e00\u6b21\u4e24\u4e2a\u70b9\u6392\u6210\u6b63\u65b9\u5f62\u7684\u6700\u5c0f\u5bbd\u5ea6\n        min_width = int((k - 1) / 2)\n\n        # \u7b2c\u4e00\u6b21\u4e24\u4e2a\u70b9\u6392\u6210\u6b63\u65b9\u5f62\u7684\u6700\u5927\u5bbd\u5ea6\n        max_width = int((k - 1) / 2) + 1\n\n        # \u6bcf\u6b21\u79fb\u52a8\uff0c\u7b2c\u4e00\u6b21\u4e24\u4e2a\u70b9\u6392\u6210\u6b63\u65b9\u5f62\u7684\u6700\u5c0f\u5bbd\u5ea6\n        min_width = int((k - 1) / 2)\n\n        # \u7b2c\u4e00\u6b21\u4e24\u4e2a\u70b9\u6392\u6210\u6b63\u65b9\u5f62\u7684\u6700\u5927\u5bbd\u5ea6\n        max_width = int((k - 1) / 2) + 1\n\n        while count >= 0:\n            # \u7b2c\u4e00\u6b21\u4e24\u4e2a\u70b9\u6392\u6210\u6b63\u65b9\u5f62\u7684\u6700\u5c0f\u5bbd\u5ea6\n            min_width = min_width * 2\n\n            # \u7b2c\u4e00\u6b21\u4e24\u4e2a\u70b9\u6392\u6210\u6b63\u65b9\u5f62\u7684\u6700\u5927\u5bbd\u5ea6\n            max_width = max_width * 2\n\n            # \u8ba1\u7b97\u79fb\u52a8\u7684\u6b21\u6570\n            count -= 1\n\n        # \u8f93\u51fa\u7ed3\u679c\n        if max_width == k:\n            return str(max_width)\n        return 'impossible'\n"
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\") == \"3\"\nassert solution(\"8 2\\n8 3\\n5 7\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n\n\"\"\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"21\") == \"21\"\nassert solution(\"51090942171709440000\") == \"21\"\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('21!') == '51090942171709440000'\nassert solution('120!') == '51090942171709440000'\n\n------SOLUTION------\n"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"120\") == \"5\"\n\"\"\""
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n\"\"\"\nimport sys"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(123) == \"3\"\nassert solution(51090942171709440000) == \"21\"\n\"\"\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"120\") == 5\n\"\"\""
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('120') == 5\n\"\"\""
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 3 2') == '45'\nassert solution('7 3 2') == '10'\nassert solution('1 1 1') == '1'\nassert solution('3 3 3') == '10'\nassert solution('2 3 1') == '0'\n"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '0\\n'\nassert solution('3 3 3') == '10'\nassert solution('10 1 2') == '45'\n"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 1 2\") == \"45\"\nassert solution(\"3 3 3\") == \"10\""
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 2\") == \"45\"\nassert solution(\"3 3 3\") == \"10\"\nprint(\"All test cases passed.\")"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 3 2\\n') == '45'\n\"\"\"\n\nN, M, K = input().split()\nN, M, K = int(N), int(M), int(K)\n\nm = 0"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 1 2\") == \"45\"\n\nassert solution(\"3 3 3\") == \"10\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 1 2\") == \"45\"\nprint(solution(\"10 3 2\"))\n\n--------------------------------------------------------------\n"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 1 2\\n') == '45'\nassert solution('3 3 3\\n') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 1 2\\n3 3 3') == '45'\nassert solution('3 3 3\\n3 3 3') == '10'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\") == \"18\"\nassert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n5\") == \"20\"\n\n\"\"\"\n\n\nimport collections"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10') == '18'\n"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\\n') == '18'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n') == '20'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 1\\n5 9\\n2 6\\n5 3\\n') == '18'\nassert solution('4\\n3 1\\n5 9\\n2 6\\n5 3\\n') == '20'\nassert solution('5\\n3 1\\n5 9\\n2 6\\n5 3\\n') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\\n') == '18'\n\"\"\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10') == '18'\n\"\"\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\") == \"18\"\n\"\"\""
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3') == '18'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n5') == '20'\n\n\"\"\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\\n') == '18'\n"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n3 1\\n2 6\\n5 3\\n5\") == \"20\"\nassert solution(\"5 9\\n2 6\\n5 3\\n5\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\nassert solution('2 2 1') == '2'\nassert solution('3 3 3') == '0'\nassert solution('5 4 3') == '20'\n"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 5 10 -1\\n5 1 10\\n1 10 -1\\n10 10 10\\n1 1 1\") == \"11\"\n\"\"\"\n\nfrom operator import itemgetter"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 5 10\\n7 8 2') == '3'\nassert solution('3\\n-1 -1 -1\\n5 5 5\\n10 10 10') == '11'\nprint('Success')"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 5 10\\n7 8 2\") == \"3\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 5 10\\n7 8 2\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n1 5 10\n7 8 2''') == '''3'''\n\nassert solution('''3\n-1 -1 -1\n5 5 5\n10 10 10''') == '''11'''\n\nassert solution('''4\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10''') == '''14'''\n\nassert solution('''10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10 10\n-1 -1 -1\n5 5 5\n10 10"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2\n1 5 10\n7 8 2''') == '3'\n\nassert solution('''3\n-1 -1 -1\n5 5 5\n10 10 10''') == '11'\n\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 5 10\\n7 8 2\\n\") == \"3\"\n\"\"\"\n\nimport sys\nimport math\nimport heapq\nfrom typing import List\n"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 5 10\\n7 8 2') == '3'\nassert solution('3\\n-1 -1 -1\\n5 5 5\\n10 10 10') == '11'"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2\n1 5 10\n7 8 2\n''') == '3'\nassert solution('''\n3\n-1 -1 -1\n5 5 5\n10 10 10\n''') == '11'\n"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1\\n110\\n011') == '2'\nassert solution('4 2\\n1000\\n1000\\n0000\\n0010') == '0'\n\"\"\""
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1\\n') == '1'\nassert solution('3 1\\n010\\n110\\n010') == '4'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n110\\n011\") == \"2\"\nassert solution(\"4 2\\n1000\\n1000\\n0000\\n0010\") == \"0\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n110\\n011') == '2'\nassert solution('4 2\\n1000\\n1000\\n0000\\n0010') == '0'\n\"\"\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n110\\n011') == 2\n\n\"\"\"\n\n\nimport pytest\n\n@pytest.mark.parametrize(\"stdin,expected\", [\n    (\"3 1\\n110\\n011\", 2),\n])\n"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n110\\n011\") == 2\n\"\"\"\n\nfrom collections import defaultdict\nimport numpy as np\n\nn, m = list(map(int, input().split()))\np = defaultdict(list)\nfor i in range(m):\n    s, l = np.array(list(map(int, input().split())))\n    p[s.sum()].append(l.sum())\n\nans = 0\nfor s in p:\n    ans += len(set(p[s]))\nprint(ans % 1000003)"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"110\\n011\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"110\\n011\") == 2\nassert solution(\"1000\\n1000\\n0000\\n0010\") == 0\n\"\"\"\n\nfrom math import gcd\n\nMOD = 1000003"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"110\\n011\") == \"2\"\n\nassert solution(\"1000\\n1000\\n0000\\n0010\") == \"0\"\n\"\"\"\n\nimport itertools\nimport math\n"
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n110\\n011\") == \"2\"\n\"\"\"\n\nn, m = map(int, input().split())\nwires = [input() for _ in range(m)]"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 3 2\\n2') == '1'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3\\n2') == '5'\nassert solution('3\\n1 2 3\\n3') == '1'\nassert solution('3\\n2 1 3\\n3') == '1'\n\"\"\""
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n1 3 2\n2''') == '1'\n\nassert solution('''3\n1 3 2\n2''') == '1'\n\nassert solution('''3\n1 3 2\n2''') == '1'\n\nassert solution('''3\n1 2 3\n2''') == '1'\n\nassert solution('''3\n1 2 3\n2''') == '1'"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3\\n2\") == \"1\"\nassert solution(\"3\\n1 3 2\") == \"5\"\nassert solution(\"10\\n2 3 4 5 6 7 8 9 10\") == \"2\"\n\nprint(solution(\"3\\n1 3 2\"))\nprint(solution(\"3\\n1 3 2\"))\nprint(solution(\"3\\n1 3 2\"))\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str([1, 2, 3])) == \"1\"\n\nassert solution(str([1, 3, 2])) == \"5\"\n\nassert solution(str([2, 3, 1])) == \"2\"\n\nassert solution(str([3, 1, 2])) == \"1\"\n\nassert solution(str([1, 2, 3])) == \"1\""
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3\\n2') == '1'\n\nassert solution('3\\n1 3 2\\n2') == '5'"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3\\n2\\n') == '1\\n'\nassert solution('3\\n1 3 2\\n2\\n') == '5\\n'\n\nprint(solution(stdin.readlines()))\n\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3\\n3') == '1'\nassert solution('3\\n1 3 2\\n2') == '5'\n"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n3') == '1\\n'\nassert solution('1 3 2\\n2') == '5\\n'\n"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 1\") == \"5\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"2 3 1\") == \"4\"\n\"\"\"\n\n\n\nimport math\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 100 20\\n') == '19'\nassert solution('10 10 1\\n') == '19'\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 100 20\\n') == '19'\nassert solution('10 10 1\\n') == '19'\n\n\"\"\""
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\n\n\"\"\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 100 20\\n') == '19'\nassert solution('10 10 1\\n') == '19'\n\"\"\"\n\nfrom math import inf\n\nn, r, p = map(int, input().split())\n\nbest = r\ni = p\n\nwhile True:\n    if i + r > n:\n        best = min(best, n - i)\n        break\n    i += r + p\n\nprint(best)\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 100 20\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 100 20') == '19'\n\n-----\n'''\n\nimport sys\nimport math\nimport time\n\ndebug = False\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 100 20') == '0'\n\"\"\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 100 20\") == \"0\"\nassert solution(\"10 10 1\") == \"19\"\n\"\"\"\n\nimport math\n\nn, r, p = list(map(int, input().split()))\n\nprint(math.ceil((r - p) / p))\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 100 20') == '0'\n\"\"\""
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\nassert solution(input) == output\n\nfrom pprint import pprint\npprint(solution(input))\n\"\"\"\n\n\"\"\"\n-----\n\nfrom collections import deque\nimport sys\n\nclass Node:\n    def __init__(self, name):\n        self.name = name\n        self.children = []\n        self.distance = 0\n        self.done = False"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c\\nd 0') == 'c'\n\"\"\"\n\nimport sys\nimport collections\n\nclass Graph(object):\n    def __init__(self, num_nodes):\n        self.nodes = set(range(1, num_nodes + 1))\n        self.edges = dict()\n        self.in_deg = dict()\n        self.out_deg = dict()\n    \n    def add_edge(self, start, end):\n        if start not in self.nodes or end not in self.nodes:\n            return\n        if start not in self.edges:\n            self.edges[start] = set()\n        self.edges[start].add(end)\n        self.in_deg[end] = self.in_deg.get(end, 0) + 1\n        self.out_deg[start] = self.out_deg.get(start, 0) + 1\n\n    def reverse(self):\n        g = Graph(len(self.nodes))\n        for node, adj in self.edges.items():\n            for adj_node in adj:\n                g.add_edge(adj_node, node)\n        return g\n\n    def bfs_shortest_paths(self, start, end):\n        stack = collections.deque([start])\n        visited = set()\n        while stack:\n            cur_node = stack.popleft()\n            if cur_node == end:\n                return\n            if cur_node in visited:\n                continue\n            visited.add(cur_node)\n            for adj_node in self.edges.get(cur_node, []):\n                if adj_node not in visited:\n                    stack.append(adj_node)\n        return visited\n\n    def topological_sort(self):\n        stack = []\n        for node in self.nodes:\n            if self.in_deg[node] == 0:\n                stack.append(node)\n        visited = set()\n        while stack:\n            cur_node = stack.pop()\n            visited.add(cur_node)\n            for adj_node in self.edges.get(cur_node, []):\n                self.in_deg[adj_node] -= 1\n                if self.in_deg[adj_node] == 0:\n                    stack.append(adj_node)\n        self.nodes = visited\n        return visited"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('a b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c\\nd 0\\n') == 'c'\nassert solution('classa classb myfilec execd libe\\classa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe\\nlibe 0\\n') == 'SHIP IT'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c\\nd 0\") == \"c\"\nassert solution(\"a b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c\\d 0\") == \"SHIP IT\"\n\n\"\"\""
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a,b,c,d\") == \"SHIP IT\"\nassert solution(\"a,b,c,d,e\") == \"SHIP IT\"\nassert solution(\"a,b,c,d,e,f\") == \"SHIP IT\"\n\"\"\""
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('classa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe') == 'c\\n'\n\"\"\""
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''classa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0'''\n) == 'libe'\nassert solution(\n'''def a():\n    pass\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0'''\n) == 'SHIP IT'\n\n-----Problem-----\nYou just graduated from programming school and got a job as a software engineer at a company that cares for other countries. As a developer, you have to take responsibility for keeping the code base secure.\n\nThere is a cyclic dependency between the files. So, you decided to break the cycle, hence removing one of the files from the dependencies. The only file that is allowed to be removed is \"a\".\n\nThe code base now has one shortest dependency cycle with three files: \"a\", \"b\", and \"c\". You will be given a number of commands, one command per line, with one line per test case. Each test case consists of one line with one integer, which represents the value for \"a\". You must execute all the commands. After execution of one command, you need to output the number of dependencies.\n\nGiven a command sequence that should be executed to remove \"a\" from the dependencies, return the number of remaining dependencies after the execution. You may assume that all the commands are executed in the correct order.\n\n-----Constraints-----\n1 <= n <= 500\n1 <= |command sequence| <= 10^6\n1 <= command <= 10^6\n1 <= |dependency| <= 10^6\n1 <= k <= 10^6\n1 <= |import line| <= 10^6\nThe input for each test case will be one integer, which represents the value for \"a\".\n\n-----Sample Input-----\n5\n1\n10\n50\n100\n1000\nSample Output:\n6\n\n-----Note-----\nIf you run this solution it will output:\n\nTest Case #1: 6\nTest Case #2: 6\nTest Case #3: 6\nTest Case #4: 6\nTest Case #5: 6\n'''\n\nn = int(input())\nfile_name = input()\nclass_number = []\nimport_count = []\nimport_line = []\n\nfor _ in range(n):\n    class_number.append(int(input()))\n\nfor _ in range(n):\n    import_count.append(int(input()))\n\nfor _ in range(n):\n    import_line.append(input())\n\n\nimport_line_number = 0\nfor line in import_line:\n    line = line.strip('\\n')\n    if 'import' in line:\n        line = line.strip(' import')\n        if ',' in line:\n            line = line.strip(', ')\n            line = line.split(', ')\n            for i in line:\n                import_line_number += class_number[int(i)]\n        else:\n            import_line_number += class_number[int(line)]\n\nclass_number.sort()\nclass_number.reverse()"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a\\nb\\nc\\nd\\n') == 'SHIP IT'\nassert solution('a\\nb\\nc\\nd\\ne\\n') == 'SHIP IT'\nassert solution('a\\nb\\nc\\nd\\nf\\n') == 'SHIP IT'\nassert solution('a\\nb\\nc\\nd\\ne\\ng\\n') == 'SHIP IT'\nassert solution('a\\nb\\nc\\nd\\nh\\n') == 'SHIP IT'\n"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c\\nd 0') == 'c'\nassert solution('classa classb myfilec execd libe\\classa 2\\nimport classb\\nimport myfilec, libe\\classb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe\\nlibe 0') == 'SHIP IT'\n\nSample Input 3:\n4\na b c d\na 1\nimport d, c, e\nb 2\nimport d\nimport c\nc 1\nimport a, c\nd 0\nSample Output 3:\na, d, c\n\nSample Input 4:\n5\na b c d e\na 2\nimport d\nimport b, e\nb 2\nimport d\nimport c, e\nc 1\nimport a, c\nd 0\nimport b\ne 0\nSample Output 4:\nSHIP IT\n\"\"\""
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == output\n\"\"\"\n\nfrom collections import defaultdict\n\nn = int(input())\nnames = input().split()\nnames_dict = defaultdict(set)\nnames_rank = defaultdict(int)\nimport_count = defaultdict(int)\nfor i in range(n):\n    line = input().split()\n    if line[1] == '0':\n        import_count[line[0]] += 1\n        names_dict[line[0]].add(line[2])\n    else:\n        for name in line[2:]:\n            names_dict[line[0]].add(name)\n            names_rank[name] += 1\n        for name in line[2:]:\n            names_rank[name] += 1\n\ncnt = 0\nwhile True:\n    cnt += 1\n    ans = []\n    for name, rank in names_rank.items():\n        if import_count[name] == 0:\n            ans.append(name)\n            for n in names_dict[name]:\n                import_count[n] -= 1\n    if len(ans) == 0:\n        break\n\nprint(str(cnt))\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"5+3+x\") == \"1\"\nassert solution(\n\"20+3+x\") == \"2\"\nassert solution(\n\"3+2+x\") == \"1\"\nassert solution(\n\"5+3*x\") == \"3\"\nassert solution(\n\"3*x+3+2*x\") == \"3\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5+x\") == \"1\"\nassert solution(\"5-x\") == \"4\"\nassert solution(\"5+2*x\") == \"7\"\nassert solution(\"5+2*x+3\") == \"9\"\nassert solution(\"5+2*x+3+4*x\") == \"9\"\n\"\"\"\n\nA = input().split()\nB = input().split()\nA = list(map(int, A))\nB = list(map(int, B))\n\nremainder = A[1] % B[1]\ndivisor = A[1] // B[1]\nprint(B[0] - remainder + divisor * (B[0] - remainder))\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\n\"\"\"\n\nimport sys\nimport numpy as np\n\nA, P, M = [int(i) for i in sys.stdin.readline().split()]\n\nA = np.array([int(j) for j in A.split('+')])\n\nindices = list(range(len(A)))\nindices.remove(P)\nprint(indices)"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"5-3+x\") == \"2\"\nassert solution(\"5*3+x\") == \"15\"\nassert solution(\"5*(3+x)\") == \"15\"\nassert solution(\"5*(3+x)+7\") == \"16\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\n\"\"\""
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5+3+x\") == 1\nassert solution(\"20+3+x\") == 2\n\"\"\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5+3+x\n9 10''') == '1'\nassert solution('''20+3+x\n0 5''') == '2'\nassert solution('''9+x*(6+8*3+7)\n0 0''') == '0'\nassert solution('''4*x+8+9*(6+4+x)\n0 0''') == '2'\nassert solution('''7+5+x\n9 10''') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5+3+x') == '1'\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 + x * (3 + 2)\") == \"1\"\nassert solution(\"x + 3 * x + 4 * (5 + 3 * (2 + x - 2 * x))\") == \"1\"\n\"\"\""
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\n\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 15\\n5 20\") == \"yes\"\nassert solution(\"1 15\\n0 20\") == \"no\"\nassert solution(\"1 10\\n0 20\") == \"no\"\nassert solution(\"1 10\\n1 15\") == \"yes\"\n\nprint(\"All tests passed.\")\n\n\"\"\"\n\nimport math\nfrom typing import List\n"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'no'\nassert solution('0 15') == 'yes'\nassert solution('1 15') == 'no'\nassert solution('0 15\\n5 20') == 'yes'\nassert solution('1 15\\n0 20') == 'no'\n"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 10\\n1 15\\n0 20\") == \"yes\"\nassert solution(\"2 10\\n5 20\\n0 15\") == \"no\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'yes'\nassert solution('0 5') == 'yes'\nassert solution('0 15') == 'yes'\nassert solution('1 15') == 'yes'\nassert solution('1 10') == 'yes'\n"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10\\n0 15\\n5 20\") == 'yes'\nassert solution(\"2 10\\n1 15\\n0 20\") == 'no'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10\\n0 15\\n5 20\") == \"yes\"\nassert solution(\"2 10\\n1 15\\n0 20\") == \"no\"\n\"\"\""
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10\\n1 15\\n0 20') == 'yes'\nassert solution('2 10\\n5 20\\n1 15\\n0 20') == 'no'\nassert solution('2 10\\n1 15\\n0 20\\n5 20\\n1 15\\n0 20') == 'no'\nassert solution('2 10\\n1 15\\n0 20\\n5 20\\n1 15\\n0 20\\n5 20\\n1 15\\n0 20') == 'yes'\nassert solution('2 10\\n1 15\\n0 20\\n5 20\\n1 15\\n0 20\\n5 20\\n1 15\\n0 20\\n5 20\\n1 15\\n0 20') == 'no'\n\nprint(solution('2 10\\n1 15\\n0 20'))\nprint(solution('2 10\\n5 20\\n1 15\\n0 20'))\nprint(solution('2 10\\n1 15\\n0 20\\n5 20\\n1 15\\n0 20'))\nprint(solution('2 10\\n1 15\\n0 20\\n5 20\\n1 15\\n0 20\\n5 20\\n1 15\\n0 20'))\nprint(solution('2 10\\n1 15\\n0 20\\n5 20\\n1 15\\n0 20\\n5 20\\n1 15\\n0 20\\n5 20\\n1 15\\n0 20'))\n\"\"\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10\\n0 15\\n5 20\") == \"yes\"\nassert solution(\"2 10\\n1 15\\n0 20\") == \"no\"\nassert solution(\"2 10\\n0 15\\n5 20\\n1 15\\n0 20\") == \"yes\"\n\nassert solution(\"2 10\\n0 15\\n5 20\\n1 15\\n0 20\\n0 15\\n5 20\") == \"no\"\nassert solution(\"2 10\\n0 15\\n5 20\\n1 15\\n0 20\\n0 15\\n5 20\\n0 15\\n5 20\") == \"yes\""
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 10\n0 15\n5 20''') == 'yes'\nassert solution('''2 10\n1 15\n0 20''') == 'no'\nassert solution('''1 10\n0 15''') == 'yes'\nassert solution('''2 10\n0 15\n5 20\n1 15\n0 20''') == 'yes'\nassert solution('''2 10\n0 15\n5 20\n0 15\n5 20''') == 'no'\n\n\"\"\"\n\nn, t = map(int, stdin.readline().split())\ntime = [list(map(int, stdin.readline().split())) for i in range(n)]\nfor i in time:\n    i.sort()\n\ntime.sort()\ntime = [[i[0] + t, i[1]] for i in time]\n\nstart = time[0][0]\nend = time[0][1]\n\nflag = True\nfor i in time:\n    if i[0] >= end:\n        if i[1] <= end:\n            end = i[1]\n        else:\n            flag = False\n            break\n    else:\n        if i[0] <= start:\n            start = i[0]\n        else:\n            flag = False\n            break"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 10\\n0 15\\n5 20') == 'yes'\nassert solution('2 10\\n1 15\\n0 20') == 'no'\nassert solution('2 10\\n0 15\\n5 20\\n6 30') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green') == '0.25'\nassert solution('4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green') == '0'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green''') == '0.25'\nassert solution('''4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red''') == '0'\nassert solution('''4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n5 red''') == '0.5'\nassert solution('''4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n5 green''') == '0.25'\nassert solution('''4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n5 green\n6 green\n10 green\n18 yellow\n34 red\n5 red''') == '0'\n"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\") == \"0.25\"\nassert solution(\"4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n''') == '0.25'\n\nassert solution('''\n4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n''') == '0'\n\n\"\"\"\n\nfrom collections import Counter\nimport numpy as np"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n\") == \"0.25\"\nassert solution(\"4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\\n\") == \"0\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n\") == \"0.25\"\nassert solution(\"4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\\n\") == \"0\"\n\n\"\"\"\n\nimport numpy as np\nimport sys"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\") == \"0.25\"\nprint('The code ran Correctly')"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green') == '0.25'\nassert solution('4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red') == '0'\n\"\"\""
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('10\\n1') == '0'\nassert solution('10\\n2') == '0.5'\nassert solution('10\\n3') == '1'\nassert solution('10\\n4') == '0.25'\n"
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green') == '0.25'\nassert solution('4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red') == '0'\n\"\"\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3') == '3'"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3\\n\") == \"3\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3') == '3'\n\"\"\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3') == '3'\n\nassert solution('5\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3') == 'inf'\n\nassert solution('5\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3') == '3'\n\nassert solution('3\\n1 2\\n1 3\\n2 3') == '1'\n\nassert solution('3\\n1 2\\n1 3\\n2 3') == '2'"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('12') == '12'\nassert solution('1234') == '2413'\nassert solution('123445') == '345122413'\n"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n1\\n3\\n1\\n4\\n3\\n2\\n4\\n2\\n5\\n6\\n6\\n5\\n\") == \"3\"\nassert solution(\"1\\n1\\n3\\n1\\n4\\n3\\n2\\n4\\n2\\n5\\n6\\n6\\n5\\n\") == \"inf\"\n\n-----Solution-----\n\"\"\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3\") == \"3\\n\"\nassert solution(\"6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3\") == \"inf\""
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3\") == \"3\"\nassert solution(\"6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3\") == \"inf\"\nassert solution(\"3 2\\n1 2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3''') == 3\n\n'''\n"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n\") == \"4\"\nassert solution(\"12 3\\n2 3 4 5 6 7 4 7 8 8 12 12\\n\") == \"2\"\n\nassert solution(\"12 4\\n2 3 4 5 6 7 4 7 8 8 12 12\\n\") == \"4\"\nassert solution(\"12 4\\n2 4 5 6 7 4 7 8 8 12 12\\n\") == \"3\"\n\nassert solution(\"13 4\\n2 3 4 5 6 7 4 7 8 8 12 12\\n\") == \"4\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 4\n1 2 3 4\n''') == '4'\n"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 4\n1 2 3 4\n''') == '4'\n\nassert solution('''12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2'\n\nassert solution('''1 1\n1\n''') == '1'\n\nassert solution('''6 2\n1 2 3 4 5 6\n''') == '6'\n\nassert solution('''6 2\n1 2 3 4 5 6\n''') == '6'"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1 2 3 4') == 4\nassert solution('12 3\\n2 3 4 5 6 7 4 7 8 8 12 12') == 2\n\nprint(solution(input()))\n\n------------------\nmin = 0\nmax = 0\nfor i in range(n):\n    if(int(stdin[i])>max):\n        max = int(stdin[i])\n    elif(int(stdin[i])<min):\n        min = int(stdin[i])\n\nprint(max-min)\n\n-------------\n\nn = int(stdin[0])\nk = int(stdin[1])\n\nlista = []\nfor i in range(n):\n    lista.append(int(stdin[i+2]))\n\nd = {i:[] for i in range(n)}\n\nfor i in range(n):\n    d[lista[i]].append(i)"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"4\"\nassert solution(\"12 3\\n2 3 4 5 6 7 4 7 8 8 12 12\") == \"2\""
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n1 2 3 4\\n') == '4'\n\nprint(solution(stdin))\n\n'''\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n1 2 3 4\\n') == '4', 'Wrong output'\nassert solution('12 3\\n2 3 4 5 6 7 4 7 8 8 12 12\\n') == '2', 'Wrong output'\n\"\"\"\n\nn, m = map(int, input().split())\nprint(sum(list(map(int, input().split()))[1:] < list(map(int, input().split()))[:-1]))\n"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"4\"\nassert solution(\"12 3\\n2 3 4 5 6 7 4 7 8 8 12 12\") == \"2\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n\") == \"4\"\n\nassert solution(\"12 3\\n2 3 4 5 6 7 4 7 8 8 12 12\\n\") == \"2\"\n\nprint(\"Success!\")\n\n-----------------------------------------------------------------------------------\n\u041f\u043e\u0441\u043b\u0435 \u043f\u0440\u0435\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0441 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0430, \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u0441\u0442\u0430\u043b \u043f\u043e\u0441\u0435\u0449\u0430\u0442\u044c \u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u043f\u0438\u0442\u0430\u043d\u0438\u0435 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0434\u0440\u0443\u0437\u044c\u044f\u043c\u0438 \u0432 \u0441\u0430\u043c\u043e\u043c \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0435 \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u0444\u0438\u043b\u0438\u0430\u043b\u043e\u0432. \u041a\u0430\u0436\u0434\u044b\u0439 \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u0437\u0430\u043f\u0438\u0441\u0430\u043b \u0432 \u0441\u0432\u043e\u0439 \u043b\u0438\u0441\u0442 \u0447\u0438\u0441\u043b\u0430 $x_1, \\ldots, x_n$ (\u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b), \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0438 \u0441\u0432\u043e\u0438\u0445 \u0434\u0440\u0443\u0437\u0435\u0439 \u043d\u0430 \u0441\u0442\u043e\u043b\u0435 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0430.\n\n\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432\u0441\u0435 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0444\u0438\u043b\u0438\u0430\u043b\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u044b \u0432 \u043e\u0431\u0449\u0443\u044e \u0433\u0440\u0443\u043f\u043f\u0443, \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442 \u0433\u0440\u0443\u043f\u043f\u043e\u0432\u043e\u0439 \u043f\u043e\u0445\u043e\u0434 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0434\u0440\u0443\u0437\u044c\u044f\u043c\u0438 \u0432 \u043e\u0434\u043d\u043e\u043c \u0444\u0438\u043b\u0438\u0430\u043b\u0435. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043d\u0430 \u0441\u0442\u043e\u043b\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043c\u0435\u0441\u0442\u0430, \u0438 \u043e\u043d\u0438 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u043f\u043e\u0445\u043e\u0434\u0435, \u0441\u043e\u0432\u0435\u0442\u043e\u0432\u0430\u043b\u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0444\u0438\u043b\u0438\u0430\u043b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u044b\u043b\u0438 \u0432\u0441\u0435 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0434\u0438\u043d \u0438\u0437 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u043d\u0435 \u0431\u044b\u043b \u0432 \u044d\u0442\u043e\u043c \u0444\u0438\u043b\u0438\u0430\u043b\u0435 \u0432\u043e\u043e\u0431\u0449\u0435. \u041a\u0430\u043a\u043e\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u043f\u043e\u0445\u043e\u0434\u0435 \u0438 \u043d\u0430 \u043a\u0430\u043a\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f?\n\n-----Task-----\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442 \u0432 \u043e\u0434\u043d\u043e\u043c \u0444\u0438\u043b\u0438\u0430\u043b\u0435.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u043f\u043e\u0445\u043e\u0434\u0435 \u0438 \u0441 \u043a\u0430\u043a\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430 \u043e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u0441\u0442\u0430\u0442\u044c.\n\n-----Input-----\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $n$ \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $k$ \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442 \u0432 \u043e\u0434\u043d\u043e\u043c \u0444\u0438\u043b\u0438\u0430\u043b\u0435.\n\n-----Output-----\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $n$ \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u043f\u043e\u0445\u043e\u0434\u0435.\n\n-----Examples-----\nSample Input:\n4\n4\nSample Output:\n2\n\nSample Input:\n10\n2\nSample Output:\n10\n\nSample Input:\n8\n4\nSample Output:\n8\n\nSample Input:\n2\n3\nSample Output:\n1\n\nSample Input:\n3\n2\nSample Output:\n1\n\nSample Input:\n4\n3\nSample Output:\n2\n\nSample Input:\n5\n2\nSample Output:\n5\n\nSample Input:\n10\n2\nSample Output:\n8\n\nSample Input:\n15\n3\nSample Output:\n15\n\nSample Input:\n7\n5\nSample Output:\n7\n\nSample Input:\n4\n3\nSample Output:\n2\n\nSample Input:\n5\n1\nSample Output:\n5\n\nSample Input:\n4\n5\nSample Output:\n4\n\nSample Input:\n2\n3\nSample Output:\n"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"4\"\nassert solution(\"12 3\\n2 3 4 5 6 7 4 7 8 8 12 12\") == \"2\"\n\nprint(solution(\"4 4\\n1 2 3 4\"))\nprint(solution(\"12 3\\n2 3 4 5 6 7 4 7 8 8 12 12\"))\n\n\"\"\"\n\nimport sys\nimport math"
    }
]