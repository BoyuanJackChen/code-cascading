[
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3') == '5'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( 12 3 )') == '36'\nassert solution('( 2 ) ( 3 )') == '5'\nassert solution('( ( 2 3 ) )') == '5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 12 3 )\") == \"36\"\nassert solution(\"( 2 ) ( 3 )\") == \"5\"\nassert solution(\"( 12 3 )\") == \"36\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 12 3 )\") == \"36\"\nassert solution(\"( 2 ) ( 3 )\") == \"5\"\nassert solution(\"( ( 2 3 ) )\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == '5'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( ( 2 3 ) )') == '5'\nassert solution('( 12 3 )') == '36'\n\"\"\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 12 3 )\") == \"36\"\nassert solution(\"( 2 ) ( 3 )\") == \"5\"\nassert solution(\"( ( 2 3 ) )\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 2 3 )\") == \"5\"\nassert solution(\"( 12 3 )\") == \"36\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == '5'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( 12 3 )') == '36'\nassert solution('( 2 ) ( 3 )') == '5'\nassert solution('( ( 2 3 ) )') == '5'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"2\") == \"2\"\nassert solution(\"( 2 ) ( 3 )\") == \"5\"\nassert solution(\"( 12 3 )\") == \"36\"\n\nimport sys\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2\n3''') == '5'\n\nassert solution('''8\n( 2 ( 2 1 ) ) 3\n''') == '9'\n\nassert solution('''4\n( 12 3 )\n''') == '36'\n\nassert solution('''6\n( 2 ) ( 3 )\n''') == '5'\n\nassert solution('''6\n( ( 2 3 ) )\n''') == '5'\n\nimport ast\nimport re\nimport collections\nimport string\nimport operator\nfrom typing import Optional, List, Iterable\nfrom functools import partial, reduce\nfrom pprint import pprint\nfrom copy import copy\nfrom collections import deque, defaultdict, OrderedDict, Counter\nfrom enum import Enum, Flag\nfrom itertools import permutations, combinations, product\nfrom textwrap import dedent, wrap\nfrom inspect import currentframe\nfrom itertools import zip_longest\nfrom math import ceil, floor, log, log2, sqrt, gcd, factorial, pow, pi\nfrom bisect import bisect, bisect_left, bisect_right\nfrom functools import lru_cache, reduce\nfrom decimal import Decimal\nfrom array import array\nimport queue"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n( 2 ( 2 1 ) ) 3') == '9'\n\nassert solution('8\\n( 2 ( 2 1 ) ) 3') == '9'\n\nassert solution('2\\n2 3') == '5'\n\nassert solution('4\\n( 12 3 )') == '36'\n\nassert solution('6\\n( ( 2 3 ) )') == '5'"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"009990001\") == 3\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"009990001\") == 3\nassert solution(\"29998\") == 5\nassert solution(\"610\") == 4\nassert solution(\"981\") == 2\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('610') == 4\nassert solution('009990001') == 3\nassert solution('29998') == 5\nassert solution('981') == 2\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('610') == '4'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('981') == '2'\n\"\"\""
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('101') == '2'\nassert solution('011') == '2'\nassert solution('110111101') == '3'\nassert solution('1010') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"01100\") == \"1110\"\nassert solution(\"111\") == \"11\"\nassert solution(\"100\") == \"1000\"\nassert solution(\"101\") == \"1010\"\nassert solution(\"1010\") == \"1011\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"610\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"610\") == \"4\"\nassert solution(\"981\") == \"2\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"610\") == \"4\"\nassert solution(\"981\") == \"2\"\n\"\"\""
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2017 4 0\\n2017 8 12000\\n2018 8 42000') =='seems legit'\n\nassert solution('2017 11 0\\n2018 1 1000') == 'tampered odometer'\n\nassert solution('2017 11 0\\n2018 1 1001') == 'insufficient service'\n\nassert solution('2017 11 0\\n2017 12 0') =='seems legit'\n\nassert solution('2017 11 0\\n2017 12 1') == 'tampered odometer'"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2017 4 0\") == \"seems legit\"\nassert solution(\"2017 11 0\") == \"tampered odometer\"\nassert solution(\"2017 8 12000\") == \"tampered odometer\"\nassert solution(\"2018 8 42000\") == \"tampered odometer\"\nassert solution(\"2013 1 0\") == \"seems legit\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2017 11 0\\n2018 1 1000\") == \"tampered odometer\"\nassert solution(\"2017 1 0\\n2018 1 1000\") == \"seems legit\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2017 11 0\\n2017 12 12000\") == \"seems legit\"\nassert solution(\"2017 11 0\\n2017 12 42000\") == \"insufficient service\"\nassert solution(\"2017 11 0\\n2017 12 42001\") == \"tampered odometer\""
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\""
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\") == \"seems legit\"\nassert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42001\") == \"insufficient service\"\nassert solution(\"2\\n2013 1 0\\n2013 2 0\") == \"tampered odometer\"\n\"\"\""
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(expected)"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\") == \"seems legit\"\nassert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42001\") == \"tampered odometer\"\nassert solution(\"2\\n2013 1 0\\n2013 2 0\") == \"seems legit\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') =='seems legit'\nassert solution('''3\n2017 4 0\n2017 8 12000\n2018 8 42001\n''') == 'tampered odometer'\nassert solution('''2\n2013 1 0\n2013 2 0\n''') =='seems legit'\nassert solution('''2\n2013 1 0\n2013 2 0\n''') == 'insufficient service'\n\"\"\""
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\"\n) == \"seems legit\"\nassert solution(\n\"\"\"\n3\n2017 11 0\n2017 12 0\n2018 1 1000\n\"\"\"\n) == \"tampered odometer\"\nassert solution(\n\"\"\"\n2\n2013 1 0\n2013 2 0\n\"\"\"\n) == \"insufficient service\"\n\nprint('Success')"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\n\ninput()\nfor line in stdin:\n    pass\n\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\") == \"2\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4\n1 2\n0 2 3\n0 1\n1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4\n1 2\n0 2 3\n0 1\n1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"4\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n\") == \"4\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\""
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\\\n1 2\\\\n0 2 3\\\\n0 1\\\\n1\") == '3'\nassert solution(\"5\\\\n2 3 4\\\\n2 3 4\\\\n0 1\\\\n0 1\\\\n0 1\") == '2'\nassert solution(\"6\\\\n1 3\\\\n0 2 4\\\\n1 5\\\\n0 4\\\\n1 3 5\\\\n2 4\") == '2'\n\n\"\"\""
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\") == \"2\"\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\") == \"2\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n0 2 3\\n0 1\\n1\") == \"3\"\nassert solution(\"4\\n1 2 3\\n2 3 4\\n0 1 3\\n0 1 2\\n\") == \"2\"\nassert solution(\"5\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\n\nprint(\"Successfully solved.\")\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\n\"\"\"\nimport sys\n\n\nclass Solution:\n    def __init__(self) -> None:\n        pass\n\n    def solution(self, stdin: str) -> int:\n        pass"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\"\nassert solution(\"1\") == \"IMPOSSIBLE\"\nassert solution(\"1\\n2\") == \"IMPOSSIBLE\"\nassert solution(\"1\\n2\\n3\") == \"IMPOSSIBLE\"\nassert solution(\"1\\n2\\n3\\n4\") == \"IMPOSSIBLE\"\n\n\"\"\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\nBLUE 1 5000\\nRED 5001 10000') == '2'\nassert solution('3\\nBLUE 1 6000\\nRED 2000 8000') == '3'\nassert solution('4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\\nGREEN 7000 10000') == 'IMPOSSIBLE'\nassert solution('2\\nBLUE 1 4000\\nRED 4002 10000') == 'IMPOSSIBLE'\n\"\"\""
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\nRED 1 5000\\nORANGE 5001 10000\") == \"2\"\nassert solution(\"3\\nRED 1 6000\\nORANGE 4000 8000\") == \"3\"\nassert solution(\"4\\nRED 1 3000\\nORANGE 4000 5000\") == \"IMPOSSIBLE\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\n\ncolor_set = set()\nfor i in range(n):\n    s = input().split()\n    color_set.add(s[0])\n    if len(color_set) > 3:\n        print(\"IMPOSSIBLE\")\n        sys.exit()\n\ncolor_list = list(color_set)\ncolor_list.sort()\nans = []\n\nfor i in range(len(color_list)):\n    for j in range(i + 1, len(color_list)):\n        ans.append(\"%s %d %d\" % (color_list[i], color_list.index(color_list[i]) + 1, color_list.index(color_list[j]) + 1))\n\nprint(len(ans))\nfor a in ans:\n    print(a)"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\"\n\nprint(solution(\"\"))\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\nRED 1 5000\\nBLUE 5001 10000\") == \"2\"\n\nassert solution(\"3\\nRED 1 6000\\nORANGE 4000 8000\\nWHITE 7000 10000\") == \"3\"\n\nassert solution(\"4\\nRED 1 3000\\nORANGE 4002 10000\\nGREEN 7000 10000\") == \"IMPOSSIBLE\"\n\nassert solution(\"3\\nRED 1 6000\\nORANGE 4000 8000\\nWHITE 7000 10000\") == \"IMPOSSIBLE\"\n\nassert solution(\"1\\nRED 1 3000\\nORANGE 4002 10000\") == \"1\""
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\") == \"IMPOSSIBLE\"\nassert solution(\"3\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\") == \"IMPOSSIBLE\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\") == \"IMPOSSIBLE\"\n\n\"\"\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n2\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\nassert solution('''\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == '3'\nassert solution('''\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == 'IMPOSSIBLE'\nassert solution('''\n2\nBLUE 1 4000\nRED 4002 10000\n''') == 'IMPOSSIBLE'\nassert solution('''\n3\nBLUE 1 3000\nRED 2000 5000\nWHITE 7000 10000\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\nBLUE 1 5000\\nRED 5001 10000') == 2\n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\nBLUE 1 5000\\nRED 5001 10000') == '2'\nassert solution('3\\nBLUE 1 6000\\nRED 2000 8000') == '3'\nassert solution('4\\nBLUE 1 3000\\nRED 2000 5000') == 'IMPOSSIBLE'\nassert solution('2\\nBLUE 1 4000\\nRED 4002 10000') == 'IMPOSSIBLE'\nassert solution('2\\nBLUE 1 6000\\nRED 2000 5000') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == 2\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\") == 3\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\") == IMPOSSIBLE\nassert solution(\"1\\nBLUE 1 3000\") == IMPOSSIBLE\n\"\"\""
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"PRATTATTATTIC\") == 6\n\"\"\""
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABCDEF\") == 6\nassert solution(\"AABBB\") == 3\nassert solution(\"GEEK\") == 3\nassert solution(\"POPPOP\") == 3\nassert solution(\"AABBB\") == 3\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"POPPOP\") == \"2POP2\"\n\"\"\""
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"PRATTATTATTIC\") == 6\nassert solution(\"GGGGGGGGG\") == 1\nassert solution(\"PRIME\") == 5\nassert solution(\"BABBABABBABBA\") == 6\n\n\"\"\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"PRATTATTATTIC\") == 6\nassert solution(\"PRIMEP\") == 5\nassert solution(\"BABBABABBABBA\") == 6\nassert solution(\"\") == 1\nassert solution(\"AAAAA\") == 1\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"AAAA\") == 4\nassert solution(\"ABABABAB\") == 7\nassert solution(\"ABBA\") == 3\nassert solution(\"AB\") == 1\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"PRATTATTATTIC\") == 6\nassert solution(\"GGGGGGGGG\") == 1\nassert solution(\"PRIME\") == 5\nassert solution(\"BABBABABBABBA\") == 6\nassert solution(\"AAAAAA\") == 1\n\"\"\"\n\nimport math\nimport time\nimport sys\nsys.setrecursionlimit(10000000)\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('PRATTATTATTIC') == 6\nassert solution('PRIME') == 5\nassert solution('BABBABABBABBA') == 6\nassert solution('AAAAA') == 1\nassert solution
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('PRATTATTATTIC') == 6\nassert solution('PRIME') == 5\nassert solution('BABBABABBABBA') == 6"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\n\"\"\"\nfrom typing import List, Tuple\n\nfrom collections import Counter\n\nfrom icontract import require, ensure, DBC\n\n\nclass TupleCounter(DBC):\n    \"\"\"\n    Wrapper to keep track of the total count of each tuple.\n    \"\"\"\n\n    def __init__(self) -> None:\n        self.counter = Counter()\n\n    def add(self, tuple_: Tuple[str,...]) -> None:\n        self.counter[tuple_] += 1\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, TupleCounter):\n            raise NotImplementedError()\n\n        return self.counter == other.counter\n\n\n@require(lambda text: all(c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' for c in text))\n@require(lambda text: len(text) <= 200)\n@ensure(lambda text, result: len(result) >= 1)\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\"\n) == \"0\"\nassert solution(\n    \"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\"\n) == \"1\"\nassert solution(\n    \"I 1 X\\nD 1\\nE\\nE\"\n) == \"0\"\nassert solution(\n    \"I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\"\n) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\\n\") == \"0\"\nassert solution(\"I 1 X\\nD 1\\nE\\nE\\n\") == \"0\"\nassert solution(\"I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\\n\") == \"0\"\nassert solution(\"I 14 A\\nI 15 B\\nE\\nI 14 B\\nI 15 A\\nE\\n\") == \"1\"\nassert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\\n\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\") == \"0\"\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\") == \"1\"\nassert solution(\"I 1 X\\nD 1\\nE\\nE\") == \"0\"\nassert solution(\"I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"D 1\\nD 2\\nE\") == \"0\"\nassert solution(\"D 1\\nD 2\\nD 3\\nE\") == \"1\"\nassert solution(\"D 1\\nD 2\\nD 3\\nD 1\\nE\") == \"0\"\nassert solution(\"D 1\\nI 1 X\\nD 1\\nE\") == \"0\"\nassert solution(\"D 1\\nI 14 B\\nD 1\\nE\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\") == '0'\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\") == '1'\nassert solution(\"I 1 X\\nD 1\\nE\\nE\") == '0'\nassert solution(\"I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\") == '0'"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('D 1') == '0'\nassert solution('D 2') == '0'\nassert solution('E') == '0'\nassert solution('D 3') == '0'\nassert solution('D 1') == '0'\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\") == \"0\"\nassert solution(\"I 1 X\\nD 1\\nE\\nE\") == \"0\"\nassert solution(\"I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"D 1\\nD 2\\nE\") == \"0\"\nassert solution(\"D 2\\nD 1\\nE\") == \"1\"\nassert solution(\"I 1 X\\nD 1\\nE\") == \"0\"\nassert solution(\"D 1\\nD 2\\nE\") == \"0\"\n\"\"\""
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '0'\nassert solution('D 1') == '0'\nassert solution('D 1\\nD 1') == '0'\nassert solution('D 2\\nD 1') == '1'\nassert solution('D 3\\nD 2') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\") == \"0\"\nassert solution(\"I 1 X\\nD 1\\nE\\nE\\n\") == \"0\"\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\") == \"1\"\n\"\"\""
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n\"\"\"\n\nimport re\n\nimport sys"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\n\"\"\"\n\nimport sys\n\nd, b, f, t0, t1, t2 = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\nprint('Success')"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n\n\"\"\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(d=4, b=0, f=1, t_0=0, t_1=0, t_2=0) == 300\nassert solution(d=5, b=0, f=1, t_0=0, t_1=0, t_2=0) == 1900\nassert solution(d=6, b=0, f=1, t_0=1, t_1=0, t_2=0) == 2300\nassert solution(d=10, b=399, f=0, t_0=0, t_1=0, t_2=0) == 399\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n\n\"\"\"\n\n\n\n\"\"\"\nJohann has a farm located in a big city, and he likes to travel around in his car. The road is long, so Johann often takes the public transport. At the beginning of each day, he always sets his maximum possible speed. However, every time he is on a bus he always picks up all of his fruits to sell them for Bling. He may travel between N cities on the way to Stockholm.\n\nJohann does not like to get caught in traffic jams, so every day he always travels to exactly N cities. These cities are ordered by the day they are visited.\n\nYou are given information about the city tours of Johann, that is, for every day he always visits exactly N cities. The days of the week are numbered 0 through 6, where 0 is Sunday and 6 is Saturday.\n\nInitially, Johann is at home.\n\nWrite a function:"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n\"\"\"\n\n\"\"\"\nSolution\nA day of playing Critter Junction, Johan decides to harvest some fruits. When he plants a tree, he will get 3 fruits that will grow to become trees in days $t_0$, $t_1$, $t_2$. Then, he will gather the fruits from the tree he planted, at day $t_0$, day $t_1$ and day $t_2$. He will only be able to harvest fruits from trees he planted before those. He can plant a tree that will grow to become tree in days $d_0$, $d_1$ and $d_2$. Then, he will gather the fruits from the tree he planted in days $d_0$, $d_1$ and $d_2$. He can only harvest fruits from trees he planted before those.\n\nHere is the scenario:\nGiven a farm with one tree planted at day 0, which yields 3 fruits at day 0.\n\nA farmer is planting a new tree which will yield 3 fruits at day 1.\n\nThe farmer is planting the new tree at day 0.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 0.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 0.\n\nJohan is planting a new tree which will yield 3 fruits at day 0.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 1.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 0.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 1.\n\nGiven a farm with one tree planted at day 0, which yields 3 fruits at day 0.\n\nJohan is planting a new tree which will yield 3 fruits at day 1.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 0.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 1.\n\nJohan is planting a new tree which will yield 3 fruits at day 0.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 1.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 0.\n\nJohan is planting a new tree which will yield 3 fruits at day 1.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 2.\n\nJohan is planting the new tree which will yield 3 fruits at day 0.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 1.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 2.\n\nJohan is planting a new tree which will yield 3 fruits at day 0.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 1.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 2.\n\nJohan is planting the new tree which will yield 3 fruits at day 3.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 0.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 1.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 2.\n\nJohan is planting the new tree which will yield 3 fruits at day 3.\n\nGiven a farm with one tree planted at day 0, which yields 3 fruits at day 0.\n\nJohan is planting a new tree which will yield 3 fruits at day 1.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 0.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 1.\n\nJohan is planting a new tree which will yield 3 fruits at day 0.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 1.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 0.\n\nJohan is planting the new tree which will yield 3 fruits at day 1.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 2.\n\nJohan is planting the new tree which will yield 3 fruits at day 0.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 1.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 2.\n\nJohan is planting the new tree which will yield 3 fruits at day 3.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 0.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 1.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 2.\n\nJohan is planting the new tree which will yield 3 fruits at day 3.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 4.\n\nJohan is planting the new tree which will yield 3 fruits at day 0.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 1.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 2.\n\nJohan is planting the new tree which will yield 3 fruits at day 3.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 4.\n\nGiven a farm with one tree planted at day 0, which yields 3 fruits at day 0.\n\nJohan is planting the new tree which will yield 3 fruits at day 1.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 0.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 1.\n\nJohan is planting the new tree which will yield 3 fruits at day 0.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 1.\n\nThe farmer is planting the new tree which will yield 3 fruits at day 2.\n\nJohan is planting the new tree which will yield 3 fruits at day 3."
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\nprint(\"tests passed\")\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n\"\"\"\n\nimport sys\n\nd, b, f, t_0, t_1, t_2 = [int(e) for e in sys.stdin.readline().split()]"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 12\\n1 13\\n') == 2\nassert solution('2 10\\n1 5\\n1 12\\n') == 2\nassert solution('2 10\\n1 5\\n4 1\\n') == 2\n\nprint(solution('1 12\\n1 13\\n'))\nprint(solution('2 10\\n1 5\\n1 12\\n'))\nprint(solution('2 10\\n1 5\\n4 1\\n'))\n\"\"\"\n\nfrom itertools import permutations\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nr = [0] * n\nfor i in range(n):\n    for j in range(i):\n        if a[i] + k < a[j] or b[i] + k < b[j]:\n            r[j] = max(r[j], r[i] + 1)\nprint(max(r))\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(input())"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 10\\n1 12\\n1 13\") == \"2\"\nassert solution(\"2 10\\n4 1\\n1 5\") == \"2\"\nassert solution(\"2 10\\n1 5\\n4 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10\\n1 5\\n1 4') == '2'\nassert solution('2 10\\n1 12\\n1 13') == '2'\nassert solution('2 10\\n1 5\\n4 1') == '2'\n\"\"\"\n\nfrom math import gcd\nfrom functools import lru_cache"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 10\\n1 5\\n1 4') == '2'\nassert solution('2 10\\n1 5\\n4 1') == '2'\n\nimport sys\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10\\n1 5\\n1 12\\n\") == 2\nassert solution(\"2 10\\n1 5\\n1 4\\n\") == 2\nassert solution(\"2 10\\n1 5\\n1 12\\n\") == 2\nassert solution(\"2 10\\n4 1\\n1 5\\n\") == 2\nassert solution(\"2 10\\n4 1\\n1 5\\n\") == 2\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10\\n1 5\\n1 12\\n') == 2\n\"\"\"\n\na, k = map(int, input().split())\ndata = list(map(int, input().split()))\nb = list(map(int, input().split()))\ndata.sort()\nb.sort()\n\ncount = 1\ni, j = 0, 0\nwhile i < len(data) and j < len(b):\n    if data[i] + k < b[j]:\n        j += 1\n    else:\n        i += 1\n    count += 1\n\nprint(count)\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 10\\n1 5\\n1 4') == 2\n\"\"\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10\\n1 5\\n1 4\") == \"2\"\nassert solution(\"2 10\\n1 5\\n1 12\") == \"2\"\nassert solution(\"2 10\\n1 5\\n1 12\\n1 5\") == \"2\"\nassert solution(\"2 10\\n1 5\\n1 12\\n1 5\\n1 5\") == \"2\"\nassert solution(\"2 10\\n1 5\\n1 12\\n1 5\\n1 4\") == \"2\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n2 10\n1 12\n1 13\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n2 10\n1 5\n1 4\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n2 10\n1 5\n4 1\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8') == '28.970562748'\nassert solution('6\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8') == '32'\n\"\"\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 1\n20 10 12\n20 20 8\n''') == '28.970562748'\nassert solution('''\n6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '28.970562748'\nassert solution('''\n8\n4 4 1\n4 6 1\n4 8 1\n6 6 14\n8 4 1\n8 6 1\n8 8 1\n99 6 -8\n''') == '32'\nassert solution('''\n4\n10 10 5\n10 20 1\n20 10 12\n20 20 8\n''') == 'IMPOSSIBLE'\n\n'''\nimport sys"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\") == \"28\"\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == \"28.970562748\"\n\nimport sys\nlines = iter(sys.stdin)\n\nn = int(next(lines))\nlamps = [tuple(map(int, next(lines).split())) for i in range(n)]\n\nfor i in range(n - 1):\n    lamps.append(tuple(map(int, next(lines).split())))\n\nlamps.sort()"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8\\n\") == \"28.970562748\"\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\\n\") == \"28.970562748\"\n\"\"\"\n\n\"\"\"\nThe logic behind this solution is that, given a point (x, y), for some x and y, there must be another point (x, y) on the opposite side of the line. This is a two-dimensional version of this intuition, and so the same logic could be extended to a three-dimensional case.\n\nWe can write our function as follows."
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\") == \"28\"\nassert solution(\"4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8\") == \"36.2842712475\"\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == \"28.970562748\"\nassert solution(\"8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\") == \"32\"\n\"\"\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\") == \"28.970562748\"\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == \"28.970562748\"\nassert solution(\"8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\") == \"32.388513864\"\n\"\"\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\") == \"28\"\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == \"28.970562748\"\nassert solution(\"8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\") == \"32\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\") == \"28\"\nassert solution(\"4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8\\nSample Output 2: 36.2842712475\") == \"36.2842712475\"\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == \"28.970562748\"\nassert solution(\"8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\") == \"32\"\n\n\"\"\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8') == '28.970562748'\nassert solution('4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8') == '28.970562748'"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8\") == \"28.970562748\"\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == \"28.970562748\"\nassert solution(\"8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\") == \"32\"\nprint('All tests passed.')\n\"\"\""
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"3\\n\"\n    \"1 3 9 5\\n\"\n    \"2 2 6 8\\n\"\n    \"4 8 9 3\\n\"\n    ) == \"3\"\nassert solution(\n    \"3\\n\"\n    \"5 2 7 10\\n\"\n    \"7 4 4 10\\n\"\n    \"2 4 10 8\\n\"\n    ) == \"1\"\nassert solution(\n    \"3\\n\"\n    \"2 1 6 5\\n\"\n    \"2 5 5 4\\n\"\n    \"5 1 7 7\\n\"\n    ) == \"1\"\n\nsolution(stdin.strip())\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\\n\") == \"3\"\nassert solution(\"3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\\n\") == \"1\"\nassert solution(\"3\\n-1 -2 -1 -1\\n-1 2 -1 -1\\n5 1 7 7\\n\") == \"1\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3') == '3\\n3 3 6 7\\n8 6 8 2\\n4 4 8 1'\nassert solution('3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8') == '1\\n2\\n1'\nassert solution('3\\n-1 -2 -1 -1\\n-1 2 -1 -1') == '1\\n-1 2 -1'\nassert solution('2\\n-1 -2 -1 -1\\n-1 2 -1 -1') == '1\\n-1 2'\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 9 5\\n2 2 6 8\\n4 8 9 3\") == \"3\"\nassert solution(\"5 2 7 10\\n7 4 4 10\") == \"1\"\nassert solution(\"2 1 6 5\\n2 5 5 4\") == \"1\"\nassert solution(\"3 -1 -2 -1 -1\\n-1 2 -1 -1\") == \"1\"\n\n\"\"\"\n\nimport math\nimport sys\nimport operator"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\\n') == 3\nassert solution('3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\\n') == 1\nassert solution('3\\n-1 -2 -1 -1\\n-1 2 -1 -1\\n5 1 7 7\\n') == 1\nassert solution('3\\n-1 -2 -1 -1\\n-1 2 -1 -1\\n5 1 7 7\\n') == -1\nassert solution('2\\n-1 -2 -1 -1\\n-1 2 -1 -1\\n5 1 7 7\\n') == -1"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3') == '3'\nassert solution('3\\n5 2 7 10\\n7 4 4 10') == '1'\nassert solution('3\\n2 1 6 5\\n2 5 5 4') == '1'\nassert solution('3\\n-1 -2 -1 -1\\n-1 2 -1 -1') == '1'"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\\n\") == \"3\"\nassert solution(\"3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\\n\") == \"1\"\nassert solution(\"3\\n-1 -2 -1 -1\\n-1 2 -1 -1\\n5 1 7 7\\n\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 9 5\\n2 2 6 8\\n4 8 9 3\") == \"3\"\nassert solution(\"5 2 7 10\\n7 4 4 10\\n2 4 10 8\") == \"1\"\nassert solution(\"2 1 6 5\\n2 5 5 4\\n5 1 7 7\") == \"1\"\nassert solution(\"2 1 6 5\\n2 5 5 4\\n5 1 7 7\\n2 2 6 8\\n4 8 9 3\") == \"3\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\") == 3\n\"\"\""
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n\"\"\") == \"3\"\nassert solution(\"\"\"3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n\"\"\") == \"1\"\nassert solution(\"\"\"3\n2 1 6 5\n2 5 5 4\n5 1 7 7\n\"\"\") == \"1\"\n\nassert solution(\"\"\"3\n-1 -2 -1 -1\n-1 2 -1 -1\n\"\"\") == \"1\"\nassert solution(\"\"\"3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(123123) == -1\nassert solution(12223) == 2\nassert solution(33232211) == 6\nassert solution(12223) == 2\n\nfrom datetime import datetime\nfrom timeit import timeit"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '10'\nassert solution('5') == '5'\nassert solution('555') == '555'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == 10\nassert solution(\"55\") == 55\nassert solution(\"101\") == -1\nassert solution(\"1234321\") == 94708"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123') == 1\nassert solution('12223') == 2\nassert solution('1232321') == 0\nassert solution('123456789101112131415161718192021222324252627282930323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910111213141516') == -1\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12321') == '94708'\nassert solution('1234321') == '-1'\nassert solution('1232321') == '-1'\n\n\"\"\"\n\n\"\"\"\n\n-----Solution 1-----\n\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '10'\nassert solution('100') == '101'\nassert solution('1234321') == '94708'\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 6\nassert solution(4) == 10\nassert solution(5) == 16\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234321\") == 94708\nassert solution(\"1322111\") == 2\nassert solution(\"33322111\") == 2\nassert solution(\"1232321\") == -1\nassert solution(\"1232311\") == -1\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(123) == -1\nassert solution(12321) == 5\nassert solution(1232321) == -1\nassert solution(1234321) == 94708\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1234) == -1\nassert solution(12321) == 94708\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 0 0 0 3') == 6\nassert solution('1 2 0 0 5') == 2\nassert solution('1 2 0 0 4') == 4\nassert solution('1 2 0 0 6') == 0\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 0 0 0 3\") == 6\nassert solution(\"1 2 0 0 5\") == 2\nassert solution(\"1 2 0 0 4\") == 4\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 0 0 0 3') == 6\nassert solution('1 2 0 0 5') == 2\nassert solution('1 2 0 0 4') == 4\nassert solution('1 2 0 0 6') == 0\n\"\"\""
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 0 0 0 3') == '6'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\nassert solution('2 1 1 1 3') == '4'\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 0 0 0 3') == 6\nassert solution('1 2 0 0 5') == 2\nassert solution('1 2 0 0 4') == 4\nassert solution('1 2 0 0 6') == 0\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 0 0 0 3') == '6'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\n\"\"\""
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 0 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 0 0 0 3') == '6'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 0 0 5') == '6'\nassert solution('1 2 0 0 6') == '0'\nassert solution('1 2 0 0 6') == '0'"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 0 0 0 3') == '6'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\n"
    }
]