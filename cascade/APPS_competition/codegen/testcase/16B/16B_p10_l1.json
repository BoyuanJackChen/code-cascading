[
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3') == '5'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( 12 3 )') == '36'\nassert solution('( ( 2 3 ) )') == '5'\nassert solution('( ( 2 3 ) )') == '5'\n\nprint(solution(stdin))"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".//input0.txt\") == \"5\"\n\"\"\""
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( ( 2 3 ) )\") == \"5\"\nassert solution(\"( ( 2 ( 2 1 ) ) )\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == '5'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( 12 3 )') == '36'\nassert solution('( 2 ) ( 3 )') == '5'\nassert solution('( ( 2 3 ) )') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 12 3 )\") == \"36\"\nassert solution(\"( ( 2 3 ) )\") == \"5\"\nassert solution(\"( ( 2 3 ) )\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3') == '5'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\n\nprint(solution('2 3'))\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 12 3 )\") == \"36\"\nassert solution(\"( 2 ) ( 3 )\") == \"5\"\nassert solution(\"( 12 3 )\") == \"36\"\n\"\"\""
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3') == '5'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( 12 3 )') == '36'\nassert solution('( ( 2 3 ) )') == '5'\nassert solution('( ( 2 3 ) )') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"( 12 3 )\") == \"36\"\nassert solution(\"( 2 ) ( 3 )\") == \"5\"\nassert solution(\"( ( 2 3 ) )\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3') == '5'\nassert solution('( 2 ( 2 1 ) ) 3') == '9'\nassert solution('( 2 3 )') == '5'\nassert solution('( ( 2 3 ) )') == '5'\nassert solution('( ( 2 3 ) )') == '5'\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"010\") == 0\nassert solution(\"1010\") == 2\nassert solution(\"10111010\") == 5\nassert solution(\"90210\") == 3\nassert solution(\"091\") == 2\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('610') == '4'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('981') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"009990001\") == 3\nassert solution(\"29998\") == 5\nassert solution(\"610\") == 4\nassert solution(\"981\") == 2\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n\n\"\"\""
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('610') == '4'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\n\"\"\""
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"610\") == 4\nassert solution(\"009990001\") == 3\nassert solution(\"29998\") == 5\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"009990001\") == 3\nassert solution(\"29998\") == 5\nassert solution(\"610\") == 4\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n\"\"\""
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"009990001\") == 3\nassert solution(\"610\") == 4\nassert solution(\"29998\") == 5\nassert solution(\"981\") == 2\n\"\"\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2017 4 0\\n2017 8 12000\\n2018 8 42000\") == \"seems legit\"\nassert solution(\"2017 11 0\\n2018 1 1000\") == \"tampered odometer\"\n\"\"\"\n\nimport unittest\nimport sys\n\n\nclass Solution:\n    def solution(self, service_history):\n        length = len(service_history)\n        record = {\n            \"last_service\": {\n                \"year\": None,\n                \"month\": None,\n                \"distance\": None\n            },\n            \"last_service_2\": {\n                \"year\": None,\n                \"month\": None,\n                \"distance\": None\n            },\n            \"last_service_3\": {\n                \"year\": None,\n                \"month\": None,\n                \"distance\": None\n            }\n        }\n\n        last_service = record[\"last_service\"]\n        last_service_2 = record[\"last_service_2\"]\n        last_service_3 = record[\"last_service_3\"]\n\n        for idx in range(length):\n            entry = service_history[idx]\n            year, month, distance = entry.split()\n            year, month, distance = int(year), int(month), int(distance)\n\n            if distance > 100000:\n                distance = 0\n            elif distance < 0:\n                distance = 0\n\n            if idx == 0:\n                last_service = {\n                    \"year\": year,\n                    \"month\": month,\n                    \"distance\": distance\n                }\n            else:\n                if year == last_service[\"year\"] and month == last_service[\"month\"]:\n                    last_service[\"distance\"] += distance\n                else:\n                    if last_service[\"distance\"] >= 30000:\n                        if last_service_2[\"distance\"] >= 12:\n                            return \"seems legit\"\n                        else:\n                            return \"insufficient service\"\n                    else:\n                        if last_service_3[\"distance\"] >= 12:\n                            return \"seems legit\"\n                        else:\n                            return \"insufficient service\"\n\n            if idx == 1:\n                last_service_2 = {\n                    \"year\": year,\n                    \"month\": month,\n                    \"distance\": distance\n                }\n            else:\n                if year == last_service_2[\"year\"] and month == last_service_2[\"month\"]:\n                    last_service_2[\"distance\"] += distance\n                else:\n                    if last_service_2[\"distance\"] >= 12:\n                        if last_service_3[\"distance\"] >= 12:\n                            return \"seems legit\"\n                        else:\n                            return \"insufficient service\"\n                    else:\n                        if last_service_3[\"distance\"] >= 12:\n                            return \"seems legit\"\n                        else:\n                            return \"insufficient service\"\n\n            if idx == 2:\n                last_service_3 = {\n                    \"year\": year,\n                    \"month\": month,\n                    \"distance\": distance\n                }\n            else:\n                if year == last_service_3[\"year\"] and month == last_service_3[\"month\"]:\n                    last_service_3[\"distance\"] += distance\n                else:\n                    if last_service_3[\"distance\"] >= 12:\n                        return \"seems legit\"\n                    else:\n                        return \"insufficient service\"\n\n        return \"tampered odometer\"\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution().solution\n\n    def test_first_example(self):\n        result = self.solution(stdin=\"2017 4 0\\n2017 8 12000\\n2018 8 42000\")\n        self.assertEqual(result, \"seems legit\")\n\n    def test_second_example(self):\n        result = self.solution(stdin=\"2017 11 0\\n2018 1 1000\")\n        self.assertEqual(result, \"tampered odometer\")\n\n    def test_third_example(self):\n        result = self.solution(stdin=\"2017 1 0\\n2018 2 0\")\n        self.assertEqual(result, \"tampered odometer\")\n\n    def test_fourth_example(self):\n        result = self.solution(stdin=\"2013 1 0\\n2013 2 0\")\n        self."
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\") == \"seems legit\"\nassert solution(\"2\\n2017 11 0\\n2018 1 1000\") == \"tampered odometer\"\nassert solution(\"2\\n2013 1 0\\n2013 2 0\") == \"seems legit\"\nassert solution(\"1\\n2000 4 0\\n2008 4 0\") == \"tampered odometer\"\n\"\"\"\n\nimport unittest\nfrom collections import defaultdict\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"seems legit\"\nassert solution(\"\"\"\n2\n2013 1 0\n2013 2 0\n\"\"\") == \"tampered odometer\"\nassert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"seems legit\"\nassert solution(\"\"\"\n2\n2013 1 0\n2013 2 0\n\"\"\") == \"insufficient service\"\nassert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"tampered odometer\""
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") =='seems legit'\nassert solution(\"\"\"\n2\n2013 1 0\n2013 2 0\n\"\"\") == 'tampered odometer'\nassert solution(\"\"\"\n2\n2013 1 0\n2013 2 0\n\"\"\") == 'insufficient service'\nassert solution(\"\"\"\n2\n2013 1 0\n2013 2 0\n\"\"\") == 'insufficient service'\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2017 4 0\\n2017 8 12000\\n2018 8 42000\") == \"seems legit\"\nassert solution(\"2017 11 0\\n2018 1 1000\") == \"tampered odometer\"\nassert solution(\"2017 1 0\\n2018 2 0\") == \"insufficient service\"\n\n\"\"\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n\") == \"seems legit\"\nassert solution(\"2\\n2013 1 0\\n2013 2 0\\n\") == \"tampered odometer\"\n\"\"\""
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"seems legit\"\nassert solution(\"\"\"\n3\n2017 11 0\n2017 12 0\n2018 1 1000\n\"\"\") == \"tampered odometer\"\nassert solution(\"\"\"\n2\n2013 1 0\n2013 2 0\n\"\"\") == \"insufficient service\"\nassert solution(\"\"\"\n2\n2017 11 0\n2018 1 1000\n\"\"\") == \"tampered odometer\"\n\"\"\"\n\nGiven the service history entries, you must first determine whether it is possible that these are correct, or whether it can be conclusively proven that the odometer must have been tampered with. In the former case, assuming the odometer has not been tampered with, you must then determine whether or not the car has been serviced sufficiently often.\n\n-----Input-----\nThe first line of input contains an integer $1 \\le e \\le 500$, the number of entries in the service history.\n\nNext $e$ lines that describe the entries in the service history. Each such entry is given by three integers $y$, $m$, $o$, where $1950 \\le y \\le 2050$ and $1 \\le m \\le 12$ is the year and month of the service (respectively), and $0 \\le o \\le 99999$ is the reading of the odometer for that entry. The service entries are given in chronological order from oldest to most recent. The first service entry represents the purchase of the car when it was brand new and has $o=0$ (but the previous owner may still have travelled some or all of the distance for that month prior to buying the car). There may be multiple service entries in the same month (but they are still given in chronological order).\n\n-----Output-----\nIf it can be conclusively proven that the odometer must have been tampered with, output \u201ctampered odometer\u201d. Otherwise, if, assuming the odometer was not tampered with, the car can not have been serviced often enough, output \u201cinsufficient service\u201d. Otherwise, output \u201cseems legit\u201d.\n\n-----Examples-----\nSample Input 1:\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\nSample Output 1:\nseems legit\n\nSample Input 2:\n3\n2017 11 0\n2017 12 0\n2018 1 1000\nSample Output 2:\ntampered odometer\n\nSample Input 3:\n2\n2013 1 0\n2013 2 0\nSample Output 3:\ninsufficient service\n\nSample Input 4:\n2\n2017 11 0\n2018 1 1000\nSample Output 4:\ntampered odometer\n\n\"\"\""
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2017 4 0\\n2017 8 12000\\n2018 8 42000\") == \"seems legit\"\nassert solution(\"2017 11 0\\n2018 1 1000\") == \"tampered odometer\"\n\nassert solution(\"2017 11 0\\n2018 1 1000\\n2013 1 0\\n2013 2 0\") == \"tampered odometer\"\nassert solution(\"2017 11 0\\n2018 1 1000\\n2013 1 0\\n2013 2 0\\n2013 11 0\") == \"tampered odometer\"\n\nassert solution(\"2017 11 0\\n2018 1 1000\\n2018 12 0\") == \"seems legit\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\") == \"seems legit\"\n\"\"\"\n\n\"\"\"\nLet's first do a naive approach which checks whether the car has been serviced for a sufficient amount of time.\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2017 11 0\\n2017 12 12000\") == \"seems legit\"\nassert solution(\"2017 1 0\\n2017 2 0\") == \"tampered odometer\"\nassert solution(\"2017 11 0\\n2018 1 1000\") == \"insufficient service\"\n\"\"\""
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2\\n0 2 3\\n0 1\\n1\\n') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n') == '2'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n') == '2'\nassert solution('4\\n1 2\\n0 2 3\\n0 1\\n1\\n') == '3'"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2\\n0 2 3\\n0 1\\n1\\n') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1') == '2'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n') == '2'\nassert solution('4\\n1 2\\n0 2 3\\n0 1\\n1\\n') == '4'\nassert solution('7\\n0 1 3\\n1 4\\n2 6\\n0 1\\n0 1') == '3'\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\") == \"2\"\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\") == \"3\"\nassert solution(\"2\\n1 2\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\nprint(solution(input()))\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"4\"\nprint('All tests passed.')\n-----"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4\n1 2\n0 2 3\n0 1\n1\n\"\"\") == \"3\"\nassert solution(\"\"\"5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\n\"\"\") == \"2\"\nassert solution(\"\"\"6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\n\"\"\") == \"2\"\nassert solution(\"\"\"4\n1 2\n0 2 3\n0 1\n1\n\"\"\") == \"3\"\nassert solution(\"\"\"5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\n\"\"\") == \"2\"\n\n\"\"\"\nA graph can be said to be bipartite if there are two sets $S_0$ and $S_1$, such that every edge connects a vertex from $S_0$ to a vertex from $S_1$. This means that there is a perfect matching between the two sets. In a bipartite graph, a matching between two vertices can only be of one color or the other.\n\nA perfect matching is a subset of the edges of a graph, so the problem is to count the number of edges of a bipartite graph with at most one matching. This is the number of vertices in $S_0$ and the number of edges in $S_1$.\n\n-----Problem-----\nGiven a graph $G$ of $N$ vertices $0 \\ldots N-1$, determine the number of edges in $G$ that are needed to make it bipartite.\n\n-----Solution-----\nA graph is bipartite if and only if it has a matching.\n\nThe matching problem can be represented as a shortest path problem. If we add one edge from the source vertex $0$ to every vertex of the graph and count the number of vertices that can be reached from the source vertex in exactly one path, then the number of edges is equal to the number of vertices.\n\nOnce we find the minimum number of edges, the problem can be converted into the number of vertex matching problem, which is a NP-complete problem and we can solve it via the dynamic programming.\n\"\"\""
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2\\n0 2 3\\n0 1\\n1\\n') == '3'\n\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n') == '2'\n\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n') == '2'\n\nassert solution('4\\n1 2\\n0 2 3\\n0 1\\n1\\n') == '3'\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\nassert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"4\"\nprint('Success')\n\n-------------\n\nimport numpy as np\n\nn = int(input())"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2\\n0 2 3\\n0 1\\n1\\n') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n') == '2'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n') == '2'\nassert solution('4\\n1 2\\n0 2 3\\n0 1\\n1\\n') == '2'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\") == \"IMPOSSIBLE\"\n\"\"\""
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\") == \"IMPOSSIBLE\"\nassert solution(\"2\\nBLUE 1 4000\\nRED 4002 10000\") == \"IMPOSSIBLE\"\n\"\"\""
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\\n\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\\nWHITE 7000 10000\\n\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\\nGREEN 7000 10000\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"BLUE 1 6000\\nRED 2000 8000\") == \"3\"\nassert solution(\"BLUE 1 3000\\nRED 2000 5000\") == \"IMPOSSIBLE\"\nassert solution(\"BLUE 1 4000\\nRED 4002 10000\") == \"IMPOSSIBLE\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\"\nassert solution(\"1 2 3\") == \"IMPOSSIBLE\"\nassert solution(\"1 2 3 4\") == \"IMPOSSIBLE\"\nassert solution(\"1 3 5\") == \"IMPOSSIBLE\"\n\n\"\"\"\n\nimport sys\nimport collections\nimport heapq\nimport math\nimport copy\nfrom functools import lru_cache\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\\nWHITE 7000 10000\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\\nGREEN 7000 10000\") == \"IMPOSSIBLE\"\n\n\"\"\""
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\nRED 1 5000\\nBLUE 5001 10000') == '2'\nassert solution('3\\nRED 1 6000\\nORANGE 4000 8000') == '3'\nassert solution('4\\nRED 1 3000\\nORANGE 4002 10000') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2\nBLUE 1 5000\nRED 5001 10000\n\"\"\") == \"2\"\nassert solution(\"\"\"3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n\"\"\") == \"3\"\nassert solution(\"\"\"4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n\"\"\") == \"IMPOSSIBLE\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\nBLUE 1 5000\\nRED 5001 10000') == '2'\nassert solution('3\\nBLUE 1 6000\\nRED 2000 8000') == '3'\nassert solution('4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000') == 'IMPOSSIBLE'\n\nassert solution('2\\nBLUE 1 5000\\nRED 5001 10000') == '2'\nassert solution('3\\nBLUE 1 6000\\nRED 2000 8000') == '3'\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == '2'\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\") == '3'\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\") == 'IMPOSSIBLE'\n\"\"\"\n\nn = int(input())\na = {}\nfor i in range(n):\n    s = input().split()\n    if s[1] == s[3]:\n        continue\n    if s[0] in a:\n        a[s[0]].append((int(s[1]), int(s[3])))\n    else:\n        a[s[0]] = [(int(s[1]), int(s[3]))]"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('ABCD') == ''\nassert solution('ABCDDCBAA') == 'AB'\nassert solution('ABA') == 'AB'\nassert solution('AAAB') == 'AB'\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"PRATTATTATTIC\") == 6\nassert solution(\"GGGGGGGGG\") == 1\nassert solution(\"PRIME\") == 5\nassert solution(\"BABBABABBABBA\") == 6\n\n\"\"\""
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\""
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    'PRATTATTATTIC'\n) == 6\nassert solution(\n    'GGGGGGGGG'\n) == 1\nassert solution(\n    'PRIME'\n) == 5\nassert solution(\n    'BABBABABBABBA'\n) == 6\n\nprint('Success')"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('PRATTATTATTIC') == 6\nassert solution('GGGGGGGGG') == 1\nassert solution('PRIME') == 5\nassert solution('BABBABABBABBA') == 6\n\"\"\"\nimport collections\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AB\") == 2\nassert solution(\"AA\") == 2\nassert solution(\"ABC\") == 3\nassert solution(\"ABCDE\") == 5\nassert solution(\"ABBCCC\") == 3\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"PRATTATTATTIC\") == 6\nassert solution(\"GGGGGGGGG\") == 1\nassert solution(\"PRIME\") == 5\nassert solution(\"BABBABABBABBA\") == 6\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AAAA\") == 0\nassert solution(\"AAAA\") == 0\nassert solution(\"AAAA\") == 0\nassert solution(\"AAAA\") == 0\nassert solution(\"AAAA\") == 0\n"
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"PRATTATTATTIC\") == 6\nassert solution(\"GGGGGGGGG\") == 1\nassert solution(\"PRIME\") == 5\nassert solution(\"BABBABABBABBA\") == 6\n\"\"\""
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABBBBCCCCDDDD') == 'AB(BCCCCD)D'\nassert solution('AAAABBBCCDD') == 'AB(CCCD)D'\nassert solution('AABAAAAABBBBCCDD') == 'AB(B)CC(CCCD)D'\nassert solution('ABABAAAAABABBBCCDD') == 'AB(ABA)B(CCCD)D'\nassert solution('ABAAAAABBBBCCDD') == 'AB(AB)CC(CCCD)D'\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\nD 1\nD 2\nE\nD 3\nD 1\nE\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\nD 2\nD 1\nE\nD 1\nD 2\nE\n\"\"\") == \"1\"\n\nassert solution(\n\"\"\"\nI 1 X\nD 1\nE\nE\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\nI 14 A\nI 15 B\nE\n\"\"\") == \"1\"\n\nprint('Success')"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"D 1\") == \"0\"\nassert solution(\"D 2\") == \"0\"\nassert solution(\"E\") == \"0\"\nassert solution(\"D 3\") == \"0\"\nassert solution(\"D 1\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\") == \"0\"\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\") == \"1\"\nassert solution(\"I 1 X\\nD 1\\nE\\nE\") == \"0\"\nassert solution(\"I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\") == \"0\""
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"D 1\\nD 2\\nE\") == \"0\"\nassert solution(\"D 1\\nD 2\\nI 1 X\\nD 1\\nE\") == \"1\"\nassert solution(\"I 14 B\\nI 14 A\\nE\") == \"0\"\nassert solution(\"I 14 A\\nI 15 B\\nE\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\") == \"0\"\nassert solution(\"I 1 X\\nD 1\\nE\\nE\") == \"0\"\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\") == \"1\"\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\")!= \"0\"\n\nprint(\"All tests passed.\")\n\n-----\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\") == \"0\"\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\") == \"1\"\nassert solution(\"I 1 X\\nD 1\\nE\\nE\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\") == \"0\"\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\") == \"1\"\nassert solution(\"I 1 X\\nD 1\\nE\\nE\") == \"0\"\nassert solution(\"I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\") == \"0\""
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('D 2') == '1'\nassert solution('I 1 X') == '0'\nassert solution('D 1') == '0'\nassert solution('D 1 E') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\") == \"0\"\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\") == \"1\"\nassert solution(\"I 1 X\\nD 1\\nE\\nE\\n\") == \"0\"\nassert solution(\"I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\\n\") == \"0\"\n\nSample Input 1:\nD 1\nD 2\nE\nD 3\nD 1\nE\nSample Output 1:\n0\n\nSample Input 2:\nD 2\nD 1\nE\nD 1\nD 2\nE\nSample Output 2:\n1\n\nSample Input 3:\nI 1 X\nD 1\nE\nE\nSample Output 3:\n0\n\nSample Input 4:\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\nSample Output 4:\n0\n\nSolution:\n\nd = {'D': 0, 'I': 1, 'E': 2}\n\ni = 0\nwhile i < len(stdin):\n    if stdin[i] == 'E':\n        break\n    elif stdin[i] == 'D':\n        pos = int(stdin[i+1])\n        s = stdin[i+1]\n        stdin = stdin[:i] + stdin[i+2:]\n        for j in range(pos):\n            stdin = stdin[:j] + s + stdin[j:]\n    else:\n        pos = int(stdin[i+1])\n        s = stdin[i+1]\n        stdin = stdin[:i] + stdin[i+2:]\n        for j in range(pos, pos+1):\n            stdin = stdin[:j] + s + stdin[j:]\n    i += 1"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''D 1\nD 2\nE\nD 3\nD 1\nE''') == '0'\nassert solution('''D 1\nD 2\nE\nD 3\nD 1\nE''') == '1'\nassert solution('''I 1 X\nD 1\nE\nE''') == '0'\nassert solution('''I 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE''') == '0'\nassert solution('''I 14 A\nI 15 B\nE\nI 14 B\nI 14 A\nE''') == '1'\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('0 1 0 0 0') == '1'\nassert solution('1 1 1 1 1') == '1'\nassert solution('2 0 0 0 0') == '2'\nassert solution('3 0 0 0 0') == '6'\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n\"\"\""
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\""
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n\"\"\""
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\nprint(\"Test pass.\")\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 10\\n1 5\\n1 4') == 2\nassert solution('2 10\\n1 5\\n4 1') == 2\nassert solution('2 10\\n1 5\\n4 1') == 2\n\n\"\"\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 10\\n1 5\\n1 4') == '2'\nassert solution('2 10\\n4 1\\n1 5') == '2'\nassert solution('2 10\\n1 5\\n4 1') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10\\n1 5\\n1 12\\n1 13') == 2\nassert solution('2 10\\n1 5\\n4 1') == 2\nassert solution('2 10\\n1 5\\n1 4') == 2\n\n\"\"\""
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str([2, 10, 1, 5, 1, 12, 1, 13])) == \"2\"\nassert solution(str([2, 10, 1, 5, 1, 4, 1, 12])) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 10\\n1 5\\n1 4') == '2'\nassert solution('2 10\\n1 5\\n4 1') == '2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 10\\n1 12\\n1 13') == '2'\nassert solution('2 10\\n1 5\\n1 12\\n1 13') == '2'\nassert solution('2 10\\n1 5\\n4 1\\n1 12\\n1 13') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10\\n1 5\\n1 4') == 2\nassert solution('2 10\\n1 12\\n1 13') == 2\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10\\n1 5\\n1 4\") == \"2\"\nassert solution(\"2 10\\n1 5\\n1 12\") == \"2\"\nassert solution(\"2 10\\n1 5\\n1 12\\n1 13\") == \"2\"\nassert solution(\"2 10\\n1 5\\n1 12\\n1 13\\n1 14\") == \"2\"\nassert solution(\"2 10\\n1 5\\n1 12\\n1 13\\n1 14\\n1 15\") == \"2\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10\\n1 5\\n1 4\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10\\n1 5\\n1 4\") == 2\n\"\"\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\\n') == '28.970562748'"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\\n') == '28.970562748'\n\n\"\"\""
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\") == \"32\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom math import sqrt\n\nsource = [int(sys.stdin.readline()) for _ in range(int(sys.stdin.readline()))]\nfor _ in range(len(source)):\n    x, y, e = map(int, sys.stdin.readline().split())\n    print(sqrt(x**2 + y**2) + e)\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\") == \"32\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n10 10 5\n10 20 1\n20 10 12\n20 20 8''') == '28.970562748'\nassert solution('''6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3''') == '28.970562748'\nassert solution('''8\n4 4 1\n4 6 1\n4 8 1\n6 6 14\n8 4 1\n8 6 1\n8 8 1\n99 6 -8''') == '32'\nassert solution('''6\n99 6 -8''') == 'IMPOSSIBLE'\nassert solution('''3\n1 1 15\n5 1 100\n9 1 56''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\") == \"28\"\n\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == \"28.970562748\"\n\nassert solution(\"8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\") == \"32\"\n\n\"\"\"\n\n\n\n\"\"\"\n\u5b9a\u7fa9\n\n\u4e00\u76f4\u7dda:\n    1. \u4e00\u500b\u6700\u5c0f\u7684\u76f8\u7570\u96fb\u80fd\n    2. \u4e00\u500b\u8ca0\u8f09\n\n\u50b3\u7d71\u5206\u89e3\u6cd5:\n    1. \u5206\u6210\u4e09\u90e8\u5206\n        1. \u5168\u90e8\u7684\u7a7a\u9593\u90fd\u662f\u540c\u4e00\u500b\u9ede\n        2. \u5168\u90e8\u7684\u96fb\u80fd\u90fd\u662f\u540c\u4e00\u500b\u9ede\n        3. \u4e00\u500b\u4ea4\u9ede\n    2. \u5206\u6210\u5169\u90e8\u5206\n        1. \u4e00\u90e8\u5206\u7684\u96fb\u80fd\u662f\u6b63\u7684\n        2. \u4e00\u90e8\u5206\u7684\u96fb\u80fd\u662f\u8ca0\u7684\n        3. \u4e00\u500b\u4ea4\u9ede\n\n\u7d66\u5b9a\u5169\u500b\u96fb\u8377\u7684\u65b9\u7a0b\u5f0f\n    1. x = (sum(j) - sum(i)) / 2\n    2. y = (sum(i) - sum(j)) / 2\n\n\u5982\u4f55\u4f86\u627e\u6700\u5c0f\u96fb\u80fd\u4ea4\u9ede(x, y)\n    1. \u627e\u7a7a\u9593\u5206\u9694\u7dda\n    2. \u5206\u96fb\u80fd\n\n\u9084\u6709\n    1. \u5206\u96fb\u80fd\n    2. \u5206\u7a7a\u9593\u7dda\n\"\"\""
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\") == \"28\"\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == \"28.970562748\"\nassert solution(\"8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\") == \"32\"\n\n\"\"\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8\") == \"28.970562748\"\n\"\"\""
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8\") == \"28.970562748\"\n\"\"\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\") == \"28\"\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == \"28.970562748\"\nassert solution(\"8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\") == \"32\"\n\nprint(solution(\"5\\n1 1 1\\n2 2 4\\n2 4 3\\n3 2 3\\n3 4 1\\n4 2 2\\n4 3 4\\n4 4 1\\n5 2 5\\n5 3 2\\n5 4 4\\n5 5 1\\n6 2 4\\n6 3 1\\n6 4 3\\n7 3 1\\n7 4 2\\n7 5 2\\n7 6 2\\n8 2 2\\n8 3 3\\n8 4 4\\n8 5 3\\n8 6 4\\n9 1 3\\n9 2 4\\n9 3 3\\n9 4 1\\n10 2 2\\n10 3 2\\n10 4 1\\n10 5 3\\n10 6 3\\n11 1 4\\n11 2 4\\n11 3 4\\n11 4 1\\n11 5 2\\n11 6 4\\n11 7 1\\n11 8 3\\n12 2 2\\n12 3 3\\n12 4 3\\n12 5 3\\n12 6 2\\n12 7 2\\n12 8 2\\n12 9 3\\n12 10 2\\n12 11 2\\n12 12 4\") == \"28.970562748\")"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\\n\") == \"3\\n\", \"test case 1 failed\"\nassert solution(\"3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\\n\") == \"1\\n\", \"test case 2 failed\"\nassert solution(\"3\\n-1 -2 -1 -1\\n-1 2 -1 -1\\n5 1 7 7\\n\") == \"1\\n\", \"test case 3 failed\"\nassert solution(\"2\\n-1 -2 -1 -1\\n-1 2 -1 -1\\n5 1 7 7\\n\") == \"1\\n\", \"test case 4 failed\"\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\\n\") == \"3\"\nassert solution(\"3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\\n\") == \"1\"\nassert solution(\"3\\n2 1 6 5\\n2 5 5 4\\n5 1 7 7\\n\") == \"1\"\nassert solution(\"2\\n-1 -2 -1 -1\\n-1 2 -1 -1\\n\") == \"1\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 -1 -1 -1') == '1\\n'\nassert solution('3\\n5 2 7 10') == '1\\n'\nassert solution('3\\n2 1 6 5') == '1\\n'\nassert solution('3\\n2 4 10 8') == '1\\n'\nassert solution('3\\n-1 -2 -1 -1') == '1\\n'\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 1\\n2 2') == '1'\nassert solution('3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8') == '1'\nassert solution('3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8') == '1'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3') == 3\nassert solution('3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8') == 1\nassert solution('3\\n-1 -2 -1 -1\\n-1 2 -1 -1') == 1\nassert solution('2\\n-1 -2 -1 -1\\n-1 2 -1 -1') == -1\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3') == '3\\nSample Input 2: 2 4 10 8\\nSample Output 2: 1\\nSample Input 3: 5 1 7 7\\nSample Output 3: 1\\nSample Input 4: -1 -2 -1 -1\\n-1 2 -1 -1')\nprint('test passed')\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 7 10') == '1'\nassert solution('1 1 1 1') == '0'\nassert solution('3 2 6 5') == '3'\nassert solution('2 2 6 8') == '2'\nassert solution('5 1 7 7') == '1'\n\nimport os, sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self."
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(output())\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 9 5\") == \"3\"\nassert solution(\"2 2 6 8\") == \"1\"\nassert solution(\"4 8 9 3\") == \"1\"\nassert solution(\"5 2 7 10\") == \"1\"\nassert solution(\"2 1 6 5\") == \"1\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1234321\") == \"94708\"\nprint(\"Test pass.\")\n\n\"\"\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"55\") == \"55\"\nassert solution(\"101\") == \"-1\"\nassert solution(\"1234321\") == \"94708\"\nprint(\"Passed\")\n\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"55\") == \"55\"\nassert solution(\"101\") == \"101\"\nassert solution(\"1234321\") == \"94708\"\nassert solution(\"1234\") == -1\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == 10\nassert solution(\"55\") == 55\nassert solution(\"101\") == -1\nassert solution(\"1234321\") == 94708\n\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"55\") == \"55\"\nassert solution(\"101\") == \"101\"\nassert solution(\"1234321\") == \"94708\"\n\n\"\"\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == 10\nassert solution(\"55\") == 55\nassert solution(\"101\") == -1\nassert solution(\"1234321\") == 94708\n\"\"\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 6\") == \"0\"\nassert solution(\"1 2 0 0 6\") == \"0\"\nassert solution(\"1 2 0 0 6\") == \"0\"\nassert solution(\"1 2 0 0 6\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 0 0 6') == '0'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 0 0 0 3') == '6'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\n\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations, chain\n\nmodulo = 1_000_000_007\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 0 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 0 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\""
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\n\nassert solution('1 2 0 0 5') == '6'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 0 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 0 0 0 3\") == 6\nassert solution(\"1 2 0 0 5\") == 2\nassert solution(\"1 2 0 0 4\") == 4\nassert solution(\"1 2 0 0 6\") == 0\n\n\"\"\"\n\nfrom itertools import permutations, product, combinations_with_replacement\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 0 0 0 3\") == 6\n\"\"\"\n\nn = [*map(int, stdin.split())]\na = n[:4]\nd = {a[i]:i for i in range(4)}\nm = {}\nfor i in range(4):\n    if a[i] not in m: m[a[i]] = set()\n    for j in range(4):\n        if i == j: continue\n        if a[i] in m: m[a[i]].add(a[j])\n        else: m[a[j]] = {a[i]}"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 0 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8.801 3.098') == '9.21068947 2.56226688'\nassert solution('1 8.801 3.098') == '6.22375968 -0.31921472'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"3.91848289 -5.32462821\"\nassert solution(\"0.5 8 8\") == \"8.14273694 8.14273694\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\nassert solution(\"0.5 -8 8\") == \"4.36385220 9.46891588\"\n\"\"\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\nassert solution(\"0.5 -8 8\") == \"-4.36385220 9.46891588\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\n\"\"\"\nimport math\nimport ast"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n\"\"\"\n\n\nfrom math import atan2, hypot, pi, sqrt\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\n\"\"\""
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n1 2\\n2 1') == '1\\n2'\nassert solution('3 3\\n1 2\\n2 3\\n3 1') == '1\\n2'\nassert solution('4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1') == '0\\n2\\n4'\nassert solution('4 5\\n1 2\\n2 3\\n2 4\\n3 1') == '1\\n1'\nassert solution('4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1') == '1\\n1'\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\\n\") == \"1\\n2\\n\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\\n\") == \"1\\n1\\n2\\n\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\\n\") == \"1\\n1\\n2\\n2\\n\""
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\\n\") == \"2\\n4\\n5\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\\n\") == \"1\\n2\\n\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\\n\") == \"1\\n1\\n\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\\n\") == \"2\\n2\\n1\\n\"\n\"\"\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\") == \"1\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == \"1\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"2\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\") == '1'\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == '0'\nassert solution(\"4 5\\n1 2\\n1 3\\n3 2\\n2 4\\n3 4\") == '2'"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('0 0\\n0 1') == '0'\n\nassert solution('0 0\\n0 1\\n0 2') == '0'\nassert solution('1 1\\n1 2') == '0'\nassert solution('0 0\\n1 1\\n0 1') == '0'\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n1 2\\n2 1\\n') == '1\\n2\\n'\nassert solution('3 3\\n1 2\\n2 3\\n3 1\\n') == '0\\n1\\n1\\n'\nassert solution('4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\\n') == '2\\n4\\n5\\n'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2 2\n1 2\n2 1\n''') == '''\n1\n2\n'''\n\nassert solution('''\n3 3\n1 2\n2 3\n3 1\n''') == '''\n1\n1\n'''\n\nassert solution('''\n4 5\n1 2\n2 3\n2 4\n3 1\n4 1\n''') == '''\n2\n4\n5\n'''\n\nassert solution('''\n4 5\n1 2\n1 3\n3 2\n2 4\n3 4\n''') == '''\n0\n0\n'''\n\nassert solution('''\n4 5\n1 2\n1 3\n3 2\n2 4\n3 4\n''') == '''\n0\n0\n'''"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1 2\\n2 1') == '1\\n2'\nassert solution('3 3\\n1 2\\n2 3\\n3 1') == '0\\n1\\n2'\nassert solution('4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1') == '2\\n4\\n5'\n"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\") == \"2\"\nassert solution(\"2 1 0 1\\n0 1 2\") == \"2\"\nassert solution(\"3 2 1 1\\n0 1 1\\n1 0 1\") == \"infinity\"\n\"\"\"\n\nimport sys\nimport math\nimport pdb\nimport collections"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\n\"\"\"\n\nfrom operator import add\nfrom functools import reduce\nfrom collections import defaultdict"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"4 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\"\"\") == \"11\"\nassert solution(\"\"\"5 5 0 4\n0 1 1\n1 2 1\n2 3 1\n3 0 1\n2 4 1\"\"\") == \"infinity\"\nassert solution(\"\"\"2 1 0 1\n0 1 2\"\"\") == \"2\"\nassert solution(\"\"\"3 3 1 2\n0 1 1\n1 0 1\n1 2 1\"\"\") == \"infinity\"\nassert solution(\"\"\"3 3 1 2\n0 1 1\n1 0 1\n1 2 1\"\"\") == \"2\"\n\"\"\"\n4 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n>>> \n= RESTART: /Users/charlotte/Desktop/SWE_Python/SWExpert/week3/SWexpert_05_Keshav_charlotte_solution.py\n4 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n2 4 1\n2 4 1\n>>> \n= RESTART: /Users/charlotte/Desktop/SWE_Python/SWExpert/week3/SWexpert_05_Keshav_charlotte_solution.py\n5 5 0 4\n0 1 1\n1 2 1\n2 3 1\n3 0 1\n2 4 1\n2 4 1\n2 4 1\n>>> \n= RESTART: /Users/charlotte/Desktop/SWE_Python/SWExpert/week3/SWexpert_05_Keshav_charlotte_solution.py\n2 1 0 1\n0 1 2\n1 0 1\n1 0 1\n1 2 1\n2 3 1\n>>> \n= RESTART: /Users/charlotte/Desktop/SWE_Python/SWExpert/week3/SWexpert_05_Keshav_charlotte_solution.py\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\n2 3 1\n1 0 1\n>>> \n= RESTART: /Users/charlotte/Desktop/SWE_Python/SWExpert/week3/SWexpert_05_Keshav_charlotte_solution.py\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\n2 3 1\n1 0 1\n>>> \n= RESTART: /Users/charlotte/Desktop/SWE_Python/SWExpert/week3/SWexpert_05_Keshav_charlotte_solution.py\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\n2 3 1\n1 0 1\n>>> \n= RESTART: /Users/charlotte/Desktop/SWE_Python/SWExpert/week3/SWexpert_05_Keshav_charlotte_solution.py\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\n2 3 1\n1 0 1\n>>> \n= RESTART: /Users/charlotte/Desktop/SWE_Python/SWExpert/week3/SWexpert_05_Keshav_charlotte_solution.py\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\n2 3 1\n1 0 1\n>>> \n= RESTART: /Users/charlotte/Desktop/SWE_Python/SWExpert/week3/SWexpert_05_Keshav_charlotte_solution.py\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\n2 3 1\n1 0 1\n>>> \n= RESTART: /Users/charlotte/Desktop/SWE_Python/SWExpert/week3/SWexpert_05_Keshav_charlotte_solution.py\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\n2 3 1\n1 0 1\n>>> \n= RESTART: /Users/charlotte/Desktop/SWE_Python/SWExpert/week3/SWexpert_05_Keshav_charlotte_solution.py\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\n2 3 1\n1 0 1\n>>> \n= RESTART: /Users/charlotte/Desktop/SWE_Python/SWExpert/week3/SWexpert_05_Keshav_charlotte_solution.py\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\n2 3 1\n1 0 1\n2 4 1\n>>> \n= RESTART: /Users/charlotte/Desktop/SWE_Python/SWExpert/week3/SWexpert_05_Keshav_charlotte_solution.py\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\n2 3 1\n1 0 1\n1 0 1\n>>> \n= RESTART: /Users/charlotte/Desktop/SWE_Python/SWExpert/week3/SWexpert_05_Keshav_charlotte_solution.py\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\n2 3 1\n1 0 1\n1 0 1\n2 4 1\n2 4 1\n>>> \n= RESTART: /Users/charlotte/Desktop/SWE_Python/SWExpert/week3/SWexpert_05_Keshav_charlotte_solution.py\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\n2 3 1\n1 0 1\n1 0 1\n2 4 1\n2 4 1\n2 4 1"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\n\"\"\"\n\nn, m, s, t = [int(x) for x in stdin.split()]\n\ntubes = []\nfor _ in range(m):\n    a, b, w = [int(x) for x in stdin.split()]\n    tubes.append((a, b, w))\n"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\nassert solution(\"2 1 0 1\\n0 1 2\") == \"2\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\") == \"infinity\"\n\"\"\""
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3') == '11'\nassert solution('5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1') == 'infinity'\n\"\"\"\n\n\n\n\"\"\"\nstdin = \"\"\"4 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n\"\"\"\n\"\"\"\nstdin = \"\"\"5 5 0 4\n0 1 1\n1 0 1\n2 0 1\n3 0 1\n2 4 1\n\"\"\"\n\nimport copy\nimport collections\nimport itertools\nimport sys\nimport math\nimport numpy as np\nimport bisect\nfrom collections import defaultdict, deque\nfrom typing import List\nsys.setrecursionlimit(10 ** 7)"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\") == \"2\"\nassert solution(\"2 1 0 1\\n0 1 2\") == \"2\"\n\nprint(\"OK!\")\n\n-----TESTS-----\nInput:\n5 5 0 4\n0 1 1\n1 0 1\n1 2 1\n2 3 1\n2 3 3\n\nOutput:\n11\n\nInput:\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\n\nOutput:\ninfinity\n\nInput:\n4 5 0 3\n0 1 1\n1 2 1\n2 0 4\n2 3 1\n2 3 3\n\nOutput:\n11\n\n-----Notes-----\n\nThere is no test case for which there is no solution.\n\"\"\""
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == answer\n\nfrom collections import defaultdict"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == '11'\nassert solution(\"4 5 0 3\\n0 1 1\\n1 2 1\\n2 0 4\\n2 3 1\\n2 3 3\") == 'infinity'\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == '2'\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\\n1 2 1\") == 'infinity'\nassert solution(\"2 1 0 1\\n0 1 2\") == '2'\n"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\\n\") == \"11\"\nassert solution(\"4 5 0 3\\n0 1 1\\n1 2 1\\n2 0 4\\n2 3 1\\n2 3 3\\n\") == \"infinity\"\n\"\"\""
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1 1\\n2 1 2\\n0\") == '18'\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\") == 6\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\") == 0\nassert solution(\"3 2 2 3\\n1 1\\n2 2 3\") == 18"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\") == 6\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 2 3\n1 1\n2 2 3''') == '18'\nassert solution('''4 2 1 2 1\n2 1 2''') == '6'\nassert solution('''3 3 1 1\n1 1\n2 2 3''') == '0'\nassert solution('''4 3 1 1\n1 1\n2 2 3''') == '24'\nassert solution('''5 3 1 1\n1 1\n2 2 3''') == '120'\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 1 2 1\\n2 1 2\\n2 3 4') == 6\nassert solution('3 3 1 1\\n1 1\\n2 2 3') == 0\nassert solution('3 2 2 3\\n1 1\\n2 2 3') == 18\n\"\"\"\n\nimport sys\n\nN, *colors = map(int, sys.stdin.readlines())\n\nfor k in range(len(colors)):\n    colors[k] = colors[k] * (colors[k] - 1) // 2\n\ncolors.sort()\n\nprint(sum(colors[N - 1:]))\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2 3\") == \"18\"\nassert solution(\"3 1 2 3\") == \"18\"\nassert solution(\"3 1 2 3\") == \"18\"\nassert solution(\"3 1 2 3\") == \"18\"\nassert solution(\"3 1 2 3\") == \"18\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\") == 6\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\") == 0\nassert solution(\"3 2 2 3\\n1 1\\n2 2 3\") == 18\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 2 1 2\") == \"6\"\nassert solution(\"2 1 2 1 1\") == \"2\"\nassert solution(\"2 1 2 1 2\") == \"6\"\nassert solution(\"2 1 2 1 1\") == \"0\"\nassert solution(\"3 1 2 3\") == \"18\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\") == \"6\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 1 2 1\\n2 1 2\\n2 3 4\\n\") == 6\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\\n\") == 0\nassert solution(\"3 1 2 3\\n1 1\\n2 2 3\\n\") == 18\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n') == '0'\nassert solution('1 4\\n') == '5'\nassert solution('1 5\\n') == '12'\nassert solution('1 3\\n') == '1'\n\nfor _ in range(int(stdin.readline())):\n    n, e = stdin.readline().strip().split()\n    n = int(n)\n    e = int(e)\n    res = 0\n    for i in range(n):\n        b = bin(i)[2:]\n        if b.find('2' * e) >= 0:\n            res += 1\n    print(res)\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\nprint('Test passed')\n\nimport sys"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\nprint('The local tests are done. Click on \"Check\" for more details.')\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n\nimport sys;\n\nn, e = sys.stdin.readline().strip().split(\" \");\n\nx = [0 for i in range(10)];"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1000000 1''') == '468559'\nassert solution('''1000000 5''') == '49401'\nassert solution('''1000000 16''') == '20'\nassert solution('''9000000000000000000 62''') == '1'\n\n\"\"\""
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 9\\n5 4 1') == '1'\nassert solution('4 13\\n2 2 2 2') == '3'\nassert solution('18 90\\n1 2 3 4 5 6 1 2 3 4 5 6') == '12'\n\"\"\"\nimport heapq"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 9\\n5 4 1') == '1'\n\"\"\"\nfrom sys import stdin\n\nK, T = map(int, stdin.readline().split())"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 9\n5 4 1''') == '1'\nassert solution('''4 13\n2 2 2 2''') == '3'\nassert solution('''18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6''') == '12'\nprint('Test pass.')\n\n-----\n'''\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\"\n\"\"\"\n\nfrom collections import Counter\nimport bisect"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 9\\n5 4 1') == '1'\nassert solution('4 13\\n2 2 2 2') == '3'\nassert solution('18 90\\n1 2 3 4 5 6 1 2 3 4 5 6') == '12'\n\"\"\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 9\\n5 4 1') == '1'\nassert solution('4 13\\n2 2 2 2') == '3'\nassert solution('18 90\\n1 2 3 4 5 6 1 2 3 4 5 6') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\""
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\n\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\n\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\""
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 9\\n5 4 1\") == \"1\"\nassert solution(\"4 13\\n2 2 2 2\") == \"3\"\nassert solution(\"18 90\\n1 2 3 4 5 6 1 2 3 4 5 6\") == \"12\"\n\"\"\""
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('3\\n4 7 8') == '3'\nassert solution('5\\n2 3 4 5 8') == '5'\n\"\"\"\n\nn = int(stdin.readline())\nprimes = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 4 8') == '3'\nassert solution('5\\n2 3 4 5 8') == '5'\n\"\"\"\n\nn = int(input())\nprimes = [int(i) for i in input().split()]\n\nprimes.sort()\nm = 0\nfor i in range(n):\n    m += (i + 1) * sum(primes[:i + 1])\n\nprint(m)"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\n\"\"\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('3\\n4 7 8') == '3'\nassert solution('5\\n2 3 4 5 8') == '5'\n\"\"\"\n\nfrom math import gcd\n\nn = int(input())\ns = list(map(int, input().split()))"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('1\\n1') == '0'\nassert solution('1\\n1\\n1') == '0'\nassert solution('1\\n1\\n1\\n1') == '0'\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n\"\"\"\n\nimport sys\nfrom functools import reduce\n\nN = int(sys.stdin.readline())"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4 7 8\") == \"3\"\nassert solution(\"1\\n2\") == \"0\"\nassert solution(\"1\\n3\") == \"0\"\nassert solution(\"5\\n2 3 4 5 8\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n1\") == \"0\"\nassert solution(\"3\\n4 7 8\") == \"5\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n4 7 8') == '3'\nassert solution('3\\n2 3 4 5 8') == '5'\nassert solution('5\\n2 3 4 5 8') == '5'\n\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n4 7 8') == '3'\nassert solution('3\\n4 7 8') == '5'\nassert solution('5\\n2 3 4 5 8') == '5'\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1234') == '1234'\nassert solution('1234') == '1234'\nassert solution('1234') == '1234'\nassert solution('1234') == '1234'\nassert solution('1234') == '1234'\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9') == 1\nassert solution('11') == 2\nassert solution('19') == 4\nassert solution('91') == 9\nassert solution('125') == 17\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('149') == '17'\nassert solution('123476544') == '11112'\nassert solution('123456789') == '-1'\nassert solution('0') == '-1'\nassert solution('10000') == '10000'\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\") == '4'\nassert solution(\"149\") == '17'\nassert solution(\"123476544\") == '11112'"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('12') == '2'\nassert solution('12345') == '6'\nassert solution('1234567') == '-1'\nassert solution('11234567') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"4\"\n\"\"\""
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n\n\"\"\""
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0') == '-1'\nassert solution('1') == '1'\nassert solution('42') == '4'\nassert solution('123') == '6'\nassert solution('31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679') == '10'\n\n\"\"\"\n\nfrom typing import List, Tuple, Callable, Type, Union\nfrom operator import mul\nfrom functools import reduce\n\nfrom icontract import require, ensure, DBC\n\n\nclass Line:\n    def __init__(self, line: str) -> None:\n        self.line = line\n\n    def __repr__(self) -> str:\n        return repr(self.line)\n\n\n@require(lambda number: number > 0)\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"b 3\\ncab ccb\\ncccacbb\\nccaabbb\") == \"adcb\"\nassert solution(\"a 3\\nbcb\\nccc\\ndea\") == \"AMBIGUOUS\"\nassert solution(\"a 1\\nbcb\\nccc\\ndea\") == \"IMPOSSIBLE\"\nassert solution(\"a 2\\nabc\\nbca\\nccc\\ndea\") == \"AMBIGUOUS\"\n\n'''\n\nfrom itertools import combinations_with_replacement\n\nb = int(stdin[0].split()[1])\nlst = [list(combination) for combination in combinations_with_replacement([chr(i) for i in range(97, 97+b)], int(stdin[0].split()[0]))]\nfor i in range(1, int(stdin[1])+1):\n    if len(set(list(stdin[i])))!= b:\n        print(\"IMPOSSIBLE\")\n        break\n    elif any([list(stdin[i])[j] > list(stdin[i])[j+1] for j in range(len(list(stdin[i]))-1)]) or any([list(stdin[i])[j] == list(stdin[i])[j+1] for j in range(len(list(stdin[i]))-1)]):\n        print(\"AMBIGUOUS\")\n        break\n    else:\n        for i in range(len(lst)):\n            if list(stdin[i]) in lst[i]:\n                print(\"\".join(lst[i][lst[i].index(list(stdin[i]))]))\n                break\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('d 4\\ncab\\ncda\\nccc\\nbadca') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\nccc\\naca') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb') == 'AMBIGUOUS'\n\n---\n\n#####\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abcd') == 'dcaeb'\nassert solution('abc') == 'cba'\nassert solution('acb') == 'dcaeb'\nassert solution('aab') == 'dacb'\nassert solution('a') == 'dacb'\n\n\"\"\"\n\n\"\"\"\nsolution 2\n\"\"\"\n\nimport string\nimport re\n\nalphabet = ''.join(sorted(set(''.join(stdin.split('\\n')))))"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"dddff\") == \"AMBIGUOUS\"\nassert solution(\"dddcc\") == \"IMPOSSIBLE\"\nassert solution(\"ddcdd\") == \"AMBIGUOUS\"\nassert solution(\"dcccd\") == \"IMPOSSIBLE\"\nassert solution(\"dccce\") == \"IMPOSSIBLE\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('d 4\\ncab\\n cda\\nccc\\nbadca') == 'adcb'\nassert solution('c 4\\nabc\\n bca\\n cab\\naca') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\n cfb') == 'AMBIGUOUS'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"c 4\\ndea\\ncfb\\ncab\\naca\") == \"AMBIGUOUS\"\n\"\"\"\n\nd = {'a': '1', 'b': '2', 'c': '3', 'd': '4', 'e': '5', 'f': '6', 'g': '7', 'h': '8', 'i': '9', 'j': '10', 'k': '11', 'l': '12','m': '13', 'n': '14', 'o': '15', 'p': '16', 'q': '17', 'r': '18','s': '19', 't': '20', 'u': '21', 'v': '22', 'w': '23', 'x': '24', 'y': '25', 'z': '26'}\n\nL, N = stdin.split()\nL = d[L]\n\nstrings = []\nfor i in range(int(N)):\n    strings.append(stdin.split()[i])\n\narr = []\n\nfor string in strings:\n    for i in range(len(string)):\n        if string[i] == L:\n            arr.append(i)"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('d 4\\ncab\\ncda\\nccc\\nbadca') == 'adcb'\nassert solution('f 2\\ndea\\ncfb') == 'IMPOSSIBLE'\nassert solution('c 4\\nabc\\nbca\\ncaa\\ncca') == 'AMBIGUOUS'"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('d 4\\ncab\\ncda\\nccc\\nbadca') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\nccc\\naca') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb') == 'AMBIGUOUS'\n\"\"\"\n\nfrom collections import Counter\n\nclass Node:\n    def __init__(self, char):\n        self.char = char\n        self.children = {}\n        self.count = 0"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"d 4\\ncab\\ncda\\nccc\\nbadca\") == \"adcb\"\nassert solution(\"c 4\\ncab\\ncda\\nccc\\nbadca\") == \"IMPOSSIBLE\"\nassert solution(\"f 2\\ndea\\ncfb\") == \"AMBIGUOUS\"\nassert solution(\"d 4\\ncab\\ncda\\nccc\\nbadca\") == \"IMPOSSIBLE\"\nassert solution(\"d 4\\nabc\\nbca\\nccc\\nbadca\") == \"AMBIGUOUS\"\n\n-----Constraints-----\n\n$L \\leq \\texttt{z} \\leq 97$\n1 \\leq N \\leq 1000$\n0 \\leq $L$, $L + 1$ \\leq $\\texttt{z}$, $L \\leq \\texttt{z}$\nAll the strings in the list are unique.\nThe strings in the list are in lexicographical order.\n\n-----Test cases-----\n\nCase #1\n----\n\nd 4\ncab\ncda\nccc\nbadca\n\na b c d\n\nadcb\n\nadc\n\ncab\n\ndcb\n\ndca\n\ndc\n\n-----\nCase #2\n----\n\nc 4\nabc\nbca\ncab\naca\n\na b c d\n\nIMPOSSIBLE\n\nabc\n\nacb\n\ncab\n\ncba\n\ncad\n\ndca\n\ndc\n\ndac\n\ndcb\n\ndca\n\nd\n\ndab\n\nda\n\na\n\ndac\n\nadc\n\nacb\n\nbac\n\nbca\n\nb\n\nbb\n\nbac\n\ncab\n\ncba\n\nc\n\ncb\n\nacb\n\ncba\n\na\n\na\n\nacb\n\ncba\n\na\n\nb\n\ncb\n\nbb\n\nb\n\nb\n\nb\n\nc\n\nc\n\nc\n\na\n\na\n\nbc\n\ncb\n\ncc\n\nc\n\nd\n\na\n\na\n\nc\n\nc\n\nd\n\nd\n\nbc\n\ncb\n\nd\n\n-----\nCase #3\n----\n\nf 2\ndea\ncfb\n\na b\n\nIMPOSSIBLE\n\n-----\n\nCase #4\n----\n\nd 4\ncab\ncda\nccc\nbadca\n\na b c d\n\ndacb\n\ndac\n\ncab\n\ncba\n\ncad\n\ndca\n\ndc\n\ndcb\n\ndca\n\nd\n\ndab\n\nda\n\na\n\ndac\n\nadc\n\nacb\n\nbac\n\nbca\n\nbc\n\ncb\n\ncab\n\ncba\n\nc\n\nc\n\ndcb\n\ndca\n\nd\n\ndab\n\nda\n\na\n\ndac\n\nadc\n\nacb\n\nbac\n\nbca\n\nb\n\nbb\n\nbac\n\ncab\n\ncba\n\nc\n\nc\n\ndcb\n\ndca\n\nd\n\ndab\n\nda\n\na\n\ndac\n\nadc\n\nacb\n\nbac\n\nbca\n\nb\n\nbb\n\nbac\n\ncab\n\ncba\n\nc\n\nc\n\ndcb\n\ndcb\n\nc\n\ndc\n\ndcb\n\ndca\n\nd\n\ndab\n\nda\n\na\n\ndac\n\nadc\n\nacb\n\nbac\n\nbca\n\nb\n\nbb\n\nbac\n\ncab\n\ncba\n\nc\n\nc\n\ndcb\n\ndcb\n\nc\n\nd\n\ndac\n\ndac\n\ndac\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\ndca\n\nd"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"d 4\\ncab\\ncda\\nccc\\nbadca\") == \"adcb\"\nassert solution(\"c 4\\nabc\\nbca\\ncab\\naca\") == \"IMPOSSIBLE\"\nassert solution(\"f 2\\ndea\\ncfb\") == \"AMBIGUOUS\"\n\"\"\"\n\n\nimport collections\nimport functools\nimport itertools\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\n\"\"\"\n\n\nimport numpy as np\n\n_n = [int(i) for i in input().split()]\n_a, _b, _c = _n[0], _n[1], _n[2]\n_m = np.array([_a, _b, _c])\n_m.sort()\n_s = sum(_m)\n_t = _s // 3\nprint(_t)\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 3 3\") == 9\nassert solution(\"10 20 0 0\") == 10\nassert solution(\"100 20 543 12\") == 164\nassert solution(\"101 20 543 12\") == 164\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 3 3\") == 9\nassert solution(\"10 20 0 0\") == 10\nassert solution(\"100 20 543 12\") == 164"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(sys.stdin.read())) == str(sys.stdin.read())"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3 3\") == 9\nassert solution(\"10 20 0 0\") == 10\nassert solution(\"100 20 543 12\") == 164\n\"\"\"\n\n\"\"\"\nIn the previous task you are given an array of integers. You have to print the sum of the elements of the array.\n\nHowever, if any of the values in the array has a value greater than 10000, then it's sum value will be the maximum value possible (i.e. equal to 10000).\n\nNote: the array may not be empty.\n\nInput Format:\nThe first line of input contains an integer N, the size of the array.\nThe second line of input contains N integers, representing the array's elements.\n\nConstraints:\n1 <= N <= 100\n1 <= ar[i] <= 10000, for each valid i\n\nOutput Format:\nPrint the sum of the array's elements, minus the maximum value, modulo 10000.\n\nSample Input 0:\n5\n1 2 3 4 5\nSample Output 0:\n0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n\"\"\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'\n\"\"\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n\"\"\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'yes'\nassert solution('3\\n3\\n0\\n0\\n-1\\n1\\n1\\n1') == 'yes'\nassert solution('3\\n3\\n0\\n0\\n1\\n1\\n1\\n1') == 'no'\nassert solution('4\\n3\\n0\\n0\\n1\\n1\\n1\\n1') == 'yes'\nassert solution('5\\n3\\n0\\n0\\n1\\n1\\n1\\n1') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0') == 'yes'\nassert solution('4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12') == 'yes'\nassert solution('3 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2') == 'no'"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1, 2, 3) == \"yes\"\nassert solution(4, 2, 3) == \"yes\"\nassert solution(4, 2, 4) == \"no\"\n\n-----\n-----\n-----"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\\n') == 'yes'\nassert solution('4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n') == 'no'\n\"\"\"\n\nimport sys\n\ninputs = []\nfor line in sys.stdin:\n    inputs.append(line)\n\n\nn, m, r = inputs.pop(0).split()\nn, m, r = int(n), int(m), int(r)\nfor i in range(n):\n    x, y = inputs.pop(0).split()\n    x, y = int(x), int(y)\n    if x**2 + y**2 <= r**2:\n        print('yes')\n    else:\n        print('no')\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 3') == 'yes'\nassert solution('4 3 3') == 'no'\n\"\"\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"yes\"\n\n\"\"\""
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\\n\") == \"yes\"\nassert solution(\"4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n\") == \"yes\"\nassert solution(\"3 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n\") == \"yes\"\n\nprint(solution(\"3 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n\"))"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0') == 'yes'\nassert solution('4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n') == 'yes'\nassert solution('3 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n') == 'no'\n\n\"\"\"\n\nimport math\nimport typing\nimport unittest\n\n\nclass Point:\n    def __init__(self, x: float, y: float):\n        self.x = x\n        self.y = y\n\n    def __str__(self) -> str:\n        return f'Point({self.x}, {self.y})'\n\n\nclass Cake:\n    def __init__(self, center: Point, radius: float):\n        self.center = center\n        self.radius = radius\n\n    def __contains__(self, point: Point) -> bool:\n        return math.isclose(point.distance(self.center), self.radius)\n\n\nclass Cutter:\n    def __init__(self, x: int, y: int, a: int, b: int, c: int):\n        self.x = x\n        self.y = y\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __str__(self) -> str:\n        return f'({self.x}, {self.y}, {self.a}, {self.b}, {self.c})'\n\n\nclass CakeCutter:\n    def __init__(self, cutter: Cutter):\n        self.cutter = cutter\n\n    def __contains__(self, cake: Cake) -> bool:\n        x = cake.center.x\n        y = cake.center.y\n        a = self.cutter.a\n        b = self.cutter.b\n        c = self.cutter.c\n        return (\n            math.isclose(c, 0) and\n            math.isclose(b * x + a * y, 0) and\n            math.isclose(math.pow(x, 2) + math.pow(y, 2), math.pow(self.cutter.x, 2) + math.pow(self.cutter.y, 2))\n        )\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0'), 'yes')\n        self.assertEqual(solution('4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n'), 'yes')\n        self."
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 0\\n2 1 0\\n') == 'yes'\nassert solution('4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n') == 'yes'\nassert solution('3 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n') == 'no'"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(652526) == 4\n\"\"\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\n\n\"\"\""
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nassert sys.argv[1].isdigit()\n\nS = sys.argv[1]"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('652526') == 4\nassert solution('12121131221') == 7\nassert solution('123456789') == 1\nassert solution('1221') == 2\n\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"652526\") == 4\nassert solution(\"12121131221\") == 7\nassert solution(\"123456789\") == 1\n\"\"\""
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\""
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('652526') == 4\nprint(solution('652526'))\nassert solution('12121131221') == 7\nprint(solution('12121131221'))\nassert solution('123456789') == 1\nprint(solution('123456789'))\nassert solution('1111111111111111111111111') == 36\nprint(solution('1111111111111111111111111'))\nassert solution('121212121212121212121212') == 8\nprint(solution('121212121212121212121212'))\n"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\\n\") == \"0\"\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n\") == \"24\"\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n\") == \"800\"\n\nprint(solution(stdin))"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\") == \"0\"\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\") == \"24\"\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\") == \"800\""
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n4 5\n1 2\n1 3\n3 4\n1 4\n2 4\n\"\"\") == \"200\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\\n\") == \"0\"\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n\") == \"24\"\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n\") == \"800\"\n\nprint(solution(\"4 3\\n1\\n1 2\\n2 3\\n1 3\\n\"))\nprint(solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n\"))\nprint(solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n\"))\n"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\\n\") == 0\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n\") == 24\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n\") == 800\n\"\"\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1\\n1 2\\n2 3\\n1 3') == '0'\nassert solution('4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4') == '24'\nassert solution('6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6') == '800'\n\"\"\""
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4') == '24'\nassert solution('6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6') == '800'\n\n\"\"\""
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1\\n1 2\\n2 3\\n1 3') == '0'\nassert solution('4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4') == '24'\nassert solution('6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6') == '800'\n\n\"\"\"\nimport heapq"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1\\n1 2\\n2 3\\n1 3\") == 0\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\") == 24\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\") == 800\n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict, deque\nsys.setrecursionlimit(10000000)\n\nn, m = map(int, sys.stdin.readline().strip().split())\nvisit = [False] * (n + 1)\nadj = defaultdict(list)\nfor _ in range(m):\n    a, b = map(int, sys.stdin.readline().strip().split())\n    adj[a].append(b)\n    adj[b].append(a)\n\nres = 0\nvisit[1] = True\n"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6') == '800'"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 2 4\\n') == '1 4'\nassert solution('5\\n1 2 3 4 5\\n') == '1 2 3 4 5'\nassert solution('4\\n2 1 4 3\\n') == '-1'\n\"\"\""
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 2 4\\n\") == \"1 4\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\\n\") == \"1 2 3 4\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 2 4\\n\") == \"1 4\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\\n\") == \"1 2 3 4\"\n\"\"\""
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'4\\n1 3 2 4'\n) == '1 4'\nassert solution(\n'5\\n1 2 3 4 5'\n) == '1 2 3 4 5'\nassert solution(\n'4\\n2 1 4 3'\n) == '-1'"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 2 4\\n\") == \"1 4\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\\n\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 2 4\") == \"1 4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\") == \"1 2 3 4\""
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 2 4\") == \"1 4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\") == \"-1\"\nassert solution(\"5\\n2 1 4 3 5\") == \"1 2 3 4 5\"\n\n\"\"\""
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '4\\n'\n    '1 3 2 4'\n) == '1 4'\nassert solution(\n    '5\\n'\n    '1 2 3 4 5'\n) == '1 2 3 4 5'\nassert solution(\n    '4\\n'\n    '2 1 4 3'\n) == '-1'\nassert solution(\n    '3\\n'\n    '2 1 3'\n) == '-1'\nassert solution(\n    '2\\n'\n    '2 1'\n) == '-1'\n\nprint(\"Successfully solved Longest Increasing Subsequence (LIS) problem!\")\n"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 2 4') == '1 4'\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5'\nassert solution('4\\n2 1 4 3') == '-1'\n\n\"\"\"\n\nfrom typing import List\nimport sys"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 2 4\\n\") == '1 4'\nassert solution(\"5\\n1 2 3 4 5\\n\") == '1 2 3 4 5'\nassert solution(\"4\\n2 1 4 3\\n\") == '-1'\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"4 8\"\n) == \"8\"\nassert solution(\n    \"3 3\"\n) == \"1\"\nassert solution(\n    \"2 6\"\n) == \"5\"\n\n\"\"\""
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..\") == 8\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".#####\") == 5\n\"\"\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\".#####\") == 5\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..\") == \"8\"\nassert solution(\"3 3\\n...\\n.#.\\n...\\n\") == \"1\"\nassert solution(\"2 6\\n.#####\\n#####.\\n\") == \"5\"\n\n\"\"\"\n\nfrom operator import add, sub\nfrom functools import reduce\nfrom math import gcd"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..') == 8\n\"\"\"\n\nimport sys\n\ninputs = sys.stdin.readlines()\n\nfor input_ in inputs:\n    input_ = input_.replace('\\n', '')\n    print(input_)"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..') == 8\nassert solution('3 3\\n...\\n.#.\\n...') == 1\n\"\"\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..\") == 8\nassert solution(\"3 3\\n...\\n.#.\\n...\\n\") == 1\n\"\"\""
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..\") == \"8\"\nassert solution(\"3 3\\n...\\n.#.\\n...\\n\") == \"1\"\nassert solution(\"2 6\\n.#####\\n#####.\\n\") == \"5\"\nprint(\"All cases passed\")\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..\") == \"8\"\nassert solution(\"3 3\\n...\\n.#.\\n...\\n\") == \"1\"\nassert solution(\"2 6\\n.#####\\n#####.\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == '6\\n19 12 2 18 5 5'\n\"\"\"\n\nimport sys\nfrom collections import deque\n\ntest_cases = int(sys.stdin.readline())"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\"\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\") == \"4\"\n\n-----Notes-----\nThe board is represented by a two-dimensional array of integers.\n\"\"\""
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\"\nassert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\"\nassert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\\n19 12 2 18 5 5\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\\n\") == \"-1\""
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1') == '6\\n19 12 2 18 5 5'\nassert solution('3 3 3\\n3 1 1\\n1 3 2\\n3 2 3') == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('3 2 2\\n1 2\\n2 1\\n1 2\\n') == '-1'\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == '6\\n19 12 2 18 5 5'\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\") == '-1'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '-1'\nassert solution('1 2') == '2'\nassert solution('1 2\\n2 1') == '2'\nassert solution('1 2\\n2 1\\n1 2') == '2'\nassert solution('1 2\\n2 1\\n1 2\\n2 1') == '2'\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\\n19 12 2 18 5 5\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\") == \"3\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\") == \"3\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\n\"\"\"\n\n\"\"\"\nimport sys\nfrom typing import List\n\nn, m, p = [int(i) for i in sys.stdin.readline().split()]\nnumbers = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1''') == '''6\n19 12 2 18 5 5\n'''\nassert solution('''3 3 3\n3 1 1\n1 3 2\n3 2 3''') == '''13\n4 2 6 1 9 7 5 5 7 1 2 3 3\n'''\nassert solution('''3 2 2\n1 2\n2 1\n1 2\n''') == '''-1\n'''\n\nprint(solution(input()))\n"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\\n19 12 2 18 5 5\"\nassert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\nassert solution(\"3 2 2\\n1 2\\n2 1\\n1 2\") == \"-1\"\n\n-----Challenge-----\nThe solution to this problem must use the least amount of memory possible, up to the limits of the implementation.\n\"\"\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n\") == '5 1'\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\\n\") == '1 5'\nassert solution(\"4\\n1\\n5\\n3\\n6\\n1\\n2\\n3\\n4\\n\") == '3 2'\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n\") == \"5 1\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\\n\") == \"1 5\"\nassert solution(\"4\\n1\\n5\\n3\\n6\\n1\\n2\\n3\\n\") == \"3 2\"\n\n\"\"\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\") == '5 1'\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\") == '1 5'\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\") == '3 2'\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\nmaps = {}\n\nfor i in range(n):\n    maps[i] = []\n\nfor i in range(n-1):\n    a, b = map(int, sys.stdin.readline().strip().split(' '))\n    maps[a].append(b)\n    maps[b].append(a)\n\ncnt = {}"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '0 0'\nassert solution('\\n\\n') == '0 0'\nassert solution('\\n\\n\\n') == '0 0'\n\nassert solution('\\n\\n1\\n0') == '1 1'\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\") == \"5 1\"\n\nassert solution(\"4\\n1\\n5\\n3\\n6\\n1\\n2\\n3\\n4\") == \"1 5\"\n\nassert solution(\"5\\n1\\n5\\n3\\n6\\n1\\n2\\n3\\n4\") == \"3 2\"\n\n\"\"\"\n\n\nimport sys\nfrom collections import deque\n\nfrom typing import List, Deque\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n\") == \"5 1\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\\n\") == \"1 5\"\nassert solution(\"4\\n1\\n5\\n3\\n6\\n1\\n2\\n3\\n\") == \"3 2\"\n\n\"\"\""
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\") == \"5 1\"\n\"\"\"\n\nfrom collections import deque\n\nclass Node:\n    def __init__(self, label, parent=None):\n        self.label = label\n        self.parent = parent"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\\n\") == \"5 1\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n3\n3\n3\n3\n3\n1\n2\n3\n4\n''') == '5 1'\nassert solution('''5\n4\n3\n2\n1\n0\n1\n2\n3\n4\n''') == '1 5'\nassert solution('''4\n1\n5\n3\n6\n1\n2\n3\n''') == '3 2'\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\") == \"5 1\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n0\\n1\\n2\\n3\\n4\") == \"1 5\"\n\"\"\""
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\\n1 1\\n2 1\") == \"5\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4') == '1'\nassert solution('5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4') == '5'\nassert solution('6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1') == '5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == \"1\"\nassert solution(\"5\\n3 0\\n3 1\\n2 2\\n1 3\\n0 4\") == \"5\"\nassert solution(\"6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\") == \"5\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == \"1\"\nassert solution(\"5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4\") == \"5\"\nassert solution(\"6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == \"5\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == \"1\"\nassert solution(\"5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4\") == \"5\"\nassert solution(\"6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\") == \"5\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n3 0\n3 1\n3 2\n3 3\n3 4\n''') == '1'\n\nassert solution('''6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n''') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == '1'\nassert solution(\"5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4\") == '5'\nassert solution(\"6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\") == '5'\n\"\"\"\n\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def solve(self, root: str) -> str:\n        def dfs(node: str) -> None:\n            if node == 0:\n                return\n            \n            parent = node_to_parent[node]\n            dfs(parent)\n            \n            max_parent = max(children[parent], key=lambda child: values[child])\n            \n            if values[max_parent] < values[node]:\n                values[node] = values[max_parent] + 1\n        \n        def bfs(root: str) -> None:\n            queue = deque([root])\n            \n            while queue:\n                node = queue.popleft()\n                if node == 0:\n                    continue\n                \n                for child in children[node]:\n                    queue.append(child)\n            \n        n = int(root)\n        values = [0] * (n + 1)\n        node_to_parent = {i: parent for i, parent in enumerate(stdin[1:].split())}\n        children = defaultdict(list)\n        for i in range(1, n + 1):\n            children[node_to_parent[i]].append(i)\n        bfs(1)\n        dfs(1)\n        \n        return max(values)\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == \"5\"\nassert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\") == \"5\"\nassert solution(\"6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == \"5\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4') == '1'\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom typing import Dict, Deque\n\nclass Node:\n    def __init__(self, value, parent=None):\n        self.value = value\n        self.parent = parent\n        self.children = []\n        \nclass Tree:\n    def __init__(self, n):\n        self.n = n\n        self.root = Node(1, None)\n        self.nodes = {1: self.root}\n        self.in_degree = defaultdict(int)\n        self.out_degree = defaultdict(int)\n        \n    def add_edge(self, parent, child):\n        self.out_degree[parent] += 1\n        self.in_degree[child] += 1\n        self.nodes[child].parent = self.nodes[parent]\n        self.nodes[parent].children.append(self.nodes[child])\n    \n    def check_root(self, root):\n        if root.parent:\n            return False\n        return True\n        \n    def find_root(self):\n        for child in self.nodes:\n            if not self.nodes[child].parent:\n                self.nodes[child].parent = self.nodes[child]\n                return self.nodes[child]\n        return None\n        \n    def _build_queue(self, node):\n        queue = deque()\n        for child in node.children:\n            queue.append(child)\n            if not child.parent:\n                return queue\n        return queue\n    \n    def build_heap(self):\n        queue = deque()\n        queue.append(self.root)\n        while queue:\n            node = queue.pop()\n            for child in node.children:\n                queue.append(child)\n        return True\n        \n    def traverse_all_paths(self, root, n):\n        queue = deque()\n        queue.append((root, [root]))\n        while queue:\n            node, path = queue.pop()\n            for child in node.children:\n                new_path = path + [child]\n                queue.append((child, new_path))\n            if len(path) == n:\n                yield path\n\nclass Solution:\n    def find_longest_path(self, tree: Tree, n: int) -> int:\n        if tree.n == 1:\n            return 1\n        elif tree.n <= 2:\n            return 2\n        else:\n            longest_path = 0\n            for root in tree.nodes:\n                if tree.nodes[root].value == 1:\n                    queue = tree._build_queue(tree.nodes[root])\n                    while queue:\n                        node = queue.popleft()\n                        for child in node.children:\n                            if child.value == 1:\n                                if child.parent.value == 1:\n                                    longest_path = max(longest_path, len(tree.traverse_all_paths(child, n)))\n                                    break\n                            else:\n                                queue.append(child)\n            return longest_path\n            \n"
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4') == '1'\n\nassert solution('5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4') == '5'\n\nassert solution('6\\n3 0\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1') == '5'\n\n-----Explanation-----\n\nSample Input 1:\nA graph is a collection of connected nodes, which are labeled with integers. Each node is associated with a value $v_ i$, and a parent node. The root is labeled $1$, and there are no other nodes with parents.\n\nThe graph is represented as a list of lists of lists.\n\nEvery node of the graph has two parts:\n\n1. A value $v_ i$\n2. A parent node $p_ i$\n\nGiven a graph, you can compute the value of every node by:\n\n$$v_i = v_{i-1} + d_i$$\nwhere $d_i$ is the distance from $i$ to $p_i$. For example, the value of node $3$ is $v_3 = v_2 + d_3 = v_1 + 1 = 3$.\n\nYou can compute the parent node of a node $i$ by\n\n$$p_i = i // 2$$\n\nYou can build a heap from a graph. The following steps will build a heap from the graph given in Sample Input 1:\n\nThe graph will be represented as a list of lists of lists.\n\nStep 1: You can start at the root node $1$, which has no parent.\n\nStep 2: Let $p_1 = 1$.\n\nStep 3: The value of the node $1$ is $v_1 = 3$.\n\nStep 4: The parent of the node $1$ is $1 = 1 // 2 = 0$.\n\nStep 5: The value of the node $0$ is $v_0 = v_1 + d_0 = 3 + 1 = 4$.\n\nStep 6: The parent of the node $0$ is $0 = 0 // 2 = 0$.\n\nStep 7: The value of the node $0$ is $v_0 = v_0 + d_0 = 4 + 1 = 5$.\n\nStep 8: The parent of the node $0$ is $0 = 0 // 2 = 0$.\n\nStep 9: The value of the node $0$ is $v_0 = v_0 + d_0 = 5 + 1 = 6$.\n\nNote that the parents of the nodes $0$, $1$, and $2$ are $0$, $0$, and $1$, respectively.\n\nSo, you have constructed a heap with seven nodes:\n\n1. The root node $1$, with value $v_1 = 3$ and parent $0$.\n\n2. The node $0$, with value $v_0 = 6$ and parent $0$.\n\n3. The node $1$, with value $v_1 = 4$ and parent $0$.\n\n4. The node $2$, with value $v_2 = 5$ and parent $1$.\n\n5. The node $3$, with value $v_3 = 3$ and parent $2$.\n\n6. The node $4$, with value $v_4 = 5$ and parent $2$.\n\n7. The node $5$, with value $v_5 = 4$ and parent $3$.\n\nIn total, there are $7$ nodes in the heap.\n\nStep 10: You have a heap of nodes:\n\n1. The root node $1$, with value $v_1 = 3$ and parent $0$.\n\n2. The node $0$, with value $v_0 = 6$ and parent $0$.\n\n3. The node $1$, with value $v_1 = 4$ and parent $0$.\n\n4. The node $2$, with value $v_2 = 5$ and parent $1$.\n\n5. The node $3$, with value $v_3 = 3$ and parent $2$.\n\n6. The node $4$, with value $v_4 = 5$ and parent $2$.\n\n7. The node $5$, with value $v_5 = 4$ and parent $3$.\n\nNow, you can start with the root node $1$ and turn it into a heap by performing the following steps:\n\n1. The node $1$ is not a leaf.\n\n2. You can find the parent of the node $1$ by dividing it by 2. The parent is $1 // 2 = 0$.\n\n3. The value of the node $1$ is $v_1 = 3$ and parent $0$.\n\n4. You can find the parent of the node $1$ by dividing it by 2. The parent is $1 // 2 = 0$.\n\n5. The value of the node $1$ is $v_1 = 3 + d_1 = v_0 + 1 = 6$.\n\n6. The parent of the node $1$ is $1 // 2 = 0$.\n\n7. The value of the node $1$ is $v_1 = v_1 + d_1 = 6 + 1 = 7$.\n\nThe resulting heap looks like this:\n\n1. The root node $1$, with value $v_1 = 3$ and parent $0$.\n\n2. The node $0$, with value $v_0 = 6$ and parent $0$.\n\n3. The node $1$, with value $v_1 = 7$ and parent $0$.\n\n4. The node $2$, with value $v_2 = 5$ and parent $1$.\n\n5. The node $3$, with value $v_3 = 3$ and parent $2$.\n\n6. The node $4$, with value $v_4 = 5$ and parent $2$.\n\n7. The node $5$, with value $v_5 = 4$ and parent $3$.\n\nSo, you have constructed a heap with $7$ nodes.\n\nStep 11: The maximum number of nodes you can choose from the graph is the number of nodes in a tree: $n = n-1+1 = 6$.\n\nStep 12: Therefore, the maximum number of nodes you can choose is $7$.\n\nFinally, your program should print the number of nodes in the heap: $7$.\n\nSample Input 2:\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\nSample Output 2:\n6\n\nSample Input 3:\n6\n3 0\n1 1\n2 1\n3 1"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == '4\\n3\\n4\\n5\\n6\\n'\nassert solution(\"8\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1\") == '0\\n1\\n2\\n3\\n5\\n6\\n'\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == '5\\n1\\n2\\n3\\n6\\n7\\n'\n\"\"\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2') == '4\\n3\\n4\\n5\\n6\\n7'\nassert solution('9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2') == '5\\n1\\n2\\n3\\n6\\n7'\nassert solution('8\\n1 1 1\\n2 2 1\\n3 3 1\\n4 4 1\\n5 5 5\\n6 6 2\\n7 7 1\\n8 8 2') == '0\\n'\nassert solution('8\\n1 2 2\\n2 3 2\\n3 4 1\\n4 5 3\\n5 6 1\\n6 7 1\\n7 8 1') == '0\\n'\nassert solution('8\\n1 2 2\\n2 3 2\\n3 4 1\\n4 5 3\\n5 6 2\\n6 7 1\\n7 8 2') == '5\\n1\\n2\\n3\\n6\\n7'\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"4\\n3\\n4\\n5\\n6\\n7\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == \"5\\n1\\n2\\n3\\n6\\n7\"\n\"\"\""
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"4\\n3\\n4\\n5\\n6\\n\"\n\n\"\"\"\n\nfrom math import ceil, log"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"4\\n3\\n4\\n5\\n6\\n7\"\nassert solution(\"8\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1\") == \"0\\n1\\n2\\n3\\n6\\n7\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == \"5\\n1\\n2\\n3\\n6\\n7\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == '4\\n3\\n4\\n5\\n6'\nassert solution(\"8\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1\") == '0\\n1\\n2\\n3\\n6'\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\") == '5\\n1\\n2\\n3\\n6\\n7'\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '0'\nassert solution('1\\n2\\n2\\n3\\n3\\n4\\n5\\n') == '4'\nassert solution('1\\n3\\n1\\n2\\n2\\n') == '0'\nassert solution('2\\n3\\n3\\n2\\n3\\n1\\n2\\n') == '1'\nassert solution('4\\n1\\n1\\n3\\n2\\n3\\n2\\n') == '2'\n\n'''\nThe Problem\n\nIt's your job to find the set of good nodes in a graph.\n\nYou're given a tree graph with $n$ nodes and $n-1$ edges, in which each edge has an integer representing the color of the edge. Your task is to find the number of good nodes in the graph.\n\nA good node is a node which is not adjacent to any node with the same color as it. A node is adjacent to another node with color $c$ if there is an edge connecting the nodes with color $c$. \n\nInput Format\n\nThe first line contains an integer $n$, denoting the number of nodes in the graph.\n\nEach of the following $n-1$ lines contains three space-separated integers $a_ i$, $b_ i$, and $c_ i$, denoting the color of an edge connecting the nodes $a_ i$ and $b_ i$ with each other.\n\nIt is guaranteed that each of these edges exists in the graph.\n\nOutput Format\n\nFirst, print the number of good nodes in the graph.\n\nEach of the following $k$ lines contains one integer, which is the index of a good node.\n\nConstraints\n\n\n    The number of nodes in the graph is at most 50000.\n    The number of edges in the graph is at most 1000000.\n    It is guaranteed that there is exactly one good node.\n\nSample Input\n\n4\n1 2 1\n2 3 1\n3 4 2\n1 4 5\nSample Output\n\n1\n\nExplanation\n\nNode 1 is colored differently than itself, so it is good.\n\nNode 2 is colored the same as the node to which it is connected, so it is not good.\n\nNode 3 is colored differently than the node to which it is connected, so it is good.\n\nNode 4 is colored differently than the node to which it is connected, so it is good.\n\n'''"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1') == '0\\n1\\n2\\n3\\n6\\n7'\nassert solution('8\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1') == '5\\n1\\n2\\n3\\n6\\n7'\nassert solution('8\\n1 3 2\\n1 4 2\\n2 5 2\\n3 6 2\\n4 7 3\\n5 8 3\\n6 9 2\\n7 10 1\\n') == '4\\n1\\n2\\n3\\n6\\n7'\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1') == '5\\n1\\n2\\n3\\n6\\n7'\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\\n\") == \"4\\n3\\n4\\n5\\n6\\n\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\\n\") == \"5\\n1\\n2\\n3\\n6\\n7\\n\"\nassert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\\n\") == \"0\\n\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\\n\") == \"5\\n1\\n2\\n3\\n6\\n7\\n\"\n\nprint(solution(\"8\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\\n\"))\nprint(solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\\n\"))\n\"\"\"\n\"\"\"\nGiven a tree with n vertices, you are tasked with finding all the good vertices.\n\nGood vertices are vertices that every simple path with that vertex as one of its endpoints is a rainbow path.\n\nA simple path is a path that does not repeat any vertex or edge.\n\nA rainbow path is a simple path where every edge has a different color.\n\nGiven a tree with n vertices and an array of n edges, return all the good vertices in the order they appear in the array.\n\nExample 1:\n\nInput:\nn = 5, edges = [[1,2],[1,3],[1,4],[2,3],[2,5],[3,4],[3,5],[4,5]]\n\nOutput:\n[1, 2, 3, 4]\n\nExplanation:\nThere is only one simple path with endpoints 1 and 4: 1 -> 2 -> 3 -> 4.\nThere are three simple paths with endpoints 1 and 3: 1 -> 2 -> 3 and 1 -> 2 -> 4.\nThere are two simple paths with endpoints 2 and 4: 1 -> 2 -> 3 and 2 -> 3 -> 4.\nAll other simple paths have repeated vertices or edges.\nExample 2:\n\nInput:\nn = 4, edges = [[1,2],[1,3],[2,4],[2,3]]\n\nOutput:\n[1, 2, 3, 4]\n\nExplanation:\nAll simple paths are good: 1 -> 2 -> 3 -> 4, 1 -> 3 -> 2 -> 4.\n\"\"\"\n\nimport collections\n\nclass Solution:\n    def findGoodNodes(self, n, edges):\n        graph = collections.defaultdict(list)\n        for e in edges:\n            graph[e[0]].append(e[1])\n            graph[e[1]].append(e[0])\n\n        def dfs(start, color, visited, path):\n            if start in path:\n                return False\n            if start in visited:\n                return True\n            path.add(start)\n            for e in graph[start]:\n                if color[e] == color[start]:\n                    return False\n                if not dfs(e, color, visited, path):\n                    return False\n            path.discard(start)\n            return True\n\n        color = collections.defaultdict(int)\n        for i in range(1, n + 1):\n            if not dfs(i, color, set(), set()):\n                return []\n        return sorted(list(color.keys()))\n\n\n    def findGoodNodes_2(self, n, edges):\n        graph = collections.defaultdict(list)\n        for e in edges:\n            graph[e[0]].append(e[1])\n            graph[e[1]].append(e[0])\n        \n        def dfs(i, color, visited, path):\n            if i in path:\n                return False\n            if i in visited:\n                return True\n            path.add(i)\n            for e in graph[i]:\n                if color[e] == color[i]:\n                    return False\n                if not dfs(e, color, visited, path):\n                    return False\n            path.discard(i)\n            return True\n        \n        color = collections.defaultdict(int)\n        for i in range(1, n + 1):\n            if not dfs(i, color, set(), set()):\n                return []\n        return sorted(list(color.keys()))"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"6\"\nassert solution(\"1 2\\nR10 V1 V2 V1 E\") == \"30\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2\\nV1 V2 V1 V1 V2') == '5'\nassert solution('2 1\\nV1 V2 V1 V1 V2') == '6'\nassert solution('1 2\\nR10 V1 V2 V1 E') == '30'\n\n\"\"\"\nimport sys\nfrom typing import List, Dict, Tuple, Set, Union\nfrom collections import defaultdict"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"6\"\nassert solution(\"1 2\\nR10 V1 V2 V1 E\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"1 2\\nR10 V1 V2 V1 E\") == \"6\"\nassert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"6\"\nassert solution(\"1 2\\nV1 V2 V1 V1 V2 V1 V2 V1 V1 V2 V1 E\") == \"8\"\n\nprint(solution(stdin))"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\\n\") == \"5\"\nassert solution(\"1 2\\nV1 V2 V1 V1 V2\\n\") == \"6\"\n\n\"\"\"\n\nfrom enum import Enum\nfrom collections import namedtuple\nfrom collections import deque\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import OrderedDict\nfrom itertools import groupby"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == '5'\nassert solution(\"2 1\\nV1 V2 V1 V1 V2\") == '6'\nassert solution(\"1 2\\nR10 V1 V2 V1 E\") == '30'\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\\n\") == \"5\"\nassert solution(\"1 2\\nV1 V2 V1 V1 V2\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"1 2\\nR10 V1 V2 V1 E\") == \"30\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"1 2\\nR10 V1 V2 V1 E\") == \"30\"\n\"\"\""
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"2 1\\nV1 V2 V1 V1 V2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n\"\"\""
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 24\\n') == '38'\nassert solution('10 11\\n') == 'impossible'\nassert solution('9 216\\n') == '546'\n\"\"\"\nimport math\n\nBASE, NUM = map(int, input().split())\n\nbase = BASE"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n\"\"\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n\n\"\"\""
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\nprint('Test pass.')"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"9 216\") == \"546\"\nassert solution(\"10 11\") == \"impossible\"\n\nprint(\"Passed!\")\n\n\"\"\"\n\nfrom math import log10\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 24') == '38'\nassert solution('9 216') == '546'\nassert solution('10 11') == 'impossible'\n\"\"\""
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\""
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n\n\"\"\""
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\") == \"466.662\"\n\"\"\"\n\nimport math\n\nd, t, c, r = map(int, input().split())\n\nclouds = []\nfor i in range(c):\n    s, e, p, a = map(int, input().split())\n    clouds.append((s, e, p, a))"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\") == \"466.662\"\nassert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\") == \"10.00005\"\n\n###"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10''') == '466.662'\n\"\"\""
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\") == \"466.662\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\") == '466.662'\nassert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\") == '10.00005'\nassert solution(\"1 2\\n0 2 0.25 8\") == '2.0'\n\"\"\""
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\") == \"466.662\"\n\nassert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\") == \"10.00005\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 1 0\\n0 2 0.25 8\\n') == '2.0'\nassert solution('3 4 1 0\\n1 3 0.25 8\\n') == '10.00005'\n\"\"\""
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\") == \"466.662\"\nassert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\") == \"10.00005\"\n\"\"\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\") == '466.662'\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Callable\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nZIP_START, ZIP_STOP, T = int, int, int\nCLOUD = Tuple[ZIP_START, ZIP_STOP, float, float]\nROOF = Tuple[int, int]\n\nINPUT_FILE = \"input.txt\""
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 2 1\\n0 2 0.25 8\\n2 4 0.66667 15\\n1 2\") == \"10.00005\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0\") == \"1.500000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0') == '1.500000000000000'\n\nassert solution('2\\nblue red 1.0\\nred pink 1.5') == '0.000000000000000'\n\nassert solution('4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9') == '10.000000000000000'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0') == '1.500000000000000'\nassert solution('2\\nblue red 1.0\\nred pink 1.5') == '0.000000000000000'\nassert solution('4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9') == '10.000000000000000'\n\n\"\"\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\nblue pink 1.0\nred pink 1.5\nblue red 1.0''') == '1.500000000000000'\nassert solution('''2\nblue red 1.0\nred pink 1.5''') == '0.000000000000000'\nassert solution('''4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9''') == '10.000000000000000'\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n3\nblue pink 1.0\nred pink 1.5\nblue red 1.0\n''') == '1.500000000000000'\n\nassert solution('''\n2\nblue red 1.0\nred pink 1.5\n''') == '0.000000000000000'\n\nassert solution('''\n4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nblue pink 1.0\\nred pink 1.5\") == \"1.5\"\nassert solution(\"2\\nblue red 1.0\\nred pink 1.5\") == \"0.0\"\nassert solution(\"4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9\") == \"10.0\"\n\n\"\"\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0') == '1.500000000000000'\n\n\"\"\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0') == '1.500000000000000'\nassert solution('2\\nblue red 1.0\\nred pink 1.5') == '0.000000000000000'\nassert solution('4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9') == '10.000000000000000'\n\"\"\""
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0\") == \"1.500000000000000\"\nassert solution(\"2\\nblue red 1.0\\nred pink 1.5\") == \"0.000000000000000\"\nassert solution(\"4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9\") == \"10.000000000000000\"\n\"\"\""
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\") == \"180\"\nassert solution(\"3 2 2 1 1\\n2 3 2\\n1 1\\n1 2\\n1 2\\n1 3\") == \"22\"\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\") == \"180\"\nassert solution(\"3 2 2 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\") == \"22\"\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\") == \"0\""
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n\") == '180'\n\"\"\"\n\nimport sys\nimport itertools\n\nsys.setrecursionlimit(10 ** 9)"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n\"\"\"\n) == '180'\n\n\"\"\"\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\n\"\"\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\") == \"180\"\nassert solution(\"3 2 2 1 1\\n2 3 2\\n1 1\\n1 2\\n1 2\\n1 3\") == \"22\"\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n\") == \"0\"\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n1 1\\n1 2\\n1 2\\n1 3\") == \"too many\""
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n\"\"\") == \"180\"\nassert solution(\"\"\"\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n\"\"\") == \"22\"\nassert solution(\"\"\"\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\n\"\"\") == \"0\"\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n3 1 2 3\\n3 1 2 3\\n2 1\\n1 1\\n1 2\\n1 2\\n1 3\") == '22'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6''') == '180'\nassert solution('''3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3''') == '22'\nassert solution('''3 1 1 1 1\n5 5 5''') == '0'\n\nprint(solution(input()))\n\n-----Solution-----\n\nfrom collections import Counter, defaultdict\nfrom functools import lru_cache\n\nlines = list(map(lambda x: x.split(' '), input().split('\\n')))\n\nr = int(lines[0][0])\ns = int(lines[0][1])\nm = int(lines[0][2])\nd = int(lines[0][3])\nn = int(lines[0][4])\n\ningredients = Counter(map(int, lines[1]))"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n3 3 4 5\") == '180'\nassert solution(\"3 2 2 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n3 3 4 5\") == '0'\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n3 3 4 5\") == '22'\n\"\"\"\n\nfrom collections import Counter\n\nclass Solution:\n    def getMaxLines(self, starter: int, main: int, dessert: int) -> int:\n        return starter + main + dessert\n\n    def solution(self, stdin: str) -> str:\n        r, s, m, d, n = list(map(int, stdin.split()))\n        s_brands = Counter(list(map(int, stdin.split()[1:])))\n        m_brands = Counter(list(map(int, stdin.split('\\n')[s+m:])))\n        d_brands = Counter(list(map(int, stdin.split('\\n')[s+m+d:])))\n        dishes = dict()\n        for dish in stdin.split('\\n')[:s]:\n            lines = dish.split()\n            k, brs = int(lines[0]), list(map(int, lines[1:]))\n            dishes[k] = brs\n        for dish in stdin.split('\\n')[s:s+m]:\n            lines = dish.split()\n            k, brs = int(lines[0]), list(map(int, lines[1:]))\n            dishes[k] = brs\n        for dish in stdin.split('\\n')[s+m:s+m+d]:\n            lines = dish.split()\n            k, brs = int(lines[0]), list(map(int, lines[1:]))\n            dishes[k] = brs\n        \n        dishes_t = dict()\n        for k, brs in dishes.items():\n            dishes_t[k] = list()\n            for br in brs:\n                dishes_t[k].append(br)\n        dishes_t = dishes_t.values()\n        \n        # \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n        max_lines = 10 ** 18\n        total = 0\n        for i in range(n):\n            for k, v in dishes_t:\n                if k == i:\n                    total += 1\n                    continue\n                if set(v).intersection(set(dishes_t[i])):\n                    total += 1\n        if total < max_lines:\n            return str(total)\n        else:\n            return \"too many\""
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\\n3 3 4 5\") == '180'\nassert solution(\"3 2 2 1 1\\n2 3 2\\n1 1\\n1 2\\n1 2\\n1 3\") == '22'\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n\") == '0'\n\n\"\"\"\n\nfrom collections import defaultdict\n\nr, s, m, d, n = [int(n) for n in stdin.split()]\nbrands = defaultdict(lambda: defaultdict(int))\n\nfor i in range(r):\n    num_brands = int(stdin.readline())\n    for j in range(num_brands):\n        brands[i][stdin.readline().rstrip()] += 1\n\nprint(brands)\n\ns_list = []\nfor i in range(s):\n    num_ingredients, *ingredients = [int(n) for n in stdin.readline().split()]\n    s_list.append(ingredients)\n\nm_list = []\nfor i in range(m):\n    num_ingredients, *ingredients = [int(n) for n in stdin.readline().split()]\n    m_list.append(ingredients)\n\nd_list = []\nfor i in range(d):\n    num_ingredients, *ingredients = [int(n) for n in stdin.readline().split()]\n    d_list.append(ingredients)\n\nfor n in range(n):\n    num_incompatible_dishes = int(stdin.readline())\n    for i in range(num_incompatible_dishes):\n        dish_1, dish_2 = [int(n) for n in stdin.readline().split()]\n        for j in range(r):\n            if s_list[dish_1-1][j] + m_list[dish_2-1][j] <= brands[j][stdin.readline().rstrip()]:\n                break\n        else:\n            continue\n        break\n    else:\n        print(10**18)\n        return\nprint(10**18 - (i+1))\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".#.\\n..#\\n#.#\\n\") == \"0 0\"\nassert solution(\".##.\\n#..#\\n##..\") == \"0 1\"\nassert solution(\".####\\n....#\\n#####\\n....#\\n#####\\n....#\\n#####\") == \"1 3\"\nassert solution(\".####\\n....#\\n#####\\n....#\\n#####\\n....#\\n#####\") == \"1 4\"\nassert solution(\".####\\n....#\\n#####\\n....#\\n#####\\n....#\\n#####\") == \"2 5\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\\n\") == '17 17'\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\") == \"17 17\""
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".#.\\n..#\\n###\") == (2, 2)\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"20 20\"\nassert solution(\"6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nup 2\\nright 2\") == \"17 17\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\") == \"-1 -1\"\nassert solution(\"1 1 1\\n.\\n.\\n.\\nup 1\") == \"-1 -1\"\n\n\"\"\""
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"20 20\"\nassert solution(\"6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\") == \"17 17\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\") == \"-1 -1\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\") == \"1 1\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\") == \"0 0\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\") == \"17 17\"\n\n\"\"\"\n\nimport pytest\n\n@pytest.mark.parametrize(\"stdin,expected\", [\n    (\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\", \"17 17\"),\n    (\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\", \"20 20\"),\n    (\"6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\", \"17 17\")\n])\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(sample_input_1)) == str(sample_output_1)\nassert solution(str(sample_input_2)) == str(sample_output_2)\nassert solution(str(sample_input_3)) == str(sample_output_3)\nprint(solution(input()))\n\n* The first input has $h=6$, $w=8$ and $n=5$; $h=3,w=6,n=2$ in the second input.\n* The first output has $h=2,w=4$ and $n=2$; $h=1,w=3,n=1$ in the second output.\n\n* The third input has $h=3$, $w=3$ and $n=2$; $h=1,w=2,n=1$ in the second output.\n* The third output has $h=2,w=2$ and $n=1$; $h=1,w=1,n=0$ in the second output.\n\n* The fourth input has $h=1$, $w=1$ and $n=0$; $h=0,w=0,n=-1$ in the second output.\n* The fourth output has $h=0,w=0$ and $n=-1$; $h=-1,w=-1,n=-2$ in the second output.\n\nassert solution(str(sample_input_1)) == str(sample_output_1)\nassert solution(str(sample_input_2)) == str(sample_output_2)\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == 'impossible'\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == '300'\n\"\"\""
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('371\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == 'impossible'\nassert solution('310\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == '300'\n\"\"\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('231\\n2\\n2 20 35\\n2 88 200') == '88'\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('371\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == 'impossible'\nassert solution('310\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == '300'\nassert solution('90\\n2\\n2 20 35\\n2 88 200') == '88'\n\"\"\"\n\nfrom collections import defaultdict, Counter\nfrom functools import reduce"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\nassert solution(\"90\\n2\\n2 20 35\\n2 88 200\") == \"88\"\n\"\"\"\n\nB = int(stdin.readline().split()[0])\n\nK = int(stdin.readline().split()[0])\n\nPACKS = [list(map(int, line.split())) for line in stdin.readlines()[:K]]\n\nmin_pack = None\nmin_pack_price = B\n\nfor pack_price, *pack in PACKS:\n    pack = sorted(pack, reverse=True)\n    total_price = 0\n    total_pack = 0\n    for item_price, item_amount in zip(pack, range(len(pack))):\n        total_price += item_price * item_amount\n        total_pack += item_amount\n        if total_price >= B:\n            if min_pack is None:\n                min_pack = total_pack\n                min_pack_price = total_price\n            else:\n                min_pack = min(min_pack, total_pack)\n                min_pack_price = min(min_pack_price, total_price)\n            break"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"300\"\n\n\"\"\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == 'impossible'\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == '300'\nassert solution(\"90\\n2\\n2 20 35\\n2 88 200\") == '88'\nassert solution(\"90\\n2\\n2 20 35\\n2 88 200\\n2\") == 'impossible'\nassert solution(\"90\\n2\\n2 20 35\\n2 88 200\\n2\\n2 20 35\\n2 88 200\\n2\\n2 20 35\\n2 88 200\") == '88'\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == 'impossible'\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == '300'\nassert solution(\"90\\n2\\n2 20 35\\n2 88 200\") == '88'\n\"\"\""
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3\\n2 40 65\\n2 100 150\\n2 300 320\\n') == '300'\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport math"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"371\\n3\\n2 40 65\\n2 100 150\\n2 300 320\\n\") == 'impossible'\nassert solution(\"310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\\n\") == '300'\nassert solution(\"90\\n2\\n2 20 35\\n2 88 200\\n\") == '88'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('......\\n#.....\\n####..\\n#.....\\n......\\n......') == 'cannot fold'\nassert solution('......\\n#.....\\n####..\\n#.....\\n......\\n......') == 'can fold'\nassert solution('......\\n#.....\\n####..\\n#.....\\n......\\n......') == 'cannot fold'\nassert solution('......\\n..##..\\n...#..\\n..##..\\n......\\n......') == 'can fold'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '...\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '...\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '###\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '###\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '##.\\n'\n    '###\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '##.\\n'\n    '#..\\n'\n    '##.\\n'\n    '###\\n'\n    '##.\\n'\n    '#..\\n'\n    '##.\\n'\n    '###\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '##.\\n'\n    '#..\\n'\n    '#..\\n'\n    '#..\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '##.\\n'\n    '"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'cannot fold'\nassert solution('#.#') == 'cannot fold'\nassert solution('..##') == 'can fold'\nassert solution('#..##') == 'can fold'\nassert solution('#.##.') == 'can fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"..##..\\n\"\n    \"#...#..\\n\"\n    \"..##.#.\") == \"can fold\"\nassert solution(\"#..#.#.\\n\"\n    \".#....#\\n\"\n    \"..#....\\n\"\n    \"......\") == \"cannot fold\"\n\nassert solution(\"##.#.##\\n\"\n    \".#....#\\n\"\n    \".#....#\\n\"\n    \"......\") == \"cannot fold\"\nassert solution(\"....#..\\n\"\n    \"##.#..#\\n\"\n    \"#.#....\\n\"\n    \"....#..\\n\"\n    \"......\") == \"can fold\"\n\nassert solution(\"....#..\\n\"\n    \"##.#..#\\n\"\n    \"#.#....\\n\"\n    \"....#..\\n\"\n    \"......\") == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"......\\n......\\n######\\n......\\n......\\n......\") == \"cannot fold\"\nassert solution(\"......\\n#.....\\n######\\n#.....\\n......\\n......\") == \"can fold\"\nassert solution(\"..##..\\n...#..\\n..##..\\n...#..\\n......\\n......\") == \"cannot fold\"\nassert solution(\"..##..\\n...#..\\n..##..\\n#....#\\n..##..\\n......\") == \"can fold\"\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"#\") == \"\"\nassert solution(\"##\") == \"\"\nassert solution(\"##\\n##\") == \"\"\nassert solution(\"##\\n#\\n##\") == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"......\") == \"cannot fold\"\nassert solution(\"#.....\") == \"can fold\"\nassert solution(\"..##..\") == \"cannot fold\"\nassert solution(\"...#..\") == \"can fold\"\n\n\"\"\"\n\n\nfrom typing import Any"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''......\n......\n######\n......\n......\n......''') == 'cannot fold'\nassert solution('''#..#..\n....##\n.#.##.\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str([\n            \"......\",\n            \"......\",\n            \"######\",\n            \"......\",\n            \"......\",\n            \"......\"\n        ])) == \"cannot fold\"\n\nassert solution(str([\n            \"#..#.\",\n            \".#..#\",\n            \"#.....\",\n            \"#.....\",\n            \"......\",\n            \"#.....\",\n            \"#..#.\"\n        ])) == \"can fold\"\n\nassert solution(str([\n            \".#....\",\n            \"#......\",\n            \"##.##.\",\n            \"......#\",\n            \"......#\",\n            \"#......\",\n            \"#.##..\"\n        ])) == \"cannot fold\"\n\nassert solution(str([\n            \"......\",\n            \"#..##.\",\n            \"......\",\n            \"##..#.\",\n            \"......\",\n            \"##..#.\",\n            \"......\"\n        ])) == \"can fold\"\n\nassert solution(str([\n            \".#....\",\n            \"#..##.\",\n            \"......\",\n            \"##..#.\",\n            \"......\",\n            \"##..#.\",\n            \".#....\"\n        ])) == \"cannot fold\""
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n....\n....\n####\n....\n....\n''') == 'cannot fold'\nassert solution('''\n....\n....\n####\n....\n....\n''') == 'cannot fold'\nassert solution('''\n##...\n...#.\n.#.#.\n..#..\n.....\n''') == 'can fold'\nassert solution('''\n##...\n...#.\n.#.#.\n..#..\n...##\n''') == 'can fold'\nassert solution('''\n.##.##\n####.#\n....#.\n.#...\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\nassert solution('abc') == 'abc'\nassert solution('abcde') == 'abc'\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n\"\"\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\nassert solution(\"a\") == \"a\"\nprint(\"All test cases passed.\")\n\n## Given a string composed solely of lowercase English letters, find the longest substring that occurs more than once in the input string. The two occurrences are allowed to partially overlap.\n\n## For example, if the input is:\n## abcabc\n## then the longest substring that occurs more than once is:\n## abc\n## Note that there are two instances of the longest substring:\n## abc and abc.\n## The first substring is in the first index position and the second in the third.\n\n## Your solution should run in linear time.\n## Write 5 lines of code to test the correctness of solution:\n## Sample Input 1:\n## abcabc\n## Sample Output 1:\n## abc\n## Sample Input 2:\n## aaaaa\n## Sample Output 2:\n## aaa\n## Sample Input 3:\n## a\n## Sample Output 3:\n## a\n\n## If there are multiple longest repeated substrings, print the one that would come first when the longest substrings are sorted in lexicographical (alphabetical) order.\n## For example, if the input is:\n## bcdefgh\n## then your program should print:\n## bcdef\n## Notice that the longest substrings are:\n## bcdef, bcdefgh, bcdefg, bcdefgh, bcdefgh\n## The first substring is in the first index position and the last in the eighth.\n## The second substring is in the second index position and the last in the seventh.\n\n## Your solution should run in linear time."
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\nprint('Passed')"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\n\"\"\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcefgabc\") == 'abc'\nassert solution(\"abcbabcba\") == 'abcba'\nassert solution(\"aaaa\") == 'aaa'\nassert solution(\"a\") == 'a'\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == 'abcdefghijklmnopqrstuvwxyz'\n\"\"\""
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('abcd') == ''\nassert solution('abcdaa') == 'a'\nassert solution('abcdbd') == 'b'\nassert solution('abcdbca') == 'bc'\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\nassert solution('abacaba') == 'aba'\nassert solution('aaaaaaaaaa') == 'aaaaaaaaa'\nprint(\"All test cases passed.\")"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcefgabc\") == 'abc'\nassert solution(\"abcbabcba\") == 'abcba'\nassert solution(\"aaaa\") == 'aaa'\nassert solution(\"abcdef\") == None\n\n\"\"\"\n\nfrom typing import *"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"2\\n1 4\\n2 5\"\n) == \"4\"\n\nassert solution(\n    \"2\\n1 4\\n2 10005\"\n) == \"6\"\n\nassert solution(\n    \"3\\n1 4\\n2 10\\n0 15\"\n) == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 4\\n2 5') == '4'\nassert solution('1 4\\n2 10005') == '6'\nassert solution('1 4\\n2 10\\n0 15') == '4'\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 4\\n2 5\") == 4\n\"\"\"\n\n\"\"\"\n@param {str} input_str: input string\n@return {int} number: number of coupons\n\"\"\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '3'\nassert solution('1\\n2\\n3\\n4') == '4'\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 5\\n1 10\\n2 20\\n3 25\\n4 25\\n5 28\\n0 0\\n1 10\\n2 20\\n3 25\\n4 25\\n5 28\\n0 0\\n1 10\\n2 20\\n3 25\\n4 25\\n5 28\\n0 0\\n1 10\\n2 20\\n3 25\\n4 25\\n5 28\\n0 0\\n1 10\\n2 20\\n3 25\\n4 25\\n5 28\") == \"6\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 4\\n2 5\\n0 15\") == \"4\"\n\nassert solution(\"4\\n1 4\\n2 10005\\n0 15\") == \"6\"\n\nassert solution(\"3\\n1 4\\n2 10\\n0 15\") == \"4\"\n\nassert solution(\"3\\n1 4\\n2 10\\n0 15\\n5 16\\n7 17\") == \"6\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 4\\n2 5\") == '4'\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 4\\n2 5\") == \"4\"\nassert solution(\"2 10\\n1 10005\") == \"6\"\nassert solution(\"3 10\\n1 10005\\n0 15\") == \"4\"\n\"\"\""
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 4\\n2 5') == '4'\nassert solution('2\\n1 4\\n2 10005') == '6'\nassert solution('3\\n1 4\\n2 10\\n0 15') == '4'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 4\\n2 5\") == 4\n\"\"\"\nimport sys"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 3 4 7') == '2'\nassert solution('2 3 4 4 7') == '0'\nassert solution('4 2 3 4 7') == '0'\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"7 7 7\") == \"3\"\nassert solution(\"1 2 3 2 1\") == \"0\"\nassert solution(\"1 2 3 3 4 5 6 7\") == \"2\"\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"3\\n7 7 7\") == \"3\"\nassert solution(\"5\\n1 2 3 2 1\") == \"0\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n2 3 4 4 8 12 24') == '2'\n\"\"\"\n\nimport math\nfrom sys import stdin\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 4 4 8 12 24\\n7 7 7') == '2\\n'\nassert solution('1 2 3 2 1\\n7 7 7') == '3\\n'\nassert solution('5 1 2 3 2 1\\n7 7 7') == '0\\n'\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"3\\n7 7 7\") == \"3\"\nassert solution(\"5\\n1 2 3 2 1\") == \"0\"\n\nprint('Success')\n\n-----\nSample Input 1:\n7\n2 3 4 4 8 12 24\n\nSample Output 1:\n2\n\nSample Input 2:\n3\n7 7 7\n\nSample Output 2:\n3\n\nSample Input 3:\n5\n1 2 3 2 1\n\nSample Output 3:\n0\n\nSample Input 4:\n5\n1 2 3 4 2 1\n\nSample Output 4:\n2\n\nSample Input 5:\n10\n1 1 1 1 1 1 1 1 1 1\n\nSample Output 5:\n40320\n\nSample Input 6:\n10\n2 2 2 2 2 2 2 2 2 2\n\nSample Output 6:\n10\n\nSample Input 7:\n8\n7 2 5 9 4 5 4 4 6\n\nSample Output 7:\n20\n\nSample Input 8:\n10\n1 1 1 1 1 1 1 1 1 1\n\nSample Output 8:\n1\n\nSample Input 9:\n13\n1 1 2 2 3 3 3 3 3 3 3\n\nSample Output 9:\n720\n\nSample Input 10:\n13\n1 1 2 3 3 3 3 3 3 3 3\n\nSample Output 10:\n0\n\nSample Input 11:\n15\n1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n\nSample Output 11:\n362880\n\nSample Input 12:\n15\n
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"3\\n7 7 7\") == \"3\"\nassert solution(\"5\\n1 2 3 2 1\") == \"0\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"3\\n7 7 7\") == \"3\"\nassert solution(\"5\\n1 2 3 2 1\") == \"0\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"1\\n2\") == \"0\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1 1\\n') == ''\nassert solution('1 2 3 4 5') == '3'\nassert solution('1 2 3 4 5 6 7 8 9') == '1'\n"
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"3\\n7 7 7\") == \"3\"\nassert solution(\"5\\n1 2 3 2 1\") == \"0\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"1 2 1\\nGS\\n\") == \"1\"\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == \"-1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 5 4\nS#.F.\n.MFMG\n''') == '3'\n\nassert solution('''1 2 1\nGS\n''') == '1'\n\nassert solution('''2 2 10\nS#\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"1 2 1\\nGS\\n\") == \"1\"\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 5 4\nS#.F.\n.MFMG\n''') == '3'\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"1 2 1\\nGS\\n\") == \"1\"\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == \"1\""
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == 3\nassert solution(\"1 2 1\\nGS\\n\") == 1\nassert solution(\"2 2 10\\nS#\\n#G\\n\") == -1\nassert solution(\"1 2 1\\nF\\n\") == 1\n\"\"\"\n\n\"\"\"\nSolution 1\n\nfrom collections import deque"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2 5 4\nS#.F.\n.MFMG\n\"\"\") == \"3\"\nassert solution(\"\"\"1 2 1\nGS\n\"\"\") == \"1\"\nassert solution(\"\"\"2 2 10\nS#\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5 4\\nS#.F.\\n.MFMG\\n') == '3'\nassert solution('1 2 1\\nGS\\n') == '1'\nassert solution('2 2 10\\nS#\\n#G\\n') == '-1'\n\nprint(solution('2 5 4\\nS#.F.\\n.MFMG\\n'))\nprint(solution('1 2 1\\nGS\\n'))\nprint(solution('2 2 10\\nS#\\n#G\\n'))\n\nimport numpy as np"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == 3\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == 3\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\nS.#\\n.#G\\nDRRDD\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\nS..\\n.#.\\n..G\\nDRRDD\") == 1\nassert solution(\"3 7\\n.......\\n.G.#.S.\\n.......\\nLDLDLLDR\") == 2\nassert solution(\"3 7\\nG..#.S\\n.......\\nLDLDLLDR\") == 2\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n.S\\n.#\\n..\\nDRRDD\") == \"1\"\nassert solution(\"3 7\\n....\\n.G.##\\n.......\\nLDLLDR\") == \"1\"\nassert solution(\"3 7\\n.#.S\\n.......\\nLDLLDR\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"DRRDD\") == \"1\"\nassert solution(\"DRRDD\") == \"1\"\nassert solution(\"DRRDD\") == \"1\"\nassert solution(\"DRRDD\") == \"1\"\nassert solution(\"DRRDD\") == \"1\""
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\nS.\\n.\\n..\\nG\\nDRRDD') == '1'\nassert solution('3 7\\n...\\n.G.\\n.S.\\n....\\nLDLDR') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"DRRDD\") == \"RRDD\"\nassert solution(\"DDRRDD\") == \"DRDD\"\nassert solution(\"LDLLDRDD\") == \"DRLDDRDD\"\nassert solution(\"DDRDR\") == \"DRRRR\"\nassert solution(\"DDDRRDRLLLDDRDRDDDDRLLRDRDRLLLDRDRDRRRR\") == \"DRLLDRDRRRRDRDRRRRDRDRDRRRDRRRRRRRRRDRDRRRRRRRRRDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"DRRDD\") == \"RRDD\"\nassert solution(\"LDLLDR\") == \"LDLDLDR\"\nassert solution
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\nS.\\n.#\\n..G\\nDRRDD\") == \"1\"\nassert solution(\"3 7\\n.......\\n.G.#.S.\\n.......\\nLDLDLLDR\") == \"1\"\nassert solution(\"3 7\\n.......\\n.G.##S.\\n.......\\nLDLDLLDR\") == \"2\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('S..\\n.#.\\n..G\\nDRRDD') == '1'\nassert solution('.......\\n.G.#.S.\\n.......\\nLDLDLLDR') == '2'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 3\nS..\n.#.\n..G\nDRRDD\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 7\n.#.....\n.G.##S.\n.......\nLDLDLLDR\n\"\"\") == \"2\"\n\n\"\"\"\nA robot moves in a plane starting from the original point (0,0). The robot can move toward UP, DOWN, LEFT and RIGHT with a given steps. The trace of robot movement is shown as the following:\nUP 5\nDOWN 3\nLEFT 3\nRIGHT 2\nThe numbers after the direction are steps. Please write a program to compute the distance from current position after a sequence of movement and original point. If the distance is a float, then just print the nearest integer.\nExample:\nIf the following tuples are given as input to the program:\nUP 5\nDOWN 3\nLEFT 3\nRIGHT 2\nThen, the output of the program should be:\n2\n\"\"\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\") == \"1000200 799\"\nassert solution(\"2\\n100 0 101\\n0 200 199\") == \"uncertain\"\nassert solution(\"2\\n100 0 100\\n0 200 199\") == \"impossible\"\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n100 0 100\\n0 200 199\") == \"uncertain\"\n\"\"\"\n\nfrom typing import List\nfrom collections import namedtuple\n\nCoord = namedtuple(\"Coord\", [\"x\", \"y\"])\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\\n\") == \"1000200 799\"\nassert solution(\"2\\n100 0 101\\n0 200 199\\n\") == \"uncertain\"\nassert solution(\"2\\n100 0 100\\n0 200 199\\n\") == \"impossible\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(10 ** 6)"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n999999 0 1000\n999900 950 451\n987654 123 13222''') == '1000200 799'\nassert solution('''2\n100 0 101\n0 200 199''') == 'uncertain'\nassert solution('''2\n100 0 100\n0 200 199''') == 'impossible'\nassert solution('''1\n100 0 100\n0 200 199''') == 'impossible'\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\") == \"1000200 799\"\nassert solution(\"2\\n100 0 101\\n0 200 199\") == \"uncertain\"\nassert solution(\"2\\n100 0 100\\n0 200 199\") == \"impossible\"\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222') == '1000200 799'\n\nimport unittest\nfrom io import StringIO\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdin, stdout = StringIO(input), StringIO()\n        solution(stdin)\n        self.assertEqual(stdout.getvalue(), output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3\n999999 0 1000\n999900 950 451\n987654 123 13222\n\"\"\"\n        output = \"\"\"1000200 799\n\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"2\n100 0 101\n0 200 199\n\"\"\"\n        output = \"\"\"uncertain\n\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"2\n100 0 100\n0 200 199\n\"\"\"\n        output = \"\"\"impossible\n\"\"\"\n        self.assertIO(input, output)"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\") == \"1000200 799\"\nassert solution(\"2\\n100 0 101\\n0 200 199\") == \"uncertain\"\nassert solution(\"2\\n100 0 100\\n0 200 199\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\") == \"1000200 799\"\n\nassert solution(\"2\\n100 0 101\\n0 200 199\") == \"uncertain\"\n\nassert solution(\"2\\n100 0 100\\n0 200 199\") == \"impossible\"\n\nprint(\"Successfully solved!\")\n\"\"\"\n\nfrom typing import List, Tuple\nimport unittest"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222') == '1000200 799'\nassert solution('2\\n100 0 101\\n0 200 199') == 'uncertain'\nassert solution('2\\n100 0 100\\n0 200 199') == 'impossible'"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\") == '1000200 799'\nassert solution(\"2\\n100 0 101\\n0 200 199\") == 'uncertain'\nassert solution(\"2\\n100 0 100\\n0 200 199\") == 'impossible'\n\"\"\"\n\nimport sys\n\ninputs = sys.stdin.readlines()\n\nn = int(inputs[0].rstrip())\n\nfor i in range(1, len(inputs)):\n    x, y, d = map(int, inputs[i].rstrip().split())\n\n    if d == 0:\n        print('impossible')\n    elif x == y and d == 0:\n        print(0, 0)\n    elif x > 0 and y > 0 and d == 0:\n        print('impossible')\n    elif x > 0 and y == 0 and d == 1:\n        print('impossible')\n    elif x == 0 and y > 0 and d == 2:\n        print('impossible')\n    elif x == 0 and y == 0:\n        print(0, 0)\n    else:\n        delta_x = abs(x) + abs(y)\n        delta_y = abs(x) + abs(y)\n\n        if delta_x == delta_y:\n            print(x, y)\n        elif x == 0 and y < 0:\n            print('impossible')\n        elif y == 0 and x < 0:\n            print('impossible')\n        elif delta_x < delta_y:\n            print(x, 0)\n        else:\n            print(0, y)\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\") == \"1\\n2\"\nassert solution(\"2\\n4 7\\n9 8\\n14 18\\n19 17\") == \"1\\n2\"\nassert solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\") == \"syntax error\"\nassert solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\") == \"syntax error\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\\n\") == \"2\\n1\\n\"\nassert solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\\n\") == \"1\\n2\\n\"\nassert solution(\"2\\n4 8\\n14 17\\n9 8\\n19 18\\n\") == \"syntax error\\n\"\nassert solution(\"2\\n4 8\\n9 8\\n14 18\\n19 17\\n\") == \"syntax error\\n\"\nassert solution(\"2\\n4 8\\n14 17\\n9 7\\n19 18\\n\") == \"syntax error\\n\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n4 7\\n9 8\\n14 17\\n19 18\\n') == '2\\n1\\n'\nassert solution('2\\n4 7\\n9 8\\n14 17\\n19 18\\n') == '1\\n2\\n'\nassert solution('2\\n4 7\\n9 8\\n14 17\\n19 18\\n') == '1\\n2\\n'"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7\\n9 8\\n14 17\\n19 18\") == \"2\\n1\"\nassert solution(\"4 8\\n9 7\\n14 18\\n19 17\") == \"1\\n2\"\nassert solution(\"4 8\\n9 7\\n14 18\\n19 17\") == \"1\\n2\"\n\"\"\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') =='syntax error'\nassert solution('1\\n2') =='syntax error'\nassert solution('1\\n2\\n3\\n4\\n5') == '2\\n3\\n4\\n5\\n1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == '2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n'\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n4 8\\n9 7\\n14 18\\n19 17') == '1\\n2'\nassert solution('2\\n4 8\\n9 8\\n14 18\\n19 17') =='syntax error'\nassert solution('2\\n4 7\\n9 7\\n14 18\\n19 17') == '1\\n2'\nassert solution('2\\n4 8\\n9 8\\n14 18\\n19 18') =='syntax error'\nassert solution('2\\n4 7\\n9 8\\n14 18\\n19 17') =='syntax error'\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\") == \"2\\n1\\n\", \"Test 1 FAILED\"\nassert solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\") == \"1\\n2\\n\", \"Test 2 FAILED\"\nassert solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\") == \"1\\n2\\n\", \"Test 3 FAILED\"\n\nSample Input 4:\n2\n4 8\n9 7\n14 18\n19 17\nSample Output 4:\nsyntax error\n"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n4 7\\n9 8\\n14 17\\n19 18') == '2\\n1'\nassert solution('2\\n4 8\\n9 7\\n14 18\\n19 17') == '1\\n2'\n\"\"\"\n\nfrom collections import defaultdict\nimport math\nfrom typing import List, Dict, Tuple\n\nDEBUG = False\ndata: List[str] = []"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\") == \"1\\n2\"\n\"\"\"\n\nn = int(stdin.readline().strip())\n\nlst = []\nfor i in range(n):\n    lst.append([int(x) for x in stdin.readline().split()])\n\nlst.sort()\n\nsame = []\nfor i in range(n):\n    if i == 0:\n        same.append(lst[i])\n    else:\n        if same[-1][0] == lst[i][0] and same[-1][1] == lst[i][1]:\n            same.pop()\n        else:\n            same.append(lst[i])"
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7\\n9 8\\n14 17\\n19 18') == '2\\n1'\nassert solution('2\\n4 7\\n14 17\\n9 8\\n19 18') == '1\\n2'\nassert solution('2\\n4 8\\n9 7\\n14 18\\n19 17') =='syntax error'\n\"\"\"\n\nimport sys\n\nlines = []\n\nfor line in sys.stdin:\n    lines.append(line.strip('\\n'))\n\nnum_of_pairs = int(lines[0])\n\npairs = {}\n\nfor i in range(1, num_of_pairs + 1):\n    pair = lines[i].split(' ')\n    r1 = int(pair[0])\n    c1 = int(pair[1])\n    pair = lines[i + num_of_pairs].split(' ')\n    r2 = int(pair[0])\n    c2 = int(pair[1])\n    pairs[(r1, c1)] = (r2, c2)\n    pairs[(r2, c2)] = (r1, c1)\n\nnumber_of_rectangles = 0\n\nfor key in pairs.keys():\n    if key[0] == key[1]:\n        number_of_rectangles += 1\n\nprint(number_of_rectangles)\n\nfor key in pairs.keys():\n    if key[0] == key[1]:\n        print(key[0], end=' ')\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\n\nassert solution(\n    \"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\n\nassert solution(\n    \"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\"\n\nassert solution(\"\") == \"many\"\n\nassert solution(\n    \"1 2 3 4 5 _ 6 7 _ _ _ 9 10 11 _ 12 13 14 15 _ 16 17 18 19 20 _ 21 22 23 24 25 _ 26 27 28 29 30 _ 31 32 33 34 35 36 _ 37 38 39 40 41 42 43 44 45 _ 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 _ 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 _ 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 _ _ _ _ _ _ _ _ _ _ _ _ _\\n
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == '1'\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == '1'\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == '8640'\nassert solution(\"190 12 21\\n_ _ 1 2 _ 3\\n\") =='many'\nassert solution(\"85 65 85\\n_ _ _\\n_ _ 8\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _\\n_ _ _"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 _ _ _ _\") == \"many\"\nassert solution(\"1 _ _ _ _ _ 1\") == \"many\"\nassert solution(\"_ 1 2 _ _ _ 1\") == \"many\"\nassert solution(\"_ _ 1 _ _ _ 1\") == \"many\"\nassert solution(\"_ _ 1 _ _ _ 1\") == \"many\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n_ 90 22 _ 6 _ _ _ _ 81\n_ 40 _ _ _ 12 60 _ 90 _\n\"\"\") == \"1\"\nassert solution(\"\"\"\n85 55 _ 99 51 _ _ _ _ _\n_ _ _ _ _ _ _ 85 63 153\n\"\"\") == \"1\"\nassert solution(\"\"\"\n160 _ _ 136 _ _ _ _ _ 170\n_ _ _ _ 120 _ _ 144 _ _\n\"\"\") == \"8640\"\n\n\"\"\"\n-------------------------------------\n\nThis is a problem related to project euler.\n\nIf we have two values with the same units, we can divide them.\n\nIf we have two values with the same units, we can multiply them.\n\nIf we have two values with the same units, we can subtract them.\n\nIf we have two values with the same units, we can add them.\n\nIf we have two values with different units, we can convert them.\n\nUsing all these operations, we can construct a tree of operations that we can use to convert one value to another.\n\nConvert the values in the given array into the values with the same units and then sort them by the unit in which they have the same values.\n\nFor example, if we have:\n\n4 inches and 1 foot\n\n0 inches and 1 foot\n\nThen we can create the tree:\n\nconvert 0 inches to 4 inches\n    convert 1 foot to 3 feet\n        convert 0 feet to 0 inches\n        convert 1 foot to 1 foot\n    convert 1 inch to 6 inches\n        convert 0 inch to 0 inch\n        convert 1 inch to 0 feet\n        convert 0 foot to 0 feet\nconvert 4 inches to 6 inches\n    convert 1 foot to 3 feet\n        convert 4 feet to 6 feet\n        convert 1 foot to 1 foot\n    convert 1 inch to 6 inches\n        convert 4 inch to 6 inches\n        convert 1 inch to 0 feet\n        convert 0 foot to 0 feet\n\nThen we can convert each of the values in the array to the unit that it has the same units. This will give us the answer as a list in the following order:\n\n[2, 0, 4, 0]\n\nUsing this list, we can convert the values in the array to the same unit:\n\nConvert the values in the array to 4 inches\nConvert the values in the array to 6 feet\n\nAs we can see, in this way, we will always obtain a correct answer.\n\nIf we have n values with the same unit, we will have n+1 nodes in the tree, where n is the length of the input array.\n\nThe solution to this problem is the number of nodes in the tree (n+1), which is the number of unique values in the output array.\n\nWe can verify that this is the solution using the following operations:\n\nIf we have two values with the same units, we can divide them.\n\nIf we have two values with the same units, we can multiply them.\n\nIf we have two values with the same units, we can subtract them.\n\nIf we have two values with the same units, we can add them.\n\nIf we have two values with different units, we can convert them.\n\nComplexity\nO(n)O(n) time\nO(n)O(n) space\n\n\"\"\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"_ 90 22 _ 6 _ _ _ _ _ 81\n_ 40 _ _ _ 12 60 _ 90 _\"\"\") == \"1\"\nassert solution(\"\"\"85 55 _ 99 51 _ _ _ _ _\n_ _ _ _ _ _ _ 85 63 153\"\"\") == \"1\"\nassert solution(\"\"\"160 _ _ 136 _ _ _ _ _ 170\n_ _ _ _ 120 _ _ 144 _ _\"\"\") == \"8640\"\n\"\"\""
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n1\\n_\\n_\\n1') == '0'\nassert solution('1\\n2\\n1\\n1\\n_\\n_\\n1') == '1'\nassert solution('1\\n2\\n1\\n_\\n_\\n_\\n_\\n1') =='many'\nassert solution('1\\n2\\n1\\n1\\n_\\n_\\n1') =='many'\nassert solution('1\\n2\\n1\\n1\\n_\\n_\\n_\\n_\\n1') =='many'\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\n\nassert solution('85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n') == '1'\n\nassert solution('160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n') == '8640'\n\nprint(solution(stdin))\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == '1'\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == '1'\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == '8640'\n\n\"\"\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''_ 90 22 _ 6 _ _ _ _ 81\n_ 40 _ _ _ 12 60 _ 90 _\n''') == '1'\n\nassert solution('''85 55 _ 99 51 _ _ _ _ _\n_ _ _ _ _ _ _ 85 63 153\n''') == '1'\n\nassert solution('''160 _ _ 136 _ _ _ _ _ 170\n_ _ _ _ 120 _ _ 144 _ _\n''') == '8640'\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 2\n1 3\n''') == '2'\n\nassert solution('''\n5\n1 2\n1 5\n3 1\n4 3\n''') == '8'\n\nassert solution('''\n5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\n\nassert solution('''\n5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\n\nassert solution('''\n5\n1 2\n2 3\n2 4\n1 5\n3 6\n2 7\n7 8\n5 9\n5 10\n''') == '24'"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == 2\nassert solution(\"5\\n1 2\\n1 5\\n3 1\\n4 3\\n\") == 8\n\"\"\"\n\n\"\"\"\nSOLUTION\n\nThe problem can be solved using dynamic programming and Backtracking.\n\nLet\u2019s define the memoization array as follows:\n\nmemo[k][i][j] = the number of optimal paths of length k starting from i and ending at j.\n\n1. Initialize memo[1][1][1] = 1, since one path of length 1 ending at i = j.\n2. Initialize memo[1][i][j] = 1, if i == j.\n3. Initialize memo[k][i][j] = 0 for all i, j, k.\n\nFor each index of the memo array, we can trace the ways of reaching it in the base case:\n\nmemo[0][i][j] = 0, if i!= j.\nmemo[0][i][i] = 1, if i == j.\n\nFor each index of the memo array, we can trace the ways of reaching it in the recursive case:\n\nmemo[k][i][j] = 0, if k > 0 and i == j.\nmemo[k][i][j] = memo[k - 1][i][j] + memo[k][i][j - 1], if k > 0 and i!= j.\n\nLet\u2019s implement the dynamic programming solution with Backtracking.\n\n1. Let\u2019s initialize the memo array with a base case:\nmemo[1][i][j] = 1, if i == j.\n\n2. Let\u2019s check whether (k, i, j) is in the memo:\nmemo[k][i][j]!= 0, if it is not in the memo.\n\n3. Define a function, which determines whether the path with given endpoints (k, i, j) is optimal:\n\nmemo[k][i][j] = 0, if k > 0 and i == j.\nmemo[k][i][j] = memo[k - 1][i][j] + memo[k][i][j - 1], if k > 0 and i!= j.\n\n4. Define a function, which will extend the memo to the case with k = k + 1:\n\nmemo[k + 1][i][j] = 0, if k > 0 and i == j.\nmemo[k + 1][i][j] = memo[k][i][j], if k > 0 and i!= j.\n\n5. Update the base case of the memo array, if it is in the base case:\nmemo[1][i][j] = 1, if i == j.\n\n6. Return the updated memo array with the base case:\nreturn memo.\n\n7. Return the updated memo array with the recursive case:\nreturn memo[k + 1][i][j] + memo[k][i][j - 1]\n\"\"\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == \"2\"\nassert solution(\"5\\n2 1\\n1 5\\n3 1\\n4 3\") == \"8\"\nassert solution(\"10\\n1 2\\n2 3\\n2 4\\n1 5\\n3 6\\n2 7\\n7 8\\n5 9\\n5 10\") == \"24\"\n\"\"\"\n\n\"\"\"\nFirst we define a function which is going to return the optimal paths between two junctions.\n\nThe function takes 2 parameters: the number of junctions and the dictionary of junctions with their connections.\n\nThe key of the dictionary is the junction and the value is a list of junctions which are connected to the key.\n\nThe function iterates through the dictionary of connections and finds the shortest path to every other junction.\n\nThen it returns the length of the shortest path.\n\"\"\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == \"2\"\nassert solution(\"5\\n2 1\\n1 5\\n3 1\\n4 3\") == \"8\"\nassert solution(\"10\\n1 2\\n2 3\\n2 4\\n1 5\\n3 6\\n2 7\\n7 8\\n5 9\\n5 10\") == \"24\"\nprint('Successfully passed all tests')"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2\\n1 3') == '2'\nassert solution('5\\n2 1\\n1 5\\n3 1\\n4 3') == '8'\nassert solution('10\\n1 2\\n2 3\\n2 4\\n1 5\\n3 6\\n2 7\\n7 8\\n5 9\\n5 10') == '24'\n\"\"\"\nfrom collections import defaultdict, deque\n\nimport pytest\nfrom _pytest.fixtures import SubRequest\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('2\\n1 1\\n1 2') == '1'\nassert solution('3\\n1 2\\n1 3') == '0'\nassert solution('5\\n1 2\\n2 3\\n2 4\\n1 5') == '6'\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1\\n1 5\\n3 1\\n4 3\") == \"8\"\n\"\"\"\nfrom functools import reduce\nfrom typing import Dict, List, Tuple, Set\nimport operator\nfrom collections import defaultdict\n\nJUNCTIONS = set()\nROADS = defaultdict(set)"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 2\n1 3\n''') == '2'\n\nassert solution('''\n5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\n\nassert solution('''\n10\n1 2\n2 3\n2 4\n1 5\n3 6\n2 7\n7 8\n5 9\n5 10\n''') == '24'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2\\n1 5\\n3 1\\n4 3\\n2 7\\n7 8\\n5 9\\n5 10\") == \"24\"\nprint('test passed')"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2\\n1 3') == 2\nassert solution('1 2\\n1 3\\n1 5') == 8\n\"\"\""
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"boot\") == \"bopo\"\nassert solution(\"treetreetreetree\") == \"3\"\nassert solution(\"wood\") == \"0\"\n\nprint('The code ran Correctly')\n\nhttps://www.codewars.com/kata/55f8b7c05d9d7a8c7000035/train/python"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == 'etta'\nassert solution('treetreetreetree') == '3'\nassert solution('oranges') == '0'\n\nprint(solution(stdin.strip()))\n\n\"\"\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('test') == 'e'\nassert solution('1234567') == '7'\nassert solution('aBcDeF') == 'ABCDEF'\nassert solution('aBcDeF12') == 'ABCD12F'\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('treetreetreetree') == '3'\nassert solution('oranges') == '0'\n\nprint('The code ran Correctly')\n\n\"\"\"\n\nsecretmessage ='secretmessage'\ndecrypted = 'boot'"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"treetreetreetree\") == \"3\"\nassert solution(\"oranges\") == \"0\"\nassert solution(\"apples\") == \"0\"\n\nprint(\"Passed all tests...!!\")\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"treetreetreetree\") == \"3\"\n\"\"\""
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == 'essa'\nassert solution('treetreetreetree') == '3'\nassert solution('wood') == '0'\nassert solution('oranges') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open('./sample.txt').read().strip()) =='s9j'\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"treetreetreetree\") == \"3\"\nassert solution(\"oranges\") == \"0\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('>^<^') == '2'\nassert solution('v<^>') == '4'\nassert solution('<<<') == '1'\nassert solution('>^<^\\n>^<^\\n>^<^\\n>^<^\\n>^<^') == '2'\nassert solution('v<^>\\n<^v>\\n<^v>\\n<^v>\\n<^v>') == '4'\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\">^>\") == 1\nassert solution(\"^>v<\") == 1\nassert solution(\"^v^v^v^v\") == 4\nassert solution(\"<v<v<<\") == 4\nassert solution(\"^v^v^v^v\") == 1\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == 0\nassert solution(\"^v<>v^v^v^v^v\") == 1\nassert solution(\"^v<>v^v^v^v^v^v^v^v^v\") == 2\nassert solution(\"^v<>v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\">^<^\") == 2\nassert solution(\"v<^>\") == 4\nassert solution(\"<<<\") == 1\n\"\"\"\n\n\nimport string"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n>^<^\\n####\\n#.R#\\n#..#\\n####\") == \"2\"\nassert solution(\"5\\n>^<^\\n####\\n#.R#\\n#..#\\n####\") == \"4\"\n\"\"\""
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n>><<\\n#.R#\\n#..#\\n####') == '1'\nassert solution('4\\n<>><>\\n#.R#\\n#..#\\n####') == '2'\n\n-----Notes-----\nFor any string of length at most $N$, it is guaranteed that there is a unique representation of its trail as a finite sequence of (possibly non-distinct) elements.\n\nBecause GL-bot is a robot, it cannot be located on an empty cell.\n\nBecause GL-bot is a robot, it cannot perform a movement that does not change the location of the robot.\n\nBecause GL-bot is a robot, there cannot be two cells that are adjacent to each other, where the robot can travel in one movement.\n\nBecause GL-bot is a robot, there cannot be two cells that are both occupied by the robot, where the robot can travel in one movement.\n\nBecause GL-bot is a robot, there cannot be a cell on the border of the grid, where the robot can travel in one movement.\n\nBecause GL-bot is a robot, it is impossible for the robot to move beyond the border of the grid.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-bot is a robot, it is impossible for the robot to be in the same cell as a non-empty cell.\n\nBecause GL-"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\">^^\") == 1\nassert solution(\">^<\") == 1\nassert solution(\"^<^\") == 2\nassert solution(\"^<>^\") == 2\nassert solution(\"<>\") == 2\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\">^>\") == 2\nassert solution(\">>^>\") == 1\nassert solution(\"<<<\") == 4\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('v<^>\\n####\\n#.R#\\n#..#\\n####') == 4\nassert solution('v<^>\\n####\\n#.R#\\n#..#\\n####') == 1\nassert solution('v<^>\\n####\\n#.R#\\n#..#\\n####') == 2\nassert solution('v<^>\\n####\\n#.R#\\n#..#\\n####') == 2\nassert solution('v<^>\\n####\\n#.R#\\n#..#\\n####') == 2\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6\n>^<^\n######\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == 3\nassert solution(\"3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1\") == 6\n\"\"\"\n\n\"\"\"\nSample Input:\n2\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2\nSample Output:\n3\n\"\"\""
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 0 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == \"3\"\nassert solution(\"2\\n7 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\") == \"6\"\nassert solution(\"3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\") == \"11\"\n\n-----Notes-----\n\nConstraints:\n - 1\u2264n\u22641000\n - 1\u2264m_i\u2264100\n - 0\u2264d_i\u226410^8\n - 0\u2264\\ell _ i\u2264r_ i\u226410^8\n - 1\u2264h_i\u226410^8\n - 1\u2264\\Delta d_i\u226410^6\n - -10^6\u2264\\Delta x_i, \\Delta h_i\u226410^6\n - h_i+\\Delta h_i\u22651\n\"\"\"\n\nfrom typing import List\n\nclass Fog:\n    def __init__(self, m: int, d: int, x: int, y: int, h: int, dx: int, dh: int, n: int):\n        self.m = m\n        self.d = d\n        self.x = x\n        self.y = y\n        self.h = h\n        self.dx = dx\n        self.dh = dh\n        self.n = n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == 3\nassert solution(\"3 4 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\") == 6\nassert solution(\"3 10 7 10 4 1 8 -1\\n3 5 50 55 8 1 -16 2\") == 11\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2 3 0 2 9 2 3 0\") == 3\nassert solution(\"1\\n6 1 4 6 3 -1 -2\") == 6\n\"\"\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 0 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == 3\nassert solution(\"3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1\") == 6\nassert solution(\"2\\n7 0 0 20 10 3 0 10\\n10 1 0 2 5 2 2 7\") == 11\n\"\"\""
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == \"3\"\nassert solution(\"3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == 3\n\n---Problem 2---\nElla and Mark are preparing for an upcoming trip to Rome. They have planned the following itinerary: they\u2019ll start in Boston, Massachusetts and travel to the Grand Rapids, Michigan State University, followed by a stop in Las Vegas, Nevada, and finally a return trip to Boston.\n\nHowever, they have just remembered that they have gas in their vehicle, which is a little less than $90$ miles away from the start of the trip. When they get to a gas station, they can fill up and travel for the rest of the trip on the same tank of gas. However, when they reach a next station, they have to travel via a fuel train. The fuel train can carry a maximum of $160$ gallons, so they will need to refuel before continuing their journey. The fuel train also has a maximum speed of $70$ miles per hour, so they must refuel before getting back to Boston.\n\nElla and Mark have fuel tanks of $15$, $50$, and $90$ gallons, respectively. They can travel at speeds of $15$, $50$, and $70$ miles per hour, respectively. Given their starting positions and the distance to the next station, what is the minimum time (in hours) they will take to travel to and back from the gas station? Assume that they begin their trip at $0:00$.\n\n-----Input-----\nThe first line of input contains three space-separated integers $n$, $m$, and $k$: the number of Ella's fuel tanks, the number of Mark's fuel tanks, and the number of fuel trains, respectively. The next $n$ lines describe the positions and speeds of Ella's fuel tanks, as follows:\n\nThe $i$-th line contains two space-separated integers $x_ i$ and $s_ i$, the position and speed of the $i$-th of Ella's fuel tanks, respectively.\n\nThe position and speed of the fuel tank are measured in miles per hour.\n\nThe $m$ next lines describe the positions and speeds of Mark's fuel tanks, as follows:\n\nThe $i$-th line contains two space-separated integers $x_ i$ and $s_ i$, the position and speed of the $i$-th of Mark's fuel tanks, respectively.\n\nThe position and speed of the fuel tank are measured in miles per hour.\n\nThe $k$ next lines describe the positions and speeds of the fuel trains, as follows:\n\nThe $i$-th line contains two space-separated integers $x_ i$ and $s_ i$, the position and speed of the $i$-th of Mark's fuel trains, respectively"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 0 2 9 2 3 0\") == \"3\"\nassert solution(\"1 6 1 4 6 3 -1 -2\") == \"3\"\nassert solution(\"3 10 7 10 4 1 8 -1\") == \"6\"\nassert solution(\"2 4 0 10 10 1 15 0\") == \"6\"\nassert solution(\"3 5 50 55 8 1 -16 2\") == \"11\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\") == 3\n\nassert solution(\"3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1\") == 6\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2') == 3\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0\") == \"168.7916512460\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0\") == \"163.5274740179\"\nassert solution(\"0.0 1.0 4.0 1.0\\n1\\n0.0 0.0 4.0 0.0\") == \"3.7320508076\"\n\"\"\"\nimport math\n\nA = [float(x) for x in input().split()]\nB = [float(x) for x in input().split()]\nN = int(input())\nc_dict = {}\nfor i in range(N):\n    c_dict[i] = [float(x) for x in input().split()]"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"0.0 1.0 4.0 1.0\") == \"3.7320508076\"\n\n\"\"\"\n\n\n\n\"\"\"\n\nX_A, Y_A, X_B, Y_B = [float(x) for x in stdin.split()]\n\nnum_of_conveys = int(stdin)\n\nconvey_x, convey_y = [], []\nfor i in range(num_of_conveys):\n    x, y, x1, y1 = [float(x) for x in stdin.split()]\n    convey_x.append(x)\n    convey_y.append(y)\n\n\nimport math\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0\") == \"163.5274740179\"\nassert solution(\"60.0 0.0 50.0 170.0\\n1\\n0.0 0.0 4.0 0.0\") == \"3.7320508076\"\n\"\"\""
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0') == '168.7916512460'\nassert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0') == '163.5274740179'\n\n\"\"\"\n\nfrom math import sqrt\n\nclass Point:\n    def __init__(self, x: float, y: float):\n        self.x = x\n        self.y = y\n    \n    def distance(self, other):\n        return sqrt(\n            (other.x - self.x) ** 2 + (other.y - self.y) ** 2\n        )\n    \n    def __repr__(self):\n        return f'({self.x},{self.y})'"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0\") == \"168.7916512460\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\n\"\"\"\n\nimport math\nimport sys\nimport os\nimport time\nfrom decimal import Decimal\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 3\") == \"madam\"\nassert solution(\"9 8 1\") == \"canterlot\"\n\"\"\""
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 5') =='madam'\nassert solution('9 8 1') == 'canterlot'\n\nimport math"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n\nSample Case:\nSample Input:\n\n3 2 3\nSample Output:\n\nimpossible"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n\n-----Explanation-----\nSample Case 1:\n\nrarity is the string with length 6, with distinct characters, and whose longest palindromic substring has length exactly 3.\n\nThe function receives an input string of length 6,\n\nn, k, p\nwith n >= 1, k >= 1 and p >= 1\n\nThe function should output the string,\n\nrarity\n\nwith n = 6, k = 5 and p = 3\n\nThis is because\n\nrarity\n\nis the only string of length exactly 6,\n\nhas exactly 5 distinct characters, and\n\nhas its longest palindromic substring length exactly 3.\n\nSample Case 2:\n\ncanterlot is the string with length 9,\n\nwith 8 distinct characters, and whose longest palindromic substring\nhas length exactly 1.\n\nThe function receives an input string of length 9,\n\nn, k, p\nwith n >= 1, k >= 1 and p >= 1\n\nThe function should output the string,\n\ncanterlot\n\nwith n = 9, k = 8 and p = 1\n\nThis is because\n\ncanterlot\n\nis the only string of length exactly 9,\n\nhas exactly 8 distinct characters, and\n\nhas its longest palindromic substring length exactly 1.\n\nSample Case 3:\n\nmadam is the string with length 5,\n\nwith 3 distinct characters, and whose longest palindromic substring\nhas length exactly 5.\n\nThe function receives an input string of length 5,\n\nn, k, p\nwith n >= 1, k >= 1 and p >= 1\n\nThe function should output the string,\n\nmadam\n\nwith n = 5, k = 3 and p = 5\n\nThis is because\n\nmadam\n\nis the only string of length exactly 5,\n\nhas exactly 3 distinct characters, and\n\nhas its longest palindromic substring length exactly 5.\n\"\"\""
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\nassert solution(\"9 8 1\") == \"canterlot\"\nassert solution(\"5 3 5\") == \"madam\"\n\n\"\"\""
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5 3\") == 'rarity'\n\nassert solution(\"9 8 1\") == 'canterlot'\n\nassert solution(\"5 3 5\") =='madam'\n\nassert solution(\"1 1 1\") == 'IMPOSSIBLE'\n\nassert solution(\"7 2 8\") == 'zabaat'"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 3\") == \"madam\", \"Test 1\"\nassert solution(\"7 5 4\") == \"IMPOSSIBLE\", \"Test 2\"\nassert solution(\"7 5 5\") == \"IMPOSSIBLE\", \"Test 3\"\nassert solution(\"7 5 6\") == \"canterlot\", \"Test 4\"\nassert solution(\"1 2 3\") == \"IMPOSSIBLE\", \"Test 5\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2 3') == 'aabaaba'\nassert solution('6 2 3') == 'bb'\nassert solution('10 3 3') == 'aaab'\nassert solution('10 3 1') == 'aaab'\nassert solution('10 10 1') == 'aaabbb'\n"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\nprint('all cases passed')\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"\"\"\nBlue Ridge mountain road.\nLeaves, glowing in autumn sun,\nfall in Virginia.\n\"\"\"\nassert solution(\"Who would know if we had too few syllables?\") == \"\"\"\nWho would know if we had too few syllables?\n\"\"\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"\"\"\nInternational contest- motivation high\nProgrammers have fun!\n\"\"\"\nprint('Success')"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\"\n) == \"\"\"\nBlue Ridge mountain road.\nLeaves, glowing in autumn sun,\nfall in Virginia.\n\"\"\".lstrip()\n\nassert solution(\n    \"Who would know if we had too few syllables?\"\n) == \"\"\"\nWho would know if we had too few syllables?\n\"\"\".lstrip()\n\nassert solution(\n    \"International contest- motivation high Programmers have fun!\"\n) == \"\"\"\nInternational contest- motivation high\nProgrammers have fun!\n\"\"\".lstrip()\n\"\"\"\n\nCopyright (c) 2020, Sekhar R.\n\"\"\""
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Who would know if we had too few syllables?\\n\") == \"Who would know if we had too few syllables?\\n\"\n\"\"\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\nassert solution('International contest- motivation high Programmers have fun!') == 'International contest-\\nmotivation high Programmers have fun!'\n\"\"\"\n\nimport re\nimport sys\n\nline = sys.stdin.readline()\n\nwords = re.split(r'\\s+', line.rstrip())\n\na = 0\nb = 0\nc = 0\n\nfor word in words:\n    if (len(re.findall('[aeiouyAEIOUY]', word)) >= 3):\n        a += 1\n    if (len(re.findall('[aeiouyAEIOUY]', word)) >= 1):\n        b += 1\n    if (len(re.findall('[aeiouyAEIOUY]', word)) == 0):\n        c += 1"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\n\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?\\n'\n\nassert solution('International contest- motivation high Programmers have fun!') == 'International contest-\\nmotivation high Programmers have fun!\\n'\n\n-----Solution-----\n\nimport re"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\nassert solution('International contest- motivation high Programmers have fun!.') == 'International\\ncontest- motivation high\\nProgrammers have fun!.'\nassert solution('A haiku is a three-line poem in which the first and third lines contain $5$ syllables each, and the second line contains $7$ syllables.') == 'A haiku is a three-line poem in which the first and third lines contain $5$ syllables each, and the second line contains $7$ syllables.'\nassert solution('Blue Ridge mountain road.') == 'Blue Ridge mountain road.'\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International contest-\\nmotivation high\\nProgrammers have fun!\"\nassert solution(\"A haiku is a three-line poem in which the first and third lines contain 5 syllables each, and the second line contains 7 syllables.\") == \"A haiku is a three-line poem in which the first and third lines contain 5 syllables each, and the second line contains 7 syllables.\"\nassert solution(\"The moon is a medium-sized body of the Earth's outermost ring, \" +\n\"the Earth's only four-point star. Its center is a cloud, and it is said to contain a vast majority of the Earth's \" +\n\"atmosphere. It is also the only planet that does not rotate in the opposite direction as the Earth, rotating \" +\n\"anti-clockwise. It is technically a third of the Earth from the sun.\") == \"The moon is a medium-sized body of the Earth's outermost ring,\\nThe Earth's only four-point star. Its center is a cloud, and it is said to contain a vast majority of the Earth's\\natmosphere. It is also the only planet that does not rotate in the opposite direction as the Earth, rotating\\nanti-clockwise. It is technically a third of the Earth from the sun.\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International\\ncontest-\\nmotivation high\\nProgrammers have fun!\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\\n\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International\\ncontest- motivation high\\nProgrammers have fun!\"\n\"\"\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International\\ncontest- motivation high\\nProgrammers have fun!\"\n\n\"\"\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ThoreHusfeldt\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\") == \"Thore sucks\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\\nThoreHusfeldt\\nJohanSannemo\") == \"ThoreH\"\n\"\"\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ThoreTiemann\\nThoreHusfeldt') == 'ThoreH'\nassert solution('ThoreHusfeldt\\nJohanSannemo') == 'Thore is awesome'\nassert solution('ThoreHusfeldt\\nThoreHusfeldt') == 'Thore sucks'\nassert solution('ThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt') == 'ThoreH'\n\n\"\"\"\nimport re"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ThoreTiemann\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldter\") == \"Thore\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldter\") == \"Thore sucks\"\n\"\"\"\n\nn = int(input())\n\nprint('ThoreHusfeldt'[:n])\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ThoreHusfeldt\\nThoreHusfeldt\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\") == \"Thore sucks\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'Thore is awesome'\nassert solution('Thore Husfeldt') == 'ThoreH'\nassert solution('ThoreHusfeldt') == 'ThoreH'\nassert solution('ThoreHusfeldt') == 'ThoreH'\nassert solution('ThoreHusfeldt') == 'ThoreH'\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\\nJohanSannemo\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\\nThoreHusfeldter\\nThoreHusfeldt\") == \"Thore sucks\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ThoreHusfeldt\") == \"Thore is awesome\"\nassert solution(\"ThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"ThoreHusfeldt\") == \"Thore\"\nassert solution(\"ThoreHusfeldt\") == \"Thore\"\nassert solution(\"ThoreHusfeldt\") == \"ThoreHusfeldt\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"2\\nThoreHusfeldt\\nJohanSannemo\") == \"ThoreH\\nThore sucks\"\nassert solution(\n    \"2\\nThoreTiemann\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\n    \"2\\nThoreHusfeldt\\nJohanSannemo\") == \"ThoreH\"\n\n\"\"\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\nThoreHusfeldt\nJohanSannemo''') == 'ThoreH'\nassert solution('''2\nThoreTiemann\nThoreHusfeldt''') == 'ThoreH'\nassert solution('''2\nThoreHusfeldt\nThoreHusfeldt''') == ''\nassert solution('''2\nThoreHusfeldt\nJohanSannemo\nSample Output 3:\nThoreHusfeldt''') == 'ThoreH'"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('P*P') == 6\nassert solution('L*R') == 25\nassert solution('**') == 33\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"LLR*R\") == \"LLRRRRR\"\nassert solution(\"L*R\") == \"LLRRRRR\"\nassert solution(\"**\") == \"LLRRRRR\"\nassert solution(\"L*R\") == \"LLRRRRR\"\nassert solution(\"L*L*R*R*\") == \"LLLLRRRRRRRRRRRRRRRRRRRRR\"\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"P*P\") == 6\nassert solution(\"L*R\") == 25\nassert solution(\"**\") == 33\n\"\"\"\n\nfrom enum import Enum\nfrom functools import reduce\n\nclass NodeType(Enum):\n    LEFT = \"L\"\n    RIGHT = \"R\"\n    PAUSE = \"P\"\n\nclass Node:\n    def __init__(self, left, right, parent, node_type, depth):\n        self.left = left\n        self.right = right\n        self.parent = parent\n        self.node_type = node_type\n        self.depth = depth"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"*\") == 33\nassert solution(\"L*R\") == 25\nassert solution(\"L*R*LRR\") == 25\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"**\") == 33\nassert solution(\"L*R\") == 25\nassert solution(\"LRR\") == 3"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('L*R') == '25'\nassert solution('P*P') == '6'\nassert solution('**') == '33'\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('P*P') == 6\nassert solution('L*R') == 25\nassert solution('**') == 33\n\"\"\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"L*R\") == \"25\"\nassert solution(\"P*P\") == \"6\"\nassert solution(\"**\") == \"33\"\n\"\"\"\n\n\"\"\"\n    1. prefix sum\n    2. dp + 2memo\n    3. dp[i] = dp[i-1] + dp[i]\n\"\"\"\n\nimport math"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"P*P\") == 6\nassert solution(\"L*R\") == 25\nassert solution(\"**\") == 33\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"P*P\") == 6\nassert solution(\"L*R\") == 25\nassert solution(\"**\") == 33\n\"\"\"\n\n\nfrom typing import Set, Union\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\nmoo not foo\nlukas is smart\noskar not lukas\n\"\"\") == \"yes\"\n\n\"\"\"\nIn this challenge, you have to check the equality of two words.\n\nIn the starting code, you will find a variable named input, which is a string containing two words separated by a space.\n\nYour task is to determine whether the words in input are equal or not.\n\nIf the two words are the same, the value of input should be \"equal\".\nIf the two words are not equal, the value of input should be \"not equal\".\n\nSample Input:\nhello goo\n\nSample Output:\nnot equal\n\"\"\"\n\ninput = \"hello goo\""
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"yes\"\nassert solution(\"\") == \"yes\"\nassert solution(\"\") == \"yes\"\nassert solution(\"\") == \"yes\"\nassert solution(\"\") == \"yes\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\nderp is herp\nderp is derp\nherp is derp\"\"\") == \"yes\"\nassert solution(\"\"\"4\nderp is herp\nderp is derp\nherp is derp\nderp is derp\"\"\") == \"yes\"\nassert solution(\"\"\"5\nlukas is smart\nlukas is smart\nlukas is smart\nlukas is smart\nlukas is smart\"\"\") == \"wait what?\"\nassert solution(\"\"\"3\nherp is derp\nderp is herp\nherp is derp\"\"\") == \"wait what?\"\nassert solution(\"\"\"3\nlukas is smart\nlukas is smart\nlukas is smart\nlukas is smart\nlukas is smart\"\"\") == \"yes\"\n\"\"\"\n\n\nimport sys\n\nsys.setrecursionlimit(1500)\n\nN = int(input())\ns = []\nr = {}\nfor i in range(N):\n    if i % 2 == 0:\n        if input() not in s:\n            s.append(input())\n            r[input()] = 1\n    else:\n        l = input().split()\n        if len(l) > 2:\n            if l[1] not in r and l[2] not in r:\n                if input() not in s:\n                    s.append(input())\n                    r[l[1]] = 1\n                    r[l[2]] = 1"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\nalf is lukas\\nlukas is alf\\nfoo not foo\\n\") == \"yes\\n\"\nassert solution(\"2\\nalf is lukas\\nlukas is alf\\nfoo not foo\\n\") == \"wait what?\\n\"\nassert solution(\"3\\nfoo is bar\\nfoo is alf\\nfoo is moo\\n\") == \"yes\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\nherp is derp\nderp is herp\nherp is herp\nderp is derp\n\"\"\") == 'yes'\n\nassert solution(\"\"\"\n3\noskar not lukas\noskar is poptart\nlukas is smart\n\"\"\") == 'wait what?'\n\nassert solution(\"\"\"\n1\nmoo not foo\n\"\"\") == 'yes'\n\"\"\"\n\n-----\n\nimport sys"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'yes'\nassert solution('derp is derp') == 'yes'\nassert solution('derp is not derp') == 'wait what?'\nassert solution('moo is moo') == 'yes'\nassert solution('foo is moo') == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"foo is foo\") == \"yes\"\nassert solution(\"foo is bar\") == \"wait what?\"\nassert solution(\"foo is foobar\") == \"wait what?\"\nassert solution(\"foo is bar\") == \"wait what?\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"yes\"\nassert solution(\"\") == \"yes\"\nassert solution(\"\") == \"yes\"\nassert solution(\"\") == \"yes\"\nassert solution(\"\") == \"yes\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"4\nherp is derp\nderp is herp\nherp is herp\nderp is derp\n\"\"\") == 'yes'\nassert solution(\"\"\"3\noskar not lukas\noskar is poptart\nlukas is smart\n\"\"\") == 'wait what?'\nassert solution(\"\"\"1\nmoo not foo\n\"\"\") == 'yes'\n\"\"\"\nExplanation:\nIn the first example, herp and derp are the same word. In the second example, oskar and lukas are not the same word, since oskar is not lukas. In the third example, moo and foo are the same word.\n\"\"\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4\nherp is derp\nderp is herp\nherp is herp\nderp is derp\"\"\") == \"yes\"\nassert solution(\"\"\"3\noskar not lukas\noskar is poptart\nlukas is smart\"\"\") == \"wait what?\"\nassert solution(\"\"\"1\nmoo not foo\"\"\") == \"yes\""
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA') == '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA'\n\"\"\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nAC\\nACMAA\\nAACCMMAA\\nACMAA\\nAA\\nA\") == \"1 4\\nMM\\nA\\nAA\\nAC\\nACMAA\"\nassert solution(\"3\\nACM\\nACM\\nACA\\nAMA\") == \"impossible\"\nassert solution(\"1\\nAM\\nMA\") == \"impossible\"\nassert solution(\"7\\nACM\\nAC\\nACA\\nACM\\nACM\\nAC\\nACA\") == \"impossible\"\nassert solution(\"7\\nAC\\nACM\\nACM\\nAC\\nACA\") == \"impossible\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\") == \"1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\"\nassert solution(\"3\\nACMA\\nACM\\nACA\\nAMA\") == \"impossible\"\nassert solution(\"1\\nAM\\nMA\") == \"impossible\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n\") == '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA'\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nnumber = int(input())\ncurrent = input()\n\npaths = []\nfor _ in range(number):\n    paths.append(input())"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n\") == '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\\n'\nassert solution(\"3\\nACMA\\nACM\\nACA\\nAMA\\n\") == 'impossible'\nassert solution(\"1\\nAM\\nMA\\n\") == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'impossible'\nassert solution('AACCMMAA\\nAC') == '1 4'\nassert solution('ACMA\\nACM') == 'impossible'\nassert solution('ACMAA\\nA') == '1 4'\nassert solution('A\\nAA') == '1 2'\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA') == '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA'\nassert solution('3\\nACMA\\nACM\\nACA\\nAMA') == 'impossible'\nassert solution('1\\nAM\\nMA') == 'impossible'\n\"\"\""
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n') == '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\\n'\nassert solution('3\\nACMA\\nACM\\nACA\\nAMA\\n') == 'impossible\\n'\nassert solution('1\\nAM\\nMA\\n') == 'impossible\\n'\nprint('The local tests are done. Click on \"Check\" for more details.')\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n') == '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA'\nassert solution('3\\nACMA\\nACM\\nACA\\nAMA\\n') == 'impossible'\nassert solution('1\\nAM\\nMA\\n') == 'impossible'\n\"\"\"\n\nimport sys\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    genetic_string = input()\n    genetic_list = [genetic_string]\n    for _ in range(n - 1):\n        genetic_string = input()\n        genetic_list.append(genetic_string)\n    genetic_string_set = set(genetic_list)\n\n    if len(genetic_string_set) == 1:\n        print('impossible')\n        continue\n    ans = [0, 0]\n    for i in range(len(genetic_string_set) - 1):\n        if genetic_string_set.issubset(genetic_string_set.intersection({genetic_list[i], genetic_list[i + 1]})):\n            ans[0] = ans[0] + 1\n            ans[1] = ans[1] + 1\n        else:\n            ans[0] = ans[0] + 1\n    print(*ans)\n"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n\") == \"1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\\n\"\n\n\"\"\""
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 1\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3') == '18.9029850746'\n\nassert solution('100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2') == '124'\n\nassert solution('100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2') == '124'"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2') == '124'\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\\n\") == \"3\"\nassert solution(\"10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3\\n\") == \"18.9029850746\"\n\"\"\""
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\") == \"3\"\nassert solution(\"10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3\") == \"18.9029850746\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\\n\") == \"3\"\n\"\"\"\nfrom collections import defaultdict\nimport math"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\\n\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\") == \"3\"\nassert solution(\"10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3\") == \"18.9029850746\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\n\"\"\"\n\nimport sys\nfrom typing import List\nfrom math import factorial"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\") == \"124\"\nassert solution(\"2 4 1\\n1 0.5 5\") == \"3\"\nassert solution(\"10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3\") == \"18.9029850746\""
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"2 1 2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"5 22\") == \"4 3 4 2\"\n\nimport io, os, sys, pytest"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(input()), 'Try again'\nprint('Correct')\n\n\"\"\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n') == '2 1 2'\nassert solution('2 1\\n') == '1'\nassert solution('5 22\\n') == '4 3 4 2'\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n2 1 2\\n') == '2 1 2'\nassert solution('2 1\\n1\\n') == '1'\nassert solution('5 22\\n4 3 4 2\\n') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n2 1 2') == '2 1 2'\nassert solution('2 1\\n1') == '1'\nassert solution('5 22\\n4 3 4 2') == '4 3 4 2'\n\"\"\""
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n\") == \"2 1 2\"\nassert solution(\"2 1\\n\") == \"1\"\nassert solution(\"5 22\\n\") == \"4 3 4 2\"\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\n\nimport itertools\nl = sorted(list(set(itertools.permutations([i for i in range(1, n)], n-1))))\nprint(l[k-1])\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n2 1 2\") == \"2 1 2\"\n\nassert solution(\"2 1\\n1\") == \"1\"\n\nassert solution(\"5 22\\n4 3 4 2\") == \"4 3 4 2\"\n\nassert solution(\"5 11\\n3 5 4 3\") == \"5 4 3\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n\") == \"2 1 2\"\n\"\"\"\nimport itertools\n\nnum_hated_number = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\nnum_hated_number = num_hated_number[0]\n\nall_possible_num = list(range(1, num_hated_number + 1))\n\nlst = []\nfor i in itertools.combinations_with_replacement(all_possible_num, len(all_possible_num) - 1):\n    if sum(i) % num_hated_number!= 0:\n        lst.append(i)\n\nlst = sorted(lst)\nfor i, j in enumerate(lst):\n    if i == int(stdin.split(\"\\n\")[1]) - 1:\n        print(\" \".join([str(i) for i in j]))\n        break\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == 2\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == 2\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n7 2\\n3 4\") == 0\n\n-----Problem-----\n1.The road graph G = (V, E) is a directed graph with $n$ vertices and $m$ edges where each edge $(u,v)$ is a one-way road from station $u$ to station $v$.\n2.Each station is identified by a positive integer $1 \\le u \\le n$, and each road is identified by a pair $(u,v)$, i.e. each road is a directed edge from station $u$ to station $v$.\n3.The road graph G is given in the standard input in the following format. Each line of the input contains two integers $u$ and $v$ that represent a one-way road from station $u$ to station $v$."
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n3 4\\n2 4') == '2'\nassert solution('7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4') == '2'\nassert solution('7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n7 2\\n3 4') == '0'\n\nprint('Success')\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 2\\n3 4') == '2'\nassert solution('7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4') == '2'\nassert solution('7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\") == \"0\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n1 2\\n1 3\") == \"2\"\nassert solution(\"2 6\\n1 2\\n2 3\\n3 4\") == \"2\"\nassert solution(\"3 4\\n1 2\\n1 3\\n2 3\") == \"0\"\nassert solution(\"3 8\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\") == \"0\"\n\"\"\"\n\nn, m = (int(i) for i in input().split())\n\nroad = [[] for i in range(n)]\n\nfor i in range(m):\n    a, b = (int(i) for i in input().split())\n    road[a - 1].append(b)\n    road[b - 1].append(a)"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == 2\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n7 2\\n3 4\") == \"0\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == \"20.0\"\nassert solution(\"-10 10\\n10.00 1.00\") == \"3.14159265\"\n\n----Solution----\n\n'''\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 0\") == \"20.0\"\nassert solution(\"-10 10\") == \"3.14159265\"\nassert solution(\"0 20\") == \"28.26445910\"\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\nINF = float(\"inf\")\n\nX, Y = map(int, input().split())\nV, W = map(float, input().split())"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''20 0\n1.00 0.10''') == '20.00000000'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 0\") == \"20.0\"\nassert solution(\"-10 10\") == \"3.14159265\"\n\"\"\"\n\nfrom math import atan, pi, sqrt\n\nclass Asteroid:\n    def __init__(self, x: float, y: float, v: float, w: float) -> None:\n        self.x = x\n        self.y = y\n        self.v = v\n        self.w = w\n        self.dx = 0\n        self.dy = 0\n        self.dx_ = 0\n        self.dy_ = 0\n        self.turn = 0\n        self.turn_ = 0\n        self.dturn = 0\n        self.dturn_ = 0\n        self.d = 0\n\n    def reset_all(self) -> None:\n        self.dx = 0\n        self.dy = 0\n        self.dx_ = 0\n        self.dy_ = 0\n        self.turn = 0\n        self.turn_ = 0\n        self.dturn = 0\n        self.dturn_ = 0\n        self.d = 0\n\n    def reset(self) -> None:\n        self.dx = 0\n        self.dy = 0\n        self.turn = 0\n        self.d = 0\n\n    def step(self) -> None:\n        self.dx += self.dx_\n        self.dy += self.dy_\n        self.d += self.d_\n        self.turn += self.turn_\n        self.x += self.dx\n        self.y += self.dy\n        self.dturn += self.dturn_\n        self.d += self.d_\n        if self.d > pi:\n            self.d -= 2 * pi\n        elif self.d < -pi:\n            self.d += 2 * pi\n        if self.turn > 0:\n            self.turn %= 2 * pi\n        elif self.turn < 0:\n            self.turn %= -2 * pi\n        if self.dturn > 0:\n            self.dturn %= 2 * pi\n        elif self.dturn < 0:\n            self.dturn %= -2 * pi"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20 0\\n1.00 0.10') == '20.0'\nassert solution('-10 10\\n10.00 1.00') == '3.14159265'\nassert solution('0 20\\n1.00 0.10') == '28.26445910'\n\n\"\"\"\n\nfrom math import pi, sqrt"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20 0\\n1.00 0.10') == '20.0'\nassert solution('-10 10\\n10.0 1.0') == '3.14159265'\n\nprint(solution(stdin))\n\"\"\"\n\nimport math"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(float(input())).\n\"\"\"\n\nx, y = [int(i) for i in input().split()]\nv, w = [float(i) for i in input().split()]\n\nx_miles = abs(x)\ny_miles = abs(y)\n\nx_miles_minutes = x_miles * 3600\ny_miles_minutes = y_miles * 3600\n\nminutes = x_miles_minutes + y_miles_minutes\n\nminutes_v_minutes = minutes * (v / 3600)\nminutes_w_minutes = minutes * (w / 3600)"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 0\\n1.00 0.10') == '20.0'\nassert solution('-10 10\\n10.0 1.0') == '3.14159265'\nassert solution('0 20\\n1.0 0.10') == '28.26445910'\n\"\"\"\nfrom math import atan2\nfrom typing import Tuple, Union\n"
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20 0\\n1.00 0.10') == '20.0'\nassert solution('-10 10\\n10.0 1.0') == '3.14159265'\nassert solution('0 20\\n1.0 0.1') == '28.26445910'\n\"\"\""
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == \"20.00000000\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n2 100\n1 100\n4 70\n3 70''') == '170'\nassert solution('''3\n2 120\n3 50\n2 80''') == '150'\n\n\"\"\""
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 100\\n1 100\\n4 70\\n3 70') == '170'\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5') == '0'\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == '0'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30') == '0'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 100\\n1 100\\n4 70\\n3 70\") == \"170\"\nassert solution(\"3 120\\n2 80\\n3 50\") == \"150\"\n\"\"\"\n\n\"\"\"\nTheorem:\n\na + b + c + d = total_amt\n\n(a + b) + (c + d) = (a + b) + (c + d) - a - b + c - d + total_amt\n\n(a + b) - a + (c + d) - c + (a + b) - a + (c + d) - c + total_amt\n\n(a + b) - a + (c + d) - c + total_amt\n\nb = a - c\n\nd = total_amt - b - a\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 100\\n1 100\\n4 70\\n3 70\\n') == 170\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 100\\n1 100\\n4 70\\n3 70\") == \"170\"\n\n\"\"\"\n\nimport sys\nimport re\nfrom collections import defaultdict\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\") == \"170\"\n\"\"\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 100\\n1 100\\n4 70\\n3 70') == '170'\n\n\"\"\""
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\") == \"170\"\nprint(solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\"))\nassert solution(\"3\\n2 120\\n3 50\\n2 80\") == \"150\"\nprint(solution(\"3\\n2 120\\n3 50\\n2 80\"))"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n4\n2 100\n1 100\n4 70\n3 70\n''') == '170'\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == 2\n\"\"\"\n\nfrom collections import defaultdict\nfrom heapq import heappush, heappop\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n2 4') == '2'\nassert solution('6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6') == '5'\nassert solution('10 5\\n3 9\\n1 7\\n1 3\\n2 4\\n5 1\\n5 6\\n5 7\\n4 8\\n6 9\\n7 8') == '3'\nassert solution('6 3\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5') == '3'\nassert solution('6 3\\n2 3\\n4 5\\n6 7\\n4 6\\n1 2') == '4'\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == '2'\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\") == '5'"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == \"2\"\n\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\") == \"5\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n2 4\\n') == '2'\nassert solution('6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\\n') == '5'\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == '2'\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\") == '5'\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\\n\") == \"2\"\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == 2\n\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\") == 5\n\n\"\"\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\") == 2\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0') == '0.5'\n\"\"\"\n\nfrom math import factorial\nfrom collections import deque\nfrom itertools import combinations"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\") == \"0.5\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\") == \"0.5\"\nassert solution(\"8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\") == \"0.0446429\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n1\n0\n2 1 2\n1 0\n1 0\n1 0\n1 0\n1 0\n\"\"\") == \"0.5\"\nassert solution(\"\"\"8\n6\n1 0 2 3 0 1\n7 1 2 3 4 5 6 7\n1 0\n2 0 3\n2 0 2\n1 0\n1 0\n1 0\n1 0\n1 0\n\"\"\") == \"0.0446429\"\n\nprint(\"Successfully solved!\")\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0') == '0.5'\nassert solution('8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2') == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0\\n1 0\\n1 0') == '0.5'\nassert solution('8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0') == '0.0446429'\nprint(solution(stdin.strip('\\n')))\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n1\n0\n2 1 2\n1 0\n1 0\n''') == '0.5'\nassert solution('''8\n6\n1 0 2 3 0 1\n7 1 2 3 4 5 6 7\n1 0\n2 0 3\n2 0 2\n1 0\n1 0\n1 0\n1 0\n''') == '0.0446429'\nprint(solution(input()))\n"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0') == '0.5'\nassert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0') == '0.5'\nassert solution('8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0') == '0.0446429'\n\"\"\"\n\nimport sys\nfrom math import factorial\nfrom collections import defaultdict, deque"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1\n\nprint(solution(input()))\n\n\"\"\"\n\nfrom math import factorial as f"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0') == '0.5'\nassert solution('8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 3\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0') == '0.0446429'\n\"\"\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 2 3 3 2 1') == '3\\n1 6 1'\nassert solution('4\\n1 2 1 2') == 'IMPOSSIBLE'\nassert solution('5\\n1 2 2 3 4 5') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"IMPOSSIBLE\"\nassert solution(\"4\\n1 2 1 3\") == \"2\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n1 2 3 3 2 1') == '3\\n1 6 1'\nassert solution('4\\n1 2 1 2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"IMPOSSIBLE\"\nassert solution(\"6\\n1 2 3 3 2 1\") == \"3\\n1 6 1\"\n\n'''"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 1 2') == '2 3'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == 'IMPOSSIBLE'\n\nimport sys\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 1 2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 2 2 3') == 'IMPOSSIBLE'\n\"\"\""
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('5\\n1 2 3 3 2 1') == '3'\nassert solution('4\\n1 2 1 2') == 'IMPOSSIBLE'\nassert solution('4\\n1 2 1 3') == '2'\nassert solution('4\\n2 1 2 3') == '1'\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == '1 3 2 4 5\\n'\nassert solution('3\\n1 2 3\\n') == 'IMPOSSIBLE'\nassert solution('1\\n1 2\\n') == 'IMPOSSIBLE'\nassert solution('1\\n1 1\\n') == '1 1 1'\nassert solution('1\\n1 1 2\\n') == '1 1 2 1'\n"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2 3 3 2 1\") == \"3\\n1 6 1\"\nassert solution(\"4\\n1 2 1 2\") == \"IMPOSSIBLE\"\nassert solution(\"4\\n1 2 1 2\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2\\n1 100\\n1 1\") == \"1 2 100\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n1 100\\n1 1\") == \"1 2 100\\n\"\nassert solution(\"2\\n5 10 20 30 40 50\\n2 28 27\\n\") == \"10 20 28 27 30 40 50\\n\"\n\n\"\"\""
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n1 100\\n1 1\") == \"1 2 100\\n\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 2\\n1 1\\n1 1') == '1 2 1 1'\n\"\"\""
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 100\") == \"1 100\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"5 10 20 30 40 50\") == \"10 20 28 27 30 40 50\"\nassert solution(\"5 10 20 30 40 50 2 28 27\") == \"10 20 28 27 30 40 50\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 2\n1 100\n1 1\n\"\"\") == '1 2 100'\nassert solution(\"\"\"\n2\n5 10 20 30 40 50\n2 28 27\n\"\"\") == '10 20 28 27 30 40 50'\n\"\"\""
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"3\\n1 2\\n1 100\\n1 1\"\n) == \"1 2 100\"\nassert solution(\n    \"2\\n5 10 20 30 40 50\\n2 28 27\"\n) == \"10 20 28 27 30 40 50\"\n\nprint(solution(stdin))\n\n------\n1\n2\n100\n1\n1\n----\n1\n2\n100\n1\n1\n\n100\n1\n1\n2\n2\n\n---\n1\n2\n100\n1\n1\n100\n1\n1\n2\n2\n\n10\n2\n2\n100\n1\n1\n100\n1\n1\n2\n2\n\n5\n10\n20\n30\n40\n50\n2\n28\n27\n\n---\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n28\n27\n30\n40\n50\n\n10\n20\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2\n5 10 20 30 40 50\n2 28 27\n\"\"\") == \"10 20 28 27 30 40 50\"\nassert solution(\"\"\"\n1\n1 100\n\"\"\") == \"1 100\"\n\"\"\""
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\n1 2\n1 100\n1 1\n\"\"\") == \"1 2 100\"\nassert solution(\"\"\"2\n5 10 20 30 40 50\n2 28 27\n\"\"\") == \"10 20 28 27 30 40 50\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n1 2\n1 100\n1 1\n\"\"\") == \"1 2 100\"\n\nassert solution(\"\"\"\n2\n5 10 20 30 40 50\n2 28 27\n\"\"\") == \"10 20 28 27 30 40 50\"\n\nprint(solution(input()))"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1') == '506'\nassert solution('0\\n') == '2600'\nassert solution('0\\nA B 1 1') == '0'\nassert solution('0\\nA A 1 1') == '0'\nassert solution('0\\nA Z 1 1') == '0'\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3\nAB 1 1\nAC 2 1\nBC 2 1\n\"\"\") == \"506\"\n\nprint(solution(\n\"\"\"\n3\nAB 1 1\nAC 2 1\nBC 2 1\n\"\"\"))\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\""
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0\\nAB 1 1\\nAC 2 1\\nBC 2 1\") == \"26\"\nassert solution(\"3\\nAB 1 1\\nAC 2 1\\nBC 2 1\") == \"506\"\n\"\"\""
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n\") == \"506\"\n\"\"\""
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0\\nAB 1 1\\nAC 2 1\\nBC 2 1\") == \"506\"\n\"\"\""
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n1 3\\n2 2\") == \"506\"\nassert solution(\"2 2\\n1 3\\n2 2\") == \"506\"\nassert solution(\"1 2\\n2 2\\n1 3\") == \"506\"\nassert solution(\"1 1\\n1 3\\n2 2\") == \"506\"\nassert solution(\"2 2\\n1 3\\n2 2\") == \"506\"\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nAB 1 1\\nAC 2 1\\nBC 2 1\") == \"506\"\n\"\"\"\n\nfrom collections import defaultdict, Counter\n"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0\\nAB 1 1\\nAC 2 1\\nBC 2 1\") == \"2\"\nassert solution(\"3\\nAB 1 1\\nAC 2 1\\nBC 2 1\") == \"506\"\nassert solution(\"50\\nBA 1 1\\nCA 2 1\\nDA 3 1\\nEA 4 1\\nFA 5 1\\nGA 6 1\\nHA 7 1\\nKA 8 1\\nLA 9 1\\nMA 10 1\\nNA 11 1\\nOA 12 1\\nPA 13 1\\nQA 14 1\\nRA 15 1\\nSA 16 1\\nUA 17 1\\nWA 18 1\\nXA 19 1\\nYQ 20 1\\nZA 21 1\") == \"7635\"\n\"\"\""
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0') == '2600'\nassert solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1') == '506'\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('()))') == 'impossible'\nassert solution(')(') == 'impossible'\n\"\"\"\n\n\"\"\"\n\ub9cc\uc57d \ub2eb\ud78c \uad04\ud638\uc640 \uc5ec\ub294 \uad04\ud638\uc758 \ub9ac\uc2a4\ud2b8 \uac12\uc774 \ub2e4\ub978 \uacbd\uc6b0, return 'impossible'\n\uc544\ub2c8\uba74 return 'possible'\n\"\"\""
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"()))\") == \"impossible\"\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('()))') == 'impossible'\nassert solution(')))(') == 'possible'\n\"\"\""
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()))\") == \"impossible\"\nassert solution(\"()))(\") == \"possible\"\n\"\"\""
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('()))') == 'possible'\nassert solution(')))(') == 'impossible'\n\n'''\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"()))\") == \"impossible\"\nassert solution(\")))(\") == \"possible\"\n\n\"\"\""
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()))\") == \"impossible\"\nassert solution(\"()))(\") == \"possible\""
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"()))\") == \"impossible\"\nassert solution(\"(()\") == \"possible\"\n\"\"\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"())\") == \"possible\"\nassert solution(\"()))((()\") == \"impossible\"\nassert solution(\"())))()\") == \"possible\"\nassert solution(\"()))))()\") == \"impossible\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"()))\") == \"impossible\"\nassert solution(\"())(\") == \"possible\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 2\n1 1800 3600 1800\n1 1900 3600 1600''') == \"impossible\"\nprint('Test pass.')\n\n-----Solution-----"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n\") == \"1800\"\n\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400') == '1800'\nassert solution('2 2\\n1 1800 3600 1800\\n1 1900 3600 1600') == 'impossible'\n\"\"\"\n\nimport sys\nimport os\nimport time\nfrom collections import deque\n\n\nclass Solution:\n    \"\"\"\n    Given a graph of delayed trains, use a breadth-first search to find the earliest time you can book a train for,\n    in order to earn a refund.\n    \"\"\"\n    @staticmethod\n    def solve(in_file: str, out_file: str) -> None:\n        sys.stdin = open(os.path.join(sys.path[0], in_file), \"r\")\n        sys.stdout = open(os.path.join(sys.path[0], out_file), \"w\")\n        start_time = time.time()\n\n        stations, trains = map(int, input().split())\n        departures = []\n        arrivals = []\n        delays = []\n        for _ in range(trains):\n            departures.append(list(map(int, input().split())))\n            arrivals.append(list(map(int, input().split())))\n            delays.append(list(map(int, input().split())))\n\n        # departure time is how many seconds from time 0 we have to get to the station\n        # arrival time is how many seconds from time 0 we have to get to the station + delay\n        #   so for example, a train going from 12:15 to 13:15 has a departure time of 15 * 60 + 15 = 900,\n        #   a arrival time of 16:15 has a departure time of 16 * 60 + 15 = 825\n        departures.sort(key=lambda tup: tup[0])\n        arrivals.sort(key=lambda tup: tup[0])\n        delays.sort(key=lambda tup: tup[0])\n        time_to_travel = departures[0][0] * 60 + departures[0][1]\n        earliest_time = departures[0][0] * 60 + departures[0][1] + arrivals[0][1]\n        current_arrival = departures[0][0] * 60 + departures[0][1] + delays[0][1]\n        for departure, arrival, delay in zip(departures, arrivals, delays):\n            if departure[0] * 60 + departure[1] + delay[1] <= earliest_time and arrival[0] * 60 + arrival[1] + delay[1] <= current_arrival:\n                earliest_time = departure[0] * 60 + departure[1] + delay[1]\n                current_arrival = arrival[0] * 60 + arrival[1] + delay[1]\n\n        print(earliest_time)\n        print(f'Execution time: {time.time() - start_time}')\n"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n') == '1800'\n\nassert solution('2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\\n') == 'impossible'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n'''\n"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400''') == '1800'\n\nassert solution('''2 2\n1 1800 3600 1800\n1 1900 3600 1600''') == 'impossible'\n"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400''') == '1800'\nassert solution('''2 2\n1 1800 3600 1800\n1 1900 3600 1600''') == 'impossible'\nassert solution('''2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n1 2200 9400 1800\n1 2200 9400 1600''') == '1800'\n\n\"\"\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\") == \"1800\"\nassert solution(\"2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\") == \"1800\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400''') == '1800'\nassert solution('''2 2\n1 1800 3600 1800\n1 1900 3600 1600''') == 'impossible'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2') == 'A1-B2 B1-A2 A3-B3'\nassert solution('2 3') == 'A1-B1 A2-C2 B2-C1'\nassert solution('3 3') == 'A1-B1 A2-C1 B2-C2'\nassert solution('2 4') == 'A1-B1 A2-C2 B2-D2 C2-D1 C3-A3'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"A1-B2 B1-A2 A3-B3 A2-C2 B2-C1 C2-A3\"\n\"\"\""
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n') == 'A1-B2 B1-A2 A3-B3\\nA2-B3 B2-A3 A1-B1\\nA3-B1 B3-A1 A2-B2'\n\nSolution1:\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\\nA2-B3 B2-A3 A1-B1\\nA3-B1 B3-A1 A2-B2\\n\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1\\n\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1\\n\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1\\n\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1\\n\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\nassert solution(\"2 4\") == \"A1-B1 A2-C2 B2-C1 A3-D1 D1-C2\"\nassert solution(\"1 1\") == \"A1-A1\"\nassert solution(\"3 3\") == \"A1-B1 A2-C2 B2-A2 B3-A3 C1-B1 C2-A1 C3-B2\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(2) +'' + str(3)) == 'A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1'\nassert solution(str(3) +'' + str(3)) == 'A1-B1 A2-B2 A3-B3\\nA1-B2 A2-C1 A3-C2 B1-C1 B2-C2\\nA1-C1 A2-C2 A3-B1 B3-B2'\n\"\"\""
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n') == 'A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1'\n\"\"\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2') == 'A1-B2 B1-A2 A3-B3\\nA2-B3 B2-A3 A1-B1\\nA3-B1 B3-A1 A2-B2'\n\nassert solution('2 3') == 'A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1'\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3, 2) == 'A1-B2 B1-A2 A3-B3'\n\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nplayers = {i: None for i in range(1, n+1)}\nres = []\nfor _ in range(m):\n    res.append([i for i in sys.stdin.readline().strip().split()])\nfor i in range(m-1):\n    for j in range(i+1, m):\n        t = [players[int(k[1])] for k in res[i]] + [players[int(k[0])] for k in res[j]]\n        if len(set(t)) == n:\n            continue\n        t.sort()\n        for k in range(n):\n            if t[k] is not None:\n                res[i][k] = str(t[k])\n                res[j][k] = str(t[k])\n                break\nfor i in range(n):\n    print(' '.join(res[j][i] for j in range(m)))\n"
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3') == 'A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1'\nassert solution('3 2') == 'A1-B1 B2-A2\\nA1-B2 A2-B1\\nA1-A2 A2-A1\\nB1-B2 B2-B1\\nB1-A2 A2-B2\\nB1-B2 B2-A2'\nassert solution('3 3') == 'A1-A2 A2-B1 B1-A3 B2-A1 B3-A2\\nA2-B1 B1-B2 A2-A3 B2-B3\\nA1-A3 A3-B2 B3-A3 B2-B1\\nA2-B2 B2-A3 B3-B2 B1-A3'\nassert solution('3 4') == 'A1-A3 A3-B2 B3-A3 B2-B1\\nA2-A4 A3-B2 B3-A4 B1-B2\\nA1-B3 A2-B3 B2-A3 B3-A1\\nA1-B3 A2-A4 A4-B3 B3-B2\\nA2-B2 B2-A3 B3-B2 B1-A3'\nassert solution('1 1') == 'A1-A1'\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n..\\n..') == '7'\nassert solution('4 4\\nX.XX\\nX..X\\n..X.\\n..XX') == '9'\n\n\"\"\""
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n..\\n..') == '7'\nassert solution('4 4\\nX.XX\\nX..X\\n..X.\\n..XX') == '9'\nprint('Test passed\\n')\n\"\"\""
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n..\\n..') == 7\n\"\"\""
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n..\\n..\") == \"7\"\nassert solution(\"4 4\\nX.XX\\nX..X\\n..X.\\n..XX\") == \"9\"\n\nprint(\"Hooray!\")\n\n\"\"\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n..\\n..') == '7'\nassert solution('4 4\\nX.XX\\nX..X\\n..X.\\n..XX') == '9'\n\n\"\"\"\n\nimport math\n\nimport pytest\n\n\n@pytest.mark.parametrize('stdin, expected', [\n    ('2 2\\n..\\n..', '7'),\n    ('4 4\\nX.XX\\nX..X\\n..X.\\n..XX', '9'),\n])\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n..\\n..\") == 7\n\"\"\"\n\nimport math"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n..\\n..') == '7'\nassert solution('4 4\\nX.XX\\nX..X\\n..X.\\n..XX') == '9'\n\"\"\"\n\nimport sys\nfrom collections import namedtuple\n\nGrid = namedtuple('Grid', ('rows', 'columns'))\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n..\\n..\") == 7\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '2 2\\n.\\n.\\n'\n) == '7\\n'\n\nassert solution(\n    '4 4\\nX..\\nX..\\nX..\\nX..\\n'\n) == '9\\n'\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n..\\n..\") == \"7\"\nassert solution(\"4 4\\nX.XX\\nX..X\\n..X.\\n..XX\") == \"9\"\n\"\"\"\n\nfrom itertools import product\nimport unittest"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n3 3 2 2 100\\n1 1 1 1 500') == '600'\n\n\"\"\"\nfrom math import inf\nfrom sys import stdin"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 3 2 2 100\\n1 1 1 1 500\") == 600\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 3 2 2 100\\n1 1 1 1 500\") == \"600\"\nassert solution(\"2\\n2 0 2 1 100\\n6 0 8 1 1\") == \"100\""
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"3\", \"Test 1\"\nassert solution(\"2 2 4 6\") == \"12\", \"Test 2\"\n\"\"\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n3 3 2 2 100\\n1 1 1 1 500') == '600'\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3 3 2 2 100\\n1 1 1 1 500\\n') == 600\n\"\"\"\n\n\nimport sys\n\nfrom typing import Tuple\nfrom collections import namedtuple\n\nPair = Tuple[int, int]\n\nTarotCard = namedtuple('TarotCard', 'r c a b')\n\nTarot = namedtuple('Tarot', 'cards')\n\nassert Tarot((TarotCard(2, 3, 2, 2, 100),)) == Tarot((TarotCard(2, 3, 2, 2, 100),))\n\nassert Tarot((TarotCard(1, 1, 1, 1, 500),)) == Tarot((TarotCard(1, 1, 1, 1, 500),))\n\nassert Tarot((TarotCard(1, 1, 1, 1, 100),))!= Tarot((TarotCard(2, 3, 2, 2, 100),))\n\nassert Tarot((TarotCard(6, 0, 8, 1, 1),))!= Tarot((TarotCard(1, 1, 1, 1, 500),))\n\nTarot = namedtuple('Tarot', 'cards price')\n\nTarotCard = namedtuple('TarotCard', 'r c a b p')\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3 3 2 2 100\\n1 1 1 1 500\\n\") == \"600\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == -1\nassert solution('1\\n') == -1\nassert solution('2\\n') == -1\nassert solution('3\\n') == -1\nassert solution('4\\n') == -1\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2\n3 3 2 2 100\n1 1 1 1 500\n''') == '600'\n\nassert solution('''\n1\n6 0 8 1 1\n''') == '100'\n\nassert solution('''\n3\n0 0 0 0 0\n1 0 0 0 0\n1 0 0 0 0\n''') == '-1'\n\nassert solution('''\n4\n0 0 0 0 0\n0 0 0 0 0\n1 1 1 1 1\n1 1 1 1 1\n''') == '-1'\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n3 3 2 2 100\\n1 1 1 1 500') == '600'\nassert solution('2\\n2 0 2 1 100\\n6 0 8 1 1') == '100'\n\n\"\"\"\n\n\nfrom collections import deque\nimport sys\n\nINF = sys.maxsize\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"361\") == 3\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('361') == 3\nassert solution('11') == 0\n\"\"\"\n\nn = int(input())\ns = input()"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('361') == 3\nassert solution('11') == 0\n\"\"\""
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"361\") == 3\nassert solution(\"11\") == 0\n\"\"\""
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('361') == 3\nassert solution('11') == 0\n\nprint(solution(input()))\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"361\") == 3\n\"\"\""
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"361\") == 3\nassert solution(\"11\") == 0\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\ns = int(input())\n\ndp = [0 for _ in range(s + 1)]\n\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, s + 1):\n    if i % 3 == 0:\n        dp[i] = (dp[i - 1] + dp[i - 2]) % (10 ** 9 + 7)\n    else:\n        dp[i] = dp[i - 1]\n\nprint(dp[-1])"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"361\") == 3\nassert solution(\"11\") == 0\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('361') == 3\nassert solution('11') == 0"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"361\") == 3\nassert solution(\"11\") == 0\nassert solution(\"123\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n11 5') == '10'\nassert solution('3 10\\n2 100\\n1 10\\n13 5') == 'cancel road trip'\nassert solution('3 10\\n2 100\\n1 10\\n4 100') == 'cancel road trip'\nassert solution('3 10\\n2 100\\n1 10\\n4 5') == 'cancel road trip'\nassert solution('3 10\\n2 100\\n1 10\\n4 0') == '10'\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n11 5') == '10'\nassert solution('3 10\\n2 100\\n1 10\\n13 5') == 'cancel road trip'\n\"\"\"\nimport math\n\nn, g = map(int, input().split())\ngas_stations = []\nfor _ in range(n):\n    d, c = map(int, input().split())\n    if d < c:\n        print('cancel road trip')\n    gas_stations.append((d, c))\n\ngas_stations.sort(key=lambda x: x[0])\n\ncost = 0\ncurr_cost = g\ncurr_station = 0\nwhile curr_cost >= 0 and curr_station < len(gas_stations):\n    cost = curr_cost\n    curr_cost -= gas_stations[curr_station][1]\n    if curr_cost >= 0:\n        curr_station += 1\n\nprint(cost)\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n11 5') == '10'\nassert solution('3 10\\n2 100\\n1 10\\n13 5') == 'cancel road trip'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10\\n2 100\\n1 10\\n11 5\") == \"10\"\nassert solution(\"3 10\\n2 100\\n1 10\\n13 5\") == \"cancel road trip\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\\n2 100\\n1 10\\n11 5\") == \"10\"\nassert solution(\"3 10\\n2 100\\n1 10\\n13 5\") == \"cancel road trip\"\n\"\"\""
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\\n2 100\\n1 10\\n11 5\") == \"10\"\nassert solution(\"3 10\\n2 100\\n1 10\\n13 5\") == \"cancel road trip\"\n\"\"\"\nimport math\n\nn, g = map(int, input().split())\ngas_stations = [0] + [int(input()) for _ in range(n)]\n\nmin_cost = math.inf\nfor i in range(n):\n    cost = 0\n    while True:\n        if gas_stations[i] - gas_stations[i + 1] > g:\n            break\n        cost += gas_stations[i] - gas_stations[i + 1]\n        gas_stations[i + 1] = gas_stations[i]\n    min_cost = min(cost, min_cost)\n\nprint(min_cost if min_cost!= math.inf else \"cancel road trip\")\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n11 5') == '10'\nassert solution('3 10\\n2 100\\n1 10\\n13 5') == 'cancel road trip'\n\"\"\"\n\n\"\"\"\nhttps://leetcode.com/problems/the-maze/discuss/720313/Python-BFS%2BDFS-with-diagram\n\nhttps://www.geeksforgeeks.org/car-rental-problem-dp-31/\n\nhttps://www.geeksforgeeks.org/minimum-number-of-refueling-stops-to-reach-destination/\n\nhttps://www.youtube.com/watch?v=3VzDfHgK7Bw\n\nhttps://www.youtube.com/watch?v=p-MkYX7kK7E\n\nhttps://www.youtube.com/watch?v=YpUt31_4aVw\n\nhttps://www.youtube.com/watch?v=hWl3wv6pABQ\n\nhttps://www.youtube.com/watch?v=5cPzm5FeXuw\n\nhttps://www.youtube.com/watch?v=g6j0PnM-u7E\n\nhttps://www.youtube.com/watch?v=3aQSjGg7NGE\n\nhttps://www.youtube.com/watch?v=N2G5GZ9uC9w\n\nhttps://www.youtube.com/watch?v=6xvLfCXR7jE\n\nhttps://www.youtube.com/watch?v=9gGfV2sYVbU\n\nhttps://www.youtube.com/watch?v=M1Y7K6G7KfE\n\nhttps://www.youtube.com/watch?v=vTt6ZnT78H0\n\nhttps://www.youtube.com/watch?v=QGqYUvjVkYM\n\nhttps://www.youtube.com/watch?v=uN9ui3Sgxew\n\nhttps://www.youtube.com/watch?v=1szEeJf2r2k\n\nhttps://www.youtube.com/watch?v=6sGzSWm8_2c\n\nhttps://www.youtube.com/watch?v=9NxQn0cVcOc\n\nhttps://www.youtube.com/watch?v=BSGJdZuwqOE\n\nhttps://www.youtube.com/watch?v=Ee5eXW16qgY\n\nhttps://www.youtube.com/watch?v=fqVz8rVZWJA\n\nhttps://www.youtube.com/watch?v=3zXbq3YUp9E\n\nhttps://www.youtube.com/watch?v=rqYtE0kQQ4M\n\nhttps://www.youtube.com/watch?v=wF4E1LeMiyQ\n\nhttps://www.youtube.com/watch?v=vtF6hqjVq0c\n\nhttps://www.youtube.com/watch?v=v9Uf0z6eVrk\n\nhttps://www.youtube.com/watch?v=sNnLXNrMvWk\n\nhttps://www.youtube.com/watch?v=zKJ1u8dcPpw\n\nhttps://www.youtube.com/watch?v=t9WZ1qYG6qk\n\nhttps://www.youtube.com/watch?v=O0tBqt6E8Vc\n\nhttps://www.youtube.com/watch?v=W2f2GpvrrX0\n\nhttps://www.youtube.com/watch?v=Yc_vzJzL7FI\n\nhttps://www.youtube.com/watch?v=0W9_BgXhcDg\n\nhttps://www.youtube.com/watch?v=M8_EgMb8kI8\n\nhttps://www.youtube.com/watch?v=G9W57BQ2nQ4\n\nhttps://www.youtube.com/watch?v=9cwTFg6Pw0k\n\nhttps://www.youtube.com/watch?v=Q9qkX2X8E48\n\nhttps://www.youtube.com/watch?v=VnJQZKJz0c4\n\nhttps://www.youtube.com/watch?v=g_rXx5LEuPk\n\nhttps://www.youtube.com/watch?v=dbCeeZnq0qk\n\nhttps://www.youtube.com/watch?v=Rx3mqbfrvRI\n\nhttps://www.youtube.com/watch?v=oTnPvW2U-Mw\n\nhttps://www.youtube.com/watch?v=A8vCIDq8E5M\n\nhttps://www.youtube.com/watch?v=GpmntMZYqQ8\n\nhttps://www.youtube.com/watch?v=NdERv2y7XsE\n\nhttps://www.youtube.com/watch?v=U4ak4X5B7B8\n\nhttps://www.youtube.com/watch?v=1iVmRjY3dD4\n\nhttps://www.youtube.com/watch?v=o0zKwT-tWU4\n\nhttps://www.youtube.com/watch?v=WkH5nhWQhR8\n\nhttps://www.youtube.com/watch?v=e-Uf8NwZd0s\n\nhttps://www.youtube.com/watch?v=nwA6Dz7sUvU\n\nhttps://www.youtube.com/watch?v=rNQh0iXqx98\n\nhttps://www.youtube.com/watch?v=M4sWrXnFzqc\n\nhttps://www.youtube.com/watch?v=nA1PnoqYbqE\n\nhttps://www.youtube.com/watch?v=rK4TmNQU3YI\n\nhttps://www.youtube.com/watch?v=gFDa2m-RQfM\n\nhttps://www.youtube.com/watch?v=0N-7mVQo04I\n\nhttps://www.youtube.com/watch?v=0mY2G4EZ7q8\n\nhttps://www.youtube.com/watch?v=kHnfYzmR5ME\n\nhttps://www.youtube.com/watch?v=e_M"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10\\n2 100\\n1 10\\n11 5\") == \"10\"\nassert solution(\"3 10\\n2 100\\n1 10\\n13 5\") == \"cancel road trip\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '5'\nassert solution('2\\n2\\n1') == 'cancel road trip'\n"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 9\\n3 8\") == \"1 8 9 9 100 101 108 109 109\"\nassert solution(\"4 9\\n2 8\\n3 8\\n2 7\\n2 4\\n3 8\") == \"0 7 8 11 15 16 19\"\nprint('Passed')\n\"\"\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n2 3\\n1 2\\n3 4\") == \"0 7 8 11 15 16 19\"\nassert solution(\"2 5\\n2 5\\n1 2\\n3 4\\n5 6\") == \"0 8 9 13\"\nassert solution(\"2 1\\n2 1\\n1 2\\n1 2\\n1 1\\n1 1\") == \"0 1 1 1 1\"\nassert solution(\"2 2\\n2 2\\n1 2\\n1 2\\n1 2\\n1 2\") == \"0 2 2 2 2 2\"\nassert solution(\"2 3\\n2 3\\n1 2\\n3 4\") == \"0 7 8 9 9 100 101 108 109 109\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 9\\n2 8\\n1 1\\n3 4\\n5 100') == '1 8 9 9 100 101 108 109 109'\nprint('Hooray!')\n\n// Use the following template to generate test cases and solutions.\n// 1. Make the following modifications to your program:\n// - Add code to your program that prompts the user to enter the number of knapsacks and the knapsacks capacity.\n// - Add code to your program that prompts the user to enter the size and value of each jewel.\n// - Add code to your program that prompts the user to enter the number of jewels that must be stolen.\n// 2. Complete the following template to generate test cases and solutions for your program.\n// The first line of each test case should be a single integer $t$, which is the number of test cases. The first line of each test case should be the number of knapsacks ($1 \\le n \\le 10^6$) and the knapsack capacity ($1 \\le k \\le 10^6$. The second line should consist of $n$ space-separated integers $s_1, \\ldots, s_n$, where $1 \\le s_i \\le 300$, where $i$ is the ith jewel, and $s_i$ is the size of the $i$th jewel. The following $n$ lines should consist of $s_i$ space-separated integers $v_1, \\ldots, v_n$, where $1 \\le v_i \\le 10^9$, where $i$ is the ith jewel, and $v_i$ is the value of the $i$th jewel.\n// 3. The ith line of the last test case should be a single integer $m$, which is the number of jewels that must be stolen.\nimport sys\nimport os\nimport io\n"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n\n-----Problem-----\n\nYou are working for the museum of incredible dull things. Currently, there are $n$ exhibits in the collection. Their names are the numbers $0,1,...$, $n-1$. If you want to display the collection, you are supposed to put them in the order $0,1,2,...$, $1,2,3,...$, $2,3,4,...$, $3,4,5,...$.\n\nYou are going to rearrange the collection. Every day, you are going to select any $m$ exhibits to display for the rest of the day. You will use these $m$ exhibits to create a beautiful arrangement.\n\nYou are going to choose the $m$ exhibits you will display such that the number of different ways to arrange the selected exhibits is maximal.\n\nAs the museum owner, you know every exhibit can be rearranged into an unlimited number of different arrangements. You don't care which arrangement is the best, you just want to know the number of arrangements possible.\n\nThe first line of input will consist of two space-separated integers $n$ and $m$ (1 \\le n \\le 10^5, 1 \\le m \\le n$).\n\nIn the next $n$ lines, each line will contain $m$ distinct space-separated integers. The $i$th integer in the $i$th\u00a0line will represent the index of the $i$th exhibit in the collection. Each of these indices will be in the range $0,1,...,n-1$\n\nOutput the number of possible arrangements of the selected exhibits in the order given by the collection.\n\n-----Sample Input-----\n3 3\n0 1 2\n1 2 0\n2 0 1\n-----Sample Output-----\n4\n\n-----Explanation-----\nThe collection is $0,1,2$, which can be arranged in four different ways.\n\n[[0,1,2]]\n[0,2,1]\n[2,0,1]\n[2,1,0]\n\nThe maximum number of different arrangements is 4.\n\n-----Sample Input-----\n3 2\n0 1 2\n0 2 1\n1 0 2\n-----Sample Output-----\n3\n\n-----Explanation-----\nThe collection is $0,1,2$, which can be arranged in three different ways.\n\n[[0,1,2]]\n[0,2,1]\n[2,0,1]\n\nThe maximum number of different arrangements is 3.\n\n-----Sample Input-----\n1 10\n0\n-----Sample Output-----\n10\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 9\\n2 8\\n1 1\\n3 4\\n5 100\\n\") == \"1 8 9 9 100 101 108 109 109\"\nassert solution(\"5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8\\n\") == \"0 7 8 11 15 16 19\"\n\"\"\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 9\\n2 8\\n1 1\\n3 4\\n5 100') == '1 8 9 9 100 101 108 109 109'\nassert solution('5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8') == '0 7 8 11 15 16 19'"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 9\\n2 8\\n1 1\\n3 4\\n5 100\") == \"1 8 9 9 100 101 108 109 109\"\nassert solution(\"5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8\") == \"0 7 8 11 15 16 19\"\n\nprint(\"Success\")\n'''"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 9\\n2 8\\n1 1\\n3 4\\n5 100\") == \"1 8 9 9 100 101 108 109 109\"\nassert solution(\"5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8\") == \"0 7 8 11 15 16 19\""
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 9\\n2 8\\n1 1\\n3 4\\n5 100') == '1 8 9 9 100 101 108 109 109'\n\"\"\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 9\\n2 8\\n1 1\\n3 4\\n5 100\") == \"1 8 9 9 100 101 108 109 109\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == 3\n\"\"\"\n\nfrom math import sqrt\n\nclass Solution:\n    def findMaxMinions(self, n: int, m: int, r: int, x: int, y: int, r2: int) -> int:\n        # Calculate the distance to each of the m enemies and select the nearest one to attack\n        def dist(x, y):\n            return sqrt((x - x2)**2 + (y - y2)**2)\n        \n        enemies = []\n        for i in range(m):\n            x2, y2 = map(int, stdin.readline().split())\n            enemies.append((dist(x, y), (x2, y2)))\n            \n        enemies.sort()\n        min_dist = enemies[0][0]\n        \n        if min_dist > r2:\n            # Too far, no minion will be attacked\n            return 0\n        elif min_dist <= r:\n            # The nearest enemy minion will be attacked\n            return 1\n        else:\n            # The nearest enemy minion and one of Liam's villages will be attacked\n            return 2\n        \nsolution = Solution()\nassert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == 3\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == 3\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n\"\"\") == \"1\"\nassert solution(\"\"\"1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n\"\"\") == \"3\"\n\"\"\""
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0') == '1'\n\"\"\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"1\"\n\"\"\"\n\nimport sys\nfrom typing import List\nimport unittest\n\nclass TestCase(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\"), \"1\")\n\n    def test_2(self):\n        self.assertEqual(solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\"), \"3\")"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"1\""
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"1\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"3\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"1\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"1\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"3\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"1\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"3\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"4\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\\n3 -3\") == \"6\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\") == \"1\"\n\nSample Case #1\n1\n2\n2\n\nSample Case #2\n2\n2\n0\n\nSample Case #3\n1\n1\n2\n\nSample Case #4\n2\n2\n2\n\nSample Case #5\n5\n2\n3\n\nSample Case #6\n2\n5\n2\n\nSample Case #7\n1\n6\n2\n\nSample Case #8\n2\n4\n2\n\nSample Case #9\n1\n3\n1\n\nSample Case #10\n1\n3\n0\n\nSample Case #11\n3\n1\n1\n\nSample Case #12\n2\n3\n3\n\nSample Case #13\n2\n5\n1\n\nSample Case #14\n1\n5\n3\n\nSample Case #15\n1\n5\n1\n\nSample Case #16\n2\n7\n1\n\nSample Case #17\n1\n5\n1\n\nSample Case #18\n2\n6\n1\n\nSample Case #19\n1\n5\n0\n\nSample Case #20\n2\n4\n2\n\nSample Case #21\n2\n5\n1\n\nSample Case #22\n3\n3\n1\n\nSample Case #23\n2\n4\n3\n\nSample Case #24\n1\n3\n0\n\nSample Case #25\n1\n4\n0\n\nSample Case #26\n1\n5\n0\n\nSample Case #27\n1\n5\n2\n\nSample Case #28\n1\n5\n1\n\nSample Case #29\n2\n5\n3\n\nSample Case #30\n1\n4\n0\n\nSample Case #31\n1\n3\n2\n\nSample Case #32\n1\n3\n0\n\nSample Case #33\n2\n3\n1\n\nSample Case #34\n2\n5\n0\n\nSample Case #35\n2\n5\n0\n\nSample Case #36\n2\n5\n1\n\nSample Case #37\n2\n5\n0\n\nSample Case #38\n1\n5\n1\n\nSample Case #39\n1\n5\n0\n\nSample Case #40\n1\n5\n1\n\nSample Case #41\n1\n5\n0\n\nSample Case #42\n1\n5\n1\n\nSample Case #43\n1\n5\n0\n\nSample Case #44\n2\n5\n1\n\nSample Case #45\n1\n5\n1\n\nSample Case #46\n2\n5\n1\n\nSample Case #47\n1\n5\n1\n\nSample Case #48\n1\n5\n0\n\nSample Case #49\n2\n5\n0\n\nSample Case #50\n2\n5\n0\n\nSample Case #51\n1\n5\n0\n\nSample Case #52\n2\n5\n0\n\nSample Case #53\n1\n5\n1\n\nSample Case #54\n1\n5\n0\n\nSample Case #55\n1\n5\n2\n\nSample Case #56\n2\n5\n1\n\nSample Case #57\n1\n5\n1\n\nSample Case #58\n1\n5\n0\n\nSample Case #59\n2\n5\n2\n\nSample Case #60\n1\n5\n0\n\nSample Case #61\n1\n5\n0\n\nSample Case #62\n1\n5\n0\n\nSample Case #63\n1\n5\n0\n\nSample Case #64\n2\n5\n0\n\nSample Case #65\n1\n5\n1\n\nSample Case #66\n1\n5\n1\n\nSample Case #67\n1\n5\n1\n\nSample Case #68\n1\n5\n0\n\nSample Case #69\n1\n5\n1\n\nSample Case #70\n1\n5\n1\n\nSample Case #71\n1\n5\n1\n\nSample Case #72\n1\n5\n1\n\nSample Case #73\n1\n5\n0\n\nSample Case #74\n1\n5\n1\n\nSample Case #75\n1\n5\n0\n\nSample Case #76\n1\n5\n1\n\nSample Case #77\n1\n5\n1\n\nSample Case #78\n1\n5\n1\n\nSample Case #79\n1\n5\n1\n\nSample Case #80\n1\n5\n1\n\nSample Case #81\n1\n5\n1\n\nSample Case #82\n1\n5\n0\n\nSample Case #83\n2\n5\n1\n\nSample Case #84\n1\n5\n0\n\nSample Case #85\n2\n5\n1\n\nSample Case #86\n2\n5\n0\n\nSample Case #87\n2\n5\n0\n\nSample Case #88\n1\n5\n1\n\nSample Case #89\n1\n5\n1\n\nSample Case #90\n2\n5\n0\n\nSample Case #91\n1\n5\n0\n\nSample Case #92\n1\n5\n1\n\nSample Case #93\n2\n5\n0\n\nSample Case #94\n2\n5\n0\n\nSample Case #95\n1\n5\n2\n\nSample Case #96\n1\n5\n0\n\nSample Case #97\n1\n5\n0\n\nSample Case #98\n2\n5\n0\n\nSample Case #99\n1\n5\n1\n\nSample Case #100\n1\n5\n0\n\nSample Case #101\n1\n5\n1\n\nSample Case #102\n1\n5\n0\n\nSample Case #103\n1\n5\n1\n\nSample Case #104\n1\n5\n0\n\nSample Case #105\n1\n5\n1\n\nSample Case #106\n2\n5\n2\n\nSample Case #107\n1\n5\n1\n\nSample Case #108\n1\n5\n0\n\nSample Case #109\n1\n5\n1\n\nSample Case #110\n1\n5\n1\n\nSample Case #111\n1\n5\n0\n\nSample Case #112\n1\n5\n0\n\nSample Case #113\n1\n5\n1\n\nSample Case #114\n1\n5\n0\n\nSample Case #115\n1\n5\n1\n\nSample Case #116\n1\n5\n0\n\nSample Case #117\n1\n5\n0\n\nSample Case #118\n1\n5\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1\\n1\\n1\\n1\\n\") == \"2\\n2\\n2\\n2\\n0\\n\"\nassert solution(\"5 10000\\n1\\n1\\n1\\n1\\n\") == \"4\\n4\\n2\\n2\\n0\\n\"\nassert solution(\"5 9\\n1\\n1\\n10\\n1\\n9\\n\") == \"2\\n0\\n0\\n2\\n0\\n0\\n\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 10000\\n1\\n1\\n1\\n1\\n') == '4\\n4\\n2\\n2\\n0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1') == '4\\n4\\n2\\n2\\n0'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9') == '2\\n0\\n0\\n2\\n0'"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10000\\n1\\n1\\n1\\n1\\n1\") == \"4\\n4\\n2\\n2\\n0\"\nassert solution(\"5 9\\n1\\n1\\n10\\n1\\n9\") == \"2\\n0\\n0\\n2\\n0\"\nassert solution(\"5 10000\\n1\\n1\\n10\\n1\\n9\") == \"2\\n0\\n0\\n2\\n0\"\n\nprint(solution(\"5 10000\\n1\\n1\\n10\\n1\\n9\"))"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5 10000\n1\n1\n1\n1\n1\"\"\") == \"\"\"4\n4\n2\n2\n0\"\"\"\nassert solution(\"\"\"5 9\n1\n1\n10\n1\n9\"\"\") == \"\"\"2\n0\n0\n2\n0\"\"\"\n\"\"\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(\"sample_input_1.txt\").read()) == [4, 4, 2, 2, 0]\nassert solution(open(\"sample_input_2.txt\").read()) == [2, 0, 0, 2, 0]"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 10000\n1\n1\n1\n1\n1\"\"\") == \"\"\"4\n4\n2\n2\n0\"\"\"\n\nassert solution(\"\"\"5 9\n1\n1\n10\n1\n9\"\"\") == \"\"\"2\n0\n0\n2\n0\"\"\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10000\\n1\\n1\\n1\\n1\\n1\") == \"4\\n4\\n2\\n2\\n0\"\nassert solution(\"5 9\\n1\\n1\\n10\\n1\\n9\") == \"2\\n0\\n0\\n2\\n0\"\n\"\"\"\n\nimport sys\n\nn, s = map(int, sys.stdin.readline().split())\na = [int(sys.stdin.readline()) for i in range(n)]\n\nl, r = 0, 0\ncur = 0\nans = 0\n\nfor i in range(n):\n    cur += a[i]\n    while cur > s:\n        cur -= a[l]\n        l += 1\n    ans = max(ans, i - l + 1)\n\nsys.stdout.write(str(ans) + '\\n')\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10000\\n1\\n1\\n1\\n1\\n1\") == \"4\\n4\\n2\\n2\\n0\"\nassert solution(\"5 9\\n1\\n1\\n10\\n1\\n9\") == \"2\\n0\\n0\\n2\\n0\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1') == '4\\n4\\n2\\n2\\n0'\n"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdrin) == \"DA\" or solution(stdin) == \"NE\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"kava\") == \"DA\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"ak\") == \"DA\"\n\"\"\""
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"kava\") == \"DA\"\n\"\"\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ne') == 'NE'\nassert solution('kava') == 'DA'\n\"\"\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"kava\") == \"DA\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 - 1\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \"cat\" \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u0434\u0432\u0430 \u0440\u0430\u0437\u0430.\n\nSample Input:\ncatcat\ncat and cat\ncatac\ncat\nccaatt\n\nSample Output:\ncatcat\ncat and cat\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"kava\") == \"DA\"\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1\n\n#####################################################################################################################################################################################################################\n\nComplete the solution so that it takes a single argument, the initial number of points, and outputs a single number corresponding to the number of points after the player's last move.\n\nSample Input:\n1\n\nSample Output:\n1"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"kava\") == \"DA\""
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ne') == 'NE'\nassert solution('kava') == 'DA'"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ne\") == \"NE\"\nassert solution(\"kava\") == \"DA\"\n\"\"\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2\\n0\\n2\\n1'\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8''') == '0\\n0\\n3\\n2'\nassert solution('''7 7 4\n1 2\n2 3\n1 3\n3 6\n6 7\n2 4\n2 5\n4 7\n5 7\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8''') == '0\\n0\\n2\\n1'\nassert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2\\n0\\n2\\n1'\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 7\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8''') == '0\\n0\\n3\\n2'\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n\") == '2\\n0\\n2\\n1'\nassert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n\") == '0\\n0\\n3\\n2'\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a\\nb') == 'a\\nb'\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n\") == \"2\\n0\\n2\\n1\\n\"\n\"\"\""
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\") == \"2\\n0\\n2\\n1\"\nassert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\") == \"0\\n0\\n3\\n2\""
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2\\n0\\n2\\n1'\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8''') == '0\\n0\\n3\\n2'\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8''') == '0\\n0\\n3\\n2'\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8''') == '0\\n0\\n3\\n2'\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8''') == '0\\n0\\n3\\n2'\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n\") == \"2\\n0\\n2\\n1\\n\"\n\nassert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n\") == \"0\\n0\\n3\\n2\\n\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n') == '2'\nassert solution('8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n') == '0'\n\n-----Problem-----\nSuppose a building has $n$ floors, numbered $1$ to $n$, and there are $m$ lifts, each of which can take at most $k$ people. The lifts and people are labeled with integers $1, \\dots, k, 1, \\dots, k$ respectively.\n\nNow, if the lift is at the $i$th floor and the $j$th person is in the lift, then they are in an adjacent elevator. For example, if the lift is at floor $3$, and the $1$st person is in the lift, then they are adjacent to an elevator at floor $2$.\n\nWe want to run a survey in which each person goes to an adjacent lift, so we have a total of $m$ lifts. When a person lands on the $i$th floor, we know that they are not adjacent to any lifts on floors $1, \\dots, i - 1, \\dots, i + 1, \\dots, n$.\n\nTo maximize the number of people in lifts, we want to distribute the people so that the $j$th person is in a lift with an odd number of people, if possible.\n\n-----Solution-----\nLet $S(n, m, k)$ be the maximum number of people in a lift when the $i$th person arrives and has to travel $k$ places away, given that we want $m$ lifts.\n\nSo, $S(n, m, k)$ is the number of ways to make $m$ lifts such that every lift has an odd number of people.\n\nSince there are $n$ floors, and only $k$ lifts, we can consider each floor to be a pivot and group all the floors that are adjacent to it.\n\nFor example, let\u2019s say we have $n = 7$, $m = 4$, and $k = 2$.\n\nOne possible arrangement is [1, 2, 3, 5, 6, 7, 8].\n\nThen, if we add a new person to this group, we must take one additional lift.\n\nA group of $n$ people can be grouped in $n(n - 1)/2$ ways.\n\nFor example, for a group of $n = 4$, there are 3 ways to group them in order to have one person per lift.\n\nThe number of ways to group $n$ people into $k$ groups is given by $S(n, k) = \\sum_{i = 1}^{n - 1} \\binom{n}{2} S(n - 1, i)$.\n\nNote that the binomial coefficient $\\binom{n}{2}$ is equal to $n(n - 1)/2$.\n\nAs a result, we can write the number of ways to group $n$ people into $k$ groups in the following manner.\n\n$S(n, k) = \\sum_{i = 1}^{n - 1} \\binom{n}{2} S(n - 1, i)$.\n\nSubstituting this into the equation above, we get $S(n, m, k) = \\sum_{i = 1}^{n - 1} \\binom{n}{2} \\sum_{j = 1}^{n - i} \\binom{n - 1}{2} S(n - 1, j)$.\n\nSo, if we don\u2019t care about where the lifts are, then we can just look at the floors and figure out what is the maximum number of people that could be on a lift.\n\nFor example, if we had $n = 7$, $m = 4$, and $k = 2$, then we would have $S(n, m, k) = \\sum_{i = 1}^{n - 1} \\binom{n}{2} \\sum_{j = 1}^{n - i} \\binom{n - 1}{2} S(n - 1, j) = 6$.\n\nSo, the maximum number of people that could be on a lift is $6$.\n\nThe logic is the same for $m$ lifts.\n\nSo, given $n = 7$ and $m"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n') == '2\\n0\\n2\\n1\\n\n\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom itertools import combinations"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\n') == '2\\n0\\n2\\n1'\nassert solution('8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n') == '0\\n0\\n3\\n2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1''') == '2'\n\nassert solution('''2 2\n1 1\n0 1\n1 0\n1 2 1''') == '1'\n\nassert solution('''2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3''') == '1'\n\nassert solution('''2 3\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n1 1 1\n1 2 1\n2 1 3''') == '1'\n\nassert solution('''3 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n1 1 1\n1 2 1\n2 1 3''') == '1'"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\\n') == '2'\n\nprint(solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\\n'))"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3''') == '1'\n\n'''\n3 4\n2 1 1\n1 3 3\n0 2 2\n1 2 3\n3 2 1\n1 0 1\n1 2 3\n2 1 1\n1 2 3\n2 3 3\n0 2 3\n3 0 3\n'''\n'''\n3 4\n2 1 1\n1 3 3\n0 2 2\n1 2 3\n3 2 1\n1 0 1\n1 2 3\n2 1 1\n1 2 3\n2 3 3\n0 2 3\n3 0 3\n'''\n\n'''\n2 2\n0 0\n0 1\n1 1\n1 0\n0 1\n0 1\n1 0\n0 1\n1 0\n1 2 1\n2 1 1\n1 2 1\n2 1 1\n'''\n\n'''\n3 3\n0 1 2\n0 1 2\n1 2 2\n1 1 0\n0 0 0\n0 2 2\n0 0 0\n1 1 1\n2 0 1\n2 2 3\n1 1 1\n'''\n\n'''\n3 3\n0 1 2\n0 1 2\n1 2 2\n1 1 0\n0 0 0\n0 2 2\n0 0 0\n1 1 1\n2 0 1\n2 2 3\n1 1 1\n'''\n\n'''\n3 3\n0 1 2\n0 1 2\n1 2 2\n1 1 0\n0 0 0\n0 2 2\n0 0 0\n1 1 1\n2 0 1\n2 2 3\n1 1 1\n'''\n\n'''\n3 3\n0 1 2\n0 1 2\n1 2 2\n1 1 0\n0 0 0\n0 2 2\n0 0 0\n1 1 1\n2 0 1\n2 2 3\n1 1 1\n'''\n\n'''\n2 2\n0 1 1\n0 1 1\n1 1 1\n1 1 1\n0 1 1\n0 1 1\n1 1 1\n1 1 1\n0 1 1\n1 1 1\n1 1 1\n'''\n\n'''\n3 3\n0 1 2\n0 1 2\n1 2 2\n1 1 0\n0 0 0\n0 2 2\n0 0 0\n1 1 1\n2 0 1\n2 2 3\n1 1 1\n'''\n\n'''\n3 3\n0 1 2\n0 1 2\n1 2 2\n1 1 0\n0 0 0\n0 2 2\n0 0 0\n1 1 1\n2 0 1\n2 2 3\n1 1 1\n'''\n\n'''\n5 5\n0 1 2 3 4\n0 1 2 3 4\n1 2 2 3 4\n1 1 2 3 4\n1 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n'''\n\n'''\n5 5\n0 1 2 3 4\n0 1 2 3 4\n1 2 2 3 4\n1 1 2 3 4\n1 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n'''\n\n'''\n5 5\n0 1 2 3 4\n0 1 2 3 4\n1 2 2 3 4\n1 1 2 3 4\n1 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n'''\n\n'''\n5 5\n0 1 2 3 4\n0 1 2 3 4\n1 2 2 3 4\n1 1 2 3 4\n1 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n'''\n\n'''\n5 5\n0 1 2 3 4\n0 1 2 3 4\n1 2 2 3 4\n1 1 2 3 4\n1 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n'''\n\n'''\n5 5\n0 1 2 3 4\n0 1 2 3 4\n1 2 2 3 4\n1 1 2 3 4\n1 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n'''\n\n'''\n5 5\n0 1 2 3 4\n0 1 2 3 4\n1 2 2 3 4\n1 1 2 3 4\n1 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n'''\n\n'''\n5 5\n0 1 2 3 4\n0 1 2 3 4\n1 2 2 3 4\n1 1 2 3 4\n1 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n'''\n\n'''\n5 5\n0 1 2 3 4\n0 1 2 3 4\n1 2 2 3 4\n1 1 2 3 4\n1 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n'''\n\n'''\n3 3\n0 1 2\n0 1 2\n1 2 2\n1 1 0\n0 0 0\n0 0 0\n1 1 1\n2 0 1\n2 2 3\n1 1 1\n'''\n\n'''\n3 3\n0 1 2\n0 1 2\n1 2 2\n1 1 0\n0 0 0\n0 0 0\n1 1 1\n2 0 1\n2 2 3\n1 1 1\n'''\n\n'''\n3 3\n0 1 2\n0 1 2\n1 2 2\n1 1 0\n0 0 0\n0 0 0\n1 1 1\n2 0 1\n2 2 3\n1 1 1\n'''\n\n'''"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\\n\") == 2\n\"\"\"\nimport sys"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3''') == '1'\nassert solution('''2 2\n1 1\n0 1\n1 0\n1 2 1''') == '2'\n\n\"\"\"\nimport sys\nfrom itertools import permutations\n\nn, m = map(int, sys.stdin.readline().strip().split())\nflights = {}\nfor i in range(n):\n    flights[i + 1] = [int(j) for j in sys.stdin.readline().strip().split()]\n\nmoves = [int(i) for i in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == 1\nassert solution('1 1\\n0 1') == 1\n\nimport ast"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\") == \"2\"\n\nassert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\") == \"1\"\n\nassert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\") == \"1\"\n\n\"\"\"\nimport math\nfrom typing import List, Optional, Dict, Any, NamedTuple, Tuple\n\nfrom utils import timed\n\n\nclass Airport(NamedTuple):\n    id: int\n    time_to_inspect: int\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aaa') == 'aaa'\nassert solution('a\\nb') == 'a\\nb'\n"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input_A) == output_A\n\"\"\"\n\nfrom sys import stdin, stdout\nimport math\nimport re\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 15\\nD 4 10 1\\nC 6 1\") == \"40.500000000\"\nassert solution(\"3 15\\nD 4 10 1\\nC 6 1\\nC 9 3\") == \"49.0\"\n\"\"\""
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 15\\nD 4 10 1\\nC 6 1\") == \"40.500000000\"\n\"\"\"\n\nimport sys\nimport itertools\nimport math\nimport random\nfrom typing import Iterable, Dict\nfrom itertools import product, chain\n\n\nclass Buffet:\n    def __init__(self, n: int, m: int):\n        self.dishes = n\n        self.m = m\n\n    def parse_desc(self, desc: str) -> Iterable[int]:\n        if desc.startswith(\"D\"):\n            r = desc.split(\" \")\n            w, t, d = int(r[1]), int(r[2]), int(r[3])\n            return w, t, d\n        else:\n            w, t, d = int(desc.split(\" \")[0]), int(desc.split(\" \")[1]), int(desc.split(\" \")[2])\n            return w, t, d\n\n    def dishes_to_iter(self, desc: Iterable[str]) -> Iterable[Iterable[int]]:\n        return map(self.parse_desc, desc)\n\n    def ingredients_from_desc(self, desc: str) -> Iterable[int]:\n        w, t, d = map(int, desc.split(\" \"))\n        return w, t, d\n\n    def ingredients_to_iter(self, desc: str) -> Iterable[Iterable[int]]:\n        return map(self.ingredients_from_desc, desc)\n\n    def ingredients_to_dict(self, desc: Iterable[str]) -> Dict[int, int]:\n        return dict(map(self.ingredients_from_desc, desc))\n\n    def generate_random_descs(self):\n        descs = []\n        for _ in range(self.dishes):\n            w = random.randint(1, self.m)\n            t = random.randint(0, self.m)\n            d = random.randint(1, self.m)\n            descs.append(\"D {} {} {}\".format(w, t, d))\n            for _ in range(random.randint(0, self.dishes)):\n                w = random.randint(1, self.m)\n                t = random.randint(0, self.m)\n                d = random.randint(1, self.m)\n                descs.append(\"C {} {} {}\".format(w, t, d))\n        return descs\n\n    def generate_random_iter(self):\n        return chain.from_iterable(map(self.dishes_to_iter, self.generate_random_descs()))\n\n    def generate_random_dict(self):\n        return dict(map(self.dishes_to_dict, self.generate_random_descs()))\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1\\n') == '40.500000000\\n'\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 15\\n\"\n                 \"D 4 10 1\\n\"\n                 \"C 6 1\\n\"\n                 \"C 9 3\") == \"49.0\"\n\nassert solution(\"2 15\\n\"\n                 \"D 4 10 1\\n\"\n                 \"C 6 1\\n\"\n                 \"C 9 3\") == \"49.0\"\n\nassert solution(\"2 15\\n\"\n                 \"D 4 10 1\\n\"\n                 \"C 6 1\\n\"\n                 \"D 6 2 2\\n\"\n                 \"C 9 3\") == \"43.5\"\n\nassert solution(\"2 15\\n\"\n                 \"D 4 10 1\\n\"\n                 \"C 6 1\\n\"\n                 \"D 6 2 2\\n\"\n                 \"C 9 3\") == \"43.5\"\n\nassert solution(\"2 15\\n\"\n                 \"D 4 10 1\\n\"\n                 \"C 6 1\\n\"\n                 \"D 6 2 2\\n\"\n                 \"C 9 3\\n\"\n                 \"C 6 1\\n\"\n                 \"D 3 5 2\") == \"36.0\""
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 15\\nD 4 10 1\\nC 6 1\\nC 9 3\") == \"49.0\"\n\"\"\"\n\nimport sys\nimport math\n\nsys.setrecursionlimit(10 ** 6)"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1') == '40.500000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\n\"\"\"\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.0'\nassert solution('1 10\\nC 1 2\\nD 2 3') == '10.0'\n\n'''\nfrom collections import defaultdict\nfrom math import inf"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 15\\n4 10 1\\n6 1\") == \"40.5\"\n\nassert solution(\"3 15\\n4 10 1\\n6 1\\n9 3\") == \"49\""
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 15\\n4 10 1\\n6 1\") == \"40.500000000\"\n\"\"\"\n"
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'impossible'\nassert solution('1') == 'impossible'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\") == \"fail\"\nassert solution(\"10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\") == \"fail\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\") == \"fail\"\nassert solution(\"10\\n\\na 2 10 3\\n\\nb 1 6\\n\\nc 2 1 5\\n\\nd 1 9\\n\\ne 1 4\\n\\nf 1 2\\n\\ng 2 6 8\\n\\nh 0\\n\\ni 1 3\\n\\nj 1 7\\n\\n\") == \"fail\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(input())\nprint(solution(str(input())))\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == '5 4 9 3 1 10 7 6 2'\nassert solution('10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == 'fail'\n\nassert solution('10\\nh 4\\nt 1 2') == '3 1 4 2'\nassert solution('10\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh 4\\nh"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a2 10 3) == '5 4 9 3 1 10 7 6 2'\nassert solution(a1 6) == 'fail'\nassert solution(c2 1 5) == 'fail'\nassert solution(d1 9) == 'fail'\nassert solution(e1 4) == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\n\\nc 2 1 5\\nd 1 9\\ne 1 4\\n\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"fail\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7''') == '5 4 9 3 1 10 7 6 2'\nassert solution('''10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7''') == 'fail'\nassert solution('''9\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7''') == '1 2 3 4 5 6 7 8 9'\nassert solution('''9\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7''') == '1 2 3 4 5 6 7 8 9'\nassert solution('''9\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7''') == '1 2 3 4 5 6 7 8 9'\n'''\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\") == \"fail\"\n\n\"\"\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7''') == '''5 4 9 3 1 10 7 6 2'''\nprint(\"Test 1 Passed\")\n\nassert solution('''9\na 1\nb 0\nc 0\nd 0\ne 0\nf 1\ng 0\nh 0\ni 0\nj 1''') == '''fail'''\nprint(\"Test 2 Passed\")\n\nassert solution('''10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7''') == '''5 4 9 3 1 10 7 6 2'''\nprint(\"Test 3 Passed\")\n\nassert solution('''1\na 1\nb 0\nc 0\nd 0\ne 0\nf 1\ng 0\nh 0\ni 0\nj 1''') == '''fail'''\nprint(\"Test 4 Passed\")\n\nassert solution('''8\na 1\nb 0\nc 0\nd 0\ne 0\nf 0\ng 0\nh 0\ni 0\nj 0''') == '''fail'''\nprint(\"Test 5 Passed\")"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10\\na 2 10 3\\na 1 6\\n3 10\\nb 1 9\\n2 10\\nc 2 1 5\\n2 1 5\\n3 9\\n5 9\\nd 1 9\\n3 9\\ne 1 4\\n4 9\\n6 9\\n6 9\\n7 9\\n8 9\\ng 2 6 8\\n1 6\\n1 6\\n4 6\\n7 6\\n7 6\\n8 6\\n8 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6\\n9 6"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == '5 4 9 3 1 10 7 6 2'\nassert solution(\"10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == 'fail'\n\n------Hint------\nThink of the sub-problems in the greedy way, and of the multiple solutions for the same sub-problem.\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"00:00\") == \"3\"\nassert solution(\"01:01\") == \"3\"\nassert solution(\"00:08\") == \"3\"\nassert solution(\"01:00\") == \"3\"\nassert solution(\"01:01\") == \"3\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution([\"00:00\", \"01:01\"]) == 3\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''00:08''') == '''3\n00:00\n00:08\n00:09\n00:00'''\nassert solution('''00:08\n00:00\n''') == '''3\n00:08\n00:09\n00:00'''\nassert solution('''11:32\n13:25\n14:06\n13:25\n14:06\n14:07\n15:04\n15:05\n15:05\n15:06\n15:07\n15:08\n15:09\n15:10\n15:11\n16:02\n16:03\n16:04\n16:05\n16:06\n16:07\n16:08\n16:09\n16:10\n16:11\n17:06\n17:07\n17:08\n17:09\n17:10\n17:11\n18:04\n18:05\n18:06\n18:07\n18:08\n18:09\n18:10\n18:11\n18:12\n19:02\n19:03\n19:04\n19:05\n19:06\n19:07\n19:08\n19:09\n19:10\n19:11\n20:06\n20:07\n20:08\n20:09\n20:10\n20:11\n20:12\n21:02\n21:03\n21:04\n21:05\n21:06\n21:07\n21:08\n21:09\n21:10\n21:11\n21:12\n22:04\n22:05\n22:06\n22:07\n22:08\n22:09\n22:10\n22:11\n22:12\n23:02\n23:03\n23:04\n23:05\n23:06\n23:07\n23:08\n23:09\n23:10\n23:11\n23:12\n24:00\n24:01\n24:02\n24:03\n24:04\n24:05\n24:06\n24:07\n24:08\n24:09\n24:10\n24:11\n24:12\n24:13\n24:14\n24:15\n24:16\n24:17\n24:18\n24:19\n24:20\n24:21\n24:22\n24:23\n24:24\n24:25\n24:26\n24:27\n24:28\n24:29\n24:30\n24:31\n24:32\n24:33\n24:34\n24:35\n24:36\n24:37\n24:38\n24:39\n24:40\n24:41\n24:42\n24:43\n24:44\n24:45\n24:46\n24:47\n24:48\n24:49\n24:50\n24:51\n24:52\n24:53\n24:54\n24:55\n24:56\n24:57\n24:58\n24:59\n25:00\n25:01\n25:02\n25:03\n25:04\n25:05\n25:06\n25:07\n25:08\n25:09\n25:10\n25:11\n25:12\n25:13\n25:14\n25:15\n25:16\n25:17\n25:18\n25:19\n25:20\n25:21\n25:22\n25:23\n25:24\n25:25\n25:26\n25:27\n25:28\n25:29\n25:30\n25:31\n25:32\n25:33\n25:34\n25:35\n25:36\n25:37\n25:38\n25:39\n25:40\n25:41\n25:42\n25:43\n25:44\n25:45\n25:46\n25:47\n25:48\n25:49\n25:50\n25:51\n25:52\n25:53\n25:54\n25:55\n25:56\n25:57\n25:58\n25:59\n26:00\n26:01\n26:02\n26:03\n26:04\n26:05\n26:06\n26:07\n26:08\n26:09\n26:10\n26:11\n26:12\n26:13\n26:14\n26:15\n26:16\n26:17\n26:18\n26:19\n26:20\n26:21\n26:22\n26:23\n26:24\n26:25\n26:26\n26:27\n26:28\n26:29\n26:30\n26:31\n26:32\n26:33\n26:34\n26:35\n26:36\n26:37\n26:38\n26:39\n26:40\n26:41\n26:42\n26:43\n26:44\n26:45\n26:46\n26:47\n26:48\n26:49\n26:50\n26:51\n26:52\n26:53\n26:54\n26:55\n26:56\n26:57\n26:58\n26:59\n27:00\n27:01\n27:02\n27:03\n27:04\n27:05\n27:06\n27:07\n27:08\n27:09\n27:10\n27:11\n27:12\n27:13\n27:14\n27:15\n27:16\n27:17\n27:18\n27:19\n27:20\n27:21\n27:22\n27:23\n27:24\n27:25\n27:26\n27:27\n27:28\n27:29\n27:30\n27:31\n27:32\n27:33\n27:34\n27:35\n27:36\n27:37\n27:38\n27:39\n27:40\n27:41\n27:42\n27:43\n27:44\n27:45\n27:46\n27:47\n27:48\n27:49\n27:50\n27:51\n27:52\n27:53\n27:54\n27:55\n27:56\n27:57\n27:58\n27:59\n28:00\n28:01\n28:02\n28:03\n28:04\n28:05\n28:06\n28:07\n28:08\n28:09\n28:10\n28:11\n28:12\n28:13\n28:14\n28:15\n28:16\n28:17\n28:"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('00:00\\n01:01') == '3\\n00:00\\n01:00\\n01:01'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"00:00\") == \"0\"\nassert solution(\"01:01\") == \"1\"\nassert solution(\"11:11\") == \"0\"\nassert solution(\"00:08\") == \"0\"\nassert solution(\"10:10\") == \"0\""
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"00:00\") == \"00:00\"\nassert solution(\"01:01\") == \"01:01\"\nassert solution(\"10:10\") == \"10:10\"\n\"\"\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"00:00\") == \"0:00\"\nassert solution(\"01:01\") == \"0:01\"\nassert solution(\"02:02\") == \"0:02\"\nassert solution(\"22:02\") == \"22:02\"\n\nassert solution(\"02:05\") == \"0:05\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"00:08\") == '3'\nassert solution(\"00:00\") == '3'\nassert solution(\"00:08\") == '3'\n\nprint(solution(\"00:08\"))\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"00:00\") == '3'\nassert solution(\"00:01\") == '3'\nassert solution(\"00:02\") == '3'\nassert solution(\"00:03\") == '2'\nassert solution(\"00:04\") == '3'\n"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"00:00\") == \"0:0\"\nassert solution(\"23:59\") == \"23:59\"\nassert solution(\"01:02\") == \"1:2\"\nassert solution(\"09:39\") == \"9:39\"\nassert solution(\"11:00\") == \"11:00\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(())\") == \"4,8:8,8:\", \"Wrong answer\"\nassert solution(\"()\") == \"4,4:\", \"Wrong answer\"\nassert solution(\"(()(()()))\") == \"4,8:8,8:\", \"Wrong answer\"\n\n\"\"\"\nimport unittest"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('(()())') == '4,6:6,6:6,6:6,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:8,8:"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('(()())') == '4,4:8,8:16,16:8,8:4,4:8,4:8'\nassert solution('(((((((((((((((((((((((())')) == '4,4:8,8:16,16:8,8:4,4:8,4:8,8:8,8:16,16:16,16:8,8:4,4:8,4:8,16:8,8:8,8:16,16:16'\n\n\"\"\"\n\nimport unittest\nfrom collections import deque\n\nclass Node:\n    def __init__(self, value: int):\n        self.value = value\n        self.right = None\n        self.left = None\n\n    def __repr__(self):\n        return f'{self.value}'\n\nclass Tree:\n    def __init__(self, root: Node):\n        self.root = root\n\n    def __repr__(self):\n        return f'{self.root}'"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('()') == '4,4:'\nassert solution(')(') == '4,4:4,8:4,8:'\nassert solution(')') == '4,4:1,4:1,'\nassert solution('(()))') == '4,4:1,4,4:1,4,4:4,8:4,8:1,4,8:'\nassert solution('(()()()()()))') == '4,4:1,4,4:1,4,4:4,8,8:1,4,8:4,8,4,8,8:4,8,8:1,4,8,4,8,8:4,8,8:1,4,8,4,8,8:4,8,8,4,8,8:4,8,8,4,8,8:1,4,8,4,8,8,4,8,8:4,8,8,4,8,8,4,8,8:4,8,8,4,8,8:4,8,8,4,8,8:'\n\n\"\"\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(())\") == \"4,8:8,8:\", \"error 1\"\nassert solution(\"(())\") == \"4,8:8,8:\", \"error 2\"\nassert solution(\"(()())\") == \"4,4:\", \"error 3\"\nassert solution(\"(((())))\") == \"4,8:8,8:\", \"error 4\"\nassert solution(\"(()(())())\") == \"4,4:\", \"error 5\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('(())') == '4,8:8,8:','solution(\\\"(())\\\"): == 4,8:8,8:'\nassert solution('()') == '4,4:','solution(\\\"()\\\"): == 4,4:'\nassert solution('())') == '4,4:','solution(\\\"())\\\"): == 4,4:'\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"((()))\") == \"4,8:8,8:8\"\nassert solution(\"()\") == \"4,4:\"\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin):\n        answer = \"\"\n        s = stdin\n        stack = []\n\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(s[i])\n            elif s[i] == ')':\n                if len(stack) > 0:\n                    stack.pop()\n                else:\n                    stack.append(s[i])\n\n        for i in range(len(stack)):\n            answer += str(len(stack) - i) + ','\n\n        return answer[:-1]\n"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"()\") == \"4,4:\", solution(\"()\")\nassert solution(\"(())\") == \"4,8:8,8:\", solution(\"(())\")\nassert solution(\"()()\") == \"4,4:\", solution(\"()()\")\nassert solution(\"(((\") == \"4,5:5,5:\", solution(\"(((\")\nassert solution(\"(())((())()())\") == \"4,8:8,8:11,11:11,11:11,11:11\", solution(\"(())((())()())\")\n"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(())\") == \"4,8:8,8:\", \"Expected the string '(()):8,8:8,8:' to be 4,8:8,8: but got {}\".format(solution(\"(())\"))\nassert solution(\"\") == \"\", \"Expected the string '' to be '', but got {}\".format(solution(\"\"))\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"()\") == \"4,4:\", \"example 1\"\nassert solution(\"(())\") == \"4,8:8,8:\", \"example 2\"\nassert solution(\"()()\") == \"4,4:\", \"example 3\"\nassert solution(\"(())()\") == \"4,8:8,8:\", \"example 4\"\n\n\"\"\""
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n26 02 03 03 1') == '5'\n\n\"\"\"\n\nimport math\n\nN, M = [int(x) for x in input().split(' ')]\nD = [0] * M\nfor _ in range(N):\n    date = [int(x) for x in input().split(' ')]\n    for i in range(M):\n        D[i] += date[2 + i] - date[i]\n\nD = [d + 365 if d < 0 else d for d in D]\nD.sort(reverse=True)"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 1\n26 02 03 03 1\n''') == '5'\n\nassert solution('''1 1\n26 02 03 03 2\n''') == '185'\n\nassert solution('''1 1\n26 02 03 03 3\n''') == '-1'\n\nassert solution('''1 1\n26 02 03 03 4\n''') == '-1'\n\nassert solution('''1 1\n26 02 03 03 5\n''') == '-1'"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == solution(input())"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n26 02 03 03 1') == '5'\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\"\n\nSample Input 2:\n2 1\n26 02 03 03 2\n26 02 03 03 2\nSample Output 2:\n-1\nassert solution(\"2 1\\n26 02 03 03 2\\n26 02 03 03 2\") == \"-1\"\n\nSample Input 3:\n1 1\n01 01 03 03 2\nSample Output 3:\n365\nassert solution(\"1 1\\n01 01 03 03 2\") == \"365\"\n\nSample Input 4:\n1 1\n01 01 03 03 2\nSample Output 4:\n365\nassert solution(\"1 1\\n01 01 03 03 2\") == \"365\"\n\nSample Input 5:\n1 1\n01 01 03 03 2\nSample Output 5:\n365\nassert solution(\"1 1\\n01 01 03 03 2\") == \"365\"\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n26 02 03 03 2\") == \"185\"\nprint(solution(stdin))\n\"\"\"\n\nN, M = [int(x) for x in stdin.readline().strip().split()]\nD = [int(x) for x in stdin.readline().strip().split()]\nE = [int(x) for x in stdin.readline().strip().split()]\n\nD_cnt = E_cnt = 0\nE_dur = [0 for _ in range(M)]\n\nfor i in range(N):\n    for j in range(M):\n        E_dur[j] = E_dur[j] + E[i] * (D[i + j + 1] - D[i])\n        E_cnt = E_cnt + E[i]\n    for j in range(M):\n        if E_cnt > 0:\n            E_dur[j] = E_dur[j] + E_cnt * (D[i + j + 1] - D[i])\n    if E_cnt > 0:\n        E_cnt = 0\n    D_cnt = D_cnt + 1\n\nprint(\" \".join(map(str, E_dur)))"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 1\n26 02 03 03 1\n''') == '5'\n\"\"\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n26 02 03 03 1') == '5'\n\"\"\"\n\nfrom typing import NamedTuple, List\nfrom dataclasses import dataclass\n\nclass Task(NamedTuple):\n    start_date: List[int]\n    end_date: List[int]\n    number_of_events: List[int]\n\n@dataclass\nclass Solution:\n    task: Task\n    solution: List[int]"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\nassert solution('4 2\\n3 4 1 2') == '2 3 4 1'\n\n'''"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n3 4 1 2\") == \"2 3 4 1\"\nassert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n3 4 1 2') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n3 4 1 2') == '2 3 4 1'\nassert solution('5 2\\n3 4 5 6 1') == 'Impossible'\nassert solution('7 4\\n1 3 1 2 4 5 6 7') == '1 4 7 2 5 3 6'"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '''\n6 2\n3 4 5 6 1 2\n    '''\n) == '5 6 1 2 3 4'\n\nassert solution(\n    '''\n4 2\n3 4 1 2\n    '''\n) == '2 3 4 1'\n\nassert solution(\n    '''\n4 3\n3 4 1 2\n    '''\n) == 'Impossible'\n\nassert solution(\n    '''\n4 3\n4 3 1 2\n    '''\n) == 'Impossible'\n\nassert solution(\n    '''\n5 1\n3 4 2 5 1\n    '''\n) == '3 4 2 5 1'"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 4 1\\n') == '2 3 4 1'\nassert solution('4 2\\n3 4 1 2') == '2 3 4 1'\nassert solution('10 10\\n1 2 3 4 5 6 7 8 9 10') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('3 3\\n1 2 3') == 'Impossible'\nassert solution('5 3\\n1 2 3 4 5') == 'Impossible'\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\n\nassert solution('4 2\\n3 4 1 2') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n3 4 1 2\") == \"2 3 4 1\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\nassert solution(\"4 2\\n3 4 1 2\") == \"2 3 4 1\"\n\n\"\"\"\n\nfrom typing import List, NamedTuple, Tuple, Set, Dict\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort()"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '1374 2'\n    ) == '7413'\nassert solution(\n    '210 1'\n    ) == '201'"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n\n\"\"\""
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution( \"1374 2\" ) == \"7413\"\nassert solution( \"210 1\" ) == \"201\"\n\n\"\"\""
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1374 2''') == '7413'\nassert solution('''210 1''') == '201'\n\"\"\"\nimport heapq\nfrom collections import deque\n"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1374 2''') == '7413'\n\"\"\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\n\nsolution()\n\n\n'''"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(123) == 321\nassert solution(4567) == 5678\nassert solution(2445) == 3456\n\"\"\"\n\nn, k = map(int, input().split())"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\nassert solution(\"100 9\") == \"999\"\nassert solution(\"999 9\") == \"999\"\n\"\"\""
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 1\\n1 0') == '0.666666666666667'\nassert solution('3\\n0 0\\n1 1\\n2 0') == '0.733333333333333'\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 1\\n1 0') == '0.666666666666667'\n\"\"\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\\n\") == '0.666666666666667'\nassert solution(\"3\\n0 0\\n1 1\\n2 0\\n\") == '0.733333333333333'\nprint(\"All test cases passed.\")"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4\n0 0\n0 1\n1 1\n1 0\n\"\"\") == \"0.666666666666667\"\nassert solution(\"\"\"\n3\n0 0\n1 1\n2 0\n\"\"\") == \"0.733333333333333\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '4\\n0 0\\n0 1\\n1 1\\n1 0'\n) == '0.666666666666667'\n\nassert solution(\n    '3\\n0 0\\n1 1\\n2 0'\n) == '0.733333333333333'\n\n\"\"\"\n\nfrom sys import stdin\nfrom math import sqrt\nfrom collections import defaultdict\nimport numpy as np\nfrom scipy.spatial import ConvexHull\nimport matplotlib.pyplot as plt\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\") == \"0.666666666666667\"\n\"\"\"\n\nn = int(stdin.readline())\nL = [list(map(int, stdin.readline().split())) for _ in range(n)]\nprint(sum(abs(x[0] - x[1]) for x in L) / 2)\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\\n\") == \"0.666666666666667\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('AA') == 'AA'\nassert solution('A') == 'A'\nassert solution('AAA') == 'A'\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\") == \"0.666666666666667\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 1\\n1 0\\n') == '0.666666666666667'\nassert solution('3\\n0 0\\n1 1\\n2 0\\n') == '0.733333333333333'\n\"\"\"\nfrom typing import List, Dict, Tuple, Set\nimport math\n\nINF = math.inf"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 4\\n10 1 3\\n0 1 20\") == \"9\"\nassert solution(\"2 3 100\\n10 1 10\\n10 1 10\") == \"21\""
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 4\\n10 1 3\\n0 1 20\\n\") == \"9\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 4\\n10 1 3\\n0 1 20\\n\") == \"9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 100\\n10 1 10\\n10 1 10\") == \"21\"\n\"\"\""
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20\\n') == 9\n\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20') == '9'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20') == '9'\nassert solution('2 3 4\\n10 1 3\\n10 1 10') == '21'\n\"\"\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 4\\n10 1 3\\n0 1 20\\n\") == \"9\"\nassert solution(\"2 3 100\\n10 1 10\\n10 1 10\\n\") == \"21\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 100\\n10 1 10\\n10 1 10') == '21'\n\"\"\""
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 3 4\n10 1 3\n0 1 20''') == '9'\nassert solution('''2 3 100\n10 1 10\n10 1 10''') == '21'\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == 2\nassert solution(\"9 2 7 -\\n1 1 1 2\\n\") == 4\n\"\"\"\n\nimport sys\nimport pprint\n\nclass KenKen:\n    def __init__(self):\n        self.board = []\n\n    def init(self, stdin):\n        size, op, target, *rows = stdin.split(\"\\n\")\n        self.size = int(size)\n        self.op = op\n        self.target = int(target)\n        self.rows = rows\n    \n    def solve(self):\n        solutions = 0\n        \n        for row in self.rows:\n            r, c = row.split(\" \")\n            r, c = int(r), int(c)\n            \n            if self.op == \"*\":\n                self.board.append([r, c, r*c])\n            elif self.op == \"/\":\n                self.board.append([r, c, r//c])\n            elif self.op == \"+\":\n                self.board.append([r, c, r+c])\n            elif self.op == \"-\":\n                self.board.append([r, c, r-c])\n        \n        self.board = sorted(self.board, key=lambda x: x[2])\n\n        for row in self.board:\n            start, end = 0, self.size - 1\n            while start <= end:\n                mid = (start + end) // 2\n                \n                if mid >= row[0] and mid <= row[1]:\n                    start = mid + 1\n                else:\n                    end = mid - 1\n\n            if start == self.size:\n                solutions += 1\n\n        return solutions"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''8 2 7 -\n1 1 1 2\n''') == '2'\n\nassert solution('''9 2 7 *\n1 1 1 2\n''') == '4'\n\nassert solution('''8 2 7 /\n1 1 1 2\n''') == '4'\n\nassert solution('''9 2 7 /\n1 1 1 2\n''') == '2'\n\nassert solution('''8 2 7 /\n1 1 1 2\n''') == '2'"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 2 7 -\\n1 1 1 2\\n') == '2'\nassert solution('9 2 7 -\\n1 1 1 2\\n') == '4'"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n8 2 7 -\n1 1 1 2\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n9 2 7 -\n1 1 1 2\n\"\"\"\n) == \"4\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8 2 7\n1 1 1 2\n''') == '2'\nassert solution('''9 2 7\n1 1 1 2\n''') == '4'\nassert solution('''9 2 7\n1 1 1 2\n1 1 1 2\n''') == '4'\nassert solution('''9 3 7\n1 1 1 2\n1 1 1 2\n1 1 1 2\n''') == '9'\nassert solution('''9 3 7\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n''') == '9'\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 2 7 -\\n1 1 1 2\\n') == '2'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 2 7 -\\n1 1 1 2\\n') == '2'\nassert solution('9 2 7 -\\n1 1 1 2\\n') == '4'\n\"\"\"\nimport sys\n\nn, m, t, op = [int(x) for x in input().split()]\n\nrow_col_list = []\nfor _ in range(m):\n    row_col = input().split()\n    row_col_list.append(row_col)"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\nassert solution(\"9 2 7 -\\n1 1 1 2\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == 2\n\"\"\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n') == '3\\n4\\n3'\n\n\"\"\"\n\nfrom collections import defaultdict\n\nN, M = map(int, stdin.readline().split())\ng = defaultdict(set)\nfor _ in range(M):\n    O, D, L = map(int, stdin.readline().split())\n    g[O].add((D, L))\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 5\\n2 3 5\\n3 4 5\") == \"3\\n4\\n3\"\nassert solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == \"2\\n3\\n2\\n1\""
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == \"3\\n4\\n3\"\n\"\"\""
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == \"2\\n3\\n2\\n1\"\nassert solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == \"3\\n2\\n1\"\n\nprint('Success')"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == \"2\\n3\\n2\\n1\\n\"\nassert solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == \"3\\n4\\n3\\n2\\n1\\n\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(0)) == open(1).read()\nprint(solution(open(0, 'r')))\n\n\"\"\"\n\nfrom sys import stdin\n\nN, M = map(int, stdin.readline().split())\n\ncity_set = set()\nfor i in range(M):\n    O, D, L = map(int, stdin.readline().split())\n    city_set.add((O, D, L))\n\ncnt = [1 for i in range(M)]\n\nfor i in range(M):\n    for j in range(M):\n        if i == j:\n            continue\n        O, D, L = city_set[j]\n        if O == city_set[i][1] and D == city_set[i][0] and L == city_set[i][2]:\n            cnt[i] *= 2\n\nfor c in cnt:\n    print(c % 1000000007)\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == \"3\\n4\\n3\"\nassert solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == \"2\\n3\\n2\\n1\"\nassert solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n1 3 8\\n2 3 8\\n2 4 8\\n3 4 8\\n\") == \"2\\n3\\n2\\n1\"\nassert solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n1 3 8\\n2 3 8\\n2 4 8\\n3 4 8\\n\") == \"3\\n4\\n3\"\nassert solution(\"1\\n1 1\") == \"1\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == \"2\\n3\\n2\\n1\"\nassert solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == \"2\\n3\\n2\\n1\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n\"\"\") == \"\"\"\n3\n4\n3\n2\n1\n\"\"\"\nassert solution(\"\"\"\n4 4\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n\"\"\") == \"\"\"\n2\n3\n2\n1\n\"\"\"\n\n\"\"\"\nThe first number of each line is the number of cities, the second is the number of roads.\n\"\"\"\n\n\"\"\"\nFirst, we initialize a dictionary to keep track of the roads in the country. We will keep track of roads that end in each city and keep track of paths that are already in that city.\n\"\"\"\n\n\"\"\"\nNext, we add paths to the dictionary from each city to itself. This gives us paths from every city to every city, allowing us to add a path from any city to any other city at any time.\n\"\"\"\n\n\"\"\"\nThe algorithm then loops through each road, starting at the end of the road, and calculates how many paths from city A to city B there are. Then, it updates the dictionary to keep track of paths that end at city B.\n\"\"\"\n\n\"\"\"\nThe algorithm then repeats the process, starting at the end of the road, and calculates how many paths from city A to city B there are. If the end of the road is not already in the dictionary, then we add a key for that city, with a value of an empty list. Then, we loop through each path we have for city B. If the city A is a key in the dictionary for city B, then we add paths to the list of paths that end in city B.\n\"\"\"\n\n\"\"\"\nAfter all the roads have been processed, we iterate through the dictionary. For each city that has no paths that end in it, we add 1 to the result. Then, we go through each path and if the path is a list of roads that end in city B, we add the number of paths in the list to the result.\n\"\"\"\n\n\"\"\"\n-----Notes-----\nIf you have time, try to try writing your own algorithm.\n\nThe tests use the logic shown above, but there is a more efficient method.\n\nWe can calculate all possible paths between cities and count the number of shortest paths from city A to city B. Then, we can just increment by one for every path from city A to city B that is of length less than the number of shortest paths between city A and city B.\n\"\"\""
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n') == '3\\n4\\n3'\nassert solution('4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n') == '2\\n3\\n2\\n1'\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n2 1\") == \"6\"\nassert solution(\"3 4\\n2 3 1\") == \"24\"\n\"\"\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2 1\") == \"24\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n2 1\") == \"6\"\n\nassert solution(\"3 4\\n2 3 1\") == \"24\"\n\n\"\"\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n2 3 1') == '24'\n\"\"\""
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n2 3 1\") == 24\n\"\"\""
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n2 1') == 6\n\"\"\"\n\nN, K = input().split()\ncolors = input().split()\n\nprint(K ** N)"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n2 1\") == 6\n\"\"\"\n\nN, K = [int(i) for i in input().split()]\nF = [int(i) for i in input().split()]\n\nf = [0] * K\nfor i in range(N):\n    f[F[i]] += 1\n\nprint(f\"f[i] = {f}\\n\")\n\nans = 1"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n2 1\") == \"6\"\n\"\"\"\n\nn, k = map(int, input().split())\nf = list(map(int, input().split()))\ns = [0] * k\n\ns[f[0] - 1] = 1\nfor i in range(1, n):\n    s[f[i] - 1] = 0\n    for j in range(k):\n        if j!= f[i] - 1 and s[j]!= 0:\n            s[j] += 1\n\nprint(sum(s))\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '2 3\\n2 1\\n'\n) == '6'\n\nassert solution(\n    '3 4\\n2 3 1\\n'\n) == '24'\n\nassert solution(\n    '4 4\\n2 3 1\\n'\n) == '60'\n\nassert solution(\n    '7 7\\n2 3 1\\n'\n) == '3602879701896397'\n\nassert solution(\n    '10 10\\n2 3 1\\n'\n) == '3628800'"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n2 1') == '6'\nassert solution('3 4\\n2 3 1') == '24'\n\"\"\"\nimport sys"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('5\\n3 4 5 1 2') == '1'\nassert solution('5\\n1 2 3 4 5') == '0'\nassert solution('5\\n2 5 4 3 1') == '0'\nassert solution('5\\n1 2 1 2 3 1') == '4'\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\n'''\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2\") == 2\nassert solution(\"5\\n3 4 5 1 2\") == 1\nassert solution(\"10\\n4 9 1 7 3 8 5 2 6 10 4\") == 20\nassert solution(\"20\\n13 19 1 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7111517211319 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7111517211319 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7111517211319 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7111517211319 3 5 7 11 15 17 21 13 19 3 5 7 11 15 17 21 13 19 3 5 7111517211319 3 5 7111517211319 3 5 7111517211319 3 5 7111517211319 3 5 7111517211319 3 5 7111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2') == '2'\n\"\"\"\n\nimport sys\n\nn = int(input())\ns = set(map(int, input().split()))"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('5\\n3 4 5 1 2') == '1'\n\"\"\""
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 2') == 2\nassert solution('5\\n3 4 5 1 2') == 1\n\n##########################################################################################################################################\n\nWrite an efficient solution to the above problem\nCan you solve the problem with O(1) additional space complexity?\n\n-----Input-----\nThe first line of the input contains the integer $n$ ($1 \\leq n \\leq 10^5$). The second line of the input contains $n$ distinct integers $t_1, t_2, \\dots t_ n$ ($1 \\leq t_ i \\leq n$).\n\n-----Output-----\nOutput the number of ways in which the values of $s_ i$ can be chosen, modulo $10^9 + 7$.\n\n-----Examples-----\nSample Input 1:\n2\n1 2\nSample Output 1:\n2\n\nSample Input 2:\n5\n3 4 5 1 2\nSample Output 2:\n1\n\n##########################################################################################################################################\n\nWrite an efficient solution to the above problem\nCan you solve the problem with O(1) additional space complexity?\n\n-----Input-----\nThe first line of the input contains the integer $n$ ($1 \\leq n \\leq 10^5$). The second line of the input contains $n$ distinct integers $t_1, t_2, \\dots t_ n$ ($1 \\leq t_ i \\leq n$).\n\n-----Output-----\nOutput the number of ways in which the values of $s_ i$ can be chosen, modulo $10^9 + 7$.\n\n-----Examples-----\nSample Input 1:\n2\n1 2\nSample Output 1:\n2\n\nSample Input 2:\n5\n3 4 5 1 2\nSample Output 2:\n1\n\n##########################################################################################################################################\n\nWrite an efficient solution to the above problem\nCan you solve the problem with O(1) additional space complexity?\n\n-----Input-----\nThe first line of the input contains the integer $n$ ($1 \\leq n \\leq 10^5$). The second line of the input contains $n$ distinct integers $t_1, t_2, \\dots t_ n$ ($1 \\leq t_ i \\leq n$).\n\n-----Output-----\nOutput the number of ways in which the values of $s_ i$ can be chosen, modulo $10^9 + 7$.\n\n-----Examples-----\nSample Input 1:\n2\n1 2\nSample Output 1:\n2\n\nSample Input 2:\n5\n3 4 5 1 2\nSample Output 2:\n1\n\n##########################################################################################################################################\n\nWrite an efficient solution to the above problem\nCan you solve the problem with O(1) additional space complexity?\n\n-----Input-----\nThe first line of the input contains the integer $n$ ($1 \\leq n \\leq 10^5$). The second line of the input contains $n$ distinct integers $t_1, t_2, \\dots t_ n$ ($1 \\leq t_ i \\leq n$).\n\n-----Output-----\nOutput the number of ways in which the values of $s_ i$ can be chosen, modulo $10^9 + 7$.\n\n-----Examples-----\nSample Input 1:\n2\n1 2\nSample Output 1:\n2\n\nSample Input 2:\n5\n3 4 5 1 2\nSample Output 2:\n1\n\n##########################################################################################################################################\n\nWrite an efficient solution to the above problem\nCan you solve the problem with O(1) additional space complexity?\n\n-----Input-----\nThe first line of the input contains the integer $n$ ($1 \\leq n \\leq 10^5$). The second line of the input contains $n$ distinct integers $t_1, t_2, \\dots t_ n$ ($1 \\leq t_ i \\leq n$).\n\n-----Output-----\nOutput the number of ways in which the values of $s_ i$ can be chosen, modulo $10^9 + 7$.\n\n-----Examples-----\nSample Input 1:\n2\n1 2\nSample Output 1:\n2\n\nSample Input 2:\n5\n3 4 5 1 2\nSample Output 2:\n1\n\n##########################################################################################################################################\n\nWrite an efficient solution to the above problem\nCan you solve the problem with O(1) additional space complexity?\n\n-----Input-----\nThe first line of the input contains the integer $n$ ($1 \\leq n \\leq 10^5$). The second line of the input contains $n$ distinct integers $t_1, t_2, \\dots t_ n$ ($1 \\leq t_ i \\leq n$).\n\n-----Output-----\nOutput the number of ways in which the values of $s_ i$ can be chosen, modulo $10^9 + 7$.\n\n-----Examples-----\nSample Input 1:\n2\n1 2\nSample Output 1:\n2\n\nSample Input 2:\n5\n3 4 5 1 2\nSample Output 2:\n1\n\n##########################################################################################################################################\n\nWrite an efficient solution to the above problem\nCan you solve the problem with O(1) additional space complexity?\n\n-----Input-----\nThe first line of the input contains the integer $n$ ($1 \\leq n \\leq 10^5$). The second line of the input contains $n$ distinct integers $t_1, t_2, \\dots t_ n$ ($1 \\leq t_ i \\leq n$).\n\n-----Output-----\nOutput the number of ways in which the values of $s_ i$ can be chosen, modulo $10^9 + 7$.\n\n-----Examples-----\nSample Input 1:\n2\n1 2\nSample Output 1:\n2\n\nSample Input 2:\n5\n3 4 5 1 2\nSample Output 2:\n1\n\n##########################################################################################################################################\n\nWrite an efficient solution to the above problem\nCan you solve the problem with O(1) additional space complexity?\n\n-----Input-----\nThe first line of the input contains the integer $n$ ($1 \\leq n \\leq 10^5$). The second line of the input contains $n$ distinct integers $t_1, t_2, \\dots t_ n$ ($1 \\leq t_ i \\leq n$).\n\n-----Output-----\nOutput the number of ways in which the values of $s_ i$ can be chosen, modulo $10^9 + 7$.\n\n-----Examples-----\nSample Input 1:\n2\n1 2\nSample Output 1:\n2\n\nSample Input 2:\n5\n3 4 5 1 2\nSample Output 2:\n1\n\n##########################################################################################################################################\n\nWrite an efficient solution to the above problem\nCan you solve the problem with O(1) additional space complexity?\n\n-----Input-----\nThe first line of the input contains the integer $n$ ($1 \\leq n \\leq 10^5$). The second line of the input contains $n$ distinct integers $t_1, t_2, \\dots t_ n$ ($1 \\leq t_ i \\leq n$).\n\n-----Output-----\nOutput the number of ways in which the values of $s_ i$ can be chosen, modulo $10^9 + 7$.\n\n-----Examples-----\nSample Input 1:\n2\n1 2\nSample Output 1:\n2\n\nSample Input 2:\n5\n3 4 5 1 2\nSample Output 2:\n1"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"5\\n3 4 5 1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('5\\n3 4 5 1 2') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2\") == 2\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 4 10\\n5 2 6\\n11 1 3') == '9'\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 3\n1 4 10\n5 2 6\n11 1 3\n''') == '9'\nassert solution('''3 3\n1 3 1\n2 1 2\n1 1 1\n''') == '4'\nassert solution('''3 3\n1 3 1\n2 1 2\n1 1 1\n''') == '4'\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 3 1\\n2 1 2\\n1 1 1') == '4'\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\") == \"9\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\nclass Matrix:\n    def __init__(self, rows: int, columns: int, matrix: list):\n        self.rows = rows\n        self.columns = columns\n        self.matrix = matrix\n\n    def is_cool(self, row: int, column: int, row_max: int, column_max: int, matrix: list) -> bool:\n        return (self.matrix[row][column] + matrix[row][column]) <= (self.matrix[row][column] + matrix[row][column_max]) and (self.matrix[row][column] + matrix[row_max][column]) <= (self.matrix[row][column] + matrix[row_max][column_max])\n\n    def is_extremely_cool(self, row_max: int, column_max: int, matrix: list) -> bool:\n        for row in range(self.rows):\n            for column in range(self.columns):\n                if row + row_max > self.rows or column + column_max > self.columns:\n                    continue\n                if self.is_cool(row, column, row_max, column_max, matrix):\n                    return True\n        return False"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"3 3\\n1 3 1\\n2 1 2\\n1 1 1\") == \"4\"\nassert solution(\"5 5\\n1 5 10\\n1 5 10\\n1 5 10\\n1 5 10\\n1 5 10\") == \"9\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n\") == 9\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import inf\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n4 5 6\\n7 8 9') == ''\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n4 1 3 2 7\\n7 1 3 2 3\\n3 1 1\\n1 1 1\\n2 2 2\\n1 3 1\\n') == '5'\n\"\"\""
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n\") == '9'\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\") == \"9\"\n\n\"\"\"\n\nfrom pydantic import BaseModel\nfrom typing import Tuple, List\n\nclass Input(BaseModel):\n    matrix: List[List[int]]\n    r: int\n    s: int\n\nclass Output(BaseModel):\n    ans: int\n\nclass Solution:\n    def _validate_input(self, input: Input) -> bool:\n        r = input.r\n        s = input.s\n        if r < 2 or s < 2:\n            return False\n        for row in input.matrix:\n            if len(row)!= s:\n                return False\n        return True\n\n    def _validate_submatrix(self, mat: List[List[int]], submatrix: Tuple[int, int]) -> bool:\n        r, s = submatrix\n        if r >= len(mat) or s >= len(mat[0]):\n            return False\n        sum_matrix = 0\n        for i in range(r, r + 2):\n            for j in range(s, s + 2):\n                sum_matrix += mat[i][j]\n        return sum_matrix <= mat[r][s] + mat[r][s + 1] + mat[r + 1][s] + mat[r + 1][s + 1]\n\n    def _get_sum_cool_matrix(self, mat: List[List[int]], r: int, s: int) -> int:\n        sum_matrix = 0\n        for i in range(r, r + 2):\n            for j in range(s, s + 2):\n                sum_matrix += mat[i][j]\n        return sum_matrix\n\n    def _get_size_cool_matrix(self, mat: List[List[int]], r: int, s: int) -> int:\n        sum_matrix = 0\n        for i in range(r, r + 2):\n            for j in range(s, s + 2):\n                sum_matrix += mat[i][j]\n        return sum_matrix\n\n    def _get_all_cool_submatrices(self, mat: List[List[int]], r: int, s: int) -> int:\n        cool_submatrices = []\n        for i in range(r - 1, r + 1):\n            for j in range(s - 1, s + 1):\n                submatrix = (i, j)\n                if self._validate_submatrix(mat, submatrix):\n                    cool_submatrices.append(submatrix)\n        return cool_submatrices\n\n    def _get_all_submatrices(self, mat: List[List[int]]) -> List[Tuple[int, int]]:\n        all_submatrices = []\n        for i in range(len(mat)):\n            for j in range(len(mat[0])):\n                all_submatrices.append((i, j))\n        return all_submatrices\n\n    def _get_all_submatrices_of_size_2x2(self, mat: List[List[int]]) -> List[Tuple[int, int]]:\n        all_2x2_submatrices = []\n        for i in range(len(mat) - 1):\n            for j in range(len(mat[0]) - 1):\n                submatrix = (i, j)\n                if self._validate_submatrix(mat, submatrix):\n                    all_2x2_submatrices.append(submatrix)\n        return all_2x2_submatrices\n\n    def get_solution(self, input: Input) -> Output:\n        if not self._validate_input(input):\n            return Output(ans=0)\n\n        mat = input.matrix\n        all_cool_submatrices = []\n        for submatrix in self._get_all_submatrices_of_size_2x2(mat):\n            sum_matrix = self._get_sum_cool_matrix(mat, *submatrix)\n            if sum_matrix > 0:\n                all_cool_submatrices.append(submatrix)\n\n        if not all_cool_submatrices:\n            return Output(ans=0)\n\n        max_cool_submatrix_size = 0\n        max_cool_submatrix = None\n        for submatrix in all_cool_submatrices:\n            size_matrix = self._get_size_cool_matrix(mat, *submatrix)\n            if size_matrix > max_cool_submatrix_size:\n                max_cool_submatrix_size = size_matrix\n                max_cool_submatrix = submatrix\n\n        ans = max_cool_submatrix_size\n        return Output(ans=ans)\n\nimport os\nimport sys"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4') == '6'\nassert solution('4\\n3 4 5 6\\n1 2\\n1 3\\n2 4') == '3'\n\"\"\""
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\") == '6'\n\n\"\"\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\\n\") == \"6\"\nassert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\\n\") == \"3\"\nassert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\\n\") == \"3\"\n\nassert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\\n\") == \"6\"\nassert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\\n\") == \"3\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\") == \"6\"\n\"\"\""
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\\n\") == \"6\"\nassert solution(\"4\\n4 6 1 5\\n1 2\\n1 3\\n2 4\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n2 1 3 4\n1 2\n1 3\n3 4''') == '6'\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4') == '6'\nassert solution('4\\n3 4 5 6\\n1 2\\n1 3\\n2 4') == '3'\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4') == '6'\n\"\"\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4') == '6'\n\"\"\""
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\") == 6\n\"\"\"\n\nn = int(input())\nnum = [int(x) for x in input().split()]\n\nnum.sort()\n\nres = []\nfor i in range(n-1):\n    res.append(num[i+1]-num[i])\n\ncount = 0\nfor i in set(res):\n    if i == 1:\n        count += 1\n\nprint(count)"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 10\\n5 8\\n') == '18\\n8'\nassert solution('3\\n17 144\\n121 121\\n89 98\\n') == '265\\n25\\n10'\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '0'\nassert solution('1 1\\n1 2\\n') == '0'\nassert solution('1 1\\n1 2\\n1 3\\n') == '0'\nassert solution('1 2\\n1 3\\n') == '1'\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(\"input.txt\", \"r\").read()) == open(\"output.txt\", \"r\").read()\nprint(\"Well done! Click 'Check' to review your solution.\")"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 10\\n5 8\") == \"18\\n8\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 10\\n5 8\") == \"18\\n8\"\nassert solution(\"1 10\\n5 8\\n17 144\\n121 121\\n89 98\") == \"265\\n25\\n10\""
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 10\\n5 8\") == \"18\\n8\"\nassert solution(\"3\\n17 144\\n121 121\\n89 98\") == \"265\\n25\\n10\"\n\"\"\""
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n2\n1 10\n5 8\n''') == '18\\n8'\n\nassert solution('''\n3\n17 144\n121 121\n89 98\n''') == '265\\n25\\n10'\n\nassert solution('''\n5\n1 10\n4 20\n2 20\n5 10\n5 10\n''') == '18\\n8\\n0\\n0\\n1'\n\nassert solution('''\n1\n1 10\n''') == '9'\n\nassert solution('''\n1\n1 1\n''') == '0'"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 10\\n5 8\\n\") == \"18\\n8\"\nassert solution(\"3\\n17 144\\n121 121\\n89 98\\n\") == \"265\\n25\\n10\"\n\nprint(solution(\"2\\n1 10\\n5 8\\n\"))\nprint(solution(\"3\\n17 144\\n121 121\\n89 98\\n\"))\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 10\\n5 8') == '18'\nassert solution('3\\n17 144\\n121 121\\n89 98') == '265'\nassert solution('1\\n10') == '10'\nprint(solution(stdin))\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '2\\n1 10\\n5 8'\n) == '18\\n8\\n'\nassert solution(\n    '3\\n17 144\\n121 121\\n89 98'\n) == '265\\n25\\n10\\n'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0') == '0.50000000'\nassert solution('5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4') == '12.50000000'\n\n\"\"\"\nimport random"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\") == \"0.5\"\nassert solution(\"5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\") == \"12.5\""
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\\n\") == \"0.50000000\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 3\n0 0\n1 1\n2 1\n1 0''') == '0.5'\nassert solution('''5 5\n0 4\n4 2\n4 1\n3 -1\n-2 4''') == '12.5'\n\n'''\n\uc9c4\uc218\uc5d0\uc11c \uad6c\ud604\uc5d0 \uc2e4\ud328\ud55c \ubb38\uc81c \ucc3e\uae30\n\ubb38\uc81c\uac00 \uc788\ub294 \ubd84\uc11d\uc740 \uc774\ud574\ud558\uae34 \ud588\uc9c0\ub9cc \ud480\uc774\ub97c \ucc3e\uc9c0 \ubabb\ud55c \ubb38\uc81c\ub85c \uc774\ub904\uc9c4\ub2e4\n\ubd84\uc11d\uc774 \ud544\uc694\ud55c \uae30\ub2a5\uc740 \uc5c6\uc9c0\ub9cc \uad6c\ud604\uc744 \uc0dd\uac01\ud574 \ubcf4\uc558\ub2e4\n\uc0dd\uac01\ud558\uace0 \ud480\uae30 \uc704\ud574 \uc2dc\ub3c4\ud55c \ucf54\ub4dc\uc5d0\uc11c \uc774\ud574\ub97c \ubabb\ud55c \ubd80\ubd84\uc774 \uc788\uc5b4\uc11c \uc624\ub2f5\ud310\uc815\uc744 \ubc1b\uc740 \uac83 \uac19\ub2e4\n\uc0ac\uc2e4\uc0c1 \ucf54\ub4dc\ub97c \ub3cc\ub838\uc744 \ub54c \uc774\ud574\ud558\uae34 \ud588\uc9c0\ub9cc \ud480\uc774\ub97c \ucc3e\uc9c0 \ubabb\ud558\ub294 \uac83\uc740 \uc5c6\uc5c8\ub2e4\n\uc6b0\uc120 \ucf54\ub4dc\ub97c \ub9cc\ub4e4\uc5c8\ub2e4\n\uc774 \uacf3\uc5d0 \uc544\ubb34\ub7f0 \uc0c1\uad00\uc774 \uc5c6\uc5c8\ub294\ub370 \uc624\ub2f5\ud310\uc815\uc744 \ubc1b\uc740 \uac83 \uac19\ub2e4\n\uc0dd\uac01\ud574 \ubcf4\ub294 \ubd80\ubd84\uc744 \ub2e4\uc2dc \ud55c\ubc88 \uc0b4\ud3b4\ubcf4\uba74 \uc774\ud574\ud560 \uc218 \uc788\uc5c8\ub2e4\n\uadf8\ub9ac\uace0 \uc5ec\uc804\ud788 \uc624\ub2f5\ud310\uc815\uc744 \ubc1b\uc740 \uac83 \uac19\ub2e4\n\uc815\ub2f5\uc744 \ucc3e\uc544\ub0b4\ub294 \uac83\uc774 \uac00\uc7a5 \uc911\uc694\ud55c \ubd80\ubd84\uc774\uc5c8\ub358 \uac83 \uac19\ub2e4\n\ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc704\uc5d0\uc11c \uc774\ud574\ud55c \uac83\uc744 \uace0\ubbfc\ud574\ubcf4\uba74\n\ud568\uc218\uc758 \uc778\uc790\ub97c \uc798 \uc124\uc815\ud558\uba74 \uc774\ud574\ub97c \ud560 \uc218 \uc788\uc744 \uac83\uc774\ub77c \uc0dd\uac01\ud588\ub2e4\n\ud558\uc9c0\ub9cc \uc544\ubb34\ub798\ub3c4 \uc624\ub2f5\ud310\uc815\uc744 \ubc1b\uc740 \uac83 \uac19\ub2e4\n'''"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 3\n0 0\n1 1\n2 1\n1 0''') == '0.50000000'\n\nassert solution('''5 5\n0 4\n4 2\n4 1\n3 -1\n-2 4''') == '12.50000000'\n\nassert solution('''5 5\n0 4\n4 2\n4 1\n3 -1\n-2 4''') == '12.50000000'\n\nassert solution('''6 5\n0 1\n1 1\n2 2\n2 1\n3 0\n2 2''') == '6.66666667'\n\nassert solution('''6 5\n0 1\n1 1\n2 2\n2 1\n3 0\n2 2''') == '6.66666667'"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0') == '0.50000000'\nassert solution('5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4') == '12.50000000'"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0\\n') == '0.50000000'\nassert solution('5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\\n') == '12.50000000'\nassert solution('4 3\\n1 1\\n2 1\\n1 1\\n') == '1.0000000'\nassert solution('5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\\n') == '12.50000000'\n\nSample Input 1:\n4 3\n0 0\n1 1\n2 1\n1 0\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n0 4\n4 2\n4 1\n3 -1\n-2 4\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n1 0\n2 1\n1 0\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n1 2\n-4 1\n-1 -4\n0 1\n-3 1\n-3 2\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n0 0\n0 0\n1 1\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n1 0\n-2 -2\n-1 -2\n0 -1\n-3 1\n-3 2\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n1 0\n2 1\n1 0\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n1 2\n-2 1\n-1 -2\n0 -1\n-3 1\n-3 2\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n0 0\n1 0\n1 1\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n0 1\n1 1\n2 1\n-2 1\n-1 1\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n0 0\n0 0\n1 1\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n0 2\n0 2\n1 2\n2 2\n0 2\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n0 0\n1 0\n1 0\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n1 0\n1 0\n1 0\n0 1\n0 1\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n1 1\n0 0\n1 0\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n-2 0\n-1 -2\n0 -1\n1 -2\n-1 1\n-3 1\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n0 0\n0 0\n1 0\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n0 0\n0 0\n1 0\n2 0\n-1 0\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n0 0\n0 0\n0 0\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n1 0\n-1 0\n0 -1\n0 0\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n1 1\n0 1\n0 1\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n1 0\n-1 0\n0 -1\n0 0\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n1 1\n0 1\n1 0\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n1 0\n-1 0\n0 -1\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n0 0\n0 0\n0 0\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n1 0\n-1 0\n0 -1\n0 0\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n0 0\n0 0\n0 0\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n-1 0\n-1 0\n0 -1\n0 -1\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n0 0\n0 0\n0 0\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n0 0\n0 0\n1 0\n0 0\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n0 0\n0 0\n0 0\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n0 0\n0 0\n0 0\n1 1\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n0 0\n0 0\n0 0\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n0 0\n0 0\n0 0\n0 0\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n0 0\n0 0\n1 1\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n0 0\n0 0\n0 0\n1 1\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n0 0\n1 1\n1 1\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n0 0\n1 1\n2 1\n-2 1\n-1 1\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n0 0\n1 1\n2 1\n1 1\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n1 0\n-1 0\n-1 0\n0 -1\n1 0\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n0 0\n1 1\n1 1\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n1 0\n-1 0\n-1 0\n0 -1\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n1 0\n1 1\n0 1\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n1 0\n1 0\n-1 0\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n0 0\n0 0\n1 1\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n0 0\n1 0\n-1 0\nSample Output 2:\n12.50000000\n\nSample Input 1:\n4 3\n1 0\n1 1\n0 1\nSample Output 1:\n0.50000000\n\nSample Input 2:\n5 5\n1 0\n-1 0\n"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\\n\") == '0.5'\nassert solution(\"5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\\n\") == '12.5'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n0 0\\n1 1\\n2 1\\n1 0') == '0.50000000'\nassert solution('5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4') == '12.50000000'\nassert solution('7 3\\n0 1\\n1 0\\n2 0\\n3 0\\n4 2\\n5 0\\n6 2\\n6 1\\n6 0\\n6 0\\n6 0\\n6 0\\n6 0\\n6 0\\n6 0\\n6 0') == '0.0'\nassert solution('8 5\\n0 0\\n1 0\\n2 0\\n3 0\\n4 2\\n5 0\\n6 2\\n7 0\\n8 0') == '0.0'\nassert solution('8 5\\n0 0\\n1 0\\n2 0\\n3 0\\n4 2\\n5 0\\n6 2\\n7 0\\n8 0\\n5 0\\n7 0\\n8 0') == '0.0'\n"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\") == \"0.50000000\"\nassert solution(\"5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\") == \"12.50000000\"\n\"\"\"\n\nimport random"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == 2\n\n\"\"\"\n\n\nfrom collections import defaultdict, deque\nimport math\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\n\nassert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '1'\n\nassert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '0'\n\nassert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '0'\n\nassert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '0'"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\nprint(\"Test 1 OK\")\nassert solution(\"4 0 4\\n0 2\\n0 1\\n2 1\\n2 3\\n\") == \"1\"\nprint(\"Test 2 OK\")\nprint(solution(input()))\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\nassert solution(\"4 0 4\\n0 2\\n0 1\\n2 1\\n2 3\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\nprint(solution(\"4 0 4\\n0 2\\n0 1\\n2 1\\n2 3\\n\"))\n\n\"\"\"\n\nfrom itertools import combinations\nfrom math import factorial\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == '2'\nassert solution(\"4 0 4\\n0 2\\n0 1\\n2 1\\n2 3\\n\") == '1'\nassert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == '2'\nassert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == '2'\nassert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == '2'\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4 1 3\n0 1\n1 2\n2 3\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"4 0 4\n0 2\n0 1\n2 1\n2 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 1\\n') == 6\nassert solution('2 2 2\\n') == 30"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1\") == 6\n\"\"\"\n\nimport functools\nimport numpy as np"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 1') == 6\nassert solution('2 2 2') == 30\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\""
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1\") == 6\nassert solution(\"2 2 2\") == 30\n\n------\nimport sys\n\nA, C, M = [int(i) for i in sys.stdin.readline().strip().split()]\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 1') == 6\nassert solution('2 2 2') == 30\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == expected_output\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1\") == 6\nassert solution(\"2 2 2\") == 30\nprint('Success')"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('\\n') == 0\nassert solution('0 1 0') == 0\nassert solution('1 2 1') == 6\nassert solution('1 2 3') == 0\n"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 1\\n') == 6\nassert solution('1 1 1\\n') == 0\nassert solution('2 2 2\\n') == 30\n\"\"\"\nfrom math import factorial"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2020 2020 2020') == '2021 2020 2020'\nassert solution('2\\n1 9999999') == 'impossible'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2020 2020 2020\") == \"2021 2020 2020\"\n\nassert solution(\"3 9999999\") == \"impossible\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n999999\\n1 9999999') == 'impossible'\n\n'''\n\nimport sys\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2020 2020 2020\") == \"2021 2020 2020\"\n\"\"\""
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"impossible\"\nassert solution(\"3\") == \"2021 20\"\nassert solution(\"4\") == \"2022 20\"\nassert solution(\"5\") == \"impossible\""
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2020 2020 2020') == '2021 2020 2020'\nassert solution('3 2020 2020 2020') == '2021 2020 2020'\nassert solution('2 1 9999999') == 'impossible'\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2020 2020 2020\") == \"2021 2020 2020\"\nassert solution(\"3 1 9999999\") == \"impossible\"\nassert solution(\"2 1 9999999\") == \"impossible\"\n\"\"\"\n\n\nfrom __future__ import annotations\nfrom collections import Counter\n"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2020 2020 2020\") == \"2021 2020 2020\"\nassert solution(\"2\\n1 9999999\") == \"impossible\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2020 2020 2020') == '2021 2020 2020'\nassert solution('2\\n999999\\n1 9999999') == 'impossible'\n\"\"\""
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2020 2020 2020') == '2021 2020 2020'\nassert solution('1 9999999') == 'impossible'\nassert solution('100 100 100') == 'impossible'\n\nSample Case 0:\n1010101010 -> 10 > 1 (so you can change the last digit)\nSample Case 1:\n10101010 -> 10 > 1 (so you can change the last digit)\nSample Case 2:\n101010 -> 10 < 9999999 (so you can change the last digit)\nSample Case 3:\n101010 -> 10 < 9999999 (so you can change the last digit)\n\nSolution:\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('30 70') == 11\nassert solution('66 69') == 2"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'\nprint('Success')\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 6 8 10') == '2'\nassert solution('3 6 8 10') == '0'\nassert solution('1 1 2 2') == '2'\n\n-----Solution-----\n\"\"\"\n\n\"\"\"\n2 / 2 = 1\n4 / 2 = 2\n6 / 2 = 3\n8 / 2 = 4\n\n2 / 3 = 0\n4 / 3 = 1\n6 / 3 = 1\n8 / 3 = 2\n10 / 3 = 3\n\n2 / 4 = 0\n4 / 4 = 1\n6 / 4 = 1\n8 / 4 = 2\n10 / 4 = 2\n\"\"\"\n\na, b = map(int, input().split())\n\ncnt = 0\nfor i in range(a, b + 1):\n    n = i\n    count = 0\n    while n:\n        if '4' in str(n) or '6' in str(n) or '8' in str(n):\n            break\n        n //= 10\n        count += 1\n    if n == 0:\n        cnt += 1\nprint(cnt)\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"30 70\") == \"11\"\nassert solution(\"66 69\") == \"2\"\nassert solution(\"0 9\") == \"0\"\n\"\"\"\n\nL, R = input().split(' ')\nL = int(L)\nR = int(R)"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"30 70\") == \"11\"\nassert solution(\"66 69\") == \"2\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'\n\"\"\""
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('66 69') == 2\nassert solution('30 70') == 11\nassert solution('15 36') == 2\nassert solutionn"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"30 70\") == \"11\"\nassert solution(\"66 69\") == \"2\"\nassert solution(\"1 1000000000\") == \"0\"\n\nprint('Success')\n"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''30 70''') == '11'\nassert solution('''66 69''') == '2'\n'''\n\u0421\u0443\u0431\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0443\u0431\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u043f\u0430\u0440\u043e\u043b\u0435\u0439 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0440\u043e\u0434\u0430 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f. \u0420\u043e\u0434 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043b\u044e\u0431\u044b\u043c \u0442\u0438\u043f\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445 (\u043f\u0430\u0440\u043e\u043b\u0438 \u0434\u043b\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0431\u0443\u0434\u0435\u0442 \u0438\u0437 \u043d\u0438\u0445 \u0441\u043b\u0443\u0436\u0438\u0442\u044c, \u0430 \u043f\u0430\u0440\u043e\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u0438\u0437 \u043d\u0438\u0445 \u0441\u043b\u0443\u0436\u0438\u0442\u044c).\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0440\u0430\u0432\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u0443 \u043f\u0430\u0440\u043e\u043b\u0435\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0440\u043e\u0434\u0430 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u0430\u0440\u043e\u043b\u0438 \u0432 \u0442\u0430\u043a\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435: \u043f\u0430\u0440\u043e\u043b\u044c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0432\u0435\u0440\u0441\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u044f\u0442\u043e\u0439.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u0443\u0431\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439 \u0434\u043b\u044f \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u043e\u0439.\n\nSample Input 1:\n1\nSample Output 1:\n000011, 0\n\nSample Input 2:\n2\nSample Output 2:\n111111, 1\n111111, 2\n111111, 3\n111111, 4\n111111, 5\n111111, 6\n111111, 7\n111111, 8\n111111, 9\n111111, 10\n111111, 11\n111111, 12\n111111, 13\n111111, 14\n111111, 15\n111111, 16\n111111, 17\n111111, 18\n111111, 19\n111111, 20\n111111, 21\n111111, 22\n111111, 23\n111111, 24\n111111, 25\n111111, 26\n111111, 27\n111111, 28\n111111, 29\n111111, 30\n111111, 31\n111111, 32\n111111, 33\n111111, 34\n111111, 35\n111111, 36\n111111, 37\n111111, 38\n111111, 39\n111111, 40\n111111, 41\n111111, 42\n111111, 43\n111111, 44\n111111, 45\n111111, 46\n111111, 47\n111111, 48\n111111, 49\n111111, 50\n111111, 51\n111111, 52\n111111, 53\n111111, 54\n111111, 55\n111111, 56\n111111, 57\n111111, 58\n111111, 59\n111111, 60\n111111, 61\n111111, 62\n111111, 63\n111111, 64\n111111, 65\n111111, 66\n111111, 67\n111111, 68\n111111, 69\n111111, 70\n111111, 71\n111111, 72\n111111, 73\n111111, 74\n111111, 75\n111111, 76\n111111, 77\n111111, 78\n111111, 79\n111111, 80\n111111, 81\n111111, 82\n111111, 83\n111111, 84\n111111, 85\n111111, 86\n111111, 87\n111111, 88\n111111, 89\n111111, 90\n111111, 91\n111111, 92\n111111, 93\n111111, 94\n111111, 95\n111111, 96\n111111, 97\n111111, 98\n111111, 99\n111111, 100\n111111, 101\n111111, 102\n111111, 103\n111111, 104\n111111, 105\n111111, 106\n111111, 107\n111111, 108\n111111, 109\n111111, 110\n111111, 111\n111111, 112\n111111, 113\n111111, 114\n111111, 115\n111111, 116\n111111, 117\n111111, 118\n111111, 119\n111111, 120\n111111, 121\n111111, 122\n111111, 123\n111111, 124\n111111, 125\n111111, 126\n111111, 127\n111111, 128\n111111, 129\n111111, 130\n111111, 131\n111111, 132\n111111, 133\n111111, 134\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2 0\\n>@\\n>~') == 2\nassert solution('3 5 1\\n>>@<<\\n>~#~<\\n>>>>~') == 4\nassert solution('4 3 0\\n>@<\\n~>@\\n>>@\\n>>>') == \"begin repairs\""
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\") == \"2\"\nassert solution(\"3 5 1\\n>>@<<\\n>~#~<\") == \"4\"\nassert solution(\"5 5 1\\n>>>>~\\n>>>>>>>>\\n>>><<<<\\n>>>@<<<\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\") == '2'\nassert solution(\"3 5 1\\n>>@<<\\n>~#~<\") == '4'\n\"\"\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 0\\n>>@<<\\n>~#~<') == '2'\nassert solution('3 5 1\\n>>@<<\\n>~#~<') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\") == \"2\"\nassert solution(\"3 5 1\\n>>@<<\\n>~#~<\") == \"4\""
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('0') == 'begin repairs'\n\"\"\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 0\\n>>@<<\\n>~#~<\") == \"2\"\nassert solution(\"3 5 1\\n>>@<<\\n>~#~<\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\") == \"2\"\n\nassert solution(\"3 5 1\\n>>@<<\\n>~#~<\") == \"4\"\n\nassert solution(\"1 1 0\\n@\") == \"begin repairs\"\n\nassert solution(\"1 1 0\\n#\") == \"begin repairs\"\n\nassert solution(\"4 4 5\\n###\\n#@\\n>~\\n>~\") == \"12\""
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 0\\n>@\\n>~') == 2\nassert solution('3 5 1\\n>>@<<\\n>~#~<') == 4\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\") == 2\nassert solution(\"3 5 1\\n>>@<<\\n>~#~<\") == 4\nassert solution(\"4 4 4\\n#@<\\n>@<\\n>@<\") == 2\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"143175=120\") == \"1431+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n\"\"\"\n\nfrom collections import defaultdict\nimport re\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('14317=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\nassert solution('1234=5') == '1+2+3+4=5'\nassert solution('1235=15') == '1+2+3+5=15'\nassert solution('1236=15') == '1+2+6=15'\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\nassert solution(\"10=5\") == \"1+0=1\"\nassert solution(\"100=50\") == \"1+0=1\"\nassert solution(\"5000=50\") == \"5+0=5\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\nassert solution(\"100=010\") == \"1+0=010\"\nassert solution(\"14=1\") == \"14=1\"\nassert solution(\"14=15\") == \"14=1+5=6\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\"\n\nstdin = input().split('=')\na = int(stdin[0])\ns = int(stdin[1])\n\nwhile True:\n    if a < 10:\n        break\n    a = sum([int(x) for x in list(str(a))])\nprint(a, s)\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\nassert solution('123456789=123456789') == '1+2+3+4+5+6+7+8+9=123456789'\nassert solution('11=110') == '1+1=110'\nassert solution('110=11') == '110=11'\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'143175=120'\n) == '14+31+75=120'\n\nassert solution(\n'5025=30'\n) == '5+025=30'\n\nassert solution(\n'123456=1234'\n) == '1+2+3+4=12+34'\n\nassert solution(\n'1234=5678'\n) == '1+2+3+4=12+56+78'\n\nassert solution(\n'111111111111111111111111111111111=111111111111111111111111111111111'\n) == '1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\nassert solution('5133=0') == '5133=0'\nassert solution('0=0') == '0=0'\nassert solution('11001=11010') == '11+010=11010'\n"
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n\"\"\"\n\n\"\"\"\nSOLUTION\n\"\"\"\n\n\"\"\"\nIn mathematics, a solution to a system of equations is a set of numbers such that the sum of the equations is equal to 0.\nFor instance, in linear algebra, a solution can be obtained by finding a vector that is perpendicular to another vector.\nIn linear algebra, solutions are often used to determine the value of a function when a variable is fixed.\n\"\"\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n') == '1 2\\n'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n') == '1 2\\n'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n') == '1 2\\n'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n') == '1 2\\n'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n') == '1 2\\n'\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '8\\n'\n    '1\\n'\n    '2\\n'\n    '3\\n'\n    '4\\n'\n    '5\\n'\n    '6\\n'\n    '7\\n'\n    '1\\n'\n) == '1 2'\n\nassert solution(\n    '8\\n'\n    '1\\n'\n    '2\\n'\n    '3\\n'\n    '4\\n'\n    '5\\n'\n    '6\\n'\n    '7\\n'\n    '1\\n'\n) == '-1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"8\n1\n2\n3\n4\n5\n6\n7\n1\"\"\") == \"1 2\"\nassert solution(\"\"\"8\n1\n2\n3\n4\n5\n6\n7\n1\"\"\") == \"-1\"\n\n\"\"\"\nclass Solution:\n    def solution(self, S):\n        A = B = -1\n        for i in range(1, len(S) - 1):\n            if S[i] == S[i + 1]:\n                A, B = S[i], S[i + 1]\n                break\n        return f'{A} {B}'\n\"\"\"\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n') == '1 2\\n', \"First\"\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n') == '1 2\\n', \"First\"\nassert solution('8\\n4\\n3\\n2\\n1\\n5\\n6\\n7\\n1\\n') == '1 5\\n', \"Second\"\nassert solution('8\\n4\\n3\\n2\\n1\\n5\\n6\\n7\\n1\\n') == '1 5\\n', \"Second\"\nassert solution('8\\n4\\n3\\n2\\n1\\n5\\n6\\n7\\n1\\n') == '1 5\\n', \"Second\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2\\n1\\n3\\n5\\n3\\n2\\n4') == '2\\n4'\nassert solution('4\\n2\\n1\\n3\\n5\\n3\\n2\\n4') == '2\\n4'\nassert solution('4\\n2\\n1\\n3\\n5\\n3\\n2\\n4') == '2\\n4'\nassert solution('4\\n2\\n1\\n3\\n5\\n3\\n2\\n4') == '2\\n4'\nassert solution('4\\n2\\n1\\n3\\n5\\n3\\n2\\n4') == '2\\n4'\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1') == '1 2'\n\n\"\"\""
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == '1 2 3 4 5 6 7 8 -1'\nassert solution(\"8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n\") == '1 2 3 4 5 -1'\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n\") == '1 2 3 4 5 -1'\n\nprint(solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n\"))\n"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n1\\n2\\n4\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"-1\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n') == '1 2'\n\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n') == '1 -1'\n\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n') == '1 8'"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n\") == '1 2'\nassert solution(\"8\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n\") == '-1'\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == '1 3'\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\nassert solution('11111111111111111111111111111111111111111111111111111111111111') == '0'\nassert solution('01111111111111111111111111111111111111111111111111111111111111111111') == '8'\nassert solution('11011111111111111111111111111111111111111111111111111111111111111111111111') == '19'\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1101\") == 1\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1101') == '1'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"11010\") == \"2\"\nassert solution(\"110101010\") == \"10\"\nassert solution(\"11101\") == \"3\"\n\nassert solution(\"1111\") == \"1\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1101') == '1'\nassert solution('1111') == '2'\nassert solution('10101') == '3'\nassert solution('11101101') == '5'\n\"\"\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1101') == '1'\nassert solution('11101') == '2'\n\n\"\"\""
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1101') == 1\nassert solution('1') == 0\n\"\"\""
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1101''') == '1'\nassert solution('''101010''') == '10'\nassert solution('''111000''') == '3'\nassert solution('''011100''') == '0'\nassert solution('''1010101010''') == '18'\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1101\") == 1\nassert solution(\"1111\") == 1\nassert solution(\"101010\") == 1\n\"\"\""
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1101) == 1\nassert solution('1') == 0\n\"\"\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\") == \"1\\n0\\n2\"\nassert solution(\"2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\\n1 2\") == \"3\\n0\"\nassert solution(\"2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\\n1 2\") == \"3\\n0\""
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\") == \"1\\n0\\n2\"\n\"\"\""
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1') == '1\\n0\\n2'\nassert solution('2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1') == '3\\n0\\n2'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 6 3 6\\n7 3 4 2 6 5 6 1') == '3'\nassert solution('3 1 3 1\\n2 2 1') == '1'\nassert solution('3 1 3 1\\n2 2 1\\n3 3 1 3') == '2'\nassert solution('3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2') == '0'\nassert solution('3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3') == '2'\n\nprint(solution(stdin))\n\n------0.0688828------\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\\n') == '1\\n0\\n2'\nassert solution('2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\\n1 2\\n') == '3\\n0\\n2'\n\"\"\"\n\nwith open('test_files/Y11R5P1/A.in', 'r') as fin:\n    def solution(stdin: str) -> str:\n        N, M = map(int, stdin.split())\n        trucks = []\n        for i in range(N):\n            trucks.append(list(map(int, stdin.split()[i + 1::])))\n        res = 0\n        for a, b in stdin.split()[:M]:\n            a = int(a)\n            b = int(b)\n            if a < b:\n                res += len([1 for i in range(1, N) if (a < trucks[i][0] < b or b < trucks[i][0] < a)])\n            else:\n                res += len([1 for i in range(1, N) if (a > trucks[i][0] > b or b > trucks[i][0] > a)])\n        return str(res)\n\n    print(''.join(solution(stdin.read()) for _ in range(int(stdin.readline()))))\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\\n1 2\\n\") == \"3\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\\n') == '1\\n0\\n2\\n'\nassert solution('2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\\n1 2\\n') == '3\\n0\\n2\\n'\n\"\"\""
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1') == '1\\n0\\n2'\nassert solution('2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\\n1 2\\n') == '3\\n0\\n2'\n\n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict\nfrom typing import Tuple, List\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\") == \"1\\n0\\n2\"\nassert solution(\"2 1\\n4 1 6 3 6\\n7 3 4 2 6 5 6 1\") == \"3\\n0\\n2\"\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 1 1 1 1\\n2 3\\n3 4') == '1\\n0\\n1'\n\"\"\"\nimport sys"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0'\nassert solution('4 2\\n2 4 3 4') == '3.666666'\nassert solution('4 3\\n3 6 9 7') == '4.166667'"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == \"4.0\"\nassert solution(\"4 2\\n2 4 3 4\") == \"3.66666666666666666666666667\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\na.sort()\nmax_avg = 0\nfor i in range(n - m + 1):\n    avg = sum(a[i : i + m]) / m\n    if avg > max_avg:\n        max_avg = avg\nprint(max_avg)\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0'\nassert solution('4 2\\n2 4 3 4') == '3.666666'\nassert solution('3 3\\n1 2 3') == '1.5'\nassert solution('5 3\\n1 2 3 4 5') == '2.83333'\nassert solution('3 4\\n1 2 3 4') == '2.5'\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0'\nassert solution('4 2\\n2 4 3 4') == '3.666666'\n\"\"\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0'\nassert solution('4 2\\n2 4 3 4') == '3.6666666666666666666666666667'\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.0'\nassert solution('4 2\\n2 4 3 4') == '3.666666'\n\"\"\"\n\nimport sys\nimport math\n\nstdin = sys.stdin\n\nN, K = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\nmin_sum = 0\nmax_sum = 0\navg_sum = 0\n\nfor i in range(0, N):\n    min_sum += a[i]\n    avg_sum += a[i]\n    if i >= K:\n        avg_sum -= a[i-K]\n        avg_sum = max(avg_sum, min_sum)\n        min_sum = min(min_sum, avg_sum)\n\nprint(round(avg_sum/K, 5))\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '4'\nassert solution('1 2 3 4 5') == '4.5'\nassert solution('1 2 3 4 5 6') == '4.4'\nassert solution('1 2 3 4 5 6 7 8') == '4.5'\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == \"4.000000\"\nassert solution(\"4 2\\n2 4 3 4\") == \"3.666666\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == \"4.0\"\nassert solution(\"4 2\\n2 4 3 4\") == \"3.666666\""
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.000000'\n\"\"\"\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == \"0.750\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\\n') == '0.750'\nassert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0\\n') == '0.625'\n\"\"\"\n\nfrom decimal import Decimal\nfrom math import factorial\nfrom random import randint, choice\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\\n') == '0.750'\n\"\"\"\n\nfrom typing import List\n\n\nclass SandDivider:\n    def __init__(self, num_sections: int, num_colors: int, volume: List[float], distances: List[float], min_amounts: List[float],\n                 max_amounts: List[float]) -> None:\n        self.num_sections: int = num_sections\n        self.num_colors: int = num_colors\n        self.volume: List[float] = volume\n        self.distances: List[float] = distances\n        self.min_amounts: List[float] = min_amounts\n        self.max_amounts: List[float] = max_amounts\n\n    def __str__(self) -> str:\n        return f'num_sections: {self.num_sections}, num_colors: {self.num_colors}, volume: {self.volume},'\\\n               f'distances: {self.distances}, min_amounts: {self.min_amounts}, max_amounts: {self.max_amounts}'\n\n    def _get_num_sections(self) -> int:\n        return self.num_sections\n\n    def _get_num_colors(self) -> int:\n        return self.num_colors\n\n    def _get_volume(self) -> List[float]:\n        return self.volume\n\n    def _get_distances(self) -> List[float]:\n        return self.distances\n\n    def _get_min_amounts(self) -> List[float]:\n        return self.min_amounts\n\n    def _get_max_amounts(self) -> List[float]:\n        return self.max_amounts\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == '0.750'\nassert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == '0.625'\n\"\"\"\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == \"0.750\"\n\"\"\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == '0.750'\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0') == '0.750'\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == \"0.750\"\nassert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == \"0.625\"\nassert solution(\"2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.0 0.0\\n0.0 2.0\") == \"0.625\"\n\"\"\"\n\nn, m, w, h = [int(x) for x in stdin.split(' ')]\ns = [[float(y) for y in x.split(' ')] for x in stdin.split('\\n')[1:]]\n\ns = sorted(s, key=lambda x: x[0])\n\nleft = sorted([x[0] for x in s])\n\nright = sorted([x[1] for x in s])\n\nmax_ = []\nmin_ = []\nfor i in range(n):\n    max_.append(right[i])\n    min_.append(left[n - i - 1])\n\nmax_ = max_[1:] + max_[:1]\nmin_ = min_[1:] + min_[:1]\n\nd = []\nfor i in range(n - 1):\n    d.append(max_[i] - min_[i])\n\nprint('{:.3f}'.format(min(d)))\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0''') == '0.750'\nassert solution('''2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0''') == '0.625'\n\"\"\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution_tester.TestCaseBuilder()\n        .test_case_lines([\"2 2 5 5\", \"2.0 2.0\", \"4.0\", \"1.0 0.0\", \"0.0 1.0\", \"1.0 0.0\", \"0.0 2.0\"])\n        .test_input_parameters(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\n        .output_format(float)\n        .get_result())\n        .success()"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 3\n1 2 4\n0 3 6\n4 0 3\n''') == '2'\n\n\"\"\""
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open('./sample.in').read()) == open('./sample.out').read()\nprint(solution(open('./input.in').read()))\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 2 4\\n0 3 6\\n4 0 3\") == 2\n\"\"\"\n\n\"\"\"\n    1. start with a partial code, which can be gotten by making a list of lists\n    2. to get a new partial code, remove top and rightmost digits, add them to the diagonal down and right, respectively\n    3. if there is a digit at the bottom or left of the partial code, remove it\n    4. if there is a row of zeros, remove it\n\"\"\"\n\nm, n = list(map(int, input().strip().split()))\n\nmatrix = []\nfor _ in range(m):\n    row = list(map(int, input().strip().split()))\n    matrix.append(row)"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2 4\\n0 3 6\\n4 0 3\") == \"2\"\nassert solution(\"3 4\\n2 3 0 7\\n0 0 2 1\\n0 0 3 0\") == \"37\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 4\\n0 3 6\\n4 0 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 2 4\\n0 3 6\\n4 0 3\") == 2\n\"\"\"\n\nfrom math import factorial as f\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n2 3 0 7\\n0 0 2 1\\n0 0 3 0\") == \"37\"\nassert solution(\"3 4\\n0 3 6\\n4 0 3\") == \"2\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 2 4\\n0 3 6\\n4 0 3\\n\") == 2\n\"\"\"\nimport math\n"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3\\n') == '2'\nassert solution('3 4\\n2 3 0 7\\n0 0 2 1\\n0 0 3 0\\n') == '37'\n\"\"\""
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1234\\n1 4\\n1 4\\n1 4\") == \"10\\n14\\n18\"\n\"\"\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\\n') == '10\\n14\\n18'\nassert solution('4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\\n') == '1\\n4\\n9\\n16'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1234\\n1 4\\n1 4\\n1 4\") == \"10\\n14\\n18\"\nassert solution(\"4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"1\\n4\\n9\\n16\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1234\\n1 4\\n1 4\\n1 4\\n1 4\") == \"10\\n14\\n18\\n16\"\nassert solution(\"4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"1\\n4\\n9\\n16\"\n\n\"\"\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('1') == '1'\nassert solution('1 2') == '3'\nassert solution('1\\n2 3') == '3'\n\n'''"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"4 3\\n1234\\n1 4\\n1 4\\n1 4\"\n) == \"10\\n14\\n18\"\n\nassert solution(\n\"4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\"\n) == \"1\\n4\\n9\\n16\"\n\nprint(\"Successfully passed all tests\")"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"10\\n14\\n18\\n16\"\n\"\"\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\\n\") == \"10\\n14\\n18\\n\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1234\\n1 4\\n1 4\\n1 4') == '10\\n14\\n18'\nprint(solution(stdin))\n"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"1\\n4\\n9\\n16\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\\n\") == \"2\"\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n\") == \"1\"\nassert solution(\"5 4 4\\n1 3\\n3 4\\n2 4\\n4 5\\n\") == \"0\"\n\n\"\"\"\n\nfrom collections import defaultdict\n\nN, K, M = map(int, input().split())\nedges = defaultdict(list)\nfor _ in range(M):\n    i, j = map(int, input().split())\n    edges[i].append(j)\n\nproducers = set()"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3\\n1 3\\n2 3\\n3 4') == '2'\nassert solution('5 2 4\\n1 3\\n3 4\\n2 4\\n4 5') == '1'\n\"\"\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 3\\n1 3\\n2 3\\n3 4\\n') == '2'\n\nassert solution('5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n') == '1'\n\"\"\"\n\n\"\"\"\nOptimized Solution:\n\n\"\"\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport sys\n\nN, K, M = [int(x) for x in sys.stdin.readline().strip().split()]\nedges = [[int(y) for y in x.strip().split()] for x in sys.stdin]\n\ndp = [[0] * (M + 1) for _ in range(N + 1)]\n\nfor e in edges:\n    dp[e[0]][e[1]] += 1\n    dp[e[1]][e[0]] += 1\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 3\\n1 3\\n2 3\\n3 4\\n') == '2'\nassert solution('5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n') == '1'\nassert solution('5 3 4\\n1 3\\n2 4\\n3 4\\n4 5\\n') == '0'\nassert solution('6 2 4\\n1 3\\n2 3\\n4 5\\n3 5\\n4 5\\n') == '0'\nassert solution('6 3 4\\n1 3\\n2 3\\n3 4\\n4 5\\n5 6\\n') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 3\\n1 3\\n2 3\\n3 4') == '2'\nassert solution('5 2 4\\n1 3\\n3 4\\n2 4\\n4 5') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 3\\n1 3\\n2 3\\n3 4\\n') == '2'\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n5 2 4\n1 3\n3 4\n2 4\n4 5\n\"\"\") == \"1\"\n\n\"\"\"\nimport random\nimport unittest\nimport string\nfrom random import randint\nfrom typing import List\nfrom collections import defaultdict\n\nfrom data_structures import DisjointSet, Graph, WeightedVertex, Edge\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 3\\n3 4\") == 2\nassert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\") == 1\n\"\"\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 2 3\n1 3\n2 3\n3 4\n''') == '2'\nassert solution('''5 2 4\n1 3\n3 4\n2 4\n4 5\n''') == '1'\n\"\"\"\n\nfrom sys import stdin\nfrom collections import deque\n\nn, k, m = list(map(int, stdin.readline().split()))\n\nadj = [[] for _ in range(n)]\n\nfor _ in range(m):\n    x, y = list(map(int, stdin.readline().split()))\n    x -= 1\n    y -= 1\n    adj[x].append(y)\n    adj[y].append(x)\n\nproducers = [[] for _ in range(n)]\nfor _ in range(k):\n    x, y = list(map(int, stdin.readline().split()))\n    x -= 1\n    y -= 1\n    producers[x].append(y)\n\nconveyor_belt = [[] for _ in range(m)]\nfor i in range(m):\n    x, y = list(map(int, stdin.readline().split()))\n    x -= 1\n    y -= 1\n    conveyor_belt[i] = (x, y)"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == 'yes'"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"no\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1\n10000 0 10000 10000 0 10000\n3\n10000 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0\n''') == 'no'\nassert solution('''1\n10000 0 10000 10000 0 10000\n3\n10000 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0\n''') == 'no'\nassert solution('''1\n10000 0 10000 10000 0 10000\n3\n10000 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0\n''') == 'yes'\nassert solution('''1\n10000 0 10000 10000 0 10000\n3\n10000 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0\n''') == 'yes'\nassert solution('''1\n10000 0 10000 10000 0 10000\n3\n10000 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0\n''') == 'yes'\n"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n9999 0 10000 0 0 1\\n9998 0 9999 0 0 1') == 'no'\n\nassert solution('2\\n9996 0 9997 0 0 1\\n9997 0 9998 0 0 1') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"no\"\nassert solution(\n    \"1\\n0 0 0 0 0 0\\n1\\n0 0 0 0 0 0\") == \"yes\"\nassert solution(\n    \"1\\n-1 0 0 -1 0 0\\n0 0 0 1 0 0\") == \"yes\"\nassert solution(\n    \"1\\n0 0 0 0 0 0\\n-1 0 0 0 0 0\") == \"no\"\nassert solution(\n    \"1\\n0 0 0 0 0 0\\n0 0 0 0 0 0\") == \"yes\"\n\n\"\"\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000') == 'no'\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0') == 'no'\nassert solution('2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1') == 'no'\n\nprint('Success')"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\\n\") == \"no\"\nassert solution(\"2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n\") == \"no\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"no\"\nassert solution(\"10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"no\"\nassert solution(\"10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\") == \"yes\"\n\n\"\"\""
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10000 0 10000 10000 0 10000\") == \"yes\"\nassert solution(\"10000 0 10000 10000 5000 5000\") == \"no\"\nassert solution(\"9996 0 9997 0 0 1\") == \"yes\"\nassert solution(\"9999 0 10000 0 0 1\") == \"yes\"\nassert solution(\"9997 0 9998 0 0 1\") == \"no\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 3\n1 2\n2 3\n1 3\n''') == 'YES'\nassert solution('''4 3\n1 2\n1 3\n1 4\n''') == 'NO'\n\nSample Input 1:\n2 4\n1 2\n1 3\n1 4\nSample Output 1:\nYES\n1 4\n1 3\n2 1\n'''\n\nimport unittest\nimport itertools\nimport functools\n\nclass TestSum(unittest.TestCase):\n\n    def test_solution(self):\n        assert solution('''4 3\n1 2\n1 3\n1 4\n''') == 'YES'\n        assert solution('''4 3\n1 2\n1 3\n1 4\n''') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n1 4\") == \"NO\\n\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n1 2\\n1 3\\n1 4\\n2 4\\n3 4\") == \"NO\"\nassert solution(\"5 5\\n1 2\\n1 3\\n1 4\\n2 4\\n3 4\") == \"YES\\n1 3\\n1 2\\n3 2\\n4 2\\n5 1\"\n\"\"\""
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2\\n2 3\\n1 3\\n\") == \"YES\\n1 3\\n2 1\\n3 2\\n\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 3\\n') == 'YES\\n1 3\\n2 1\\n3 2\\n'\n\"\"\""
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n1 4\") == \"NO\"\nassert solution(\"3 3\\n1 2\\n2 3\\n1 3\") == \"YES\\n1 3\\n2 1\\n3 2\"\n\"\"\"\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 3\\n') == 'YES\\n1 3\\n2 1\\n3 2'\nassert solution('4 3\\n1 2\\n1 3\\n1 4\\n') == 'NO'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3\n1 2\n2 3\n1 3\n''') == 'YES\\n1 3\\n2 1\\n3 2'\nassert solution('''4 3\n1 2\n1 3\n1 4\n''') == 'NO'\nassert solution('''4 4\n1 2\n1 3\n1 4\n2 3\n''') == 'NO'\nassert solution('''5 6\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n3 4\n3 5\n4 5\n4 6\n5 6\n''') == 'YES\\n1 5\\n1 6\\n2 3\\n3 4\\n4 5\\n5 6'\nassert solution('''6 6\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6\n''') == 'YES\\n1 6\\n2 2\\n3 1\\n4 1\\n5 1'\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 3\\n') == 'YES\\n1 3\\n2 1\\n3 2'\nassert solution('4 3\\n1 2\\n1 3\\n1 4\\n') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2\\n2 3\\n1 3\\n\") == \"YES\\n1 3\\n2 1\\n3 2\"\n\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n\") == \"NO\"\n\nassert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n\") == \"NO\"\n\nassert solution(\"4 2\\n1 2\\n1 3\\n1 4\\n\") == \"NO\"\n\nassert solution(\"1 1\\n\") == \"YES\""
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n0 > 1\\n1 = 2\\n0 = 2\") == \"inconsistent\"\n\nassert solution(\"5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4\") == \"consistent\""
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n0 > 1\\n1 = 2\\n0 = 2') == 'inconsistent'\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4') == 'consistent'\n\nSample Input 3:\n5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\nSample Output 3:\ninconsistent\n\"\"\""
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n0 > 1\\n1 = 2\\n0 = 2') == 'inconsistent'\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n0 > 1\\n1 = 2\\n0 = 2') == 'inconsistent'\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4') == 'consistent'\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4\\n0 > 2') == 'inconsistent'\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 = 3\\n0 = 3') == 'inconsistent'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n0 > 1\\n1 = 2\\n0 = 2') == 'inconsistent'\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4') == 'consistent'\n\n\"\"\"\n\nimport collections\nimport itertools\n\nS = list(stdin.split('\\n'))\nN, M = map(int, S[0].split())\n\nA = [s.split() for s in S[1:M+1]]\n\ngames = collections.defaultdict(set)\nfor i, j in A:\n    games[i].add(j)\n    games[j].add(i)"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n0 > 1\\n1 = 2\\n0 = 2') == 'inconsistent'\nassert solution('5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4') == 'consistent'\n\"\"\""
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 > 1\\n1 = 2\\n0 = 2') == 'inconsistent'\nassert solution('0 > 1\\n1 = 2\\n0 = 2\\n1 = 3\\n0 = 3') == 'consistent'\n\n\"\"\""
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n0 > 1\\n1 = 2\\n0 = 2\") == \"inconsistent\"\nassert solution(\"5 5\\n0 = 1\\n1 = 2\\n3 = 4\\n0 > 3\\n1 > 4\") == \"consistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n0 > 1\\n1 = 2\\n0 = 2\") == \"inconsistent\"\n\"\"\"\n\n\n\nimport math"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input) == expected_output\n\nprint(solution(input))\n\n--------------------\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1,1') == '1.414215'\nassert solution('10,10,10') == '6.283185'\nassert solution('100,100,100') == '1000.0'\nassert solution('1,0,0,0') == '0.0'\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n\") == '1.57079633'\nassert solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n\") == '41938.65135885'\nassert solution(\"5\\n4 3 4\\n1 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n5 5 5\\n\") == '2.2444364'\nassert solution(\"1\\n4 3 4\\n1 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n5 5 5\\n\") == '1.0'\nassert solution(\"1\\n-4 3 4\\n1 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n5 5 5\\n\") == '0.0'"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == '1.57079633'\nassert solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\") == '41938.65135885'\n\"\"\""
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == \"1.57079633\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\") == \"41938.65135885\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\nassert solution('4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n') == '41938.65135885'\n\"\"\"\n\nfrom math import *\nimport sys"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n\") == \"1.57079633\"\nassert solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n\") == \"41938.65135885\""
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\n"
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\nassert solution('4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0') == '41938.65135885'\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\") == '3'\nassert solution(\"sabcabcfabc\") == '3'\n\"\"\""
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\\nsabcabcfabc\") == \"3\"\n\nassert solution(\"18\\ntrutrutiktiktappop\") == \"4\"\n\"\"\""
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\\nsabcabcfabc\") == \"3\"\nassert solution(\"18\\ntrutrutiktiktappop\") == \"4\"\n\"\"\""
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('abc') == 'a'\nassert solution('abcab') == 'a'\nassert solution('abcabc') == 'a'\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\\n\"\n        \"sabcabcfabc\") == \"3\"\nassert solution(\"18\\n\"\n        \"trutrutiktiktappop\") == \"4\""
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == '3'\nassert solution('18') == '4'\nassert solution('100000') == '0'\nassert solution('aaaaaaaa') == '0'\nassert solution('abc') == '0'\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''11\nsabcabcfabc''') == '3'\nassert solution('''18\ntrutrutiktiktappop''') == '4'"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\", \"sabcabcfabc\") == 3\nassert solution(\"18\", \"trutrutiktiktappop\") == 4\nassert solution(\"18\", \"trutrutiktiktappop\") == 4\nassert solution(\"18\", \"trutrutiktiktappop\") == 4\n\nprint(solution(\"18\", \"trutrutiktiktappop\"))\n\"\"\""
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11\\nsabcabcfabc') == '3'\n\nassert solution('18\\ntrutrutiktiktappop') == '4'\n\nassert solution('1000\\nqwertyqwerty') == '0'\n\"\"\""
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\\nsabcabcfabc\") == \"3\"\nassert solution(\"18\\ntrutrutiktiktappop\") == \"4\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n2 3 1\n3 1 2''') == '2'\n\nassert solution('''6\n5 1 6 3 2 4\n4 6 5 1 3 2''') == '5'\n\n'''\nfrom math import ceil, log10\n\nn = stdin.readline()\na = [int(i) for i in stdin.readline().split()]\nb = [int(i) for i in stdin.readline().split()]\n\na_set = set(a)\nb_set = set(b)"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\\n4 5 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 3 1\\n3 1 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 3 1\\n3 1 2\") == 2\n\"\"\""
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 3 1\\n3 1 2') == '2'\nassert solution('6\\n5 1 6 3 2 4\\n4 6 5 1 3 2') == '5'\n\"\"\"\n\nfrom math import log2\nfrom sys import stdin\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3\\n4 5 6') == '2'\n\n\"\"\""
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 3 1\\n3 1 2\") == \"2\"\nassert solution(\"6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\") == \"5\"\n\"\"\"\n\nfrom typing import List, Set, Dict\nfrom collections import deque\nimport itertools\nimport functools\n\nfrom utils import timed\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n2 3 1\\n3 1 2') == '2'\nassert solution('6\\n5 1 6 3 2 4\\n4 6 5 1 3 2') == '5'\n"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3\\n3 1 2') == '2'\nassert solution('6\\n5 1 6 3 2 4\\n4 6 5 1 3 2') == '5'\n\"\"\"\nimport sys\nimport timeit"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 3 1\\n3 1 2') == '2'\nassert solution('6\\n5 1 6 3 2 4\\n4 6 5 1 3 2') == '5'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n0 10\\n0 10\") == \"4\"\n\"\"\""
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\") == '4'\nprint(solution(\"3 1\\n0 10 20\\n0 10\"))\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n0 10 20') == '4'\nassert solution('6 1\\n0 10 20 26 40 50') == '9'\n\n\"\"\"\n\nimport sys\nimport numpy as np\nimport re"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\") == 4\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n0 10\\n0 10') == '2'\nassert solution('1 2\\n0 10 20\\n0 10') == '4'\nassert solution('3 1\\n0 10\\n0 10 20\\n0 10') == '4'\nassert solution('5 1\\n0 10\\n0 10 20 26 40 50\\n0 10\\n0 10') == '8'\n\"\"\"\n\nwith open('input.txt') as f:\n    first_line = f.readline().split()\n    n = int(first_line[0])\n    p = int(first_line[1])\n\n    notes = [int(x) for x in f.readline().split()]\n\n    for _ in range(p):\n        note_info = f.readline().split()\n        note_info = [int(x) for x in note_info]\n        notes = [max(notes[x], notes[y]) for x, y in zip([note_info[0] - 1, note_info[1]], [note_info[2] - 1, note_info[3] - 1])]\n\n    print(sum(notes))\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n0 10 20\\n0 10') == '4'\nassert solution('6 1\\n0 10 20 26 40 50\\n0 40') == '9'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\") == 4\nassert solution(\"6 1\\n0 10 20 26 40 50\\n0 40\") == 9"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\") == \"4\"\nassert solution(\"6 1\\n0 10 20 26 40 50\\n0 40\") == \"9\"\n\"\"\""
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n0 10 20\\n0 10\") == 4\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n0 10\\n0 10') == '4'\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))''') == 'not equal'\nassert solution('''sorted(concat([3,2,1],[4,5,6]))''') == 'equal'\n\nSample Input 1:\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 2:\nequal\n\nSample Input 1:\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 2:\nequal\n\nSample Input 1:\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 2:\nequal\n\nSample Input 1:\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 2:\nequal\n\nSample Input 1:\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 2:\nequal\n\nSample Input 1:\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 2:\nequal\n\nSample Input 1:\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 2:\nequal\n\nSample Input 1:\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 2:\nequal\n\nSample Input 1:\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 2:\nequal\n\nSample Input 1:\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 2:\nequal\n\nSample Input 1:\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 2:\nequal\n\nSample Input 1:\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 2:\nequal\n\nSample Input 1:\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\") == \"equal\""
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]\") == \"equal\"\n\n---"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])') == 'not equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]') == 'equal'\n\n\"\"\"\nimport itertools\nfrom collections import defaultdict\nfrom typing import List\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])') == 'not equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]') == 'equal'\n\"\"\"\n\nimport re\nfrom typing import List, NamedTuple, Tuple\nimport math\nfrom fractions import Fraction\n\nTEST_CASES = [\n    ('concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])', 'not equal'),\n    ('sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]', 'equal')\n]\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])\") == 'not equal'\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]\") == 'equal'\n\n\"\"\""
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))') == 'equal'"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])') == 'not equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]') == 'equal'\n\"\"\"\n\nfrom typing import List\n\n\nclass Token:\n    def __init__(self, value: str) -> None:\n        self.value = value\n        self.type = self.__class__.__name__\n\n    def __str__(self) -> str:\n        return self.value\n\n\nclass Tokenizer:\n    def __init__(self, string: str) -> None:\n        self.string = string\n        self.index = 0\n\n    def read_token(self) -> Token:\n        current_char = self.string[self.index]\n        if current_char.isspace():\n            self.skip_whitespace()\n            return self.read_token()\n        elif current_char == \"(\":\n            self.index += 1\n            return Token(current_char)\n        elif current_char == \")\":\n            self.index += 1\n            return Token(current_char)\n        elif current_char == \"{\":\n            self.index += 1\n            return Token(current_char)\n        elif current_char == \"}\":\n            self.index += 1\n            return Token(current_char)\n        elif current_char == \",\":\n            self.index += 1\n            return Token(current_char)\n        elif current_char == \"[\":\n            self.index += 1\n            return Token(current_char)\n        elif current_char == \"]\":\n            self.index += 1\n            return Token(current_char)\n        elif current_char.isnumeric():\n            self.index += 1\n            return self.read_number()\n        else:\n            raise SyntaxError(\"Unexpected character '%s'\" % self.string[self.index])\n\n    def skip_whitespace(self) -> None:\n        while self.index < len(self.string) and self.string[self.index].isspace():\n            self.index += 1\n\n    def read_number(self) -> Token:\n        result = \"\"\n        while self.index < len(self.string) and self.string[self.index].isnumeric():\n            result += self.string[self.index]\n            self.index += 1\n        return Token(result)\n\n\nclass Buffer:\n    def __init__(self, string: str) -> None:\n        self.string = string\n        self.index = 0\n\n    def read_token(self) -> Token:\n        current_char = self.string[self.index]\n        if current_char.isspace():\n            self.skip_whitespace()\n            return self.read_token()\n        elif current_char == \"(\":\n            self.index += 1\n            return Token(current_char)\n        elif current_char == \")\":\n            self.index += 1\n            return Token(current_char)\n        elif current_char == \"{\":\n            self.index += 1\n            return Token(current_char)\n        elif current_char == \"}\":\n            self.index += 1\n            return Token(current_char)\n        elif current_char == \",\":\n            self.index += 1\n            return Token(current_char)\n        elif current_char == \"[\":\n            self.index += 1\n            return Token(current_char)\n        elif current_char == \"]\":\n            self.index += 1\n            return Token(current_char)\n        elif current_char.isnumeric():\n            self.index += 1\n            return self.read_number()\n        else:\n            raise SyntaxError(\"Unexpected character '%s'\" % self.string[self.index])\n\n    def skip_whitespace(self) -> None:\n        while self.index < len(self.string) and self.string[self.index].isspace():\n            self.index += 1\n\n    def read_number(self) -> Token:\n        result = \"\"\n        while self.index < len(self.string) and self.string[self.index].isnumeric():\n            result += self.string[self.index]\n            self.index += 1\n        return Token(result)\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]\") == \"equal\"\n\"\"\"\nimport sys\n\nimport numpy as np\n\ninp = sys.stdin.read().split('\\n')\nx = np.array([[inp[i * 3 + j] for j in range(3)] for i in range(len(inp) // 3)])\nprint(x)\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])') == 'not equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]') == 'equal'\n\"\"\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\nassert solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\"\nassert solution(\"1 1\\n3 1\\n1 1 1 1\") == \"Oh no\"\nassert solution(\"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\"\nassert solution(\"1 2\\n2 2\\n1 1 1 1\") == \"Oh no\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\nassert solution(\"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\nassert solution(\"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\""
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\n\"\"\"\n\nimport math\nfrom collections import Counter"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\"\nassert solution(\"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\nassert solution(\"1 4\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\n\"\"\"\n\nA, H = map(int, input().split())\n\nn, m = map(int, input().split())\n\nm_enemys = [\n    tuple(map(int, input().split()))\n    for _ in range(m)\n]\n\nm_areas = [\n    tuple(map(int, input().split()))\n    for _ in range(m)\n]"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == expected_result_1\nprint(solution(test_input_2))\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\nassert solution(\"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\\n2 3 1 2\\n1 2 1 2\") == \"1\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2') == '3'\nassert solution('5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1') == 'impossible'\nassert solution('4 1\\n1 2 1\\n2 3 1') == 'impossible'\nassert solution('5 5\\n1 2 1\\n2 3 2\\n3 4 1\\n4 5 1') == '3'\n\n'''\n\nfrom collections import Counter\nimport copy\n\nn, m = map(int, input().split())\nairports = [list(map(int, input().split())) for _ in range(m)]\nairports_count = Counter()\nfor i in range(m):\n    airports_count[airports[i][0]] += 1\n    airports_count[airports[i][1]] += 1\nairports = [set(airports[i][0], airports[i][1]) for i in range(m)]\nairports_list = list(airports)\n\nlounge_count = 0\nfor i in range(len(airports_list)):\n    airports_copy = copy.deepcopy(airports_list)\n    airports_copy.pop(i)\n    for j in range(len(airports_copy)):\n        for k in range(j + 1, len(airports_copy)):\n            if (airports_copy[j] & airports_copy[k]):\n                airports_copy[j] |= (airports_copy[k])\n                airports_copy.pop(k)\n    airports_copy.sort()\n    if set(airports_list[i]) in airports_copy:\n        lounge_count += 1\nprint(lounge_count)\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2') == '3'\nassert solution('5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == test_output_1\n\n\"\"\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2\\n\") == \"3\"\n\nassert solution(\"5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\\n\") == \"impossible\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1') == '3'\nassert solution('3 2\\n1 2 1\\n2 3 1') == 'impossible'\nassert solution('4 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1') == 'impossible'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'impossible'\nassert solution('10 5') == '10'\nassert solution('5 5') == 'impossible'\nassert solution('4 4\\n1 2 1\\n2 3 1\\n3 4 1\\n4 1 2') == '3'\nassert solution('10 10\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\\n4 6 1\\n5 6 1\\n5 7 1\\n6 7 1\\n7 8 1\\n8 9 1\\n9 10 1\\n10 1 2') == '3'\n\nprint(solution(input_)))\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('1\\n0') == '0'\nassert solution('1\\n0\\n0') == '0'\nassert solution('1\\n1\\n2\\n3\\n4\\n0') == '1'\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2\") == \"3\"\nassert solution(\"5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"impossible\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2\") == \"3\"\nassert solution(\"5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"impossible\""
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 1 1 3') == '2'\nassert solution('22') == '4'\nassert solution('2 22') == '4'\nassert solution('3 1 2 1 3 2') == '2'\nassert solution('2 3 1 3') == '3'\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 1 1 1 3') == 2\n\"\"\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 1 1 3') == '2'\nassert solution('1\\n22') == '4'\n\"\"\""
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 1 1 3') == '2'\nassert solution('2 1 1 1 3') == '4'\nassert solution('22') == '4'\n\"\"\"\n\nimport sys\nimport re\n\nk_quotation = r'\\'' * k\n\nn = int(sys.stdin.readline().rstrip('\\n'))\nstring = sys.stdin.readline().rstrip('\\n')\n\nk = 1\nwhile k < n:\n    string = re.sub(k_quotation * k, r'\\1' * k + r'\\2' * k, string, count = 1)\n    k += 1"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1 1 3\") == \"2\"\nassert solution(\"22\") == \"4\"\nassert solution(\"\") == \"no quotation\"\nassert solution(\"1234\" * 10) == \"4\"\nassert solution
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 1 1 3') == '4'\nassert solution('22') == '4'\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 1 3\") == \"2\"\nassert solution(\"22\") == \"4\"\nassert solution(\"22 22 22\") == \"4\"\nassert solution(\"2 1 1 1 3 2\") == \"2\"\n\nassert solution(\"2 2 2 2 3\") == \"3\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"22\") == 4"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 1 1 1 3') == 2\n\"\"\"\n\nimport math"
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 1 1 3') == '2'\nassert solution('22') == '4'\n\n'''\nfrom typing import List, Tuple"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 5\") == \"3\"\nassert solution(\"4 1 2 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"2\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n3 1 5\"\"\") == \"\"\"3\n\"\"\"\n\nassert solution(\"\"\"4\n1 2 3 4\"\"\") == \"\"\"2\n\"\"\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 5\\n') == '3'\nassert solution('4 1 2 3\\n') == '2'\nassert solution('4 2 1 3\\n') == '1'\n\"\"\""
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5\\n3 1 5') == '3\\n2\\n1'\nassert solution('4\\n1 2 3 4') == '2\\n3\\n1'\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 5') == '3'\nassert solution('4 1 2 3') == '2'\nassert solution('3 2 4') == '0'"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 5\\n') == '3', 'The first example does not work'\nassert solution('4 1 2 3 4\\n') == '2', 'The second example does not work'\n\"\"\"\n\nn = int(input())\nlst = list(map(int, input().split()))\nprint(sum([(i % 2 == 0) for i in lst]))\n"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 5\") == \"2\"\nassert solution(\"4\\n1 2 3 4\") == \"2\"\nassert solution(\"3\\n1 5\") == \"2\"\nassert solution(\"4\\n1 2 3 4\") == \"2\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a+b-c\") == \"+d-\"\nassert solution(\"a-b+d-c\") == \"-\" + \"d+\"\nassert solution(\"a+b-c+d-e\") == \"-\" + \"d+\" + \"+f\"\n\"\"\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\"\nassert solution(\"a-b+d-c\") == \"-\" + \"+d-\"\nassert solution(\"a+b+c\") == \"+ +d-\"\nassert solution(\"a-b-c\") == \"- +d+\"\nassert solution(\"a+b+c+d\") == \"+ +d+\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\"\nassert solution(\"a-b+d-c\") == \"- +d-\"\nassert solution(\"a+b-c+d-e+f-g+h-i-j+k-l\") == \"- +d- +f-g-h-i-\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\"\nassert solution(\"a-b+d-c\") == \"-\" + \"d-\"\nassert solution(\"a+b-c+d+e-f+g\") == \"-\" + \"d-\" + \"+ \"f-\"\nassert solution(\"\") == \" <empty>\"\nassert solution(\"a+b-c\") == \"-\" + \"d-\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\"\nassert solution(\"a-b+d-c\") == \"<empty>\"\nassert solution(\"a+b-\") == \"d-\"\nassert solution(\"a-b+\") == \"<any>\"\n\n\"\"\""
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a+b-c') == '- +d-'\nassert solution('a-b+d-c') == '- +d-'\nassert solution('a+b-c+d-e') == '- +d-'\nassert solution('a-b+d-e') == '- +d-'\nassert solution('a-b+d-e+f-g+h') == '- +d-'\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a+b-c') == '- +d-'\nassert solution('a-b+d-c') == '- +d-'\nassert solution('a-b+d-c') == '- +d-'\nassert solution('a+b-c') == '- +d-'\n\"\"\""
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\"\nassert solution(\"a-b+d-c\") == \"-\" + \"d-\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\"\nassert solution(\"a-b+d-c\") == \"<empty>\"\n\nassert solution(\"knuth-morris-pratt\") == \"<any>\"\nassert solution(\"knuthmorrispratt\") == \"<empty>\"\n\"\"\"\n\nimport collections\nimport re\nimport unittest\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a+b-c') == '- +d-'\nassert solution('a-b+d-c') == '- +d-'\nassert solution('a+b-c+a-b-c') == '- +d- -d-'\nassert solution('a+b-c+a-b-c-a-b-c') == '- +d- -d-'\n\n\"\"\"\n\nimport re\nfrom collections import Counter\nimport string\n\ns = stdin.split('\\n')"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n0\") == '0'\nassert solution(\"3 0\\n2 6 6\") == '11'\nassert solution(\"3 1\\n2 6 6\") == '6'\nassert solution(\"3 2\\n2 6 6\") == '5'\nassert solution(\"3 3\\n2 6 6\") == '9'\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2 0') == '2'\nassert solution('1 0') == '1'\nassert solution('1 1') == '0'\nassert solution('1 1\\n1') == '0'\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\") == '0\\n1\\n3\\n2\\n3\\n5\\n3\\n'\n\nassert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\") == '0\\n1\\n3\\n2\\n3\\n5\\n3\\n'\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\") == \"0\\n1\\n3\\n2\\n3\\n5\\n3\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n0\") == \"0\"\nassert solution(\"3 0\\n2 6 6\") == \"11\"\nassert solution(\"1 1\\n0\\n7\\nt 3\\n\") == \"3\"\nassert solution(\"1 1\\n0\\n7\\n+ 0\") == \"1\"\nassert solution(\"1 1\\n0\\n7\\n- 0\") == \"1\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\") == \"0\\n1\\n3\\n2\\n3\\n5\\n3\\n\"\nassert solution(\"3 0\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10\") == \"11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\\n\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('0 1\\n2') == '1'\nassert solution('2 2\\n1\\n0\\n1') == '3'\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6''') == '0\\n1\\n3\\n2\\n3\\n5\\n3'\nassert solution('''1 1\n0\n7\n+ 2\n+ 3\n+ 4\n+ 5\n+ 6\n+ 7\n+ 8\n+ 9\n+ 10''') == '11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10'\nprint('Success')\n\n'''\n"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\") == \"0\"\nassert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\") == \"1\"\nassert solution(\"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\") == \"3\"\n\n\"\"\"\n\nimport sys\n\nn, t = map(int, sys.stdin.readline().split())\npos = list(map(int, sys.stdin.readline().split()))\nC = int(sys.stdin.readline())\nchanges = []\nfor i in range(C):\n    t, a = sys.stdin.readline().split()\n    changes.append([int(t), int(a)])\n\npos.sort()\n\nprevious_start_position = pos[0]\nprevious_end_position = pos[0]\ncurrent_start_position = pos[0]\ncurrent_end_position = pos[0]\ncount = 0\n\nfor i in range(1, n):\n    if pos[i] - previous_end_position > 1:\n        previous_start_position = pos[i]\n    if pos[i] - current_end_position > 1:\n        count += 1\n        current_start_position = pos[i]\n    previous_end_position = pos[i]\n    current_end_position = pos[i]"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n7\\n+0\\nt1\\n+1\\n-1\\n-1\\nt2\\n+4\\n+1\\n-2\\n-1\\nt3\\n+6\\n+2\\n+3\\n-2\\n-2\\nt4\\n-1\\n+2\\n+5\\n+6\\n+1\\n+2\\n-1\\n-2\\n-2\\nt5\\n-1\\n-3\\n+3\\n+1\\n-3\\n-1\\n-2\\n-2\\nt6\\n-3\\n-3\\n-5\\n+5\\n+3\\n+1\\n-1\\n+2\\n-2\\n-2\\n-2\\n-1\\n-2\\nt7\\n-2\\n-1\\n+6\\n-1\\n+6\\n+5\\n+4\\n+2\\n+2\\n-1\\n-1\\n-1\\n+6\\n+6\\n-1\\n-2\\n-3\\n-1\\n-3\\n-1\\n-2\\n-2\\n-2\\n-1\\n-1\\n-2\\n-2\\n-3\\n-1\\n-1\\n-3\\n-3\\n-5\\n-5\\n+1\\n+1\\n+1\\n+5\\n+2\\n+4\\n+1\\n+1\\n-2\\n-2\\n-2\\n-2\\n-3\\n-3\\n+4\\n+5\\n-3\\n+2\\n+1\\n+3\\n+4\\n+5\\n+3\\n-2\\n-2\\n-2\\n-3\\n+1\\n+1\\n-2\\n-3\\n-3\\n-1\\n-1\\n-2\\n-2\\n-1\\n-1\\n-1\\n+4\\n+4\\n+1\\n+1\\n+1\\n+1\\n+3\\n+1\\n+1\\n+1\\n+1\\n+1\\n+3\\n+4\\n+2\\n+3\\n-1\\n-3\\n-3\\n-1\\n-1\\n-1\\n+4\\n+4\\n-1\\n+1\\n+1\\n-1\\n-1\\n-3\\n-5\\n+1\\n-3\\n-5\\n-3\\n-3\\n-3\\n-2\\n-3\\n+4\\n+2\\n+2\\n-3\\n-2\\n-2\\n+3\\n+3\\n-3\\n-5\\n-5\\n-2\\n-2\\n-3\\n-2\\n+1\\n-2\\n+1\\n-1\\n-1\\n+3\\n+1\\n-3\\n-1\\n-1\\n+2\\n+3\\n+2\\n-1\\n-3\\n+3\\n-1\\n-1\\n+1\\n+1\\n+1\\n+1\\n+1\\n-1\\n+1\\n+3\\n+4\\n-1\\n+2\\n+2\\n+1\\n+3\\n+2\\n+3\\n+5\\n-1\\n+3\\n-1\\n-3\\n-3\\n-1\\n-2\\n-1\\n-3\\n-1\\n+4\\n-1\\n+3\\n+1\\n-2\\n+2\\n+1\\n+4\\n+2\\n+1\\n-1\\n+1\\n-1\\n+1\\n+4\\n+1\\n+2\\n+1\\n-1\\n+2\\n-1\\n+1\\n-1\\n-1\\n+1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1') == '2\\n4 6'\nassert solution('5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6') == '0\\n0'\n\n\"\"\"\n\n\"\"\"\nn, m = map(int, input().split())\ncables = [tuple(map(int, input().split())) for _ in range(m)]"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1') == '2\\n4 6'\nassert solution('7 8\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6') == '0\\n5 6'\n\"\"\""
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\nassert solution(\"7 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1') == '2\\n4 6'\n"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1') == '2\\n4 6'\nassert solution('5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6') == '0\\n'\n\n\"\"\"\nimport os\nimport sys\nimport collections\nimport copy\nfrom functools import reduce\nfrom itertools import chain\nfrom math import inf\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"..\"))\n\nfrom aoc import read_input\n\nINPUT = read_input(7, 2020)\n\nSWITCH = \"switch\"\nCABLE = \"cable\""
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n\"\"\") == \"2\\n4 6\"\nassert solution(\"\"\"\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n\"\"\") == \"0\\n4 6\"\n\n\"\"\"\nYour solution to this task has passed all the tests. This solution has the following\n\n* Runtime: 28 ms, faster than 100.00% of Python3 online submissions for Network Switching.\n* Memory Usage: 12.9 MB, less than 100.00% of Python3 online submissions for Network Switching.\n\"\"\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == '2\\n4 6'\nassert solution(\"7 8\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == '0'\nassert solution(\"7 8\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n2 7 2\") == '0'\nassert solution(\"7 8\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n2 7 2\\n3 6 1\") == '2\\n4 6'\n\n\"\"\""
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 2 2\\n\") == \"2\\n\"\nassert solution(\"5 5\\n1 2 2\\n2 3 2\\n3 4 2\\n1 4 3\\n4 5 3\\n1 5 6\\n\") == \"0\\n\"\nassert solution(\"6 4\\n1 2 2\\n2 3 2\\n3 4 2\\n1 4 3\\n4 5 3\\n5 6 3\\n1 5 6\\n\") == \"1\\n3 5\\n\"\nassert solution(\"5 5\\n1 2 2\\n2 3 2\\n3 4 2\\n4 5 3\\n1 5 6\\n\") == \"0\\n\"\n\n\"\"\""
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n\") == \"2\\n4 6\\n\"\nassert solution(\"7 7\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n\") == \"0\\n\"\nassert solution(\"8 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n\") == \"0\\n\"\nassert solution(\"7 6\\n1 2 3\\n2 4 3\\n3 5 3\\n1 6 2\\n1 7 2\\n2 7 1\\n\") == \"2\\n5 6\\n\"\n\n---"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\nassert solution(\"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\"\nassert solution(\"7 8\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\"\n\"\"\"\n\n\"\"\"\nThe idea is to set a count to zero at the beginning, and check whether a switch is connected to the switch a certain number of steps away.\nIn case a switch is connected to another switch, increment the count and reset it to zero.\nOnce a switch is disconnected, it's connected to none, so we can simply add the switch to the set of unused switches.\nThe number of unused switches is the number of switches that are not connected to the target switch (or the end of the list)\n\"\"\""
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6') == '4\\n5\\n6\\n1\\n2\\n3'\nassert solution('6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3') == '1\\n2\\n3'\n\n------Implementation------\n\n------Solution------\n\n------Time Complexity------\nTime complexity of this solution is O(N * Q) where N is the number of queries and Q is the number of queries.\n\n------Space Complexity------\nSpace complexity of this solution is O(N) where N is the number of queries.\n\n------Hints------\n-\n\n------Placeholders------\n\n\"\"\""
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\") == \"4\\n5\\n6\\n1\\n2\\n3\"\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\") == \"4\\n5\\n6\\n1\\n2\\n3\"\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\") == \"1\\n2\\n3\""
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(sample_input) == sample_output\n\"\"\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\") == \"4\\n5\\n6\\n1\\n2\\n3\""
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n') == '4\\n5\\n6\\n1\\n2\\n3'\nassert solution('6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n') == '1\\n2\\n3'\nassert solution('6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n') == '1\\n2\\n3'\nassert solution('6\\n2 1\\n2 2\\n2 3\\n1 1\\n1 2\\n1 3\\n') == '1\\n2\\n3'\nassert solution('6\\n2 1\\n2 2\\n2 3\\n1 1\\n1 2\\n1 3\\n') == '1\\n2\\n3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6') == '4\\n5\\n6\\n1\\n2\\n3'\n\"\"\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    12\n    1 1\n    1 2\n    1 3\n    1 1\n    1 2\n    1 3\n    2 1\n    2 2\n    2 3\n    2 4\n    2 5\n    2 6\n    \"\"\"\n) == \"\"\"\n    4\n    5\n    6\n    1\n    2\n    3\n    \"\"\"\n)\nprint('Success')\n"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n\") == \"4\\n5\\n6\\n1\\n2\\n3\"\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n\") == \"1\\n2\\n3\"\n\"\"\"\n\nimport sys\n\nn = int(input())\n\nfor _ in range(n):\n    query, *xs = sys.stdin.read().split()\n    xs = list(map(int, xs))\n    if query == '1':\n        print(xs[1])\n    else:\n        print(xs[-1])\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('CPCC') == 1\nassert solution('PPPPCCCC') == 8\n\"\"\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"CPCC\") == 1\nassert solution(\"PPCCCC\") == 8\n\"\"\"\nimport math"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CPCC\") == 1\nassert solution(\"PPPPCCCC\") == 8\n\"\"\""
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('CPCC') == 1\nassert solution('PPCC') == 1\n\"\"\""
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"C\") == 1\nassert solution(\"PP\") == 0\nassert solution(\"CC\") == 0\nassert solution(\"CCCC\") == 0\nassert solution(\"CCCPP\") == 2\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CPCC\") == 1\nassert solution(\"PPPPCCCC\") == 8\n\"\"\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"C\") == 0\nassert solution(\"CC\") == 0\nassert solution(\"CP\") == 1\nassert solution(\"CPCC\") == 1\nassert solution(\"CPCCP\") == 1\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('CPCC') == 1\nassert solution('PPP') == 0\nassert solution('PPPCCCC') == 8\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"CPCC\") == 1\nassert solution(\"PPPPCCCC\") == 8\n\"\"\"\n\ns = list(stdin)\nn = len(s)\nans = 0\n\nfor i in range(0, n-2):\n    if s[i] == 'C':\n        if s[i+1] == 'C':\n            if s[i+2] == 'P':\n                ans += 1\n                s[i] = 'P'\n                s[i+1] = 'P'\n                s[i+2] = 'C'\n\nprint(ans + 1)\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 1\\n1 2\\n2 3\\n2\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 2 1\n1 2\n2 3\n2\n3''') == '1 2 3'\n\nassert solution('''3 2 1\n1 2\n2 3\n2\n3''') == '3'\n\nassert solution('''3 2 1\n1 3\n2 3\n3\n3''') == ''\n\nassert solution('''3 2 1\n1 2\n2 3\n2\n3''') == '1 2 3'\n\nassert solution('''3 2 1\n1 2\n2 3\n3\n3''') == '3'"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\\n1 2\\n2 3\\n2\\n3\") == \"3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\\n3\") == \"3\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 1\\n1 3\\n2 3\\n3\\n') == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\\n1 2\\n2 3\\n2\\n\") == \"1 2 3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\\n\") == \"3\"\n\"\"\"\n\n\n\nd = {'1': '3', '2': '3', '3': '1'}"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 2 1\n1 2\n2 3\n2\n1 3\n2 3\n3''') == '1 2 3'\n\nassert solution('''3 2 1\n1 3\n2 3\n3''') == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\\n1 3\\n2 3\\n3\") == \"3\"\nassert solution(\"3 2 1\\n1 2\\n2 3\\n3\") == \"3\"\n\"\"\""
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2 1\n1 2\n2 3\n2\n3''') == '1 2 3'\nassert solution('''3 2 1\n1 3\n2 3\n3''') == '3'\nassert solution('''3 2 1\n1 2\n2 3\n2\n3''') == '1 2 3'\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\\n1 3\\n2 3\\n3\\n\") == \"3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n2\\n\") == \"1 2 3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\\n\") == \"1 2 3\"\n\"\"\""
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n2 4 2 3 4\") == \"39\"\n\"\"\"\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nprint(sum(sorted(a, reverse=True)[:k]))\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1\\n1 0 1 1 1') == '4'\nprint('Test passed')\n\n--------------------------------------------------"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n2 4 2 3 4\") == \"39\"\nassert solution(\"5 1\\n1 0 1 1 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\n\n\"\"\""
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n2 4 2 3 4\\n\") == \"39\"\nassert solution(\"5 1\\n1 0 1 1 1\\n\") == \"4\"\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\n\na = list(map(int, stdin.readline().split()))\n\nm = 0\nfor i in range(k):\n    m = max(m, a[i])\n\nprint(m)\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n2 4 2 3 4\") == \"39\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n2 4 2 3 4\") == \"39\""
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\n\n\"\"\"\n\nn, k = [int(x) for x in stdin.readline().split()]\na = [int(x) for x in stdin.readline().split()]\na.sort()\ns = 0\nfor i in range(0, k):\n    s += a[i]\n\nprint(s % 1000000007)\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\nstdin = stdin.readline()\na = list(map(int, stdin.split()))\n\nsum_ = 0\na.sort()\nfor i in range(k):\n    sum_ += a[-i - 1]\n\nprint(sum_ % 1000000007)"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"7\"\nassert solution(\"100 50\") == \"2\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('B') == 'B'\nassert solution('AB') == 'AB'\nassert solution('BBA') == 'BB'\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\nassert solution('5 5') == ''\n\nassert solution('1 2\\n3') == '1 1'\n\nassert solution('3 3\\nxxx') == '1 1'\n\nassert solution('2 2\\nxxxx') == '1 1'"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 3\nxx\nxxx\n...''') == '1 1 2\\n2 3 1'\nassert solution('''4 6\nxx....\nxx.xxx\n...xxx\n...xxx''') == '1 1 2\\n2 4 3'\nassert solution('''4 6\nxx....\nxxx.x\n...xxx\n...xxx''') == '1 3 1\\n3 4 3'\nassert solution('''4 6\nxxxx...\nxx.xxx\n...xxx\n...xxx''') == '1 1 1\\n2 3 1'\nassert solution('''4 6\nxxxx...\nxx.xxx\n...x.x\n...xxx''') == '1 3 1\\n2 3 1'"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n....\\nxxx\\n...\\nxxx') == '1 1 2\\n2 3 1'\n\"\"\""
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\nxx\\nxxx\\n...\") == \"1 1 2\"\n\n\"\"\""
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\nxx.\\nxxx\\n...\") == \"1 1 2\\n2 3 1\"\n\nassert solution(\"4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx\") == \"1 1 2\\n2 4 3\""
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\nxx.\\nxxx\\n...') == '1 1 2\\n2 3 1'\nassert solution('4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx') == '1 1 2\\n2 4 3'\n\"\"\"\n\nclass FloorPlan:\n    def __init__(self, line):\n        line = line.strip()\n        if len(line) == 1:\n            line += line\n        self.row, self.col = [int(i) for i in line.split()]\n        self.cells = [[None] * self.col for _ in range(self.row)]\n        self.buildings = {1: None, 2: None}\n\n    def __str__(self):\n        ret = str(self.row) +'' + str(self.col)\n        for r in range(self.row):\n            ret += '\\n'\n            for c in range(self.col):\n                if self.cells[r][c] is None:\n                    ret += '.'\n                else:\n                    ret += 'x' if self.cells[r][c] == 1 else '.'\n        return ret\n\n    def __repr__(self):\n        ret = str(self.row) +'' + str(self.col)\n        for r in range(self.row):\n            ret += '\\n'\n            for c in range(self.col):\n                if self.cells[r][c] is None:\n                    ret += '.'\n                else:\n                    ret += 'x' if self.cells[r][c] == 1 else '.'\n        return ret\n\n    def set_building(self, building_type, top_left_row, top_left_col, side_length):\n        self.buildings[building_type] = (top_left_row, top_left_col, side_length)\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n...\\nx...\\n.x..') == '1 1 2'\nassert solution('4 6\\nxxxx...\\nx....x\\nxx.xxx\\n.xxxxx\\nx....x') == '2 4 3'\nassert solution('4 6\\nxxxx...\\nx....x\\nxx.xxx\\n.xxxxx') == '2 4 3'\n\n\"\"\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\nxx\\nxxx\\n...\") == \"1 1 2\\n2 3 1\"\nassert solution(\"4 6\\nxx....\\nxx.xxx\\n...xxx\\n...xxx\") == \"1 1 2\\n2 4 3\"\nassert solution(\"4 5\\nxx.x\\n.x.x\\n.x.x\\n...x\") == \"1 1 1\\n1 2 1\""
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".xx\") == \"1 1 2\"\nassert solution(\".xxx\") == \"2 3 1\"\nassert solution(\".xxxx\") == \"2 4 1\"\nassert solution(\"..xxx\") == \"1 1 2\"\nassert solution(\"..xxxx\") == \"2 4 1\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == \"indistinguishable\"\n\"\"\""
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == \"indistinguishable\"\nassert solution(\"2 0 1\\n1 1 1\\n0 0 0\") == \"0\"\n\"\"\"\n\nimport sys\n\n_, a, b = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == \"indistinguishable\"\nassert solution(\"2 0 1\\n1 1 1\\n0 0 0\") == \"0\"\n\"\"\"\n\nimport sys\n\nclass Solver:\n    def __init__(self, input_data):\n        self.input = input_data.split('\\n')\n        self.n, self.a, self.b = list(map(int, self.input[0].split()))\n        self.route = {}\n        for i in range(1, len(self.input)):\n            a, b, tower = list(map(int, self.input[i].split()))\n            self.route[(a, b)] = tower\n\n    def solve(self):\n        turns = self.count_turns(self.a, self.b)\n        if turns[self.a] == turns[self.b]:\n            return 'indistinguishable'\n        return turns[self.a]\n\n    def count_turns(self, a, b):\n        queue = [(a, 0)]\n        visited = {a}\n        dist = {a: 0}\n        while queue:\n            curr, dist_curr = queue.pop(0)\n            for child in self.get_children(curr):\n                if child not in visited:\n                    visited.add(child)\n                    dist[child] = dist_curr + 1\n                    queue.append((child, dist_curr + 1))\n                    if child == b:\n                        return dist\n\n    def get_children(self, curr):\n        if curr not in self.route:\n            return []\n        return [self.route[curr], self.route[curr] ^ 1]\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == \"indistinguishable\"\nassert solution(\"2 0 1\\n1 1 1\\n0 0 0\") == \"0\"\nassert solution(\"1 1 1\\n0 0 0\") == \"0\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\"), \"indistinguishable\")"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == \"indistinguishable\"\n\n\"\"\"\n\nimport sys\n\nn, a, b = map(int, sys.stdin.readline().split())\na -= 1\nb -= 1\n\nmapp = []\nfor i in range(n):\n    l, r, t = map(int, sys.stdin.readline().split())\n    mapp.append([l, r, t])\n\nal = bfs(a, mapp)\nbl = bfs(b, mapp)\n\nminn = float(\"inf\")\nfor i, (l, r, t) in enumerate(mapp):\n    if t == 1:\n        if al[i] < bl[i]:\n            minn = min(minn, al[i] + bl[i] + 1)\n        else:\n            minn = min(minn, al[i] + bl[i])"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'indistinguishable'\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == \"indistinguishable\"\n\"\"\"\n\nimport sys\nfrom typing import List\nfrom collections import deque\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\\n\") == 'indistinguishable'\nassert solution(\"2 0 1\\n1 1 1\\n0 0 0\\n\") == '0'\n\nprint(solution(stdin.strip()))\n\n\"\"\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 2\\n1 2 1\\n0 2 0\\n0 1 0') == 'indistinguishable'\nassert solution('2 0 1\\n1 1 1\\n0 0 0') == '0'\nassert solution('5 4 4\\n1 3 0\\n0 0 1\\n4 3 3\\n3 4 4\\n0 0 0\\n4 4 4\\n1 4 0\\n1 3 0\\n0 0 1\\n4 3 3\\n3 4 4') == '0'\nassert solution('5 4 4\\n4 3 3\\n3 4 4\\n1 4 0\\n0 0 1\\n4 3 3\\n3 4 4') == 'indistinguishable'\nassert solution('5 4 4\\n3 4 4\\n1 4 0\\n0 0 1\\n4 3 3\\n3 4 4') == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\") == 'indistinguishable'\nassert solution(\"2 0 1\\n1 1 1\\n0 0 0\") == '0'\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"1001\") == \"1111\"\nassert solution(\"1001\") == \"1111\"\nassert solution(\"1001\") == \"1111\"\n\"\"\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '1110'\nassert solution('1110') == '1111'\nassert solution('1010') == '1011'\nassert solution('0110') == '1111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"1010\") == \"1110\"\nassert solution(\"1011\") == \"1111\"\n\nassert solution(\"0100\") == \"1100\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0110\\n1001') == '1111\\n0111\\n1110\\n1111'\nassert solution('10000\\n01010') == '1111\\n1111\\n1111\\n1111'\nassert solution('0110\\n1001\\n1111\\n1110') == '1111\\n1111\\n1110\\n1111'\nassert solution('10010\\n10010\\n01110\\n11010\\n11010') == '1111\\n1111\\n1111\\n1111\\n1111'\nassert solution('10010\\n10010\\n01110\\n11010\\n11010') == '1111\\n1111\\n1111\\n1111\\n1111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10111101010\") == \"0111111011\"\nassert solution(\"10111101101\") == \"1111111011\"\nassert solution(\"10111101010\") == \"1111111111\"\n\"\"\"\n\nfrom itertools import zip_longest"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"0110\"\n    \"1001\"\n    ) == \"1111\"\nassert solution(\n    \"0\"\n    \"1\"\n    ) == \"1\"\nassert solution(\n    \"11010\"\n    \"11010\"\n    ) == \"11010\"\nassert solution(\n    \"11010\"\n    \"11010\"\n    ) == \"11010\"\nassert solution(\n    \"11010\"\n    \"11010\"\n    ) == \"11010\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1101\") == \"1110\"\n\"\"\""
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('011') == '11'\nassert solution('101') == '1111'\nassert solution('10101010') == '11111111'\nassert solution('10101010') == '11111111'\nassert solution('10101010') == '11111111'\n\"\"\""
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"0110\"\n) == \"1111\"\nassert solution(\n    \"1001\"\n) == \"1110\"\nassert solution(\n    \"101010\"\n) == \"10101010\"\nassert solution(\n    \"1010\"\n) == \"1011\"\nassert solution(\n    \"101101010\"\n) == \"101101010\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10110') == '1111'\nassert solution('11110') == '111111111111'\nassert solution('10111') == '1111111111111111111111111111111111111111111111111111111111'\nassert solution
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101010') == '0+101010'\nassert solution('101101') == '0+101101'\nassert solution('11100111111') == '0+11100111111'\nassert solution('10111101101010') == '0+10111101101010'\nassert solution('10111101101011') == '0+10111101101011'\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101010') == '+101010'\n\nSample Case #1\n  10000\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n    0+0\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101010\") == \"101010\"\nassert solution(\"110101\") == \"1010-1\"\nassert solution(\"10000\") == \"1+0+0+0\"\nassert solution(\"1111\") == \"1111\"\nassert solution(\"0101010\") == \"10101010\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '+0'\nassert solution('1111') == '+000-'\n\"\"\"\n\nimport math\nimport sys\nfrom typing import List, Tuple, Union, Dict"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101') == '01'\nassert solution('1011') == '01+1'\nassert solution('1101') == '01-1'\n\nSample Input 1:\n13\nSample Output 1:\n11101+1\n\nSample Input 2:\n1234\nSample Output 2:\n1110-10-10-10\n\"\"\""
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100010') == '+010'\nassert solution('101010') == '+010'\nassert solution('111010') == '-010'\nassert solution('100001') == '+001'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10000\") == \"+0000\"\nassert solution(\"1111\") == \"+000-\"\n\"\"\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"0-1\"\nassert solution(\"100010\") == \"1-010\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10001') == '0-10001'\nassert solution('10010') == '0-10010'\nassert solution('101010') == '0-101010'\nassert solution('10101010') == '0-101010'\nassert solution('101010') == '0-101010'\n"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\") == \"9\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '6'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '55'\nprint('Passed!')\n\n---------------------------------------------------------------"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\") == \"9\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\"\"\") == \"9\"\n\n\"\"\"\nfrom collections import defaultdict\nfrom heapq import heappush, heappop"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2 1\\n1 2\\n1 3 3\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\") == \"9\"\nassert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\") == \"8\"\n\n------Problem Definition------\nA technician at a call center handles calls consecutively. The first call is always of type \u201ccall\u201d, after which the calls are of types \u201ctalk\u201d, \u201ctalk\u201d, \u201cno_problem\u201d, and so on. The calls are assigned a unique number.\n\nThe technician begins with a call on call number \u20181\u2019. The technician on call will always be busy. When the technician receives a call, they write down the number of the call and the type of call (or information about the call) on a piece of paper that can fit in their pocket. The technician then hands the paper to the person on their right, who must then read the paper and determine the next call to take. The next call will be assigned to the person on the person\u2019s right, and the process continues clockwise around the circle until a technician with the call \u2018n\u2019 is reached.\n\nThe calls are assigned the following types:\n\u201ccall\u201d\n\u201ctalk\u201d\n\u201cno_problem\u201d\nThe \u201cno_problem\u201d type is only used for calls that have nothing to say.\n\nSome calls have a \"problem\" type that is written on the paper. The problem can mean anything from broken wires to spilled paint to a microphone not picking up.\n\nIf the problem cannot be resolved by the technician on the call, they write down \u201crepair\u201d.\n\nThe calls are assigned a unique number when they arrive at the call center.\n\nThe call center is always in the \u201cidle\u201d state, which means that the technician on the call is free to handle other calls.\n\nDuring the processing of a call, the technician may be occupied by another call, but this only happens immediately after the current call is finished.\n\nA call center has a limited number of employees (technicians) who must be on call at all times.\n\nEach employee can handle at most two calls at a time.\n\nThe calls must be handled in the order they are received.\n\nA call that has a problem does not count as a call that needs to be handled by an employee.\n\nAll calls must be handled within 30 minutes.\n\nThe following is a sample input/output:\n\nSample Input:\n3\ncall\nno_problem\ncall\nno_problem\ncall\ntalk\nrepair\nSample Output:\n2\n\n-----Challenge-----\nWrite a program that will read the input and output the required answer.\n\n-----Sample Input-----\n5\ncall\nno_problem\ncall\nno_problem\ntalk\nno_problem\ncall\nno_problem\ntalk\nno_problem\nrepair\n-----Sample Output-----\n4\n\n-----Notes-----\n\nAll the numbers will be positive integers.\n\n\"\"\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4''') == '9'\nprint('Test cases passed!')\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\") == \"9\"\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\") == \"9\"\nassert solution(\"2 1 1 1\\n2 2\\n1\\n1\\n1 2 1\") == \"2\"\nassert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\") == \"9\"\n\"\"\"\n\nimport sys\nfrom math import inf"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\nprint(solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\"))\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\nprint(solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\"))"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000') == '2'\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\n\"\"\"\n\nn, m, k = map(int, stdin.readline().split())\ntrap = [0, 0]\ntrap[0] = int(stdin.readline().split()[1]) - 1\ntrap[1] = int(stdin.readline().split()[0]) - 1\n\narr = []\nfor i in range(k):\n    arr.append(list(map(int, stdin.readline().split())))\n\nprint(arr)\n\nans = 0\nfor i in range(n):\n    ans += arr[0][i]\n\nprint(ans)\n\nans = -1\nfor i in range(k):\n    num = arr[i][trap[0]]\n    direction = arr[i][trap[1]]\n    if direction == \"R\":\n        arr[i][trap[1]] = \"L\"\n    elif direction == \"L\":\n        arr[i][trap[1]] = \"R\"\n    elif direction == \"U\":\n        arr[i][trap[1]] = \"D\"\n    elif direction == \"D\":\n        arr[i][trap[1]] = \"U\"\n    print(arr)\n    if trap[0] == i and trap[1] == i:\n        ans = arr[i].count(\"X\")\n    for j in range(m):\n        arr[i][j] = abs(arr[i][j] - num)\n        ans += arr[i][j]\n\nprint(ans)\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430: \u0443\u0437\u043d\u0430\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u043a\u0443\u043d\u0434 \u044d\u0442\u043e\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0431\u0443\u0434\u0435\u0442 \u0432\u0435\u0441\u0442\u0438 \u0434\u0432\u0430 \u043b\u044e\u0434\u044f\n\n\u0418\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e, \u0447\u0442\u043e \u0447\u0438\u0441\u043b\u043e \u0431\u0443\u0434\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e 2.\n\n\u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u0442\u0435\u0441\u0442\u0435 \u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u0430 2, \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u043e\u043d\u0430 \u0431\u0443\u0434\u0435\u0442 \u0443\u0436\u0435 \u043f\u0440\u0435\u0432\u044b\u0441\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0438 \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430\u0434\u0451\u0436\u043d\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439.\n\n\u0422\u0430\u043a\u0436\u0435 \u0432 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0441\u043b\u043e\u0432\u0430\u0440\u044f, \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0432\u0438\u0434\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0435\u0439.\n\n\u0412\u0410\u0416\u041d\u041e! \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u043c\u0435\u0435\u0442 \u0432\u0438\u0434:\n\n{1: {1: ['1,1', 1],\n     2: ['2,1', 1],\n     3: ['3,1', 1],\n     4: ['4,1', 1],\n     5: ['5,1', 1],\n     6: ['6,1', 1],\n     7: ['7,1', 1],\n     8: ['8,1', 1],\n     9: ['9,1', 1],\n     10: ['10,1', 1],\n     11: ['11,1', 1],\n     12: ['12,1', 1],\n     13: ['13,1', 1],\n     14: ['14,1', 1],\n     15: ['15,1', 1],\n     16: ['16,1', 1],\n     17: ['17,1', 1],\n     18: ['18,1', 1],\n     19: ['19,1', 1],\n     20: ['20,1', 1],\n     21: ['21,1', 1],\n     22: ['22,1', 1],\n     23: ['23,1', 1],\n     24: ['24,1', 1],\n     25: ['25,1', 1],\n     26: ['26,1', 1],\n     27: ['27,1', 1],\n     28: ['28,1', 1],\n     29: ['29,1', 1],\n     30: ['30,1', 1],\n     31: ['31,1', 1],\n     32: ['32,1', 1],\n     33: ['33,1', 1],\n     34: ['34,1', 1],\n     35: ['35,1', 1],\n     36: ['36,1', 1],\n     37: ['37,1', 1],\n     38: ['38,1', 1],\n     39: ['39,1', 1],\n     40: ['40,1', 1],\n     41: ['41,1', 1],\n     42: ['42,1', 1],\n     43: ['43,1', 1],\n     44: ['44,1', 1],\n     45: ['45,1', 1],\n     46: ['46,1', 1],\n     47: ['47,1', 1],\n     48: ['48,1', 1],\n     49: ['49,1', 1],\n     50: ['50,1', 1],\n     51: ['51,1', 1],\n     52: ['52,1', 1],\n     53: ['53,1', 1],\n     54: ['54,1', 1],\n     55: ['55,1', 1],\n     56: ['56,1', 1],\n     57: ['57,1', 1],\n     58: ['58,1', 1],\n     59: ['59,1', 1],\n     60: ['60,1', 1],\n     61: ['61,1', 1],\n     62: ['62,1', 1],\n     63: ['63,1', 1],\n     64: ['64,1', 1],\n     65: ['65,1', 1],\n     66: ['66,1', 1],\n     67: ['67,1', 1],\n     68: ['68,1', 1],\n     69: ['69,1', 1],\n     70:"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 2 1 2 3') == 2\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\ns = 0\nl.sort()\nfor i in range(n - 1):\n    s += l[i + 1] - l[i]\nprint(s)\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == 2\n\"\"\"\nimport sys"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == \"2\"\nassert solution(\"8\\n1 2 4 1 1 2 5 1\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 2 1 2 3') == 2\n\"\"\""
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n2 2 1 2 3''') == 2\n\nassert solution('''8\n1 2 4 1 1 2 5 1''') == 4\n\n\"\"\"\n\nfrom math import log10\n\nN = int(input())\n\nbooks = list(map(int, input().split()))"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '6'\nassert solution('7\\n1 2 3 4 5 6 7') == '2'\nassert solution('8\\n1 2 4 5 6 7 8 9 10 11 12 13 14 15') == '7'\nassert solution('9\\n1 2 3 4 5 6 7 8 9') == '3'\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 2 1 2 3') == '2'\nassert solution('8\\n1 2 4 1 1 2 5 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 2 1 2 3') == 2\nassert solution('8\\n1 2 4 1 1 2 5 1') == 4\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == 2\nprint(solution('5\\n2 2 1 2 3'))\nassert solution('8\\n1 2 4 1 1 2 5 1') == 4\nprint(solution('8\\n1 2 4 1 1 2 5 1'))\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n2 2 1 2 3''') == 2\nassert solution('''8\n1 2 4 1 1 2 5 1''') == 4\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n\") == \"NE\\nNE\\nNE\"\n\"\"\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"D 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\") == \"NE\"\nassert solution(\"D 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\") == \"1\"\nassert solution(\"D 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\") == \"3\""
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\nD 1 2\\nD 1 3\\nD 1 4\\nD 1 5\\nP 1\\nP 2\\nP 3\\nP 4') == '1 2 4\\n1 3 5\\n2 4'\nassert solution('4\\nD 1 2\\nD 1 3\\nD 1 4\\nD 1 5\\nP 1\\nP 2\\nP 3\\nP 4') == '1 2 4\\n1 3 5\\n2 3\\n1 4\\n1 5\\n'\n\nimport sys\n\nn = int(sys.stdin.readline())\nwishes = {}\nfor i in range(n):\n    line = sys.stdin.readline().strip().split(' ')\n    if line[0] == 'D':\n        wishes[int(line[1])] = int(line[2])\n    elif line[0] == 'P':\n        wishes[int(line[1])] = -1\n\nwishes = sorted(wishes.items())\nfor w in wishes:\n    print(w[1], w[0])\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n\"\"\") == \"NE\\nNE\\nNE\\n\"\nassert solution(\"\"\"6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\") == \"3\\n1\\n\"\n\n\"\"\"\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"D 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\") == \"NE\\nNE\\nNE\"\nassert solution(\"D 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\") == \"3\\n1\"\nprint('Success')"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n\") == \"NE\\nNE\\nNE\"\n\"\"\""
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n\"\"\"\n) == \"\"\"\nNE\nNE\nNE\n\"\"\"\n\nassert solution(\n\"\"\"\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\"\n) == \"\"\"\n3\n1\n\"\"\"\n\nassert solution(\n\"\"\"\n7\nD 4 4\nD 1 2\nD 2 4\nP 1\nP 2\nP 3\nP 4\n\"\"\"\n) == \"\"\"\n1\nNE\n\"\"\"\n\nassert solution(\n\"\"\"\n3\nD 2 4\nD 3 2\nP 1\n\"\"\"\n) == \"\"\"\nNE\n\"\"\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 8\\n2 4\\n5 6\\n2\\n4\\n') == '3\\n1\\n'\nassert solution('8 8\\n2 4\\n5 6\\n2\\n4\\n') == 'NE\\nNE\\n'\nassert solution('3 5\\n1 1\\n1 2\\n2 4\\n2\\n') == '1\\n1\\n'\nassert solution('3 5\\n1 2\\n1 1\\n2 4\\n2\\n') == '2\\n2\\n'\nassert solution('3 5\\n1 3\\n1 1\\n2 4\\n2\\n') == 'NE\\n'\n"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\nD 1 1\\nP 1\\nD 1 1\\nP 1\\nP 1\\nP 1') == '1'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n') == '3'"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\") == 'NE\\nNE\\nNE'\nassert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\") == '1'\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\") == \"2\"\nassert solution(\"2 3 5 6\\n1 1\\n1 1 6\\n1 2 2\") == \"5\"\n\nprint(\"Success\")\n\n\"\"\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 5 6\\n1 1\\n1 1 6\\n1 2 2\\n') == 5\n\n\"\"\""
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2') == '2'\n\"\"\"\n\nfrom __future__ import annotations\n\nimport re\nfrom itertools import permutations\nfrom math import inf\nfrom typing import Dict, List, Set, Tuple\n\nINPUT_RE = re.compile(r'(\\d+) (\\d+) (\\d+) (\\d+)')\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\") == \"2\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('2 2 1 10') == '2'\nassert solution('2 3 5 6') == '5'\n\nassert solution('') == ''\nassert solution('2 3 5 6') == '5'"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2') == '2'\nassert solution('2 3 5 6\\n1 1\\n1 1 6\\n1 2 2') == '5'\n\"\"\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\") == \"2\"\n\nassert solution(\"2 3 5 6\\n1 1\\n1 1 6\\n1 2 2\") == \"5\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\") == \"2\"\n\nassert solution(\"2 3 5 6\\n1 1\\n1 1 6\\n1 2 2\") == \"5\"\n\nprint(solution(input()))"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2') == 2\nassert solution('2 3 5 6\\n1 1\\n1 1 6\\n1 2 2') == 5"
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2') == '2'\n\"\"\"\n\nfrom collections import Counter, defaultdict\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'\n\"\"\"\n\nN = int(input())\ndata = [tuple(map(float, input().split())) for i in range(N)]"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'\n\nprint(solution(stdin))\n\"\"\"\n\nimport math\n\nclass Error(Exception):\n    pass\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n''') == '2.0000000000'\nassert solution('''\n5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5\n''') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\n\"\"\"\nfrom math import pi\nfrom typing import List, NamedTuple\n\n\nclass Pnt(NamedTuple):\n    x: float\n    y: float\n    z: float\n\n    def __add__(self, other):\n        return Pnt(self.x + other.x, self.y + other.y, self.z + other.z)\n\n    def __sub__(self, other):\n        return Pnt(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def __mul__(self, other: float):\n        return Pnt(self.x * other, self.y * other, self.z * other)\n\n    def __rmul__(self, other: float):\n        return Pnt(self.x * other, self.y * other, self.z * other)\n\n    def to_tuple(self):\n        return (self.x, self.y, self.z)\n\n    def to_string(self):\n        return f'{self.x} {self.y} {self.z}'\n\n    def to_dict(self):\n        return {'x': self.x, 'y': self.y, 'z': self.z}\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5\\n\") == \"2.0000000000\""
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2''') == '2.0000000000'\nassert solution('''5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5''') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\") == \"2.0000000000\"\n\nassert solution(\"5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5\") == \"2.0000000000\"\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\") == \"2.0000000000\"\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n\"\"\") == \"2.0000000000\"\n\n\"\"\"\nThis problem was asked by Google.\n\nGiven a sorted list of numbers, square the elements and give the output in sorted order.\n\nFor example, given [-9, -2, 0, 2, 3], return [0, 4, 4, 9, 81].\n\"\"\""
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 9 5\") == \"1\\n5\"\nassert solution(\"1 100 10\") == \"9\\n19\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\nassert solution('1 100 15') == '100'\n\n'''"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\nassert solution(\"5 42 14\") == \"14\"\n\"\"\""
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 9 5') == '1\\n5'\nassert solution('1 100 10') == '9\\n19'\n\"\"\"\n\nA, B, S = input().split()\nA = int(A)\nB = int(B)\nS = int(S)"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\nassert solution(\"1 200 10\") == \"19\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 9 5\") == \"1\\n5\"\nassert solution(\"1 100 10\") == \"9\\n19\"\n\"\"\""
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n\"\"\"\n\na, b, s = map(int, input().split())\ncount = 0\nfor i in range(a, b + 1):\n    if sum(int(j) for j in str(i)) == s:\n        count += 1\nprint(count)\nprint(min(i for i in range(a, b + 1) if sum(int(j) for j in str(i)) == s))\n"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\nassert solution('1 9 4') == '0'\nassert solution('1 9 1') == '1'\nassert solution('1 1000 1') == '1000'\n\nprint(solution(input()))"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 9 5\\n\") == '1\\n5\\n'\nassert solution(\"1 100 10\\n\") == '9\\n19\\n'"
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n\nimport re"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n1 1\n1\n1\n\"\"\"\n) == \"1\\n1\\n\"\nassert solution(\n\"\"\"\n4 5\n4 1 2 4 4\n4 3 2 1\n\"\"\"\n) == \"7\\n4 4 2 4 4 1 4\\n\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1 3 2'\nassert solution('1 3 2') == '1 2 3'\nassert solution('1 2 4 3') == '1 2 3 4'\nassert solution('1 3 2 4') == '1 4 3 2'\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n1\\n1\\n\") == \"1\"\nassert solution(\"4 5\\n4 1 2 4 4\\n4 3 2 1\\n\") == \"7\"\n\n\"\"\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n4 1 2 4 4\\n4 3 2 1') == '7\\n4 4 2 4 4 1 4'"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n1\\n1\") == \"1\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n1\\n1\") == \"1\"\nassert solution(\"4 5\\n4 1 2 4 4\\n4 3 2 1\") == \"7\\n4 4 2 4 4 1 4\"\nassert solution(\"8 5\\n8 3 6 1 5 7 4\\n8 5 3 7 1 2 4\") == \"8\\n8 5 3 7 1 1 4 4\"\nassert solution(\"7 5\\n7 5 4 2 1 3\\n7 5 2 3 4 1\") == \"7\\n7 5 2 3 3 4 1\"\nassert solution(\"5 7\\n5 4 6 1 7 2 5\\n5 6 2 7 1 3 4\") == \"5\\n5 6 2 4 6 4 2\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('1 1\\n1') == '1'\nassert solution('1 1\\n1\\n1') == '1'\nassert solution('1 1\\n1\\n1\\n1') == '1'\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n1 1\n1\n1\n''') == '1'\n\nassert solution('''\n3 2\n1 2 3\n2 3 2 1\n3 2\n''') == '6'\n\nassert solution('''\n5 5\n1 2 3 4 5\n1 3 2 5 4\n3 5 2 4 1\n2 4 5 3 1\n2 5 1 3 4\n''') == '15'"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n1\\n1') == '1'\nassert solution('4 5\\n4 1 2 4 4\\n4 3 2 1') == '7\\n4 4 2 4 4 1 4'\n\"\"\"\n\nn, m = list(map(int, input().split(' ')))\nnames = list(map(int, input().split(' ')))\nqueue = list(map(int, input().split(' ')))"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n1\\n1\\n\") == \"1\"\nassert solution(\"4 5\\n4 1 2 4 4\\n4 3 2 1\\n\") == \"7\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n\nprint(solution(\"2 10 3 2\"))\nprint(solution(\"10 10 5 0\"))\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n\"\"\""
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 10 3 2\\n\") == \"4\"\nassert solution(\"10 10 5 0\\n\") == \"10\"\n\"\"\""
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"2 10 4 2\") == \"12\"\nassert solution(\"3 10 5 1\") == \"8\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 3 2\") == 4\nassert solution(\"10 10 5 0\") == 10\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1\n1\n1\n1\n''') == '1'\nassert solution('''2 10 3 2\n''') == '2'\nassert solution('''3 10 5 0\n''') == '3'\nassert solution('''1\n2\n3\n3\n''') == '3'\nassert solution('''3 10 5 0\n''') == '3'\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\nassert solution(\"10 1000 50 0\") == \"10\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 20\", \"0123456789\") == \"10\"\nassert solution(\"6 100 9294\", \"23689\") == \"111\""
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 20\\n0123456789\") == \"10\"\nassert solution(\"6 100 9294\\n23689\") == \"111\"\n\"\"\""
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 20\\n0123456789') == '10'\nassert solution('6 100 9294\\n23689') == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n\"\"\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 20\\n0123456789') == '10'\nassert solution('6 100 9294\\n23689') == '111'\nassert solution('4 9 5\\n34') == '0'\nassert solution('2 9 2\\n09') == '0'\n\n\"\"\"\nfrom typing import List\nfrom collections import deque\n\n\nclass Solution:\n    def __init__(self, digits: List[str]):\n        self.digits = digits\n\n    def get_digits(self, n: int) -> deque:\n        return deque(d for d in str(n) if d in self.digits)\n\n    def get_multiples(self, a: int, b: int, digits: deque) -> int:\n        m = 0\n        for i in range(a, b + 1):\n            if len(self.get_digits(i)) == len(digits):\n                m += 1\n        return m\n\n    def solution(self, stdin: str) -> str:\n        X, A, B = map(int, stdin.split(' '))\n        digits = deque(self.get_digits(X))\n        res = self.get_multiples(A, B, digits)\n        return str(res)\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n\"\"\"\n\n\"\"\"\nWrite 5 lines of code to test the correctness of solution:\nZvonko is playing with digits again, even though his mother has warned him that he is doing too much math and should go outside to play with his friends.\n\nIn his latest game, Zvonko looks for multiples of an integer $X$, composed only of certain digits. A multiple of $X$ is any number divisible by $X$.\n\nIn order to ruin Zvonko\u2019s fun, his mother decided to get a program that solves the problem. Write a program that calculates how many multiples of $X$ are between $A$ and $B$ (inclusive), such that, when written in decimal, they contain only certain allowed digits.\n\n-----Input-----\nThe first line of input contains three integers $X$, $A$ and $B$ ($1 \\le X < 10^{11}$, $1 \\le A \\le B < 10^{11}$). The second line contains the allowed digits. The digits will be given with no spaces, sorted in increasing order and without duplicates. There will be at least one allowed digit.\n\n-----Output-----\nOutput the number of multiples Zvonko can make on a single line.\n\n-----Examples-----\nSample Input 1:\n2 1 20\n0123456789\nSample Output 1:\n10\n\nSample Input 2:\n6 100 9294\n23689\nSample Output 2:\n111\n\"\"\""
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 20\") == \"10\"\n\n\"\"\"\n\nX = list(map(int, stdin.split()))\nX, A, B = X[0], X[1], X[2]\nallowed = list(stdin.split())\nallowed = set(allowed)\nallowed = sorted(list(allowed))"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 20\\n0123456789\") == \"10\"\nassert solution(\"6 100 9294\\n23689\") == \"111\"\n\"\"\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\""
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 2.666667\"\nassert solution(\"5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 3.666667\"\n\n\"\"\"\n\nimport sys\nimport io\n\n\nclass CommandLine:\n\n    def __init__(self):\n        pass\n\n    def get_input(self):\n        if len(sys.argv) > 1:\n            input_data = list()\n            for i in range(1, len(sys.argv)):\n                input_data.append(sys.argv[i])\n\n            return input_data\n\n        buffer = io.StringIO(input())\n        return buffer\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 2.666667\"\nassert solution(\"5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 3.666667\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\\n') == '1.500000 2.666667'\nassert solution('5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\\n') == '1.500000 3.666667'\n\"\"\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 2.666667'"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 3.666667\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 3.666667'"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 2.666667'\n\"\"\"\n\nimport sys\n\nn, t = map(int, sys.stdin.readline().split())\n\nresult_in, result_remote = 0, 0\n\nfor _ in range(n):\n    [d, r, k] = map(int, sys.stdin.readline().split())\n    if r == 'R':\n        result_remote += d + k\n    else:\n        result_in += d + k\n\nprint('{:.6f} {:.6f}'.format(result_in / t, result_remote / t))\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 2.666667\"\nassert solution(\"1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 3.666667\""
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == '1.500000 2.666667'"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 6\n101010\n111001\n101001''') == '3'\nassert solution('''4 5\n10010\n01010\n10101\n01001''') == '3'"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 6\\n101010\\n111001\\n101001') == 3\n\"\"\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == 3\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 5\n10010\n01010\n10101\n01001''') == 3\n\nassert solution('''3 6\n101010\n111001\n101001''') == 3\n\nassert solution('''4 5\n10010\n01010\n10101\n01001''') == -1\n\nprint('Success')"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == 3\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == 3\nassert solution(\"3 6\\n101010\\n111001\\n101001\") == -1\nassert solution(\"4 5\\n111011\\n101010\\n101010\\n101010\") == 1\nassert solution(\"4 5\\n111011\\n101010\\n101010\\n101010\") == 1\n\nprint(\"Well done, mister!\")\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\\n\") == '3'\n\n\"\"\""
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6\\n101010\\n111001\\n101001') == '3\\n3\\n3'\n\n\"\"\""
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == 3\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == 3\n\n\"\"\"\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"3 6\\n101010\\n111001\\n101001\"), 3)\n        self.assertEqual(solution(\"4 5\\n10010\\n01010\\n10101\\n01001\"), 3)\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == 3\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nThe first will contain two integers, $R$ and $C$, smaller than or equal to $300$. The next $R$ lines will each contain $C$ characters (\u20180\u2019 or \u20181\u2019) with no spaces.\n\n[output] string\n\nThe size of the largest killer on a single line, or output $-1$ if there are no square killers.\n\"\"\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 6\\n101010\\n111001\\n101001') == '3'\nassert solution('4 5\\n10010\\n01010\\n10101\\n01001') == '3'\n\"\"\""
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n6 -1\\n3 5\\n-1 -1\") == \"3 4\\n3 -1\"\n\"\"\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n\") == \"3 -1\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n4\\n6\\n-1\\n3\\n5\\n-1\\n\") == \"3\\n4\\n\"\nassert solution(\"3\\n-1\\n-1\\n3\\n5\\n1\\n2\\n\") == \"3\\n-1\\n\"\nassert solution(\"5\\n0\\n0\\n0\\n0\\n0\\n\") == \"0\\n0\\n\"\nassert solution(\"5\\n0\\n0\\n1\\n0\\n0\\n\") == \"0\\n0\\n\"\nassert solution(\"5\\n0\\n0\\n1\\n0\\n0\\n\") == \"0\\n0\\n\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\") == \"3 -1\"\nassert solution(\"4\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\") == \"-3 -1\"\n\"\"\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0\\n0\\n0\\n1\\n-1\\n') == '-1\\n1\\n'\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n\") == \"-3 -1\\n3 1\"\nassert solution(\"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\\n\") == \"3 4\\n3 -1\"\nassert solution(\"3\\n2 4\\n3 5\\n-1 -1\\n\") == \"2 4\\n2 -1\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n\") == \"3 -1\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n\") == \"3 1\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n') == '-3 -1'\nassert solution('4\\n2 4\\n6 -1\\n3 5\\n-1 -1\\n') == '3 4'\n\"\"\"\n\nimport math\n\nassert math.gcd(3, 5) == 1\nassert math.gcd(3, 5) == math.gcd(5, 3)\nassert math.gcd(5, 2) == 1\n"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n') == '3 1\\n3 -1'\n"
    }
]